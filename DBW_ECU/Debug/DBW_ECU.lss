
DBW_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d6d8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b4  20000000  0000d6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200b4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200b4  2**0
                  CONTENTS
  4 .bss          00016140  200000c0  0000d7a0  000200c0  2**5
                  ALLOC
  5 .stack        00010000  20016200  000238e0  000200c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006d187  00000000  00000000  0002013b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ad13  00000000  00000000  0008d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000245a4  00000000  00000000  00097fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ea8  00000000  00000000  000bc579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000020e8  00000000  00000000  000be421  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00043c0e  00000000  00000000  000c0509  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d9bf  00000000  00000000  00104117  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00131cf8  00000000  00000000  00131ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000600c  00000000  00000000  002637d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 62 02 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .b. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	05 9a 00 00 ed 02 00 00 00 00 00 00 95 9a 00 00     ................
      3c:	f5 9a 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 91 17 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	9d 17 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	55 1d 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     U...............
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 65 18 00 00     ............e...
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 95 22 00 00 ed 02 00 00     ........."......
     1f4:	ed 02 00 00 ed 02 00 00 a9 22 00 00 bd 22 00 00     ........."..."..
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000c0 	.word	0x200000c0
     280:	00000000 	.word	0x00000000
     284:	0000d6d8 	.word	0x0000d6d8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000d6d8 	.word	0x0000d6d8
     2c4:	200000c4 	.word	0x200000c4
     2c8:	0000d6d8 	.word	0x0000d6d8
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	ethernet_phys_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000905 	.word	0x00000905
     2e4:	00000e89 	.word	0x00000e89
     2e8:	000098c5 	.word	0x000098c5

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b15      	ldr	r3, [pc, #84]	; (348 <Reset_Handler+0x58>)
     2f4:	4a15      	ldr	r2, [pc, #84]	; (34c <Reset_Handler+0x5c>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d009      	beq.n	30e <Reset_Handler+0x1e>
     2fa:	4b13      	ldr	r3, [pc, #76]	; (348 <Reset_Handler+0x58>)
     2fc:	4a13      	ldr	r2, [pc, #76]	; (34c <Reset_Handler+0x5c>)
     2fe:	e003      	b.n	308 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     300:	6811      	ldr	r1, [r2, #0]
     302:	6019      	str	r1, [r3, #0]
     304:	3304      	adds	r3, #4
     306:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     308:	4911      	ldr	r1, [pc, #68]	; (350 <Reset_Handler+0x60>)
     30a:	428b      	cmp	r3, r1
     30c:	d3f8      	bcc.n	300 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <Reset_Handler+0x64>)
     310:	e002      	b.n	318 <Reset_Handler+0x28>
                *pDest++ = 0;
     312:	2200      	movs	r2, #0
     314:	601a      	str	r2, [r3, #0]
     316:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x68>)
     31a:	4293      	cmp	r3, r2
     31c:	d3f9      	bcc.n	312 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x6c>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x70>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x74>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x78>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x54>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	0000d6d8 	.word	0x0000d6d8
     350:	200000b4 	.word	0x200000b4
     354:	200000c0 	.word	0x200000c0
     358:	20016200 	.word	0x20016200
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	0000c08d 	.word	0x0000c08d
     368:	00009601 	.word	0x00009601

0000036c <SetSafetyLight1On>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     36c:	b920      	cbnz	r0, 378 <SetSafetyLight1On+0xc>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     36e:	2201      	movs	r2, #1
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <SetSafetyLight1On+0x18>)
     372:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     376:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     378:	2201      	movs	r2, #1
     37a:	4b02      	ldr	r3, [pc, #8]	; (384 <SetSafetyLight1On+0x18>)
     37c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	41008000 	.word	0x41008000

00000388 <SetSteerDirection>:
     388:	b918      	cbnz	r0, 392 <SetSteerDirection+0xa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	4b03      	ldr	r3, [pc, #12]	; (39c <SetSteerDirection+0x14>)
     38e:	615a      	str	r2, [r3, #20]
     390:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     392:	2280      	movs	r2, #128	; 0x80
     394:	4b01      	ldr	r3, [pc, #4]	; (39c <SetSteerDirection+0x14>)
     396:	619a      	str	r2, [r3, #24]
     398:	4770      	bx	lr
     39a:	bf00      	nop
     39c:	41008000 	.word	0x41008000

000003a0 <SetSteeringTorque>:
	SetSafetyLight2On(reverse);
}

//Applies power to the steering motor as duty cycle percentage
void SetSteeringTorque(float duty_cycle)
{
     3a0:	b510      	push	{r4, lr}
     3a2:	ed2d 8b02 	vpush	{d8}
     3a6:	ee07 0a90 	vmov	s15, r0
	if(duty_cycle < 0)
     3aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     3b2:	d435      	bmi.n	420 <SetSteeringTorque+0x80>
		duty_cycle = 0;
	else if (duty_cycle > 1.0)
     3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     3b8:	eef4 7ac7 	vcmpe.f32	s15, s14
     3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     3c0:	dd01      	ble.n	3c6 <SetSteeringTorque+0x26>
		duty_cycle = 1;
     3c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	
	duty_cycle = 1 - duty_cycle;
	
	duty_cycle = duty_cycle * 0.6;
     3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     3ca:	ee77 7a67 	vsub.f32	s15, s14, s15
     3ce:	ee17 0a90 	vmov	r0, s15
     3d2:	4b19      	ldr	r3, [pc, #100]	; (438 <SetSteeringTorque+0x98>)
     3d4:	4798      	blx	r3
     3d6:	a316      	add	r3, pc, #88	; (adr r3, 430 <SetSteeringTorque+0x90>)
     3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
     3dc:	4c17      	ldr	r4, [pc, #92]	; (43c <SetSteeringTorque+0x9c>)
     3de:	47a0      	blx	r4
     3e0:	4b17      	ldr	r3, [pc, #92]	; (440 <SetSteeringTorque+0xa0>)
     3e2:	4798      	blx	r3
     3e4:	ee08 0a10 	vmov	s16, r0
		
	const static int STEERING_TORQUE_FREQ_TICKS = PWM_TICKS_PER_SECOND / STEERING_TORQUE_FREQ;
	pwm_set_parameters(&PWM_SteeringTorque, STEERING_TORQUE_FREQ_TICKS, duty_cycle * STEERING_TORQUE_FREQ_TICKS);
     3e8:	eddf 7a16 	vldr	s15, [pc, #88]	; 444 <SetSteeringTorque+0xa4>
     3ec:	ee68 7a27 	vmul.f32	s15, s16, s15
     3f0:	4c15      	ldr	r4, [pc, #84]	; (448 <SetSteeringTorque+0xa8>)
     3f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     3f6:	ee17 2a90 	vmov	r2, s15
     3fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
     3fe:	4620      	mov	r0, r4
     400:	4b12      	ldr	r3, [pc, #72]	; (44c <SetSteeringTorque+0xac>)
     402:	4798      	blx	r3
	pwm_enable(&PWM_SteeringTorque);
     404:	4620      	mov	r0, r4
     406:	4b12      	ldr	r3, [pc, #72]	; (450 <SetSteeringTorque+0xb0>)
     408:	4798      	blx	r3
     40a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     412:	dd08      	ble.n	426 <SetSteeringTorque+0x86>
     414:	2240      	movs	r2, #64	; 0x40
     416:	4b0f      	ldr	r3, [pc, #60]	; (454 <SetSteeringTorque+0xb4>)
     418:	619a      	str	r2, [r3, #24]

	gpio_set_pin_level(SteeringEnable, duty_cycle > 0.0);
}
     41a:	ecbd 8b02 	vpop	{d8}
     41e:	bd10      	pop	{r4, pc}
		duty_cycle = 0;
     420:	eddf 7a0d 	vldr	s15, [pc, #52]	; 458 <SetSteeringTorque+0xb8>
     424:	e7cf      	b.n	3c6 <SetSteeringTorque+0x26>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     426:	2240      	movs	r2, #64	; 0x40
     428:	4b0a      	ldr	r3, [pc, #40]	; (454 <SetSteeringTorque+0xb4>)
     42a:	615a      	str	r2, [r3, #20]
}
     42c:	e7f5      	b.n	41a <SetSteeringTorque+0x7a>
     42e:	bf00      	nop
     430:	33333333 	.word	0x33333333
     434:	3fe33333 	.word	0x3fe33333
     438:	0000ba91 	.word	0x0000ba91
     43c:	0000bb39 	.word	0x0000bb39
     440:	0000bfed 	.word	0x0000bfed
     444:	43c80000 	.word	0x43c80000
     448:	20012938 	.word	0x20012938
     44c:	000013a9 	.word	0x000013a9
     450:	0000136d 	.word	0x0000136d
     454:	41008000 	.word	0x41008000
     458:	00000000 	.word	0x00000000

0000045c <SetAcceleration>:
	pwm_enable(&PWM_FrontBrake);
 }

//Sets the acceleration value to the specified duty cycle
void SetAcceleration(float duty_cycle)
{	
     45c:	b510      	push	{r4, lr}
     45e:	ed2d 8b02 	vpush	{d8}
     462:	ee08 0a10 	vmov	s16, r0
	const static int ACCELERATION_FREQ_TICKS = PWM_TICKS_PER_SECOND / ACCELERATION_FREQ;
	pwm_set_parameters(&PWM_Acceleration, ACCELERATION_FREQ_TICKS, duty_cycle * ACCELERATION_FREQ_TICKS);
     466:	eddf 7a11 	vldr	s15, [pc, #68]	; 4ac <SetAcceleration+0x50>
     46a:	ee68 7a27 	vmul.f32	s15, s16, s15
     46e:	4c10      	ldr	r4, [pc, #64]	; (4b0 <SetAcceleration+0x54>)
     470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     474:	ee17 2a90 	vmov	r2, s15
     478:	f642 61e0 	movw	r1, #12000	; 0x2ee0
     47c:	4620      	mov	r0, r4
     47e:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <SetAcceleration+0x58>)
     480:	4798      	blx	r3
	pwm_enable(&PWM_Acceleration);
     482:	4620      	mov	r0, r4
     484:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <SetAcceleration+0x5c>)
     486:	4798      	blx	r3

	if(duty_cycle > 0)
     488:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     490:	dd06      	ble.n	4a0 <SetAcceleration+0x44>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     492:	2202      	movs	r2, #2
     494:	4b09      	ldr	r3, [pc, #36]	; (4bc <SetAcceleration+0x60>)
     496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	else
	{
		gpio_set_pin_level(AccelerationEnable, 0);
	}
}
     49a:	ecbd 8b02 	vpop	{d8}
     49e:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a0:	2202      	movs	r2, #2
     4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <SetAcceleration+0x60>)
     4a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     4a8:	e7f7      	b.n	49a <SetAcceleration+0x3e>
     4aa:	bf00      	nop
     4ac:	463b8000 	.word	0x463b8000
     4b0:	20012900 	.word	0x20012900
     4b4:	000013a9 	.word	0x000013a9
     4b8:	0000136d 	.word	0x0000136d
     4bc:	41008000 	.word	0x41008000

000004c0 <SteeringEncoder_IRQ_init>:
struct pwm_descriptor BRAKE;

struct mac_async_descriptor COMMUNICATION_IO;

void SteeringEncoder_IRQ_init(void)
{
     4c0:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     4c2:	2240      	movs	r2, #64	; 0x40
     4c4:	4b26      	ldr	r3, [pc, #152]	; (560 <SteeringEncoder_IRQ_init+0xa0>)
     4c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ca:	4a26      	ldr	r2, [pc, #152]	; (564 <SteeringEncoder_IRQ_init+0xa4>)
     4cc:	6953      	ldr	r3, [r2, #20]
     4ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     4d2:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4d4:	4b24      	ldr	r3, [pc, #144]	; (568 <SteeringEncoder_IRQ_init+0xa8>)
     4d6:	2201      	movs	r2, #1
     4d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4dc:	4923      	ldr	r1, [pc, #140]	; (56c <SteeringEncoder_IRQ_init+0xac>)
     4de:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     4e2:	4823      	ldr	r0, [pc, #140]	; (570 <SteeringEncoder_IRQ_init+0xb0>)
     4e4:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ec:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
     4f0:	f041 0104 	orr.w	r1, r1, #4
     4f4:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4f8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fc:	f893 21c0 	ldrb.w	r2, [r3, #448]	; 0x1c0
	tmp &= ~PORT_PINCFG_PMUXEN;
     500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     504:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     508:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50c:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     510:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     514:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     518:	2280      	movs	r2, #128	; 0x80
     51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51e:	4915      	ldr	r1, [pc, #84]	; (574 <SteeringEncoder_IRQ_init+0xb4>)
     520:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     524:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     52c:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     530:	f041 0104 	orr.w	r1, r1, #4
     534:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     538:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     550:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     554:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(encoder_B, PINMUX_PB07A_EIC_EXTINT7);

	ext_irq_init();
     558:	4b07      	ldr	r3, [pc, #28]	; (578 <SteeringEncoder_IRQ_init+0xb8>)
     55a:	4798      	blx	r3
     55c:	bd08      	pop	{r3, pc}
     55e:	bf00      	nop
     560:	40001c00 	.word	0x40001c00
     564:	40000800 	.word	0x40000800
     568:	41008000 	.word	0x41008000
     56c:	40020001 	.word	0x40020001
     570:	c0020000 	.word	0xc0020000
     574:	40020080 	.word	0x40020080
     578:	00000fb1 	.word	0x00000fb1

0000057c <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     57c:	4b10      	ldr	r3, [pc, #64]	; (5c0 <TARGET_IO_PORT_init+0x44>)
     57e:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     582:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     586:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     58a:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58e:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     592:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     596:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     59a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59e:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5aa:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ae:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5b6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ba:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     5be:	4770      	bx	lr
     5c0:	41008000 	.word	0x41008000

000005c4 <TARGET_IO_CLOCK_init>:
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <TARGET_IO_CLOCK_init+0x1c>)
     5c6:	2240      	movs	r2, #64	; 0x40
     5c8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5cc:	2243      	movs	r2, #67	; 0x43
     5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5d2:	4a04      	ldr	r2, [pc, #16]	; (5e4 <TARGET_IO_CLOCK_init+0x20>)
     5d4:	6993      	ldr	r3, [r2, #24]
     5d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5da:	6193      	str	r3, [r2, #24]
     5dc:	4770      	bx	lr
     5de:	bf00      	nop
     5e0:	40001c00 	.word	0x40001c00
     5e4:	40000800 	.word	0x40000800

000005e8 <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     5e8:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <TARGET_IO_init+0x18>)
     5ec:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     5ee:	2200      	movs	r2, #0
     5f0:	4904      	ldr	r1, [pc, #16]	; (604 <TARGET_IO_init+0x1c>)
     5f2:	4805      	ldr	r0, [pc, #20]	; (608 <TARGET_IO_init+0x20>)
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <TARGET_IO_init+0x24>)
     5f6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     5f8:	4b05      	ldr	r3, [pc, #20]	; (610 <TARGET_IO_init+0x28>)
     5fa:	4798      	blx	r3
     5fc:	bd08      	pop	{r3, pc}
     5fe:	bf00      	nop
     600:	000005c5 	.word	0x000005c5
     604:	41012000 	.word	0x41012000
     608:	200128f4 	.word	0x200128f4
     60c:	000014a5 	.word	0x000014a5
     610:	0000057d 	.word	0x0000057d

00000614 <ACCELERATION_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     614:	4a08      	ldr	r2, [pc, #32]	; (638 <ACCELERATION_PORT_init+0x24>)
     616:	f892 3045 	ldrb.w	r3, [r2, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
     636:	4770      	bx	lr
     638:	41008000 	.word	0x41008000

0000063c <ACCELERATION_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     63c:	4a04      	ldr	r2, [pc, #16]	; (650 <ACCELERATION_CLOCK_init+0x14>)
     63e:	6953      	ldr	r3, [r2, #20]
     640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     644:	6153      	str	r3, [r2, #20]
     646:	2240      	movs	r2, #64	; 0x40
     648:	4b02      	ldr	r3, [pc, #8]	; (654 <ACCELERATION_CLOCK_init+0x18>)
     64a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     64e:	4770      	bx	lr
     650:	40000800 	.word	0x40000800
     654:	40001c00 	.word	0x40001c00

00000658 <ACCELERATION_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ACCELERATION_init(void)
{
     658:	b508      	push	{r3, lr}
	ACCELERATION_CLOCK_init();
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <ACCELERATION_init+0x1c>)
     65c:	4798      	blx	r3
	ACCELERATION_PORT_init();
     65e:	4b06      	ldr	r3, [pc, #24]	; (678 <ACCELERATION_init+0x20>)
     660:	4798      	blx	r3
	pwm_init(&ACCELERATION, TC0, _tc_get_pwm());
     662:	4b06      	ldr	r3, [pc, #24]	; (67c <ACCELERATION_init+0x24>)
     664:	4798      	blx	r3
     666:	4602      	mov	r2, r0
     668:	4905      	ldr	r1, [pc, #20]	; (680 <ACCELERATION_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <ACCELERATION_init+0x2c>)
     66c:	4b06      	ldr	r3, [pc, #24]	; (688 <ACCELERATION_init+0x30>)
     66e:	4798      	blx	r3
     670:	bd08      	pop	{r3, pc}
     672:	bf00      	nop
     674:	0000063d 	.word	0x0000063d
     678:	00000615 	.word	0x00000615
     67c:	0000228f 	.word	0x0000228f
     680:	40003800 	.word	0x40003800
     684:	20012900 	.word	0x20012900
     688:	00001329 	.word	0x00001329

0000068c <STEERINGPOWER_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68c:	4a08      	ldr	r2, [pc, #32]	; (6b0 <STEERINGPOWER_PORT_init+0x24>)
     68e:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f892 30b4 	ldrb.w	r3, [r2, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f882 30b4 	strb.w	r3, [r2, #180]	; 0xb4
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <STEERINGPOWER_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <STEERINGPOWER_CLOCK_init+0x14>)
     6b6:	69d3      	ldr	r3, [r2, #28]
     6b8:	f043 0320 	orr.w	r3, r3, #32
     6bc:	61d3      	str	r3, [r2, #28]
     6be:	2240      	movs	r2, #64	; 0x40
     6c0:	4b02      	ldr	r3, [pc, #8]	; (6cc <STEERINGPOWER_CLOCK_init+0x18>)
     6c2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     6c6:	4770      	bx	lr
     6c8:	40000800 	.word	0x40000800
     6cc:	40001c00 	.word	0x40001c00

000006d0 <STEERINGPOWER_init>:
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void STEERINGPOWER_init(void)
{
     6d0:	b508      	push	{r3, lr}
	STEERINGPOWER_CLOCK_init();
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <STEERINGPOWER_init+0x1c>)
     6d4:	4798      	blx	r3
	STEERINGPOWER_PORT_init();
     6d6:	4b06      	ldr	r3, [pc, #24]	; (6f0 <STEERINGPOWER_init+0x20>)
     6d8:	4798      	blx	r3
	pwm_init(&STEERINGPOWER, TC4, _tc_get_pwm());
     6da:	4b06      	ldr	r3, [pc, #24]	; (6f4 <STEERINGPOWER_init+0x24>)
     6dc:	4798      	blx	r3
     6de:	4602      	mov	r2, r0
     6e0:	4905      	ldr	r1, [pc, #20]	; (6f8 <STEERINGPOWER_init+0x28>)
     6e2:	4806      	ldr	r0, [pc, #24]	; (6fc <STEERINGPOWER_init+0x2c>)
     6e4:	4b06      	ldr	r3, [pc, #24]	; (700 <STEERINGPOWER_init+0x30>)
     6e6:	4798      	blx	r3
     6e8:	bd08      	pop	{r3, pc}
     6ea:	bf00      	nop
     6ec:	000006b5 	.word	0x000006b5
     6f0:	0000068d 	.word	0x0000068d
     6f4:	0000228f 	.word	0x0000228f
     6f8:	42001400 	.word	0x42001400
     6fc:	20012938 	.word	0x20012938
     700:	00001329 	.word	0x00001329

00000704 <BRAKE_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	4a08      	ldr	r2, [pc, #32]	; (728 <BRAKE_PORT_init+0x24>)
     706:	f892 30cf 	ldrb.w	r3, [r2, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     70a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70e:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     712:	f882 30cf 	strb.w	r3, [r2, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     716:	f892 30b7 	ldrb.w	r3, [r2, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     71a:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     722:	f882 30b7 	strb.w	r3, [r2, #183]	; 0xb7
     726:	4770      	bx	lr
     728:	41008000 	.word	0x41008000

0000072c <BRAKE_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     72c:	4a04      	ldr	r2, [pc, #16]	; (740 <BRAKE_CLOCK_init+0x14>)
     72e:	69d3      	ldr	r3, [r2, #28]
     730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     734:	61d3      	str	r3, [r2, #28]
     736:	2240      	movs	r2, #64	; 0x40
     738:	4b02      	ldr	r3, [pc, #8]	; (744 <BRAKE_CLOCK_init+0x18>)
     73a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     73e:	4770      	bx	lr
     740:	40000800 	.word	0x40000800
     744:	40001c00 	.word	0x40001c00

00000748 <BRAKE_init>:
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void BRAKE_init(void)
{
     748:	b508      	push	{r3, lr}
	BRAKE_CLOCK_init();
     74a:	4b06      	ldr	r3, [pc, #24]	; (764 <BRAKE_init+0x1c>)
     74c:	4798      	blx	r3
	BRAKE_PORT_init();
     74e:	4b06      	ldr	r3, [pc, #24]	; (768 <BRAKE_init+0x20>)
     750:	4798      	blx	r3
	pwm_init(&BRAKE, TC5, _tc_get_pwm());
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <BRAKE_init+0x24>)
     754:	4798      	blx	r3
     756:	4602      	mov	r2, r0
     758:	4905      	ldr	r1, [pc, #20]	; (770 <BRAKE_init+0x28>)
     75a:	4806      	ldr	r0, [pc, #24]	; (774 <BRAKE_init+0x2c>)
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <BRAKE_init+0x30>)
     75e:	4798      	blx	r3
     760:	bd08      	pop	{r3, pc}
     762:	bf00      	nop
     764:	0000072d 	.word	0x0000072d
     768:	00000705 	.word	0x00000705
     76c:	0000228f 	.word	0x0000228f
     770:	42001800 	.word	0x42001800
     774:	200128d8 	.word	0x200128d8
     778:	00001329 	.word	0x00001329

0000077c <COMMUNICATION_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	4b50      	ldr	r3, [pc, #320]	; (8c0 <COMMUNICATION_IO_PORT_init+0x144>)
     77e:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     786:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     78a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     78e:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     792:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     796:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     79a:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ae:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7b6:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ba:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7be:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ce:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7d2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d6:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7de:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ee:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7f6:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7fe:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     802:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     806:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     80a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     80e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     812:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     816:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     81a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     822:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     826:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     82e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     832:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     836:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     83a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     83e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     842:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     846:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     84a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     84e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     852:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     856:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     85a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     862:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     866:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     86e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     872:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     876:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     87a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     87e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     882:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     886:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     88a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     88e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     892:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     896:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     89a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     8be:	4770      	bx	lr
     8c0:	41008000 	.word	0x41008000

000008c4 <COMMUNICATION_IO_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <COMMUNICATION_IO_CLOCK_init+0x14>)
     8c6:	691a      	ldr	r2, [r3, #16]
     8c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     8cc:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
     8ce:	69da      	ldr	r2, [r3, #28]
     8d0:	f042 0204 	orr.w	r2, r2, #4
     8d4:	61da      	str	r2, [r3, #28]
     8d6:	4770      	bx	lr
     8d8:	40000800 	.word	0x40000800

000008dc <COMMUNICATION_IO_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void COMMUNICATION_IO_init(void)
{
     8dc:	b508      	push	{r3, lr}
	COMMUNICATION_IO_CLOCK_init();
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <COMMUNICATION_IO_init+0x14>)
     8e0:	4798      	blx	r3
	mac_async_init(&COMMUNICATION_IO, GMAC);
     8e2:	4904      	ldr	r1, [pc, #16]	; (8f4 <COMMUNICATION_IO_init+0x18>)
     8e4:	4804      	ldr	r0, [pc, #16]	; (8f8 <COMMUNICATION_IO_init+0x1c>)
     8e6:	4b05      	ldr	r3, [pc, #20]	; (8fc <COMMUNICATION_IO_init+0x20>)
     8e8:	4798      	blx	r3
	COMMUNICATION_IO_PORT_init();
     8ea:	4b05      	ldr	r3, [pc, #20]	; (900 <COMMUNICATION_IO_init+0x24>)
     8ec:	4798      	blx	r3
     8ee:	bd08      	pop	{r3, pc}
     8f0:	000008c5 	.word	0x000008c5
     8f4:	42000800 	.word	0x42000800
     8f8:	2001291c 	.word	0x2001291c
     8fc:	00001151 	.word	0x00001151
     900:	0000077d 	.word	0x0000077d

00000904 <system_init>:
	mac_async_enable(&COMMUNICATION_IO);
	mac_async_write(&COMMUNICATION_IO, (uint8_t *)"Hello World!", 12);
}

void system_init(void)
{
     904:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     906:	4b4b      	ldr	r3, [pc, #300]	; (a34 <system_init+0x130>)
     908:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     90a:	4b4b      	ldr	r3, [pc, #300]	; (a38 <system_init+0x134>)
     90c:	2240      	movs	r2, #64	; 0x40
     90e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     910:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     912:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     916:	629a      	str	r2, [r3, #40]	; 0x28
     918:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     91c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     926:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     92a:	2180      	movs	r1, #128	; 0x80
     92c:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     930:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     934:	6299      	str	r1, [r3, #40]	; 0x28
     936:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     938:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     93c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     940:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     944:	2102      	movs	r1, #2
     946:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     94a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94e:	4c3b      	ldr	r4, [pc, #236]	; (a3c <system_init+0x138>)
     950:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     954:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     958:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     95c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     960:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     964:	2001      	movs	r0, #1
     966:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     96a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     96e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     972:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     976:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97a:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     97e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     982:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     986:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     98a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     98e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     992:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     996:	f893 1141 	ldrb.w	r1, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     99a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     99e:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9a2:	2108      	movs	r1, #8
     9a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9a8:	4825      	ldr	r0, [pc, #148]	; (a40 <system_init+0x13c>)
     9aa:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     9ae:	4825      	ldr	r0, [pc, #148]	; (a44 <system_init+0x140>)
     9b0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9b4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     9b8:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
     9bc:	f040 0004 	orr.w	r0, r0, #4
     9c0:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c4:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c8:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     9cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d0:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
     9d8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9dc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9e4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     9e8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ec:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     9fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a04:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a08:	4a0f      	ldr	r2, [pc, #60]	; (a48 <system_init+0x144>)
     a0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a0e:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a16:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	// Set pin direction to output
	gpio_set_pin_direction(Reverse, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Reverse, GPIO_PIN_FUNCTION_OFF);

	SteeringEncoder_IRQ_init();
     a1a:	4b0c      	ldr	r3, [pc, #48]	; (a4c <system_init+0x148>)
     a1c:	4798      	blx	r3

	TARGET_IO_init();
     a1e:	4b0c      	ldr	r3, [pc, #48]	; (a50 <system_init+0x14c>)
     a20:	4798      	blx	r3

	ACCELERATION_init();
     a22:	4b0c      	ldr	r3, [pc, #48]	; (a54 <system_init+0x150>)
     a24:	4798      	blx	r3

	STEERINGPOWER_init();
     a26:	4b0c      	ldr	r3, [pc, #48]	; (a58 <system_init+0x154>)
     a28:	4798      	blx	r3

	BRAKE_init();
     a2a:	4b0c      	ldr	r3, [pc, #48]	; (a5c <system_init+0x158>)
     a2c:	4798      	blx	r3

	COMMUNICATION_IO_init();
     a2e:	4b0c      	ldr	r3, [pc, #48]	; (a60 <system_init+0x15c>)
     a30:	4798      	blx	r3
     a32:	bd10      	pop	{r4, pc}
     a34:	00001561 	.word	0x00001561
     a38:	41008000 	.word	0x41008000
     a3c:	40000002 	.word	0x40000002
     a40:	40020008 	.word	0x40020008
     a44:	c0020000 	.word	0xc0020000
     a48:	c0004000 	.word	0xc0004000
     a4c:	000004c1 	.word	0x000004c1
     a50:	000005e9 	.word	0x000005e9
     a54:	00000659 	.word	0x00000659
     a58:	000006d1 	.word	0x000006d1
     a5c:	00000749 	.word	0x00000749
     a60:	000008dd 	.word	0x000008dd

00000a64 <InitializeLWIP>:
struct sockaddr_in ecu_addr, pc_addr;
static int lwip_initialized = 0;

int InitializeLWIP()
{
	if(lwip_initialized)
     a64:	4b0f      	ldr	r3, [pc, #60]	; (aa4 <InitializeLWIP+0x40>)
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	b10b      	cbz	r3, a6e <InitializeLWIP+0xa>
	sys_sem_wait(&sem); /* Block until the lwIP stack is initialized. */
	sys_sem_free(&sem); /* Free the semaphore. */
	print_ipaddress();
	lwip_initialized = 1;
	return 0; 
}
     a6a:	2000      	movs	r0, #0
     a6c:	4770      	bx	lr
{
     a6e:	b500      	push	{lr}
     a70:	b083      	sub	sp, #12
	err_sem = sys_sem_new(&sem, 0); /* Create a new semaphore. */
     a72:	2100      	movs	r1, #0
     a74:	a801      	add	r0, sp, #4
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <InitializeLWIP+0x44>)
     a78:	4798      	blx	r3
	tcpip_init(tcpip_init_done, &sem);
     a7a:	a901      	add	r1, sp, #4
     a7c:	480b      	ldr	r0, [pc, #44]	; (aac <InitializeLWIP+0x48>)
     a7e:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <InitializeLWIP+0x4c>)
     a80:	4798      	blx	r3
	sys_sem_wait(&sem); /* Block until the lwIP stack is initialized. */
     a82:	2100      	movs	r1, #0
     a84:	a801      	add	r0, sp, #4
     a86:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <InitializeLWIP+0x50>)
     a88:	4798      	blx	r3
	sys_sem_free(&sem); /* Free the semaphore. */
     a8a:	a801      	add	r0, sp, #4
     a8c:	4b0a      	ldr	r3, [pc, #40]	; (ab8 <InitializeLWIP+0x54>)
     a8e:	4798      	blx	r3
	print_ipaddress();
     a90:	4b0a      	ldr	r3, [pc, #40]	; (abc <InitializeLWIP+0x58>)
     a92:	4798      	blx	r3
	lwip_initialized = 1;
     a94:	2201      	movs	r2, #1
     a96:	4b03      	ldr	r3, [pc, #12]	; (aa4 <InitializeLWIP+0x40>)
     a98:	601a      	str	r2, [r3, #0]
}
     a9a:	2000      	movs	r0, #0
     a9c:	b003      	add	sp, #12
     a9e:	f85d fb04 	ldr.w	pc, [sp], #4
     aa2:	bf00      	nop
     aa4:	200000dc 	.word	0x200000dc
     aa8:	00002449 	.word	0x00002449
     aac:	0000b6cd 	.word	0x0000b6cd
     ab0:	00003e49 	.word	0x00003e49
     ab4:	000024d9 	.word	0x000024d9
     ab8:	000024ad 	.word	0x000024ad
     abc:	000093d9 	.word	0x000093d9

00000ac0 <decode_ethernet_inputs>:

void decode_ethernet_inputs(EthernetInputs* inputs, main_context_t* ctx)
{
     ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ac4:	4605      	mov	r5, r0
     ac6:	460c      	mov	r4, r1
	ctx->steering_angle_commanded = (((float)inputs->steering_angle_commanded - (float)0x7FFF) /  (float)0x7FFF);
     ac8:	8883      	ldrh	r3, [r0, #4]
     aca:	ee07 3a90 	vmov	s15, r3
     ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
     ad2:	ed9f 7a45 	vldr	s14, [pc, #276]	; be8 <decode_ethernet_inputs+0x128>
     ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
     ada:	eec7 6a87 	vdiv.f32	s13, s15, s14
     ade:	edc1 6a04 	vstr	s13, [r1, #16]
	ctx->vehicle_speed_commanded = (float)inputs->vehicle_speed_commanded / (float)0xFFFF;
     ae2:	8843      	ldrh	r3, [r0, #2]
     ae4:	ee07 3a90 	vmov	s15, r3
     ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
     aec:	eddf 6a3f 	vldr	s13, [pc, #252]	; bec <decode_ethernet_inputs+0x12c>
     af0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
     af4:	ed81 7a03 	vstr	s14, [r1, #12]
	ctx->park_brake_commanded = (inputs->boolean_commands & 0x1) != 0;
     af8:	8803      	ldrh	r3, [r0, #0]
     afa:	f003 0301 	and.w	r3, r3, #1
     afe:	750b      	strb	r3, [r1, #20]
	ctx->reverse_commanded = (inputs->boolean_commands & 0x2) != 0;
     b00:	8803      	ldrh	r3, [r0, #0]
     b02:	f3c3 0340 	ubfx	r3, r3, #1, #1
     b06:	754b      	strb	r3, [r1, #21]
	ctx->autonomous_mode = (inputs->boolean_commands & 0x4) != 0;
     b08:	8803      	ldrh	r3, [r0, #0]
     b0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
     b0e:	758b      	strb	r3, [r1, #22]
	ctx->override_pid = (inputs->boolean_commands & 0x8) != 0;
     b10:	8803      	ldrh	r3, [r0, #0]
     b12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     b16:	f881 3168 	strb.w	r3, [r1, #360]	; 0x168
	ctx->tele_operation_enabled = (inputs->boolean_commands & 0x10) != 0;
     b1a:	8803      	ldrh	r3, [r0, #0]
     b1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
     b20:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	ctx->speed_p_gain_override = (float)inputs->speed_p_gain * 0.000001;
     b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; bf8 <decode_ethernet_inputs+0x138>
     b28:	edd0 7a02 	vldr	s15, [r0, #8]
     b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b30:	ee17 0a90 	vmov	r0, s15
     b34:	47c0      	blx	r8
     b36:	4f2e      	ldr	r7, [pc, #184]	; (bf0 <decode_ethernet_inputs+0x130>)
     b38:	a329      	add	r3, pc, #164	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
     b3e:	47b8      	blx	r7
     b40:	4e2c      	ldr	r6, [pc, #176]	; (bf4 <decode_ethernet_inputs+0x134>)
     b42:	47b0      	blx	r6
     b44:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
	ctx->speed_i_gain_override = (float)inputs->speed_i_gain * 0.000001;
     b48:	edd5 7a03 	vldr	s15, [r5, #12]
     b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b50:	ee17 0a90 	vmov	r0, s15
     b54:	47c0      	blx	r8
     b56:	a322      	add	r3, pc, #136	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b58:	e9d3 2300 	ldrd	r2, r3, [r3]
     b5c:	47b8      	blx	r7
     b5e:	47b0      	blx	r6
     b60:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
	ctx->speed_d_gain_override = (float)inputs->speed_d_gain * 0.000001;
     b64:	edd5 7a04 	vldr	s15, [r5, #16]
     b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b6c:	ee17 0a90 	vmov	r0, s15
     b70:	47c0      	blx	r8
     b72:	a31b      	add	r3, pc, #108	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b74:	e9d3 2300 	ldrd	r2, r3, [r3]
     b78:	47b8      	blx	r7
     b7a:	47b0      	blx	r6
     b7c:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
	ctx->steer_p_gain_override = (float)inputs->steering_p_gain * 0.000001;
     b80:	edd5 7a05 	vldr	s15, [r5, #20]
     b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b88:	ee17 0a90 	vmov	r0, s15
     b8c:	47c0      	blx	r8
     b8e:	a314      	add	r3, pc, #80	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b90:	e9d3 2300 	ldrd	r2, r3, [r3]
     b94:	47b8      	blx	r7
     b96:	47b0      	blx	r6
     b98:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
	ctx->steer_i_gain_override = (float)inputs->steering_i_gain * 0.000001;
     b9c:	edd5 7a06 	vldr	s15, [r5, #24]
     ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
     ba4:	ee17 0a90 	vmov	r0, s15
     ba8:	47c0      	blx	r8
     baa:	a30d      	add	r3, pc, #52	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     bac:	e9d3 2300 	ldrd	r2, r3, [r3]
     bb0:	47b8      	blx	r7
     bb2:	47b0      	blx	r6
     bb4:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	ctx->steer_d_gain_override = (float)inputs->steering_d_gain * 0.000001;
     bb8:	69e8      	ldr	r0, [r5, #28]
     bba:	ee07 0a90 	vmov	s15, r0
     bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
     bc2:	ee17 0a90 	vmov	r0, s15
     bc6:	47c0      	blx	r8
     bc8:	a305      	add	r3, pc, #20	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     bca:	e9d3 2300 	ldrd	r2, r3, [r3]
     bce:	47b8      	blx	r7
     bd0:	47b0      	blx	r6
     bd2:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
     bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     bda:	bf00      	nop
     bdc:	f3af 8000 	nop.w
     be0:	a0b5ed8d 	.word	0xa0b5ed8d
     be4:	3eb0c6f7 	.word	0x3eb0c6f7
     be8:	46fffe00 	.word	0x46fffe00
     bec:	477fff00 	.word	0x477fff00
     bf0:	0000bb39 	.word	0x0000bb39
     bf4:	0000bfed 	.word	0x0000bfed
     bf8:	0000ba91 	.word	0x0000ba91

00000bfc <encode_ethernet_outputs>:

}
void encode_ethernet_outputs(EthernetOutputs* outputs, main_context_t* ctx)
{
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	4604      	mov	r4, r0
     c00:	460d      	mov	r5, r1
	outputs->steering_angle = ctx->steering_angle * 10;
     c02:	edd1 7a07 	vldr	s15, [r1, #28]
     c06:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
     c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
     c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     c12:	ee17 3a90 	vmov	r3, s15
     c16:	8043      	strh	r3, [r0, #2]
	outputs->vehicle_speed = ctx->vehicle_speed * 100;
     c18:	edd1 7a06 	vldr	s15, [r1, #24]
     c1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; c74 <encode_ethernet_outputs+0x78>
     c20:	ee67 7a87 	vmul.f32	s15, s15, s14
     c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     c28:	ee17 3a90 	vmov	r3, s15
     c2c:	8003      	strh	r3, [r0, #0]
	outputs->boolean_states = 0;
     c2e:	2300      	movs	r3, #0
     c30:	7103      	strb	r3, [r0, #4]
	outputs->boolean_states |= ctx->estop_in > 0;
     c32:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
     c36:	3300      	adds	r3, #0
     c38:	bf18      	it	ne
     c3a:	2301      	movne	r3, #1
     c3c:	7103      	strb	r3, [r0, #4]
	outputs->speed_p_term = ctx->speed_controller.lastPTerm;
     c3e:	4e0e      	ldr	r6, [pc, #56]	; (c78 <encode_ethernet_outputs+0x7c>)
     c40:	e9d1 0144 	ldrd	r0, r1, [r1, #272]	; 0x110
     c44:	47b0      	blx	r6
     c46:	60a0      	str	r0, [r4, #8]
	outputs->speed_i_term = ctx->speed_controller.lastITerm;
     c48:	e9d5 0146 	ldrd	r0, r1, [r5, #280]	; 0x118
     c4c:	47b0      	blx	r6
     c4e:	60e0      	str	r0, [r4, #12]
	outputs->speed_d_term = ctx->speed_controller.lastDTerm;
     c50:	e9d5 0148 	ldrd	r0, r1, [r5, #288]	; 0x120
     c54:	47b0      	blx	r6
     c56:	6120      	str	r0, [r4, #16]
	outputs->steering_p_term = ctx->steering_controller.lastPTerm;
     c58:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
     c5c:	47b0      	blx	r6
     c5e:	6160      	str	r0, [r4, #20]
	outputs->steering_i_term = ctx->steering_controller.lastITerm;
     c60:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
     c64:	47b0      	blx	r6
     c66:	61a0      	str	r0, [r4, #24]
	outputs->steering_d_term = ctx->steering_controller.lastDTerm;
     c68:	e9d5 0122 	ldrd	r0, r1, [r5, #136]	; 0x88
     c6c:	47b0      	blx	r6
     c6e:	61e0      	str	r0, [r4, #28]
     c70:	bd70      	pop	{r4, r5, r6, pc}
     c72:	bf00      	nop
     c74:	42c80000 	.word	0x42c80000
     c78:	0000bfad 	.word	0x0000bfad

00000c7c <ethernet_thread>:
}


void ethernet_thread(void *p)
{
     c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c80:	b0ac      	sub	sp, #176	; 0xb0
     c82:	4605      	mov	r5, r0
	main_context_t* ctx = (main_context_t*)p;
	EthernetInputs eth_inputs;
	EthernetOutputs eth_outputs;

	memset(&eth_inputs, 0, sizeof(eth_inputs));
     c84:	2620      	movs	r6, #32
     c86:	4632      	mov	r2, r6
     c88:	2100      	movs	r1, #0
     c8a:	a824      	add	r0, sp, #144	; 0x90
     c8c:	4c41      	ldr	r4, [pc, #260]	; (d94 <ethernet_thread+0x118>)
     c8e:	47a0      	blx	r4
	memset(&eth_outputs, 0, sizeof(eth_outputs));
     c90:	4632      	mov	r2, r6
     c92:	2100      	movs	r1, #0
     c94:	a81c      	add	r0, sp, #112	; 0x70
     c96:	47a0      	blx	r4

	InitializeLWIP();
     c98:	4b3f      	ldr	r3, [pc, #252]	; (d98 <ethernet_thread+0x11c>)
     c9a:	4798      	blx	r3

	struct sockaddr_in sa, ra;
	int s_create, new_socket;
	int socket_check;
	int opt = 1;
     c9c:	ac2c      	add	r4, sp, #176	; 0xb0
     c9e:	2301      	movs	r3, #1
     ca0:	f844 3d64 	str.w	r3, [r4, #-100]!
	Specifies the communications domain in which a socket is to be created.
	type
	Specifies the type of socket to be created.
	protocol
	Specifies a particular protocol to be used with the socket. Specifying a protocol of 0 causes socket() to use an unspecified default protocol appropriate for the requested socket type. */
	s_create = socket(AF_INET, SOCK_DGRAM, 0);
     ca4:	2200      	movs	r2, #0
     ca6:	2102      	movs	r1, #2
     ca8:	4608      	mov	r0, r1
     caa:	4b3c      	ldr	r3, [pc, #240]	; (d9c <ethernet_thread+0x120>)
     cac:	4798      	blx	r3
     cae:	4606      	mov	r6, r0

	//The setsockopt() function provides an application program with the means to control socket behavior.
	setsockopt(s_create, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt));
     cb0:	2304      	movs	r3, #4
     cb2:	9300      	str	r3, [sp, #0]
     cb4:	4623      	mov	r3, r4
     cb6:	f44f 7201 	mov.w	r2, #516	; 0x204
     cba:	f640 71ff 	movw	r1, #4095	; 0xfff
     cbe:	4c38      	ldr	r4, [pc, #224]	; (da0 <ethernet_thread+0x124>)
     cc0:	47a0      	blx	r4

	//Destination
	memset(&ra, 0, sizeof(ra));
     cc2:	2400      	movs	r4, #0
     cc4:	9414      	str	r4, [sp, #80]	; 0x50
     cc6:	9415      	str	r4, [sp, #84]	; 0x54
     cc8:	9416      	str	r4, [sp, #88]	; 0x58
     cca:	9417      	str	r4, [sp, #92]	; 0x5c
	ra.sin_family 		= AF_INET;
     ccc:	f04f 0a02 	mov.w	sl, #2
     cd0:	f88d a051 	strb.w	sl, [sp, #81]	; 0x51
	ra.sin_addr.s_addr	= htonl(INADDR_BROADCAST);
     cd4:	f04f 30ff 	mov.w	r0, #4294967295
     cd8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; dcc <ethernet_thread+0x150>
     cdc:	47c8      	blx	r9
     cde:	9015      	str	r0, [sp, #84]	; 0x54
	ra.sin_port        	= htons(12089);
     ce0:	f642 7039 	movw	r0, #12089	; 0x2f39
     ce4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; dd0 <ethernet_thread+0x154>
     ce8:	47c0      	blx	r8
     cea:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
	ra.sin_len			= sizeof(ra);
     cee:	2710      	movs	r7, #16
     cf0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50

	//Source
	memset(&sa, 0, sizeof(sa));
     cf4:	9418      	str	r4, [sp, #96]	; 0x60
     cf6:	9419      	str	r4, [sp, #100]	; 0x64
     cf8:	941a      	str	r4, [sp, #104]	; 0x68
     cfa:	941b      	str	r4, [sp, #108]	; 0x6c
	sa.sin_family		= AF_INET;
     cfc:	f88d a061 	strb.w	sl, [sp, #97]	; 0x61
	sa.sin_addr.s_addr	= htonl(INADDR_ANY);
     d00:	4620      	mov	r0, r4
     d02:	47c8      	blx	r9
     d04:	9019      	str	r0, [sp, #100]	; 0x64
	sa.sin_port			= htons(12090);
     d06:	f642 703a 	movw	r0, #12090	; 0x2f3a
     d0a:	47c0      	blx	r8
     d0c:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
	sa.sin_len			= sizeof(sa);
     d10:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60

	/* bind the connection to port */
	socket_check = bind(s_create, (struct sockaddr *)&sa, sizeof(sa));
     d14:	463a      	mov	r2, r7
     d16:	a918      	add	r1, sp, #96	; 0x60
     d18:	4630      	mov	r0, r6
     d1a:	4b22      	ldr	r3, [pc, #136]	; (da4 <ethernet_thread+0x128>)
     d1c:	4798      	blx	r3
	if (socket_check < 0) {
     d1e:	42a0      	cmp	r0, r4
     d20:	da2c      	bge.n	d7c <ethernet_thread+0x100>
		}

		xSemaphoreGive(ctx->sem);
		vTaskDelay(TRANSMIT_INTERVAL);
	}
     d22:	b02c      	add	sp, #176	; 0xb0
     d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		encode_ethernet_outputs(&eth_outputs, ctx);
     d28:	4629      	mov	r1, r5
     d2a:	a81c      	add	r0, sp, #112	; 0x70
     d2c:	4b1e      	ldr	r3, [pc, #120]	; (da8 <ethernet_thread+0x12c>)
     d2e:	4798      	blx	r3
		num_bytes_received = sendto(s_create, &eth_outputs, sizeof(eth_outputs), 0, &ra, sizeof(ra));
     d30:	2310      	movs	r3, #16
     d32:	9301      	str	r3, [sp, #4]
     d34:	ab14      	add	r3, sp, #80	; 0x50
     d36:	9300      	str	r3, [sp, #0]
     d38:	2300      	movs	r3, #0
     d3a:	2220      	movs	r2, #32
     d3c:	a91c      	add	r1, sp, #112	; 0x70
     d3e:	4630      	mov	r0, r6
     d40:	4c1a      	ldr	r4, [pc, #104]	; (dac <ethernet_thread+0x130>)
     d42:	47a0      	blx	r4
		num_bytes_received = recv(s_create, &buffer, sizeof(buffer), MSG_DONTWAIT);
     d44:	2308      	movs	r3, #8
     d46:	2240      	movs	r2, #64	; 0x40
     d48:	a903      	add	r1, sp, #12
     d4a:	4630      	mov	r0, r6
     d4c:	4c18      	ldr	r4, [pc, #96]	; (db0 <ethernet_thread+0x134>)
     d4e:	47a0      	blx	r4
		if(num_bytes_received > 0)
     d50:	1e02      	subs	r2, r0, #0
     d52:	dd0a      	ble.n	d6a <ethernet_thread+0xee>
			memcpy(&eth_inputs.boolean_commands, buffer, num_bytes_received);
     d54:	a903      	add	r1, sp, #12
     d56:	a824      	add	r0, sp, #144	; 0x90
     d58:	4b16      	ldr	r3, [pc, #88]	; (db4 <ethernet_thread+0x138>)
     d5a:	4798      	blx	r3
			ctx->last_eth_input_rx_time = xTaskGetTickCount();
     d5c:	4b16      	ldr	r3, [pc, #88]	; (db8 <ethernet_thread+0x13c>)
     d5e:	4798      	blx	r3
     d60:	6068      	str	r0, [r5, #4]
			decode_ethernet_inputs(&eth_inputs, ctx);
     d62:	4629      	mov	r1, r5
     d64:	a824      	add	r0, sp, #144	; 0x90
     d66:	4b15      	ldr	r3, [pc, #84]	; (dbc <ethernet_thread+0x140>)
     d68:	4798      	blx	r3
		xSemaphoreGive(ctx->sem);
     d6a:	2300      	movs	r3, #0
     d6c:	461a      	mov	r2, r3
     d6e:	4619      	mov	r1, r3
     d70:	6828      	ldr	r0, [r5, #0]
     d72:	4c13      	ldr	r4, [pc, #76]	; (dc0 <ethernet_thread+0x144>)
     d74:	47a0      	blx	r4
		vTaskDelay(TRANSMIT_INTERVAL);
     d76:	200a      	movs	r0, #10
     d78:	4b12      	ldr	r3, [pc, #72]	; (dc4 <ethernet_thread+0x148>)
     d7a:	4798      	blx	r3
		if( xSemaphoreTake(ctx->sem, 100) != pdTRUE)
     d7c:	2300      	movs	r3, #0
     d7e:	2264      	movs	r2, #100	; 0x64
     d80:	4619      	mov	r1, r3
     d82:	6828      	ldr	r0, [r5, #0]
     d84:	4c10      	ldr	r4, [pc, #64]	; (dc8 <ethernet_thread+0x14c>)
     d86:	47a0      	blx	r4
     d88:	2801      	cmp	r0, #1
     d8a:	d0cd      	beq.n	d28 <ethernet_thread+0xac>
			vTaskDelay(1);
     d8c:	2001      	movs	r0, #1
     d8e:	4b0d      	ldr	r3, [pc, #52]	; (dc4 <ethernet_thread+0x148>)
     d90:	4798      	blx	r3
			continue;
     d92:	e7f3      	b.n	d7c <ethernet_thread+0x100>
     d94:	0000c119 	.word	0x0000c119
     d98:	00000a65 	.word	0x00000a65
     d9c:	00003ac5 	.word	0x00003ac5
     da0:	00003b4d 	.word	0x00003b4d
     da4:	00003685 	.word	0x00003685
     da8:	00000bfd 	.word	0x00000bfd
     dac:	00003955 	.word	0x00003955
     db0:	0000393d 	.word	0x0000393d
     db4:	0000c103 	.word	0x0000c103
     db8:	0000aa8d 	.word	0x0000aa8d
     dbc:	00000ac1 	.word	0x00000ac1
     dc0:	0000a135 	.word	0x0000a135
     dc4:	0000accd 	.word	0x0000accd
     dc8:	0000a4ed 	.word	0x0000a4ed
     dcc:	00003ea9 	.word	0x00003ea9
     dd0:	00003e91 	.word	0x00003e91

00000dd4 <ethernet_phy_init>:
/**
 * \brief Perform a HW initialization to the PHY
 */
int32_t ethernet_phy_init(struct ethernet_phy_descriptor *const descr, struct mac_async_descriptor *const mac,
                          uint16_t addr)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
     dd6:	460d      	mov	r5, r1
     dd8:	4616      	mov	r6, r2
	ASSERT(descr && mac && (addr <= 0x1F));
     dda:	4604      	mov	r4, r0
     ddc:	b158      	cbz	r0, df6 <ethernet_phy_init+0x22>
     dde:	b161      	cbz	r1, dfa <ethernet_phy_init+0x26>
     de0:	2a1f      	cmp	r2, #31
     de2:	d90c      	bls.n	dfe <ethernet_phy_init+0x2a>
     de4:	2000      	movs	r0, #0
     de6:	222a      	movs	r2, #42	; 0x2a
     de8:	4906      	ldr	r1, [pc, #24]	; (e04 <ethernet_phy_init+0x30>)
     dea:	4b07      	ldr	r3, [pc, #28]	; (e08 <ethernet_phy_init+0x34>)
     dec:	4798      	blx	r3

	descr->mac  = mac;
     dee:	6025      	str	r5, [r4, #0]
	descr->addr = addr;
     df0:	80a6      	strh	r6, [r4, #4]
	return ERR_NONE;
}
     df2:	2000      	movs	r0, #0
     df4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && mac && (addr <= 0x1F));
     df6:	2000      	movs	r0, #0
     df8:	e7f5      	b.n	de6 <ethernet_phy_init+0x12>
     dfa:	2000      	movs	r0, #0
     dfc:	e7f3      	b.n	de6 <ethernet_phy_init+0x12>
     dfe:	2001      	movs	r0, #1
     e00:	e7f1      	b.n	de6 <ethernet_phy_init+0x12>
     e02:	bf00      	nop
     e04:	0000d1f4 	.word	0x0000d1f4
     e08:	0000151d 	.word	0x0000151d

00000e0c <ethernet_phy_get_link_status>:

/**
 * \brief Get PHY link status
 */
int32_t ethernet_phy_get_link_status(struct ethernet_phy_descriptor *const descr, bool *status)
{
     e0c:	b530      	push	{r4, r5, lr}
     e0e:	b083      	sub	sp, #12
     e10:	460d      	mov	r5, r1
	int32_t  rst;
	uint16_t val;

	ASSERT(descr && descr->mac && status);
     e12:	4604      	mov	r4, r0
     e14:	b1d0      	cbz	r0, e4c <ethernet_phy_get_link_status+0x40>
     e16:	6803      	ldr	r3, [r0, #0]
     e18:	b1d3      	cbz	r3, e50 <ethernet_phy_get_link_status+0x44>
     e1a:	b1a9      	cbz	r1, e48 <ethernet_phy_get_link_status+0x3c>
     e1c:	2001      	movs	r0, #1
     e1e:	22a9      	movs	r2, #169	; 0xa9
     e20:	490c      	ldr	r1, [pc, #48]	; (e54 <ethernet_phy_get_link_status+0x48>)
     e22:	4b0d      	ldr	r3, [pc, #52]	; (e58 <ethernet_phy_get_link_status+0x4c>)
     e24:	4798      	blx	r3
	rst = mac_async_read_phy_reg(descr->mac, descr->addr, MDIO_REG1_BMSR, &val);
     e26:	f10d 0306 	add.w	r3, sp, #6
     e2a:	2201      	movs	r2, #1
     e2c:	88a1      	ldrh	r1, [r4, #4]
     e2e:	6820      	ldr	r0, [r4, #0]
     e30:	4c0a      	ldr	r4, [pc, #40]	; (e5c <ethernet_phy_get_link_status+0x50>)
     e32:	47a0      	blx	r4
	if (rst == ERR_NONE) {
     e34:	4602      	mov	r2, r0
     e36:	b920      	cbnz	r0, e42 <ethernet_phy_get_link_status+0x36>
		*status = (val & MDIO_REG1_BIT_LINK_STATUS) ? true : false;
     e38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     e3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
     e40:	702b      	strb	r3, [r5, #0]
	}
	return rst;
}
     e42:	4610      	mov	r0, r2
     e44:	b003      	add	sp, #12
     e46:	bd30      	pop	{r4, r5, pc}
	ASSERT(descr && descr->mac && status);
     e48:	2000      	movs	r0, #0
     e4a:	e7e8      	b.n	e1e <ethernet_phy_get_link_status+0x12>
     e4c:	2000      	movs	r0, #0
     e4e:	e7e6      	b.n	e1e <ethernet_phy_get_link_status+0x12>
     e50:	2000      	movs	r0, #0
     e52:	e7e4      	b.n	e1e <ethernet_phy_get_link_status+0x12>
     e54:	0000d1f4 	.word	0x0000d1f4
     e58:	0000151d 	.word	0x0000151d
     e5c:	000012d9 	.word	0x000012d9

00000e60 <ETHERNET_PHY_0_init>:
#include <ethernet_phy_main.h>

struct ethernet_phy_descriptor ETHERNET_PHY_0_desc;

void ETHERNET_PHY_0_init(void)
{
     e60:	b510      	push	{r4, lr}
	mac_async_enable(&COMMUNICATION_IO);
     e62:	4c05      	ldr	r4, [pc, #20]	; (e78 <ETHERNET_PHY_0_init+0x18>)
     e64:	4620      	mov	r0, r4
     e66:	4b05      	ldr	r3, [pc, #20]	; (e7c <ETHERNET_PHY_0_init+0x1c>)
     e68:	4798      	blx	r3
	ethernet_phy_init(&ETHERNET_PHY_0_desc, &COMMUNICATION_IO, CONF_ETHERNET_PHY_0_IEEE8023_MII_PHY_ADDRESS);
     e6a:	2200      	movs	r2, #0
     e6c:	4621      	mov	r1, r4
     e6e:	4804      	ldr	r0, [pc, #16]	; (e80 <ETHERNET_PHY_0_init+0x20>)
     e70:	4b04      	ldr	r3, [pc, #16]	; (e84 <ETHERNET_PHY_0_init+0x24>)
     e72:	4798      	blx	r3
     e74:	bd10      	pop	{r4, pc}
     e76:	bf00      	nop
     e78:	2001291c 	.word	0x2001291c
     e7c:	00001185 	.word	0x00001185
     e80:	20012954 	.word	0x20012954
     e84:	00000dd5 	.word	0x00000dd5

00000e88 <ethernet_phys_init>:
		rst = ethernet_phy_get_link_status(&ETHERNET_PHY_0_desc, &link_state);
	} while (rst == ERR_NONE && link_state == true);
}

void ethernet_phys_init(void)
{
     e88:	b508      	push	{r3, lr}

	ETHERNET_PHY_0_init();
     e8a:	4b01      	ldr	r3, [pc, #4]	; (e90 <ethernet_phys_init+0x8>)
     e8c:	4798      	blx	r3
     e8e:	bd08      	pop	{r3, pc}
     e90:	00000e61 	.word	0x00000e61

00000e94 <TCPIP_STACK_INTERFACE_0_stack_init>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK  if the loopif is initialized
 */
err_t TCPIP_STACK_INTERFACE_0_stack_init(struct netif *netif)
{
     e94:	b508      	push	{r3, lr}
     e96:	4602      	mov	r2, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));
	LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));

	netif->output     = etharp_output;
     e98:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <TCPIP_STACK_INTERFACE_0_stack_init+0x40>)
     e9a:	6143      	str	r3, [r0, #20]
	netif->linkoutput = mac_low_level_output;
     e9c:	4b0e      	ldr	r3, [pc, #56]	; (ed8 <TCPIP_STACK_INTERFACE_0_stack_init+0x44>)
     e9e:	6183      	str	r3, [r0, #24]

	/* device capabilities */
	TCPIP_STACK_INTERFACE_0_desc.flags = CONF_TCPIP_STACK_INTERFACE_0_FLAG;
     ea0:	4b0e      	ldr	r3, [pc, #56]	; (edc <TCPIP_STACK_INTERFACE_0_stack_init+0x48>)
     ea2:	2162      	movs	r1, #98	; 0x62
     ea4:	f883 102d 	strb.w	r1, [r3, #45]	; 0x2d
	TCPIP_STACK_INTERFACE_0_desc.mtu   = CONF_TCPIP_STACK_INTERFACE_0_MTU;
     ea8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
     eac:	8499      	strh	r1, [r3, #36]	; 0x24

	/* set MAC hardware address length */
	memcpy(TCPIP_STACK_INTERFACE_0_desc.hwaddr, TCPIP_STACK_INTERFACE_0_hwaddr, NETIF_MAX_HWADDR_LEN);
     eae:	490c      	ldr	r1, [pc, #48]	; (ee0 <TCPIP_STACK_INTERFACE_0_stack_init+0x4c>)
     eb0:	6808      	ldr	r0, [r1, #0]
     eb2:	f8c3 0027 	str.w	r0, [r3, #39]	; 0x27
     eb6:	8889      	ldrh	r1, [r1, #4]
     eb8:	f8a3 102b 	strh.w	r1, [r3, #43]	; 0x2b
	TCPIP_STACK_INTERFACE_0_desc.hwaddr_len = ETHARP_HWADDR_LEN;
     ebc:	2106      	movs	r1, #6
     ebe:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	LWIP_MACIF_desc.hostname = CONF_TCPIP_STACK_INTERFACE_0_HOSTNAME;
#endif
	memcpy(TCPIP_STACK_INTERFACE_0_desc.name, CONF_TCPIP_STACK_INTERFACE_0_HOSTNAME_ABBR, 2);
     ec2:	f646 6165 	movw	r1, #28261	; 0x6e65
     ec6:	85d9      	strh	r1, [r3, #46]	; 0x2e

	/* initialize the mac hardware */
	mac_low_level_init(netif);
     ec8:	4610      	mov	r0, r2
     eca:	4b06      	ldr	r3, [pc, #24]	; (ee4 <TCPIP_STACK_INTERFACE_0_stack_init+0x50>)
     ecc:	4798      	blx	r3

	return ERR_OK;
}
     ece:	2000      	movs	r0, #0
     ed0:	bd08      	pop	{r3, pc}
     ed2:	bf00      	nop
     ed4:	00009049 	.word	0x00009049
     ed8:	00002359 	.word	0x00002359
     edc:	2001295c 	.word	0x2001295c
     ee0:	200000e0 	.word	0x200000e0
     ee4:	0000232d 	.word	0x0000232d

00000ee8 <TCPIP_STACK_INTERFACE_0_init>:
void TCPIP_STACK_INTERFACE_0_init(u8_t hwaddr[6])
{
     ee8:	b530      	push	{r4, r5, lr}
     eea:	b089      	sub	sp, #36	; 0x24
     eec:	4605      	mov	r5, r0
#if CONF_TCPIP_STACK_INTERFACE_0_DHCP
	ip_addr_set_zero(&ip);
	ip_addr_set_zero(&nm);
	ip_addr_set_zero(&gw);
#else
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_IP, &ip);
     eee:	a907      	add	r1, sp, #28
     ef0:	480d      	ldr	r0, [pc, #52]	; (f28 <TCPIP_STACK_INTERFACE_0_init+0x40>)
     ef2:	4c0e      	ldr	r4, [pc, #56]	; (f2c <TCPIP_STACK_INTERFACE_0_init+0x44>)
     ef4:	47a0      	blx	r4
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_NETMASK, &nm);
     ef6:	a906      	add	r1, sp, #24
     ef8:	480d      	ldr	r0, [pc, #52]	; (f30 <TCPIP_STACK_INTERFACE_0_init+0x48>)
     efa:	47a0      	blx	r4
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_GATEWAY, &gw);
     efc:	a905      	add	r1, sp, #20
     efe:	480d      	ldr	r0, [pc, #52]	; (f34 <TCPIP_STACK_INTERFACE_0_init+0x4c>)
     f00:	47a0      	blx	r4
#endif
	memcpy(TCPIP_STACK_INTERFACE_0_hwaddr, hwaddr, 6);
     f02:	4b0d      	ldr	r3, [pc, #52]	; (f38 <TCPIP_STACK_INTERFACE_0_init+0x50>)
     f04:	6828      	ldr	r0, [r5, #0]
     f06:	6018      	str	r0, [r3, #0]
     f08:	88aa      	ldrh	r2, [r5, #4]
     f0a:	809a      	strh	r2, [r3, #4]

	netif_add(&TCPIP_STACK_INTERFACE_0_desc,
     f0c:	4b0b      	ldr	r3, [pc, #44]	; (f3c <TCPIP_STACK_INTERFACE_0_init+0x54>)
     f0e:	9302      	str	r3, [sp, #8]
     f10:	4b0b      	ldr	r3, [pc, #44]	; (f40 <TCPIP_STACK_INTERFACE_0_init+0x58>)
     f12:	9301      	str	r3, [sp, #4]
     f14:	4b0b      	ldr	r3, [pc, #44]	; (f44 <TCPIP_STACK_INTERFACE_0_init+0x5c>)
     f16:	9300      	str	r3, [sp, #0]
     f18:	ab05      	add	r3, sp, #20
     f1a:	aa06      	add	r2, sp, #24
     f1c:	a907      	add	r1, sp, #28
     f1e:	480a      	ldr	r0, [pc, #40]	; (f48 <TCPIP_STACK_INTERFACE_0_init+0x60>)
     f20:	4c0a      	ldr	r4, [pc, #40]	; (f4c <TCPIP_STACK_INTERFACE_0_init+0x64>)
     f22:	47a0      	blx	r4
	          &nm,
	          &gw,
	          (void *)&COMMUNICATION_IO,
	          TCPIP_STACK_INTERFACE_0_stack_init,
	          ethernet_input);
}
     f24:	b009      	add	sp, #36	; 0x24
     f26:	bd30      	pop	{r4, r5, pc}
     f28:	0000d214 	.word	0x0000d214
     f2c:	0000462d 	.word	0x0000462d
     f30:	0000d224 	.word	0x0000d224
     f34:	0000d234 	.word	0x0000d234
     f38:	200000e0 	.word	0x200000e0
     f3c:	00009175 	.word	0x00009175
     f40:	00000e95 	.word	0x00000e95
     f44:	2001291c 	.word	0x2001291c
     f48:	2001295c 	.word	0x2001295c
     f4c:	000052c1 	.word	0x000052c1

00000f50 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f50:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     f54:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f56:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f58:	f3bf 8f5f 	dmb	sy
     f5c:	4770      	bx	lr

00000f5e <atomic_leave_critical>:
     f5e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     f62:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f64:	f383 8810 	msr	PRIMASK, r3
     f68:	4770      	bx	lr
	...

00000f6c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     f6c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     f6e:	2502      	movs	r5, #2
     f70:	2400      	movs	r4, #0

	while (upper >= lower) {
     f72:	e007      	b.n	f84 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     f74:	4a0d      	ldr	r2, [pc, #52]	; (fac <process_ext_irq+0x40>)
     f76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f7a:	b1b3      	cbz	r3, faa <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     f7c:	4798      	blx	r3
     f7e:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     f80:	3a01      	subs	r2, #1
     f82:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     f84:	42ac      	cmp	r4, r5
     f86:	d810      	bhi.n	faa <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     f88:	192b      	adds	r3, r5, r4
     f8a:	105b      	asrs	r3, r3, #1
     f8c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     f8e:	2a01      	cmp	r2, #1
     f90:	d80b      	bhi.n	faa <process_ext_irq+0x3e>
     f92:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     f94:	4905      	ldr	r1, [pc, #20]	; (fac <process_ext_irq+0x40>)
     f96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     f9a:	6849      	ldr	r1, [r1, #4]
     f9c:	4281      	cmp	r1, r0
     f9e:	d0e9      	beq.n	f74 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     fa0:	4281      	cmp	r1, r0
     fa2:	d2ed      	bcs.n	f80 <process_ext_irq+0x14>
			lower = middle + 1;
     fa4:	3201      	adds	r2, #1
     fa6:	b2d4      	uxtb	r4, r2
     fa8:	e7ec      	b.n	f84 <process_ext_irq+0x18>
     faa:	bd38      	pop	{r3, r4, r5, pc}
     fac:	200000e8 	.word	0x200000e8

00000fb0 <ext_irq_init>:
{
     fb0:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     fb2:	2300      	movs	r3, #0
     fb4:	e00a      	b.n	fcc <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     fb6:	4a08      	ldr	r2, [pc, #32]	; (fd8 <ext_irq_init+0x28>)
     fb8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     fbc:	f04f 30ff 	mov.w	r0, #4294967295
     fc0:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     fc2:	2100      	movs	r1, #0
     fc4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     fc8:	3301      	adds	r3, #1
     fca:	b29b      	uxth	r3, r3
     fcc:	2b01      	cmp	r3, #1
     fce:	d9f2      	bls.n	fb6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     fd0:	4802      	ldr	r0, [pc, #8]	; (fdc <ext_irq_init+0x2c>)
     fd2:	4b03      	ldr	r3, [pc, #12]	; (fe0 <ext_irq_init+0x30>)
     fd4:	4798      	blx	r3
}
     fd6:	bd08      	pop	{r3, pc}
     fd8:	200000e8 	.word	0x200000e8
     fdc:	00000f6d 	.word	0x00000f6d
     fe0:	00001661 	.word	0x00001661

00000fe4 <ext_irq_register>:
{
     fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fe6:	b083      	sub	sp, #12
     fe8:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     fea:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     fec:	2b01      	cmp	r3, #1
     fee:	d80e      	bhi.n	100e <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     ff0:	4618      	mov	r0, r3
     ff2:	4a2e      	ldr	r2, [pc, #184]	; (10ac <ext_irq_register+0xc8>)
     ff4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     ff8:	6852      	ldr	r2, [r2, #4]
     ffa:	42a2      	cmp	r2, r4
     ffc:	d002      	beq.n	1004 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     ffe:	3301      	adds	r3, #1
    1000:	b2db      	uxtb	r3, r3
    1002:	e7f3      	b.n	fec <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
    1004:	4b29      	ldr	r3, [pc, #164]	; (10ac <ext_irq_register+0xc8>)
    1006:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
    100a:	2501      	movs	r5, #1
			break;
    100c:	e000      	b.n	1010 <ext_irq_register+0x2c>
	bool    found = false;
    100e:	2500      	movs	r5, #0
	if (NULL == cb) {
    1010:	b159      	cbz	r1, 102a <ext_irq_register+0x46>
	if (!found) {
    1012:	2d00      	cmp	r5, #0
    1014:	d13d      	bne.n	1092 <ext_irq_register+0xae>
    1016:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1018:	2b01      	cmp	r3, #1
    101a:	d813      	bhi.n	1044 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    101c:	4a23      	ldr	r2, [pc, #140]	; (10ac <ext_irq_register+0xc8>)
    101e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    1022:	b142      	cbz	r2, 1036 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1024:	3301      	adds	r3, #1
    1026:	b2db      	uxtb	r3, r3
    1028:	e7f6      	b.n	1018 <ext_irq_register+0x34>
		if (!found) {
    102a:	2d00      	cmp	r5, #0
    102c:	d038      	beq.n	10a0 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
    102e:	4620      	mov	r0, r4
    1030:	4b1f      	ldr	r3, [pc, #124]	; (10b0 <ext_irq_register+0xcc>)
    1032:	4798      	blx	r3
    1034:	e032      	b.n	109c <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
    1036:	4a1d      	ldr	r2, [pc, #116]	; (10ac <ext_irq_register+0xc8>)
    1038:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
    103c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1040:	6054      	str	r4, [r2, #4]
				found           = true;
    1042:	2501      	movs	r5, #1
    1044:	2200      	movs	r2, #0
    1046:	e001      	b.n	104c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1048:	3201      	adds	r2, #1
    104a:	b2d2      	uxtb	r2, r2
    104c:	2a01      	cmp	r2, #1
    104e:	d820      	bhi.n	1092 <ext_irq_register+0xae>
    1050:	2b01      	cmp	r3, #1
    1052:	d81e      	bhi.n	1092 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1054:	469e      	mov	lr, r3
    1056:	4915      	ldr	r1, [pc, #84]	; (10ac <ext_irq_register+0xc8>)
    1058:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    105c:	6840      	ldr	r0, [r0, #4]
    105e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1062:	6849      	ldr	r1, [r1, #4]
    1064:	4288      	cmp	r0, r1
    1066:	d2ef      	bcs.n	1048 <ext_irq_register+0x64>
    1068:	f1b1 3fff 	cmp.w	r1, #4294967295
    106c:	d0ec      	beq.n	1048 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    106e:	4f0f      	ldr	r7, [pc, #60]	; (10ac <ext_irq_register+0xc8>)
    1070:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    1074:	e896 0003 	ldmia.w	r6, {r0, r1}
    1078:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
    107c:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    1080:	e897 0003 	ldmia.w	r7, {r0, r1}
    1084:	e886 0003 	stmia.w	r6, {r0, r1}
				ext_irqs[i] = tmp;
    1088:	e89d 0003 	ldmia.w	sp, {r0, r1}
    108c:	e887 0003 	stmia.w	r7, {r0, r1}
    1090:	e7da      	b.n	1048 <ext_irq_register+0x64>
	if (!found) {
    1092:	b145      	cbz	r5, 10a6 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
    1094:	2101      	movs	r1, #1
    1096:	4620      	mov	r0, r4
    1098:	4b05      	ldr	r3, [pc, #20]	; (10b0 <ext_irq_register+0xcc>)
    109a:	4798      	blx	r3
}
    109c:	b003      	add	sp, #12
    109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    10a0:	f06f 000c 	mvn.w	r0, #12
    10a4:	e7fa      	b.n	109c <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
    10a6:	f06f 000c 	mvn.w	r0, #12
    10aa:	e7f7      	b.n	109c <ext_irq_register+0xb8>
    10ac:	200000e8 	.word	0x200000e8
    10b0:	00001739 	.word	0x00001739

000010b4 <ext_irq_enable>:
{
    10b4:	b508      	push	{r3, lr}
	return _ext_irq_enable(pin, true);
    10b6:	2101      	movs	r1, #1
    10b8:	4b01      	ldr	r3, [pc, #4]	; (10c0 <ext_irq_enable+0xc>)
    10ba:	4798      	blx	r3
}
    10bc:	bd08      	pop	{r3, pc}
    10be:	bf00      	nop
    10c0:	00001739 	.word	0x00001739

000010c4 <ext_irq_disable>:
{
    10c4:	b508      	push	{r3, lr}
	return _ext_irq_enable(pin, false);
    10c6:	2100      	movs	r1, #0
    10c8:	4b01      	ldr	r3, [pc, #4]	; (10d0 <ext_irq_disable+0xc>)
    10ca:	4798      	blx	r3
}
    10cc:	bd08      	pop	{r3, pc}
    10ce:	bf00      	nop
    10d0:	00001739 	.word	0x00001739

000010d4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    10d4:	b570      	push	{r4, r5, r6, lr}
    10d6:	460d      	mov	r5, r1
    10d8:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    10da:	4604      	mov	r4, r0
    10dc:	b168      	cbz	r0, 10fa <io_write+0x26>
    10de:	b151      	cbz	r1, 10f6 <io_write+0x22>
    10e0:	2001      	movs	r0, #1
    10e2:	2234      	movs	r2, #52	; 0x34
    10e4:	4906      	ldr	r1, [pc, #24]	; (1100 <io_write+0x2c>)
    10e6:	4b07      	ldr	r3, [pc, #28]	; (1104 <io_write+0x30>)
    10e8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    10ea:	6823      	ldr	r3, [r4, #0]
    10ec:	4632      	mov	r2, r6
    10ee:	4629      	mov	r1, r5
    10f0:	4620      	mov	r0, r4
    10f2:	4798      	blx	r3
}
    10f4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    10f6:	2000      	movs	r0, #0
    10f8:	e7f3      	b.n	10e2 <io_write+0xe>
    10fa:	2000      	movs	r0, #0
    10fc:	e7f1      	b.n	10e2 <io_write+0xe>
    10fe:	bf00      	nop
    1100:	0000d240 	.word	0x0000d240
    1104:	0000151d 	.word	0x0000151d

00001108 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1108:	b570      	push	{r4, r5, r6, lr}
    110a:	460d      	mov	r5, r1
    110c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    110e:	4604      	mov	r4, r0
    1110:	b168      	cbz	r0, 112e <io_read+0x26>
    1112:	b151      	cbz	r1, 112a <io_read+0x22>
    1114:	2001      	movs	r0, #1
    1116:	223d      	movs	r2, #61	; 0x3d
    1118:	4906      	ldr	r1, [pc, #24]	; (1134 <io_read+0x2c>)
    111a:	4b07      	ldr	r3, [pc, #28]	; (1138 <io_read+0x30>)
    111c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    111e:	6863      	ldr	r3, [r4, #4]
    1120:	4632      	mov	r2, r6
    1122:	4629      	mov	r1, r5
    1124:	4620      	mov	r0, r4
    1126:	4798      	blx	r3
}
    1128:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    112a:	2000      	movs	r0, #0
    112c:	e7f3      	b.n	1116 <io_read+0xe>
    112e:	2000      	movs	r0, #0
    1130:	e7f1      	b.n	1116 <io_read+0xe>
    1132:	bf00      	nop
    1134:	0000d240 	.word	0x0000d240
    1138:	0000151d 	.word	0x0000151d

0000113c <mac_read_cb>:
 * \internal data receivced handler
 *
 * \param[in] dev The pointer to MAC device structure
 */
static void mac_read_cb(struct _mac_async_device *dev)
{
    113c:	b508      	push	{r3, lr}
	struct mac_async_descriptor *const descr = CONTAINER_OF(dev, struct mac_async_descriptor, dev);

	if (descr->cb.receive) {
    113e:	6943      	ldr	r3, [r0, #20]
    1140:	b103      	cbz	r3, 1144 <mac_read_cb+0x8>
		descr->cb.receive(descr);
    1142:	4798      	blx	r3
    1144:	bd08      	pop	{r3, pc}

00001146 <mac_write_cb>:
 * \internal data transmit handler
 *
 * \param[in] dev The pointer to MAC device structure
 */
static void mac_write_cb(struct _mac_async_device *dev)
{
    1146:	b508      	push	{r3, lr}
	struct mac_async_descriptor *const descr = CONTAINER_OF(dev, struct mac_async_descriptor, dev);

	if (descr->cb.transmit) {
    1148:	6983      	ldr	r3, [r0, #24]
    114a:	b103      	cbz	r3, 114e <mac_write_cb+0x8>
		descr->cb.transmit(descr);
    114c:	4798      	blx	r3
    114e:	bd08      	pop	{r3, pc}

00001150 <mac_async_init>:
{
    1150:	b538      	push	{r3, r4, r5, lr}
    1152:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1154:	4605      	mov	r5, r0
    1156:	b160      	cbz	r0, 1172 <mac_async_init+0x22>
    1158:	b149      	cbz	r1, 116e <mac_async_init+0x1e>
    115a:	2001      	movs	r0, #1
    115c:	2231      	movs	r2, #49	; 0x31
    115e:	4906      	ldr	r1, [pc, #24]	; (1178 <mac_async_init+0x28>)
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <mac_async_init+0x2c>)
    1162:	4798      	blx	r3
	return _mac_async_init(&descr->dev, hw);
    1164:	4621      	mov	r1, r4
    1166:	4628      	mov	r0, r5
    1168:	4b05      	ldr	r3, [pc, #20]	; (1180 <mac_async_init+0x30>)
    116a:	4798      	blx	r3
}
    116c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    116e:	2000      	movs	r0, #0
    1170:	e7f4      	b.n	115c <mac_async_init+0xc>
    1172:	2000      	movs	r0, #0
    1174:	e7f2      	b.n	115c <mac_async_init+0xc>
    1176:	bf00      	nop
    1178:	0000d254 	.word	0x0000d254
    117c:	0000151d 	.word	0x0000151d
    1180:	000018cd 	.word	0x000018cd

00001184 <mac_async_enable>:
{
    1184:	b510      	push	{r4, lr}
	ASSERT(descr);
    1186:	4604      	mov	r4, r0
    1188:	2245      	movs	r2, #69	; 0x45
    118a:	4905      	ldr	r1, [pc, #20]	; (11a0 <mac_async_enable+0x1c>)
    118c:	3000      	adds	r0, #0
    118e:	bf18      	it	ne
    1190:	2001      	movne	r0, #1
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <mac_async_enable+0x20>)
    1194:	4798      	blx	r3
	return _mac_async_enable(&descr->dev);
    1196:	4620      	mov	r0, r4
    1198:	4b03      	ldr	r3, [pc, #12]	; (11a8 <mac_async_enable+0x24>)
    119a:	4798      	blx	r3
}
    119c:	bd10      	pop	{r4, pc}
    119e:	bf00      	nop
    11a0:	0000d254 	.word	0x0000d254
    11a4:	0000151d 	.word	0x0000151d
    11a8:	00001935 	.word	0x00001935

000011ac <mac_async_write>:
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	460c      	mov	r4, r1
    11b0:	4615      	mov	r5, r2
	ASSERT(descr && buf && len);
    11b2:	4606      	mov	r6, r0
    11b4:	b160      	cbz	r0, 11d0 <mac_async_write+0x24>
    11b6:	b169      	cbz	r1, 11d4 <mac_async_write+0x28>
    11b8:	b972      	cbnz	r2, 11d8 <mac_async_write+0x2c>
    11ba:	2000      	movs	r0, #0
    11bc:	2257      	movs	r2, #87	; 0x57
    11be:	4907      	ldr	r1, [pc, #28]	; (11dc <mac_async_write+0x30>)
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <mac_async_write+0x34>)
    11c2:	4798      	blx	r3
	return _mac_async_write(&descr->dev, buf, len);
    11c4:	462a      	mov	r2, r5
    11c6:	4621      	mov	r1, r4
    11c8:	4630      	mov	r0, r6
    11ca:	4b06      	ldr	r3, [pc, #24]	; (11e4 <mac_async_write+0x38>)
    11cc:	4798      	blx	r3
}
    11ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && len);
    11d0:	2000      	movs	r0, #0
    11d2:	e7f3      	b.n	11bc <mac_async_write+0x10>
    11d4:	2000      	movs	r0, #0
    11d6:	e7f1      	b.n	11bc <mac_async_write+0x10>
    11d8:	2001      	movs	r0, #1
    11da:	e7ef      	b.n	11bc <mac_async_write+0x10>
    11dc:	0000d254 	.word	0x0000d254
    11e0:	0000151d 	.word	0x0000151d
    11e4:	00001945 	.word	0x00001945

000011e8 <mac_async_read>:
{
    11e8:	b570      	push	{r4, r5, r6, lr}
    11ea:	460d      	mov	r5, r1
    11ec:	4616      	mov	r6, r2
	ASSERT(descr);
    11ee:	4604      	mov	r4, r0
    11f0:	2261      	movs	r2, #97	; 0x61
    11f2:	4906      	ldr	r1, [pc, #24]	; (120c <mac_async_read+0x24>)
    11f4:	3000      	adds	r0, #0
    11f6:	bf18      	it	ne
    11f8:	2001      	movne	r0, #1
    11fa:	4b05      	ldr	r3, [pc, #20]	; (1210 <mac_async_read+0x28>)
    11fc:	4798      	blx	r3
	return _mac_async_read(&descr->dev, buf, len);
    11fe:	4632      	mov	r2, r6
    1200:	4629      	mov	r1, r5
    1202:	4620      	mov	r0, r4
    1204:	4b03      	ldr	r3, [pc, #12]	; (1214 <mac_async_read+0x2c>)
    1206:	4798      	blx	r3
}
    1208:	bd70      	pop	{r4, r5, r6, pc}
    120a:	bf00      	nop
    120c:	0000d254 	.word	0x0000d254
    1210:	0000151d 	.word	0x0000151d
    1214:	00001abd 	.word	0x00001abd

00001218 <mac_async_read_len>:
{
    1218:	b510      	push	{r4, lr}
	ASSERT(descr);
    121a:	4604      	mov	r4, r0
    121c:	226b      	movs	r2, #107	; 0x6b
    121e:	4905      	ldr	r1, [pc, #20]	; (1234 <mac_async_read_len+0x1c>)
    1220:	3000      	adds	r0, #0
    1222:	bf18      	it	ne
    1224:	2001      	movne	r0, #1
    1226:	4b04      	ldr	r3, [pc, #16]	; (1238 <mac_async_read_len+0x20>)
    1228:	4798      	blx	r3
	return _mac_async_read_len(&descr->dev);
    122a:	4620      	mov	r0, r4
    122c:	4b03      	ldr	r3, [pc, #12]	; (123c <mac_async_read_len+0x24>)
    122e:	4798      	blx	r3
}
    1230:	bd10      	pop	{r4, pc}
    1232:	bf00      	nop
    1234:	0000d254 	.word	0x0000d254
    1238:	0000151d 	.word	0x0000151d
    123c:	00001bdd 	.word	0x00001bdd

00001240 <mac_async_register_callback>:
{
    1240:	b570      	push	{r4, r5, r6, lr}
    1242:	460c      	mov	r4, r1
    1244:	4616      	mov	r6, r2
	ASSERT(descr);
    1246:	4605      	mov	r5, r0
    1248:	2289      	movs	r2, #137	; 0x89
    124a:	4910      	ldr	r1, [pc, #64]	; (128c <mac_async_register_callback+0x4c>)
    124c:	3000      	adds	r0, #0
    124e:	bf18      	it	ne
    1250:	2001      	movne	r0, #1
    1252:	4b0f      	ldr	r3, [pc, #60]	; (1290 <mac_async_register_callback+0x50>)
    1254:	4798      	blx	r3
	switch (type) {
    1256:	b124      	cbz	r4, 1262 <mac_async_register_callback+0x22>
    1258:	2c01      	cmp	r4, #1
    125a:	d00c      	beq.n	1276 <mac_async_register_callback+0x36>
		return ERR_INVALID_ARG;
    125c:	f06f 000c 	mvn.w	r0, #12
}
    1260:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.receive = (mac_async_cb_t)func;
    1262:	616e      	str	r6, [r5, #20]
		return _mac_async_register_callback(&descr->dev, type, (func == NULL) ? NULL : (FUNC_PTR)mac_read_cb);
    1264:	b12e      	cbz	r6, 1272 <mac_async_register_callback+0x32>
    1266:	4a0b      	ldr	r2, [pc, #44]	; (1294 <mac_async_register_callback+0x54>)
    1268:	4621      	mov	r1, r4
    126a:	4628      	mov	r0, r5
    126c:	4b0a      	ldr	r3, [pc, #40]	; (1298 <mac_async_register_callback+0x58>)
    126e:	4798      	blx	r3
    1270:	bd70      	pop	{r4, r5, r6, pc}
    1272:	2200      	movs	r2, #0
    1274:	e7f8      	b.n	1268 <mac_async_register_callback+0x28>
		descr->cb.transmit = (mac_async_cb_t)func;
    1276:	61ae      	str	r6, [r5, #24]
		return _mac_async_register_callback(&descr->dev, type, (func == NULL) ? NULL : (FUNC_PTR)mac_write_cb);
    1278:	b12e      	cbz	r6, 1286 <mac_async_register_callback+0x46>
    127a:	4a08      	ldr	r2, [pc, #32]	; (129c <mac_async_register_callback+0x5c>)
    127c:	4621      	mov	r1, r4
    127e:	4628      	mov	r0, r5
    1280:	4b05      	ldr	r3, [pc, #20]	; (1298 <mac_async_register_callback+0x58>)
    1282:	4798      	blx	r3
    1284:	bd70      	pop	{r4, r5, r6, pc}
    1286:	2200      	movs	r2, #0
    1288:	e7f8      	b.n	127c <mac_async_register_callback+0x3c>
    128a:	bf00      	nop
    128c:	0000d254 	.word	0x0000d254
    1290:	0000151d 	.word	0x0000151d
    1294:	0000113d 	.word	0x0000113d
    1298:	00001c4d 	.word	0x00001c4d
    129c:	00001147 	.word	0x00001147

000012a0 <mac_async_set_filter>:
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	460e      	mov	r6, r1
    12a4:	4614      	mov	r4, r2
	ASSERT(descr && filter);
    12a6:	4605      	mov	r5, r0
    12a8:	b168      	cbz	r0, 12c6 <mac_async_set_filter+0x26>
    12aa:	b152      	cbz	r2, 12c2 <mac_async_set_filter+0x22>
    12ac:	2001      	movs	r0, #1
    12ae:	229b      	movs	r2, #155	; 0x9b
    12b0:	4906      	ldr	r1, [pc, #24]	; (12cc <mac_async_set_filter+0x2c>)
    12b2:	4b07      	ldr	r3, [pc, #28]	; (12d0 <mac_async_set_filter+0x30>)
    12b4:	4798      	blx	r3
	return _mac_async_set_filter(&descr->dev, index, filter);
    12b6:	4622      	mov	r2, r4
    12b8:	4631      	mov	r1, r6
    12ba:	4628      	mov	r0, r5
    12bc:	4b05      	ldr	r3, [pc, #20]	; (12d4 <mac_async_set_filter+0x34>)
    12be:	4798      	blx	r3
}
    12c0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && filter);
    12c2:	2000      	movs	r0, #0
    12c4:	e7f3      	b.n	12ae <mac_async_set_filter+0xe>
    12c6:	2000      	movs	r0, #0
    12c8:	e7f1      	b.n	12ae <mac_async_set_filter+0xe>
    12ca:	bf00      	nop
    12cc:	0000d254 	.word	0x0000d254
    12d0:	0000151d 	.word	0x0000151d
    12d4:	00001c89 	.word	0x00001c89

000012d8 <mac_async_read_phy_reg>:
{
    12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12da:	460e      	mov	r6, r1
    12dc:	4617      	mov	r7, r2
    12de:	461c      	mov	r4, r3
	ASSERT(descr && val);
    12e0:	4605      	mov	r5, r0
    12e2:	b170      	cbz	r0, 1302 <mac_async_read_phy_reg+0x2a>
    12e4:	b15b      	cbz	r3, 12fe <mac_async_read_phy_reg+0x26>
    12e6:	2001      	movs	r0, #1
    12e8:	22b8      	movs	r2, #184	; 0xb8
    12ea:	4907      	ldr	r1, [pc, #28]	; (1308 <mac_async_read_phy_reg+0x30>)
    12ec:	4b07      	ldr	r3, [pc, #28]	; (130c <mac_async_read_phy_reg+0x34>)
    12ee:	4798      	blx	r3
	return _mac_async_read_phy_reg(&descr->dev, addr, reg, val);
    12f0:	4623      	mov	r3, r4
    12f2:	463a      	mov	r2, r7
    12f4:	4631      	mov	r1, r6
    12f6:	4628      	mov	r0, r5
    12f8:	4c05      	ldr	r4, [pc, #20]	; (1310 <mac_async_read_phy_reg+0x38>)
    12fa:	47a0      	blx	r4
}
    12fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && val);
    12fe:	2000      	movs	r0, #0
    1300:	e7f2      	b.n	12e8 <mac_async_read_phy_reg+0x10>
    1302:	2000      	movs	r0, #0
    1304:	e7f0      	b.n	12e8 <mac_async_read_phy_reg+0x10>
    1306:	bf00      	nop
    1308:	0000d254 	.word	0x0000d254
    130c:	0000151d 	.word	0x0000151d
    1310:	00001cd1 	.word	0x00001cd1

00001314 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1314:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1316:	6943      	ldr	r3, [r0, #20]
    1318:	b103      	cbz	r3, 131c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    131a:	4798      	blx	r3
    131c:	bd08      	pop	{r3, pc}

0000131e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    131e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1320:	6983      	ldr	r3, [r0, #24]
    1322:	b103      	cbz	r3, 1326 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1324:	4798      	blx	r3
    1326:	bd08      	pop	{r3, pc}

00001328 <pwm_init>:
{
    1328:	b538      	push	{r3, r4, r5, lr}
    132a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    132c:	4604      	mov	r4, r0
    132e:	b188      	cbz	r0, 1354 <pwm_init+0x2c>
    1330:	b171      	cbz	r1, 1350 <pwm_init+0x28>
    1332:	2001      	movs	r0, #1
    1334:	2233      	movs	r2, #51	; 0x33
    1336:	4908      	ldr	r1, [pc, #32]	; (1358 <pwm_init+0x30>)
    1338:	4b08      	ldr	r3, [pc, #32]	; (135c <pwm_init+0x34>)
    133a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    133c:	4629      	mov	r1, r5
    133e:	4620      	mov	r0, r4
    1340:	4b07      	ldr	r3, [pc, #28]	; (1360 <pwm_init+0x38>)
    1342:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1344:	4b07      	ldr	r3, [pc, #28]	; (1364 <pwm_init+0x3c>)
    1346:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1348:	4b07      	ldr	r3, [pc, #28]	; (1368 <pwm_init+0x40>)
    134a:	6063      	str	r3, [r4, #4]
}
    134c:	2000      	movs	r0, #0
    134e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1350:	2000      	movs	r0, #0
    1352:	e7ef      	b.n	1334 <pwm_init+0xc>
    1354:	2000      	movs	r0, #0
    1356:	e7ed      	b.n	1334 <pwm_init+0xc>
    1358:	0000d270 	.word	0x0000d270
    135c:	0000151d 	.word	0x0000151d
    1360:	00002069 	.word	0x00002069
    1364:	00001315 	.word	0x00001315
    1368:	0000131f 	.word	0x0000131f

0000136c <pwm_enable>:
{
    136c:	b510      	push	{r4, lr}
	ASSERT(descr);
    136e:	4604      	mov	r4, r0
    1370:	224a      	movs	r2, #74	; 0x4a
    1372:	4909      	ldr	r1, [pc, #36]	; (1398 <pwm_enable+0x2c>)
    1374:	3000      	adds	r0, #0
    1376:	bf18      	it	ne
    1378:	2001      	movne	r0, #1
    137a:	4b08      	ldr	r3, [pc, #32]	; (139c <pwm_enable+0x30>)
    137c:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    137e:	4620      	mov	r0, r4
    1380:	4b07      	ldr	r3, [pc, #28]	; (13a0 <pwm_enable+0x34>)
    1382:	4798      	blx	r3
    1384:	b920      	cbnz	r0, 1390 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    1386:	4620      	mov	r0, r4
    1388:	4b06      	ldr	r3, [pc, #24]	; (13a4 <pwm_enable+0x38>)
    138a:	4798      	blx	r3
	return ERR_NONE;
    138c:	2000      	movs	r0, #0
    138e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1390:	f06f 0010 	mvn.w	r0, #16
}
    1394:	bd10      	pop	{r4, pc}
    1396:	bf00      	nop
    1398:	0000d270 	.word	0x0000d270
    139c:	0000151d 	.word	0x0000151d
    13a0:	0000227d 	.word	0x0000227d
    13a4:	000021e9 	.word	0x000021e9

000013a8 <pwm_set_parameters>:
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	460d      	mov	r5, r1
    13ac:	4616      	mov	r6, r2
	ASSERT(descr);
    13ae:	4604      	mov	r4, r0
    13b0:	227c      	movs	r2, #124	; 0x7c
    13b2:	4906      	ldr	r1, [pc, #24]	; (13cc <pwm_set_parameters+0x24>)
    13b4:	3000      	adds	r0, #0
    13b6:	bf18      	it	ne
    13b8:	2001      	movne	r0, #1
    13ba:	4b05      	ldr	r3, [pc, #20]	; (13d0 <pwm_set_parameters+0x28>)
    13bc:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    13be:	4632      	mov	r2, r6
    13c0:	4629      	mov	r1, r5
    13c2:	4620      	mov	r0, r4
    13c4:	4b03      	ldr	r3, [pc, #12]	; (13d4 <pwm_set_parameters+0x2c>)
    13c6:	4798      	blx	r3
}
    13c8:	2000      	movs	r0, #0
    13ca:	bd70      	pop	{r4, r5, r6, pc}
    13cc:	0000d270 	.word	0x0000d270
    13d0:	0000151d 	.word	0x0000151d
    13d4:	000021fd 	.word	0x000021fd

000013d8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    13d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13da:	460e      	mov	r6, r1
    13dc:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    13de:	4605      	mov	r5, r0
    13e0:	b308      	cbz	r0, 1426 <usart_sync_write+0x4e>
    13e2:	b311      	cbz	r1, 142a <usart_sync_write+0x52>
    13e4:	bb1a      	cbnz	r2, 142e <usart_sync_write+0x56>
    13e6:	2000      	movs	r0, #0
    13e8:	22f1      	movs	r2, #241	; 0xf1
    13ea:	4912      	ldr	r1, [pc, #72]	; (1434 <usart_sync_write+0x5c>)
    13ec:	4b12      	ldr	r3, [pc, #72]	; (1438 <usart_sync_write+0x60>)
    13ee:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    13f0:	f105 0408 	add.w	r4, r5, #8
    13f4:	4620      	mov	r0, r4
    13f6:	4b11      	ldr	r3, [pc, #68]	; (143c <usart_sync_write+0x64>)
    13f8:	4798      	blx	r3
    13fa:	2800      	cmp	r0, #0
    13fc:	d0f8      	beq.n	13f0 <usart_sync_write+0x18>
    13fe:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1400:	5d71      	ldrb	r1, [r6, r5]
    1402:	4620      	mov	r0, r4
    1404:	4b0e      	ldr	r3, [pc, #56]	; (1440 <usart_sync_write+0x68>)
    1406:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1408:	4620      	mov	r0, r4
    140a:	4b0c      	ldr	r3, [pc, #48]	; (143c <usart_sync_write+0x64>)
    140c:	4798      	blx	r3
    140e:	2800      	cmp	r0, #0
    1410:	d0fa      	beq.n	1408 <usart_sync_write+0x30>
			;
	} while (++offset < length);
    1412:	3501      	adds	r5, #1
    1414:	42bd      	cmp	r5, r7
    1416:	d3f3      	bcc.n	1400 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1418:	4620      	mov	r0, r4
    141a:	4b0a      	ldr	r3, [pc, #40]	; (1444 <usart_sync_write+0x6c>)
    141c:	4798      	blx	r3
    141e:	2800      	cmp	r0, #0
    1420:	d0fa      	beq.n	1418 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    1422:	4628      	mov	r0, r5
    1424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1426:	2000      	movs	r0, #0
    1428:	e7de      	b.n	13e8 <usart_sync_write+0x10>
    142a:	2000      	movs	r0, #0
    142c:	e7dc      	b.n	13e8 <usart_sync_write+0x10>
    142e:	2001      	movs	r0, #1
    1430:	e7da      	b.n	13e8 <usart_sync_write+0x10>
    1432:	bf00      	nop
    1434:	0000d288 	.word	0x0000d288
    1438:	0000151d 	.word	0x0000151d
    143c:	00001f6b 	.word	0x00001f6b
    1440:	00001f5d 	.word	0x00001f5d
    1444:	00001f75 	.word	0x00001f75

00001448 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    144c:	460f      	mov	r7, r1
    144e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1450:	4605      	mov	r5, r0
    1452:	b1c8      	cbz	r0, 1488 <usart_sync_read+0x40>
    1454:	b1d1      	cbz	r1, 148c <usart_sync_read+0x44>
    1456:	b9da      	cbnz	r2, 1490 <usart_sync_read+0x48>
    1458:	2000      	movs	r0, #0
    145a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    145e:	490d      	ldr	r1, [pc, #52]	; (1494 <usart_sync_read+0x4c>)
    1460:	4b0d      	ldr	r3, [pc, #52]	; (1498 <usart_sync_read+0x50>)
    1462:	4798      	blx	r3
	uint32_t                      offset = 0;
    1464:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1466:	f105 0408 	add.w	r4, r5, #8
    146a:	4620      	mov	r0, r4
    146c:	4b0b      	ldr	r3, [pc, #44]	; (149c <usart_sync_read+0x54>)
    146e:	4798      	blx	r3
    1470:	2800      	cmp	r0, #0
    1472:	d0f8      	beq.n	1466 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1474:	4620      	mov	r0, r4
    1476:	4b0a      	ldr	r3, [pc, #40]	; (14a0 <usart_sync_read+0x58>)
    1478:	4798      	blx	r3
    147a:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    147c:	3601      	adds	r6, #1
    147e:	4546      	cmp	r6, r8
    1480:	d3f1      	bcc.n	1466 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    1482:	4630      	mov	r0, r6
    1484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    1488:	2000      	movs	r0, #0
    148a:	e7e6      	b.n	145a <usart_sync_read+0x12>
    148c:	2000      	movs	r0, #0
    148e:	e7e4      	b.n	145a <usart_sync_read+0x12>
    1490:	2001      	movs	r0, #1
    1492:	e7e2      	b.n	145a <usart_sync_read+0x12>
    1494:	0000d288 	.word	0x0000d288
    1498:	0000151d 	.word	0x0000151d
    149c:	00001f7f 	.word	0x00001f7f
    14a0:	00001f63 	.word	0x00001f63

000014a4 <usart_sync_init>:
{
    14a4:	b538      	push	{r3, r4, r5, lr}
    14a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    14a8:	4604      	mov	r4, r0
    14aa:	b1a0      	cbz	r0, 14d6 <usart_sync_init+0x32>
    14ac:	b189      	cbz	r1, 14d2 <usart_sync_init+0x2e>
    14ae:	2001      	movs	r0, #1
    14b0:	2234      	movs	r2, #52	; 0x34
    14b2:	490a      	ldr	r1, [pc, #40]	; (14dc <usart_sync_init+0x38>)
    14b4:	4b0a      	ldr	r3, [pc, #40]	; (14e0 <usart_sync_init+0x3c>)
    14b6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    14b8:	4629      	mov	r1, r5
    14ba:	f104 0008 	add.w	r0, r4, #8
    14be:	4b09      	ldr	r3, [pc, #36]	; (14e4 <usart_sync_init+0x40>)
    14c0:	4798      	blx	r3
	if (init_status) {
    14c2:	4603      	mov	r3, r0
    14c4:	b918      	cbnz	r0, 14ce <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    14c6:	4a08      	ldr	r2, [pc, #32]	; (14e8 <usart_sync_init+0x44>)
    14c8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    14ca:	4a08      	ldr	r2, [pc, #32]	; (14ec <usart_sync_init+0x48>)
    14cc:	6022      	str	r2, [r4, #0]
}
    14ce:	4618      	mov	r0, r3
    14d0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    14d2:	2000      	movs	r0, #0
    14d4:	e7ec      	b.n	14b0 <usart_sync_init+0xc>
    14d6:	2000      	movs	r0, #0
    14d8:	e7ea      	b.n	14b0 <usart_sync_init+0xc>
    14da:	bf00      	nop
    14dc:	0000d288 	.word	0x0000d288
    14e0:	0000151d 	.word	0x0000151d
    14e4:	00001f1d 	.word	0x00001f1d
    14e8:	00001449 	.word	0x00001449
    14ec:	000013d9 	.word	0x000013d9

000014f0 <usart_sync_enable>:
{
    14f0:	b510      	push	{r4, lr}
	ASSERT(descr);
    14f2:	4604      	mov	r4, r0
    14f4:	2253      	movs	r2, #83	; 0x53
    14f6:	4906      	ldr	r1, [pc, #24]	; (1510 <usart_sync_enable+0x20>)
    14f8:	3000      	adds	r0, #0
    14fa:	bf18      	it	ne
    14fc:	2001      	movne	r0, #1
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <usart_sync_enable+0x24>)
    1500:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1502:	f104 0008 	add.w	r0, r4, #8
    1506:	4b04      	ldr	r3, [pc, #16]	; (1518 <usart_sync_enable+0x28>)
    1508:	4798      	blx	r3
}
    150a:	2000      	movs	r0, #0
    150c:	bd10      	pop	{r4, pc}
    150e:	bf00      	nop
    1510:	0000d288 	.word	0x0000d288
    1514:	0000151d 	.word	0x0000151d
    1518:	00001f49 	.word	0x00001f49

0000151c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    151c:	b900      	cbnz	r0, 1520 <assert+0x4>
		__asm("BKPT #0");
    151e:	be00      	bkpt	0x0000
    1520:	4770      	bx	lr
	...

00001524 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1524:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1526:	4a06      	ldr	r2, [pc, #24]	; (1540 <_sbrk+0x1c>)
    1528:	6812      	ldr	r2, [r2, #0]
    152a:	b122      	cbz	r2, 1536 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    152c:	4a04      	ldr	r2, [pc, #16]	; (1540 <_sbrk+0x1c>)
    152e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1530:	4403      	add	r3, r0
    1532:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1534:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1536:	4903      	ldr	r1, [pc, #12]	; (1544 <_sbrk+0x20>)
    1538:	4a01      	ldr	r2, [pc, #4]	; (1540 <_sbrk+0x1c>)
    153a:	6011      	str	r1, [r2, #0]
    153c:	e7f6      	b.n	152c <_sbrk+0x8>
    153e:	bf00      	nop
    1540:	200000f8 	.word	0x200000f8
    1544:	20026200 	.word	0x20026200

00001548 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1548:	f04f 30ff 	mov.w	r0, #4294967295
    154c:	4770      	bx	lr

0000154e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    154e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1552:	604b      	str	r3, [r1, #4]

	return 0;
}
    1554:	2000      	movs	r0, #0
    1556:	4770      	bx	lr

00001558 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    1558:	2001      	movs	r0, #1
    155a:	4770      	bx	lr

0000155c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    155c:	2000      	movs	r0, #0
    155e:	4770      	bx	lr

00001560 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1560:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1562:	4a08      	ldr	r2, [pc, #32]	; (1584 <_init_chip+0x24>)
    1564:	8813      	ldrh	r3, [r2, #0]
    1566:	b29b      	uxth	r3, r3
    1568:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <_init_chip+0x28>)
    156c:	4798      	blx	r3
	_oscctrl_init_sources();
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <_init_chip+0x2c>)
    1570:	4798      	blx	r3
	_mclk_init();
    1572:	4b07      	ldr	r3, [pc, #28]	; (1590 <_init_chip+0x30>)
    1574:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1576:	4b07      	ldr	r3, [pc, #28]	; (1594 <_init_chip+0x34>)
    1578:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    157a:	f640 70ff 	movw	r0, #4095	; 0xfff
    157e:	4b06      	ldr	r3, [pc, #24]	; (1598 <_init_chip+0x38>)
    1580:	4798      	blx	r3
    1582:	bd08      	pop	{r3, pc}
    1584:	41004000 	.word	0x41004000
    1588:	00001d21 	.word	0x00001d21
    158c:	00001d35 	.word	0x00001d35
    1590:	00001d15 	.word	0x00001d15
    1594:	00001d51 	.word	0x00001d51
    1598:	000017a9 	.word	0x000017a9

0000159c <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    159c:	b570      	push	{r4, r5, r6, lr}
    159e:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    15a0:	4b2a      	ldr	r3, [pc, #168]	; (164c <_ext_irq_handler+0xb0>)
    15a2:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    15a4:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    15a6:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    15a8:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    15aa:	4b29      	ldr	r3, [pc, #164]	; (1650 <_ext_irq_handler+0xb4>)
    15ac:	6818      	ldr	r0, [r3, #0]
    15ae:	22ec      	movs	r2, #236	; 0xec
    15b0:	4928      	ldr	r1, [pc, #160]	; (1654 <_ext_irq_handler+0xb8>)
    15b2:	3000      	adds	r0, #0
    15b4:	bf18      	it	ne
    15b6:	2001      	movne	r0, #1
    15b8:	4b27      	ldr	r3, [pc, #156]	; (1658 <_ext_irq_handler+0xbc>)
    15ba:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    15bc:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    15c0:	e035      	b.n	162e <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    15c2:	4b26      	ldr	r3, [pc, #152]	; (165c <_ext_irq_handler+0xc0>)
    15c4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    15c8:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    15ca:	f1b5 3fff 	cmp.w	r5, #4294967295
    15ce:	d003      	beq.n	15d8 <_ext_irq_handler+0x3c>
				callback(pin);
    15d0:	4b1f      	ldr	r3, [pc, #124]	; (1650 <_ext_irq_handler+0xb4>)
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	4628      	mov	r0, r5
    15d6:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    15d8:	2301      	movs	r3, #1
    15da:	40a3      	lsls	r3, r4
    15dc:	9c01      	ldr	r4, [sp, #4]
    15de:	ea24 0403 	bic.w	r4, r4, r3
    15e2:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    15e4:	9b01      	ldr	r3, [sp, #4]
    15e6:	fa93 f4a3 	rbit	r4, r3
    15ea:	fab4 f484 	clz	r4, r4
    15ee:	b90b      	cbnz	r3, 15f4 <_ext_irq_handler+0x58>
    15f0:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    15f4:	f1b4 3fff 	cmp.w	r4, #4294967295
    15f8:	d014      	beq.n	1624 <_ext_irq_handler+0x88>
    15fa:	2002      	movs	r0, #2
    15fc:	2100      	movs	r1, #0
    15fe:	e001      	b.n	1604 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1600:	3b01      	subs	r3, #1
    1602:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1604:	4281      	cmp	r1, r0
    1606:	d8e0      	bhi.n	15ca <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1608:	1843      	adds	r3, r0, r1
    160a:	f3c3 0347 	ubfx	r3, r3, #1, #8
    160e:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1610:	4a12      	ldr	r2, [pc, #72]	; (165c <_ext_irq_handler+0xc0>)
    1612:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1616:	42a2      	cmp	r2, r4
    1618:	d0d3      	beq.n	15c2 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    161a:	42a2      	cmp	r2, r4
    161c:	daf0      	bge.n	1600 <_ext_irq_handler+0x64>
					lower = middle + 1;
    161e:	3301      	adds	r3, #1
    1620:	b2d9      	uxtb	r1, r3
    1622:	e7ef      	b.n	1604 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1624:	4b09      	ldr	r3, [pc, #36]	; (164c <_ext_irq_handler+0xb0>)
    1626:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1628:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    162a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    162c:	615a      	str	r2, [r3, #20]
	while (flags) {
    162e:	9b01      	ldr	r3, [sp, #4]
    1630:	b14b      	cbz	r3, 1646 <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1632:	9b01      	ldr	r3, [sp, #4]
    1634:	fa93 f4a3 	rbit	r4, r3
    1638:	fab4 f484 	clz	r4, r4
    163c:	2b00      	cmp	r3, #0
    163e:	d1d9      	bne.n	15f4 <_ext_irq_handler+0x58>
    1640:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1644:	e7d6      	b.n	15f4 <_ext_irq_handler+0x58>
	}
}
    1646:	b002      	add	sp, #8
    1648:	bd70      	pop	{r4, r5, r6, pc}
    164a:	bf00      	nop
    164c:	40002800 	.word	0x40002800
    1650:	200000fc 	.word	0x200000fc
    1654:	0000d2b4 	.word	0x0000d2b4
    1658:	0000151d 	.word	0x0000151d
    165c:	0000d2a4 	.word	0x0000d2a4

00001660 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1660:	4b31      	ldr	r3, [pc, #196]	; (1728 <_ext_irq_init+0xc8>)
    1662:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1664:	f013 0f01 	tst.w	r3, #1
    1668:	d120      	bne.n	16ac <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    166a:	4b2f      	ldr	r3, [pc, #188]	; (1728 <_ext_irq_init+0xc8>)
    166c:	685b      	ldr	r3, [r3, #4]
    166e:	f013 0f03 	tst.w	r3, #3
    1672:	d1fa      	bne.n	166a <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1674:	4b2c      	ldr	r3, [pc, #176]	; (1728 <_ext_irq_init+0xc8>)
    1676:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    1678:	f013 0f02 	tst.w	r3, #2
    167c:	d00e      	beq.n	169c <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    167e:	4a2a      	ldr	r2, [pc, #168]	; (1728 <_ext_irq_init+0xc8>)
    1680:	7813      	ldrb	r3, [r2, #0]
    1682:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1686:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1688:	4b27      	ldr	r3, [pc, #156]	; (1728 <_ext_irq_init+0xc8>)
    168a:	685b      	ldr	r3, [r3, #4]
    168c:	f013 0f03 	tst.w	r3, #3
    1690:	d1fa      	bne.n	1688 <_ext_irq_init+0x28>
    1692:	4b25      	ldr	r3, [pc, #148]	; (1728 <_ext_irq_init+0xc8>)
    1694:	685b      	ldr	r3, [r3, #4]
    1696:	f013 0f02 	tst.w	r3, #2
    169a:	d1fa      	bne.n	1692 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    169c:	2201      	movs	r2, #1
    169e:	4b22      	ldr	r3, [pc, #136]	; (1728 <_ext_irq_init+0xc8>)
    16a0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16a2:	4b21      	ldr	r3, [pc, #132]	; (1728 <_ext_irq_init+0xc8>)
    16a4:	685b      	ldr	r3, [r3, #4]
    16a6:	f013 0f03 	tst.w	r3, #3
    16aa:	d1fa      	bne.n	16a2 <_ext_irq_init+0x42>
    16ac:	4b1e      	ldr	r3, [pc, #120]	; (1728 <_ext_irq_init+0xc8>)
    16ae:	685b      	ldr	r3, [r3, #4]
    16b0:	f013 0f01 	tst.w	r3, #1
    16b4:	d1fa      	bne.n	16ac <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    16b6:	4a1c      	ldr	r2, [pc, #112]	; (1728 <_ext_irq_init+0xc8>)
    16b8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    16ba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    16be:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <_ext_irq_init+0xc8>)
    16c2:	685b      	ldr	r3, [r3, #4]
    16c4:	f013 0f03 	tst.w	r3, #3
    16c8:	d1fa      	bne.n	16c0 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    16ca:	4b17      	ldr	r3, [pc, #92]	; (1728 <_ext_irq_init+0xc8>)
    16cc:	2200      	movs	r2, #0
    16ce:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    16d0:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    16d2:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    16d4:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    16d6:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    16d8:	4914      	ldr	r1, [pc, #80]	; (172c <_ext_irq_init+0xcc>)
    16da:	61d9      	str	r1, [r3, #28]
    16dc:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    16de:	781a      	ldrb	r2, [r3, #0]
    16e0:	f042 0202 	orr.w	r2, r2, #2
    16e4:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16e6:	4b10      	ldr	r3, [pc, #64]	; (1728 <_ext_irq_init+0xc8>)
    16e8:	685b      	ldr	r3, [r3, #4]
    16ea:	f013 0f03 	tst.w	r3, #3
    16ee:	d1fa      	bne.n	16e6 <_ext_irq_init+0x86>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16f0:	4b0f      	ldr	r3, [pc, #60]	; (1730 <_ext_irq_init+0xd0>)
    16f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    16f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    16fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16fe:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1702:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1706:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1708:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    170c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1710:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1714:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1718:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    171c:	601a      	str	r2, [r3, #0]
	callback = cb;
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <_ext_irq_init+0xd4>)
    1720:	6018      	str	r0, [r3, #0]
}
    1722:	2000      	movs	r0, #0
    1724:	4770      	bx	lr
    1726:	bf00      	nop
    1728:	40002800 	.word	0x40002800
    172c:	10000001 	.word	0x10000001
    1730:	e000e100 	.word	0xe000e100
    1734:	200000fc 	.word	0x200000fc

00001738 <_ext_irq_enable>:
{
    1738:	b410      	push	{r4}
	uint8_t i      = 0;
    173a:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    173c:	2b01      	cmp	r3, #1
    173e:	d80d      	bhi.n	175c <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1740:	461c      	mov	r4, r3
    1742:	4a11      	ldr	r2, [pc, #68]	; (1788 <_ext_irq_enable+0x50>)
    1744:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1748:	6852      	ldr	r2, [r2, #4]
    174a:	4282      	cmp	r2, r0
    174c:	d002      	beq.n	1754 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    174e:	3301      	adds	r3, #1
    1750:	b2db      	uxtb	r3, r3
    1752:	e7f3      	b.n	173c <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1754:	4b0c      	ldr	r3, [pc, #48]	; (1788 <_ext_irq_enable+0x50>)
    1756:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    175a:	e000      	b.n	175e <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    175c:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    175e:	2aff      	cmp	r2, #255	; 0xff
    1760:	d00f      	beq.n	1782 <_ext_irq_enable+0x4a>
	if (enable) {
    1762:	b941      	cbnz	r1, 1776 <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1764:	2301      	movs	r3, #1
    1766:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1768:	4a08      	ldr	r2, [pc, #32]	; (178c <_ext_irq_enable+0x54>)
    176a:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    176c:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    176e:	2000      	movs	r0, #0
}
    1770:	f85d 4b04 	ldr.w	r4, [sp], #4
    1774:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    1776:	2301      	movs	r3, #1
    1778:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    177a:	4a04      	ldr	r2, [pc, #16]	; (178c <_ext_irq_enable+0x54>)
    177c:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    177e:	2000      	movs	r0, #0
    1780:	e7f6      	b.n	1770 <_ext_irq_enable+0x38>
		return -1;
    1782:	f04f 30ff 	mov.w	r0, #4294967295
    1786:	e7f3      	b.n	1770 <_ext_irq_enable+0x38>
    1788:	0000d2a4 	.word	0x0000d2a4
    178c:	40002800 	.word	0x40002800

00001790 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    1790:	b508      	push	{r3, lr}
	_ext_irq_handler();
    1792:	4b01      	ldr	r3, [pc, #4]	; (1798 <EIC_0_Handler+0x8>)
    1794:	4798      	blx	r3
    1796:	bd08      	pop	{r3, pc}
    1798:	0000159d 	.word	0x0000159d

0000179c <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    179c:	b508      	push	{r3, lr}
	_ext_irq_handler();
    179e:	4b01      	ldr	r3, [pc, #4]	; (17a4 <EIC_7_Handler+0x8>)
    17a0:	4798      	blx	r3
    17a2:	bd08      	pop	{r3, pc}
    17a4:	0000159d 	.word	0x0000159d

000017a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    17a8:	f010 0f01 	tst.w	r0, #1
    17ac:	d008      	beq.n	17c0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    17ae:	4a05      	ldr	r2, [pc, #20]	; (17c4 <_gclk_init_generators_by_fref+0x1c>)
    17b0:	4b05      	ldr	r3, [pc, #20]	; (17c8 <_gclk_init_generators_by_fref+0x20>)
    17b2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    17b4:	4b04      	ldr	r3, [pc, #16]	; (17c8 <_gclk_init_generators_by_fref+0x20>)
    17b6:	685a      	ldr	r2, [r3, #4]
    17b8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    17bc:	421a      	tst	r2, r3
    17be:	d1f9      	bne.n	17b4 <_gclk_init_generators_by_fref+0xc>
    17c0:	4770      	bx	lr
    17c2:	bf00      	nop
    17c4:	00010101 	.word	0x00010101
    17c8:	40001c00 	.word	0x40001c00

000017cc <_mac_init_bufdescr>:
static void _mac_init_bufdescr(struct _mac_async_device *const dev)
{
	uint32_t i;

	/* TX buffer descriptor */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    17cc:	2200      	movs	r2, #0
    17ce:	e012      	b.n	17f6 <_mac_init_bufdescr+0x2a>
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    17d0:	4b20      	ldr	r3, [pc, #128]	; (1854 <_mac_init_bufdescr+0x88>)
    17d2:	f240 51dc 	movw	r1, #1500	; 0x5dc
    17d6:	fb01 3102 	mla	r1, r1, r2, r3
    17da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    17de:	f8c3 1bb8 	str.w	r1, [r3, #3000]	; 0xbb8
		_txbuf_descrs[i].status.val     = 0;
    17e2:	2100      	movs	r1, #0
    17e4:	f8c3 1bbc 	str.w	r1, [r3, #3004]	; 0xbbc
		_txbuf_descrs[i].status.bm.used = 1;
    17e8:	f893 1bbf 	ldrb.w	r1, [r3, #3007]	; 0xbbf
    17ec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    17f0:	f883 1bbf 	strb.w	r1, [r3, #3007]	; 0xbbf
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    17f4:	3201      	adds	r2, #1
    17f6:	2a01      	cmp	r2, #1
    17f8:	d9ea      	bls.n	17d0 <_mac_init_bufdescr+0x4>
	}

	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    17fa:	4a16      	ldr	r2, [pc, #88]	; (1854 <_mac_init_bufdescr+0x88>)
    17fc:	f892 3bc7 	ldrb.w	r3, [r2, #3015]	; 0xbc7
    1800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1804:	f882 3bc7 	strb.w	r3, [r2, #3015]	; 0xbc7
	_txbuf_index                                            = 0;
    1808:	2300      	movs	r3, #0
    180a:	f8c2 3bc8 	str.w	r3, [r2, #3016]	; 0xbc8
	_last_txbuf_index                                       = 0;
    180e:	f8c2 3bcc 	str.w	r3, [r2, #3020]	; 0xbcc

	/* RX buffer descriptor */
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1812:	e00b      	b.n	182c <_mac_init_bufdescr+0x60>
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    1814:	4910      	ldr	r1, [pc, #64]	; (1858 <_mac_init_bufdescr+0x8c>)
    1816:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    181a:	4a10      	ldr	r2, [pc, #64]	; (185c <_mac_init_bufdescr+0x90>)
    181c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1820:	f8c2 12e8 	str.w	r1, [r2, #744]	; 0x2e8
		_rxbuf_descrs[i].status.val  = 0;
    1824:	2100      	movs	r1, #0
    1826:	f8c2 12ec 	str.w	r1, [r2, #748]	; 0x2ec
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    182a:	3301      	adds	r3, #1
    182c:	2b0f      	cmp	r3, #15
    182e:	d9f1      	bls.n	1814 <_mac_init_bufdescr+0x48>
	}

	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    1830:	4b0a      	ldr	r3, [pc, #40]	; (185c <_mac_init_bufdescr+0x90>)
    1832:	f893 2360 	ldrb.w	r2, [r3, #864]	; 0x360
    1836:	f042 0202 	orr.w	r2, r2, #2
    183a:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
	_rxbuf_index                                             = 0;
    183e:	2200      	movs	r2, #0
    1840:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

	hri_gmac_write_TBQB_reg(dev->hw, (uint32_t)_txbuf_descrs);
    1844:	6802      	ldr	r2, [r0, #0]
    1846:	4906      	ldr	r1, [pc, #24]	; (1860 <_mac_init_bufdescr+0x94>)
}

static inline void hri_gmac_write_TBQB_reg(const void *const hw, hri_gmac_tbqb_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->TBQB.reg = data;
    1848:	61d1      	str	r1, [r2, #28]
	hri_gmac_write_RBQB_reg(dev->hw, (uint32_t)_rxbuf_descrs);
    184a:	6802      	ldr	r2, [r0, #0]
    184c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
	((Gmac *)hw)->RBQB.reg = data;
    1850:	6193      	str	r3, [r2, #24]
    1852:	4770      	bx	lr
    1854:	20000100 	.word	0x20000100
    1858:	20000ce0 	.word	0x20000ce0
    185c:	200011f8 	.word	0x200011f8
    1860:	20000cb8 	.word	0x20000cb8

00001864 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    1864:	b500      	push	{lr}
    1866:	b083      	sub	sp, #12
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    1868:	4b16      	ldr	r3, [pc, #88]	; (18c4 <GMAC_Handler+0x60>)
    186a:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
    186e:	6803      	ldr	r3, [r0, #0]
	return ((Gmac *)hw)->TSR.reg;
    1870:	695a      	ldr	r2, [r3, #20]
    1872:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    1874:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    1876:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    1878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    187a:	9a01      	ldr	r2, [sp, #4]
    187c:	f012 0f20 	tst.w	r2, #32
    1880:	d00d      	beq.n	189e <GMAC_Handler+0x3a>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    1882:	9a01      	ldr	r2, [sp, #4]
	((Gmac *)hw)->TSR.reg = data;
    1884:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    1886:	4b10      	ldr	r3, [pc, #64]	; (18c8 <GMAC_Handler+0x64>)
    1888:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    188c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1890:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    1894:	09db      	lsrs	r3, r3, #7
    1896:	d002      	beq.n	189e <GMAC_Handler+0x3a>
    1898:	6843      	ldr	r3, [r0, #4]
    189a:	b103      	cbz	r3, 189e <GMAC_Handler+0x3a>
			_gmac_dev->cb.transmited(_gmac_dev);
    189c:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    189e:	9b00      	ldr	r3, [sp, #0]
    18a0:	f013 0f02 	tst.w	r3, #2
    18a4:	d005      	beq.n	18b2 <GMAC_Handler+0x4e>
		if (_gmac_dev->cb.received != NULL) {
    18a6:	4b07      	ldr	r3, [pc, #28]	; (18c4 <GMAC_Handler+0x60>)
    18a8:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
    18ac:	6883      	ldr	r3, [r0, #8]
    18ae:	b103      	cbz	r3, 18b2 <GMAC_Handler+0x4e>
			_gmac_dev->cb.received(_gmac_dev);
    18b0:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <GMAC_Handler+0x60>)
    18b4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
    18b8:	681b      	ldr	r3, [r3, #0]
    18ba:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->RSR.reg = data;
    18bc:	621a      	str	r2, [r3, #32]
}
    18be:	b003      	add	sp, #12
    18c0:	f85d fb04 	ldr.w	pc, [sp], #4
    18c4:	200011f8 	.word	0x200011f8
    18c8:	20000100 	.word	0x20000100

000018cc <_mac_async_init>:

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    18cc:	b538      	push	{r3, r4, r5, lr}
    18ce:	4604      	mov	r4, r0
	dev->hw = hw;
    18d0:	6001      	str	r1, [r0, #0]
	((Gmac *)hw)->NCR.reg = data;
    18d2:	2310      	movs	r3, #16
    18d4:	600b      	str	r3, [r1, #0]
	                       (CONF_GMAC_NCR_LBL ? GMAC_NCR_LBL : 0) | (CONF_GMAC_NCR_MPE ? GMAC_NCR_MPE : 0)
	                           | (CONF_GMAC_NCR_WESTAT ? GMAC_NCR_WESTAT : 0) | (CONF_GMAC_NCR_BP ? GMAC_NCR_BP : 0)
	                           | (CONF_GMAC_NCR_ENPBPR ? GMAC_NCR_ENPBPR : 0)
	                           | (CONF_GMAC_NCR_TXPBPF ? GMAC_NCR_TXPBPF : 0));
	hri_gmac_write_NCFGR_reg(
	    dev->hw,
    18d6:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    18d8:	4a11      	ldr	r2, [pc, #68]	; (1920 <_mac_async_init+0x54>)
    18da:	605a      	str	r2, [r3, #4]
	        | (CONF_GMAC_NCFGR_LFERD ? GMAC_NCFGR_LFERD : 0) | (CONF_GMAC_NCFGR_RFCS ? GMAC_NCFGR_RFCS : 0)
	        | GMAC_NCFGR_CLK(CONF_GMAC_NCFGR_CLK) | (CONF_GMAC_NCFGR_DCPF ? GMAC_NCFGR_DCPF : 0)
	        | (CONF_GMAC_NCFGR_RXCOEN ? GMAC_NCFGR_RXCOEN : 0) | (CONF_GMAC_NCFGR_EFRHD ? GMAC_NCFGR_EFRHD : 0)
	        | (CONF_GMAC_NCFGR_IRXFCS ? GMAC_NCFGR_IRXFCS : 0) | (CONF_GMAC_NCFGR_IPGSEN ? GMAC_NCFGR_IPGSEN : 0)
	        | (CONF_GMAC_NCFGR_RXBP ? GMAC_NCFGR_RXBP : 0) | (CONF_GMAC_NCFGR_IRXER ? GMAC_NCFGR_IRXER : 0));
	hri_gmac_write_UR_reg(dev->hw, (CONF_GMAC_UR_MII ? GMAC_UR_MII : 0));
    18dc:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->UR.reg = data;
    18de:	2500      	movs	r5, #0
    18e0:	60dd      	str	r5, [r3, #12]
	hri_gmac_write_DCFGR_reg(
	    dev->hw,
    18e2:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->DCFGR.reg = data;
    18e4:	4a0f      	ldr	r2, [pc, #60]	; (1924 <_mac_async_init+0x58>)
    18e6:	611a      	str	r2, [r3, #16]
	    GMAC_DCFGR_FBLDO(CONF_GMAC_DCFGR_FBLDO) | (CONF_GMAC_DCFGR_ESMA ? GMAC_DCFGR_ESMA : 0)
	        | (CONF_GMAC_DCFGR_ESPA ? GMAC_DCFGR_ESPA : 0) | GMAC_DCFGR_RXBMS(CONF_GMAC_DCFGR_RXBMS)
	        | (CONF_GMAC_DCFGR_TXPBMS ? GMAC_DCFGR_TXPBMS : 0) | (CONF_GMAC_DCFGR_TXCOEN ? GMAC_DCFGR_TXCOEN : 0)
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
    18e8:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_gmac_write_WOL_reg(const void *const hw, hri_gmac_wol_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->WOL.reg = data;
    18ea:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
    18ee:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    18f0:	f240 1201 	movw	r2, #257	; 0x101
    18f4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	_mac_init_bufdescr(dev);
    18f8:	4b0b      	ldr	r3, [pc, #44]	; (1928 <_mac_async_init+0x5c>)
    18fa:	4798      	blx	r3

	_gmac_dev = dev;
    18fc:	4b0b      	ldr	r3, [pc, #44]	; (192c <_mac_async_init+0x60>)
    18fe:	f8c3 436c 	str.w	r4, [r3, #876]	; 0x36c
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1902:	4b0b      	ldr	r3, [pc, #44]	; (1930 <_mac_async_init+0x64>)
    1904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    190c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1910:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1914:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1918:	609a      	str	r2, [r3, #8]
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    191a:	4628      	mov	r0, r5
    191c:	bd38      	pop	{r3, r4, r5, pc}
    191e:	bf00      	nop
    1920:	00100103 	.word	0x00100103
    1924:	00020704 	.word	0x00020704
    1928:	000017cd 	.word	0x000017cd
    192c:	200011f8 	.word	0x200011f8
    1930:	e000e100 	.word	0xe000e100

00001934 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    1934:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    1936:	6813      	ldr	r3, [r2, #0]
    1938:	f043 030c 	orr.w	r3, r3, #12
    193c:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    193e:	2000      	movs	r0, #0
    1940:	4770      	bx	lr
	...

00001944 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    1944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1948:	4680      	mov	r8, r0
    194a:	460f      	mov	r7, r1
    194c:	4614      	mov	r4, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    194e:	4b59      	ldr	r3, [pc, #356]	; (1ab4 <_mac_async_write+0x170>)
    1950:	f8d3 2bcc 	ldr.w	r2, [r3, #3020]	; 0xbcc
    1954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1958:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    195c:	09db      	lsrs	r3, r3, #7
    195e:	d00b      	beq.n	1978 <_mac_async_write+0x34>
    1960:	4b54      	ldr	r3, [pc, #336]	; (1ab4 <_mac_async_write+0x170>)
    1962:	f8d3 2bcc 	ldr.w	r2, [r3, #3020]	; 0xbcc
    1966:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    196a:	f893 3bbd 	ldrb.w	r3, [r3, #3005]	; 0xbbd
    196e:	09db      	lsrs	r3, r3, #7
    1970:	d102      	bne.n	1978 <_mac_async_write+0x34>
    1972:	2101      	movs	r1, #1
		/* Set used flag from first descriptor to last descriptor,
		 * as DMA olny set the first used flag */
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1974:	2901      	cmp	r1, #1
    1976:	d914      	bls.n	19a2 <_mac_async_write+0x5e>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    1978:	4b4e      	ldr	r3, [pc, #312]	; (1ab4 <_mac_async_write+0x170>)
    197a:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    197e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1982:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    1986:	09db      	lsrs	r3, r3, #7
    1988:	f000 808b 	beq.w	1aa2 <_mac_async_write+0x15e>
		return ERR_NO_RESOURCE;
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    198c:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1990:	429c      	cmp	r4, r3
    1992:	d81c      	bhi.n	19ce <_mac_async_write+0x8a>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    1994:	4b47      	ldr	r3, [pc, #284]	; (1ab4 <_mac_async_write+0x170>)
    1996:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    199a:	f8c3 2bcc 	str.w	r2, [r3, #3020]	; 0xbcc

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    199e:	2600      	movs	r6, #0
    19a0:	e04d      	b.n	1a3e <_mac_async_write+0xfa>
			pos = _last_txbuf_index + i;
    19a2:	4b44      	ldr	r3, [pc, #272]	; (1ab4 <_mac_async_write+0x170>)
    19a4:	f8d3 3bcc 	ldr.w	r3, [r3, #3020]	; 0xbcc
    19a8:	440b      	add	r3, r1
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    19aa:	2b01      	cmp	r3, #1
    19ac:	d900      	bls.n	19b0 <_mac_async_write+0x6c>
				pos -= CONF_GMAC_TXDESCR_NUM;
    19ae:	3b02      	subs	r3, #2
			_txbuf_descrs[pos].status.bm.used = 1;
    19b0:	4a40      	ldr	r2, [pc, #256]	; (1ab4 <_mac_async_write+0x170>)
    19b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    19b6:	f893 2bbf 	ldrb.w	r2, [r3, #3007]	; 0xbbf
    19ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    19be:	f883 2bbf 	strb.w	r2, [r3, #3007]	; 0xbbf
			if (_txbuf_descrs[pos].status.bm.last_buf) {
    19c2:	f893 3bbd 	ldrb.w	r3, [r3, #3005]	; 0xbbd
    19c6:	09db      	lsrs	r3, r3, #7
    19c8:	d1d6      	bne.n	1978 <_mac_async_write+0x34>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    19ca:	3101      	adds	r1, #1
    19cc:	e7d2      	b.n	1974 <_mac_async_write+0x30>
    19ce:	2301      	movs	r3, #1
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    19d0:	2b01      	cmp	r3, #1
    19d2:	d8df      	bhi.n	1994 <_mac_async_write+0x50>
			pos = _txbuf_index + i;
    19d4:	4a37      	ldr	r2, [pc, #220]	; (1ab4 <_mac_async_write+0x170>)
    19d6:	f8d2 2bc8 	ldr.w	r2, [r2, #3016]	; 0xbc8
    19da:	441a      	add	r2, r3
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    19dc:	2a01      	cmp	r2, #1
    19de:	d900      	bls.n	19e2 <_mac_async_write+0x9e>
				pos -= CONF_GMAC_TXDESCR_NUM;
    19e0:	3a02      	subs	r2, #2
			if (!_txbuf_descrs[pos].status.bm.used) {
    19e2:	4934      	ldr	r1, [pc, #208]	; (1ab4 <_mac_async_write+0x170>)
    19e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    19e8:	f892 2bbf 	ldrb.w	r2, [r2, #3007]	; 0xbbf
    19ec:	09d2      	lsrs	r2, r2, #7
    19ee:	d05c      	beq.n	1aaa <_mac_async_write+0x166>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    19f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
    19f4:	fb02 4213 	mls	r2, r2, r3, r4
    19f8:	f240 51db 	movw	r1, #1499	; 0x5db
    19fc:	428a      	cmp	r2, r1
    19fe:	d9c9      	bls.n	1994 <_mac_async_write+0x50>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1a00:	3301      	adds	r3, #1
    1a02:	e7e5      	b.n	19d0 <_mac_async_write+0x8c>

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
    1a04:	4b2b      	ldr	r3, [pc, #172]	; (1ab4 <_mac_async_write+0x170>)
    1a06:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1a0e:	f8c2 5bbc 	str.w	r5, [r2, #3004]	; 0xbbc
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    1a12:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1a1a:	f893 2bbd 	ldrb.w	r2, [r3, #3005]	; 0xbbd
    1a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1a22:	f883 2bbd 	strb.w	r2, [r3, #3005]	; 0xbbd
		}
		_txbuf_index++;
    1a26:	4b23      	ldr	r3, [pc, #140]	; (1ab4 <_mac_async_write+0x170>)
    1a28:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a2c:	3201      	adds	r2, #1
    1a2e:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    1a32:	f8d3 3bc8 	ldr.w	r3, [r3, #3016]	; 0xbc8
    1a36:	2b02      	cmp	r3, #2
    1a38:	d01d      	beq.n	1a76 <_mac_async_write+0x132>
			_txbuf_index                                            = 0;
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
		}
		if (len == 0) {
    1a3a:	b33c      	cbz	r4, 1a8c <_mac_async_write+0x148>
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1a3c:	3601      	adds	r6, #1
    1a3e:	2e01      	cmp	r6, #1
    1a40:	d824      	bhi.n	1a8c <_mac_async_write+0x148>
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    1a42:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1a46:	4625      	mov	r5, r4
    1a48:	429c      	cmp	r4, r3
    1a4a:	bf28      	it	cs
    1a4c:	461d      	movcs	r5, r3
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    1a4e:	4819      	ldr	r0, [pc, #100]	; (1ab4 <_mac_async_write+0x170>)
    1a50:	f8d0 ebc8 	ldr.w	lr, [r0, #3016]	; 0xbc8
    1a54:	462a      	mov	r2, r5
    1a56:	fb03 7106 	mla	r1, r3, r6, r7
    1a5a:	fb03 000e 	mla	r0, r3, lr, r0
    1a5e:	4b16      	ldr	r3, [pc, #88]	; (1ab8 <_mac_async_write+0x174>)
    1a60:	4798      	blx	r3
		if (len > 0) {
    1a62:	1b64      	subs	r4, r4, r5
    1a64:	d0ce      	beq.n	1a04 <_mac_async_write+0xc0>
			_txbuf_descrs[_txbuf_index].status.val = blen;
    1a66:	4b13      	ldr	r3, [pc, #76]	; (1ab4 <_mac_async_write+0x170>)
    1a68:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1a70:	f8c3 5bbc 	str.w	r5, [r3, #3004]	; 0xbbc
    1a74:	e7d7      	b.n	1a26 <_mac_async_write+0xe2>
			_txbuf_index                                            = 0;
    1a76:	4b0f      	ldr	r3, [pc, #60]	; (1ab4 <_mac_async_write+0x170>)
    1a78:	2200      	movs	r2, #0
    1a7a:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    1a7e:	f893 2bc7 	ldrb.w	r2, [r3, #3015]	; 0xbc7
    1a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1a86:	f883 2bc7 	strb.w	r2, [r3, #3015]	; 0xbc7
    1a8a:	e7d6      	b.n	1a3a <_mac_async_write+0xf6>
  __ASM volatile ("dsb 0xF":::"memory");
    1a8c:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    1a90:	f8d8 2000 	ldr.w	r2, [r8]
    1a94:	6813      	ldr	r3, [r2, #0]
    1a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1a9a:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1a9c:	2000      	movs	r0, #0
    1a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_NO_RESOURCE;
    1aa2:	f06f 001b 	mvn.w	r0, #27
    1aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return ERR_NO_RESOURCE;
    1aaa:	f06f 001b 	mvn.w	r0, #27
}
    1aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ab2:	bf00      	nop
    1ab4:	20000100 	.word	0x20000100
    1ab8:	0000c103 	.word	0x0000c103

00001abc <_mac_async_read>:

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    1abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ac0:	4689      	mov	r9, r1
    1ac2:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint32_t pos;
	uint32_t n;
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    1ac4:	f04f 36ff 	mov.w	r6, #4294967295
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1ac8:	2400      	movs	r4, #0
    1aca:	e000      	b.n	1ace <_mac_async_read+0x12>
    1acc:	3401      	adds	r4, #1
    1ace:	2c0f      	cmp	r4, #15
    1ad0:	d82d      	bhi.n	1b2e <_mac_async_read+0x72>
		pos = _rxbuf_index + i;
    1ad2:	4b3f      	ldr	r3, [pc, #252]	; (1bd0 <_mac_async_read+0x114>)
    1ad4:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1ad8:	4423      	add	r3, r4

		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    1ada:	2b0f      	cmp	r3, #15
    1adc:	d900      	bls.n	1ae0 <_mac_async_read+0x24>
			pos -= CONF_GMAC_RXDESCR_NUM;
    1ade:	3b10      	subs	r3, #16
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    1ae0:	4a3b      	ldr	r2, [pc, #236]	; (1bd0 <_mac_async_read+0x114>)
    1ae2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1ae6:	f892 22e8 	ldrb.w	r2, [r2, #744]	; 0x2e8
    1aea:	f012 0f01 	tst.w	r2, #1
    1aee:	d028      	beq.n	1b42 <_mac_async_read+0x86>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    1af0:	4a37      	ldr	r2, [pc, #220]	; (1bd0 <_mac_async_read+0x114>)
    1af2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1af6:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1afa:	f012 0f40 	tst.w	r2, #64	; 0x40
    1afe:	d000      	beq.n	1b02 <_mac_async_read+0x46>
			sof = i;
    1b00:	4626      	mov	r6, r4
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    1b02:	4a33      	ldr	r2, [pc, #204]	; (1bd0 <_mac_async_read+0x114>)
    1b04:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b08:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1b0c:	09d2      	lsrs	r2, r2, #7
    1b0e:	d0dd      	beq.n	1acc <_mac_async_read+0x10>
    1b10:	f1b6 3fff 	cmp.w	r6, #4294967295
    1b14:	d0da      	beq.n	1acc <_mac_async_read+0x10>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    1b16:	4a2e      	ldr	r2, [pc, #184]	; (1bd0 <_mac_async_read+0x114>)
    1b18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1b1c:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
    1b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
			len = min(n, len);
    1b24:	4598      	cmp	r8, r3
    1b26:	bf28      	it	cs
    1b28:	4698      	movcs	r8, r3
			eof = i;
    1b2a:	4627      	mov	r7, r4
			/* Break process since the last data has been found */
			break;
    1b2c:	e001      	b.n	1b32 <_mac_async_read+0x76>
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
    1b2e:	f04f 37ff 	mov.w	r7, #4294967295
		}
	}

	if (eof != 0xFFFFFFFF) {
    1b32:	f1b7 3fff 	cmp.w	r7, #4294967295
    1b36:	d007      	beq.n	1b48 <_mac_async_read+0x8c>
		j = eof + 1;
    1b38:	1c7c      	adds	r4, r7, #1
	uint32_t total_len = 0;          /* Total length of received package */
    1b3a:	f04f 0a00 	mov.w	sl, #0
	} else {
		j = i;
	}

	/* Copy data to user buffer */
	for (i = 0; i < j; i++) {
    1b3e:	4655      	mov	r5, sl
    1b40:	e01c      	b.n	1b7c <_mac_async_read+0xc0>
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
    1b42:	f04f 37ff 	mov.w	r7, #4294967295
    1b46:	e7f4      	b.n	1b32 <_mac_async_read+0x76>
	} else if (sof != 0xFFFFFFFF) {
    1b48:	f1b6 3fff 	cmp.w	r6, #4294967295
    1b4c:	d0f5      	beq.n	1b3a <_mac_async_read+0x7e>
		j = sof;
    1b4e:	4634      	mov	r4, r6
    1b50:	e7f3      	b.n	1b3a <_mac_async_read+0x7e>
			buf += n;
			total_len += n;
			len -= n;
		}

		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    1b52:	4b1f      	ldr	r3, [pc, #124]	; (1bd0 <_mac_async_read+0x114>)
    1b54:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
    1b58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1b5c:	f892 12e8 	ldrb.w	r1, [r2, #744]	; 0x2e8
    1b60:	f36f 0100 	bfc	r1, #0, #1
    1b64:	f882 12e8 	strb.w	r1, [r2, #744]	; 0x2e8
		_rxbuf_index++;
    1b68:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
    1b6c:	3201      	adds	r2, #1
    1b6e:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    1b72:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1b76:	2b10      	cmp	r3, #16
    1b78:	d021      	beq.n	1bbe <_mac_async_read+0x102>
	for (i = 0; i < j; i++) {
    1b7a:	3501      	adds	r5, #1
    1b7c:	42a5      	cmp	r5, r4
    1b7e:	d223      	bcs.n	1bc8 <_mac_async_read+0x10c>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    1b80:	f1b7 3fff 	cmp.w	r7, #4294967295
    1b84:	d0e5      	beq.n	1b52 <_mac_async_read+0x96>
    1b86:	42b5      	cmp	r5, r6
    1b88:	d3e3      	bcc.n	1b52 <_mac_async_read+0x96>
    1b8a:	42bd      	cmp	r5, r7
    1b8c:	d8e1      	bhi.n	1b52 <_mac_async_read+0x96>
    1b8e:	f1b8 0f00 	cmp.w	r8, #0
    1b92:	d0de      	beq.n	1b52 <_mac_async_read+0x96>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    1b94:	46c3      	mov	fp, r8
    1b96:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    1b9a:	bf28      	it	cs
    1b9c:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <_mac_async_read+0x114>)
    1ba2:	f8d3 1368 	ldr.w	r1, [r3, #872]	; 0x368
    1ba6:	465a      	mov	r2, fp
    1ba8:	4b0a      	ldr	r3, [pc, #40]	; (1bd4 <_mac_async_read+0x118>)
    1baa:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
    1bae:	4648      	mov	r0, r9
    1bb0:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <_mac_async_read+0x11c>)
    1bb2:	4798      	blx	r3
			buf += n;
    1bb4:	44d9      	add	r9, fp
			total_len += n;
    1bb6:	44da      	add	sl, fp
			len -= n;
    1bb8:	eba8 080b 	sub.w	r8, r8, fp
    1bbc:	e7c9      	b.n	1b52 <_mac_async_read+0x96>
			_rxbuf_index = 0;
    1bbe:	2200      	movs	r2, #0
    1bc0:	4b03      	ldr	r3, [pc, #12]	; (1bd0 <_mac_async_read+0x114>)
    1bc2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    1bc6:	e7d8      	b.n	1b7a <_mac_async_read+0xbe>
		}
	}

	return total_len;
}
    1bc8:	4650      	mov	r0, sl
    1bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bce:	bf00      	nop
    1bd0:	200011f8 	.word	0x200011f8
    1bd4:	20000ce0 	.word	0x20000ce0
    1bd8:	0000c103 	.word	0x0000c103

00001bdc <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    1bdc:	b410      	push	{r4}
	uint32_t i;
	uint32_t pos;
	bool     sof       = false; /* Start of Frame */
	uint32_t total_len = 0;     /* Total length of received package */
    1bde:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    1be0:	4604      	mov	r4, r0

	(void)dev;

	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1be2:	4601      	mov	r1, r0
    1be4:	e007      	b.n	1bf6 <_mac_async_read_len+0x1a>
		}
		if (sof == true) {
			total_len += _rxbuf_descrs[pos].status.bm.len;
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    1be6:	4a18      	ldr	r2, [pc, #96]	; (1c48 <_mac_async_read_len+0x6c>)
    1be8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1bec:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
    1bf0:	09db      	lsrs	r3, r3, #7
    1bf2:	d125      	bne.n	1c40 <_mac_async_read_len+0x64>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1bf4:	3101      	adds	r1, #1
    1bf6:	290f      	cmp	r1, #15
    1bf8:	d822      	bhi.n	1c40 <_mac_async_read_len+0x64>
		pos = _rxbuf_index + i;
    1bfa:	4b13      	ldr	r3, [pc, #76]	; (1c48 <_mac_async_read_len+0x6c>)
    1bfc:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1c00:	440b      	add	r3, r1
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    1c02:	2b0f      	cmp	r3, #15
    1c04:	d900      	bls.n	1c08 <_mac_async_read_len+0x2c>
			pos -= CONF_GMAC_RXDESCR_NUM;
    1c06:	3b10      	subs	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    1c08:	4a0f      	ldr	r2, [pc, #60]	; (1c48 <_mac_async_read_len+0x6c>)
    1c0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c0e:	f892 22e8 	ldrb.w	r2, [r2, #744]	; 0x2e8
    1c12:	f012 0f01 	tst.w	r2, #1
    1c16:	d013      	beq.n	1c40 <_mac_async_read_len+0x64>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    1c18:	4a0b      	ldr	r2, [pc, #44]	; (1c48 <_mac_async_read_len+0x6c>)
    1c1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c1e:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1c22:	f012 0f40 	tst.w	r2, #64	; 0x40
    1c26:	d000      	beq.n	1c2a <_mac_async_read_len+0x4e>
			sof = true;
    1c28:	2401      	movs	r4, #1
		if (sof == true) {
    1c2a:	2c00      	cmp	r4, #0
    1c2c:	d0db      	beq.n	1be6 <_mac_async_read_len+0xa>
			total_len += _rxbuf_descrs[pos].status.bm.len;
    1c2e:	4a06      	ldr	r2, [pc, #24]	; (1c48 <_mac_async_read_len+0x6c>)
    1c30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c34:	f8b2 22ec 	ldrh.w	r2, [r2, #748]	; 0x2ec
    1c38:	f3c2 020c 	ubfx	r2, r2, #0, #13
    1c3c:	4410      	add	r0, r2
    1c3e:	e7d2      	b.n	1be6 <_mac_async_read_len+0xa>
			break;
		}
	}

	return total_len;
}
    1c40:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c44:	4770      	bx	lr
    1c46:	bf00      	nop
    1c48:	200011f8 	.word	0x200011f8

00001c4c <_mac_async_register_callback>:
}

int32_t _mac_async_register_callback(struct _mac_async_device *const dev, const enum mac_async_cb_type type,
                                     const FUNC_PTR func)
{
	switch (type) {
    1c4c:	b169      	cbz	r1, 1c6a <_mac_async_register_callback+0x1e>
    1c4e:	2901      	cmp	r1, #1
    1c50:	d117      	bne.n	1c82 <_mac_async_register_callback+0x36>
	case MAC_ASYNC_TRANSMIT_CB:
		dev->cb.transmited = (_mac_async_cb_t)func;
    1c52:	6042      	str	r2, [r0, #4]
		if (func) {
    1c54:	b122      	cbz	r2, 1c60 <_mac_async_register_callback+0x14>
			hri_gmac_set_IMR_TCOMP_bit(dev->hw);
    1c56:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_TCOMP;
    1c58:	2280      	movs	r2, #128	; 0x80
    1c5a:	629a      	str	r2, [r3, #40]	; 0x28
		}
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    1c5c:	2000      	movs	r0, #0
    1c5e:	4770      	bx	lr
			hri_gmac_clear_IMR_TCOMP_bit(dev->hw);
    1c60:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IDR.reg = GMAC_IMR_TCOMP;
    1c62:	2280      	movs	r2, #128	; 0x80
    1c64:	62da      	str	r2, [r3, #44]	; 0x2c
	return ERR_NONE;
    1c66:	2000      	movs	r0, #0
    1c68:	4770      	bx	lr
		dev->cb.received = (_mac_async_cb_t)func;
    1c6a:	6082      	str	r2, [r0, #8]
		if (func) {
    1c6c:	b122      	cbz	r2, 1c78 <_mac_async_register_callback+0x2c>
			hri_gmac_set_IMR_RCOMP_bit(dev->hw);
    1c6e:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_RCOMP;
    1c70:	2202      	movs	r2, #2
    1c72:	629a      	str	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    1c74:	2000      	movs	r0, #0
    1c76:	4770      	bx	lr
			hri_gmac_set_IMR_RCOMP_bit(dev->hw);
    1c78:	6803      	ldr	r3, [r0, #0]
    1c7a:	2202      	movs	r2, #2
    1c7c:	629a      	str	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    1c7e:	2000      	movs	r0, #0
    1c80:	4770      	bx	lr
		return ERR_INVALID_ARG;
    1c82:	f06f 000c 	mvn.w	r0, #12
}
    1c86:	4770      	bx	lr

00001c88 <_mac_async_set_filter>:

int32_t _mac_async_set_filter(struct _mac_async_device *const dev, uint8_t index, struct mac_async_filter *filter)
{
    1c88:	b570      	push	{r4, r5, r6, lr}
    1c8a:	4606      	mov	r6, r0
    1c8c:	460c      	mov	r4, r1
    1c8e:	4615      	mov	r5, r2
	ASSERT(index < 4);
    1c90:	f240 12cf 	movw	r2, #463	; 0x1cf
    1c94:	490c      	ldr	r1, [pc, #48]	; (1cc8 <_mac_async_set_filter+0x40>)
    1c96:	2c03      	cmp	r4, #3
    1c98:	bf8c      	ite	hi
    1c9a:	2000      	movhi	r0, #0
    1c9c:	2001      	movls	r0, #1
    1c9e:	4b0b      	ldr	r3, [pc, #44]	; (1ccc <_mac_async_set_filter+0x44>)
    1ca0:	4798      	blx	r3

	hri_gmac_write_SAB_reg(dev->hw, index, *((uint32_t *)(filter->mac)));
    1ca2:	6833      	ldr	r3, [r6, #0]
    1ca4:	6829      	ldr	r1, [r5, #0]
	((Gmac *)hw)->Sa[submodule_index].SAB.reg = data;
    1ca6:	f104 0211 	add.w	r2, r4, #17
    1caa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	hri_gmac_write_SAT_reg(dev->hw, index, *((uint16_t *)(filter->mac + 4)));
    1cae:	6833      	ldr	r3, [r6, #0]
    1cb0:	88a9      	ldrh	r1, [r5, #4]
	((Gmac *)hw)->Sa[submodule_index].SAT.reg = data;
    1cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1cb6:	6059      	str	r1, [r3, #4]

	hri_gmac_write_TIDM_reg(dev->hw, index, GMAC_TIDM_TID(*((uint16_t *)(filter->tid)) | filter->tid_enable << 31));
    1cb8:	6833      	ldr	r3, [r6, #0]
    1cba:	88ea      	ldrh	r2, [r5, #6]
	((Gmac *)hw)->TIDM[index].reg = data;
    1cbc:	342a      	adds	r4, #42	; 0x2a
    1cbe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	return ERR_NONE;
}
    1cc2:	2000      	movs	r0, #0
    1cc4:	bd70      	pop	{r4, r5, r6, pc}
    1cc6:	bf00      	nop
    1cc8:	0000d2cc 	.word	0x0000d2cc
    1ccc:	0000151d 	.word	0x0000151d

00001cd0 <_mac_async_read_phy_reg>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_MPE);
	return ERR_NONE;
}

int32_t _mac_async_read_phy_reg(struct _mac_async_device *const dev, uint16_t addr, uint16_t reg, uint16_t *data)
{
    1cd0:	b430      	push	{r4, r5}
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_MPE);
    1cd2:	6805      	ldr	r5, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    1cd4:	682c      	ldr	r4, [r5, #0]
    1cd6:	f044 0410 	orr.w	r4, r4, #16
    1cda:	602c      	str	r4, [r5, #0]
	hri_gmac_write_MAN_reg(dev->hw,
    1cdc:	6804      	ldr	r4, [r0, #0]
	                       GMAC_MAN_OP(2) |            /* 0x02 read operation */
	                           CONF_GMAC_CLTTO << 30 | /* Clause 22/45 operation */
	                           GMAC_MAN_WTN(0x2) |     /* Must be written to 0x2 */
	                           GMAC_MAN_PHYA(addr) | GMAC_MAN_REGA(reg));
    1cde:	05c9      	lsls	r1, r1, #23
    1ce0:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
    1ce4:	0492      	lsls	r2, r2, #18
    1ce6:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
    1cea:	430a      	orrs	r2, r1
    1cec:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
    1cf0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Gmac *)hw)->MAN.reg = data;
    1cf4:	6362      	str	r2, [r4, #52]	; 0x34

	/* Wait for the read operation complete */
	while (!hri_gmac_get_NSR_IDLE_bit(dev->hw)) {
    1cf6:	6802      	ldr	r2, [r0, #0]
	return (((Gmac *)hw)->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos;
    1cf8:	6891      	ldr	r1, [r2, #8]
    1cfa:	f011 0f04 	tst.w	r1, #4
    1cfe:	d0fa      	beq.n	1cf6 <_mac_async_read_phy_reg+0x26>
	return ((Gmac *)hw)->MAN.reg;
    1d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
	}

	*data = GMAC_MAN_DATA(hri_gmac_read_MAN_reg(dev->hw));
    1d02:	801a      	strh	r2, [r3, #0]
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_MPE);
    1d04:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg &= ~mask;
    1d06:	6813      	ldr	r3, [r2, #0]
    1d08:	f023 0310 	bic.w	r3, r3, #16
    1d0c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
}
    1d0e:	2000      	movs	r0, #0
    1d10:	bc30      	pop	{r4, r5}
    1d12:	4770      	bx	lr

00001d14 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1d14:	2201      	movs	r2, #1
    1d16:	4b01      	ldr	r3, [pc, #4]	; (1d1c <_mclk_init+0x8>)
    1d18:	715a      	strb	r2, [r3, #5]
    1d1a:	4770      	bx	lr
    1d1c:	40000800 	.word	0x40000800

00001d20 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1d20:	4b03      	ldr	r3, [pc, #12]	; (1d30 <_osc32kctrl_init_sources+0x10>)
    1d22:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1d24:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1d28:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1d2a:	2201      	movs	r2, #1
    1d2c:	741a      	strb	r2, [r3, #16]
    1d2e:	4770      	bx	lr
    1d30:	40001400 	.word	0x40001400

00001d34 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1d34:	4a04      	ldr	r2, [pc, #16]	; (1d48 <_oscctrl_init_sources+0x14>)
    1d36:	4b05      	ldr	r3, [pc, #20]	; (1d4c <_oscctrl_init_sources+0x18>)
    1d38:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1d3a:	4b04      	ldr	r3, [pc, #16]	; (1d4c <_oscctrl_init_sources+0x18>)
    1d3c:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1d3e:	f013 0f02 	tst.w	r3, #2
    1d42:	d0fa      	beq.n	1d3a <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1d44:	4770      	bx	lr
    1d46:	bf00      	nop
    1d48:	03002606 	.word	0x03002606
    1d4c:	40001000 	.word	0x40001000

00001d50 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1d50:	4770      	bx	lr
	...

00001d54 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d54:	b500      	push	{lr}
    1d56:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d58:	4b0d      	ldr	r3, [pc, #52]	; (1d90 <RAMECC_Handler+0x3c>)
    1d5a:	789b      	ldrb	r3, [r3, #2]
    1d5c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d5e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d60:	9b01      	ldr	r3, [sp, #4]
    1d62:	f013 0f02 	tst.w	r3, #2
    1d66:	d006      	beq.n	1d76 <RAMECC_Handler+0x22>
    1d68:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <RAMECC_Handler+0x40>)
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	b11b      	cbz	r3, 1d76 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d6e:	4a08      	ldr	r2, [pc, #32]	; (1d90 <RAMECC_Handler+0x3c>)
    1d70:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d72:	4798      	blx	r3
    1d74:	e009      	b.n	1d8a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1d76:	9b01      	ldr	r3, [sp, #4]
    1d78:	f013 0f01 	tst.w	r3, #1
    1d7c:	d005      	beq.n	1d8a <RAMECC_Handler+0x36>
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <RAMECC_Handler+0x40>)
    1d80:	685b      	ldr	r3, [r3, #4]
    1d82:	b113      	cbz	r3, 1d8a <RAMECC_Handler+0x36>
    1d84:	4a02      	ldr	r2, [pc, #8]	; (1d90 <RAMECC_Handler+0x3c>)
    1d86:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1d88:	4798      	blx	r3
	} else {
		return;
	}
}
    1d8a:	b003      	add	sp, #12
    1d8c:	f85d fb04 	ldr.w	pc, [sp], #4
    1d90:	41020000 	.word	0x41020000
    1d94:	20012990 	.word	0x20012990

00001d98 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1d98:	b470      	push	{r4, r5, r6}
    1d9a:	b089      	sub	sp, #36	; 0x24
    1d9c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1d9e:	466c      	mov	r4, sp
    1da0:	4d0c      	ldr	r5, [pc, #48]	; (1dd4 <_sercom_get_hardware_index+0x3c>)
    1da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1da6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dae:	2000      	movs	r0, #0
    1db0:	2807      	cmp	r0, #7
    1db2:	d80a      	bhi.n	1dca <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1db4:	ab08      	add	r3, sp, #32
    1db6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1dba:	f853 3c20 	ldr.w	r3, [r3, #-32]
    1dbe:	42b3      	cmp	r3, r6
    1dc0:	d001      	beq.n	1dc6 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dc2:	3001      	adds	r0, #1
    1dc4:	e7f4      	b.n	1db0 <_sercom_get_hardware_index+0x18>
			return i;
    1dc6:	b2c0      	uxtb	r0, r0
    1dc8:	e000      	b.n	1dcc <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    1dca:	2000      	movs	r0, #0
}
    1dcc:	b009      	add	sp, #36	; 0x24
    1dce:	bc70      	pop	{r4, r5, r6}
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop
    1dd4:	0000d2e4 	.word	0x0000d2e4

00001dd8 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1dd8:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1dda:	4b0c      	ldr	r3, [pc, #48]	; (1e0c <_get_sercom_index+0x34>)
    1ddc:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1dde:	2300      	movs	r3, #0
    1de0:	b143      	cbz	r3, 1df4 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1de2:	f240 2247 	movw	r2, #583	; 0x247
    1de6:	490a      	ldr	r1, [pc, #40]	; (1e10 <_get_sercom_index+0x38>)
    1de8:	2000      	movs	r0, #0
    1dea:	4b0a      	ldr	r3, [pc, #40]	; (1e14 <_get_sercom_index+0x3c>)
    1dec:	4798      	blx	r3
	return 0;
    1dee:	2300      	movs	r3, #0
}
    1df0:	4618      	mov	r0, r3
    1df2:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1df4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1df8:	00d1      	lsls	r1, r2, #3
    1dfa:	4a07      	ldr	r2, [pc, #28]	; (1e18 <_get_sercom_index+0x40>)
    1dfc:	440a      	add	r2, r1
    1dfe:	f892 2020 	ldrb.w	r2, [r2, #32]
    1e02:	4290      	cmp	r0, r2
    1e04:	d0f4      	beq.n	1df0 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e06:	3301      	adds	r3, #1
    1e08:	b2db      	uxtb	r3, r3
    1e0a:	e7e9      	b.n	1de0 <_get_sercom_index+0x8>
    1e0c:	00001d99 	.word	0x00001d99
    1e10:	0000d358 	.word	0x0000d358
    1e14:	0000151d 	.word	0x0000151d
    1e18:	0000d2e4 	.word	0x0000d2e4

00001e1c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1e1c:	b538      	push	{r3, r4, r5, lr}
    1e1e:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1e20:	4b3c      	ldr	r3, [pc, #240]	; (1f14 <_usart_init+0xf8>)
    1e22:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e24:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e26:	f013 0f01 	tst.w	r3, #1
    1e2a:	d122      	bne.n	1e72 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1e2c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e30:	00da      	lsls	r2, r3, #3
    1e32:	4b39      	ldr	r3, [pc, #228]	; (1f18 <_usart_init+0xfc>)
    1e34:	4413      	add	r3, r2
    1e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1e38:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e3c:	69e3      	ldr	r3, [r4, #28]
    1e3e:	f013 0f03 	tst.w	r3, #3
    1e42:	d1fb      	bne.n	1e3c <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e44:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e46:	f013 0f02 	tst.w	r3, #2
    1e4a:	d00b      	beq.n	1e64 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e4c:	6823      	ldr	r3, [r4, #0]
    1e4e:	f023 0302 	bic.w	r3, r3, #2
    1e52:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e54:	69e3      	ldr	r3, [r4, #28]
    1e56:	f013 0f03 	tst.w	r3, #3
    1e5a:	d1fb      	bne.n	1e54 <_usart_init+0x38>
    1e5c:	69e3      	ldr	r3, [r4, #28]
    1e5e:	f013 0f02 	tst.w	r3, #2
    1e62:	d1fb      	bne.n	1e5c <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1e64:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e68:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e6a:	69e3      	ldr	r3, [r4, #28]
    1e6c:	f013 0f03 	tst.w	r3, #3
    1e70:	d1fb      	bne.n	1e6a <_usart_init+0x4e>
    1e72:	69e3      	ldr	r3, [r4, #28]
    1e74:	f013 0f01 	tst.w	r3, #1
    1e78:	d1fb      	bne.n	1e72 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1e7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e7e:	00da      	lsls	r2, r3, #3
    1e80:	4b25      	ldr	r3, [pc, #148]	; (1f18 <_usart_init+0xfc>)
    1e82:	4413      	add	r3, r2
    1e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e86:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e88:	69e3      	ldr	r3, [r4, #28]
    1e8a:	f013 0f03 	tst.w	r3, #3
    1e8e:	d1fb      	bne.n	1e88 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1e90:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e94:	00da      	lsls	r2, r3, #3
    1e96:	4b20      	ldr	r3, [pc, #128]	; (1f18 <_usart_init+0xfc>)
    1e98:	4413      	add	r3, r2
    1e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1e9c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e9e:	69e3      	ldr	r3, [r4, #28]
    1ea0:	f013 0f1f 	tst.w	r3, #31
    1ea4:	d1fb      	bne.n	1e9e <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1ea6:	0042      	lsls	r2, r0, #1
    1ea8:	4402      	add	r2, r0
    1eaa:	00d1      	lsls	r1, r2, #3
    1eac:	4b1a      	ldr	r3, [pc, #104]	; (1f18 <_usart_init+0xfc>)
    1eae:	440b      	add	r3, r1
    1eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1eb2:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1eb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1eba:	d10a      	bne.n	1ed2 <_usart_init+0xb6>
    1ebc:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1ec0:	d107      	bne.n	1ed2 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1ec2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ec6:	00da      	lsls	r2, r3, #3
    1ec8:	4b13      	ldr	r3, [pc, #76]	; (1f18 <_usart_init+0xfc>)
    1eca:	4413      	add	r3, r2
    1ecc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1ece:	81a3      	strh	r3, [r4, #12]
    1ed0:	e00f      	b.n	1ef2 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1ed2:	0042      	lsls	r2, r0, #1
    1ed4:	4402      	add	r2, r0
    1ed6:	00d1      	lsls	r1, r2, #3
    1ed8:	4b0f      	ldr	r3, [pc, #60]	; (1f18 <_usart_init+0xfc>)
    1eda:	440b      	add	r3, r1
    1edc:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    1ede:	89a2      	ldrh	r2, [r4, #12]
    1ee0:	f361 020c 	bfi	r2, r1, #0, #13
    1ee4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1ee6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    1eea:	89a3      	ldrh	r3, [r4, #12]
    1eec:	f362 334f 	bfi	r3, r2, #13, #3
    1ef0:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1ef2:	4a09      	ldr	r2, [pc, #36]	; (1f18 <_usart_init+0xfc>)
    1ef4:	0043      	lsls	r3, r0, #1
    1ef6:	181d      	adds	r5, r3, r0
    1ef8:	00e9      	lsls	r1, r5, #3
    1efa:	460d      	mov	r5, r1
    1efc:	4411      	add	r1, r2
    1efe:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1f02:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1f04:	442a      	add	r2, r5
    1f06:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1f0a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    1f0e:	2000      	movs	r0, #0
    1f10:	bd38      	pop	{r3, r4, r5, pc}
    1f12:	bf00      	nop
    1f14:	00001dd9 	.word	0x00001dd9
    1f18:	0000d2e4 	.word	0x0000d2e4

00001f1c <_usart_sync_init>:
{
    1f1c:	b538      	push	{r3, r4, r5, lr}
    1f1e:	460c      	mov	r4, r1
	ASSERT(device);
    1f20:	4605      	mov	r5, r0
    1f22:	22bb      	movs	r2, #187	; 0xbb
    1f24:	4905      	ldr	r1, [pc, #20]	; (1f3c <_usart_sync_init+0x20>)
    1f26:	3000      	adds	r0, #0
    1f28:	bf18      	it	ne
    1f2a:	2001      	movne	r0, #1
    1f2c:	4b04      	ldr	r3, [pc, #16]	; (1f40 <_usart_sync_init+0x24>)
    1f2e:	4798      	blx	r3
	device->hw = hw;
    1f30:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1f32:	4620      	mov	r0, r4
    1f34:	4b03      	ldr	r3, [pc, #12]	; (1f44 <_usart_sync_init+0x28>)
    1f36:	4798      	blx	r3
}
    1f38:	bd38      	pop	{r3, r4, r5, pc}
    1f3a:	bf00      	nop
    1f3c:	0000d358 	.word	0x0000d358
    1f40:	0000151d 	.word	0x0000151d
    1f44:	00001e1d 	.word	0x00001e1d

00001f48 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1f48:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f4a:	6813      	ldr	r3, [r2, #0]
    1f4c:	f043 0302 	orr.w	r3, r3, #2
    1f50:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f52:	69d3      	ldr	r3, [r2, #28]
    1f54:	f013 0f03 	tst.w	r3, #3
    1f58:	d1fb      	bne.n	1f52 <_usart_sync_enable+0xa>
}
    1f5a:	4770      	bx	lr

00001f5c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1f5c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1f5e:	6299      	str	r1, [r3, #40]	; 0x28
    1f60:	4770      	bx	lr

00001f62 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1f62:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1f64:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1f66:	b2c0      	uxtb	r0, r0
    1f68:	4770      	bx	lr

00001f6a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1f6a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1f6c:	7e18      	ldrb	r0, [r3, #24]
}
    1f6e:	f000 0001 	and.w	r0, r0, #1
    1f72:	4770      	bx	lr

00001f74 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1f74:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1f76:	7e18      	ldrb	r0, [r3, #24]
}
    1f78:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1f7c:	4770      	bx	lr

00001f7e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1f7e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1f80:	7e18      	ldrb	r0, [r3, #24]
}
    1f82:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1f86:	4770      	bx	lr

00001f88 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1f88:	b538      	push	{r3, r4, r5, lr}
    1f8a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1f8c:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1f8e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1f90:	f013 0f01 	tst.w	r3, #1
    1f94:	d004      	beq.n	1fa0 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1f96:	2301      	movs	r3, #1
    1f98:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1f9a:	6803      	ldr	r3, [r0, #0]
    1f9c:	b103      	cbz	r3, 1fa0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1f9e:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1fa0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1fa2:	f013 0f02 	tst.w	r3, #2
    1fa6:	d005      	beq.n	1fb4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1fa8:	2302      	movs	r3, #2
    1faa:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1fac:	686b      	ldr	r3, [r5, #4]
    1fae:	b10b      	cbz	r3, 1fb4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1fb0:	4628      	mov	r0, r5
    1fb2:	4798      	blx	r3
    1fb4:	bd38      	pop	{r3, r4, r5, pc}
	...

00001fb8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1fb8:	4b09      	ldr	r3, [pc, #36]	; (1fe0 <_tc_init_irq_param+0x28>)
    1fba:	4298      	cmp	r0, r3
    1fbc:	d006      	beq.n	1fcc <_tc_init_irq_param+0x14>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    1fbe:	4b09      	ldr	r3, [pc, #36]	; (1fe4 <_tc_init_irq_param+0x2c>)
    1fc0:	4298      	cmp	r0, r3
    1fc2:	d006      	beq.n	1fd2 <_tc_init_irq_param+0x1a>
		_tc4_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC5) {
    1fc4:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <_tc_init_irq_param+0x30>)
    1fc6:	4298      	cmp	r0, r3
    1fc8:	d006      	beq.n	1fd8 <_tc_init_irq_param+0x20>
    1fca:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    1fcc:	4b07      	ldr	r3, [pc, #28]	; (1fec <_tc_init_irq_param+0x34>)
    1fce:	6019      	str	r1, [r3, #0]
    1fd0:	e7f5      	b.n	1fbe <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _pwm_device *)dev;
    1fd2:	4b06      	ldr	r3, [pc, #24]	; (1fec <_tc_init_irq_param+0x34>)
    1fd4:	6059      	str	r1, [r3, #4]
    1fd6:	e7f5      	b.n	1fc4 <_tc_init_irq_param+0xc>
		_tc5_dev = (struct _pwm_device *)dev;
    1fd8:	4b04      	ldr	r3, [pc, #16]	; (1fec <_tc_init_irq_param+0x34>)
    1fda:	6099      	str	r1, [r3, #8]
	}
}
    1fdc:	e7f5      	b.n	1fca <_tc_init_irq_param+0x12>
    1fde:	bf00      	nop
    1fe0:	40003800 	.word	0x40003800
    1fe4:	42001400 	.word	0x42001400
    1fe8:	42001800 	.word	0x42001800
    1fec:	20001568 	.word	0x20001568

00001ff0 <get_tc_index>:
{
    1ff0:	b570      	push	{r4, r5, r6, lr}
    1ff2:	b088      	sub	sp, #32
    1ff4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1ff6:	466c      	mov	r4, sp
    1ff8:	4d17      	ldr	r5, [pc, #92]	; (2058 <get_tc_index+0x68>)
    1ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ffe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2006:	2300      	movs	r3, #0
    2008:	2b07      	cmp	r3, #7
    200a:	d80a      	bhi.n	2022 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    200c:	aa08      	add	r2, sp, #32
    200e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2012:	f852 2c20 	ldr.w	r2, [r2, #-32]
    2016:	42b2      	cmp	r2, r6
    2018:	d001      	beq.n	201e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    201a:	3301      	adds	r3, #1
    201c:	e7f4      	b.n	2008 <get_tc_index+0x18>
			return i;
    201e:	b2db      	uxtb	r3, r3
    2020:	e000      	b.n	2024 <get_tc_index+0x34>
		}
	}
	return 0;
    2022:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2024:	2000      	movs	r0, #0
    2026:	2802      	cmp	r0, #2
    2028:	d80b      	bhi.n	2042 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    202a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    202e:	008a      	lsls	r2, r1, #2
    2030:	490a      	ldr	r1, [pc, #40]	; (205c <get_tc_index+0x6c>)
    2032:	5c8a      	ldrb	r2, [r1, r2]
    2034:	429a      	cmp	r2, r3
    2036:	d002      	beq.n	203e <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2038:	3001      	adds	r0, #1
    203a:	b2c0      	uxtb	r0, r0
    203c:	e7f3      	b.n	2026 <get_tc_index+0x36>
			return i;
    203e:	b240      	sxtb	r0, r0
    2040:	e007      	b.n	2052 <get_tc_index+0x62>
	ASSERT(false);
    2042:	f44f 72b3 	mov.w	r2, #358	; 0x166
    2046:	4906      	ldr	r1, [pc, #24]	; (2060 <get_tc_index+0x70>)
    2048:	2000      	movs	r0, #0
    204a:	4b06      	ldr	r3, [pc, #24]	; (2064 <get_tc_index+0x74>)
    204c:	4798      	blx	r3
	return -1;
    204e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2052:	b008      	add	sp, #32
    2054:	bd70      	pop	{r4, r5, r6, pc}
    2056:	bf00      	nop
    2058:	0000d374 	.word	0x0000d374
    205c:	20000000 	.word	0x20000000
    2060:	0000d394 	.word	0x0000d394
    2064:	0000151d 	.word	0x0000151d

00002068 <_pwm_init>:
{
    2068:	b570      	push	{r4, r5, r6, lr}
    206a:	4606      	mov	r6, r0
    206c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    206e:	4608      	mov	r0, r1
    2070:	4b59      	ldr	r3, [pc, #356]	; (21d8 <_pwm_init+0x170>)
    2072:	4798      	blx	r3
    2074:	4605      	mov	r5, r0
	device->hw = hw;
    2076:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2078:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    207a:	f013 0f01 	tst.w	r3, #1
    207e:	d119      	bne.n	20b4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2080:	6923      	ldr	r3, [r4, #16]
    2082:	f013 0f03 	tst.w	r3, #3
    2086:	d1fb      	bne.n	2080 <_pwm_init+0x18>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2088:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    208a:	f013 0f02 	tst.w	r3, #2
    208e:	d00b      	beq.n	20a8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2090:	6823      	ldr	r3, [r4, #0]
    2092:	f023 0302 	bic.w	r3, r3, #2
    2096:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2098:	6923      	ldr	r3, [r4, #16]
    209a:	f013 0f03 	tst.w	r3, #3
    209e:	d1fb      	bne.n	2098 <_pwm_init+0x30>
    20a0:	6923      	ldr	r3, [r4, #16]
    20a2:	f013 0f02 	tst.w	r3, #2
    20a6:	d1fb      	bne.n	20a0 <_pwm_init+0x38>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20a8:	2301      	movs	r3, #1
    20aa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20ac:	6923      	ldr	r3, [r4, #16]
    20ae:	f013 0f03 	tst.w	r3, #3
    20b2:	d1fb      	bne.n	20ac <_pwm_init+0x44>
    20b4:	6923      	ldr	r3, [r4, #16]
    20b6:	f013 0f01 	tst.w	r3, #1
    20ba:	d1fb      	bne.n	20b4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    20bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20c0:	009a      	lsls	r2, r3, #2
    20c2:	4b46      	ldr	r3, [pc, #280]	; (21dc <_pwm_init+0x174>)
    20c4:	4413      	add	r3, r2
    20c6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20c8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20ca:	6923      	ldr	r3, [r4, #16]
    20cc:	f013 0f03 	tst.w	r3, #3
    20d0:	d1fb      	bne.n	20ca <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    20d2:	00aa      	lsls	r2, r5, #2
    20d4:	442a      	add	r2, r5
    20d6:	0091      	lsls	r1, r2, #2
    20d8:	4b40      	ldr	r3, [pc, #256]	; (21dc <_pwm_init+0x174>)
    20da:	440b      	add	r3, r1
    20dc:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    20de:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    20e0:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    20e2:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    20e4:	2203      	movs	r2, #3
    20e6:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    20e8:	685b      	ldr	r3, [r3, #4]
    20ea:	f003 030c 	and.w	r3, r3, #12
    20ee:	2b08      	cmp	r3, #8
    20f0:	d059      	beq.n	21a6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    20f2:	2b00      	cmp	r3, #0
    20f4:	d16b      	bne.n	21ce <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    20f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20fa:	009a      	lsls	r2, r3, #2
    20fc:	4b37      	ldr	r3, [pc, #220]	; (21dc <_pwm_init+0x174>)
    20fe:	4413      	add	r3, r2
    2100:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2102:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2104:	6923      	ldr	r3, [r4, #16]
    2106:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    210a:	d1fb      	bne.n	2104 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    210c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2110:	009a      	lsls	r2, r3, #2
    2112:	4b32      	ldr	r3, [pc, #200]	; (21dc <_pwm_init+0x174>)
    2114:	4413      	add	r3, r2
    2116:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2118:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    211a:	6923      	ldr	r3, [r4, #16]
    211c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2120:	d1fb      	bne.n	211a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2122:	4631      	mov	r1, r6
    2124:	4620      	mov	r0, r4
    2126:	4b2e      	ldr	r3, [pc, #184]	; (21e0 <_pwm_init+0x178>)
    2128:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    212a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    212e:	009a      	lsls	r2, r3, #2
    2130:	4b2a      	ldr	r3, [pc, #168]	; (21dc <_pwm_init+0x174>)
    2132:	4413      	add	r3, r2
    2134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2138:	2b00      	cmp	r3, #0
    213a:	db0d      	blt.n	2158 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    213c:	095a      	lsrs	r2, r3, #5
    213e:	f003 031f 	and.w	r3, r3, #31
    2142:	2101      	movs	r1, #1
    2144:	fa01 f303 	lsl.w	r3, r1, r3
    2148:	3220      	adds	r2, #32
    214a:	4926      	ldr	r1, [pc, #152]	; (21e4 <_pwm_init+0x17c>)
    214c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2150:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2154:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2158:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    215c:	009a      	lsls	r2, r3, #2
    215e:	4b1f      	ldr	r3, [pc, #124]	; (21dc <_pwm_init+0x174>)
    2160:	4413      	add	r3, r2
    2162:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2166:	2b00      	cmp	r3, #0
    2168:	db09      	blt.n	217e <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216a:	095a      	lsrs	r2, r3, #5
    216c:	f003 031f 	and.w	r3, r3, #31
    2170:	2101      	movs	r1, #1
    2172:	fa01 f303 	lsl.w	r3, r1, r3
    2176:	3260      	adds	r2, #96	; 0x60
    2178:	491a      	ldr	r1, [pc, #104]	; (21e4 <_pwm_init+0x17c>)
    217a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    217e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2182:	00aa      	lsls	r2, r5, #2
    2184:	4b15      	ldr	r3, [pc, #84]	; (21dc <_pwm_init+0x174>)
    2186:	4413      	add	r3, r2
    2188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    218c:	2b00      	cmp	r3, #0
    218e:	db21      	blt.n	21d4 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2190:	0959      	lsrs	r1, r3, #5
    2192:	f003 031f 	and.w	r3, r3, #31
    2196:	2201      	movs	r2, #1
    2198:	fa02 f303 	lsl.w	r3, r2, r3
    219c:	4a11      	ldr	r2, [pc, #68]	; (21e4 <_pwm_init+0x17c>)
    219e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    21a2:	2000      	movs	r0, #0
    21a4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    21a6:	4b0d      	ldr	r3, [pc, #52]	; (21dc <_pwm_init+0x174>)
    21a8:	440b      	add	r3, r1
    21aa:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21ac:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21ae:	6923      	ldr	r3, [r4, #16]
    21b0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21b4:	d1fb      	bne.n	21ae <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    21b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21ba:	009a      	lsls	r2, r3, #2
    21bc:	4b07      	ldr	r3, [pc, #28]	; (21dc <_pwm_init+0x174>)
    21be:	4413      	add	r3, r2
    21c0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21c2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21c4:	6923      	ldr	r3, [r4, #16]
    21c6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21ca:	d1fb      	bne.n	21c4 <_pwm_init+0x15c>
    21cc:	e7a9      	b.n	2122 <_pwm_init+0xba>
		return -1;
    21ce:	f04f 30ff 	mov.w	r0, #4294967295
    21d2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    21d4:	2000      	movs	r0, #0
}
    21d6:	bd70      	pop	{r4, r5, r6, pc}
    21d8:	00001ff1 	.word	0x00001ff1
    21dc:	20000000 	.word	0x20000000
    21e0:	00001fb9 	.word	0x00001fb9
    21e4:	e000e100 	.word	0xe000e100

000021e8 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    21e8:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    21ea:	6813      	ldr	r3, [r2, #0]
    21ec:	f043 0302 	orr.w	r3, r3, #2
    21f0:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21f2:	6913      	ldr	r3, [r2, #16]
    21f4:	f013 0f03 	tst.w	r3, #3
    21f8:	d1fb      	bne.n	21f2 <_pwm_enable+0xa>
}
    21fa:	4770      	bx	lr

000021fc <_pwm_set_param>:
{
    21fc:	b570      	push	{r4, r5, r6, lr}
    21fe:	460e      	mov	r6, r1
    2200:	4615      	mov	r5, r2
	void *const hw = device->hw;
    2202:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    2204:	4620      	mov	r0, r4
    2206:	4b1b      	ldr	r3, [pc, #108]	; (2274 <_pwm_set_param+0x78>)
    2208:	4798      	blx	r3
	_tcs[i].cc0 = period;
    220a:	0082      	lsls	r2, r0, #2
    220c:	4402      	add	r2, r0
    220e:	0091      	lsls	r1, r2, #2
    2210:	4b19      	ldr	r3, [pc, #100]	; (2278 <_pwm_set_param+0x7c>)
    2212:	440b      	add	r3, r1
    2214:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    2216:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2218:	685b      	ldr	r3, [r3, #4]
    221a:	f003 030c 	and.w	r3, r3, #12
    221e:	2b08      	cmp	r3, #8
    2220:	d016      	beq.n	2250 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    2222:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2226:	009a      	lsls	r2, r3, #2
    2228:	4b13      	ldr	r3, [pc, #76]	; (2278 <_pwm_set_param+0x7c>)
    222a:	4413      	add	r3, r2
    222c:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    222e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2230:	6923      	ldr	r3, [r4, #16]
    2232:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2236:	d1fb      	bne.n	2230 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    2238:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    223c:	0082      	lsls	r2, r0, #2
    223e:	4b0e      	ldr	r3, [pc, #56]	; (2278 <_pwm_set_param+0x7c>)
    2240:	4413      	add	r3, r2
    2242:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2244:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2246:	6923      	ldr	r3, [r4, #16]
    2248:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    224c:	d1fb      	bne.n	2246 <_pwm_set_param+0x4a>
    224e:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2250:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2252:	6923      	ldr	r3, [r4, #16]
    2254:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2258:	d1fb      	bne.n	2252 <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    225a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    225e:	0082      	lsls	r2, r0, #2
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <_pwm_set_param+0x7c>)
    2262:	4413      	add	r3, r2
    2264:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2266:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2268:	6923      	ldr	r3, [r4, #16]
    226a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    226e:	d1fb      	bne.n	2268 <_pwm_set_param+0x6c>
    2270:	bd70      	pop	{r4, r5, r6, pc}
    2272:	bf00      	nop
    2274:	00001ff1 	.word	0x00001ff1
    2278:	20000000 	.word	0x20000000

0000227c <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    227c:	6902      	ldr	r2, [r0, #16]
    227e:	6913      	ldr	r3, [r2, #16]
    2280:	f013 0f03 	tst.w	r3, #3
    2284:	d1fb      	bne.n	227e <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    2286:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    2288:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    228c:	4770      	bx	lr

0000228e <_tc_get_pwm>:
}
    228e:	2000      	movs	r0, #0
    2290:	4770      	bx	lr
	...

00002294 <TC0_Handler>:
{
    2294:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2296:	4b02      	ldr	r3, [pc, #8]	; (22a0 <TC0_Handler+0xc>)
    2298:	6818      	ldr	r0, [r3, #0]
    229a:	4b02      	ldr	r3, [pc, #8]	; (22a4 <TC0_Handler+0x10>)
    229c:	4798      	blx	r3
    229e:	bd08      	pop	{r3, pc}
    22a0:	20001568 	.word	0x20001568
    22a4:	00001f89 	.word	0x00001f89

000022a8 <TC4_Handler>:
{
    22a8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    22aa:	4b02      	ldr	r3, [pc, #8]	; (22b4 <TC4_Handler+0xc>)
    22ac:	6858      	ldr	r0, [r3, #4]
    22ae:	4b02      	ldr	r3, [pc, #8]	; (22b8 <TC4_Handler+0x10>)
    22b0:	4798      	blx	r3
    22b2:	bd08      	pop	{r3, pc}
    22b4:	20001568 	.word	0x20001568
    22b8:	00001f89 	.word	0x00001f89

000022bc <TC5_Handler>:
{
    22bc:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc5_dev);
    22be:	4b02      	ldr	r3, [pc, #8]	; (22c8 <TC5_Handler+0xc>)
    22c0:	6898      	ldr	r0, [r3, #8]
    22c2:	4b02      	ldr	r3, [pc, #8]	; (22cc <TC5_Handler+0x10>)
    22c4:	4798      	blx	r3
    22c6:	bd08      	pop	{r3, pc}
    22c8:	20001568 	.word	0x20001568
    22cc:	00001f89 	.word	0x00001f89

000022d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *low_level_input(struct netif *netif)
{
    22d0:	b570      	push	{r4, r5, r6, lr}
	struct mac_async_descriptor *mac;
	struct pbuf *                p;
	u16_t                        len;

	mac = (struct mac_async_descriptor *)(netif->state);
    22d2:	6a05      	ldr	r5, [r0, #32]
	len = mac_async_read_len(mac); /* Obtain the size of the packet */
    22d4:	4628      	mov	r0, r5
    22d6:	4b11      	ldr	r3, [pc, #68]	; (231c <low_level_input+0x4c>)
    22d8:	4798      	blx	r3
    22da:	b280      	uxth	r0, r0
	if (len == 0) {
    22dc:	b1d8      	cbz	r0, 2316 <low_level_input+0x46>
		return NULL;
	}

#if ETH_PAD_SIZE
	len += ETH_PAD_SIZE; /* allow room for Ethernet padding */
    22de:	1c81      	adds	r1, r0, #2
#endif

	/* Allocate a pbuf as one large chunk, This include protocol header */
	p = pbuf_alloc(PBUF_RAW, len, PBUF_RAM);
    22e0:	2200      	movs	r2, #0
    22e2:	b289      	uxth	r1, r1
    22e4:	2003      	movs	r0, #3
    22e6:	4b0e      	ldr	r3, [pc, #56]	; (2320 <low_level_input+0x50>)
    22e8:	4798      	blx	r3

	if (p != NULL) {
    22ea:	4604      	mov	r4, r0
    22ec:	b168      	cbz	r0, 230a <low_level_input+0x3a>
#if ETH_PAD_SIZE
		pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
    22ee:	f06f 0101 	mvn.w	r1, #1
    22f2:	4e0c      	ldr	r6, [pc, #48]	; (2324 <low_level_input+0x54>)
    22f4:	47b0      	blx	r6
#endif

		/* Read the entire packet into the pbuf. */
		mac_async_read(mac, p->payload, p->len);
    22f6:	8962      	ldrh	r2, [r4, #10]
    22f8:	6861      	ldr	r1, [r4, #4]
    22fa:	4628      	mov	r0, r5
    22fc:	4b0a      	ldr	r3, [pc, #40]	; (2328 <low_level_input+0x58>)
    22fe:	4798      	blx	r3

#if ETH_PAD_SIZE
		pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
    2300:	2102      	movs	r1, #2
    2302:	4620      	mov	r0, r4
    2304:	47b0      	blx	r6
		LINK_STATS_INC(link.memerr);
		LINK_STATS_INC(link.drop);
	}

	return p;
}
    2306:	4620      	mov	r0, r4
    2308:	bd70      	pop	{r4, r5, r6, pc}
		mac_async_read(mac, NULL, 0);
    230a:	2200      	movs	r2, #0
    230c:	4611      	mov	r1, r2
    230e:	4628      	mov	r0, r5
    2310:	4b05      	ldr	r3, [pc, #20]	; (2328 <low_level_input+0x58>)
    2312:	4798      	blx	r3
    2314:	e7f7      	b.n	2306 <low_level_input+0x36>
		return NULL;
    2316:	2400      	movs	r4, #0
    2318:	e7f5      	b.n	2306 <low_level_input+0x36>
    231a:	bf00      	nop
    231c:	00001219 	.word	0x00001219
    2320:	00005505 	.word	0x00005505
    2324:	00005427 	.word	0x00005427
    2328:	000011e9 	.word	0x000011e9

0000232c <mac_low_level_init>:
{
    232c:	b510      	push	{r4, lr}
    232e:	b084      	sub	sp, #16
	mac = (struct mac_async_descriptor *)(netif->state);
    2330:	6a04      	ldr	r4, [r0, #32]
	memcpy(filter.mac, netif->hwaddr, NETIF_MAX_HWADDR_LEN);
    2332:	4603      	mov	r3, r0
    2334:	f853 0f27 	ldr.w	r0, [r3, #39]!
    2338:	9001      	str	r0, [sp, #4]
    233a:	889b      	ldrh	r3, [r3, #4]
    233c:	f8ad 3008 	strh.w	r3, [sp, #8]
	filter.tid_enable = false;
    2340:	2100      	movs	r1, #0
    2342:	f88d 100c 	strb.w	r1, [sp, #12]
	mac_async_set_filter(mac, 0, &filter);
    2346:	aa01      	add	r2, sp, #4
    2348:	4620      	mov	r0, r4
    234a:	4b02      	ldr	r3, [pc, #8]	; (2354 <mac_low_level_init+0x28>)
    234c:	4798      	blx	r3
}
    234e:	b004      	add	sp, #16
    2350:	bd10      	pop	{r4, pc}
    2352:	bf00      	nop
    2354:	000012a1 	.word	0x000012a1

00002358 <mac_low_level_output>:
{
    2358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    235c:	460e      	mov	r6, r1
	mac = (struct mac_async_descriptor *)(netif->state);
    235e:	6a07      	ldr	r7, [r0, #32]
	pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
    2360:	f06f 0101 	mvn.w	r1, #1
    2364:	4630      	mov	r0, r6
    2366:	4b19      	ldr	r3, [pc, #100]	; (23cc <mac_low_level_output+0x74>)
    2368:	4798      	blx	r3
	if (p->tot_len == p->len) {
    236a:	8932      	ldrh	r2, [r6, #8]
    236c:	8973      	ldrh	r3, [r6, #10]
    236e:	429a      	cmp	r2, r3
    2370:	d00a      	beq.n	2388 <mac_low_level_output+0x30>
		tbuf = mem_malloc(LWIP_MEM_ALIGN_SIZE(p->tot_len));
    2372:	1cd0      	adds	r0, r2, #3
    2374:	b280      	uxth	r0, r0
    2376:	f020 0003 	bic.w	r0, r0, #3
    237a:	4b15      	ldr	r3, [pc, #84]	; (23d0 <mac_low_level_output+0x78>)
    237c:	4798      	blx	r3
		if (tbuf == NULL) {
    237e:	4680      	mov	r8, r0
    2380:	b300      	cbz	r0, 23c4 <mac_low_level_output+0x6c>
    2382:	4605      	mov	r5, r0
    2384:	4634      	mov	r4, r6
    2386:	e00c      	b.n	23a2 <mac_low_level_output+0x4a>
		mac_async_write(mac, p->payload, p->tot_len);
    2388:	6871      	ldr	r1, [r6, #4]
    238a:	4638      	mov	r0, r7
    238c:	4b11      	ldr	r3, [pc, #68]	; (23d4 <mac_low_level_output+0x7c>)
    238e:	4798      	blx	r3
    2390:	e011      	b.n	23b6 <mac_low_level_output+0x5e>
			memcpy(pos, q->payload, q->len);
    2392:	8962      	ldrh	r2, [r4, #10]
    2394:	6861      	ldr	r1, [r4, #4]
    2396:	4628      	mov	r0, r5
    2398:	4b0f      	ldr	r3, [pc, #60]	; (23d8 <mac_low_level_output+0x80>)
    239a:	4798      	blx	r3
			pos += q->len;
    239c:	8963      	ldrh	r3, [r4, #10]
    239e:	441d      	add	r5, r3
		for (q = p; q != NULL; q = q->next) {
    23a0:	6824      	ldr	r4, [r4, #0]
    23a2:	2c00      	cmp	r4, #0
    23a4:	d1f5      	bne.n	2392 <mac_low_level_output+0x3a>
		mac_async_write(mac, tbuf, p->tot_len);
    23a6:	8932      	ldrh	r2, [r6, #8]
    23a8:	4641      	mov	r1, r8
    23aa:	4638      	mov	r0, r7
    23ac:	4b09      	ldr	r3, [pc, #36]	; (23d4 <mac_low_level_output+0x7c>)
    23ae:	4798      	blx	r3
		mem_free(tbuf);
    23b0:	4640      	mov	r0, r8
    23b2:	4b0a      	ldr	r3, [pc, #40]	; (23dc <mac_low_level_output+0x84>)
    23b4:	4798      	blx	r3
	pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
    23b6:	2102      	movs	r1, #2
    23b8:	4630      	mov	r0, r6
    23ba:	4b04      	ldr	r3, [pc, #16]	; (23cc <mac_low_level_output+0x74>)
    23bc:	4798      	blx	r3
	return ERR_OK;
    23be:	2000      	movs	r0, #0
    23c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ERR_MEM;
    23c4:	f04f 30ff 	mov.w	r0, #4294967295
}
    23c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23cc:	00005427 	.word	0x00005427
    23d0:	00005099 	.word	0x00005099
    23d4:	000011ad 	.word	0x000011ad
    23d8:	0000c103 	.word	0x0000c103
    23dc:	00004f49 	.word	0x00004f49

000023e0 <ethernetif_mac_input>:

/**
 * \brief Process incoming ethernet packet.
 */
void ethernetif_mac_input(struct netif *netif)
{
    23e0:	b538      	push	{r3, r4, r5, lr}
    23e2:	4605      	mov	r5, r0
    23e4:	e004      	b.n	23f0 <ethernetif_mac_input+0x10>
			/* PPPoE packet? */
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* full packet send to tcpip_thread to process */
			if (netif->input(p, netif) != ERR_OK) {
    23e6:	692b      	ldr	r3, [r5, #16]
    23e8:	4629      	mov	r1, r5
    23ea:	4620      	mov	r0, r4
    23ec:	4798      	blx	r3
    23ee:	b998      	cbnz	r0, 2418 <ethernetif_mac_input+0x38>
		p = low_level_input(netif);
    23f0:	4628      	mov	r0, r5
    23f2:	4b0c      	ldr	r3, [pc, #48]	; (2424 <ethernetif_mac_input+0x44>)
    23f4:	4798      	blx	r3
		if (p == NULL) {
    23f6:	4604      	mov	r4, r0
    23f8:	b190      	cbz	r0, 2420 <ethernetif_mac_input+0x40>
		ethhdr = p->payload;
    23fa:	6843      	ldr	r3, [r0, #4]
		switch (htons(ethhdr->type)) {
    23fc:	89d8      	ldrh	r0, [r3, #14]
    23fe:	4b0a      	ldr	r3, [pc, #40]	; (2428 <ethernetif_mac_input+0x48>)
    2400:	4798      	blx	r3
    2402:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2406:	d0ee      	beq.n	23e6 <ethernetif_mac_input+0x6>
    2408:	f640 0306 	movw	r3, #2054	; 0x806
    240c:	4298      	cmp	r0, r3
    240e:	d0ea      	beq.n	23e6 <ethernetif_mac_input+0x6>
				p = NULL;
			}
			break;

		default:
			pbuf_free(p);
    2410:	4620      	mov	r0, r4
    2412:	4b06      	ldr	r3, [pc, #24]	; (242c <ethernetif_mac_input+0x4c>)
    2414:	4798      	blx	r3
			p = NULL;
			break;
    2416:	e7eb      	b.n	23f0 <ethernetif_mac_input+0x10>
				pbuf_free(p);
    2418:	4620      	mov	r0, r4
    241a:	4b04      	ldr	r3, [pc, #16]	; (242c <ethernetif_mac_input+0x4c>)
    241c:	4798      	blx	r3
    241e:	e7e7      	b.n	23f0 <ethernetif_mac_input+0x10>
    2420:	bd38      	pop	{r3, r4, r5, pc}
    2422:	bf00      	nop
    2424:	000022d1 	.word	0x000022d1
    2428:	00003e91 	.word	0x00003e91
    242c:	000054a1 	.word	0x000054a1

00002430 <sys_init>:
{
	int i;

	/* Initialize the the per-thread sys_timeouts structures
	   make sure there are no valid pids in the list */
	for (i = 0; i < SYS_THREAD_MAX; i++) {
    2430:	2300      	movs	r3, #0
    2432:	e000      	b.n	2436 <sys_init+0x6>
    2434:	3301      	adds	r3, #1
    2436:	2b07      	cmp	r3, #7
    2438:	ddfc      	ble.n	2434 <sys_init+0x4>
		Threads_TimeoutsList[i].pid = 0;
	}
	NbActiveThreads = 0;
    243a:	2200      	movs	r2, #0
    243c:	4b01      	ldr	r3, [pc, #4]	; (2444 <sys_init+0x14>)
    243e:	801a      	strh	r2, [r3, #0]
    2440:	4770      	bx	lr
    2442:	bf00      	nop
    2444:	20001574 	.word	0x20001574

00002448 <sys_sem_new>:
 * \param count Initial state of the semaphore.
 *
 * \return ERR_OK for OK, other value indicates error.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
    2448:	b570      	push	{r4, r5, r6, lr}
	err_t err_sem = ERR_MEM;

	/* Sanity check */
	if (sem != NULL) {
    244a:	b308      	cbz	r0, 2490 <sys_sem_new+0x48>
    244c:	4604      	mov	r4, r0
    244e:	460d      	mov	r5, r1
		portENTER_CRITICAL();
    2450:	4b11      	ldr	r3, [pc, #68]	; (2498 <sys_sem_new+0x50>)
    2452:	4798      	blx	r3

		vSemaphoreCreateBinary( *sem );
    2454:	2203      	movs	r2, #3
    2456:	2100      	movs	r1, #0
    2458:	2001      	movs	r0, #1
    245a:	4b10      	ldr	r3, [pc, #64]	; (249c <sys_sem_new+0x54>)
    245c:	4798      	blx	r3
    245e:	6020      	str	r0, [r4, #0]
    2460:	b120      	cbz	r0, 246c <sys_sem_new+0x24>
    2462:	2300      	movs	r3, #0
    2464:	461a      	mov	r2, r3
    2466:	4619      	mov	r1, r3
    2468:	4e0d      	ldr	r6, [pc, #52]	; (24a0 <sys_sem_new+0x58>)
    246a:	47b0      	blx	r6
		if (*sem != SYS_SEM_NULL) {
    246c:	6820      	ldr	r0, [r4, #0]
    246e:	b160      	cbz	r0, 248a <sys_sem_new+0x42>
				lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
			}

  #endif /* SYS_STATS */

			if (0 == count) { /* Means we want the sem to be
    2470:	b125      	cbz	r5, 247c <sys_sem_new+0x34>
			                     unavailable at init state. */
				xSemaphoreTake( *sem, 1);
			}

			err_sem = ERR_OK;
    2472:	2400      	movs	r4, #0
		}

		portEXIT_CRITICAL();
    2474:	4b0b      	ldr	r3, [pc, #44]	; (24a4 <sys_sem_new+0x5c>)
    2476:	4798      	blx	r3
	}

	return err_sem;
}
    2478:	4620      	mov	r0, r4
    247a:	bd70      	pop	{r4, r5, r6, pc}
				xSemaphoreTake( *sem, 1);
    247c:	2300      	movs	r3, #0
    247e:	2201      	movs	r2, #1
    2480:	4619      	mov	r1, r3
    2482:	4c09      	ldr	r4, [pc, #36]	; (24a8 <sys_sem_new+0x60>)
    2484:	47a0      	blx	r4
			err_sem = ERR_OK;
    2486:	2400      	movs	r4, #0
    2488:	e7f4      	b.n	2474 <sys_sem_new+0x2c>
	err_t err_sem = ERR_MEM;
    248a:	f04f 34ff 	mov.w	r4, #4294967295
    248e:	e7f1      	b.n	2474 <sys_sem_new+0x2c>
    2490:	f04f 34ff 	mov.w	r4, #4294967295
    2494:	e7f0      	b.n	2478 <sys_sem_new+0x30>
    2496:	bf00      	nop
    2498:	00009a25 	.word	0x00009a25
    249c:	0000a065 	.word	0x0000a065
    24a0:	0000a135 	.word	0x0000a135
    24a4:	00009a69 	.word	0x00009a69
    24a8:	0000a4ed 	.word	0x0000a4ed

000024ac <sys_sem_free>:
 * \param sem Pointer to the semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
	/* Sanity check */
	if (sem != NULL) {
    24ac:	b128      	cbz	r0, 24ba <sys_sem_free+0xe>
{
    24ae:	b508      	push	{r3, lr}
		if (SYS_SEM_NULL != *sem) {
    24b0:	6800      	ldr	r0, [r0, #0]
    24b2:	b108      	cbz	r0, 24b8 <sys_sem_free+0xc>
  #if SYS_STATS 
			lwip_stats.sys.sem.used--;
  #endif /* SYS_STATS */
			vQueueDelete( *sem );
    24b4:	4b01      	ldr	r3, [pc, #4]	; (24bc <sys_sem_free+0x10>)
    24b6:	4798      	blx	r3
    24b8:	bd08      	pop	{r3, pc}
    24ba:	4770      	bx	lr
    24bc:	0000a6b5 	.word	0x0000a6b5

000024c0 <sys_sem_signal>:
 * \param sem Pointer to the semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
	/* Sanity check */
	if (sem != NULL) {
    24c0:	b138      	cbz	r0, 24d2 <sys_sem_signal+0x12>
{
    24c2:	b510      	push	{r4, lr}
		xSemaphoreGive( *sem );
    24c4:	2300      	movs	r3, #0
    24c6:	461a      	mov	r2, r3
    24c8:	4619      	mov	r1, r3
    24ca:	6800      	ldr	r0, [r0, #0]
    24cc:	4c01      	ldr	r4, [pc, #4]	; (24d4 <sys_sem_signal+0x14>)
    24ce:	47a0      	blx	r4
    24d0:	bd10      	pop	{r4, pc}
    24d2:	4770      	bx	lr
    24d4:	0000a135 	.word	0x0000a135

000024d8 <sys_arch_sem_wait>:
	portTickType TickStop;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (sem != NULL) {
    24d8:	b330      	cbz	r0, 2528 <sys_arch_sem_wait+0x50>
{
    24da:	b570      	push	{r4, r5, r6, lr}
    24dc:	4605      	mov	r5, r0
    24de:	460c      	mov	r4, r1
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (0 == TickElapsed) {
    24e0:	b991      	cbnz	r1, 2508 <sys_arch_sem_wait+0x30>
			TickStart = xTaskGetTickCount();
    24e2:	4b13      	ldr	r3, [pc, #76]	; (2530 <sys_arch_sem_wait+0x58>)
    24e4:	4798      	blx	r3
    24e6:	4606      	mov	r6, r0
			/* If timeout=0, then the function should block indefinitely */
			while (pdFALSE == xSemaphoreTake( *sem,	SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
    24e8:	2300      	movs	r3, #0
    24ea:	f242 7210 	movw	r2, #10000	; 0x2710
    24ee:	4619      	mov	r1, r3
    24f0:	6828      	ldr	r0, [r5, #0]
    24f2:	4c10      	ldr	r4, [pc, #64]	; (2534 <sys_arch_sem_wait+0x5c>)
    24f4:	47a0      	blx	r4
    24f6:	2800      	cmp	r0, #0
    24f8:	d0f6      	beq.n	24e8 <sys_arch_sem_wait+0x10>
			}
		}

		/* If the function acquires the semaphore, it should return how
		  many milliseconds expired while waiting for the semaphore */
		TickStop = xTaskGetTickCount();
    24fa:	4b0d      	ldr	r3, [pc, #52]	; (2530 <sys_arch_sem_wait+0x58>)
    24fc:	4798      	blx	r3
		/* Take care of wrap-around */
		if (TickStop >= TickStart) {
    24fe:	4286      	cmp	r6, r0
    2500:	d910      	bls.n	2524 <sys_arch_sem_wait+0x4c>
			TickElapsed = TickStop - TickStart;
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
    2502:	1b80      	subs	r0, r0, r6
    2504:	3801      	subs	r0, #1
    2506:	bd70      	pop	{r4, r5, r6, pc}
			TickStart = xTaskGetTickCount();
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <sys_arch_sem_wait+0x58>)
    250a:	4798      	blx	r3
    250c:	4606      	mov	r6, r0
			if (pdFALSE == xSemaphoreTake( *sem, TickElapsed )) {
    250e:	2300      	movs	r3, #0
    2510:	4622      	mov	r2, r4
    2512:	4619      	mov	r1, r3
    2514:	6828      	ldr	r0, [r5, #0]
    2516:	4c07      	ldr	r4, [pc, #28]	; (2534 <sys_arch_sem_wait+0x5c>)
    2518:	47a0      	blx	r4
    251a:	2800      	cmp	r0, #0
    251c:	d1ed      	bne.n	24fa <sys_arch_sem_wait+0x22>
				return(SYS_ARCH_TIMEOUT);
    251e:	f04f 30ff 	mov.w	r0, #4294967295

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
	}
}
    2522:	bd70      	pop	{r4, r5, r6, pc}
			TickElapsed = TickStop - TickStart;
    2524:	1b80      	subs	r0, r0, r6
    2526:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
    2528:	f04f 30ff 	mov.w	r0, #4294967295
    252c:	4770      	bx	lr
    252e:	bf00      	nop
    2530:	0000aa8d 	.word	0x0000aa8d
    2534:	0000a4ed 	.word	0x0000a4ed

00002538 <sys_sem_valid>:
 * \return Semaphore number on valid, 0 for invalid.
 */
int sys_sem_valid(sys_sem_t *sem)
{
	return ((int)(*sem));
}
    2538:	6800      	ldr	r0, [r0, #0]
    253a:	4770      	bx	lr

0000253c <sys_sem_set_invalid>:
 *
 * \param sem Pointer to the semaphore.
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
	*sem = NULL;
    253c:	2300      	movs	r3, #0
    253e:	6003      	str	r3, [r0, #0]
    2540:	4770      	bx	lr
	...

00002544 <sys_mbox_new>:
err_t sys_mbox_new(sys_mbox_t *mBoxNew, int size )
{
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mBoxNew != NULL) {
    2544:	b148      	cbz	r0, 255a <sys_mbox_new+0x16>
{
    2546:	b510      	push	{r4, lr}
    2548:	4604      	mov	r4, r0
    254a:	4608      	mov	r0, r1
		*mBoxNew = xQueueCreate( size, sizeof(void *));
    254c:	2200      	movs	r2, #0
    254e:	2104      	movs	r1, #4
    2550:	4b03      	ldr	r3, [pc, #12]	; (2560 <sys_mbox_new+0x1c>)
    2552:	4798      	blx	r3
    2554:	6020      	str	r0, [r4, #0]
				lwip_stats.sys.mbox.max	= lwip_stats.sys.mbox.used;
			}
		}

  #endif /* SYS_STATS */
		err_mbox = ERR_OK;
    2556:	2000      	movs	r0, #0
    2558:	bd10      	pop	{r4, pc}
	err_t err_mbox = ERR_MEM;
    255a:	f04f 30ff 	mov.w	r0, #4294967295
    255e:	4770      	bx	lr
    2560:	0000a065 	.word	0x0000a065

00002564 <sys_mbox_free>:
 * \param mbox Pointer to the new mailbox.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
	/* Sanity check */
	if (mbox != NULL) {
    2564:	b128      	cbz	r0, 2572 <sys_mbox_free+0xe>
{
    2566:	b508      	push	{r3, lr}
		if (SYS_MBOX_NULL != *mbox) {
    2568:	6800      	ldr	r0, [r0, #0]
    256a:	b108      	cbz	r0, 2570 <sys_mbox_free+0xc>
  #if SYS_STATS
			lwip_stats.sys.mbox.used--;
  #endif /* SYS_STATS */
			vQueueDelete( *mbox );
    256c:	4b01      	ldr	r3, [pc, #4]	; (2574 <sys_mbox_free+0x10>)
    256e:	4798      	blx	r3
    2570:	bd08      	pop	{r3, pc}
    2572:	4770      	bx	lr
    2574:	0000a6b5 	.word	0x0000a6b5

00002578 <sys_mbox_post>:
 *
 * \param mbox Pointer to the mailbox.
 * \param msg Pointer to the message to be post.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
    2578:	b530      	push	{r4, r5, lr}
    257a:	b083      	sub	sp, #12
    257c:	9101      	str	r1, [sp, #4]
	/* Sanit check */
	if (mbox != NULL) {
    257e:	4605      	mov	r5, r0
    2580:	b140      	cbz	r0, 2594 <sys_mbox_post+0x1c>
		while (pdTRUE != xQueueSend( *mbox, &msg, SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
    2582:	2300      	movs	r3, #0
    2584:	f242 7210 	movw	r2, #10000	; 0x2710
    2588:	a901      	add	r1, sp, #4
    258a:	6828      	ldr	r0, [r5, #0]
    258c:	4c02      	ldr	r4, [pc, #8]	; (2598 <sys_mbox_post+0x20>)
    258e:	47a0      	blx	r4
    2590:	2801      	cmp	r0, #1
    2592:	d1f6      	bne.n	2582 <sys_mbox_post+0xa>
		}
	}
}
    2594:	b003      	add	sp, #12
    2596:	bd30      	pop	{r4, r5, pc}
    2598:	0000a135 	.word	0x0000a135

0000259c <sys_mbox_trypost>:
 * \param msg Pointer to the message to be post.
 *
 * \return ERR_MEM if the mailbox is full otherwise ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
    259c:	b510      	push	{r4, lr}
    259e:	b084      	sub	sp, #16
    25a0:	9101      	str	r1, [sp, #4]
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mbox != NULL) {
    25a2:	b348      	cbz	r0, 25f8 <sys_mbox_trypost+0x5c>
		if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
    25a4:	4b16      	ldr	r3, [pc, #88]	; (2600 <sys_mbox_trypost+0x64>)
    25a6:	685b      	ldr	r3, [r3, #4]
    25a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    25ac:	b1bb      	cbz	r3, 25de <sys_mbox_trypost+0x42>
			portBASE_TYPE task_woken = 0;
    25ae:	2300      	movs	r3, #0
    25b0:	aa04      	add	r2, sp, #16
    25b2:	f842 3d04 	str.w	r3, [r2, #-4]!
			if (errQUEUE_FULL != xQueueSendFromISR( *mbox, &msg, &task_woken )) {
    25b6:	a901      	add	r1, sp, #4
    25b8:	6800      	ldr	r0, [r0, #0]
    25ba:	4c12      	ldr	r4, [pc, #72]	; (2604 <sys_mbox_trypost+0x68>)
    25bc:	47a0      	blx	r4
    25be:	b960      	cbnz	r0, 25da <sys_mbox_trypost+0x3e>
	err_t err_mbox = ERR_MEM;
    25c0:	f04f 30ff 	mov.w	r0, #4294967295
				err_mbox = ERR_OK;
			}
			portEND_SWITCHING_ISR(task_woken);
    25c4:	9b03      	ldr	r3, [sp, #12]
    25c6:	b193      	cbz	r3, 25ee <sys_mbox_trypost+0x52>
    25c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    25cc:	4b0e      	ldr	r3, [pc, #56]	; (2608 <sys_mbox_trypost+0x6c>)
    25ce:	601a      	str	r2, [r3, #0]
    25d0:	f3bf 8f4f 	dsb	sy
    25d4:	f3bf 8f6f 	isb	sy
    25d8:	e009      	b.n	25ee <sys_mbox_trypost+0x52>
				err_mbox = ERR_OK;
    25da:	2000      	movs	r0, #0
    25dc:	e7f2      	b.n	25c4 <sys_mbox_trypost+0x28>
		} else {
			if (errQUEUE_FULL != xQueueSend( *mbox, &msg, 0 )) {
    25de:	2300      	movs	r3, #0
    25e0:	461a      	mov	r2, r3
    25e2:	a901      	add	r1, sp, #4
    25e4:	6800      	ldr	r0, [r0, #0]
    25e6:	4c09      	ldr	r4, [pc, #36]	; (260c <sys_mbox_trypost+0x70>)
    25e8:	47a0      	blx	r4
    25ea:	b110      	cbz	r0, 25f2 <sys_mbox_trypost+0x56>
				err_mbox = ERR_OK;
    25ec:	2000      	movs	r0, #0
			}
		}
	}
	return (err_mbox);
}
    25ee:	b004      	add	sp, #16
    25f0:	bd10      	pop	{r4, pc}
	err_t err_mbox = ERR_MEM;
    25f2:	f04f 30ff 	mov.w	r0, #4294967295
    25f6:	e7fa      	b.n	25ee <sys_mbox_trypost+0x52>
    25f8:	f04f 30ff 	mov.w	r0, #4294967295
    25fc:	e7f7      	b.n	25ee <sys_mbox_trypost+0x52>
    25fe:	bf00      	nop
    2600:	e000ed00 	.word	0xe000ed00
    2604:	0000a309 	.word	0x0000a309
    2608:	e000ed04 	.word	0xe000ed04
    260c:	0000a135 	.word	0x0000a135

00002610 <sys_arch_mbox_fetch>:
	void *tempoptr;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (mbox != NULL) {
    2610:	2800      	cmp	r0, #0
    2612:	d02e      	beq.n	2672 <sys_arch_mbox_fetch+0x62>
{
    2614:	b5f0      	push	{r4, r5, r6, r7, lr}
    2616:	b083      	sub	sp, #12
    2618:	460d      	mov	r5, r1
    261a:	4614      	mov	r4, r2
    261c:	4606      	mov	r6, r0
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (msg == NULL) {
    261e:	b1a1      	cbz	r1, 264a <sys_arch_mbox_fetch+0x3a>
			msg = &tempoptr;
		}

		/* NOTE: INCLUDE_xTaskGetSchedulerState must be set to 1 in
		 * FreeRTOSConfig.h for xTaskGetTickCount() to be available */
		if (0 == TickElapsed) {
    2620:	b9ac      	cbnz	r4, 264e <sys_arch_mbox_fetch+0x3e>
			TickStart = xTaskGetTickCount();
    2622:	4b15      	ldr	r3, [pc, #84]	; (2678 <sys_arch_mbox_fetch+0x68>)
    2624:	4798      	blx	r3
    2626:	4607      	mov	r7, r0
			/* If "timeout" is 0, the thread should be blocked until
			 * a message arrives */
			while (pdFALSE == xQueueReceive( *mbox, &(*msg),
    2628:	2300      	movs	r3, #0
    262a:	f242 7210 	movw	r2, #10000	; 0x2710
    262e:	4629      	mov	r1, r5
    2630:	6830      	ldr	r0, [r6, #0]
    2632:	4c12      	ldr	r4, [pc, #72]	; (267c <sys_arch_mbox_fetch+0x6c>)
    2634:	47a0      	blx	r4
    2636:	2800      	cmp	r0, #0
    2638:	d0f6      	beq.n	2628 <sys_arch_mbox_fetch+0x18>
			}
		}

		/* If the function gets a msg, it should return the number of ms
		 * spent waiting. */
		TickStop = xTaskGetTickCount();
    263a:	4b0f      	ldr	r3, [pc, #60]	; (2678 <sys_arch_mbox_fetch+0x68>)
    263c:	4798      	blx	r3
		/* Take care of wrap-around. */
		if (TickStop >= TickStart) {
    263e:	4287      	cmp	r7, r0
    2640:	d915      	bls.n	266e <sys_arch_mbox_fetch+0x5e>
			TickElapsed = TickStop - TickStart;
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
    2642:	1bc0      	subs	r0, r0, r7
    2644:	3801      	subs	r0, #1

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
	}
}
    2646:	b003      	add	sp, #12
    2648:	bdf0      	pop	{r4, r5, r6, r7, pc}
			msg = &tempoptr;
    264a:	ad01      	add	r5, sp, #4
    264c:	e7e8      	b.n	2620 <sys_arch_mbox_fetch+0x10>
			TickStart = xTaskGetTickCount();
    264e:	4b0a      	ldr	r3, [pc, #40]	; (2678 <sys_arch_mbox_fetch+0x68>)
    2650:	4798      	blx	r3
    2652:	4607      	mov	r7, r0
			if (pdFALSE == xQueueReceive( *mbox, &(*msg), TickElapsed )) {
    2654:	2300      	movs	r3, #0
    2656:	4622      	mov	r2, r4
    2658:	4629      	mov	r1, r5
    265a:	6830      	ldr	r0, [r6, #0]
    265c:	4c07      	ldr	r4, [pc, #28]	; (267c <sys_arch_mbox_fetch+0x6c>)
    265e:	47a0      	blx	r4
    2660:	2800      	cmp	r0, #0
    2662:	d1ea      	bne.n	263a <sys_arch_mbox_fetch+0x2a>
				*msg = NULL;
    2664:	2300      	movs	r3, #0
    2666:	602b      	str	r3, [r5, #0]
				return(SYS_ARCH_TIMEOUT);
    2668:	f04f 30ff 	mov.w	r0, #4294967295
    266c:	e7eb      	b.n	2646 <sys_arch_mbox_fetch+0x36>
			TickElapsed = TickStop - TickStart;
    266e:	1bc0      	subs	r0, r0, r7
    2670:	e7e9      	b.n	2646 <sys_arch_mbox_fetch+0x36>
		return ERR_MEM;
    2672:	f04f 30ff 	mov.w	r0, #4294967295
    2676:	4770      	bx	lr
    2678:	0000aa8d 	.word	0x0000aa8d
    267c:	0000a4ed 	.word	0x0000a4ed

00002680 <sys_arch_mbox_tryfetch>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
	void *tempoptr;

	/* Sanity check */
	if (mbox != NULL) {
    2680:	b178      	cbz	r0, 26a2 <sys_arch_mbox_tryfetch+0x22>
{
    2682:	b510      	push	{r4, lr}
    2684:	b082      	sub	sp, #8
    2686:	4604      	mov	r4, r0
		if (msg == NULL) {
    2688:	b149      	cbz	r1, 269e <sys_arch_mbox_tryfetch+0x1e>
			msg = &tempoptr;
		}

		if (pdFALSE == xQueueReceive( *mbox, &(*msg), 0 )) {
    268a:	2300      	movs	r3, #0
    268c:	461a      	mov	r2, r3
    268e:	6820      	ldr	r0, [r4, #0]
    2690:	4c06      	ldr	r4, [pc, #24]	; (26ac <sys_arch_mbox_tryfetch+0x2c>)
    2692:	47a0      	blx	r4
    2694:	b940      	cbnz	r0, 26a8 <sys_arch_mbox_tryfetch+0x28>
			/* if a message is not present in the mailbox, it
			 * immediately returns with */
			/* the code SYS_MBOX_EMPTY. */
			return(SYS_MBOX_EMPTY);
    2696:	f04f 30ff 	mov.w	r0, #4294967295
		/* On success 0 is returned. */
		return(0);
	} else {
		return(SYS_MBOX_EMPTY);
	}
}
    269a:	b002      	add	sp, #8
    269c:	bd10      	pop	{r4, pc}
			msg = &tempoptr;
    269e:	a901      	add	r1, sp, #4
    26a0:	e7f3      	b.n	268a <sys_arch_mbox_tryfetch+0xa>
		return(SYS_MBOX_EMPTY);
    26a2:	f04f 30ff 	mov.w	r0, #4294967295
    26a6:	4770      	bx	lr
		return(0);
    26a8:	2000      	movs	r0, #0
    26aa:	e7f6      	b.n	269a <sys_arch_mbox_tryfetch+0x1a>
    26ac:	0000a4ed 	.word	0x0000a4ed

000026b0 <sys_mbox_valid>:
 * \return Mailbox for valid, 0 for invalid.
 */
int sys_mbox_valid(sys_mbox_t *mbox)
{
	return ((int)(*mbox));
}
    26b0:	6800      	ldr	r0, [r0, #0]
    26b2:	4770      	bx	lr

000026b4 <sys_mbox_set_invalid>:
 *
 * \param mbox Pointer to the mailbox.
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
	*mbox = NULL;
    26b4:	2300      	movs	r3, #0
    26b6:	6003      	str	r3, [r0, #0]
    26b8:	4770      	bx	lr
	...

000026bc <sys_thread_new>:
 *
 * \return The id of the new thread.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg,
		int stacksize, int prio)
{
    26bc:	b510      	push	{r4, lr}
    26be:	b086      	sub	sp, #24
    26c0:	460c      	mov	r4, r1
	sys_thread_t newthread;
	portBASE_TYPE result;
	SYS_ARCH_DECL_PROTECT(protectionLevel);

	result = xTaskCreate( thread, (signed portCHAR *)name, stacksize, arg,
    26c2:	b299      	uxth	r1, r3
    26c4:	2300      	movs	r3, #0
    26c6:	9303      	str	r3, [sp, #12]
    26c8:	9302      	str	r3, [sp, #8]
    26ca:	ab05      	add	r3, sp, #20
    26cc:	9301      	str	r3, [sp, #4]
    26ce:	9b08      	ldr	r3, [sp, #32]
    26d0:	9300      	str	r3, [sp, #0]
    26d2:	4613      	mov	r3, r2
    26d4:	460a      	mov	r2, r1
    26d6:	4601      	mov	r1, r0
    26d8:	4620      	mov	r0, r4
    26da:	4c07      	ldr	r4, [pc, #28]	; (26f8 <sys_thread_new+0x3c>)
    26dc:	47a0      	blx	r4
			prio, &newthread );

	/* Need to protect this -- preemption here could be a problem! */
	SYS_ARCH_PROTECT(protectionLevel);
	if (pdPASS == result) {
    26de:	2801      	cmp	r0, #1
    26e0:	d004      	beq.n	26ec <sys_thread_new+0x30>
		Threads_TimeoutsList[NbActiveThreads++].pid = newthread;
	} else {
		newthread = NULL;
    26e2:	2300      	movs	r3, #0
    26e4:	9305      	str	r3, [sp, #20]
	}

	SYS_ARCH_UNPROTECT(protectionLevel);

	return(newthread);
}
    26e6:	9805      	ldr	r0, [sp, #20]
    26e8:	b006      	add	sp, #24
    26ea:	bd10      	pop	{r4, pc}
		Threads_TimeoutsList[NbActiveThreads++].pid = newthread;
    26ec:	4a03      	ldr	r2, [pc, #12]	; (26fc <sys_thread_new+0x40>)
    26ee:	8813      	ldrh	r3, [r2, #0]
    26f0:	3301      	adds	r3, #1
    26f2:	8013      	strh	r3, [r2, #0]
    26f4:	e7f7      	b.n	26e6 <sys_thread_new+0x2a>
    26f6:	bf00      	nop
    26f8:	0000a8a1 	.word	0x0000a8a1
    26fc:	20001574 	.word	0x20001574

00002700 <netconn_recv_data>:
 * @param new_buf pointer where a new pbuf/netbuf is stored when received data
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t netconn_recv_data(struct netconn *conn, void **new_buf)
{
    2700:	b570      	push	{r4, r5, r6, lr}
    2702:	b088      	sub	sp, #32
	void *buf = NULL;
    2704:	2300      	movs	r3, #0
    2706:	9307      	str	r3, [sp, #28]
	err_t err;
#if LWIP_TCP
	struct api_msg msg;
#endif /* LWIP_TCP */

	LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
    2708:	b159      	cbz	r1, 2722 <netconn_recv_data+0x22>
    270a:	460d      	mov	r5, r1
	*new_buf = NULL;
    270c:	2300      	movs	r3, #0
    270e:	600b      	str	r3, [r1, #0]
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL), return ERR_ARG;);
    2710:	b140      	cbz	r0, 2724 <netconn_recv_data+0x24>
    2712:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
    2714:	f100 0610 	add.w	r6, r0, #16
    2718:	4630      	mov	r0, r6
    271a:	4b25      	ldr	r3, [pc, #148]	; (27b0 <netconn_recv_data+0xb0>)
    271c:	4798      	blx	r3
    271e:	b910      	cbnz	r0, 2726 <netconn_recv_data+0x26>
    2720:	e7fe      	b.n	2720 <netconn_recv_data+0x20>
    2722:	e7fe      	b.n	2722 <netconn_recv_data+0x22>
    2724:	e7fe      	b.n	2724 <netconn_recv_data+0x24>

	err = conn->last_err;
    2726:	f994 0008 	ldrsb.w	r0, [r4, #8]
	if (ERR_IS_FATAL(err)) {
    272a:	f110 0f09 	cmn.w	r0, #9
    272e:	da01      	bge.n	2734 <netconn_recv_data+0x34>
	LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%" U16_F "\n", buf, len));

	*new_buf = buf;
	/* don't set conn->last_err: it's only ERR_OK, anyway */
	return ERR_OK;
}
    2730:	b008      	add	sp, #32
    2732:	bd70      	pop	{r4, r5, r6, pc}
	sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
    2734:	2200      	movs	r2, #0
    2736:	a907      	add	r1, sp, #28
    2738:	4630      	mov	r0, r6
    273a:	4b1e      	ldr	r3, [pc, #120]	; (27b4 <netconn_recv_data+0xb4>)
    273c:	4798      	blx	r3
	if (conn->type == NETCONN_TCP)
    273e:	7823      	ldrb	r3, [r4, #0]
    2740:	2b10      	cmp	r3, #16
    2742:	d12e      	bne.n	27a2 <netconn_recv_data+0xa2>
		if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
    2744:	7f23      	ldrb	r3, [r4, #28]
    2746:	f013 0f08 	tst.w	r3, #8
    274a:	d001      	beq.n	2750 <netconn_recv_data+0x50>
    274c:	9b07      	ldr	r3, [sp, #28]
    274e:	b94b      	cbnz	r3, 2764 <netconn_recv_data+0x64>
			msg.function = do_recv;
    2750:	4b19      	ldr	r3, [pc, #100]	; (27b8 <netconn_recv_data+0xb8>)
    2752:	9301      	str	r3, [sp, #4]
			msg.msg.conn = conn;
    2754:	9402      	str	r4, [sp, #8]
			if (buf != NULL) {
    2756:	9b07      	ldr	r3, [sp, #28]
    2758:	b1b3      	cbz	r3, 2788 <netconn_recv_data+0x88>
				msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
    275a:	891b      	ldrh	r3, [r3, #8]
    275c:	9304      	str	r3, [sp, #16]
			TCPIP_APIMSG(&msg);
    275e:	a801      	add	r0, sp, #4
    2760:	4b16      	ldr	r3, [pc, #88]	; (27bc <netconn_recv_data+0xbc>)
    2762:	4798      	blx	r3
		if (buf == NULL) {
    2764:	9b07      	ldr	r3, [sp, #28]
    2766:	b993      	cbnz	r3, 278e <netconn_recv_data+0x8e>
			API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
    2768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    276a:	b11b      	cbz	r3, 2774 <netconn_recv_data+0x74>
    276c:	2200      	movs	r2, #0
    276e:	2101      	movs	r1, #1
    2770:	4620      	mov	r0, r4
    2772:	4798      	blx	r3
			NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
    2774:	f994 3008 	ldrsb.w	r3, [r4, #8]
    2778:	f113 0f09 	cmn.w	r3, #9
    277c:	db15      	blt.n	27aa <netconn_recv_data+0xaa>
    277e:	23f4      	movs	r3, #244	; 0xf4
    2780:	7223      	strb	r3, [r4, #8]
			return ERR_CLSD;
    2782:	f06f 000b 	mvn.w	r0, #11
    2786:	e7d3      	b.n	2730 <netconn_recv_data+0x30>
				msg.msg.msg.r.len = 1;
    2788:	2301      	movs	r3, #1
    278a:	9304      	str	r3, [sp, #16]
    278c:	e7e7      	b.n	275e <netconn_recv_data+0x5e>
		len = ((struct pbuf *)buf)->tot_len;
    278e:	891a      	ldrh	r2, [r3, #8]
	API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
    2790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2792:	b113      	cbz	r3, 279a <netconn_recv_data+0x9a>
    2794:	2101      	movs	r1, #1
    2796:	4620      	mov	r0, r4
    2798:	4798      	blx	r3
	*new_buf = buf;
    279a:	9b07      	ldr	r3, [sp, #28]
    279c:	602b      	str	r3, [r5, #0]
	return ERR_OK;
    279e:	2000      	movs	r0, #0
    27a0:	e7c6      	b.n	2730 <netconn_recv_data+0x30>
		len = netbuf_len((struct netbuf *)buf);
    27a2:	9b07      	ldr	r3, [sp, #28]
    27a4:	681b      	ldr	r3, [r3, #0]
    27a6:	891a      	ldrh	r2, [r3, #8]
    27a8:	e7f2      	b.n	2790 <netconn_recv_data+0x90>
			return ERR_CLSD;
    27aa:	f06f 000b 	mvn.w	r0, #11
    27ae:	e7bf      	b.n	2730 <netconn_recv_data+0x30>
    27b0:	000026b1 	.word	0x000026b1
    27b4:	00002611 	.word	0x00002611
    27b8:	00003281 	.word	0x00003281
    27bc:	00003e01 	.word	0x00003e01

000027c0 <netconn_new_with_proto_and_callback>:
{
    27c0:	b530      	push	{r4, r5, lr}
    27c2:	b087      	sub	sp, #28
    27c4:	460d      	mov	r5, r1
	conn = netconn_alloc(t, callback);
    27c6:	4611      	mov	r1, r2
    27c8:	4b0e      	ldr	r3, [pc, #56]	; (2804 <netconn_new_with_proto_and_callback+0x44>)
    27ca:	4798      	blx	r3
	if (conn != NULL) {
    27cc:	4604      	mov	r4, r0
    27ce:	b140      	cbz	r0, 27e2 <netconn_new_with_proto_and_callback+0x22>
		msg.function        = do_newconn;
    27d0:	4b0d      	ldr	r3, [pc, #52]	; (2808 <netconn_new_with_proto_and_callback+0x48>)
    27d2:	9300      	str	r3, [sp, #0]
		msg.msg.msg.n.proto = proto;
    27d4:	f88d 500c 	strb.w	r5, [sp, #12]
		msg.msg.conn        = conn;
    27d8:	9001      	str	r0, [sp, #4]
		if (TCPIP_APIMSG(&msg) != ERR_OK) {
    27da:	4668      	mov	r0, sp
    27dc:	4b0b      	ldr	r3, [pc, #44]	; (280c <netconn_new_with_proto_and_callback+0x4c>)
    27de:	4798      	blx	r3
    27e0:	b910      	cbnz	r0, 27e8 <netconn_new_with_proto_and_callback+0x28>
}
    27e2:	4620      	mov	r0, r4
    27e4:	b007      	add	sp, #28
    27e6:	bd30      	pop	{r4, r5, pc}
			sys_sem_free(&conn->op_completed);
    27e8:	f104 000c 	add.w	r0, r4, #12
    27ec:	4b08      	ldr	r3, [pc, #32]	; (2810 <netconn_new_with_proto_and_callback+0x50>)
    27ee:	4798      	blx	r3
			sys_mbox_free(&conn->recvmbox);
    27f0:	f104 0010 	add.w	r0, r4, #16
    27f4:	4b07      	ldr	r3, [pc, #28]	; (2814 <netconn_new_with_proto_and_callback+0x54>)
    27f6:	4798      	blx	r3
			memp_free(MEMP_NETCONN, conn);
    27f8:	4621      	mov	r1, r4
    27fa:	2007      	movs	r0, #7
    27fc:	4b06      	ldr	r3, [pc, #24]	; (2818 <netconn_new_with_proto_and_callback+0x58>)
    27fe:	4798      	blx	r3
			return NULL;
    2800:	2400      	movs	r4, #0
    2802:	e7ee      	b.n	27e2 <netconn_new_with_proto_and_callback+0x22>
    2804:	00002fcd 	.word	0x00002fcd
    2808:	00002fa5 	.word	0x00002fa5
    280c:	00003e01 	.word	0x00003e01
    2810:	000024ad 	.word	0x000024ad
    2814:	00002565 	.word	0x00002565
    2818:	000051fd 	.word	0x000051fd

0000281c <netconn_delete>:
	if (conn == NULL) {
    281c:	b170      	cbz	r0, 283c <netconn_delete+0x20>
{
    281e:	b510      	push	{r4, lr}
    2820:	b086      	sub	sp, #24
    2822:	4604      	mov	r4, r0
	msg.function = do_delconn;
    2824:	4b06      	ldr	r3, [pc, #24]	; (2840 <netconn_delete+0x24>)
    2826:	9300      	str	r3, [sp, #0]
	msg.msg.conn = conn;
    2828:	9001      	str	r0, [sp, #4]
	tcpip_apimsg(&msg);
    282a:	4668      	mov	r0, sp
    282c:	4b05      	ldr	r3, [pc, #20]	; (2844 <netconn_delete+0x28>)
    282e:	4798      	blx	r3
	netconn_free(conn);
    2830:	4620      	mov	r0, r4
    2832:	4b05      	ldr	r3, [pc, #20]	; (2848 <netconn_delete+0x2c>)
    2834:	4798      	blx	r3
}
    2836:	2000      	movs	r0, #0
    2838:	b006      	add	sp, #24
    283a:	bd10      	pop	{r4, pc}
    283c:	2000      	movs	r0, #0
    283e:	4770      	bx	lr
    2840:	00003131 	.word	0x00003131
    2844:	00003e01 	.word	0x00003e01
    2848:	00003045 	.word	0x00003045

0000284c <netconn_getaddr>:
	LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
    284c:	b1b0      	cbz	r0, 287c <netconn_getaddr+0x30>
{
    284e:	b510      	push	{r4, lr}
    2850:	b086      	sub	sp, #24
    2852:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
    2854:	b199      	cbz	r1, 287e <netconn_getaddr+0x32>
	LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
    2856:	b19a      	cbz	r2, 2880 <netconn_getaddr+0x34>
	msg.function          = do_getaddr;
    2858:	480a      	ldr	r0, [pc, #40]	; (2884 <netconn_getaddr+0x38>)
    285a:	9000      	str	r0, [sp, #0]
	msg.msg.conn          = conn;
    285c:	9401      	str	r4, [sp, #4]
	msg.msg.msg.ad.ipaddr = addr;
    285e:	9103      	str	r1, [sp, #12]
	msg.msg.msg.ad.port   = port;
    2860:	9204      	str	r2, [sp, #16]
	msg.msg.msg.ad.local  = local;
    2862:	f88d 3014 	strb.w	r3, [sp, #20]
	err                   = TCPIP_APIMSG(&msg);
    2866:	4668      	mov	r0, sp
    2868:	4b07      	ldr	r3, [pc, #28]	; (2888 <netconn_getaddr+0x3c>)
    286a:	4798      	blx	r3
	NETCONN_SET_SAFE_ERR(conn, err);
    286c:	f994 3008 	ldrsb.w	r3, [r4, #8]
    2870:	f113 0f09 	cmn.w	r3, #9
    2874:	db00      	blt.n	2878 <netconn_getaddr+0x2c>
    2876:	7220      	strb	r0, [r4, #8]
}
    2878:	b006      	add	sp, #24
    287a:	bd10      	pop	{r4, pc}
    287c:	e7fe      	b.n	287c <netconn_getaddr+0x30>
    287e:	e7fe      	b.n	287e <netconn_getaddr+0x32>
    2880:	e7fe      	b.n	2880 <netconn_getaddr+0x34>
    2882:	bf00      	nop
    2884:	00003321 	.word	0x00003321
    2888:	00003e01 	.word	0x00003e01

0000288c <netconn_bind>:
	LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
    288c:	b198      	cbz	r0, 28b6 <netconn_bind+0x2a>
{
    288e:	b510      	push	{r4, lr}
    2890:	b086      	sub	sp, #24
    2892:	4604      	mov	r4, r0
	msg.function          = do_bind;
    2894:	4b08      	ldr	r3, [pc, #32]	; (28b8 <netconn_bind+0x2c>)
    2896:	9300      	str	r3, [sp, #0]
	msg.msg.conn          = conn;
    2898:	9001      	str	r0, [sp, #4]
	msg.msg.msg.bc.ipaddr = addr;
    289a:	9103      	str	r1, [sp, #12]
	msg.msg.msg.bc.port   = port;
    289c:	f8ad 2010 	strh.w	r2, [sp, #16]
	err                   = TCPIP_APIMSG(&msg);
    28a0:	4668      	mov	r0, sp
    28a2:	4b06      	ldr	r3, [pc, #24]	; (28bc <netconn_bind+0x30>)
    28a4:	4798      	blx	r3
	NETCONN_SET_SAFE_ERR(conn, err);
    28a6:	f994 3008 	ldrsb.w	r3, [r4, #8]
    28aa:	f113 0f09 	cmn.w	r3, #9
    28ae:	db00      	blt.n	28b2 <netconn_bind+0x26>
    28b0:	7220      	strb	r0, [r4, #8]
}
    28b2:	b006      	add	sp, #24
    28b4:	bd10      	pop	{r4, pc}
    28b6:	e7fe      	b.n	28b6 <netconn_bind+0x2a>
    28b8:	000031cd 	.word	0x000031cd
    28bc:	00003e01 	.word	0x00003e01

000028c0 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) && netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
    28c0:	b138      	cbz	r0, 28d2 <netconn_recv_tcp_pbuf+0x12>
{
    28c2:	b508      	push	{r3, lr}
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) && netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
    28c4:	7802      	ldrb	r2, [r0, #0]
    28c6:	2a10      	cmp	r2, #16
    28c8:	d000      	beq.n	28cc <netconn_recv_tcp_pbuf+0xc>
    28ca:	e7fe      	b.n	28ca <netconn_recv_tcp_pbuf+0xa>

	return netconn_recv_data(conn, (void **)new_buf);
    28cc:	4b01      	ldr	r3, [pc, #4]	; (28d4 <netconn_recv_tcp_pbuf+0x14>)
    28ce:	4798      	blx	r3
}
    28d0:	bd08      	pop	{r3, pc}
    28d2:	e7fe      	b.n	28d2 <netconn_recv_tcp_pbuf+0x12>
    28d4:	00002701 	.word	0x00002701

000028d8 <netconn_recv>:
#if LWIP_TCP
	struct netbuf *buf = NULL;
	err_t          err;
#endif /* LWIP_TCP */

	LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
    28d8:	b159      	cbz	r1, 28f2 <netconn_recv+0x1a>
{
    28da:	b570      	push	{r4, r5, r6, lr}
    28dc:	b082      	sub	sp, #8
    28de:	460e      	mov	r6, r1
	*new_buf = NULL;
    28e0:	2300      	movs	r3, #0
    28e2:	600b      	str	r3, [r1, #0]
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL), return ERR_ARG;);
    28e4:	b130      	cbz	r0, 28f4 <netconn_recv+0x1c>
    28e6:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
    28e8:	3010      	adds	r0, #16
    28ea:	4b1c      	ldr	r3, [pc, #112]	; (295c <netconn_recv+0x84>)
    28ec:	4798      	blx	r3
    28ee:	b910      	cbnz	r0, 28f6 <netconn_recv+0x1e>
    28f0:	e7fe      	b.n	28f0 <netconn_recv+0x18>
    28f2:	e7fe      	b.n	28f2 <netconn_recv+0x1a>
    28f4:	e7fe      	b.n	28f4 <netconn_recv+0x1c>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
	if (conn->type == NETCONN_TCP)
    28f6:	7823      	ldrb	r3, [r4, #0]
    28f8:	2b10      	cmp	r3, #16
    28fa:	d007      	beq.n	290c <netconn_recv+0x34>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
	else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
	{
#if (LWIP_UDP || LWIP_RAW)
		return netconn_recv_data(conn, (void **)new_buf);
    28fc:	4631      	mov	r1, r6
    28fe:	4620      	mov	r0, r4
    2900:	4b17      	ldr	r3, [pc, #92]	; (2960 <netconn_recv+0x88>)
    2902:	4798      	blx	r3
    2904:	4604      	mov	r4, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
	}
}
    2906:	4620      	mov	r0, r4
    2908:	b002      	add	sp, #8
    290a:	bd70      	pop	{r4, r5, r6, pc}
		struct pbuf *p = NULL;
    290c:	2300      	movs	r3, #0
    290e:	9301      	str	r3, [sp, #4]
		buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    2910:	2006      	movs	r0, #6
    2912:	4b14      	ldr	r3, [pc, #80]	; (2964 <netconn_recv+0x8c>)
    2914:	4798      	blx	r3
		if (buf == NULL) {
    2916:	4605      	mov	r5, r0
    2918:	b948      	cbnz	r0, 292e <netconn_recv+0x56>
			NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
    291a:	f994 3008 	ldrsb.w	r3, [r4, #8]
    291e:	f113 0f09 	cmn.w	r3, #9
    2922:	db18      	blt.n	2956 <netconn_recv+0x7e>
    2924:	23ff      	movs	r3, #255	; 0xff
    2926:	7223      	strb	r3, [r4, #8]
			return ERR_MEM;
    2928:	f04f 34ff 	mov.w	r4, #4294967295
    292c:	e7eb      	b.n	2906 <netconn_recv+0x2e>
		err = netconn_recv_data(conn, (void **)&p);
    292e:	a901      	add	r1, sp, #4
    2930:	4620      	mov	r0, r4
    2932:	4b0b      	ldr	r3, [pc, #44]	; (2960 <netconn_recv+0x88>)
    2934:	4798      	blx	r3
		if (err != ERR_OK) {
    2936:	4604      	mov	r4, r0
    2938:	b120      	cbz	r0, 2944 <netconn_recv+0x6c>
			memp_free(MEMP_NETBUF, buf);
    293a:	4629      	mov	r1, r5
    293c:	2006      	movs	r0, #6
    293e:	4b0a      	ldr	r3, [pc, #40]	; (2968 <netconn_recv+0x90>)
    2940:	4798      	blx	r3
			return err;
    2942:	e7e0      	b.n	2906 <netconn_recv+0x2e>
		buf->p    = p;
    2944:	9b01      	ldr	r3, [sp, #4]
    2946:	602b      	str	r3, [r5, #0]
		buf->ptr  = p;
    2948:	9b01      	ldr	r3, [sp, #4]
    294a:	606b      	str	r3, [r5, #4]
		buf->port = 0;
    294c:	2300      	movs	r3, #0
    294e:	81ab      	strh	r3, [r5, #12]
		ip_addr_set_any(&buf->addr);
    2950:	60ab      	str	r3, [r5, #8]
		*new_buf = buf;
    2952:	6035      	str	r5, [r6, #0]
		return ERR_OK;
    2954:	e7d7      	b.n	2906 <netconn_recv+0x2e>
			return ERR_MEM;
    2956:	f04f 34ff 	mov.w	r4, #4294967295
    295a:	e7d4      	b.n	2906 <netconn_recv+0x2e>
    295c:	000026b1 	.word	0x000026b1
    2960:	00002701 	.word	0x00002701
    2964:	000051d5 	.word	0x000051d5
    2968:	000051fd 	.word	0x000051fd

0000296c <netconn_recved>:
 * @param length amount of data processed (ATTENTION: this must be accurate!)
 */
void netconn_recved(struct netconn *conn, u32_t length)
{
#if LWIP_TCP
	if ((conn != NULL) && (conn->type == NETCONN_TCP) && (netconn_get_noautorecved(conn))) {
    296c:	b110      	cbz	r0, 2974 <netconn_recved+0x8>
    296e:	7802      	ldrb	r2, [r0, #0]
    2970:	2a10      	cmp	r2, #16
    2972:	d000      	beq.n	2976 <netconn_recved+0xa>
    2974:	4770      	bx	lr
    2976:	7f02      	ldrb	r2, [r0, #28]
    2978:	f012 0f08 	tst.w	r2, #8
    297c:	d0fa      	beq.n	2974 <netconn_recved+0x8>
{
    297e:	b500      	push	{lr}
    2980:	b087      	sub	sp, #28
		struct api_msg msg;
		/* Let the stack know that we have taken the data. */
		/* TODO: Speedup: Don't block and wait for the answer here
		   (to prevent multiple thread-switches). */
		msg.function      = do_recv;
    2982:	4a05      	ldr	r2, [pc, #20]	; (2998 <netconn_recved+0x2c>)
    2984:	9200      	str	r2, [sp, #0]
		msg.msg.conn      = conn;
    2986:	9001      	str	r0, [sp, #4]
		msg.msg.msg.r.len = length;
    2988:	9103      	str	r1, [sp, #12]
		/* don't care for the return value of do_recv */
		TCPIP_APIMSG(&msg);
    298a:	4668      	mov	r0, sp
    298c:	4b03      	ldr	r3, [pc, #12]	; (299c <netconn_recved+0x30>)
    298e:	4798      	blx	r3
	}
#else  /* LWIP_TCP */
	LWIP_UNUSED_ARG(conn);
	LWIP_UNUSED_ARG(length);
#endif /* LWIP_TCP */
}
    2990:	b007      	add	sp, #28
    2992:	f85d fb04 	ldr.w	pc, [sp], #4
    2996:	bf00      	nop
    2998:	00003281 	.word	0x00003281
    299c:	00003e01 	.word	0x00003e01

000029a0 <netconn_send>:
err_t netconn_send(struct netconn *conn, struct netbuf *buf)
{
	struct api_msg msg;
	err_t          err;

	LWIP_ERROR("netconn_send: invalid conn", (conn != NULL), return ERR_ARG;);
    29a0:	b188      	cbz	r0, 29c6 <netconn_send+0x26>
{
    29a2:	b510      	push	{r4, lr}
    29a4:	b086      	sub	sp, #24
    29a6:	4604      	mov	r4, r0

	LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %" U16_F " bytes\n", buf->p->tot_len));
	msg.function  = do_send;
    29a8:	4b07      	ldr	r3, [pc, #28]	; (29c8 <netconn_send+0x28>)
    29aa:	9300      	str	r3, [sp, #0]
	msg.msg.conn  = conn;
    29ac:	9001      	str	r0, [sp, #4]
	msg.msg.msg.b = buf;
    29ae:	9103      	str	r1, [sp, #12]
	err           = TCPIP_APIMSG(&msg);
    29b0:	4668      	mov	r0, sp
    29b2:	4b06      	ldr	r3, [pc, #24]	; (29cc <netconn_send+0x2c>)
    29b4:	4798      	blx	r3

	NETCONN_SET_SAFE_ERR(conn, err);
    29b6:	f994 3008 	ldrsb.w	r3, [r4, #8]
    29ba:	f113 0f09 	cmn.w	r3, #9
    29be:	db00      	blt.n	29c2 <netconn_send+0x22>
    29c0:	7220      	strb	r0, [r4, #8]
	return err;
}
    29c2:	b006      	add	sp, #24
    29c4:	bd10      	pop	{r4, pc}
    29c6:	e7fe      	b.n	29c6 <netconn_send+0x26>
    29c8:	00003225 	.word	0x00003225
    29cc:	00003e01 	.word	0x00003e01

000029d0 <netconn_write_partly>:
 * - NETCONN_DONTBLOCK: only write the data if all dat can be written at once
 * @param bytes_written pointer to a location that receives the number of written bytes
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size, u8_t apiflags, size_t *bytes_written)
{
    29d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29d2:	b087      	sub	sp, #28
    29d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	struct api_msg msg;
	err_t          err;
	u8_t           dontblock;

	LWIP_ERROR("netconn_write: invalid conn", (conn != NULL), return ERR_ARG;);
    29d6:	b120      	cbz	r0, 29e2 <netconn_write_partly+0x12>
    29d8:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_write: invalid conn->type", (conn->type == NETCONN_TCP), return ERR_VAL;);
    29da:	7800      	ldrb	r0, [r0, #0]
    29dc:	2810      	cmp	r0, #16
    29de:	d001      	beq.n	29e4 <netconn_write_partly+0x14>
    29e0:	e7fe      	b.n	29e0 <netconn_write_partly+0x10>
    29e2:	e7fe      	b.n	29e2 <netconn_write_partly+0x12>
	if (size == 0) {
    29e4:	b35a      	cbz	r2, 2a3e <netconn_write_partly+0x6e>
		return ERR_OK;
	}
	dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
    29e6:	7f20      	ldrb	r0, [r4, #28]
    29e8:	f010 0f02 	tst.w	r0, #2
    29ec:	d121      	bne.n	2a32 <netconn_write_partly+0x62>
    29ee:	f013 0f04 	tst.w	r3, #4
    29f2:	d020      	beq.n	2a36 <netconn_write_partly+0x66>
    29f4:	2001      	movs	r0, #1
	if (dontblock && !bytes_written) {
    29f6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    29fa:	b100      	cbz	r0, 29fe <netconn_write_partly+0x2e>
    29fc:	b30e      	cbz	r6, 2a42 <netconn_write_partly+0x72>
    29fe:	4615      	mov	r5, r2
		   it has no way to return the number of bytes written. */
		return ERR_VAL;
	}

	/* non-blocking write sends as much  */
	msg.function           = do_write;
    2a00:	4a11      	ldr	r2, [pc, #68]	; (2a48 <netconn_write_partly+0x78>)
    2a02:	9200      	str	r2, [sp, #0]
	msg.msg.conn           = conn;
    2a04:	9401      	str	r4, [sp, #4]
	msg.msg.msg.w.dataptr  = dataptr;
    2a06:	9103      	str	r1, [sp, #12]
	msg.msg.msg.w.apiflags = apiflags;
    2a08:	f88d 3014 	strb.w	r3, [sp, #20]
	msg.msg.msg.w.len      = size;
    2a0c:	9504      	str	r5, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

	/* For locking the core: this _can_ be delayed on low memory/low send buffer,
	   but if it is, this is done inside api_msg.c:do_write(), so we can use the
	   non-blocking version here. */
	err = TCPIP_APIMSG(&msg);
    2a0e:	4668      	mov	r0, sp
    2a10:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <netconn_write_partly+0x7c>)
    2a12:	4798      	blx	r3
	if ((err == ERR_OK) && (bytes_written != NULL)) {
    2a14:	4603      	mov	r3, r0
    2a16:	b918      	cbnz	r0, 2a20 <netconn_write_partly+0x50>
    2a18:	b116      	cbz	r6, 2a20 <netconn_write_partly+0x50>
		if (dontblock
    2a1a:	b177      	cbz	r7, 2a3a <netconn_write_partly+0x6a>
#if LWIP_SO_SNDTIMEO
		    || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
		) {
			/* nonblocking write: maybe the data has been sent partly */
			*bytes_written = msg.msg.msg.w.len;
    2a1c:	9a04      	ldr	r2, [sp, #16]
    2a1e:	6032      	str	r2, [r6, #0]
			/* blocking call succeeded: all data has been sent if it */
			*bytes_written = size;
		}
	}

	NETCONN_SET_SAFE_ERR(conn, err);
    2a20:	f994 2008 	ldrsb.w	r2, [r4, #8]
    2a24:	f112 0f09 	cmn.w	r2, #9
    2a28:	db00      	blt.n	2a2c <netconn_write_partly+0x5c>
    2a2a:	7223      	strb	r3, [r4, #8]
	return err;
}
    2a2c:	4618      	mov	r0, r3
    2a2e:	b007      	add	sp, #28
    2a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
    2a32:	2001      	movs	r0, #1
    2a34:	e7df      	b.n	29f6 <netconn_write_partly+0x26>
    2a36:	2000      	movs	r0, #0
    2a38:	e7dd      	b.n	29f6 <netconn_write_partly+0x26>
			*bytes_written = size;
    2a3a:	6035      	str	r5, [r6, #0]
    2a3c:	e7f0      	b.n	2a20 <netconn_write_partly+0x50>
		return ERR_OK;
    2a3e:	2300      	movs	r3, #0
    2a40:	e7f4      	b.n	2a2c <netconn_write_partly+0x5c>
		return ERR_VAL;
    2a42:	f06f 0305 	mvn.w	r3, #5
    2a46:	e7f1      	b.n	2a2c <netconn_write_partly+0x5c>
    2a48:	000032c9 	.word	0x000032c9
    2a4c:	00003e01 	.word	0x00003e01

00002a50 <err_tcp>:
 * The application thread has then to decide what to do.
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void err_tcp(void *arg, err_t err)
{
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a52:	4604      	mov	r4, r0
    2a54:	460f      	mov	r7, r1
	SYS_ARCH_DECL_PROTECT(lev);

	conn = (struct netconn *)arg;
	LWIP_ASSERT("conn != NULL", (conn != NULL));

	conn->pcb.tcp = NULL;
    2a56:	2300      	movs	r3, #0
    2a58:	6043      	str	r3, [r0, #4]

	/* no check since this is always fatal! */
	SYS_ARCH_PROTECT(lev);
	conn->last_err = err;
    2a5a:	7201      	strb	r1, [r0, #8]
	SYS_ARCH_UNPROTECT(lev);

	/* reset conn->state now before waking up other threads */
	old_state   = conn->state;
    2a5c:	7845      	ldrb	r5, [r0, #1]
	conn->state = NETCONN_NONE;
    2a5e:	7043      	strb	r3, [r0, #1]

	/* Notify the user layer about a connection error. Used to signal
	   select. */
	API_EVENT(conn, NETCONN_EVT_ERROR, 0);
    2a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2a62:	b113      	cbz	r3, 2a6a <err_tcp+0x1a>
    2a64:	2200      	movs	r2, #0
    2a66:	2104      	movs	r1, #4
    2a68:	4798      	blx	r3
	/* Try to release selects pending on 'read' or 'write', too.
	   They will get an error if they actually try to read or write. */
	API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
    2a6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a6c:	b11b      	cbz	r3, 2a76 <err_tcp+0x26>
    2a6e:	2200      	movs	r2, #0
    2a70:	4611      	mov	r1, r2
    2a72:	4620      	mov	r0, r4
    2a74:	4798      	blx	r3
	API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a78:	b11b      	cbz	r3, 2a82 <err_tcp+0x32>
    2a7a:	2200      	movs	r2, #0
    2a7c:	2102      	movs	r1, #2
    2a7e:	4620      	mov	r0, r4
    2a80:	4798      	blx	r3

	/* pass NULL-message to recvmbox to wake up pending recv */
	if (sys_mbox_valid(&conn->recvmbox)) {
    2a82:	f104 0610 	add.w	r6, r4, #16
    2a86:	4630      	mov	r0, r6
    2a88:	4b14      	ldr	r3, [pc, #80]	; (2adc <err_tcp+0x8c>)
    2a8a:	4798      	blx	r3
    2a8c:	b998      	cbnz	r0, 2ab6 <err_tcp+0x66>
		/* use trypost to prevent deadlock */
		sys_mbox_trypost(&conn->recvmbox, NULL);
	}
	/* pass NULL-message to acceptmbox to wake up pending accept */
	if (sys_mbox_valid(&conn->acceptmbox)) {
    2a8e:	f104 0614 	add.w	r6, r4, #20
    2a92:	4630      	mov	r0, r6
    2a94:	4b11      	ldr	r3, [pc, #68]	; (2adc <err_tcp+0x8c>)
    2a96:	4798      	blx	r3
    2a98:	b990      	cbnz	r0, 2ac0 <err_tcp+0x70>
		/* use trypost to preven deadlock */
		sys_mbox_trypost(&conn->acceptmbox, NULL);
	}

	if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) || (old_state == NETCONN_CONNECT)) {
    2a9a:	2d01      	cmp	r5, #1
    2a9c:	d003      	beq.n	2aa6 <err_tcp+0x56>
    2a9e:	2d04      	cmp	r5, #4
    2aa0:	d001      	beq.n	2aa6 <err_tcp+0x56>
    2aa2:	2d03      	cmp	r5, #3
    2aa4:	d106      	bne.n	2ab4 <err_tcp+0x64>
		/* calling do_writemore/do_close_internal is not necessary
		   since the pcb has already been deleted! */
		int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
    2aa6:	7f23      	ldrb	r3, [r4, #28]
		SET_NONBLOCKING_CONNECT(conn, 0);
    2aa8:	f023 0204 	bic.w	r2, r3, #4
    2aac:	7722      	strb	r2, [r4, #28]

		if (!was_nonblocking_connect) {
    2aae:	f013 0f04 	tst.w	r3, #4
    2ab2:	d00a      	beq.n	2aca <err_tcp+0x7a>
    2ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_mbox_trypost(&conn->recvmbox, NULL);
    2ab6:	2100      	movs	r1, #0
    2ab8:	4630      	mov	r0, r6
    2aba:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <err_tcp+0x90>)
    2abc:	4798      	blx	r3
    2abe:	e7e6      	b.n	2a8e <err_tcp+0x3e>
		sys_mbox_trypost(&conn->acceptmbox, NULL);
    2ac0:	2100      	movs	r1, #0
    2ac2:	4630      	mov	r0, r6
    2ac4:	4b06      	ldr	r3, [pc, #24]	; (2ae0 <err_tcp+0x90>)
    2ac6:	4798      	blx	r3
    2ac8:	e7e7      	b.n	2a9a <err_tcp+0x4a>
			/* set error return code */
			LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
			conn->current_msg->err = err;
    2aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2acc:	711f      	strb	r7, [r3, #4]
			conn->current_msg      = NULL;
    2ace:	2300      	movs	r3, #0
    2ad0:	6263      	str	r3, [r4, #36]	; 0x24
			/* wake up the waiting task */
			sys_sem_signal(&conn->op_completed);
    2ad2:	f104 000c 	add.w	r0, r4, #12
    2ad6:	4b03      	ldr	r3, [pc, #12]	; (2ae4 <err_tcp+0x94>)
    2ad8:	4798      	blx	r3
		}
	} else {
		LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
	}
}
    2ada:	e7eb      	b.n	2ab4 <err_tcp+0x64>
    2adc:	000026b1 	.word	0x000026b1
    2ae0:	0000259d 	.word	0x0000259d
    2ae4:	000024c1 	.word	0x000024c1

00002ae8 <recv_udp>:
{
    2ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aec:	4614      	mov	r4, r2
	if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
    2aee:	b138      	cbz	r0, 2b00 <recv_udp+0x18>
    2af0:	4698      	mov	r8, r3
    2af2:	4605      	mov	r5, r0
    2af4:	f100 0610 	add.w	r6, r0, #16
    2af8:	4630      	mov	r0, r6
    2afa:	4b19      	ldr	r3, [pc, #100]	; (2b60 <recv_udp+0x78>)
    2afc:	4798      	blx	r3
    2afe:	b920      	cbnz	r0, 2b0a <recv_udp+0x22>
		pbuf_free(p);
    2b00:	4620      	mov	r0, r4
    2b02:	4b18      	ldr	r3, [pc, #96]	; (2b64 <recv_udp+0x7c>)
    2b04:	4798      	blx	r3
		return;
    2b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    2b0a:	2006      	movs	r0, #6
    2b0c:	4b16      	ldr	r3, [pc, #88]	; (2b68 <recv_udp+0x80>)
    2b0e:	4798      	blx	r3
	if (buf == NULL) {
    2b10:	4607      	mov	r7, r0
    2b12:	b1c0      	cbz	r0, 2b46 <recv_udp+0x5e>
		buf->p   = p;
    2b14:	6004      	str	r4, [r0, #0]
		buf->ptr = p;
    2b16:	6044      	str	r4, [r0, #4]
		ip_addr_set(&buf->addr, addr);
    2b18:	f1b8 0f00 	cmp.w	r8, #0
    2b1c:	d018      	beq.n	2b50 <recv_udp+0x68>
    2b1e:	f8d8 3000 	ldr.w	r3, [r8]
    2b22:	60bb      	str	r3, [r7, #8]
		buf->port = port;
    2b24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2b28:	81bb      	strh	r3, [r7, #12]
	len = p->tot_len;
    2b2a:	8924      	ldrh	r4, [r4, #8]
	if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
    2b2c:	4639      	mov	r1, r7
    2b2e:	4630      	mov	r0, r6
    2b30:	4b0e      	ldr	r3, [pc, #56]	; (2b6c <recv_udp+0x84>)
    2b32:	4798      	blx	r3
    2b34:	b970      	cbnz	r0, 2b54 <recv_udp+0x6c>
		API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
    2b36:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b38:	b11b      	cbz	r3, 2b42 <recv_udp+0x5a>
    2b3a:	4622      	mov	r2, r4
    2b3c:	2100      	movs	r1, #0
    2b3e:	4628      	mov	r0, r5
    2b40:	4798      	blx	r3
    2b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pbuf_free(p);
    2b46:	4620      	mov	r0, r4
    2b48:	4b06      	ldr	r3, [pc, #24]	; (2b64 <recv_udp+0x7c>)
    2b4a:	4798      	blx	r3
		return;
    2b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ip_addr_set(&buf->addr, addr);
    2b50:	2300      	movs	r3, #0
    2b52:	e7e6      	b.n	2b22 <recv_udp+0x3a>
		netbuf_delete(buf);
    2b54:	4638      	mov	r0, r7
    2b56:	4b06      	ldr	r3, [pc, #24]	; (2b70 <recv_udp+0x88>)
    2b58:	4798      	blx	r3
		return;
    2b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b5e:	bf00      	nop
    2b60:	000026b1 	.word	0x000026b1
    2b64:	000054a1 	.word	0x000054a1
    2b68:	000051d5 	.word	0x000051d5
    2b6c:	0000259d 	.word	0x0000259d
    2b70:	0000339d 	.word	0x0000339d

00002b74 <setup_tcp>:
 * and their arguments.
 *
 * @param conn the TCP netconn to setup
 */
static void setup_tcp(struct netconn *conn)
{
    2b74:	b510      	push	{r4, lr}
    2b76:	4601      	mov	r1, r0
	struct tcp_pcb *pcb;

	pcb = conn->pcb.tcp;
    2b78:	6844      	ldr	r4, [r0, #4]
	tcp_arg(pcb, conn);
    2b7a:	4620      	mov	r0, r4
    2b7c:	4b09      	ldr	r3, [pc, #36]	; (2ba4 <setup_tcp+0x30>)
    2b7e:	4798      	blx	r3
	tcp_recv(pcb, recv_tcp);
    2b80:	4909      	ldr	r1, [pc, #36]	; (2ba8 <setup_tcp+0x34>)
    2b82:	4620      	mov	r0, r4
    2b84:	4b09      	ldr	r3, [pc, #36]	; (2bac <setup_tcp+0x38>)
    2b86:	4798      	blx	r3
	tcp_sent(pcb, sent_tcp);
    2b88:	4909      	ldr	r1, [pc, #36]	; (2bb0 <setup_tcp+0x3c>)
    2b8a:	4620      	mov	r0, r4
    2b8c:	4b09      	ldr	r3, [pc, #36]	; (2bb4 <setup_tcp+0x40>)
    2b8e:	4798      	blx	r3
	tcp_poll(pcb, poll_tcp, 4);
    2b90:	2204      	movs	r2, #4
    2b92:	4909      	ldr	r1, [pc, #36]	; (2bb8 <setup_tcp+0x44>)
    2b94:	4620      	mov	r0, r4
    2b96:	4b09      	ldr	r3, [pc, #36]	; (2bbc <setup_tcp+0x48>)
    2b98:	4798      	blx	r3
	tcp_err(pcb, err_tcp);
    2b9a:	4909      	ldr	r1, [pc, #36]	; (2bc0 <setup_tcp+0x4c>)
    2b9c:	4620      	mov	r0, r4
    2b9e:	4b09      	ldr	r3, [pc, #36]	; (2bc4 <setup_tcp+0x50>)
    2ba0:	4798      	blx	r3
    2ba2:	bd10      	pop	{r4, pc}
    2ba4:	000059c9 	.word	0x000059c9
    2ba8:	00002f21 	.word	0x00002f21
    2bac:	000059cd 	.word	0x000059cd
    2bb0:	00002ec9 	.word	0x00002ec9
    2bb4:	000059d3 	.word	0x000059d3
    2bb8:	00002e71 	.word	0x00002e71
    2bbc:	000059e1 	.word	0x000059e1
    2bc0:	00002a51 	.word	0x00002a51
    2bc4:	000059d7 	.word	0x000059d7

00002bc8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void pcb_new(struct api_msg_msg *msg)
{
    2bc8:	b538      	push	{r3, r4, r5, lr}
    2bca:	4604      	mov	r4, r0
	LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

	/* Allocate a PCB for this connection */
	switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    2bcc:	6805      	ldr	r5, [r0, #0]
    2bce:	782b      	ldrb	r3, [r5, #0]
    2bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2bd4:	2b10      	cmp	r3, #16
    2bd6:	d017      	beq.n	2c08 <pcb_new+0x40>
    2bd8:	2b20      	cmp	r3, #32
    2bda:	d121      	bne.n	2c20 <pcb_new+0x58>
		raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
		break;
#endif /* LWIP_RAW */
#if LWIP_UDP
	case NETCONN_UDP:
		msg->conn->pcb.udp = udp_new();
    2bdc:	4b12      	ldr	r3, [pc, #72]	; (2c28 <pcb_new+0x60>)
    2bde:	4798      	blx	r3
    2be0:	6068      	str	r0, [r5, #4]
		if (msg->conn->pcb.udp == NULL) {
    2be2:	6823      	ldr	r3, [r4, #0]
    2be4:	685a      	ldr	r2, [r3, #4]
    2be6:	b14a      	cbz	r2, 2bfc <pcb_new+0x34>
#if LWIP_UDPLITE
		if (msg->conn->type == NETCONN_UDPLITE) {
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
		}
#endif /* LWIP_UDPLITE */
		if (msg->conn->type == NETCONN_UDPNOCHKSUM) {
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	2b22      	cmp	r3, #34	; 0x22
    2bec:	d009      	beq.n	2c02 <pcb_new+0x3a>
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
		}
		udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
    2bee:	6823      	ldr	r3, [r4, #0]
    2bf0:	461a      	mov	r2, r3
    2bf2:	490e      	ldr	r1, [pc, #56]	; (2c2c <pcb_new+0x64>)
    2bf4:	6858      	ldr	r0, [r3, #4]
    2bf6:	4b0e      	ldr	r3, [pc, #56]	; (2c30 <pcb_new+0x68>)
    2bf8:	4798      	blx	r3
		break;
    2bfa:	bd38      	pop	{r3, r4, r5, pc}
			msg->err = ERR_MEM;
    2bfc:	23ff      	movs	r3, #255	; 0xff
    2bfe:	7123      	strb	r3, [r4, #4]
			break;
    2c00:	bd38      	pop	{r3, r4, r5, pc}
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
    2c02:	2301      	movs	r3, #1
    2c04:	7413      	strb	r3, [r2, #16]
    2c06:	e7f2      	b.n	2bee <pcb_new+0x26>
#endif /* LWIP_UDP */
#if LWIP_TCP
	case NETCONN_TCP:
		msg->conn->pcb.tcp = tcp_new();
    2c08:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <pcb_new+0x6c>)
    2c0a:	4798      	blx	r3
    2c0c:	6068      	str	r0, [r5, #4]
		if (msg->conn->pcb.tcp == NULL) {
    2c0e:	6820      	ldr	r0, [r4, #0]
    2c10:	6843      	ldr	r3, [r0, #4]
    2c12:	b113      	cbz	r3, 2c1a <pcb_new+0x52>
			msg->err = ERR_MEM;
			break;
		}
		setup_tcp(msg->conn);
    2c14:	4b08      	ldr	r3, [pc, #32]	; (2c38 <pcb_new+0x70>)
    2c16:	4798      	blx	r3
		break;
    2c18:	bd38      	pop	{r3, r4, r5, pc}
			msg->err = ERR_MEM;
    2c1a:	23ff      	movs	r3, #255	; 0xff
    2c1c:	7123      	strb	r3, [r4, #4]
			break;
    2c1e:	bd38      	pop	{r3, r4, r5, pc}
#endif /* LWIP_TCP */
	default:
		/* Unsupported netconn type, e.g. protocol disabled */
		msg->err = ERR_VAL;
    2c20:	23fa      	movs	r3, #250	; 0xfa
    2c22:	7103      	strb	r3, [r0, #4]
    2c24:	bd38      	pop	{r3, r4, r5, pc}
    2c26:	bf00      	nop
    2c28:	000089d9 	.word	0x000089d9
    2c2c:	00002ae9 	.word	0x00002ae9
    2c30:	00008999 	.word	0x00008999
    2c34:	00006335 	.word	0x00006335
    2c38:	00002b75 	.word	0x00002b75

00002c3c <do_writemore>:
 * @param conn netconn (that is currently in state NETCONN_WRITE) to process
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t do_writemore(struct netconn *conn)
{
    2c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c3e:	4604      	mov	r4, r0
	err_t  err;
	void * dataptr;
	u16_t  len, available;
	u8_t   write_finished = 0;
	size_t diff;
	u8_t   dontblock = netconn_is_nonblocking(conn) || (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
    2c40:	7f03      	ldrb	r3, [r0, #28]
    2c42:	f013 0f02 	tst.w	r3, #2
    2c46:	d106      	bne.n	2c56 <do_writemore+0x1a>
    2c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2c4a:	7c1b      	ldrb	r3, [r3, #16]
    2c4c:	f013 0f04 	tst.w	r3, #4
    2c50:	d02b      	beq.n	2caa <do_writemore+0x6e>
    2c52:	2501      	movs	r5, #1
    2c54:	e000      	b.n	2c58 <do_writemore+0x1c>
    2c56:	2501      	movs	r5, #1
    2c58:	b2ed      	uxtb	r5, r5
	u8_t   apiflags  = conn->current_msg->msg.w.apiflags;
    2c5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2c5c:	7c03      	ldrb	r3, [r0, #16]
			conn->current_msg->msg.w.len = conn->write_offset;
		}
	} else
#endif /* LWIP_SO_SNDTIMEO */
	{
		dataptr = (u8_t *)conn->current_msg->msg.w.dataptr + conn->write_offset;
    2c5e:	6881      	ldr	r1, [r0, #8]
    2c60:	6a26      	ldr	r6, [r4, #32]
    2c62:	4431      	add	r1, r6
		diff    = conn->current_msg->msg.w.len - conn->write_offset;
    2c64:	68c2      	ldr	r2, [r0, #12]
    2c66:	1b92      	subs	r2, r2, r6
		if (diff > 0xffffUL) { /* max_u16_t */
    2c68:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2c6c:	d31f      	bcc.n	2cae <do_writemore+0x72>
			len = 0xffff;
#if LWIP_TCPIP_CORE_LOCKING
			conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
			apiflags |= TCP_WRITE_FLAG_MORE;
    2c6e:	f043 0302 	orr.w	r3, r3, #2
			len = 0xffff;
    2c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
		} else {
			len = (u16_t)diff;
		}
		available = tcp_sndbuf(conn->pcb.tcp);
    2c76:	6860      	ldr	r0, [r4, #4]
    2c78:	f8b0 6066 	ldrh.w	r6, [r0, #102]	; 0x66
		if (available < len) {
    2c7c:	42b2      	cmp	r2, r6
    2c7e:	d935      	bls.n	2cec <do_writemore+0xb0>
			/* don't try to write more than sendbuf */
			len = available;
			if (dontblock) {
    2c80:	b1bd      	cbz	r5, 2cb2 <do_writemore+0x76>
				if (!len) {
    2c82:	b9c6      	cbnz	r6, 2cb6 <do_writemore+0x7a>
					err = ERR_WOULDBLOCK;
    2c84:	f06f 0706 	mvn.w	r7, #6
		LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
		err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
		/* if OK or memory error, check available space */
		if ((err == ERR_OK) || (err == ERR_MEM)) {
		err_mem:
			if (dontblock && (len < conn->current_msg->msg.w.len)) {
    2c88:	2d00      	cmp	r5, #0
    2c8a:	d031      	beq.n	2cf0 <do_writemore+0xb4>
    2c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c8e:	68db      	ldr	r3, [r3, #12]
    2c90:	429e      	cmp	r6, r3
    2c92:	d22d      	bcs.n	2cf0 <do_writemore+0xb4>
				/* non-blocking write did not write everything: mark the pcb non-writable
				   and let poll_tcp check writable space to mark the pcb writable again */
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
    2c94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2c96:	b11b      	cbz	r3, 2ca0 <do_writemore+0x64>
    2c98:	4632      	mov	r2, r6
    2c9a:	2103      	movs	r1, #3
    2c9c:	4620      	mov	r0, r4
    2c9e:	4798      	blx	r3
				conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
    2ca0:	7f23      	ldrb	r3, [r4, #28]
    2ca2:	f043 0310 	orr.w	r3, r3, #16
    2ca6:	7723      	strb	r3, [r4, #28]
    2ca8:	e00d      	b.n	2cc6 <do_writemore+0x8a>
	u8_t   dontblock = netconn_is_nonblocking(conn) || (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
    2caa:	2500      	movs	r5, #0
    2cac:	e7d4      	b.n	2c58 <do_writemore+0x1c>
			len = (u16_t)diff;
    2cae:	b292      	uxth	r2, r2
    2cb0:	e7e1      	b.n	2c76 <do_writemore+0x3a>
				apiflags |= TCP_WRITE_FLAG_MORE;
    2cb2:	f043 0302 	orr.w	r3, r3, #2
		err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    2cb6:	4632      	mov	r2, r6
    2cb8:	4f23      	ldr	r7, [pc, #140]	; (2d48 <do_writemore+0x10c>)
    2cba:	47b8      	blx	r7
    2cbc:	4607      	mov	r7, r0
		if ((err == ERR_OK) || (err == ERR_MEM)) {
    2cbe:	1c43      	adds	r3, r0, #1
    2cc0:	b2db      	uxtb	r3, r3
    2cc2:	2b01      	cmp	r3, #1
    2cc4:	d9e0      	bls.n	2c88 <do_writemore+0x4c>
				   let select mark this pcb as non-writable. */
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
			}
		}

		if (err == ERR_OK) {
    2cc6:	bb37      	cbnz	r7, 2d16 <do_writemore+0xda>
			conn->write_offset += len;
    2cc8:	6a23      	ldr	r3, [r4, #32]
    2cca:	441e      	add	r6, r3
    2ccc:	6226      	str	r6, [r4, #32]
			if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
    2cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2cd0:	68da      	ldr	r2, [r3, #12]
    2cd2:	4296      	cmp	r6, r2
    2cd4:	d000      	beq.n	2cd8 <do_writemore+0x9c>
    2cd6:	b11d      	cbz	r5, 2ce0 <do_writemore+0xa4>
				/* return sent length */
				conn->current_msg->msg.w.len = conn->write_offset;
    2cd8:	60de      	str	r6, [r3, #12]
				/* everything was written */
				write_finished     = 1;
				conn->write_offset = 0;
    2cda:	2300      	movs	r3, #0
    2cdc:	6223      	str	r3, [r4, #32]
				write_finished     = 1;
    2cde:	2501      	movs	r5, #1
			}
			tcp_output(conn->pcb.tcp);
    2ce0:	6860      	ldr	r0, [r4, #4]
    2ce2:	4b1a      	ldr	r3, [pc, #104]	; (2d4c <do_writemore+0x110>)
    2ce4:	4798      	blx	r3
			   the error to the application thread. */
			write_finished               = 1;
			conn->current_msg->msg.w.len = 0;
		}
	}
	if (write_finished) {
    2ce6:	bb25      	cbnz	r5, 2d32 <do_writemore+0xf6>
#if LWIP_TCPIP_CORE_LOCKING
	else
		return ERR_MEM;
#endif
	return ERR_OK;
}
    2ce8:	2000      	movs	r0, #0
    2cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cec:	4616      	mov	r6, r2
    2cee:	e7e2      	b.n	2cb6 <do_writemore+0x7a>
			} else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT)
    2cf0:	6863      	ldr	r3, [r4, #4]
    2cf2:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
    2cf6:	f640 3267 	movw	r2, #2919	; 0xb67
    2cfa:	4291      	cmp	r1, r2
    2cfc:	d903      	bls.n	2d06 <do_writemore+0xca>
			           || (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
    2cfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    2d02:	2b04      	cmp	r3, #4
    2d04:	d9df      	bls.n	2cc6 <do_writemore+0x8a>
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
    2d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d0dc      	beq.n	2cc6 <do_writemore+0x8a>
    2d0c:	4632      	mov	r2, r6
    2d0e:	2103      	movs	r1, #3
    2d10:	4620      	mov	r0, r4
    2d12:	4798      	blx	r3
    2d14:	e7d7      	b.n	2cc6 <do_writemore+0x8a>
		} else if ((err == ERR_MEM) && !dontblock) {
    2d16:	f1b7 3fff 	cmp.w	r7, #4294967295
    2d1a:	d004      	beq.n	2d26 <do_writemore+0xea>
			conn->current_msg->msg.w.len = 0;
    2d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d1e:	2200      	movs	r2, #0
    2d20:	60da      	str	r2, [r3, #12]
			write_finished               = 1;
    2d22:	2501      	movs	r5, #1
    2d24:	e7df      	b.n	2ce6 <do_writemore+0xaa>
		} else if ((err == ERR_MEM) && !dontblock) {
    2d26:	2d00      	cmp	r5, #0
    2d28:	d1f8      	bne.n	2d1c <do_writemore+0xe0>
			tcp_output(conn->pcb.tcp);
    2d2a:	6860      	ldr	r0, [r4, #4]
    2d2c:	4b07      	ldr	r3, [pc, #28]	; (2d4c <do_writemore+0x110>)
    2d2e:	4798      	blx	r3
    2d30:	e7d9      	b.n	2ce6 <do_writemore+0xaa>
		conn->current_msg->err = err;
    2d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d34:	711f      	strb	r7, [r3, #4]
		conn->current_msg      = NULL;
    2d36:	2300      	movs	r3, #0
    2d38:	6263      	str	r3, [r4, #36]	; 0x24
		conn->state            = NETCONN_NONE;
    2d3a:	7063      	strb	r3, [r4, #1]
			sys_sem_signal(&conn->op_completed);
    2d3c:	f104 000c 	add.w	r0, r4, #12
    2d40:	4b03      	ldr	r3, [pc, #12]	; (2d50 <do_writemore+0x114>)
    2d42:	4798      	blx	r3
    2d44:	e7d0      	b.n	2ce8 <do_writemore+0xac>
    2d46:	bf00      	nop
    2d48:	00007a2d 	.word	0x00007a2d
    2d4c:	00007ee9 	.word	0x00007ee9
    2d50:	000024c1 	.word	0x000024c1

00002d54 <do_close_internal>:
{
    2d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d56:	4604      	mov	r4, r0
	shut    = conn->current_msg->msg.sd.shut;
    2d58:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2d5a:	7a1d      	ldrb	r5, [r3, #8]
	shut_rx = shut & NETCONN_SHUT_RD;
    2d5c:	f005 0701 	and.w	r7, r5, #1
	shut_tx = shut & NETCONN_SHUT_WR;
    2d60:	f005 0602 	and.w	r6, r5, #2
	if (close) {
    2d64:	2d03      	cmp	r5, #3
    2d66:	d02c      	beq.n	2dc2 <do_close_internal+0x6e>
	if (conn->pcb.tcp->state == LISTEN) {
    2d68:	6860      	ldr	r0, [r4, #4]
    2d6a:	7e03      	ldrb	r3, [r0, #24]
    2d6c:	2b01      	cmp	r3, #1
    2d6e:	d02d      	beq.n	2dcc <do_close_internal+0x78>
		if (shut_rx) {
    2d70:	2f00      	cmp	r7, #0
    2d72:	d12f      	bne.n	2dd4 <do_close_internal+0x80>
		if (shut_tx) {
    2d74:	2e00      	cmp	r6, #0
    2d76:	d135      	bne.n	2de4 <do_close_internal+0x90>
		if (close) {
    2d78:	2d03      	cmp	r5, #3
    2d7a:	d038      	beq.n	2dee <do_close_internal+0x9a>
	if (close) {
    2d7c:	2d03      	cmp	r5, #3
    2d7e:	d040      	beq.n	2e02 <do_close_internal+0xae>
		err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
    2d80:	4632      	mov	r2, r6
    2d82:	4639      	mov	r1, r7
    2d84:	6860      	ldr	r0, [r4, #4]
    2d86:	4b2e      	ldr	r3, [pc, #184]	; (2e40 <do_close_internal+0xec>)
    2d88:	4798      	blx	r3
	if (err == ERR_OK) {
    2d8a:	2800      	cmp	r0, #0
    2d8c:	d146      	bne.n	2e1c <do_close_internal+0xc8>
		conn->current_msg->err = ERR_OK;
    2d8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2d90:	2300      	movs	r3, #0
    2d92:	7113      	strb	r3, [r2, #4]
		conn->current_msg      = NULL;
    2d94:	6263      	str	r3, [r4, #36]	; 0x24
		conn->state            = NETCONN_NONE;
    2d96:	7063      	strb	r3, [r4, #1]
		if (close) {
    2d98:	2d03      	cmp	r5, #3
    2d9a:	d036      	beq.n	2e0a <do_close_internal+0xb6>
		if (shut_rx) {
    2d9c:	b12f      	cbz	r7, 2daa <do_close_internal+0x56>
			API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
    2d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2da0:	b11b      	cbz	r3, 2daa <do_close_internal+0x56>
    2da2:	2200      	movs	r2, #0
    2da4:	4611      	mov	r1, r2
    2da6:	4620      	mov	r0, r4
    2da8:	4798      	blx	r3
		if (shut_tx) {
    2daa:	b12e      	cbz	r6, 2db8 <do_close_internal+0x64>
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2dac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2dae:	b11b      	cbz	r3, 2db8 <do_close_internal+0x64>
    2db0:	2200      	movs	r2, #0
    2db2:	2102      	movs	r1, #2
    2db4:	4620      	mov	r0, r4
    2db6:	4798      	blx	r3
		sys_sem_signal(&conn->op_completed);
    2db8:	f104 000c 	add.w	r0, r4, #12
    2dbc:	4b21      	ldr	r3, [pc, #132]	; (2e44 <do_close_internal+0xf0>)
    2dbe:	4798      	blx	r3
    2dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tcp_arg(conn->pcb.tcp, NULL);
    2dc2:	2100      	movs	r1, #0
    2dc4:	6840      	ldr	r0, [r0, #4]
    2dc6:	4b20      	ldr	r3, [pc, #128]	; (2e48 <do_close_internal+0xf4>)
    2dc8:	4798      	blx	r3
    2dca:	e7cd      	b.n	2d68 <do_close_internal+0x14>
		tcp_accept(conn->pcb.tcp, NULL);
    2dcc:	2100      	movs	r1, #0
    2dce:	4b1f      	ldr	r3, [pc, #124]	; (2e4c <do_close_internal+0xf8>)
    2dd0:	4798      	blx	r3
    2dd2:	e7d3      	b.n	2d7c <do_close_internal+0x28>
			tcp_recv(conn->pcb.tcp, NULL);
    2dd4:	2100      	movs	r1, #0
    2dd6:	4b1e      	ldr	r3, [pc, #120]	; (2e50 <do_close_internal+0xfc>)
    2dd8:	4798      	blx	r3
			tcp_accept(conn->pcb.tcp, NULL);
    2dda:	2100      	movs	r1, #0
    2ddc:	6860      	ldr	r0, [r4, #4]
    2dde:	4b1b      	ldr	r3, [pc, #108]	; (2e4c <do_close_internal+0xf8>)
    2de0:	4798      	blx	r3
    2de2:	e7c7      	b.n	2d74 <do_close_internal+0x20>
			tcp_sent(conn->pcb.tcp, NULL);
    2de4:	2100      	movs	r1, #0
    2de6:	6860      	ldr	r0, [r4, #4]
    2de8:	4b1a      	ldr	r3, [pc, #104]	; (2e54 <do_close_internal+0x100>)
    2dea:	4798      	blx	r3
    2dec:	e7c4      	b.n	2d78 <do_close_internal+0x24>
			tcp_poll(conn->pcb.tcp, NULL, 4);
    2dee:	2204      	movs	r2, #4
    2df0:	2100      	movs	r1, #0
    2df2:	6860      	ldr	r0, [r4, #4]
    2df4:	4b18      	ldr	r3, [pc, #96]	; (2e58 <do_close_internal+0x104>)
    2df6:	4798      	blx	r3
			tcp_err(conn->pcb.tcp, NULL);
    2df8:	2100      	movs	r1, #0
    2dfa:	6860      	ldr	r0, [r4, #4]
    2dfc:	4b17      	ldr	r3, [pc, #92]	; (2e5c <do_close_internal+0x108>)
    2dfe:	4798      	blx	r3
    2e00:	e7bc      	b.n	2d7c <do_close_internal+0x28>
		err = tcp_close(conn->pcb.tcp);
    2e02:	6860      	ldr	r0, [r4, #4]
    2e04:	4b16      	ldr	r3, [pc, #88]	; (2e60 <do_close_internal+0x10c>)
    2e06:	4798      	blx	r3
    2e08:	e7bf      	b.n	2d8a <do_close_internal+0x36>
			conn->pcb.tcp = NULL;
    2e0a:	6063      	str	r3, [r4, #4]
			API_EVENT(conn, NETCONN_EVT_ERROR, 0);
    2e0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d0c4      	beq.n	2d9c <do_close_internal+0x48>
    2e12:	2200      	movs	r2, #0
    2e14:	2104      	movs	r1, #4
    2e16:	4620      	mov	r0, r4
    2e18:	4798      	blx	r3
    2e1a:	e7bf      	b.n	2d9c <do_close_internal+0x48>
		tcp_sent(conn->pcb.tcp, sent_tcp);
    2e1c:	4911      	ldr	r1, [pc, #68]	; (2e64 <do_close_internal+0x110>)
    2e1e:	6860      	ldr	r0, [r4, #4]
    2e20:	4b0c      	ldr	r3, [pc, #48]	; (2e54 <do_close_internal+0x100>)
    2e22:	4798      	blx	r3
		tcp_poll(conn->pcb.tcp, poll_tcp, 4);
    2e24:	2204      	movs	r2, #4
    2e26:	4910      	ldr	r1, [pc, #64]	; (2e68 <do_close_internal+0x114>)
    2e28:	6860      	ldr	r0, [r4, #4]
    2e2a:	4b0b      	ldr	r3, [pc, #44]	; (2e58 <do_close_internal+0x104>)
    2e2c:	4798      	blx	r3
		tcp_err(conn->pcb.tcp, err_tcp);
    2e2e:	490f      	ldr	r1, [pc, #60]	; (2e6c <do_close_internal+0x118>)
    2e30:	6860      	ldr	r0, [r4, #4]
    2e32:	4b0a      	ldr	r3, [pc, #40]	; (2e5c <do_close_internal+0x108>)
    2e34:	4798      	blx	r3
		tcp_arg(conn->pcb.tcp, conn);
    2e36:	4621      	mov	r1, r4
    2e38:	6860      	ldr	r0, [r4, #4]
    2e3a:	4b03      	ldr	r3, [pc, #12]	; (2e48 <do_close_internal+0xf4>)
    2e3c:	4798      	blx	r3
    2e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e40:	000060b9 	.word	0x000060b9
    2e44:	000024c1 	.word	0x000024c1
    2e48:	000059c9 	.word	0x000059c9
    2e4c:	000059dd 	.word	0x000059dd
    2e50:	000059cd 	.word	0x000059cd
    2e54:	000059d3 	.word	0x000059d3
    2e58:	000059e1 	.word	0x000059e1
    2e5c:	000059d7 	.word	0x000059d7
    2e60:	00005f5d 	.word	0x00005f5d
    2e64:	00002ec9 	.word	0x00002ec9
    2e68:	00002e71 	.word	0x00002e71
    2e6c:	00002a51 	.word	0x00002a51

00002e70 <poll_tcp>:
{
    2e70:	b510      	push	{r4, lr}
    2e72:	4604      	mov	r4, r0
	if (conn->state == NETCONN_WRITE) {
    2e74:	7843      	ldrb	r3, [r0, #1]
    2e76:	2b01      	cmp	r3, #1
    2e78:	d01c      	beq.n	2eb4 <poll_tcp+0x44>
	} else if (conn->state == NETCONN_CLOSE) {
    2e7a:	2b04      	cmp	r3, #4
    2e7c:	d01d      	beq.n	2eba <poll_tcp+0x4a>
	if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
    2e7e:	7f23      	ldrb	r3, [r4, #28]
    2e80:	f013 0f10 	tst.w	r3, #16
    2e84:	d014      	beq.n	2eb0 <poll_tcp+0x40>
		if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)
    2e86:	6862      	ldr	r2, [r4, #4]
    2e88:	b192      	cbz	r2, 2eb0 <poll_tcp+0x40>
    2e8a:	f8b2 0066 	ldrh.w	r0, [r2, #102]	; 0x66
    2e8e:	f640 3167 	movw	r1, #2919	; 0xb67
    2e92:	4288      	cmp	r0, r1
    2e94:	d90c      	bls.n	2eb0 <poll_tcp+0x40>
		    && (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
    2e96:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
    2e9a:	2a04      	cmp	r2, #4
    2e9c:	d808      	bhi.n	2eb0 <poll_tcp+0x40>
			conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
    2e9e:	f023 0310 	bic.w	r3, r3, #16
    2ea2:	7723      	strb	r3, [r4, #28]
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ea6:	b11b      	cbz	r3, 2eb0 <poll_tcp+0x40>
    2ea8:	2200      	movs	r2, #0
    2eaa:	2102      	movs	r1, #2
    2eac:	4620      	mov	r0, r4
    2eae:	4798      	blx	r3
}
    2eb0:	2000      	movs	r0, #0
    2eb2:	bd10      	pop	{r4, pc}
		do_writemore(conn);
    2eb4:	4b02      	ldr	r3, [pc, #8]	; (2ec0 <poll_tcp+0x50>)
    2eb6:	4798      	blx	r3
    2eb8:	e7e1      	b.n	2e7e <poll_tcp+0xe>
		do_close_internal(conn);
    2eba:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <poll_tcp+0x54>)
    2ebc:	4798      	blx	r3
    2ebe:	e7de      	b.n	2e7e <poll_tcp+0xe>
    2ec0:	00002c3d 	.word	0x00002c3d
    2ec4:	00002d55 	.word	0x00002d55

00002ec8 <sent_tcp>:
{
    2ec8:	b538      	push	{r3, r4, r5, lr}
    2eca:	4604      	mov	r4, r0
    2ecc:	4615      	mov	r5, r2
	if (conn->state == NETCONN_WRITE) {
    2ece:	7843      	ldrb	r3, [r0, #1]
    2ed0:	2b01      	cmp	r3, #1
    2ed2:	d01a      	beq.n	2f0a <sent_tcp+0x42>
	} else if (conn->state == NETCONN_CLOSE) {
    2ed4:	2b04      	cmp	r3, #4
    2ed6:	d01b      	beq.n	2f10 <sent_tcp+0x48>
	if (conn) {
    2ed8:	b1ac      	cbz	r4, 2f06 <sent_tcp+0x3e>
		if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)
    2eda:	6863      	ldr	r3, [r4, #4]
    2edc:	b19b      	cbz	r3, 2f06 <sent_tcp+0x3e>
    2ede:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
    2ee2:	f640 3267 	movw	r2, #2919	; 0xb67
    2ee6:	4291      	cmp	r1, r2
    2ee8:	d90d      	bls.n	2f06 <sent_tcp+0x3e>
		    && (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
    2eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    2eee:	2b04      	cmp	r3, #4
    2ef0:	d809      	bhi.n	2f06 <sent_tcp+0x3e>
			conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
    2ef2:	7f23      	ldrb	r3, [r4, #28]
    2ef4:	f023 0310 	bic.w	r3, r3, #16
    2ef8:	7723      	strb	r3, [r4, #28]
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
    2efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2efc:	b11b      	cbz	r3, 2f06 <sent_tcp+0x3e>
    2efe:	462a      	mov	r2, r5
    2f00:	2102      	movs	r1, #2
    2f02:	4620      	mov	r0, r4
    2f04:	4798      	blx	r3
}
    2f06:	2000      	movs	r0, #0
    2f08:	bd38      	pop	{r3, r4, r5, pc}
		do_writemore(conn);
    2f0a:	4b03      	ldr	r3, [pc, #12]	; (2f18 <sent_tcp+0x50>)
    2f0c:	4798      	blx	r3
    2f0e:	e7e3      	b.n	2ed8 <sent_tcp+0x10>
		do_close_internal(conn);
    2f10:	4b02      	ldr	r3, [pc, #8]	; (2f1c <sent_tcp+0x54>)
    2f12:	4798      	blx	r3
    2f14:	e7e0      	b.n	2ed8 <sent_tcp+0x10>
    2f16:	bf00      	nop
    2f18:	00002c3d 	.word	0x00002c3d
    2f1c:	00002d55 	.word	0x00002d55

00002f20 <recv_tcp>:
{
    2f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn == NULL) {
    2f24:	b368      	cbz	r0, 2f82 <recv_tcp+0x62>
    2f26:	4607      	mov	r7, r0
    2f28:	4698      	mov	r8, r3
    2f2a:	4614      	mov	r4, r2
    2f2c:	460d      	mov	r5, r1
	if (!sys_mbox_valid(&conn->recvmbox)) {
    2f2e:	f100 0610 	add.w	r6, r0, #16
    2f32:	4630      	mov	r0, r6
    2f34:	4b17      	ldr	r3, [pc, #92]	; (2f94 <recv_tcp+0x74>)
    2f36:	4798      	blx	r3
    2f38:	b948      	cbnz	r0, 2f4e <recv_tcp+0x2e>
		if (p != NULL) {
    2f3a:	b32c      	cbz	r4, 2f88 <recv_tcp+0x68>
			tcp_recved(pcb, p->tot_len);
    2f3c:	8921      	ldrh	r1, [r4, #8]
    2f3e:	4628      	mov	r0, r5
    2f40:	4b15      	ldr	r3, [pc, #84]	; (2f98 <recv_tcp+0x78>)
    2f42:	4798      	blx	r3
			pbuf_free(p);
    2f44:	4620      	mov	r0, r4
    2f46:	4b15      	ldr	r3, [pc, #84]	; (2f9c <recv_tcp+0x7c>)
    2f48:	4798      	blx	r3
		return ERR_OK;
    2f4a:	2400      	movs	r4, #0
    2f4c:	e014      	b.n	2f78 <recv_tcp+0x58>
	NETCONN_SET_SAFE_ERR(conn, err);
    2f4e:	f997 3008 	ldrsb.w	r3, [r7, #8]
    2f52:	f113 0f09 	cmn.w	r3, #9
    2f56:	db01      	blt.n	2f5c <recv_tcp+0x3c>
    2f58:	f887 8008 	strb.w	r8, [r7, #8]
	if (p != NULL) {
    2f5c:	b17c      	cbz	r4, 2f7e <recv_tcp+0x5e>
		len = p->tot_len;
    2f5e:	8925      	ldrh	r5, [r4, #8]
	if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    2f60:	4621      	mov	r1, r4
    2f62:	4630      	mov	r0, r6
    2f64:	4b0e      	ldr	r3, [pc, #56]	; (2fa0 <recv_tcp+0x80>)
    2f66:	4798      	blx	r3
    2f68:	4604      	mov	r4, r0
    2f6a:	b978      	cbnz	r0, 2f8c <recv_tcp+0x6c>
		API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
    2f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f6e:	b11b      	cbz	r3, 2f78 <recv_tcp+0x58>
    2f70:	462a      	mov	r2, r5
    2f72:	2100      	movs	r1, #0
    2f74:	4638      	mov	r0, r7
    2f76:	4798      	blx	r3
}
    2f78:	4620      	mov	r0, r4
    2f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2f7e:	2500      	movs	r5, #0
    2f80:	e7ee      	b.n	2f60 <recv_tcp+0x40>
		return ERR_VAL;
    2f82:	f06f 0405 	mvn.w	r4, #5
    2f86:	e7f7      	b.n	2f78 <recv_tcp+0x58>
		return ERR_OK;
    2f88:	2400      	movs	r4, #0
    2f8a:	e7f5      	b.n	2f78 <recv_tcp+0x58>
		return ERR_MEM;
    2f8c:	f04f 34ff 	mov.w	r4, #4294967295
    2f90:	e7f2      	b.n	2f78 <recv_tcp+0x58>
    2f92:	bf00      	nop
    2f94:	000026b1 	.word	0x000026b1
    2f98:	0000591d 	.word	0x0000591d
    2f9c:	000054a1 	.word	0x000054a1
    2fa0:	0000259d 	.word	0x0000259d

00002fa4 <do_newconn>:
{
    2fa4:	b510      	push	{r4, lr}
    2fa6:	4604      	mov	r4, r0
	msg->err = ERR_OK;
    2fa8:	2300      	movs	r3, #0
    2faa:	7103      	strb	r3, [r0, #4]
	if (msg->conn->pcb.tcp == NULL) {
    2fac:	6803      	ldr	r3, [r0, #0]
    2fae:	685b      	ldr	r3, [r3, #4]
    2fb0:	b123      	cbz	r3, 2fbc <do_newconn+0x18>
	TCPIP_APIMSG_ACK(msg);
    2fb2:	6820      	ldr	r0, [r4, #0]
    2fb4:	300c      	adds	r0, #12
    2fb6:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <do_newconn+0x20>)
    2fb8:	4798      	blx	r3
    2fba:	bd10      	pop	{r4, pc}
		pcb_new(msg);
    2fbc:	4b02      	ldr	r3, [pc, #8]	; (2fc8 <do_newconn+0x24>)
    2fbe:	4798      	blx	r3
    2fc0:	e7f7      	b.n	2fb2 <do_newconn+0xe>
    2fc2:	bf00      	nop
    2fc4:	000024c1 	.word	0x000024c1
    2fc8:	00002bc9 	.word	0x00002bc9

00002fcc <netconn_alloc>:
{
    2fcc:	b570      	push	{r4, r5, r6, lr}
    2fce:	4605      	mov	r5, r0
    2fd0:	460e      	mov	r6, r1
	conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
    2fd2:	2007      	movs	r0, #7
    2fd4:	4b15      	ldr	r3, [pc, #84]	; (302c <netconn_alloc+0x60>)
    2fd6:	4798      	blx	r3
	if (conn == NULL) {
    2fd8:	4604      	mov	r4, r0
    2fda:	b1d8      	cbz	r0, 3014 <netconn_alloc+0x48>
	conn->last_err = ERR_OK;
    2fdc:	2100      	movs	r1, #0
    2fde:	7201      	strb	r1, [r0, #8]
	conn->type     = t;
    2fe0:	7005      	strb	r5, [r0, #0]
	conn->pcb.tcp  = NULL;
    2fe2:	6041      	str	r1, [r0, #4]
	if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
    2fe4:	f100 050c 	add.w	r5, r0, #12
    2fe8:	4628      	mov	r0, r5
    2fea:	4b11      	ldr	r3, [pc, #68]	; (3030 <netconn_alloc+0x64>)
    2fec:	4798      	blx	r3
    2fee:	b9b0      	cbnz	r0, 301e <netconn_alloc+0x52>
	if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
    2ff0:	2110      	movs	r1, #16
    2ff2:	1860      	adds	r0, r4, r1
    2ff4:	4b0f      	ldr	r3, [pc, #60]	; (3034 <netconn_alloc+0x68>)
    2ff6:	4798      	blx	r3
    2ff8:	b970      	cbnz	r0, 3018 <netconn_alloc+0x4c>
	sys_mbox_set_invalid(&conn->acceptmbox);
    2ffa:	f104 0014 	add.w	r0, r4, #20
    2ffe:	4b0e      	ldr	r3, [pc, #56]	; (3038 <netconn_alloc+0x6c>)
    3000:	4798      	blx	r3
	conn->state = NETCONN_NONE;
    3002:	2300      	movs	r3, #0
    3004:	7063      	strb	r3, [r4, #1]
	conn->socket = -1;
    3006:	f04f 32ff 	mov.w	r2, #4294967295
    300a:	61a2      	str	r2, [r4, #24]
	conn->callback = callback;
    300c:	62a6      	str	r6, [r4, #40]	; 0x28
	conn->current_msg  = NULL;
    300e:	6263      	str	r3, [r4, #36]	; 0x24
	conn->write_offset = 0;
    3010:	6223      	str	r3, [r4, #32]
	conn->flags = 0;
    3012:	7723      	strb	r3, [r4, #28]
}
    3014:	4620      	mov	r0, r4
    3016:	bd70      	pop	{r4, r5, r6, pc}
		sys_sem_free(&conn->op_completed);
    3018:	4628      	mov	r0, r5
    301a:	4b08      	ldr	r3, [pc, #32]	; (303c <netconn_alloc+0x70>)
    301c:	4798      	blx	r3
	memp_free(MEMP_NETCONN, conn);
    301e:	4621      	mov	r1, r4
    3020:	2007      	movs	r0, #7
    3022:	4b07      	ldr	r3, [pc, #28]	; (3040 <netconn_alloc+0x74>)
    3024:	4798      	blx	r3
	return NULL;
    3026:	2400      	movs	r4, #0
    3028:	e7f4      	b.n	3014 <netconn_alloc+0x48>
    302a:	bf00      	nop
    302c:	000051d5 	.word	0x000051d5
    3030:	00002449 	.word	0x00002449
    3034:	00002545 	.word	0x00002545
    3038:	000026b5 	.word	0x000026b5
    303c:	000024ad 	.word	0x000024ad
    3040:	000051fd 	.word	0x000051fd

00003044 <netconn_free>:
{
    3044:	b538      	push	{r3, r4, r5, lr}
    3046:	4604      	mov	r4, r0
	sys_sem_free(&conn->op_completed);
    3048:	f100 050c 	add.w	r5, r0, #12
    304c:	4628      	mov	r0, r5
    304e:	4b05      	ldr	r3, [pc, #20]	; (3064 <netconn_free+0x20>)
    3050:	4798      	blx	r3
	sys_sem_set_invalid(&conn->op_completed);
    3052:	4628      	mov	r0, r5
    3054:	4b04      	ldr	r3, [pc, #16]	; (3068 <netconn_free+0x24>)
    3056:	4798      	blx	r3
	memp_free(MEMP_NETCONN, conn);
    3058:	4621      	mov	r1, r4
    305a:	2007      	movs	r0, #7
    305c:	4b03      	ldr	r3, [pc, #12]	; (306c <netconn_free+0x28>)
    305e:	4798      	blx	r3
    3060:	bd38      	pop	{r3, r4, r5, pc}
    3062:	bf00      	nop
    3064:	000024ad 	.word	0x000024ad
    3068:	0000253d 	.word	0x0000253d
    306c:	000051fd 	.word	0x000051fd

00003070 <netconn_drain>:
{
    3070:	b570      	push	{r4, r5, r6, lr}
    3072:	b082      	sub	sp, #8
    3074:	4604      	mov	r4, r0
	if (sys_mbox_valid(&conn->recvmbox)) {
    3076:	f100 0510 	add.w	r5, r0, #16
    307a:	4628      	mov	r0, r5
    307c:	4b23      	ldr	r3, [pc, #140]	; (310c <netconn_drain+0x9c>)
    307e:	4798      	blx	r3
    3080:	b980      	cbnz	r0, 30a4 <netconn_drain+0x34>
	if (sys_mbox_valid(&conn->acceptmbox)) {
    3082:	f104 0514 	add.w	r5, r4, #20
    3086:	4628      	mov	r0, r5
    3088:	4b20      	ldr	r3, [pc, #128]	; (310c <netconn_drain+0x9c>)
    308a:	4798      	blx	r3
    308c:	bb10      	cbnz	r0, 30d4 <netconn_drain+0x64>
    308e:	e03a      	b.n	3106 <netconn_drain+0x96>
				if (mem != NULL) {
    3090:	9e01      	ldr	r6, [sp, #4]
    3092:	b13e      	cbz	r6, 30a4 <netconn_drain+0x34>
					if (conn->pcb.tcp != NULL) {
    3094:	6860      	ldr	r0, [r4, #4]
    3096:	b110      	cbz	r0, 309e <netconn_drain+0x2e>
						tcp_recved(conn->pcb.tcp, p->tot_len);
    3098:	8931      	ldrh	r1, [r6, #8]
    309a:	4b1d      	ldr	r3, [pc, #116]	; (3110 <netconn_drain+0xa0>)
    309c:	4798      	blx	r3
					pbuf_free(p);
    309e:	4630      	mov	r0, r6
    30a0:	4b1c      	ldr	r3, [pc, #112]	; (3114 <netconn_drain+0xa4>)
    30a2:	4798      	blx	r3
		while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
    30a4:	a901      	add	r1, sp, #4
    30a6:	4628      	mov	r0, r5
    30a8:	4b1b      	ldr	r3, [pc, #108]	; (3118 <netconn_drain+0xa8>)
    30aa:	4798      	blx	r3
    30ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    30b0:	d006      	beq.n	30c0 <netconn_drain+0x50>
			if (conn->type == NETCONN_TCP) {
    30b2:	7823      	ldrb	r3, [r4, #0]
    30b4:	2b10      	cmp	r3, #16
    30b6:	d0eb      	beq.n	3090 <netconn_drain+0x20>
				netbuf_delete((struct netbuf *)mem);
    30b8:	9801      	ldr	r0, [sp, #4]
    30ba:	4b18      	ldr	r3, [pc, #96]	; (311c <netconn_drain+0xac>)
    30bc:	4798      	blx	r3
    30be:	e7f1      	b.n	30a4 <netconn_drain+0x34>
		sys_mbox_free(&conn->recvmbox);
    30c0:	4628      	mov	r0, r5
    30c2:	4b17      	ldr	r3, [pc, #92]	; (3120 <netconn_drain+0xb0>)
    30c4:	4798      	blx	r3
		sys_mbox_set_invalid(&conn->recvmbox);
    30c6:	4628      	mov	r0, r5
    30c8:	4b16      	ldr	r3, [pc, #88]	; (3124 <netconn_drain+0xb4>)
    30ca:	4798      	blx	r3
    30cc:	e7d9      	b.n	3082 <netconn_drain+0x12>
			netconn_free(newconn);
    30ce:	4620      	mov	r0, r4
    30d0:	4b15      	ldr	r3, [pc, #84]	; (3128 <netconn_drain+0xb8>)
    30d2:	4798      	blx	r3
		while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
    30d4:	a901      	add	r1, sp, #4
    30d6:	4628      	mov	r0, r5
    30d8:	4b0f      	ldr	r3, [pc, #60]	; (3118 <netconn_drain+0xa8>)
    30da:	4798      	blx	r3
    30dc:	f1b0 3fff 	cmp.w	r0, #4294967295
    30e0:	d00b      	beq.n	30fa <netconn_drain+0x8a>
			struct netconn *newconn = (struct netconn *)mem;
    30e2:	9c01      	ldr	r4, [sp, #4]
			netconn_drain(newconn);
    30e4:	4620      	mov	r0, r4
    30e6:	f7ff ffc3 	bl	3070 <netconn_drain>
			if (newconn->pcb.tcp != NULL) {
    30ea:	6860      	ldr	r0, [r4, #4]
    30ec:	2800      	cmp	r0, #0
    30ee:	d0ee      	beq.n	30ce <netconn_drain+0x5e>
				tcp_abort(newconn->pcb.tcp);
    30f0:	4b0e      	ldr	r3, [pc, #56]	; (312c <netconn_drain+0xbc>)
    30f2:	4798      	blx	r3
				newconn->pcb.tcp = NULL;
    30f4:	2300      	movs	r3, #0
    30f6:	6063      	str	r3, [r4, #4]
    30f8:	e7e9      	b.n	30ce <netconn_drain+0x5e>
		sys_mbox_free(&conn->acceptmbox);
    30fa:	4628      	mov	r0, r5
    30fc:	4b08      	ldr	r3, [pc, #32]	; (3120 <netconn_drain+0xb0>)
    30fe:	4798      	blx	r3
		sys_mbox_set_invalid(&conn->acceptmbox);
    3100:	4628      	mov	r0, r5
    3102:	4b08      	ldr	r3, [pc, #32]	; (3124 <netconn_drain+0xb4>)
    3104:	4798      	blx	r3
}
    3106:	b002      	add	sp, #8
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	bf00      	nop
    310c:	000026b1 	.word	0x000026b1
    3110:	0000591d 	.word	0x0000591d
    3114:	000054a1 	.word	0x000054a1
    3118:	00002681 	.word	0x00002681
    311c:	0000339d 	.word	0x0000339d
    3120:	00002565 	.word	0x00002565
    3124:	000026b5 	.word	0x000026b5
    3128:	00003045 	.word	0x00003045
    312c:	000061bd 	.word	0x000061bd

00003130 <do_delconn>:
{
    3130:	b510      	push	{r4, lr}
    3132:	4604      	mov	r4, r0
	if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)
    3134:	6800      	ldr	r0, [r0, #0]
    3136:	7843      	ldrb	r3, [r0, #1]
    3138:	b163      	cbz	r3, 3154 <do_delconn+0x24>
    313a:	2b02      	cmp	r3, #2
    313c:	d00a      	beq.n	3154 <do_delconn+0x24>
	    && (msg->conn->state != NETCONN_CONNECT)) {
    313e:	2b03      	cmp	r3, #3
    3140:	d008      	beq.n	3154 <do_delconn+0x24>
		msg->err = ERR_INPROGRESS;
    3142:	23fb      	movs	r3, #251	; 0xfb
    3144:	7123      	strb	r3, [r4, #4]
	if (sys_sem_valid(&msg->conn->op_completed)) {
    3146:	6820      	ldr	r0, [r4, #0]
    3148:	300c      	adds	r0, #12
    314a:	4b1b      	ldr	r3, [pc, #108]	; (31b8 <do_delconn+0x88>)
    314c:	4798      	blx	r3
    314e:	2800      	cmp	r0, #0
    3150:	d12d      	bne.n	31ae <do_delconn+0x7e>
    3152:	bd10      	pop	{r4, pc}
		netconn_drain(msg->conn);
    3154:	4b19      	ldr	r3, [pc, #100]	; (31bc <do_delconn+0x8c>)
    3156:	4798      	blx	r3
		if (msg->conn->pcb.tcp != NULL) {
    3158:	6822      	ldr	r2, [r4, #0]
    315a:	6851      	ldr	r1, [r2, #4]
    315c:	b179      	cbz	r1, 317e <do_delconn+0x4e>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    315e:	7813      	ldrb	r3, [r2, #0]
    3160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3164:	2b10      	cmp	r3, #16
    3166:	d018      	beq.n	319a <do_delconn+0x6a>
    3168:	2b20      	cmp	r3, #32
    316a:	d105      	bne.n	3178 <do_delconn+0x48>
				msg->conn->pcb.udp->recv_arg = NULL;
    316c:	2300      	movs	r3, #0
    316e:	61cb      	str	r3, [r1, #28]
				udp_remove(msg->conn->pcb.udp);
    3170:	6823      	ldr	r3, [r4, #0]
    3172:	6858      	ldr	r0, [r3, #4]
    3174:	4b12      	ldr	r3, [pc, #72]	; (31c0 <do_delconn+0x90>)
    3176:	4798      	blx	r3
			msg->conn->pcb.tcp = NULL;
    3178:	6823      	ldr	r3, [r4, #0]
    317a:	2200      	movs	r2, #0
    317c:	605a      	str	r2, [r3, #4]
		API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
    317e:	6820      	ldr	r0, [r4, #0]
    3180:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3182:	b113      	cbz	r3, 318a <do_delconn+0x5a>
    3184:	2200      	movs	r2, #0
    3186:	4611      	mov	r1, r2
    3188:	4798      	blx	r3
		API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
    318a:	6820      	ldr	r0, [r4, #0]
    318c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    318e:	2b00      	cmp	r3, #0
    3190:	d0d9      	beq.n	3146 <do_delconn+0x16>
    3192:	2200      	movs	r2, #0
    3194:	2102      	movs	r1, #2
    3196:	4798      	blx	r3
    3198:	e7d5      	b.n	3146 <do_delconn+0x16>
				msg->conn->state       = NETCONN_CLOSE;
    319a:	2304      	movs	r3, #4
    319c:	7053      	strb	r3, [r2, #1]
				msg->msg.sd.shut       = NETCONN_SHUT_RDWR;
    319e:	2303      	movs	r3, #3
    31a0:	7223      	strb	r3, [r4, #8]
				msg->conn->current_msg = msg;
    31a2:	6823      	ldr	r3, [r4, #0]
    31a4:	625c      	str	r4, [r3, #36]	; 0x24
				do_close_internal(msg->conn);
    31a6:	6820      	ldr	r0, [r4, #0]
    31a8:	4b06      	ldr	r3, [pc, #24]	; (31c4 <do_delconn+0x94>)
    31aa:	4798      	blx	r3
				return;
    31ac:	bd10      	pop	{r4, pc}
		sys_sem_signal(&msg->conn->op_completed);
    31ae:	6820      	ldr	r0, [r4, #0]
    31b0:	300c      	adds	r0, #12
    31b2:	4b05      	ldr	r3, [pc, #20]	; (31c8 <do_delconn+0x98>)
    31b4:	4798      	blx	r3
    31b6:	e7cc      	b.n	3152 <do_delconn+0x22>
    31b8:	00002539 	.word	0x00002539
    31bc:	00003071 	.word	0x00003071
    31c0:	000089a1 	.word	0x000089a1
    31c4:	00002d55 	.word	0x00002d55
    31c8:	000024c1 	.word	0x000024c1

000031cc <do_bind>:
{
    31cc:	b510      	push	{r4, lr}
    31ce:	4604      	mov	r4, r0
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    31d0:	6803      	ldr	r3, [r0, #0]
    31d2:	f993 2008 	ldrsb.w	r2, [r3, #8]
    31d6:	f112 0f09 	cmn.w	r2, #9
    31da:	db10      	blt.n	31fe <do_bind+0x32>
		msg->err = ERR_VAL;
    31dc:	22fa      	movs	r2, #250	; 0xfa
    31de:	7102      	strb	r2, [r0, #4]
		if (msg->conn->pcb.tcp != NULL) {
    31e0:	6858      	ldr	r0, [r3, #4]
    31e2:	b168      	cbz	r0, 3200 <do_bind+0x34>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    31ea:	2b10      	cmp	r3, #16
    31ec:	d00d      	beq.n	320a <do_bind+0x3e>
    31ee:	2b20      	cmp	r3, #32
    31f0:	d106      	bne.n	3200 <do_bind+0x34>
				msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
    31f2:	89a2      	ldrh	r2, [r4, #12]
    31f4:	68a1      	ldr	r1, [r4, #8]
    31f6:	4b08      	ldr	r3, [pc, #32]	; (3218 <do_bind+0x4c>)
    31f8:	4798      	blx	r3
    31fa:	7120      	strb	r0, [r4, #4]
				break;
    31fc:	e000      	b.n	3200 <do_bind+0x34>
		msg->err = msg->conn->last_err;
    31fe:	7102      	strb	r2, [r0, #4]
	TCPIP_APIMSG_ACK(msg);
    3200:	6820      	ldr	r0, [r4, #0]
    3202:	300c      	adds	r0, #12
    3204:	4b05      	ldr	r3, [pc, #20]	; (321c <do_bind+0x50>)
    3206:	4798      	blx	r3
    3208:	bd10      	pop	{r4, pc}
				msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
    320a:	89a2      	ldrh	r2, [r4, #12]
    320c:	68a1      	ldr	r1, [r4, #8]
    320e:	4b04      	ldr	r3, [pc, #16]	; (3220 <do_bind+0x54>)
    3210:	4798      	blx	r3
    3212:	7120      	strb	r0, [r4, #4]
				break;
    3214:	e7f4      	b.n	3200 <do_bind+0x34>
    3216:	bf00      	nop
    3218:	000087c1 	.word	0x000087c1
    321c:	000024c1 	.word	0x000024c1
    3220:	0000584d 	.word	0x0000584d

00003224 <do_send>:
{
    3224:	b538      	push	{r3, r4, r5, lr}
    3226:	4604      	mov	r4, r0
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    3228:	6803      	ldr	r3, [r0, #0]
    322a:	f993 2008 	ldrsb.w	r2, [r3, #8]
    322e:	f112 0f09 	cmn.w	r2, #9
    3232:	db13      	blt.n	325c <do_send+0x38>
		msg->err = ERR_CONN;
    3234:	22f3      	movs	r2, #243	; 0xf3
    3236:	7102      	strb	r2, [r0, #4]
		if (msg->conn->pcb.tcp != NULL) {
    3238:	6858      	ldr	r0, [r3, #4]
    323a:	b180      	cbz	r0, 325e <do_send+0x3a>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    323c:	781b      	ldrb	r3, [r3, #0]
    323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3242:	2b20      	cmp	r3, #32
    3244:	d10b      	bne.n	325e <do_send+0x3a>
				if (ip_addr_isany(&msg->msg.b->addr)) {
    3246:	68a1      	ldr	r1, [r4, #8]
    3248:	f111 0208 	adds.w	r2, r1, #8
    324c:	d001      	beq.n	3252 <do_send+0x2e>
    324e:	688b      	ldr	r3, [r1, #8]
    3250:	b953      	cbnz	r3, 3268 <do_send+0x44>
					msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
    3252:	6809      	ldr	r1, [r1, #0]
    3254:	4b07      	ldr	r3, [pc, #28]	; (3274 <do_send+0x50>)
    3256:	4798      	blx	r3
    3258:	7120      	strb	r0, [r4, #4]
    325a:	e000      	b.n	325e <do_send+0x3a>
		msg->err = msg->conn->last_err;
    325c:	7102      	strb	r2, [r0, #4]
	TCPIP_APIMSG_ACK(msg);
    325e:	6820      	ldr	r0, [r4, #0]
    3260:	300c      	adds	r0, #12
    3262:	4b05      	ldr	r3, [pc, #20]	; (3278 <do_send+0x54>)
    3264:	4798      	blx	r3
    3266:	bd38      	pop	{r3, r4, r5, pc}
					msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
    3268:	898b      	ldrh	r3, [r1, #12]
    326a:	6809      	ldr	r1, [r1, #0]
    326c:	4d03      	ldr	r5, [pc, #12]	; (327c <do_send+0x58>)
    326e:	47a8      	blx	r5
    3270:	7120      	strb	r0, [r4, #4]
    3272:	e7f4      	b.n	325e <do_send+0x3a>
    3274:	00008985 	.word	0x00008985
    3278:	000024c1 	.word	0x000024c1
    327c:	00008951 	.word	0x00008951

00003280 <do_recv>:
{
    3280:	b570      	push	{r4, r5, r6, lr}
    3282:	4606      	mov	r6, r0
	msg->err = ERR_OK;
    3284:	2300      	movs	r3, #0
    3286:	7103      	strb	r3, [r0, #4]
	if (msg->conn->pcb.tcp != NULL) {
    3288:	6803      	ldr	r3, [r0, #0]
    328a:	685a      	ldr	r2, [r3, #4]
    328c:	b112      	cbz	r2, 3294 <do_recv+0x14>
		if (msg->conn->type == NETCONN_TCP) {
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	2b10      	cmp	r3, #16
    3292:	d004      	beq.n	329e <do_recv+0x1e>
	TCPIP_APIMSG_ACK(msg);
    3294:	6830      	ldr	r0, [r6, #0]
    3296:	300c      	adds	r0, #12
    3298:	4b09      	ldr	r3, [pc, #36]	; (32c0 <do_recv+0x40>)
    329a:	4798      	blx	r3
    329c:	bd70      	pop	{r4, r5, r6, pc}
				u32_t remaining = msg->msg.r.len;
    329e:	6884      	ldr	r4, [r0, #8]
    32a0:	e008      	b.n	32b4 <do_recv+0x34>
					u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
    32a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
					tcp_recved(msg->conn->pcb.tcp, recved);
    32a6:	6833      	ldr	r3, [r6, #0]
    32a8:	4629      	mov	r1, r5
    32aa:	6858      	ldr	r0, [r3, #4]
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <do_recv+0x44>)
    32ae:	4798      	blx	r3
				} while (remaining != 0);
    32b0:	1b64      	subs	r4, r4, r5
    32b2:	d0ef      	beq.n	3294 <do_recv+0x14>
					u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
    32b4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    32b8:	d2f3      	bcs.n	32a2 <do_recv+0x22>
    32ba:	b2a5      	uxth	r5, r4
    32bc:	e7f3      	b.n	32a6 <do_recv+0x26>
    32be:	bf00      	nop
    32c0:	000024c1 	.word	0x000024c1
    32c4:	0000591d 	.word	0x0000591d

000032c8 <do_write>:
 * Called from netconn_write
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void do_write(struct api_msg_msg *msg)
{
    32c8:	b508      	push	{r3, lr}
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    32ca:	6803      	ldr	r3, [r0, #0]
    32cc:	f993 2008 	ldrsb.w	r2, [r3, #8]
    32d0:	f112 0f09 	cmn.w	r2, #9
    32d4:	da05      	bge.n	32e2 <do_write+0x1a>
		msg->err = msg->conn->last_err;
    32d6:	7102      	strb	r2, [r0, #4]
		} else {
			msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
		}
	}
	TCPIP_APIMSG_ACK(msg);
    32d8:	f103 000c 	add.w	r0, r3, #12
    32dc:	4b0e      	ldr	r3, [pc, #56]	; (3318 <do_write+0x50>)
    32de:	4798      	blx	r3
    32e0:	bd08      	pop	{r3, pc}
		if (msg->conn->type == NETCONN_TCP) {
    32e2:	781a      	ldrb	r2, [r3, #0]
    32e4:	2a10      	cmp	r2, #16
    32e6:	d002      	beq.n	32ee <do_write+0x26>
			msg->err = ERR_VAL;
    32e8:	22fa      	movs	r2, #250	; 0xfa
    32ea:	7102      	strb	r2, [r0, #4]
    32ec:	e7f4      	b.n	32d8 <do_write+0x10>
			if (msg->conn->state != NETCONN_NONE) {
    32ee:	785a      	ldrb	r2, [r3, #1]
    32f0:	b112      	cbz	r2, 32f8 <do_write+0x30>
				msg->err = ERR_INPROGRESS;
    32f2:	22fb      	movs	r2, #251	; 0xfb
    32f4:	7102      	strb	r2, [r0, #4]
    32f6:	e7ef      	b.n	32d8 <do_write+0x10>
			} else if (msg->conn->pcb.tcp != NULL) {
    32f8:	685a      	ldr	r2, [r3, #4]
    32fa:	b152      	cbz	r2, 3312 <do_write+0x4a>
				msg->conn->state = NETCONN_WRITE;
    32fc:	2201      	movs	r2, #1
    32fe:	705a      	strb	r2, [r3, #1]
				msg->conn->current_msg  = msg;
    3300:	6803      	ldr	r3, [r0, #0]
    3302:	6258      	str	r0, [r3, #36]	; 0x24
				msg->conn->write_offset = 0;
    3304:	6803      	ldr	r3, [r0, #0]
    3306:	2200      	movs	r2, #0
    3308:	621a      	str	r2, [r3, #32]
				do_writemore(msg->conn);
    330a:	6800      	ldr	r0, [r0, #0]
    330c:	4b03      	ldr	r3, [pc, #12]	; (331c <do_write+0x54>)
    330e:	4798      	blx	r3
				return;
    3310:	bd08      	pop	{r3, pc}
				msg->err = ERR_CONN;
    3312:	22f3      	movs	r2, #243	; 0xf3
    3314:	7102      	strb	r2, [r0, #4]
    3316:	e7df      	b.n	32d8 <do_write+0x10>
    3318:	000024c1 	.word	0x000024c1
    331c:	00002c3d 	.word	0x00002c3d

00003320 <do_getaddr>:
 * Called from netconn_getaddr
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void do_getaddr(struct api_msg_msg *msg)
{
    3320:	b508      	push	{r3, lr}
	if (msg->conn->pcb.ip != NULL) {
    3322:	6803      	ldr	r3, [r0, #0]
    3324:	685b      	ldr	r3, [r3, #4]
    3326:	2b00      	cmp	r3, #0
    3328:	d032      	beq.n	3390 <do_getaddr+0x70>
		*(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip : msg->conn->pcb.ip->remote_ip);
    332a:	6882      	ldr	r2, [r0, #8]
    332c:	7c01      	ldrb	r1, [r0, #16]
    332e:	b1a9      	cbz	r1, 335c <do_getaddr+0x3c>
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	6013      	str	r3, [r2, #0]

		msg->err = ERR_OK;
    3334:	2300      	movs	r3, #0
    3336:	7103      	strb	r3, [r0, #4]
		switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    3338:	6802      	ldr	r2, [r0, #0]
    333a:	7813      	ldrb	r3, [r2, #0]
    333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3340:	2b10      	cmp	r3, #16
    3342:	d017      	beq.n	3374 <do_getaddr+0x54>
    3344:	2b20      	cmp	r3, #32
    3346:	d11b      	bne.n	3380 <do_getaddr+0x60>
			}
			break;
#endif /* LWIP_RAW */
#if LWIP_UDP
		case NETCONN_UDP:
			if (msg->msg.ad.local) {
    3348:	7c03      	ldrb	r3, [r0, #16]
    334a:	b953      	cbnz	r3, 3362 <do_getaddr+0x42>
				*(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
			} else {
				if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
    334c:	6853      	ldr	r3, [r2, #4]
    334e:	7c1a      	ldrb	r2, [r3, #16]
    3350:	f012 0f04 	tst.w	r2, #4
    3354:	d10a      	bne.n	336c <do_getaddr+0x4c>
					msg->err = ERR_CONN;
    3356:	23f3      	movs	r3, #243	; 0xf3
    3358:	7103      	strb	r3, [r0, #4]
    335a:	e011      	b.n	3380 <do_getaddr+0x60>
		*(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip : msg->conn->pcb.ip->remote_ip);
    335c:	685b      	ldr	r3, [r3, #4]
    335e:	6013      	str	r3, [r2, #0]
    3360:	e7e8      	b.n	3334 <do_getaddr+0x14>
				*(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
    3362:	68c3      	ldr	r3, [r0, #12]
    3364:	6852      	ldr	r2, [r2, #4]
    3366:	8a52      	ldrh	r2, [r2, #18]
    3368:	801a      	strh	r2, [r3, #0]
    336a:	e009      	b.n	3380 <do_getaddr+0x60>
				} else {
					*(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
    336c:	68c2      	ldr	r2, [r0, #12]
    336e:	8a9b      	ldrh	r3, [r3, #20]
    3370:	8013      	strh	r3, [r2, #0]
    3372:	e005      	b.n	3380 <do_getaddr+0x60>
			}
			break;
#endif /* LWIP_UDP */
#if LWIP_TCP
		case NETCONN_TCP:
			*(msg->msg.ad.port)
    3374:	68c3      	ldr	r3, [r0, #12]
			    = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
    3376:	7c01      	ldrb	r1, [r0, #16]
    3378:	b139      	cbz	r1, 338a <do_getaddr+0x6a>
    337a:	6852      	ldr	r2, [r2, #4]
    337c:	8b52      	ldrh	r2, [r2, #26]
    337e:	801a      	strh	r2, [r3, #0]
			break;
		}
	} else {
		msg->err = ERR_CONN;
	}
	TCPIP_APIMSG_ACK(msg);
    3380:	6800      	ldr	r0, [r0, #0]
    3382:	300c      	adds	r0, #12
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <do_getaddr+0x78>)
    3386:	4798      	blx	r3
    3388:	bd08      	pop	{r3, pc}
			    = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
    338a:	6852      	ldr	r2, [r2, #4]
    338c:	8b92      	ldrh	r2, [r2, #28]
    338e:	e7f6      	b.n	337e <do_getaddr+0x5e>
		msg->err = ERR_CONN;
    3390:	23f3      	movs	r3, #243	; 0xf3
    3392:	7103      	strb	r3, [r0, #4]
    3394:	e7f4      	b.n	3380 <do_getaddr+0x60>
    3396:	bf00      	nop
    3398:	000024c1 	.word	0x000024c1

0000339c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void netbuf_delete(struct netbuf *buf)
{
	if (buf != NULL) {
    339c:	b168      	cbz	r0, 33ba <netbuf_delete+0x1e>
{
    339e:	b510      	push	{r4, lr}
    33a0:	4604      	mov	r4, r0
		if (buf->p != NULL) {
    33a2:	6800      	ldr	r0, [r0, #0]
    33a4:	b120      	cbz	r0, 33b0 <netbuf_delete+0x14>
			pbuf_free(buf->p);
    33a6:	4b05      	ldr	r3, [pc, #20]	; (33bc <netbuf_delete+0x20>)
    33a8:	4798      	blx	r3
			buf->p = buf->ptr = NULL;
    33aa:	2300      	movs	r3, #0
    33ac:	6063      	str	r3, [r4, #4]
    33ae:	6023      	str	r3, [r4, #0]
		}
		memp_free(MEMP_NETBUF, buf);
    33b0:	4621      	mov	r1, r4
    33b2:	2006      	movs	r0, #6
    33b4:	4b02      	ldr	r3, [pc, #8]	; (33c0 <netbuf_delete+0x24>)
    33b6:	4798      	blx	r3
    33b8:	bd10      	pop	{r4, pc}
    33ba:	4770      	bx	lr
    33bc:	000054a1 	.word	0x000054a1
    33c0:	000051fd 	.word	0x000051fd

000033c4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void netbuf_free(struct netbuf *buf)
{
	LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
    33c4:	b148      	cbz	r0, 33da <netbuf_free+0x16>
{
    33c6:	b510      	push	{r4, lr}
    33c8:	4604      	mov	r4, r0
	if (buf->p != NULL) {
    33ca:	6800      	ldr	r0, [r0, #0]
    33cc:	b108      	cbz	r0, 33d2 <netbuf_free+0xe>
		pbuf_free(buf->p);
    33ce:	4b03      	ldr	r3, [pc, #12]	; (33dc <netbuf_free+0x18>)
    33d0:	4798      	blx	r3
	}
	buf->p = buf->ptr = NULL;
    33d2:	2300      	movs	r3, #0
    33d4:	6063      	str	r3, [r4, #4]
    33d6:	6023      	str	r3, [r4, #0]
    33d8:	bd10      	pop	{r4, pc}
    33da:	e7fe      	b.n	33da <netbuf_free+0x16>
    33dc:	000054a1 	.word	0x000054a1

000033e0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
	LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
    33e0:	b1b0      	cbz	r0, 3410 <netbuf_ref+0x30>
{
    33e2:	b570      	push	{r4, r5, r6, lr}
    33e4:	4604      	mov	r4, r0
    33e6:	4615      	mov	r5, r2
    33e8:	460e      	mov	r6, r1
	if (buf->p != NULL) {
    33ea:	6800      	ldr	r0, [r0, #0]
    33ec:	b108      	cbz	r0, 33f2 <netbuf_ref+0x12>
		pbuf_free(buf->p);
    33ee:	4b0b      	ldr	r3, [pc, #44]	; (341c <netbuf_ref+0x3c>)
    33f0:	4798      	blx	r3
	}
	buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
    33f2:	2202      	movs	r2, #2
    33f4:	2100      	movs	r1, #0
    33f6:	4608      	mov	r0, r1
    33f8:	4b09      	ldr	r3, [pc, #36]	; (3420 <netbuf_ref+0x40>)
    33fa:	4798      	blx	r3
    33fc:	6020      	str	r0, [r4, #0]
	if (buf->p == NULL) {
    33fe:	b140      	cbz	r0, 3412 <netbuf_ref+0x32>
		buf->ptr = NULL;
		return ERR_MEM;
	}
	buf->p->payload = (void *)dataptr;
    3400:	6046      	str	r6, [r0, #4]
	buf->p->len = buf->p->tot_len = size;
    3402:	6823      	ldr	r3, [r4, #0]
    3404:	811d      	strh	r5, [r3, #8]
    3406:	815d      	strh	r5, [r3, #10]
	buf->ptr                      = buf->p;
    3408:	6823      	ldr	r3, [r4, #0]
    340a:	6063      	str	r3, [r4, #4]
	return ERR_OK;
    340c:	2000      	movs	r0, #0
}
    340e:	bd70      	pop	{r4, r5, r6, pc}
    3410:	e7fe      	b.n	3410 <netbuf_ref+0x30>
		buf->ptr = NULL;
    3412:	2300      	movs	r3, #0
    3414:	6063      	str	r3, [r4, #4]
		return ERR_MEM;
    3416:	f04f 30ff 	mov.w	r0, #4294967295
    341a:	bd70      	pop	{r4, r5, r6, pc}
    341c:	000054a1 	.word	0x000054a1
    3420:	00005505 	.word	0x00005505

00003424 <get_socket>:
 */
static struct lwip_sock *get_socket(int s)
{
	struct lwip_sock *sock;

	if ((s < 0) || (s >= NUM_SOCKETS)) {
    3424:	2803      	cmp	r0, #3
    3426:	d80e      	bhi.n	3446 <get_socket+0x22>
{
    3428:	b410      	push	{r4}
		LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
		set_errno(EBADF);
		return NULL;
	}

	sock = &sockets[s];
    342a:	4c08      	ldr	r4, [pc, #32]	; (344c <get_socket+0x28>)
    342c:	0043      	lsls	r3, r0, #1
    342e:	1819      	adds	r1, r3, r0
    3430:	00ca      	lsls	r2, r1, #3
    3432:	4611      	mov	r1, r2
    3434:	4422      	add	r2, r4

	if (!sock->conn) {
    3436:	5863      	ldr	r3, [r4, r1]
    3438:	b11b      	cbz	r3, 3442 <get_socket+0x1e>
		set_errno(EBADF);
		return NULL;
	}

	return sock;
}
    343a:	4610      	mov	r0, r2
    343c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3440:	4770      	bx	lr
		return NULL;
    3442:	2200      	movs	r2, #0
    3444:	e7f9      	b.n	343a <get_socket+0x16>
		return NULL;
    3446:	2200      	movs	r2, #0
}
    3448:	4610      	mov	r0, r2
    344a:	4770      	bx	lr
    344c:	20001578 	.word	0x20001578

00003450 <alloc_socket>:
{
	int i;
	SYS_ARCH_DECL_PROTECT(lev);

	/* allocate a new socket identifier */
	for (i = 0; i < NUM_SOCKETS; ++i) {
    3450:	2300      	movs	r3, #0
    3452:	2b03      	cmp	r3, #3
    3454:	dc2b      	bgt.n	34ae <alloc_socket+0x5e>
{
    3456:	b430      	push	{r4, r5}
		/* Protect socket array */
		SYS_ARCH_PROTECT(lev);
		if (!sockets[i].conn) {
    3458:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    345c:	00e2      	lsls	r2, r4, #3
    345e:	4c16      	ldr	r4, [pc, #88]	; (34b8 <alloc_socket+0x68>)
    3460:	58a2      	ldr	r2, [r4, r2]
    3462:	b13a      	cbz	r2, 3474 <alloc_socket+0x24>
	for (i = 0; i < NUM_SOCKETS; ++i) {
    3464:	3301      	adds	r3, #1
    3466:	2b03      	cmp	r3, #3
    3468:	ddf6      	ble.n	3458 <alloc_socket+0x8>
			sockets[i].select_waiting = 0;
			return i;
		}
		SYS_ARCH_UNPROTECT(lev);
	}
	return -1;
    346a:	f04f 33ff 	mov.w	r3, #4294967295
}
    346e:	4618      	mov	r0, r3
    3470:	bc30      	pop	{r4, r5}
    3472:	4770      	bx	lr
			sockets[i].conn = newconn;
    3474:	4625      	mov	r5, r4
    3476:	005a      	lsls	r2, r3, #1
    3478:	441a      	add	r2, r3
    347a:	00d4      	lsls	r4, r2, #3
    347c:	192a      	adds	r2, r5, r4
    347e:	5128      	str	r0, [r5, r4]
			sockets[i].lastdata   = NULL;
    3480:	2400      	movs	r4, #0
    3482:	6054      	str	r4, [r2, #4]
			sockets[i].lastoffset = 0;
    3484:	8114      	strh	r4, [r2, #8]
			sockets[i].rcvevent   = 0;
    3486:	8154      	strh	r4, [r2, #10]
			sockets[i].sendevent      = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
    3488:	7802      	ldrb	r2, [r0, #0]
    348a:	2a10      	cmp	r2, #16
    348c:	d00b      	beq.n	34a6 <alloc_socket+0x56>
    348e:	2101      	movs	r1, #1
    3490:	0058      	lsls	r0, r3, #1
    3492:	4418      	add	r0, r3
    3494:	00c4      	lsls	r4, r0, #3
    3496:	4a08      	ldr	r2, [pc, #32]	; (34b8 <alloc_socket+0x68>)
    3498:	4422      	add	r2, r4
    349a:	8191      	strh	r1, [r2, #12]
			sockets[i].errevent       = 0;
    349c:	2100      	movs	r1, #0
    349e:	81d1      	strh	r1, [r2, #14]
			sockets[i].err            = 0;
    34a0:	6111      	str	r1, [r2, #16]
			sockets[i].select_waiting = 0;
    34a2:	6151      	str	r1, [r2, #20]
			return i;
    34a4:	e7e3      	b.n	346e <alloc_socket+0x1e>
			sockets[i].sendevent      = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
    34a6:	2900      	cmp	r1, #0
    34a8:	d0f2      	beq.n	3490 <alloc_socket+0x40>
    34aa:	2101      	movs	r1, #1
    34ac:	e7f0      	b.n	3490 <alloc_socket+0x40>
	return -1;
    34ae:	f04f 33ff 	mov.w	r3, #4294967295
}
    34b2:	4618      	mov	r0, r3
    34b4:	4770      	bx	lr
    34b6:	bf00      	nop
    34b8:	20001578 	.word	0x20001578

000034bc <event_callback>:
	SYS_ARCH_DECL_PROTECT(lev);

	LWIP_UNUSED_ARG(len);

	/* Get socket */
	if (conn) {
    34bc:	2800      	cmp	r0, #0
    34be:	d075      	beq.n	35ac <event_callback+0xf0>
{
    34c0:	b570      	push	{r4, r5, r6, lr}
		s = conn->socket;
    34c2:	6986      	ldr	r6, [r0, #24]
		if (s < 0) {
    34c4:	2e00      	cmp	r6, #0
    34c6:	db0d      	blt.n	34e4 <event_callback+0x28>
    34c8:	460c      	mov	r4, r1
			}
			s = conn->socket;
			SYS_ARCH_UNPROTECT(lev);
		}

		sock = get_socket(s);
    34ca:	4630      	mov	r0, r6
    34cc:	4b38      	ldr	r3, [pc, #224]	; (35b0 <event_callback+0xf4>)
    34ce:	4798      	blx	r3
		if (!sock) {
    34d0:	4605      	mov	r5, r0
    34d2:	2800      	cmp	r0, #0
    34d4:	d069      	beq.n	35aa <event_callback+0xee>
		return;
	}

	SYS_ARCH_PROTECT(lev);
	/* Set event as required */
	switch (evt) {
    34d6:	2c04      	cmp	r4, #4
    34d8:	d80d      	bhi.n	34f6 <event_callback+0x3a>
    34da:	e8df f004 	tbb	[pc, r4]
    34de:	1208      	.short	0x1208
    34e0:	1a17      	.short	0x1a17
    34e2:	1d          	.byte	0x1d
    34e3:	00          	.byte	0x00
				if (evt == NETCONN_EVT_RCVPLUS) {
    34e4:	2900      	cmp	r1, #0
    34e6:	d160      	bne.n	35aa <event_callback+0xee>
					conn->socket--;
    34e8:	3e01      	subs	r6, #1
    34ea:	6186      	str	r6, [r0, #24]
    34ec:	bd70      	pop	{r4, r5, r6, pc}
	case NETCONN_EVT_RCVPLUS:
		sock->rcvevent++;
    34ee:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    34f2:	3301      	adds	r3, #1
    34f4:	8143      	strh	r3, [r0, #10]
	default:
		LWIP_ASSERT("unknown event", 0);
		break;
	}

	if (sock->select_waiting == 0) {
    34f6:	696b      	ldr	r3, [r5, #20]
    34f8:	2b00      	cmp	r3, #0
    34fa:	d056      	beq.n	35aa <event_callback+0xee>
	   ONLY IF a select was actually waiting. We go through the list the number
	   of waiting select calls + 1. This list is expected to be small. */

	/* At this point, SYS_ARCH is still protected! */
again:
	for (scb = select_cb_list; scb != NULL; scb = scb->next) {
    34fc:	4b2d      	ldr	r3, [pc, #180]	; (35b4 <event_callback+0xf8>)
    34fe:	6e1c      	ldr	r4, [r3, #96]	; 0x60
    3500:	e015      	b.n	352e <event_callback+0x72>
		sock->rcvevent--;
    3502:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    3506:	3b01      	subs	r3, #1
    3508:	8143      	strh	r3, [r0, #10]
		break;
    350a:	e7f4      	b.n	34f6 <event_callback+0x3a>
		sock->sendevent = 1;
    350c:	2301      	movs	r3, #1
    350e:	8183      	strh	r3, [r0, #12]
		break;
    3510:	e7f1      	b.n	34f6 <event_callback+0x3a>
		sock->sendevent = 0;
    3512:	2300      	movs	r3, #0
    3514:	8183      	strh	r3, [r0, #12]
		break;
    3516:	e7ee      	b.n	34f6 <event_callback+0x3a>
		sock->errevent = 1;
    3518:	2301      	movs	r3, #1
    351a:	81c3      	strh	r3, [r0, #14]
		break;
    351c:	e7eb      	b.n	34f6 <event_callback+0x3a>
			if (sock->errevent != 0) {
				if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
					do_signal = 1;
				}
			}
			if (do_signal) {
    351e:	2b00      	cmp	r3, #0
    3520:	d13c      	bne.n	359c <event_callback+0xe0>
				   lead to the select thread taking itself off the list, invalidagin the semaphore. */
				sys_sem_signal(&scb->sem);
			}
		}
		/* unlock interrupts with each step */
		last_select_cb_ctr = select_cb_ctr;
    3522:	4b24      	ldr	r3, [pc, #144]	; (35b4 <event_callback+0xf8>)
    3524:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		SYS_ARCH_UNPROTECT(lev);
		/* this makes sure interrupt protection time is short */
		SYS_ARCH_PROTECT(lev);
		if (last_select_cb_ctr != select_cb_ctr) {
    3526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3528:	429a      	cmp	r2, r3
    352a:	d1e7      	bne.n	34fc <event_callback+0x40>
	for (scb = select_cb_list; scb != NULL; scb = scb->next) {
    352c:	6824      	ldr	r4, [r4, #0]
    352e:	2c00      	cmp	r4, #0
    3530:	d03b      	beq.n	35aa <event_callback+0xee>
		if (scb->sem_signalled == 0) {
    3532:	6963      	ldr	r3, [r4, #20]
    3534:	2b00      	cmp	r3, #0
    3536:	d1f4      	bne.n	3522 <event_callback+0x66>
			if (sock->rcvevent > 0) {
    3538:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
    353c:	2a00      	cmp	r2, #0
    353e:	dd0b      	ble.n	3558 <event_callback+0x9c>
				if (scb->readset && FD_ISSET(s, scb->readset)) {
    3540:	68a2      	ldr	r2, [r4, #8]
    3542:	b14a      	cbz	r2, 3558 <event_callback+0x9c>
    3544:	0971      	lsrs	r1, r6, #5
    3546:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    354a:	f006 001f 	and.w	r0, r6, #31
    354e:	2201      	movs	r2, #1
    3550:	4082      	lsls	r2, r0
    3552:	4211      	tst	r1, r2
    3554:	d000      	beq.n	3558 <event_callback+0x9c>
					do_signal = 1;
    3556:	2301      	movs	r3, #1
			if (sock->sendevent != 0) {
    3558:	89aa      	ldrh	r2, [r5, #12]
    355a:	b162      	cbz	r2, 3576 <event_callback+0xba>
				if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
    355c:	b95b      	cbnz	r3, 3576 <event_callback+0xba>
    355e:	68e2      	ldr	r2, [r4, #12]
    3560:	b14a      	cbz	r2, 3576 <event_callback+0xba>
    3562:	0971      	lsrs	r1, r6, #5
    3564:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3568:	f006 001f 	and.w	r0, r6, #31
    356c:	2201      	movs	r2, #1
    356e:	4082      	lsls	r2, r0
    3570:	4211      	tst	r1, r2
    3572:	d000      	beq.n	3576 <event_callback+0xba>
					do_signal = 1;
    3574:	2301      	movs	r3, #1
			if (sock->errevent != 0) {
    3576:	89ea      	ldrh	r2, [r5, #14]
    3578:	2a00      	cmp	r2, #0
    357a:	d0d0      	beq.n	351e <event_callback+0x62>
				if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
    357c:	2b00      	cmp	r3, #0
    357e:	d1ce      	bne.n	351e <event_callback+0x62>
    3580:	6922      	ldr	r2, [r4, #16]
    3582:	2a00      	cmp	r2, #0
    3584:	d0cb      	beq.n	351e <event_callback+0x62>
    3586:	0971      	lsrs	r1, r6, #5
    3588:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    358c:	f006 001f 	and.w	r0, r6, #31
    3590:	2201      	movs	r2, #1
    3592:	4082      	lsls	r2, r0
    3594:	4211      	tst	r1, r2
    3596:	d0c2      	beq.n	351e <event_callback+0x62>
					do_signal = 1;
    3598:	2301      	movs	r3, #1
    359a:	e7c0      	b.n	351e <event_callback+0x62>
				scb->sem_signalled = 1;
    359c:	2301      	movs	r3, #1
    359e:	6163      	str	r3, [r4, #20]
				sys_sem_signal(&scb->sem);
    35a0:	f104 0018 	add.w	r0, r4, #24
    35a4:	4b04      	ldr	r3, [pc, #16]	; (35b8 <event_callback+0xfc>)
    35a6:	4798      	blx	r3
    35a8:	e7bb      	b.n	3522 <event_callback+0x66>
    35aa:	bd70      	pop	{r4, r5, r6, pc}
    35ac:	4770      	bx	lr
    35ae:	bf00      	nop
    35b0:	00003425 	.word	0x00003425
    35b4:	20001578 	.word	0x20001578
    35b8:	000024c1 	.word	0x000024c1

000035bc <lwip_setsockopt_internal>:
	sock_set_errno(sock, err);
	return err ? -1 : 0;
}

static void lwip_setsockopt_internal(void *arg)
{
    35bc:	b510      	push	{r4, lr}
	struct lwip_setgetsockopt_data *data;

	LWIP_ASSERT("arg != NULL", arg != NULL);

	data = (struct lwip_setgetsockopt_data *)arg;
	sock = data->sock;
    35be:	6801      	ldr	r1, [r0, #0]
#ifdef LWIP_DEBUG
	s = data->s;
#endif /* LWIP_DEBUG */
	level   = data->level;
    35c0:	6843      	ldr	r3, [r0, #4]
	optname = data->optname;
    35c2:	6882      	ldr	r2, [r0, #8]
	optval  = data->optval;
    35c4:	68c4      	ldr	r4, [r0, #12]

	switch (level) {
    35c6:	2b06      	cmp	r3, #6
    35c8:	d03e      	beq.n	3648 <lwip_setsockopt_internal+0x8c>
    35ca:	f640 70ff 	movw	r0, #4095	; 0xfff
    35ce:	4283      	cmp	r3, r0
    35d0:	d005      	beq.n	35de <lwip_setsockopt_internal+0x22>
    35d2:	b35b      	cbz	r3, 362c <lwip_setsockopt_internal+0x70>
#endif /* LWIP_UDP */
	default:
		LWIP_ASSERT("unhandled level", 0);
		break;
	} /* switch (level) */
	sys_sem_signal(&sock->conn->op_completed);
    35d4:	6808      	ldr	r0, [r1, #0]
    35d6:	300c      	adds	r0, #12
    35d8:	4b28      	ldr	r3, [pc, #160]	; (367c <lwip_setsockopt_internal+0xc0>)
    35da:	4798      	blx	r3
    35dc:	bd10      	pop	{r4, pc}
		switch (optname) {
    35de:	2a20      	cmp	r2, #32
    35e0:	d005      	beq.n	35ee <lwip_setsockopt_internal+0x32>
    35e2:	f241 030a 	movw	r3, #4106	; 0x100a
    35e6:	429a      	cmp	r2, r3
    35e8:	d010      	beq.n	360c <lwip_setsockopt_internal+0x50>
    35ea:	2a08      	cmp	r2, #8
    35ec:	d1f2      	bne.n	35d4 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    35ee:	6823      	ldr	r3, [r4, #0]
    35f0:	b12b      	cbz	r3, 35fe <lwip_setsockopt_internal+0x42>
				ip_set_option(sock->conn->pcb.ip, optname);
    35f2:	680b      	ldr	r3, [r1, #0]
    35f4:	6858      	ldr	r0, [r3, #4]
    35f6:	7a03      	ldrb	r3, [r0, #8]
    35f8:	431a      	orrs	r2, r3
    35fa:	7202      	strb	r2, [r0, #8]
    35fc:	e7ea      	b.n	35d4 <lwip_setsockopt_internal+0x18>
				ip_reset_option(sock->conn->pcb.ip, optname);
    35fe:	680b      	ldr	r3, [r1, #0]
    3600:	6858      	ldr	r0, [r3, #4]
    3602:	7a03      	ldrb	r3, [r0, #8]
    3604:	ea23 0202 	bic.w	r2, r3, r2
    3608:	7202      	strb	r2, [r0, #8]
    360a:	e7e3      	b.n	35d4 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    360c:	6823      	ldr	r3, [r4, #0]
    360e:	b133      	cbz	r3, 361e <lwip_setsockopt_internal+0x62>
				udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
    3610:	680b      	ldr	r3, [r1, #0]
    3612:	685a      	ldr	r2, [r3, #4]
    3614:	7c13      	ldrb	r3, [r2, #16]
    3616:	f043 0301 	orr.w	r3, r3, #1
    361a:	7413      	strb	r3, [r2, #16]
    361c:	e7da      	b.n	35d4 <lwip_setsockopt_internal+0x18>
				udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
    361e:	680b      	ldr	r3, [r1, #0]
    3620:	685a      	ldr	r2, [r3, #4]
    3622:	7c13      	ldrb	r3, [r2, #16]
    3624:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3628:	7413      	strb	r3, [r2, #16]
    362a:	e7d3      	b.n	35d4 <lwip_setsockopt_internal+0x18>
		switch (optname) {
    362c:	2a01      	cmp	r2, #1
    362e:	d006      	beq.n	363e <lwip_setsockopt_internal+0x82>
    3630:	2a02      	cmp	r2, #2
    3632:	d1cf      	bne.n	35d4 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.ip->ttl = (u8_t)(*(int *)optval);
    3634:	680b      	ldr	r3, [r1, #0]
    3636:	685b      	ldr	r3, [r3, #4]
    3638:	7822      	ldrb	r2, [r4, #0]
    363a:	729a      	strb	r2, [r3, #10]
			break;
    363c:	e7ca      	b.n	35d4 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.ip->tos = (u8_t)(*(int *)optval);
    363e:	680b      	ldr	r3, [r1, #0]
    3640:	685b      	ldr	r3, [r3, #4]
    3642:	7822      	ldrb	r2, [r4, #0]
    3644:	725a      	strb	r2, [r3, #9]
			break;
    3646:	e7c5      	b.n	35d4 <lwip_setsockopt_internal+0x18>
		switch (optname) {
    3648:	2a01      	cmp	r2, #1
    364a:	d007      	beq.n	365c <lwip_setsockopt_internal+0xa0>
    364c:	2a02      	cmp	r2, #2
    364e:	d1c1      	bne.n	35d4 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int *)optval);
    3650:	680b      	ldr	r3, [r1, #0]
    3652:	685b      	ldr	r3, [r3, #4]
    3654:	6822      	ldr	r2, [r4, #0]
    3656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			break;
    365a:	e7bb      	b.n	35d4 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    365c:	6823      	ldr	r3, [r4, #0]
    365e:	b133      	cbz	r3, 366e <lwip_setsockopt_internal+0xb2>
				tcp_nagle_disable(sock->conn->pcb.tcp);
    3660:	680b      	ldr	r3, [r1, #0]
    3662:	685a      	ldr	r2, [r3, #4]
    3664:	7f93      	ldrb	r3, [r2, #30]
    3666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    366a:	7793      	strb	r3, [r2, #30]
    366c:	e7b2      	b.n	35d4 <lwip_setsockopt_internal+0x18>
				tcp_nagle_enable(sock->conn->pcb.tcp);
    366e:	680b      	ldr	r3, [r1, #0]
    3670:	685a      	ldr	r2, [r3, #4]
    3672:	7f93      	ldrb	r3, [r2, #30]
    3674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3678:	7793      	strb	r3, [r2, #30]
    367a:	e7ab      	b.n	35d4 <lwip_setsockopt_internal+0x18>
    367c:	000024c1 	.word	0x000024c1

00003680 <lwip_socket_init>:
{
    3680:	4770      	bx	lr
	...

00003684 <lwip_bind>:
{
    3684:	b5f0      	push	{r4, r5, r6, r7, lr}
    3686:	b083      	sub	sp, #12
    3688:	460c      	mov	r4, r1
    368a:	4616      	mov	r6, r2
	sock = get_socket(s);
    368c:	4b16      	ldr	r3, [pc, #88]	; (36e8 <lwip_bind+0x64>)
    368e:	4798      	blx	r3
	if (!sock) {
    3690:	b338      	cbz	r0, 36e2 <lwip_bind+0x5e>
    3692:	4605      	mov	r5, r0
	LWIP_ERROR(
    3694:	2e10      	cmp	r6, #16
    3696:	d000      	beq.n	369a <lwip_bind+0x16>
    3698:	e7fe      	b.n	3698 <lwip_bind+0x14>
    369a:	7863      	ldrb	r3, [r4, #1]
    369c:	2b02      	cmp	r3, #2
    369e:	d1fb      	bne.n	3698 <lwip_bind+0x14>
    36a0:	f014 0f03 	tst.w	r4, #3
    36a4:	d1f8      	bne.n	3698 <lwip_bind+0x14>
	inet_addr_to_ipaddr(&local_addr, &name_in->sin_addr);
    36a6:	6863      	ldr	r3, [r4, #4]
    36a8:	ae02      	add	r6, sp, #8
    36aa:	f846 3d04 	str.w	r3, [r6, #-4]!
	err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
    36ae:	6807      	ldr	r7, [r0, #0]
    36b0:	8860      	ldrh	r0, [r4, #2]
    36b2:	4b0e      	ldr	r3, [pc, #56]	; (36ec <lwip_bind+0x68>)
    36b4:	4798      	blx	r3
    36b6:	4602      	mov	r2, r0
    36b8:	4631      	mov	r1, r6
    36ba:	4638      	mov	r0, r7
    36bc:	4b0c      	ldr	r3, [pc, #48]	; (36f0 <lwip_bind+0x6c>)
    36be:	4798      	blx	r3
	if (err != ERR_OK) {
    36c0:	b160      	cbz	r0, 36dc <lwip_bind+0x58>
		sock_set_errno(sock, err_to_errno(err));
    36c2:	4243      	negs	r3, r0
    36c4:	2b0f      	cmp	r3, #15
    36c6:	d807      	bhi.n	36d8 <lwip_bind+0x54>
    36c8:	4a0a      	ldr	r2, [pc, #40]	; (36f4 <lwip_bind+0x70>)
    36ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36ce:	612b      	str	r3, [r5, #16]
		return -1;
    36d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    36d4:	b003      	add	sp, #12
    36d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sock_set_errno(sock, err_to_errno(err));
    36d8:	2305      	movs	r3, #5
    36da:	e7f8      	b.n	36ce <lwip_bind+0x4a>
	sock_set_errno(sock, 0);
    36dc:	2000      	movs	r0, #0
    36de:	6128      	str	r0, [r5, #16]
	return 0;
    36e0:	e7f8      	b.n	36d4 <lwip_bind+0x50>
		return -1;
    36e2:	f04f 30ff 	mov.w	r0, #4294967295
    36e6:	e7f5      	b.n	36d4 <lwip_bind+0x50>
    36e8:	00003425 	.word	0x00003425
    36ec:	00003e9d 	.word	0x00003e9d
    36f0:	0000288d 	.word	0x0000288d
    36f4:	0000d3a8 	.word	0x0000d3a8

000036f8 <lwip_recvfrom>:
{
    36f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36fc:	b08b      	sub	sp, #44	; 0x2c
    36fe:	9101      	str	r1, [sp, #4]
    3700:	4617      	mov	r7, r2
    3702:	4698      	mov	r8, r3
	void *            buf = NULL;
    3704:	2300      	movs	r3, #0
    3706:	9309      	str	r3, [sp, #36]	; 0x24
	sock = get_socket(s);
    3708:	4b81      	ldr	r3, [pc, #516]	; (3910 <lwip_recvfrom+0x218>)
    370a:	4798      	blx	r3
	if (!sock) {
    370c:	2800      	cmp	r0, #0
    370e:	f000 80f9 	beq.w	3904 <lwip_recvfrom+0x20c>
    3712:	4605      	mov	r5, r0
    3714:	f04f 0b00 	mov.w	fp, #0
    3718:	46da      	mov	sl, fp
    371a:	9700      	str	r7, [sp, #0]
    371c:	46c1      	mov	r9, r8
    371e:	e07a      	b.n	3816 <lwip_recvfrom+0x11e>
			if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && (sock->rcvevent <= 0)) {
    3720:	f019 0f08 	tst.w	r9, #8
    3724:	d104      	bne.n	3730 <lwip_recvfrom+0x38>
    3726:	682b      	ldr	r3, [r5, #0]
    3728:	7f1b      	ldrb	r3, [r3, #28]
    372a:	f013 0f02 	tst.w	r3, #2
    372e:	d003      	beq.n	3738 <lwip_recvfrom+0x40>
    3730:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
    3734:	2b00      	cmp	r3, #0
    3736:	dd0a      	ble.n	374e <lwip_recvfrom+0x56>
			if (netconn_type(sock->conn) == NETCONN_TCP) {
    3738:	6828      	ldr	r0, [r5, #0]
    373a:	7803      	ldrb	r3, [r0, #0]
    373c:	2b10      	cmp	r3, #16
    373e:	d015      	beq.n	376c <lwip_recvfrom+0x74>
				err = netconn_recv(sock->conn, (struct netbuf **)&buf);
    3740:	a909      	add	r1, sp, #36	; 0x24
    3742:	4b74      	ldr	r3, [pc, #464]	; (3914 <lwip_recvfrom+0x21c>)
    3744:	4798      	blx	r3
			if (err != ERR_OK) {
    3746:	b9a8      	cbnz	r0, 3774 <lwip_recvfrom+0x7c>
			sock->lastdata = buf;
    3748:	9b09      	ldr	r3, [sp, #36]	; 0x24
    374a:	606b      	str	r3, [r5, #4]
    374c:	e067      	b.n	381e <lwip_recvfrom+0x126>
				if (off > 0) {
    374e:	f1ba 0f00 	cmp.w	sl, #0
    3752:	dd06      	ble.n	3762 <lwip_recvfrom+0x6a>
					netconn_recved(sock->conn, (u32_t)off);
    3754:	4651      	mov	r1, sl
    3756:	6828      	ldr	r0, [r5, #0]
    3758:	4b6f      	ldr	r3, [pc, #444]	; (3918 <lwip_recvfrom+0x220>)
    375a:	4798      	blx	r3
					sock_set_errno(sock, 0);
    375c:	2300      	movs	r3, #0
    375e:	612b      	str	r3, [r5, #16]
					return off;
    3760:	e0cc      	b.n	38fc <lwip_recvfrom+0x204>
				sock_set_errno(sock, EWOULDBLOCK);
    3762:	230b      	movs	r3, #11
    3764:	612b      	str	r3, [r5, #16]
				return -1;
    3766:	f04f 3aff 	mov.w	sl, #4294967295
    376a:	e0c7      	b.n	38fc <lwip_recvfrom+0x204>
				err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
    376c:	a909      	add	r1, sp, #36	; 0x24
    376e:	4b6b      	ldr	r3, [pc, #428]	; (391c <lwip_recvfrom+0x224>)
    3770:	4798      	blx	r3
    3772:	e7e8      	b.n	3746 <lwip_recvfrom+0x4e>
				if (off > 0) {
    3774:	f1ba 0f00 	cmp.w	sl, #0
    3778:	dc0d      	bgt.n	3796 <lwip_recvfrom+0x9e>
				sock_set_errno(sock, err_to_errno(err));
    377a:	4243      	negs	r3, r0
    377c:	2b0f      	cmp	r3, #15
    377e:	d811      	bhi.n	37a4 <lwip_recvfrom+0xac>
    3780:	4a67      	ldr	r2, [pc, #412]	; (3920 <lwip_recvfrom+0x228>)
    3782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3786:	612b      	str	r3, [r5, #16]
				if (err == ERR_CLSD) {
    3788:	f110 0f0c 	cmn.w	r0, #12
    378c:	f040 80bd 	bne.w	390a <lwip_recvfrom+0x212>
					return 0;
    3790:	f04f 0a00 	mov.w	sl, #0
    3794:	e0b2      	b.n	38fc <lwip_recvfrom+0x204>
					netconn_recved(sock->conn, (u32_t)off);
    3796:	4651      	mov	r1, sl
    3798:	6828      	ldr	r0, [r5, #0]
    379a:	4b5f      	ldr	r3, [pc, #380]	; (3918 <lwip_recvfrom+0x220>)
    379c:	4798      	blx	r3
					sock_set_errno(sock, 0);
    379e:	2300      	movs	r3, #0
    37a0:	612b      	str	r3, [r5, #16]
					return off;
    37a2:	e0ab      	b.n	38fc <lwip_recvfrom+0x204>
				sock_set_errno(sock, err_to_errno(err));
    37a4:	2305      	movs	r3, #5
    37a6:	e7ee      	b.n	3786 <lwip_recvfrom+0x8e>
			p = (struct pbuf *)buf;
    37a8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    37ac:	e03e      	b.n	382c <lwip_recvfrom+0x134>
			copylen = buflen;
    37ae:	4626      	mov	r6, r4
    37b0:	e045      	b.n	383e <lwip_recvfrom+0x146>
			done = 1;
    37b2:	f04f 0b01 	mov.w	fp, #1
    37b6:	e05e      	b.n	3876 <lwip_recvfrom+0x17e>
				done = 1;
    37b8:	f04f 0b01 	mov.w	fp, #1
    37bc:	e05b      	b.n	3876 <lwip_recvfrom+0x17e>
    37be:	f04f 0b01 	mov.w	fp, #1
    37c2:	e058      	b.n	3876 <lwip_recvfrom+0x17e>
    37c4:	f04f 0b01 	mov.w	fp, #1
    37c8:	e055      	b.n	3876 <lwip_recvfrom+0x17e>
    37ca:	f04f 0b01 	mov.w	fp, #1
    37ce:	e052      	b.n	3876 <lwip_recvfrom+0x17e>
					netconn_getaddr(sock->conn, addr, &port, 0);
    37d0:	2300      	movs	r3, #0
    37d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    37d6:	a903      	add	r1, sp, #12
    37d8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3938 <lwip_recvfrom+0x240>
    37dc:	47c0      	blx	r8
					addr = &fromaddr;
    37de:	f10d 080c 	add.w	r8, sp, #12
    37e2:	e059      	b.n	3898 <lwip_recvfrom+0x1a0>
				MEMCPY(from, &sin, *fromlen);
    37e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    37e6:	681a      	ldr	r2, [r3, #0]
    37e8:	a904      	add	r1, sp, #16
    37ea:	9814      	ldr	r0, [sp, #80]	; 0x50
    37ec:	4b4d      	ldr	r3, [pc, #308]	; (3924 <lwip_recvfrom+0x22c>)
    37ee:	4798      	blx	r3
		if ((flags & MSG_PEEK) == 0) {
    37f0:	f019 0f01 	tst.w	r9, #1
    37f4:	d10c      	bne.n	3810 <lwip_recvfrom+0x118>
			if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
    37f6:	682b      	ldr	r3, [r5, #0]
    37f8:	781a      	ldrb	r2, [r3, #0]
    37fa:	2a10      	cmp	r2, #16
    37fc:	d068      	beq.n	38d0 <lwip_recvfrom+0x1d8>
				sock->lastdata   = NULL;
    37fe:	2200      	movs	r2, #0
    3800:	606a      	str	r2, [r5, #4]
				sock->lastoffset = 0;
    3802:	812a      	strh	r2, [r5, #8]
				if (netconn_type(sock->conn) == NETCONN_TCP) {
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	2b10      	cmp	r3, #16
    3808:	d06b      	beq.n	38e2 <lwip_recvfrom+0x1ea>
					netbuf_delete((struct netbuf *)buf);
    380a:	9809      	ldr	r0, [sp, #36]	; 0x24
    380c:	4b46      	ldr	r3, [pc, #280]	; (3928 <lwip_recvfrom+0x230>)
    380e:	4798      	blx	r3
	} while (!done);
    3810:	f1bb 0f00 	cmp.w	fp, #0
    3814:	d169      	bne.n	38ea <lwip_recvfrom+0x1f2>
		if (sock->lastdata) {
    3816:	686b      	ldr	r3, [r5, #4]
    3818:	2b00      	cmp	r3, #0
    381a:	d081      	beq.n	3720 <lwip_recvfrom+0x28>
			buf = sock->lastdata;
    381c:	9309      	str	r3, [sp, #36]	; 0x24
		if (netconn_type(sock->conn) == NETCONN_TCP) {
    381e:	682b      	ldr	r3, [r5, #0]
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	2b10      	cmp	r3, #16
    3824:	d0c0      	beq.n	37a8 <lwip_recvfrom+0xb0>
			p = ((struct netbuf *)buf)->p;
    3826:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3828:	f8d3 8000 	ldr.w	r8, [r3]
		buflen = p->tot_len;
    382c:	f8b8 4008 	ldrh.w	r4, [r8, #8]
		buflen -= sock->lastoffset;
    3830:	892b      	ldrh	r3, [r5, #8]
    3832:	1ae4      	subs	r4, r4, r3
    3834:	b2a4      	uxth	r4, r4
		if (len > buflen) {
    3836:	9900      	ldr	r1, [sp, #0]
    3838:	42a1      	cmp	r1, r4
    383a:	d8b8      	bhi.n	37ae <lwip_recvfrom+0xb6>
			copylen = (u16_t)len;
    383c:	b28e      	uxth	r6, r1
		pbuf_copy_partial(p, (u8_t *)mem + off, copylen, sock->lastoffset);
    383e:	4632      	mov	r2, r6
    3840:	9901      	ldr	r1, [sp, #4]
    3842:	4451      	add	r1, sl
    3844:	4640      	mov	r0, r8
    3846:	4f39      	ldr	r7, [pc, #228]	; (392c <lwip_recvfrom+0x234>)
    3848:	47b8      	blx	r7
		off += copylen;
    384a:	4637      	mov	r7, r6
    384c:	44b2      	add	sl, r6
		if (netconn_type(sock->conn) == NETCONN_TCP) {
    384e:	6828      	ldr	r0, [r5, #0]
    3850:	7803      	ldrb	r3, [r0, #0]
    3852:	2b10      	cmp	r3, #16
    3854:	d1ad      	bne.n	37b2 <lwip_recvfrom+0xba>
			if ((len <= 0) || (p->flags & PBUF_FLAG_PUSH) || (sock->rcvevent <= 0) || ((flags & MSG_PEEK) != 0)) {
    3856:	9a00      	ldr	r2, [sp, #0]
    3858:	1b92      	subs	r2, r2, r6
    385a:	9200      	str	r2, [sp, #0]
    385c:	d0ac      	beq.n	37b8 <lwip_recvfrom+0xc0>
    385e:	f898 200d 	ldrb.w	r2, [r8, #13]
    3862:	f012 0f01 	tst.w	r2, #1
    3866:	d1aa      	bne.n	37be <lwip_recvfrom+0xc6>
    3868:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
    386c:	2a00      	cmp	r2, #0
    386e:	dda9      	ble.n	37c4 <lwip_recvfrom+0xcc>
    3870:	f019 0f01 	tst.w	r9, #1
    3874:	d1a9      	bne.n	37ca <lwip_recvfrom+0xd2>
		if (done) {
    3876:	f1bb 0f00 	cmp.w	fp, #0
    387a:	d0b9      	beq.n	37f0 <lwip_recvfrom+0xf8>
			if (from && fromlen) {
    387c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    387e:	2a00      	cmp	r2, #0
    3880:	d0b6      	beq.n	37f0 <lwip_recvfrom+0xf8>
    3882:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3884:	2a00      	cmp	r2, #0
    3886:	d0b3      	beq.n	37f0 <lwip_recvfrom+0xf8>
				if (netconn_type(sock->conn) == NETCONN_TCP) {
    3888:	2b10      	cmp	r3, #16
    388a:	d0a1      	beq.n	37d0 <lwip_recvfrom+0xd8>
					addr = netbuf_fromaddr((struct netbuf *)buf);
    388c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    388e:	f103 0808 	add.w	r8, r3, #8
					port = netbuf_fromport((struct netbuf *)buf);
    3892:	899b      	ldrh	r3, [r3, #12]
    3894:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
				memset(&sin, 0, sizeof(sin));
    3898:	2300      	movs	r3, #0
    389a:	9304      	str	r3, [sp, #16]
    389c:	9305      	str	r3, [sp, #20]
    389e:	9306      	str	r3, [sp, #24]
    38a0:	9307      	str	r3, [sp, #28]
				sin.sin_len    = sizeof(sin);
    38a2:	2310      	movs	r3, #16
    38a4:	f88d 3010 	strb.w	r3, [sp, #16]
				sin.sin_family = AF_INET;
    38a8:	2302      	movs	r3, #2
    38aa:	f88d 3011 	strb.w	r3, [sp, #17]
				sin.sin_port   = htons(port);
    38ae:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
    38b2:	4b1f      	ldr	r3, [pc, #124]	; (3930 <lwip_recvfrom+0x238>)
    38b4:	4798      	blx	r3
    38b6:	f8ad 0012 	strh.w	r0, [sp, #18]
				inet_addr_from_ipaddr(&sin.sin_addr, addr);
    38ba:	f8d8 3000 	ldr.w	r3, [r8]
    38be:	9305      	str	r3, [sp, #20]
				if (*fromlen > sizeof(sin)) {
    38c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	2b10      	cmp	r3, #16
    38c6:	d98d      	bls.n	37e4 <lwip_recvfrom+0xec>
					*fromlen = sizeof(sin);
    38c8:	2310      	movs	r3, #16
    38ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
    38cc:	6013      	str	r3, [r2, #0]
    38ce:	e789      	b.n	37e4 <lwip_recvfrom+0xec>
			if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
    38d0:	1be4      	subs	r4, r4, r7
    38d2:	2c00      	cmp	r4, #0
    38d4:	dd93      	ble.n	37fe <lwip_recvfrom+0x106>
				sock->lastdata = buf;
    38d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38d8:	606b      	str	r3, [r5, #4]
				sock->lastoffset += copylen;
    38da:	892b      	ldrh	r3, [r5, #8]
    38dc:	441e      	add	r6, r3
    38de:	812e      	strh	r6, [r5, #8]
    38e0:	e796      	b.n	3810 <lwip_recvfrom+0x118>
					pbuf_free((struct pbuf *)buf);
    38e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    38e4:	4b13      	ldr	r3, [pc, #76]	; (3934 <lwip_recvfrom+0x23c>)
    38e6:	4798      	blx	r3
    38e8:	e792      	b.n	3810 <lwip_recvfrom+0x118>
	if (off > 0) {
    38ea:	f1ba 0f00 	cmp.w	sl, #0
    38ee:	dd03      	ble.n	38f8 <lwip_recvfrom+0x200>
		netconn_recved(sock->conn, (u32_t)off);
    38f0:	4651      	mov	r1, sl
    38f2:	6828      	ldr	r0, [r5, #0]
    38f4:	4b08      	ldr	r3, [pc, #32]	; (3918 <lwip_recvfrom+0x220>)
    38f6:	4798      	blx	r3
	sock_set_errno(sock, 0);
    38f8:	2300      	movs	r3, #0
    38fa:	612b      	str	r3, [r5, #16]
}
    38fc:	4650      	mov	r0, sl
    38fe:	b00b      	add	sp, #44	; 0x2c
    3900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    3904:	f04f 3aff 	mov.w	sl, #4294967295
    3908:	e7f8      	b.n	38fc <lwip_recvfrom+0x204>
					return -1;
    390a:	f04f 3aff 	mov.w	sl, #4294967295
    390e:	e7f5      	b.n	38fc <lwip_recvfrom+0x204>
    3910:	00003425 	.word	0x00003425
    3914:	000028d9 	.word	0x000028d9
    3918:	0000296d 	.word	0x0000296d
    391c:	000028c1 	.word	0x000028c1
    3920:	0000d3a8 	.word	0x0000d3a8
    3924:	0000c103 	.word	0x0000c103
    3928:	0000339d 	.word	0x0000339d
    392c:	00005789 	.word	0x00005789
    3930:	00003e91 	.word	0x00003e91
    3934:	000054a1 	.word	0x000054a1
    3938:	0000284d 	.word	0x0000284d

0000393c <lwip_recv>:
{
    393c:	b510      	push	{r4, lr}
    393e:	b082      	sub	sp, #8
	return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
    3940:	2400      	movs	r4, #0
    3942:	9401      	str	r4, [sp, #4]
    3944:	9400      	str	r4, [sp, #0]
    3946:	4c02      	ldr	r4, [pc, #8]	; (3950 <lwip_recv+0x14>)
    3948:	47a0      	blx	r4
}
    394a:	b002      	add	sp, #8
    394c:	bd10      	pop	{r4, pc}
    394e:	bf00      	nop
    3950:	000036f9 	.word	0x000036f9

00003954 <lwip_sendto>:
{
    3954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3958:	b084      	sub	sp, #16
    395a:	4681      	mov	r9, r0
    395c:	4688      	mov	r8, r1
    395e:	4614      	mov	r4, r2
    3960:	469a      	mov	sl, r3
    3962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3964:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	sock = get_socket(s);
    3966:	4b29      	ldr	r3, [pc, #164]	; (3a0c <lwip_sendto+0xb8>)
    3968:	4798      	blx	r3
	if (!sock) {
    396a:	2800      	cmp	r0, #0
    396c:	d047      	beq.n	39fe <lwip_sendto+0xaa>
    396e:	4606      	mov	r6, r0
	if (sock->conn->type == NETCONN_TCP) {
    3970:	6803      	ldr	r3, [r0, #0]
    3972:	781b      	ldrb	r3, [r3, #0]
    3974:	2b10      	cmp	r3, #16
    3976:	d005      	beq.n	3984 <lwip_sendto+0x30>
	short_size = (u16_t)size;
    3978:	fa1f f984 	uxth.w	r9, r4
	LWIP_ERROR(
    397c:	b15d      	cbz	r5, 3996 <lwip_sendto+0x42>
    397e:	2f10      	cmp	r7, #16
    3980:	d02f      	beq.n	39e2 <lwip_sendto+0x8e>
    3982:	e7fe      	b.n	3982 <lwip_sendto+0x2e>
		return lwip_send(s, data, size, flags);
    3984:	4653      	mov	r3, sl
    3986:	4622      	mov	r2, r4
    3988:	4641      	mov	r1, r8
    398a:	4648      	mov	r0, r9
    398c:	4c20      	ldr	r4, [pc, #128]	; (3a10 <lwip_sendto+0xbc>)
    398e:	47a0      	blx	r4
}
    3990:	b004      	add	sp, #16
    3992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LWIP_ERROR(
    3996:	2f00      	cmp	r7, #0
    3998:	d1f1      	bne.n	397e <lwip_sendto+0x2a>
	buf.p = buf.ptr = NULL;
    399a:	2300      	movs	r3, #0
    399c:	9301      	str	r3, [sp, #4]
    399e:	9300      	str	r3, [sp, #0]
	if (to) {
    39a0:	b335      	cbz	r5, 39f0 <lwip_sendto+0x9c>
		inet_addr_to_ipaddr(&buf.addr, &to_in->sin_addr);
    39a2:	686b      	ldr	r3, [r5, #4]
    39a4:	9302      	str	r3, [sp, #8]
		remote_port = ntohs(to_in->sin_port);
    39a6:	8868      	ldrh	r0, [r5, #2]
    39a8:	4b1a      	ldr	r3, [pc, #104]	; (3a14 <lwip_sendto+0xc0>)
    39aa:	4798      	blx	r3
		netbuf_fromport(&buf) = remote_port;
    39ac:	f8ad 000c 	strh.w	r0, [sp, #12]
	err = netbuf_ref(&buf, data, short_size);
    39b0:	464a      	mov	r2, r9
    39b2:	4641      	mov	r1, r8
    39b4:	4668      	mov	r0, sp
    39b6:	4b18      	ldr	r3, [pc, #96]	; (3a18 <lwip_sendto+0xc4>)
    39b8:	4798      	blx	r3
	if (err == ERR_OK) {
    39ba:	4605      	mov	r5, r0
    39bc:	b920      	cbnz	r0, 39c8 <lwip_sendto+0x74>
		err = netconn_send(sock->conn, &buf);
    39be:	4669      	mov	r1, sp
    39c0:	6830      	ldr	r0, [r6, #0]
    39c2:	4b16      	ldr	r3, [pc, #88]	; (3a1c <lwip_sendto+0xc8>)
    39c4:	4798      	blx	r3
    39c6:	4605      	mov	r5, r0
	netbuf_free(&buf);
    39c8:	4668      	mov	r0, sp
    39ca:	4b15      	ldr	r3, [pc, #84]	; (3a20 <lwip_sendto+0xcc>)
    39cc:	4798      	blx	r3
	sock_set_errno(sock, err_to_errno(err));
    39ce:	426b      	negs	r3, r5
    39d0:	2b0f      	cmp	r3, #15
    39d2:	d812      	bhi.n	39fa <lwip_sendto+0xa6>
    39d4:	4a13      	ldr	r2, [pc, #76]	; (3a24 <lwip_sendto+0xd0>)
    39d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    39da:	6133      	str	r3, [r6, #16]
	return (err == ERR_OK ? short_size : -1);
    39dc:	b995      	cbnz	r5, 3a04 <lwip_sendto+0xb0>
    39de:	b2a0      	uxth	r0, r4
    39e0:	e7d6      	b.n	3990 <lwip_sendto+0x3c>
	LWIP_ERROR(
    39e2:	786b      	ldrb	r3, [r5, #1]
    39e4:	2b02      	cmp	r3, #2
    39e6:	d1cc      	bne.n	3982 <lwip_sendto+0x2e>
    39e8:	f015 0f03 	tst.w	r5, #3
    39ec:	d0d5      	beq.n	399a <lwip_sendto+0x46>
    39ee:	e7c8      	b.n	3982 <lwip_sendto+0x2e>
		ip_addr_set_any(&buf.addr);
    39f0:	2300      	movs	r3, #0
    39f2:	9302      	str	r3, [sp, #8]
		netbuf_fromport(&buf) = 0;
    39f4:	f8ad 300c 	strh.w	r3, [sp, #12]
    39f8:	e7da      	b.n	39b0 <lwip_sendto+0x5c>
	sock_set_errno(sock, err_to_errno(err));
    39fa:	2305      	movs	r3, #5
    39fc:	e7ed      	b.n	39da <lwip_sendto+0x86>
		return -1;
    39fe:	f04f 30ff 	mov.w	r0, #4294967295
    3a02:	e7c5      	b.n	3990 <lwip_sendto+0x3c>
	return (err == ERR_OK ? short_size : -1);
    3a04:	f04f 30ff 	mov.w	r0, #4294967295
    3a08:	e7c2      	b.n	3990 <lwip_sendto+0x3c>
    3a0a:	bf00      	nop
    3a0c:	00003425 	.word	0x00003425
    3a10:	00003a29 	.word	0x00003a29
    3a14:	00003e9d 	.word	0x00003e9d
    3a18:	000033e1 	.word	0x000033e1
    3a1c:	000029a1 	.word	0x000029a1
    3a20:	000033c5 	.word	0x000033c5
    3a24:	0000d3a8 	.word	0x0000d3a8

00003a28 <lwip_send>:
{
    3a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a2c:	b084      	sub	sp, #16
    3a2e:	4680      	mov	r8, r0
    3a30:	460e      	mov	r6, r1
    3a32:	4617      	mov	r7, r2
    3a34:	461d      	mov	r5, r3
	sock = get_socket(s);
    3a36:	4b1f      	ldr	r3, [pc, #124]	; (3ab4 <lwip_send+0x8c>)
    3a38:	4798      	blx	r3
	if (!sock) {
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d033      	beq.n	3aa6 <lwip_send+0x7e>
    3a3e:	4604      	mov	r4, r0
	if (sock->conn->type != NETCONN_TCP) {
    3a40:	6803      	ldr	r3, [r0, #0]
    3a42:	781b      	ldrb	r3, [r3, #0]
    3a44:	2b10      	cmp	r3, #16
    3a46:	d11e      	bne.n	3a86 <lwip_send+0x5e>
	    = NETCONN_COPY | ((flags & MSG_MORE) ? NETCONN_MORE : 0) | ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
    3a48:	f015 0f10 	tst.w	r5, #16
    3a4c:	d025      	beq.n	3a9a <lwip_send+0x72>
    3a4e:	2103      	movs	r1, #3
    3a50:	f015 0f08 	tst.w	r5, #8
    3a54:	d023      	beq.n	3a9e <lwip_send+0x76>
    3a56:	2304      	movs	r3, #4
	written = 0;
    3a58:	aa04      	add	r2, sp, #16
    3a5a:	2000      	movs	r0, #0
    3a5c:	f842 0d04 	str.w	r0, [r2, #-4]!
	err     = netconn_write_partly(sock->conn, data, size, write_flags, &written);
    3a60:	6820      	ldr	r0, [r4, #0]
    3a62:	9200      	str	r2, [sp, #0]
    3a64:	430b      	orrs	r3, r1
    3a66:	463a      	mov	r2, r7
    3a68:	4631      	mov	r1, r6
    3a6a:	4d13      	ldr	r5, [pc, #76]	; (3ab8 <lwip_send+0x90>)
    3a6c:	47a8      	blx	r5
	sock_set_errno(sock, err_to_errno(err));
    3a6e:	4243      	negs	r3, r0
    3a70:	2b0f      	cmp	r3, #15
    3a72:	d816      	bhi.n	3aa2 <lwip_send+0x7a>
    3a74:	4a11      	ldr	r2, [pc, #68]	; (3abc <lwip_send+0x94>)
    3a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a7a:	6123      	str	r3, [r4, #16]
	return (err == ERR_OK ? (int)written : -1);
    3a7c:	b9b0      	cbnz	r0, 3aac <lwip_send+0x84>
    3a7e:	9803      	ldr	r0, [sp, #12]
}
    3a80:	b004      	add	sp, #16
    3a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return lwip_sendto(s, data, size, flags, NULL, 0);
    3a86:	2300      	movs	r3, #0
    3a88:	9301      	str	r3, [sp, #4]
    3a8a:	9300      	str	r3, [sp, #0]
    3a8c:	462b      	mov	r3, r5
    3a8e:	463a      	mov	r2, r7
    3a90:	4631      	mov	r1, r6
    3a92:	4640      	mov	r0, r8
    3a94:	4c0a      	ldr	r4, [pc, #40]	; (3ac0 <lwip_send+0x98>)
    3a96:	47a0      	blx	r4
    3a98:	e7f2      	b.n	3a80 <lwip_send+0x58>
	    = NETCONN_COPY | ((flags & MSG_MORE) ? NETCONN_MORE : 0) | ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
    3a9a:	2101      	movs	r1, #1
    3a9c:	e7d8      	b.n	3a50 <lwip_send+0x28>
    3a9e:	2300      	movs	r3, #0
    3aa0:	e7da      	b.n	3a58 <lwip_send+0x30>
	sock_set_errno(sock, err_to_errno(err));
    3aa2:	2305      	movs	r3, #5
    3aa4:	e7e9      	b.n	3a7a <lwip_send+0x52>
		return -1;
    3aa6:	f04f 30ff 	mov.w	r0, #4294967295
    3aaa:	e7e9      	b.n	3a80 <lwip_send+0x58>
	return (err == ERR_OK ? (int)written : -1);
    3aac:	f04f 30ff 	mov.w	r0, #4294967295
    3ab0:	e7e6      	b.n	3a80 <lwip_send+0x58>
    3ab2:	bf00      	nop
    3ab4:	00003425 	.word	0x00003425
    3ab8:	000029d1 	.word	0x000029d1
    3abc:	0000d3a8 	.word	0x0000d3a8
    3ac0:	00003955 	.word	0x00003955

00003ac4 <lwip_socket>:
{
    3ac4:	b538      	push	{r3, r4, r5, lr}
    3ac6:	4613      	mov	r3, r2
	switch (type) {
    3ac8:	2902      	cmp	r1, #2
    3aca:	d018      	beq.n	3afe <lwip_socket+0x3a>
    3acc:	2903      	cmp	r1, #3
    3ace:	d004      	beq.n	3ada <lwip_socket+0x16>
    3ad0:	2901      	cmp	r1, #1
    3ad2:	d01f      	beq.n	3b14 <lwip_socket+0x50>
		return -1;
    3ad4:	f04f 34ff 	mov.w	r4, #4294967295
    3ad8:	e00f      	b.n	3afa <lwip_socket+0x36>
		conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
    3ada:	4a18      	ldr	r2, [pc, #96]	; (3b3c <lwip_socket+0x78>)
    3adc:	b2d9      	uxtb	r1, r3
    3ade:	2040      	movs	r0, #64	; 0x40
    3ae0:	4b17      	ldr	r3, [pc, #92]	; (3b40 <lwip_socket+0x7c>)
    3ae2:	4798      	blx	r3
    3ae4:	4605      	mov	r5, r0
	if (!conn) {
    3ae6:	b335      	cbz	r5, 3b36 <lwip_socket+0x72>
	i = alloc_socket(conn, 0);
    3ae8:	2100      	movs	r1, #0
    3aea:	4628      	mov	r0, r5
    3aec:	4b15      	ldr	r3, [pc, #84]	; (3b44 <lwip_socket+0x80>)
    3aee:	4798      	blx	r3
    3af0:	4604      	mov	r4, r0
	if (i == -1) {
    3af2:	f1b0 3fff 	cmp.w	r0, #4294967295
    3af6:	d01a      	beq.n	3b2e <lwip_socket+0x6a>
	conn->socket = i;
    3af8:	61a8      	str	r0, [r5, #24]
}
    3afa:	4620      	mov	r0, r4
    3afc:	bd38      	pop	{r3, r4, r5, pc}
		conn = netconn_new_with_callback((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    3afe:	2a88      	cmp	r2, #136	; 0x88
    3b00:	d006      	beq.n	3b10 <lwip_socket+0x4c>
    3b02:	2020      	movs	r0, #32
    3b04:	4a0d      	ldr	r2, [pc, #52]	; (3b3c <lwip_socket+0x78>)
    3b06:	2100      	movs	r1, #0
    3b08:	4b0d      	ldr	r3, [pc, #52]	; (3b40 <lwip_socket+0x7c>)
    3b0a:	4798      	blx	r3
    3b0c:	4605      	mov	r5, r0
		break;
    3b0e:	e7ea      	b.n	3ae6 <lwip_socket+0x22>
		conn = netconn_new_with_callback((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    3b10:	2021      	movs	r0, #33	; 0x21
    3b12:	e7f7      	b.n	3b04 <lwip_socket+0x40>
		conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
    3b14:	4a09      	ldr	r2, [pc, #36]	; (3b3c <lwip_socket+0x78>)
    3b16:	2100      	movs	r1, #0
    3b18:	2010      	movs	r0, #16
    3b1a:	4b09      	ldr	r3, [pc, #36]	; (3b40 <lwip_socket+0x7c>)
    3b1c:	4798      	blx	r3
		if (conn != NULL) {
    3b1e:	4605      	mov	r5, r0
    3b20:	2800      	cmp	r0, #0
    3b22:	d0e0      	beq.n	3ae6 <lwip_socket+0x22>
			netconn_set_noautorecved(conn, 1);
    3b24:	7f03      	ldrb	r3, [r0, #28]
    3b26:	f043 0308 	orr.w	r3, r3, #8
    3b2a:	7703      	strb	r3, [r0, #28]
    3b2c:	e7db      	b.n	3ae6 <lwip_socket+0x22>
		netconn_delete(conn);
    3b2e:	4628      	mov	r0, r5
    3b30:	4b05      	ldr	r3, [pc, #20]	; (3b48 <lwip_socket+0x84>)
    3b32:	4798      	blx	r3
		return -1;
    3b34:	e7e1      	b.n	3afa <lwip_socket+0x36>
		return -1;
    3b36:	f04f 34ff 	mov.w	r4, #4294967295
    3b3a:	e7de      	b.n	3afa <lwip_socket+0x36>
    3b3c:	000034bd 	.word	0x000034bd
    3b40:	000027c1 	.word	0x000027c1
    3b44:	00003451 	.word	0x00003451
    3b48:	0000281d 	.word	0x0000281d

00003b4c <lwip_setsockopt>:
{
    3b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4e:	b087      	sub	sp, #28
    3b50:	460c      	mov	r4, r1
    3b52:	4617      	mov	r7, r2
    3b54:	461e      	mov	r6, r3
	struct lwip_sock *             sock = get_socket(s);
    3b56:	4b3e      	ldr	r3, [pc, #248]	; (3c50 <lwip_setsockopt+0x104>)
    3b58:	4798      	blx	r3
	if (!sock) {
    3b5a:	2800      	cmp	r0, #0
    3b5c:	d074      	beq.n	3c48 <lwip_setsockopt+0xfc>
    3b5e:	4605      	mov	r5, r0
	if (NULL == optval) {
    3b60:	b326      	cbz	r6, 3bac <lwip_setsockopt+0x60>
	switch (level) {
    3b62:	2c06      	cmp	r4, #6
    3b64:	d051      	beq.n	3c0a <lwip_setsockopt+0xbe>
    3b66:	f640 73ff 	movw	r3, #4095	; 0xfff
    3b6a:	429c      	cmp	r4, r3
    3b6c:	d023      	beq.n	3bb6 <lwip_setsockopt+0x6a>
    3b6e:	2c00      	cmp	r4, #0
    3b70:	d043      	beq.n	3bfa <lwip_setsockopt+0xae>
		err = ENOPROTOOPT;
    3b72:	235c      	movs	r3, #92	; 0x5c
	if (err != ERR_OK) {
    3b74:	2b00      	cmp	r3, #0
    3b76:	d160      	bne.n	3c3a <lwip_setsockopt+0xee>
	data.sock = sock;
    3b78:	9500      	str	r5, [sp, #0]
	data.level   = level;
    3b7a:	9401      	str	r4, [sp, #4]
	data.optname = optname;
    3b7c:	9702      	str	r7, [sp, #8]
	data.optval  = (void *)optval;
    3b7e:	9603      	str	r6, [sp, #12]
	data.optlen  = &optlen;
    3b80:	aa0c      	add	r2, sp, #48	; 0x30
    3b82:	9204      	str	r2, [sp, #16]
	data.err     = err;
    3b84:	f88d 3014 	strb.w	r3, [sp, #20]
	tcpip_callback(lwip_setsockopt_internal, &data);
    3b88:	2201      	movs	r2, #1
    3b8a:	4669      	mov	r1, sp
    3b8c:	4831      	ldr	r0, [pc, #196]	; (3c54 <lwip_setsockopt+0x108>)
    3b8e:	4b32      	ldr	r3, [pc, #200]	; (3c58 <lwip_setsockopt+0x10c>)
    3b90:	4798      	blx	r3
	sys_arch_sem_wait(&sock->conn->op_completed, 0);
    3b92:	6828      	ldr	r0, [r5, #0]
    3b94:	2100      	movs	r1, #0
    3b96:	300c      	adds	r0, #12
    3b98:	4b30      	ldr	r3, [pc, #192]	; (3c5c <lwip_setsockopt+0x110>)
    3b9a:	4798      	blx	r3
	err = data.err;
    3b9c:	f99d 3014 	ldrsb.w	r3, [sp, #20]
	sock_set_errno(sock, err);
    3ba0:	612b      	str	r3, [r5, #16]
	return err ? -1 : 0;
    3ba2:	2b00      	cmp	r3, #0
    3ba4:	d14d      	bne.n	3c42 <lwip_setsockopt+0xf6>
    3ba6:	2000      	movs	r0, #0
}
    3ba8:	b007      	add	sp, #28
    3baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sock_set_errno(sock, EFAULT);
    3bac:	230e      	movs	r3, #14
    3bae:	6103      	str	r3, [r0, #16]
		return -1;
    3bb0:	f04f 30ff 	mov.w	r0, #4294967295
    3bb4:	e7f8      	b.n	3ba8 <lwip_setsockopt+0x5c>
		switch (optname) {
    3bb6:	2f20      	cmp	r7, #32
    3bb8:	d007      	beq.n	3bca <lwip_setsockopt+0x7e>
    3bba:	f241 030a 	movw	r3, #4106	; 0x100a
    3bbe:	429f      	cmp	r7, r3
    3bc0:	d008      	beq.n	3bd4 <lwip_setsockopt+0x88>
    3bc2:	2f08      	cmp	r7, #8
    3bc4:	d001      	beq.n	3bca <lwip_setsockopt+0x7e>
			err = ENOPROTOOPT;
    3bc6:	235c      	movs	r3, #92	; 0x5c
    3bc8:	e7d4      	b.n	3b74 <lwip_setsockopt+0x28>
			if (optlen < sizeof(int)) {
    3bca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bcc:	2b03      	cmp	r3, #3
    3bce:	d92a      	bls.n	3c26 <lwip_setsockopt+0xda>
	err_t                          err  = ERR_OK;
    3bd0:	2300      	movs	r3, #0
    3bd2:	e7cf      	b.n	3b74 <lwip_setsockopt+0x28>
			if (optlen < sizeof(int)) {
    3bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bd6:	2b03      	cmp	r3, #3
    3bd8:	d906      	bls.n	3be8 <lwip_setsockopt+0x9c>
	err_t                          err  = ERR_OK;
    3bda:	2300      	movs	r3, #0
			if ((sock->conn->type != NETCONN_UDP) || ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
    3bdc:	682a      	ldr	r2, [r5, #0]
    3bde:	7811      	ldrb	r1, [r2, #0]
    3be0:	2920      	cmp	r1, #32
    3be2:	d003      	beq.n	3bec <lwip_setsockopt+0xa0>
				err = EAFNOSUPPORT;
    3be4:	2361      	movs	r3, #97	; 0x61
    3be6:	e7c5      	b.n	3b74 <lwip_setsockopt+0x28>
				err = EINVAL;
    3be8:	2316      	movs	r3, #22
    3bea:	e7f7      	b.n	3bdc <lwip_setsockopt+0x90>
			if ((sock->conn->type != NETCONN_UDP) || ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
    3bec:	6852      	ldr	r2, [r2, #4]
    3bee:	7c12      	ldrb	r2, [r2, #16]
    3bf0:	f012 0f02 	tst.w	r2, #2
    3bf4:	d0be      	beq.n	3b74 <lwip_setsockopt+0x28>
				err = EAFNOSUPPORT;
    3bf6:	2361      	movs	r3, #97	; 0x61
    3bf8:	e7bc      	b.n	3b74 <lwip_setsockopt+0x28>
		switch (optname) {
    3bfa:	1e7b      	subs	r3, r7, #1
    3bfc:	2b01      	cmp	r3, #1
    3bfe:	d814      	bhi.n	3c2a <lwip_setsockopt+0xde>
			if (optlen < sizeof(int)) {
    3c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c02:	2b03      	cmp	r3, #3
    3c04:	d913      	bls.n	3c2e <lwip_setsockopt+0xe2>
	err_t                          err  = ERR_OK;
    3c06:	2300      	movs	r3, #0
    3c08:	e7b4      	b.n	3b74 <lwip_setsockopt+0x28>
		if (optlen < sizeof(int)) {
    3c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c0c:	2b03      	cmp	r3, #3
    3c0e:	d910      	bls.n	3c32 <lwip_setsockopt+0xe6>
		if (sock->conn->type != NETCONN_TCP)
    3c10:	6803      	ldr	r3, [r0, #0]
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	2b10      	cmp	r3, #16
    3c16:	d001      	beq.n	3c1c <lwip_setsockopt+0xd0>
			return 0;
    3c18:	2000      	movs	r0, #0
    3c1a:	e7c5      	b.n	3ba8 <lwip_setsockopt+0x5c>
		switch (optname) {
    3c1c:	1e7b      	subs	r3, r7, #1
    3c1e:	2b01      	cmp	r3, #1
    3c20:	d809      	bhi.n	3c36 <lwip_setsockopt+0xea>
	err_t                          err  = ERR_OK;
    3c22:	2300      	movs	r3, #0
    3c24:	e7a6      	b.n	3b74 <lwip_setsockopt+0x28>
				err = EINVAL;
    3c26:	2316      	movs	r3, #22
    3c28:	e7a4      	b.n	3b74 <lwip_setsockopt+0x28>
			err = ENOPROTOOPT;
    3c2a:	235c      	movs	r3, #92	; 0x5c
    3c2c:	e7a2      	b.n	3b74 <lwip_setsockopt+0x28>
				err = EINVAL;
    3c2e:	2316      	movs	r3, #22
    3c30:	e7a0      	b.n	3b74 <lwip_setsockopt+0x28>
			err = EINVAL;
    3c32:	2316      	movs	r3, #22
    3c34:	e79e      	b.n	3b74 <lwip_setsockopt+0x28>
			err = ENOPROTOOPT;
    3c36:	235c      	movs	r3, #92	; 0x5c
    3c38:	e79c      	b.n	3b74 <lwip_setsockopt+0x28>
		sock_set_errno(sock, err);
    3c3a:	612b      	str	r3, [r5, #16]
		return -1;
    3c3c:	f04f 30ff 	mov.w	r0, #4294967295
    3c40:	e7b2      	b.n	3ba8 <lwip_setsockopt+0x5c>
	return err ? -1 : 0;
    3c42:	f04f 30ff 	mov.w	r0, #4294967295
    3c46:	e7af      	b.n	3ba8 <lwip_setsockopt+0x5c>
		return -1;
    3c48:	f04f 30ff 	mov.w	r0, #4294967295
    3c4c:	e7ac      	b.n	3ba8 <lwip_setsockopt+0x5c>
    3c4e:	bf00      	nop
    3c50:	00003425 	.word	0x00003425
    3c54:	000035bd 	.word	0x000035bd
    3c58:	00003d8d 	.word	0x00003d8d
    3c5c:	000024d9 	.word	0x000024d9

00003c60 <tcpip_thread>:
 * thread context.
 *
 * @param arg unused argument
 */
static void tcpip_thread(void *arg)
{
    3c60:	b500      	push	{lr}
    3c62:	b083      	sub	sp, #12
	struct tcpip_msg *msg;
	LWIP_UNUSED_ARG(arg);

	if (tcpip_init_done != NULL) {
    3c64:	4b29      	ldr	r3, [pc, #164]	; (3d0c <tcpip_thread+0xac>)
    3c66:	681b      	ldr	r3, [r3, #0]
    3c68:	b13b      	cbz	r3, 3c7a <tcpip_thread+0x1a>
		tcpip_init_done(tcpip_init_done_arg);
    3c6a:	4a28      	ldr	r2, [pc, #160]	; (3d0c <tcpip_thread+0xac>)
    3c6c:	6850      	ldr	r0, [r2, #4]
    3c6e:	4798      	blx	r3
    3c70:	e003      	b.n	3c7a <tcpip_thread+0x1a>
		LOCK_TCPIP_CORE();
		switch (msg->type) {
#if LWIP_NETCONN
		case TCPIP_MSG_API:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
			msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
    3c72:	6898      	ldr	r0, [r3, #8]
    3c74:	f850 3b04 	ldr.w	r3, [r0], #4
    3c78:	4798      	blx	r3
		sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
    3c7a:	a901      	add	r1, sp, #4
    3c7c:	4824      	ldr	r0, [pc, #144]	; (3d10 <tcpip_thread+0xb0>)
    3c7e:	4b25      	ldr	r3, [pc, #148]	; (3d14 <tcpip_thread+0xb4>)
    3c80:	4798      	blx	r3
		switch (msg->type) {
    3c82:	9b01      	ldr	r3, [sp, #4]
    3c84:	781a      	ldrb	r2, [r3, #0]
    3c86:	2a05      	cmp	r2, #5
    3c88:	d8f7      	bhi.n	3c7a <tcpip_thread+0x1a>
    3c8a:	a101      	add	r1, pc, #4	; (adr r1, 3c90 <tcpip_thread+0x30>)
    3c8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3c90:	00003c73 	.word	0x00003c73
    3c94:	00003ca9 	.word	0x00003ca9
    3c98:	00003ccd 	.word	0x00003ccd
    3c9c:	00003ce1 	.word	0x00003ce1
    3ca0:	00003cf3 	.word	0x00003cf3
    3ca4:	00003d03 	.word	0x00003d03

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
		case TCPIP_MSG_INPKT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
			if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
    3ca8:	68d9      	ldr	r1, [r3, #12]
    3caa:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    3cae:	f012 0f60 	tst.w	r2, #96	; 0x60
    3cb2:	d007      	beq.n	3cc4 <tcpip_thread+0x64>
				ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
    3cb4:	6898      	ldr	r0, [r3, #8]
    3cb6:	4b18      	ldr	r3, [pc, #96]	; (3d18 <tcpip_thread+0xb8>)
    3cb8:	4798      	blx	r3
			} else
#endif /* LWIP_ETHERNET */
			{
				ip_input(msg->msg.inp.p, msg->msg.inp.netif);
			}
			memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    3cba:	9901      	ldr	r1, [sp, #4]
    3cbc:	2009      	movs	r0, #9
    3cbe:	4b17      	ldr	r3, [pc, #92]	; (3d1c <tcpip_thread+0xbc>)
    3cc0:	4798      	blx	r3
			break;
    3cc2:	e7da      	b.n	3c7a <tcpip_thread+0x1a>
				ip_input(msg->msg.inp.p, msg->msg.inp.netif);
    3cc4:	6898      	ldr	r0, [r3, #8]
    3cc6:	4b16      	ldr	r3, [pc, #88]	; (3d20 <tcpip_thread+0xc0>)
    3cc8:	4798      	blx	r3
    3cca:	e7f6      	b.n	3cba <tcpip_thread+0x5a>
#endif /* LWIP_NETIF_API */

#if LWIP_TCPIP_TIMEOUT
		case TCPIP_MSG_TIMEOUT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
			sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
    3ccc:	691a      	ldr	r2, [r3, #16]
    3cce:	68d9      	ldr	r1, [r3, #12]
    3cd0:	6898      	ldr	r0, [r3, #8]
    3cd2:	4b14      	ldr	r3, [pc, #80]	; (3d24 <tcpip_thread+0xc4>)
    3cd4:	4798      	blx	r3
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3cd6:	9901      	ldr	r1, [sp, #4]
    3cd8:	2008      	movs	r0, #8
    3cda:	4b10      	ldr	r3, [pc, #64]	; (3d1c <tcpip_thread+0xbc>)
    3cdc:	4798      	blx	r3
			break;
    3cde:	e7cc      	b.n	3c7a <tcpip_thread+0x1a>
		case TCPIP_MSG_UNTIMEOUT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
			sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
    3ce0:	6919      	ldr	r1, [r3, #16]
    3ce2:	68d8      	ldr	r0, [r3, #12]
    3ce4:	4b10      	ldr	r3, [pc, #64]	; (3d28 <tcpip_thread+0xc8>)
    3ce6:	4798      	blx	r3
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3ce8:	9901      	ldr	r1, [sp, #4]
    3cea:	2008      	movs	r0, #8
    3cec:	4b0b      	ldr	r3, [pc, #44]	; (3d1c <tcpip_thread+0xbc>)
    3cee:	4798      	blx	r3
			break;
    3cf0:	e7c3      	b.n	3c7a <tcpip_thread+0x1a>
#endif /* LWIP_TCPIP_TIMEOUT */

		case TCPIP_MSG_CALLBACK:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
			msg->msg.cb.function(msg->msg.cb.ctx);
    3cf2:	689a      	ldr	r2, [r3, #8]
    3cf4:	68d8      	ldr	r0, [r3, #12]
    3cf6:	4790      	blx	r2
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3cf8:	9901      	ldr	r1, [sp, #4]
    3cfa:	2008      	movs	r0, #8
    3cfc:	4b07      	ldr	r3, [pc, #28]	; (3d1c <tcpip_thread+0xbc>)
    3cfe:	4798      	blx	r3
			break;
    3d00:	e7bb      	b.n	3c7a <tcpip_thread+0x1a>

		case TCPIP_MSG_CALLBACK_STATIC:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
			msg->msg.cb.function(msg->msg.cb.ctx);
    3d02:	689a      	ldr	r2, [r3, #8]
    3d04:	68d8      	ldr	r0, [r3, #12]
    3d06:	4790      	blx	r2
			break;
    3d08:	e7b7      	b.n	3c7a <tcpip_thread+0x1a>
    3d0a:	bf00      	nop
    3d0c:	200015e0 	.word	0x200015e0
    3d10:	200015e8 	.word	0x200015e8
    3d14:	00008535 	.word	0x00008535
    3d18:	00009175 	.word	0x00009175
    3d1c:	000051fd 	.word	0x000051fd
    3d20:	00004311 	.word	0x00004311
    3d24:	00008391 	.word	0x00008391
    3d28:	000084e5 	.word	0x000084e5

00003d2c <tcpip_input>:
 *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t tcpip_input(struct pbuf *p, struct netif *inp)
{
    3d2c:	b570      	push	{r4, r5, r6, lr}
    3d2e:	4606      	mov	r6, r0
    3d30:	460d      	mov	r5, r1
	UNLOCK_TCPIP_CORE();
	return ret;
#else  /* LWIP_TCPIP_CORE_LOCKING_INPUT */
	struct tcpip_msg *msg;

	if (!sys_mbox_valid(&mbox)) {
    3d32:	4811      	ldr	r0, [pc, #68]	; (3d78 <tcpip_input+0x4c>)
    3d34:	4b11      	ldr	r3, [pc, #68]	; (3d7c <tcpip_input+0x50>)
    3d36:	4798      	blx	r3
    3d38:	b1b8      	cbz	r0, 3d6a <tcpip_input+0x3e>
		return ERR_VAL;
	}
	msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
    3d3a:	2009      	movs	r0, #9
    3d3c:	4b10      	ldr	r3, [pc, #64]	; (3d80 <tcpip_input+0x54>)
    3d3e:	4798      	blx	r3
	if (msg == NULL) {
    3d40:	4604      	mov	r4, r0
    3d42:	b1a8      	cbz	r0, 3d70 <tcpip_input+0x44>
		return ERR_MEM;
	}

	msg->type          = TCPIP_MSG_INPKT;
    3d44:	2301      	movs	r3, #1
    3d46:	7003      	strb	r3, [r0, #0]
	msg->msg.inp.p     = p;
    3d48:	6086      	str	r6, [r0, #8]
	msg->msg.inp.netif = inp;
    3d4a:	60c5      	str	r5, [r0, #12]
	if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
    3d4c:	4601      	mov	r1, r0
    3d4e:	480a      	ldr	r0, [pc, #40]	; (3d78 <tcpip_input+0x4c>)
    3d50:	4b0c      	ldr	r3, [pc, #48]	; (3d84 <tcpip_input+0x58>)
    3d52:	4798      	blx	r3
    3d54:	4603      	mov	r3, r0
    3d56:	b908      	cbnz	r0, 3d5c <tcpip_input+0x30>
		memp_free(MEMP_TCPIP_MSG_INPKT, msg);
		return ERR_MEM;
	}
	return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
    3d58:	4618      	mov	r0, r3
    3d5a:	bd70      	pop	{r4, r5, r6, pc}
		memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    3d5c:	4621      	mov	r1, r4
    3d5e:	2009      	movs	r0, #9
    3d60:	4b09      	ldr	r3, [pc, #36]	; (3d88 <tcpip_input+0x5c>)
    3d62:	4798      	blx	r3
		return ERR_MEM;
    3d64:	f04f 33ff 	mov.w	r3, #4294967295
    3d68:	e7f6      	b.n	3d58 <tcpip_input+0x2c>
		return ERR_VAL;
    3d6a:	f06f 0305 	mvn.w	r3, #5
    3d6e:	e7f3      	b.n	3d58 <tcpip_input+0x2c>
		return ERR_MEM;
    3d70:	f04f 33ff 	mov.w	r3, #4294967295
    3d74:	e7f0      	b.n	3d58 <tcpip_input+0x2c>
    3d76:	bf00      	nop
    3d78:	200015e8 	.word	0x200015e8
    3d7c:	000026b1 	.word	0x000026b1
    3d80:	000051d5 	.word	0x000051d5
    3d84:	0000259d 	.word	0x0000259d
    3d88:	000051fd 	.word	0x000051fd

00003d8c <tcpip_callback_with_block>:
 * @param ctx parameter passed to f
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
    3d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d8e:	4607      	mov	r7, r0
    3d90:	460e      	mov	r6, r1
    3d92:	4615      	mov	r5, r2
	struct tcpip_msg *msg;

	if (sys_mbox_valid(&mbox)) {
    3d94:	4814      	ldr	r0, [pc, #80]	; (3de8 <tcpip_callback_with_block+0x5c>)
    3d96:	4b15      	ldr	r3, [pc, #84]	; (3dec <tcpip_callback_with_block+0x60>)
    3d98:	4798      	blx	r3
    3d9a:	b1f0      	cbz	r0, 3dda <tcpip_callback_with_block+0x4e>
		msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
    3d9c:	2008      	movs	r0, #8
    3d9e:	4b14      	ldr	r3, [pc, #80]	; (3df0 <tcpip_callback_with_block+0x64>)
    3da0:	4798      	blx	r3
		if (msg == NULL) {
    3da2:	4604      	mov	r4, r0
    3da4:	b1e0      	cbz	r0, 3de0 <tcpip_callback_with_block+0x54>
			return ERR_MEM;
		}

		msg->type            = TCPIP_MSG_CALLBACK;
    3da6:	2304      	movs	r3, #4
    3da8:	7003      	strb	r3, [r0, #0]
		msg->msg.cb.function = function;
    3daa:	6087      	str	r7, [r0, #8]
		msg->msg.cb.ctx      = ctx;
    3dac:	60c6      	str	r6, [r0, #12]
		if (block) {
    3dae:	b93d      	cbnz	r5, 3dc0 <tcpip_callback_with_block+0x34>
			sys_mbox_post(&mbox, msg);
		} else {
			if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
    3db0:	4601      	mov	r1, r0
    3db2:	480d      	ldr	r0, [pc, #52]	; (3de8 <tcpip_callback_with_block+0x5c>)
    3db4:	4b0f      	ldr	r3, [pc, #60]	; (3df4 <tcpip_callback_with_block+0x68>)
    3db6:	4798      	blx	r3
    3db8:	4603      	mov	r3, r0
    3dba:	b938      	cbnz	r0, 3dcc <tcpip_callback_with_block+0x40>
			}
		}
		return ERR_OK;
	}
	return ERR_VAL;
}
    3dbc:	4618      	mov	r0, r3
    3dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sys_mbox_post(&mbox, msg);
    3dc0:	4601      	mov	r1, r0
    3dc2:	4809      	ldr	r0, [pc, #36]	; (3de8 <tcpip_callback_with_block+0x5c>)
    3dc4:	4b0c      	ldr	r3, [pc, #48]	; (3df8 <tcpip_callback_with_block+0x6c>)
    3dc6:	4798      	blx	r3
		return ERR_OK;
    3dc8:	2300      	movs	r3, #0
    3dca:	e7f7      	b.n	3dbc <tcpip_callback_with_block+0x30>
				memp_free(MEMP_TCPIP_MSG_API, msg);
    3dcc:	4621      	mov	r1, r4
    3dce:	2008      	movs	r0, #8
    3dd0:	4b0a      	ldr	r3, [pc, #40]	; (3dfc <tcpip_callback_with_block+0x70>)
    3dd2:	4798      	blx	r3
				return ERR_MEM;
    3dd4:	f04f 33ff 	mov.w	r3, #4294967295
    3dd8:	e7f0      	b.n	3dbc <tcpip_callback_with_block+0x30>
	return ERR_VAL;
    3dda:	f06f 0305 	mvn.w	r3, #5
    3dde:	e7ed      	b.n	3dbc <tcpip_callback_with_block+0x30>
			return ERR_MEM;
    3de0:	f04f 33ff 	mov.w	r3, #4294967295
    3de4:	e7ea      	b.n	3dbc <tcpip_callback_with_block+0x30>
    3de6:	bf00      	nop
    3de8:	200015e8 	.word	0x200015e8
    3dec:	000026b1 	.word	0x000026b1
    3df0:	000051d5 	.word	0x000051d5
    3df4:	0000259d 	.word	0x0000259d
    3df8:	00002579 	.word	0x00002579
    3dfc:	000051fd 	.word	0x000051fd

00003e00 <tcpip_apimsg>:
 *
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t tcpip_apimsg(struct api_msg *apimsg)
{
    3e00:	b530      	push	{r4, r5, lr}
    3e02:	b087      	sub	sp, #28
    3e04:	4604      	mov	r4, r0
#ifdef LWIP_DEBUG
	/* catch functions that don't set err */
	apimsg->msg.err = ERR_VAL;
#endif

	if (sys_mbox_valid(&mbox)) {
    3e06:	480c      	ldr	r0, [pc, #48]	; (3e38 <tcpip_apimsg+0x38>)
    3e08:	4b0c      	ldr	r3, [pc, #48]	; (3e3c <tcpip_apimsg+0x3c>)
    3e0a:	4798      	blx	r3
    3e0c:	b180      	cbz	r0, 3e30 <tcpip_apimsg+0x30>
		msg.type       = TCPIP_MSG_API;
    3e0e:	2500      	movs	r5, #0
    3e10:	f88d 5004 	strb.w	r5, [sp, #4]
		msg.msg.apimsg = apimsg;
    3e14:	9403      	str	r4, [sp, #12]
		sys_mbox_post(&mbox, &msg);
    3e16:	a901      	add	r1, sp, #4
    3e18:	4807      	ldr	r0, [pc, #28]	; (3e38 <tcpip_apimsg+0x38>)
    3e1a:	4b09      	ldr	r3, [pc, #36]	; (3e40 <tcpip_apimsg+0x40>)
    3e1c:	4798      	blx	r3
		sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
    3e1e:	6860      	ldr	r0, [r4, #4]
    3e20:	4629      	mov	r1, r5
    3e22:	300c      	adds	r0, #12
    3e24:	4b07      	ldr	r3, [pc, #28]	; (3e44 <tcpip_apimsg+0x44>)
    3e26:	4798      	blx	r3
		return apimsg->msg.err;
    3e28:	f994 0008 	ldrsb.w	r0, [r4, #8]
	}
	return ERR_VAL;
}
    3e2c:	b007      	add	sp, #28
    3e2e:	bd30      	pop	{r4, r5, pc}
	return ERR_VAL;
    3e30:	f06f 0005 	mvn.w	r0, #5
    3e34:	e7fa      	b.n	3e2c <tcpip_apimsg+0x2c>
    3e36:	bf00      	nop
    3e38:	200015e8 	.word	0x200015e8
    3e3c:	000026b1 	.word	0x000026b1
    3e40:	00002579 	.word	0x00002579
    3e44:	000024d9 	.word	0x000024d9

00003e48 <tcpip_init>:
 *
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
    3e48:	b530      	push	{r4, r5, lr}
    3e4a:	b083      	sub	sp, #12
    3e4c:	4605      	mov	r5, r0
    3e4e:	460c      	mov	r4, r1
	lwip_init();
    3e50:	4b09      	ldr	r3, [pc, #36]	; (3e78 <tcpip_init+0x30>)
    3e52:	4798      	blx	r3

	tcpip_init_done     = initfunc;
    3e54:	4809      	ldr	r0, [pc, #36]	; (3e7c <tcpip_init+0x34>)
    3e56:	6005      	str	r5, [r0, #0]
	tcpip_init_done_arg = arg;
    3e58:	6044      	str	r4, [r0, #4]
	if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
    3e5a:	2110      	movs	r1, #16
    3e5c:	3008      	adds	r0, #8
    3e5e:	4b08      	ldr	r3, [pc, #32]	; (3e80 <tcpip_init+0x38>)
    3e60:	4798      	blx	r3
	if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
		LWIP_ASSERT("failed to create lock_tcpip_core", 0);
	}
#endif /* LWIP_TCPIP_CORE_LOCKING */

	sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
    3e62:	2301      	movs	r3, #1
    3e64:	9300      	str	r3, [sp, #0]
    3e66:	f44f 6383 	mov.w	r3, #1048	; 0x418
    3e6a:	2200      	movs	r2, #0
    3e6c:	4905      	ldr	r1, [pc, #20]	; (3e84 <tcpip_init+0x3c>)
    3e6e:	4806      	ldr	r0, [pc, #24]	; (3e88 <tcpip_init+0x40>)
    3e70:	4c06      	ldr	r4, [pc, #24]	; (3e8c <tcpip_init+0x44>)
    3e72:	47a0      	blx	r4
}
    3e74:	b003      	add	sp, #12
    3e76:	bd30      	pop	{r4, r5, pc}
    3e78:	00003ecd 	.word	0x00003ecd
    3e7c:	200015e0 	.word	0x200015e0
    3e80:	00002545 	.word	0x00002545
    3e84:	00003c61 	.word	0x00003c61
    3e88:	0000d3e8 	.word	0x0000d3e8
    3e8c:	000026bd 	.word	0x000026bd

00003e90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t lwip_htons(u16_t n)
{
	return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
    3e90:	0a03      	lsrs	r3, r0, #8
    3e92:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
    3e96:	b280      	uxth	r0, r0
    3e98:	4770      	bx	lr
	...

00003e9c <lwip_ntohs>:
 *
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t lwip_ntohs(u16_t n)
{
    3e9c:	b508      	push	{r3, lr}
	return lwip_htons(n);
    3e9e:	4b01      	ldr	r3, [pc, #4]	; (3ea4 <lwip_ntohs+0x8>)
    3ea0:	4798      	blx	r3
}
    3ea2:	bd08      	pop	{r3, pc}
    3ea4:	00003e91 	.word	0x00003e91

00003ea8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t lwip_htonl(u32_t n)
{
	return ((n & 0xff) << 24) | ((n & 0xff00) << 8) | ((n & 0xff0000UL) >> 8) | ((n & 0xff000000UL) >> 24);
    3ea8:	0203      	lsls	r3, r0, #8
    3eaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3eae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    3eb2:	0a02      	lsrs	r2, r0, #8
    3eb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    3eb8:	4313      	orrs	r3, r2
}
    3eba:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
    3ebe:	4770      	bx	lr

00003ec0 <lwip_ntohl>:
 *
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t lwip_ntohl(u32_t n)
{
    3ec0:	b508      	push	{r3, lr}
	return lwip_htonl(n);
    3ec2:	4b01      	ldr	r3, [pc, #4]	; (3ec8 <lwip_ntohl+0x8>)
    3ec4:	4798      	blx	r3
}
    3ec6:	bd08      	pop	{r3, pc}
    3ec8:	00003ea9 	.word	0x00003ea9

00003ecc <lwip_init>:

/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void lwip_init(void)
{
    3ecc:	b508      	push	{r3, lr}
	/* Modules initialization */
	stats_init();
#if !NO_SYS
	sys_init();
    3ece:	4b08      	ldr	r3, [pc, #32]	; (3ef0 <lwip_init+0x24>)
    3ed0:	4798      	blx	r3
#endif /* !NO_SYS */
	mem_init();
    3ed2:	4b08      	ldr	r3, [pc, #32]	; (3ef4 <lwip_init+0x28>)
    3ed4:	4798      	blx	r3
	memp_init();
    3ed6:	4b08      	ldr	r3, [pc, #32]	; (3ef8 <lwip_init+0x2c>)
    3ed8:	4798      	blx	r3
	pbuf_init();
	netif_init();
    3eda:	4b08      	ldr	r3, [pc, #32]	; (3efc <lwip_init+0x30>)
    3edc:	4798      	blx	r3
#if LWIP_SOCKET
	lwip_socket_init();
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <lwip_init+0x34>)
    3ee0:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
	raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
	udp_init();
    3ee2:	4b08      	ldr	r3, [pc, #32]	; (3f04 <lwip_init+0x38>)
    3ee4:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
	tcp_init();
    3ee6:	4b08      	ldr	r3, [pc, #32]	; (3f08 <lwip_init+0x3c>)
    3ee8:	4798      	blx	r3
#if LWIP_DNS
	dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
	sys_timeouts_init();
    3eea:	4b08      	ldr	r3, [pc, #32]	; (3f0c <lwip_init+0x40>)
    3eec:	4798      	blx	r3
    3eee:	bd08      	pop	{r3, pc}
    3ef0:	00002431 	.word	0x00002431
    3ef4:	00004f0d 	.word	0x00004f0d
    3ef8:	0000516d 	.word	0x0000516d
    3efc:	00005215 	.word	0x00005215
    3f00:	00003681 	.word	0x00003681
    3f04:	000085f5 	.word	0x000085f5
    3f08:	00005849 	.word	0x00005849
    3f0c:	0000847d 	.word	0x0000847d

00003f10 <icmp_send_response>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
    3f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f14:	b085      	sub	sp, #20
    3f16:	4680      	mov	r8, r0
    3f18:	4689      	mov	r9, r1
    3f1a:	4615      	mov	r5, r2
	/* we can use the echo header here */
	struct icmp_echo_hdr *icmphdr;
	ip_addr_t             iphdr_src;

	/* ICMP header + IP header + 8 bytes of data */
	q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE, PBUF_RAM);
    3f1c:	2200      	movs	r2, #0
    3f1e:	2124      	movs	r1, #36	; 0x24
    3f20:	2001      	movs	r0, #1
    3f22:	4b22      	ldr	r3, [pc, #136]	; (3fac <icmp_send_response+0x9c>)
    3f24:	4798      	blx	r3
	if (q == NULL) {
    3f26:	2800      	cmp	r0, #0
    3f28:	d03d      	beq.n	3fa6 <icmp_send_response+0x96>
    3f2a:	4606      	mov	r6, r0
		return;
	}
	LWIP_ASSERT("check that first pbuf can hold icmp message",
	            (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

	iphdr = (struct ip_hdr *)p->payload;
    3f2c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
	LWIP_DEBUGF(ICMP_DEBUG, (" to "));
	ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
	LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

	icmphdr        = (struct icmp_echo_hdr *)q->payload;
    3f30:	6844      	ldr	r4, [r0, #4]
	icmphdr->type  = type;
    3f32:	f884 9000 	strb.w	r9, [r4]
	icmphdr->code  = code;
    3f36:	7065      	strb	r5, [r4, #1]
	icmphdr->id    = 0;
    3f38:	2500      	movs	r5, #0
    3f3a:	7125      	strb	r5, [r4, #4]
    3f3c:	7165      	strb	r5, [r4, #5]
	icmphdr->seqno = 0;
    3f3e:	71a5      	strb	r5, [r4, #6]
    3f40:	71e5      	strb	r5, [r4, #7]

	/* copy fields from original packet */
	SMEMCPY(
    3f42:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3f46:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3f4a:	f8d3 e000 	ldr.w	lr, [r3]
    3f4e:	6858      	ldr	r0, [r3, #4]
    3f50:	6899      	ldr	r1, [r3, #8]
    3f52:	f8d3 800c 	ldr.w	r8, [r3, #12]
    3f56:	f8cc e008 	str.w	lr, [ip, #8]
    3f5a:	f8cc 000c 	str.w	r0, [ip, #12]
    3f5e:	f8cc 1010 	str.w	r1, [ip, #16]
    3f62:	f8cc 8014 	str.w	r8, [ip, #20]
    3f66:	f8d3 e010 	ldr.w	lr, [r3, #16]
    3f6a:	6958      	ldr	r0, [r3, #20]
    3f6c:	6999      	ldr	r1, [r3, #24]
    3f6e:	f8cc e018 	str.w	lr, [ip, #24]
    3f72:	f8cc 001c 	str.w	r0, [ip, #28]
    3f76:	f8cc 1020 	str.w	r1, [ip, #32]
	    (u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload, IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

	/* calculate checksum */
	icmphdr->chksum = 0;
    3f7a:	70a5      	strb	r5, [r4, #2]
    3f7c:	70e5      	strb	r5, [r4, #3]
	icmphdr->chksum = inet_chksum(icmphdr, q->len);
    3f7e:	8971      	ldrh	r1, [r6, #10]
    3f80:	4620      	mov	r0, r4
    3f82:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <icmp_send_response+0xa0>)
    3f84:	4798      	blx	r3
    3f86:	8060      	strh	r0, [r4, #2]
	ICMP_STATS_INC(icmp.xmit);
	/* increase number of messages attempted to send */
	snmp_inc_icmpoutmsgs();
	/* increase number of destination unreachable messages attempted to send */
	snmp_inc_icmpouttimeexcds();
	ip_addr_copy(iphdr_src, iphdr->src);
    3f88:	68fb      	ldr	r3, [r7, #12]
    3f8a:	aa04      	add	r2, sp, #16
    3f8c:	f842 3d04 	str.w	r3, [r2, #-4]!
	ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
    3f90:	2301      	movs	r3, #1
    3f92:	9301      	str	r3, [sp, #4]
    3f94:	9500      	str	r5, [sp, #0]
    3f96:	23ff      	movs	r3, #255	; 0xff
    3f98:	4629      	mov	r1, r5
    3f9a:	4630      	mov	r0, r6
    3f9c:	4c05      	ldr	r4, [pc, #20]	; (3fb4 <icmp_send_response+0xa4>)
    3f9e:	47a0      	blx	r4
	pbuf_free(q);
    3fa0:	4630      	mov	r0, r6
    3fa2:	4b05      	ldr	r3, [pc, #20]	; (3fb8 <icmp_send_response+0xa8>)
    3fa4:	4798      	blx	r3
}
    3fa6:	b005      	add	sp, #20
    3fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3fac:	00005505 	.word	0x00005505
    3fb0:	00004241 	.word	0x00004241
    3fb4:	000045ad 	.word	0x000045ad
    3fb8:	000054a1 	.word	0x000054a1

00003fbc <icmp_input>:
{
    3fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3fc0:	b085      	sub	sp, #20
    3fc2:	4605      	mov	r5, r0
    3fc4:	460f      	mov	r7, r1
	iphdr = (struct ip_hdr *)p->payload;
    3fc6:	6846      	ldr	r6, [r0, #4]
	hlen  = IPH_HL(iphdr) * 4;
    3fc8:	7831      	ldrb	r1, [r6, #0]
    3fca:	f001 010f 	and.w	r1, r1, #15
    3fce:	0089      	lsls	r1, r1, #2
    3fd0:	fa0f f881 	sxth.w	r8, r1
	if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t) * 2)) {
    3fd4:	4249      	negs	r1, r1
    3fd6:	b20c      	sxth	r4, r1
    3fd8:	4621      	mov	r1, r4
    3fda:	4b49      	ldr	r3, [pc, #292]	; (4100 <icmp_input+0x144>)
    3fdc:	4798      	blx	r3
    3fde:	b9d0      	cbnz	r0, 4016 <icmp_input+0x5a>
    3fe0:	892b      	ldrh	r3, [r5, #8]
    3fe2:	2b03      	cmp	r3, #3
    3fe4:	d917      	bls.n	4016 <icmp_input+0x5a>
	type = *((u8_t *)p->payload);
    3fe6:	686b      	ldr	r3, [r5, #4]
    3fe8:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    3fea:	2b08      	cmp	r3, #8
    3fec:	d176      	bne.n	40dc <icmp_input+0x120>
		if (ip_addr_ismulticast(&current_iphdr_dest)) {
    3fee:	4b45      	ldr	r3, [pc, #276]	; (4104 <icmp_input+0x148>)
    3ff0:	6818      	ldr	r0, [r3, #0]
    3ff2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    3ff6:	2be0      	cmp	r3, #224	; 0xe0
    3ff8:	d013      	beq.n	4022 <icmp_input+0x66>
		int accepted = 1;
    3ffa:	f04f 0901 	mov.w	r9, #1
		if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
    3ffe:	4639      	mov	r1, r7
    4000:	4b41      	ldr	r3, [pc, #260]	; (4108 <icmp_input+0x14c>)
    4002:	4798      	blx	r3
    4004:	b108      	cbz	r0, 400a <icmp_input+0x4e>
			accepted = 0;
    4006:	f04f 0900 	mov.w	r9, #0
		if (!accepted) {
    400a:	f1b9 0f00 	cmp.w	r9, #0
    400e:	d00b      	beq.n	4028 <icmp_input+0x6c>
		if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
    4010:	892b      	ldrh	r3, [r5, #8]
    4012:	2b07      	cmp	r3, #7
    4014:	d80c      	bhi.n	4030 <icmp_input+0x74>
	pbuf_free(p);
    4016:	4628      	mov	r0, r5
    4018:	4b3c      	ldr	r3, [pc, #240]	; (410c <icmp_input+0x150>)
    401a:	4798      	blx	r3
}
    401c:	b005      	add	sp, #20
    401e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			accepted = 0;
    4022:	f04f 0900 	mov.w	r9, #0
    4026:	e7ea      	b.n	3ffe <icmp_input+0x42>
			pbuf_free(p);
    4028:	4628      	mov	r0, r5
    402a:	4b38      	ldr	r3, [pc, #224]	; (410c <icmp_input+0x150>)
    402c:	4798      	blx	r3
			return;
    402e:	e7f5      	b.n	401c <icmp_input+0x60>
		if (inet_chksum_pbuf(p) != 0) {
    4030:	4628      	mov	r0, r5
    4032:	4b37      	ldr	r3, [pc, #220]	; (4110 <icmp_input+0x154>)
    4034:	4798      	blx	r3
    4036:	b968      	cbnz	r0, 4054 <icmp_input+0x98>
		if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    4038:	2124      	movs	r1, #36	; 0x24
    403a:	4628      	mov	r0, r5
    403c:	4b30      	ldr	r3, [pc, #192]	; (4100 <icmp_input+0x144>)
    403e:	4798      	blx	r3
    4040:	b330      	cbz	r0, 4090 <icmp_input+0xd4>
			if (pbuf_header(p, hlen)) {
    4042:	4641      	mov	r1, r8
    4044:	4628      	mov	r0, r5
    4046:	4b2e      	ldr	r3, [pc, #184]	; (4100 <icmp_input+0x144>)
    4048:	4798      	blx	r3
    404a:	b138      	cbz	r0, 405c <icmp_input+0xa0>
	pbuf_free(p);
    404c:	4628      	mov	r0, r5
    404e:	4b2f      	ldr	r3, [pc, #188]	; (410c <icmp_input+0x150>)
    4050:	4798      	blx	r3
	return;
    4052:	e7e3      	b.n	401c <icmp_input+0x60>
			pbuf_free(p);
    4054:	4628      	mov	r0, r5
    4056:	4b2d      	ldr	r3, [pc, #180]	; (410c <icmp_input+0x150>)
    4058:	4798      	blx	r3
			return;
    405a:	e7df      	b.n	401c <icmp_input+0x60>
			r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
    405c:	2200      	movs	r2, #0
    405e:	8929      	ldrh	r1, [r5, #8]
    4060:	2002      	movs	r0, #2
    4062:	4b2c      	ldr	r3, [pc, #176]	; (4114 <icmp_input+0x158>)
    4064:	4798      	blx	r3
			if (r == NULL) {
    4066:	4681      	mov	r9, r0
    4068:	2800      	cmp	r0, #0
    406a:	d0ef      	beq.n	404c <icmp_input+0x90>
			if (pbuf_copy(r, p) != ERR_OK) {
    406c:	4629      	mov	r1, r5
    406e:	4b2a      	ldr	r3, [pc, #168]	; (4118 <icmp_input+0x15c>)
    4070:	4798      	blx	r3
    4072:	2800      	cmp	r0, #0
    4074:	d1ea      	bne.n	404c <icmp_input+0x90>
			iphdr = (struct ip_hdr *)r->payload;
    4076:	f8d9 6004 	ldr.w	r6, [r9, #4]
			if (pbuf_header(r, -hlen)) {
    407a:	4621      	mov	r1, r4
    407c:	4648      	mov	r0, r9
    407e:	4b20      	ldr	r3, [pc, #128]	; (4100 <icmp_input+0x144>)
    4080:	4798      	blx	r3
    4082:	2800      	cmp	r0, #0
    4084:	d1e2      	bne.n	404c <icmp_input+0x90>
			pbuf_free(p);
    4086:	4628      	mov	r0, r5
    4088:	4b20      	ldr	r3, [pc, #128]	; (410c <icmp_input+0x150>)
    408a:	4798      	blx	r3
			p = r;
    408c:	464d      	mov	r5, r9
    408e:	e006      	b.n	409e <icmp_input+0xe2>
			if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    4090:	f06f 0123 	mvn.w	r1, #35	; 0x23
    4094:	4628      	mov	r0, r5
    4096:	4b1a      	ldr	r3, [pc, #104]	; (4100 <icmp_input+0x144>)
    4098:	4798      	blx	r3
    409a:	2800      	cmp	r0, #0
    409c:	d1d6      	bne.n	404c <icmp_input+0x90>
		iecho = (struct icmp_echo_hdr *)p->payload;
    409e:	686a      	ldr	r2, [r5, #4]
		ip_addr_copy(iphdr->src, *ip_current_dest_addr());
    40a0:	4b18      	ldr	r3, [pc, #96]	; (4104 <icmp_input+0x148>)
    40a2:	681b      	ldr	r3, [r3, #0]
    40a4:	60f3      	str	r3, [r6, #12]
		ip_addr_copy(iphdr->dest, *ip_current_src_addr());
    40a6:	4b1d      	ldr	r3, [pc, #116]	; (411c <icmp_input+0x160>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	6133      	str	r3, [r6, #16]
		ICMPH_TYPE_SET(iecho, ICMP_ER);
    40ac:	2300      	movs	r3, #0
    40ae:	7013      	strb	r3, [r2, #0]
		if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
    40b0:	8853      	ldrh	r3, [r2, #2]
    40b2:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    40b6:	428b      	cmp	r3, r1
    40b8:	d914      	bls.n	40e4 <icmp_input+0x128>
			iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    40ba:	3309      	adds	r3, #9
    40bc:	8053      	strh	r3, [r2, #2]
		IPH_TTL_SET(iphdr, ICMP_TTL);
    40be:	23ff      	movs	r3, #255	; 0xff
    40c0:	7233      	strb	r3, [r6, #8]
		IPH_CHKSUM_SET(iphdr, 0);
    40c2:	2300      	movs	r3, #0
    40c4:	72b3      	strb	r3, [r6, #10]
    40c6:	72f3      	strb	r3, [r6, #11]
		IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    40c8:	2114      	movs	r1, #20
    40ca:	4630      	mov	r0, r6
    40cc:	4b14      	ldr	r3, [pc, #80]	; (4120 <icmp_input+0x164>)
    40ce:	4798      	blx	r3
    40d0:	8170      	strh	r0, [r6, #10]
		if (pbuf_header(p, hlen)) {
    40d2:	4641      	mov	r1, r8
    40d4:	4628      	mov	r0, r5
    40d6:	4b0a      	ldr	r3, [pc, #40]	; (4100 <icmp_input+0x144>)
    40d8:	4798      	blx	r3
    40da:	b130      	cbz	r0, 40ea <icmp_input+0x12e>
	pbuf_free(p);
    40dc:	4628      	mov	r0, r5
    40de:	4b0b      	ldr	r3, [pc, #44]	; (410c <icmp_input+0x150>)
    40e0:	4798      	blx	r3
	return;
    40e2:	e79b      	b.n	401c <icmp_input+0x60>
			iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    40e4:	3308      	adds	r3, #8
    40e6:	8053      	strh	r3, [r2, #2]
    40e8:	e7e9      	b.n	40be <icmp_input+0x102>
			ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL, ICMP_TTL, 0, IP_PROTO_ICMP, inp);
    40ea:	9702      	str	r7, [sp, #8]
    40ec:	2301      	movs	r3, #1
    40ee:	9301      	str	r3, [sp, #4]
    40f0:	2200      	movs	r2, #0
    40f2:	9200      	str	r2, [sp, #0]
    40f4:	23ff      	movs	r3, #255	; 0xff
    40f6:	4903      	ldr	r1, [pc, #12]	; (4104 <icmp_input+0x148>)
    40f8:	4628      	mov	r0, r5
    40fa:	4c0a      	ldr	r4, [pc, #40]	; (4124 <icmp_input+0x168>)
    40fc:	47a0      	blx	r4
    40fe:	e7ed      	b.n	40dc <icmp_input+0x120>
    4100:	00005427 	.word	0x00005427
    4104:	200129a8 	.word	0x200129a8
    4108:	000045ed 	.word	0x000045ed
    410c:	000054a1 	.word	0x000054a1
    4110:	00004251 	.word	0x00004251
    4114:	00005505 	.word	0x00005505
    4118:	000056e5 	.word	0x000056e5
    411c:	200129a0 	.word	0x200129a0
    4120:	00004241 	.word	0x00004241
    4124:	000044b9 	.word	0x000044b9

00004128 <icmp_dest_unreach>:
{
    4128:	b508      	push	{r3, lr}
	icmp_send_response(p, ICMP_DUR, t);
    412a:	460a      	mov	r2, r1
    412c:	2103      	movs	r1, #3
    412e:	4b01      	ldr	r3, [pc, #4]	; (4134 <icmp_dest_unreach+0xc>)
    4130:	4798      	blx	r3
    4132:	bd08      	pop	{r3, pc}
    4134:	00003f11 	.word	0x00003f11

00004138 <icmp_time_exceeded>:
{
    4138:	b508      	push	{r3, lr}
	icmp_send_response(p, ICMP_TE, t);
    413a:	460a      	mov	r2, r1
    413c:	210b      	movs	r1, #11
    413e:	4b01      	ldr	r3, [pc, #4]	; (4144 <icmp_time_exceeded+0xc>)
    4140:	4798      	blx	r3
    4142:	bd08      	pop	{r3, pc}
    4144:	00003f11 	.word	0x00003f11

00004148 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */

static u16_t lwip_standard_chksum(void *dataptr, int len)
{
    4148:	b410      	push	{r4}
    414a:	b083      	sub	sp, #12
	u8_t * pb = (u8_t *)dataptr;
	u16_t *ps, t = 0;
    414c:	2300      	movs	r3, #0
    414e:	f8ad 3006 	strh.w	r3, [sp, #6]
	u32_t  sum = 0;
	int    odd = ((mem_ptr_t)pb & 1);

	/* Get aligned to u16_t */
	if (odd && len > 0) {
    4152:	f010 0401 	ands.w	r4, r0, #1
    4156:	d007      	beq.n	4168 <lwip_standard_chksum+0x20>
    4158:	4299      	cmp	r1, r3
    415a:	dd08      	ble.n	416e <lwip_standard_chksum+0x26>
		((u8_t *)&t)[1] = *pb++;
    415c:	1c43      	adds	r3, r0, #1
    415e:	7802      	ldrb	r2, [r0, #0]
    4160:	f88d 2007 	strb.w	r2, [sp, #7]
		len--;
    4164:	3901      	subs	r1, #1
    4166:	e000      	b.n	416a <lwip_standard_chksum+0x22>
	u8_t * pb = (u8_t *)dataptr;
    4168:	4603      	mov	r3, r0
	u32_t  sum = 0;
    416a:	2200      	movs	r2, #0
	}

	/* Add the bulk of the data */
	ps = (u16_t *)(void *)pb;
	while (len > 1) {
    416c:	e005      	b.n	417a <lwip_standard_chksum+0x32>
	u8_t * pb = (u8_t *)dataptr;
    416e:	4603      	mov	r3, r0
    4170:	e7fb      	b.n	416a <lwip_standard_chksum+0x22>
		sum += *ps++;
    4172:	8818      	ldrh	r0, [r3, #0]
    4174:	4402      	add	r2, r0
		len -= 2;
    4176:	3902      	subs	r1, #2
		sum += *ps++;
    4178:	3302      	adds	r3, #2
	while (len > 1) {
    417a:	2901      	cmp	r1, #1
    417c:	dcf9      	bgt.n	4172 <lwip_standard_chksum+0x2a>
	}

	/* Consume left-over byte, if any */
	if (len > 0) {
    417e:	2900      	cmp	r1, #0
    4180:	dd02      	ble.n	4188 <lwip_standard_chksum+0x40>
		((u8_t *)&t)[0] = *(u8_t *)ps;
    4182:	781b      	ldrb	r3, [r3, #0]
    4184:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	/* Add end bytes */
	sum += t;
    4188:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    418c:	4402      	add	r2, r0

	/* Fold 32-bit sum to 16 bits
	   calling this twice is propably faster than if statements... */
	sum = FOLD_U32T(sum);
    418e:	b290      	uxth	r0, r2
    4190:	eb00 4212 	add.w	r2, r0, r2, lsr #16
	sum = FOLD_U32T(sum);
    4194:	b290      	uxth	r0, r2
    4196:	eb00 4012 	add.w	r0, r0, r2, lsr #16

	/* Swap if alignment was odd */
	if (odd) {
    419a:	b124      	cbz	r4, 41a6 <lwip_standard_chksum+0x5e>
		sum = SWAP_BYTES_IN_WORD(sum);
    419c:	0203      	lsls	r3, r0, #8
    419e:	b29b      	uxth	r3, r3
    41a0:	f3c0 2007 	ubfx	r0, r0, #8, #8
    41a4:	4318      	orrs	r0, r3
	}

	return (u16_t)sum;
}
    41a6:	b280      	uxth	r0, r0
    41a8:	b003      	add	sp, #12
    41aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    41ae:	4770      	bx	lr

000041b0 <inet_chksum_pseudo>:
 * @param proto ip protocol (used for checksum of pseudo header)
 * @param proto_len length of the ip data part (used for checksum of pseudo header)
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t inet_chksum_pseudo(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t proto, u16_t proto_len)
{
    41b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41b4:	4605      	mov	r5, r0
    41b6:	4689      	mov	r9, r1
    41b8:	4690      	mov	r8, r2
    41ba:	461e      	mov	r6, r3
	u32_t        addr;
	struct pbuf *q;
	u8_t         swapped;

	acc     = 0;
	swapped = 0;
    41bc:	2700      	movs	r7, #0
	acc     = 0;
    41be:	463c      	mov	r4, r7
	/* iterate through all pbuf in chain */
	for (q = p; q != NULL; q = q->next) {
    41c0:	e000      	b.n	41c4 <inet_chksum_pseudo+0x14>
    41c2:	682d      	ldr	r5, [r5, #0]
    41c4:	b1a5      	cbz	r5, 41f0 <inet_chksum_pseudo+0x40>
		LWIP_DEBUGF(INET_DEBUG,
		            ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n", (void *)q, (void *)q->next));
		acc += LWIP_CHKSUM(q->payload, q->len);
    41c6:	8969      	ldrh	r1, [r5, #10]
    41c8:	6868      	ldr	r0, [r5, #4]
    41ca:	4b1b      	ldr	r3, [pc, #108]	; (4238 <inet_chksum_pseudo+0x88>)
    41cc:	4798      	blx	r3
    41ce:	4404      	add	r4, r0
		/*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
		/* just executing this next line is probably faster that the if statement needed
		   to check whether we really need to execute it, and does no harm */
		acc = FOLD_U32T(acc);
    41d0:	b2a0      	uxth	r0, r4
    41d2:	eb00 4414 	add.w	r4, r0, r4, lsr #16
		if (q->len % 2 != 0) {
    41d6:	896b      	ldrh	r3, [r5, #10]
    41d8:	f013 0f01 	tst.w	r3, #1
    41dc:	d0f1      	beq.n	41c2 <inet_chksum_pseudo+0x12>
			swapped = 1 - swapped;
    41de:	f1c7 0701 	rsb	r7, r7, #1
    41e2:	b2ff      	uxtb	r7, r7
			acc     = SWAP_BYTES_IN_WORD(acc);
    41e4:	0223      	lsls	r3, r4, #8
    41e6:	b29b      	uxth	r3, r3
    41e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
    41ec:	431c      	orrs	r4, r3
    41ee:	e7e8      	b.n	41c2 <inet_chksum_pseudo+0x12>
		}
		/*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
	}

	if (swapped) {
    41f0:	b127      	cbz	r7, 41fc <inet_chksum_pseudo+0x4c>
		acc = SWAP_BYTES_IN_WORD(acc);
    41f2:	0223      	lsls	r3, r4, #8
    41f4:	b29b      	uxth	r3, r3
    41f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
    41fa:	431c      	orrs	r4, r3
	}
	addr = ip4_addr_get_u32(src);
    41fc:	f8d9 3000 	ldr.w	r3, [r9]
	acc += (addr & 0xffffUL);
    4200:	fa14 f483 	uxtah	r4, r4, r3
	acc += ((addr >> 16) & 0xffffUL);
    4204:	eb04 4413 	add.w	r4, r4, r3, lsr #16
	addr = ip4_addr_get_u32(dest);
    4208:	f8d8 0000 	ldr.w	r0, [r8]
	acc += (addr & 0xffffUL);
    420c:	fa14 f480 	uxtah	r4, r4, r0
	acc += ((addr >> 16) & 0xffffUL);
    4210:	eb04 4410 	add.w	r4, r4, r0, lsr #16
	acc += (u32_t)htons((u16_t)proto);
    4214:	4630      	mov	r0, r6
    4216:	4d09      	ldr	r5, [pc, #36]	; (423c <inet_chksum_pseudo+0x8c>)
    4218:	47a8      	blx	r5
    421a:	4404      	add	r4, r0
	acc += (u32_t)htons(proto_len);
    421c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    4220:	47a8      	blx	r5
    4222:	4420      	add	r0, r4

	/* Fold 32-bit sum to 16 bits
	   calling this twice is propably faster than if statements... */
	acc = FOLD_U32T(acc);
    4224:	b283      	uxth	r3, r0
    4226:	eb03 4310 	add.w	r3, r3, r0, lsr #16
	acc = FOLD_U32T(acc);
    422a:	b298      	uxth	r0, r3
    422c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
	LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%" X32_F "\n", acc));
	return (u16_t) ~(acc & 0xffffUL);
    4230:	43c0      	mvns	r0, r0
}
    4232:	b280      	uxth	r0, r0
    4234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4238:	00004149 	.word	0x00004149
    423c:	00003e91 	.word	0x00003e91

00004240 <inet_chksum>:
 * @param len length of the buffer to calculate the checksum
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t inet_chksum(void *dataptr, u16_t len)
{
    4240:	b508      	push	{r3, lr}
	return ~LWIP_CHKSUM(dataptr, len);
    4242:	4b02      	ldr	r3, [pc, #8]	; (424c <inet_chksum+0xc>)
    4244:	4798      	blx	r3
    4246:	43c0      	mvns	r0, r0
}
    4248:	b280      	uxth	r0, r0
    424a:	bd08      	pop	{r3, pc}
    424c:	00004149 	.word	0x00004149

00004250 <inet_chksum_pbuf>:
 *
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t inet_chksum_pbuf(struct pbuf *p)
{
    4250:	b570      	push	{r4, r5, r6, lr}
    4252:	4605      	mov	r5, r0
	u32_t        acc;
	struct pbuf *q;
	u8_t         swapped;

	acc     = 0;
	swapped = 0;
    4254:	2600      	movs	r6, #0
	acc     = 0;
    4256:	4634      	mov	r4, r6
	for (q = p; q != NULL; q = q->next) {
    4258:	e000      	b.n	425c <inet_chksum_pbuf+0xc>
    425a:	682d      	ldr	r5, [r5, #0]
    425c:	b1a5      	cbz	r5, 4288 <inet_chksum_pbuf+0x38>
		acc += LWIP_CHKSUM(q->payload, q->len);
    425e:	8969      	ldrh	r1, [r5, #10]
    4260:	6868      	ldr	r0, [r5, #4]
    4262:	4b0e      	ldr	r3, [pc, #56]	; (429c <inet_chksum_pbuf+0x4c>)
    4264:	4798      	blx	r3
    4266:	4420      	add	r0, r4
		acc = FOLD_U32T(acc);
    4268:	b284      	uxth	r4, r0
    426a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
		if (q->len % 2 != 0) {
    426e:	896b      	ldrh	r3, [r5, #10]
    4270:	f013 0f01 	tst.w	r3, #1
    4274:	d0f1      	beq.n	425a <inet_chksum_pbuf+0xa>
			swapped = 1 - swapped;
    4276:	f1c6 0601 	rsb	r6, r6, #1
    427a:	b2f6      	uxtb	r6, r6
			acc     = SWAP_BYTES_IN_WORD(acc);
    427c:	0223      	lsls	r3, r4, #8
    427e:	b29b      	uxth	r3, r3
    4280:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4284:	431c      	orrs	r4, r3
    4286:	e7e8      	b.n	425a <inet_chksum_pbuf+0xa>
		}
	}

	if (swapped) {
    4288:	b126      	cbz	r6, 4294 <inet_chksum_pbuf+0x44>
		acc = SWAP_BYTES_IN_WORD(acc);
    428a:	0223      	lsls	r3, r4, #8
    428c:	b29b      	uxth	r3, r3
    428e:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4292:	431c      	orrs	r4, r3
	}
	return (u16_t) ~(acc & 0xffffUL);
    4294:	43e0      	mvns	r0, r4
}
    4296:	b280      	uxth	r0, r0
    4298:	bd70      	pop	{r4, r5, r6, pc}
    429a:	bf00      	nop
    429c:	00004149 	.word	0x00004149

000042a0 <ip_route>:
		return netif;
	}
#endif

	/* iterate through netifs */
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    42a0:	4b19      	ldr	r3, [pc, #100]	; (4308 <ip_route+0x68>)
    42a2:	681b      	ldr	r3, [r3, #0]
    42a4:	e00e      	b.n	42c4 <ip_route+0x24>
				/* return netif on which to forward IP packet */
				return netif;
			}
		}
	}
	if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    42a6:	4a19      	ldr	r2, [pc, #100]	; (430c <ip_route+0x6c>)
    42a8:	6810      	ldr	r0, [r2, #0]
    42aa:	b138      	cbz	r0, 42bc <ip_route+0x1c>
    42ac:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
    42b0:	f012 0f01 	tst.w	r2, #1
    42b4:	d102      	bne.n	42bc <ip_route+0x1c>
		             ip4_addr2_16(dest),
		             ip4_addr3_16(dest),
		             ip4_addr4_16(dest)));
		IP_STATS_INC(ip.rterr);
		snmp_inc_ipoutnoroutes();
		return NULL;
    42b6:	4618      	mov	r0, r3
    42b8:	e000      	b.n	42bc <ip_route+0x1c>
				return netif;
    42ba:	4618      	mov	r0, r3
	}
	/* no matching netif found, use default netif */
	return netif_default;
}
    42bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    42c0:	4770      	bx	lr
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    42c2:	681b      	ldr	r3, [r3, #0]
    42c4:	b1a3      	cbz	r3, 42f0 <ip_route+0x50>
		if (netif_is_up(netif)) {
    42c6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    42ca:	f012 0f01 	tst.w	r2, #1
    42ce:	d0f8      	beq.n	42c2 <ip_route+0x22>
{
    42d0:	b410      	push	{r4}
			if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
    42d2:	6802      	ldr	r2, [r0, #0]
    42d4:	685c      	ldr	r4, [r3, #4]
    42d6:	6899      	ldr	r1, [r3, #8]
    42d8:	4062      	eors	r2, r4
    42da:	420a      	tst	r2, r1
    42dc:	d0ed      	beq.n	42ba <ip_route+0x1a>
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    42de:	681b      	ldr	r3, [r3, #0]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d0e0      	beq.n	42a6 <ip_route+0x6>
		if (netif_is_up(netif)) {
    42e4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    42e8:	f012 0f01 	tst.w	r2, #1
    42ec:	d0f7      	beq.n	42de <ip_route+0x3e>
    42ee:	e7f0      	b.n	42d2 <ip_route+0x32>
	if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    42f0:	4a06      	ldr	r2, [pc, #24]	; (430c <ip_route+0x6c>)
    42f2:	6810      	ldr	r0, [r2, #0]
    42f4:	2800      	cmp	r0, #0
    42f6:	d0e3      	beq.n	42c0 <ip_route+0x20>
    42f8:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
    42fc:	f012 0f01 	tst.w	r2, #1
    4300:	d1de      	bne.n	42c0 <ip_route+0x20>
		return NULL;
    4302:	4618      	mov	r0, r3
}
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	200161c4 	.word	0x200161c4
    430c:	200161c8 	.word	0x200161c8

00004310 <ip_input>:
 * @param inp the netif on which this packet was received
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t ip_input(struct pbuf *p, struct netif *inp)
{
    4310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4314:	4605      	mov	r5, r0

	IP_STATS_INC(ip.recv);
	snmp_inc_ipinreceives();

	/* identify the IP header */
	iphdr = (struct ip_hdr *)p->payload;
    4316:	6847      	ldr	r7, [r0, #4]
	if (IPH_V(iphdr) != 4) {
    4318:	783b      	ldrb	r3, [r7, #0]
    431a:	091a      	lsrs	r2, r3, #4
    431c:	2a04      	cmp	r2, #4
    431e:	d004      	beq.n	432a <ip_input+0x1a>
		LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING,
		            ("IP packet dropped due to bad version number %" U16_F "\n", IPH_V(iphdr)));
		ip_debug_print(p);
		pbuf_free(p);
    4320:	4b56      	ldr	r3, [pc, #344]	; (447c <ip_input+0x16c>)
    4322:	4798      	blx	r3
	current_header = NULL;
	ip_addr_set_any(&current_iphdr_src);
	ip_addr_set_any(&current_iphdr_dest);

	return ERR_OK;
}
    4324:	2000      	movs	r0, #0
    4326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    432a:	460e      	mov	r6, r1
	iphdr_hlen = IPH_HL(iphdr);
    432c:	f003 030f 	and.w	r3, r3, #15
	iphdr_hlen *= 4;
    4330:	009c      	lsls	r4, r3, #2
	iphdr_len = ntohs(IPH_LEN(iphdr));
    4332:	8878      	ldrh	r0, [r7, #2]
    4334:	4b52      	ldr	r3, [pc, #328]	; (4480 <ip_input+0x170>)
    4336:	4798      	blx	r3
    4338:	4680      	mov	r8, r0
	if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
    433a:	896b      	ldrh	r3, [r5, #10]
    433c:	429c      	cmp	r4, r3
    433e:	d802      	bhi.n	4346 <ip_input+0x36>
    4340:	892b      	ldrh	r3, [r5, #8]
    4342:	4298      	cmp	r0, r3
    4344:	d903      	bls.n	434e <ip_input+0x3e>
		pbuf_free(p);
    4346:	4628      	mov	r0, r5
    4348:	4b4c      	ldr	r3, [pc, #304]	; (447c <ip_input+0x16c>)
    434a:	4798      	blx	r3
		return ERR_OK;
    434c:	e7ea      	b.n	4324 <ip_input+0x14>
	if (inet_chksum(iphdr, iphdr_hlen) != 0) {
    434e:	4621      	mov	r1, r4
    4350:	4638      	mov	r0, r7
    4352:	4b4c      	ldr	r3, [pc, #304]	; (4484 <ip_input+0x174>)
    4354:	4798      	blx	r3
    4356:	b968      	cbnz	r0, 4374 <ip_input+0x64>
	pbuf_realloc(p, iphdr_len);
    4358:	4641      	mov	r1, r8
    435a:	4628      	mov	r0, r5
    435c:	4b4a      	ldr	r3, [pc, #296]	; (4488 <ip_input+0x178>)
    435e:	4798      	blx	r3
	ip_addr_copy(current_iphdr_dest, iphdr->dest);
    4360:	693a      	ldr	r2, [r7, #16]
    4362:	4b4a      	ldr	r3, [pc, #296]	; (448c <ip_input+0x17c>)
    4364:	601a      	str	r2, [r3, #0]
	ip_addr_copy(current_iphdr_src, iphdr->src);
    4366:	68fa      	ldr	r2, [r7, #12]
    4368:	4b49      	ldr	r3, [pc, #292]	; (4490 <ip_input+0x180>)
    436a:	601a      	str	r2, [r3, #0]
		netif     = inp;
    436c:	4634      	mov	r4, r6
		int first = 1;
    436e:	f04f 0801 	mov.w	r8, #1
    4372:	e00d      	b.n	4390 <ip_input+0x80>
		pbuf_free(p);
    4374:	4628      	mov	r0, r5
    4376:	4b41      	ldr	r3, [pc, #260]	; (447c <ip_input+0x16c>)
    4378:	4798      	blx	r3
		return ERR_OK;
    437a:	e7d3      	b.n	4324 <ip_input+0x14>
			if (first) {
    437c:	f1b8 0f00 	cmp.w	r8, #0
    4380:	d04f      	beq.n	4422 <ip_input+0x112>
				netif = netif_list;
    4382:	4b44      	ldr	r3, [pc, #272]	; (4494 <ip_input+0x184>)
    4384:	681c      	ldr	r4, [r3, #0]
				first = 0;
    4386:	f04f 0800 	mov.w	r8, #0
			if (netif == inp) {
    438a:	42b4      	cmp	r4, r6
    438c:	d04b      	beq.n	4426 <ip_input+0x116>
		} while (netif != NULL);
    438e:	b19c      	cbz	r4, 43b8 <ip_input+0xa8>
			if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
    4390:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    4394:	f013 0f01 	tst.w	r3, #1
    4398:	d0f0      	beq.n	437c <ip_input+0x6c>
    439a:	f114 0f04 	cmn.w	r4, #4
    439e:	d0ed      	beq.n	437c <ip_input+0x6c>
    43a0:	6863      	ldr	r3, [r4, #4]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d0ea      	beq.n	437c <ip_input+0x6c>
				if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    43a6:	4a39      	ldr	r2, [pc, #228]	; (448c <ip_input+0x17c>)
    43a8:	6810      	ldr	r0, [r2, #0]
    43aa:	4283      	cmp	r3, r0
    43ac:	d004      	beq.n	43b8 <ip_input+0xa8>
				    ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
    43ae:	4621      	mov	r1, r4
    43b0:	4b39      	ldr	r3, [pc, #228]	; (4498 <ip_input+0x188>)
    43b2:	4798      	blx	r3
				if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    43b4:	2800      	cmp	r0, #0
    43b6:	d0e1      	beq.n	437c <ip_input+0x6c>
		if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) || (ip_addr_ismulticast(&current_iphdr_src))) {
    43b8:	4631      	mov	r1, r6
    43ba:	4b35      	ldr	r3, [pc, #212]	; (4490 <ip_input+0x180>)
    43bc:	6818      	ldr	r0, [r3, #0]
    43be:	4b36      	ldr	r3, [pc, #216]	; (4498 <ip_input+0x188>)
    43c0:	4798      	blx	r3
    43c2:	2800      	cmp	r0, #0
    43c4:	d131      	bne.n	442a <ip_input+0x11a>
    43c6:	4b32      	ldr	r3, [pc, #200]	; (4490 <ip_input+0x180>)
    43c8:	681b      	ldr	r3, [r3, #0]
    43ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    43ce:	2be0      	cmp	r3, #224	; 0xe0
    43d0:	d02b      	beq.n	442a <ip_input+0x11a>
	if (netif == NULL) {
    43d2:	2c00      	cmp	r4, #0
    43d4:	d02d      	beq.n	4432 <ip_input+0x122>
	if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
    43d6:	88fb      	ldrh	r3, [r7, #6]
    43d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    43dc:	b29b      	uxth	r3, r3
    43de:	2b00      	cmp	r3, #0
    43e0:	d12b      	bne.n	443a <ip_input+0x12a>
	current_netif  = inp;
    43e2:	4b2e      	ldr	r3, [pc, #184]	; (449c <ip_input+0x18c>)
    43e4:	601e      	str	r6, [r3, #0]
	current_header = iphdr;
    43e6:	4b2e      	ldr	r3, [pc, #184]	; (44a0 <ip_input+0x190>)
    43e8:	601f      	str	r7, [r3, #0]
		switch (IPH_PROTO(iphdr)) {
    43ea:	7a7b      	ldrb	r3, [r7, #9]
    43ec:	2b06      	cmp	r3, #6
    43ee:	d03b      	beq.n	4468 <ip_input+0x158>
    43f0:	2b11      	cmp	r3, #17
    43f2:	d02b      	beq.n	444c <ip_input+0x13c>
    43f4:	2b01      	cmp	r3, #1
    43f6:	d03c      	beq.n	4472 <ip_input+0x162>
			if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) && !ip_addr_ismulticast(&current_iphdr_dest)) {
    43f8:	4631      	mov	r1, r6
    43fa:	4b24      	ldr	r3, [pc, #144]	; (448c <ip_input+0x17c>)
    43fc:	6818      	ldr	r0, [r3, #0]
    43fe:	4b26      	ldr	r3, [pc, #152]	; (4498 <ip_input+0x188>)
    4400:	4798      	blx	r3
    4402:	b950      	cbnz	r0, 441a <ip_input+0x10a>
    4404:	4b21      	ldr	r3, [pc, #132]	; (448c <ip_input+0x17c>)
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    440c:	2be0      	cmp	r3, #224	; 0xe0
    440e:	d004      	beq.n	441a <ip_input+0x10a>
				p->payload = iphdr;
    4410:	606f      	str	r7, [r5, #4]
				icmp_dest_unreach(p, ICMP_DUR_PROTO);
    4412:	2102      	movs	r1, #2
    4414:	4628      	mov	r0, r5
    4416:	4b23      	ldr	r3, [pc, #140]	; (44a4 <ip_input+0x194>)
    4418:	4798      	blx	r3
			pbuf_free(p);
    441a:	4628      	mov	r0, r5
    441c:	4b17      	ldr	r3, [pc, #92]	; (447c <ip_input+0x16c>)
    441e:	4798      	blx	r3
    4420:	e018      	b.n	4454 <ip_input+0x144>
				netif = netif->next;
    4422:	6824      	ldr	r4, [r4, #0]
    4424:	e7b1      	b.n	438a <ip_input+0x7a>
				netif = netif->next;
    4426:	6824      	ldr	r4, [r4, #0]
    4428:	e7b1      	b.n	438e <ip_input+0x7e>
			pbuf_free(p);
    442a:	4628      	mov	r0, r5
    442c:	4b13      	ldr	r3, [pc, #76]	; (447c <ip_input+0x16c>)
    442e:	4798      	blx	r3
			return ERR_OK;
    4430:	e778      	b.n	4324 <ip_input+0x14>
		pbuf_free(p);
    4432:	4628      	mov	r0, r5
    4434:	4b11      	ldr	r3, [pc, #68]	; (447c <ip_input+0x16c>)
    4436:	4798      	blx	r3
		return ERR_OK;
    4438:	e774      	b.n	4324 <ip_input+0x14>
		p = ip_reass(p);
    443a:	4628      	mov	r0, r5
    443c:	4b1a      	ldr	r3, [pc, #104]	; (44a8 <ip_input+0x198>)
    443e:	4798      	blx	r3
		if (p == NULL) {
    4440:	4605      	mov	r5, r0
    4442:	2800      	cmp	r0, #0
    4444:	f43f af6e 	beq.w	4324 <ip_input+0x14>
		iphdr = (struct ip_hdr *)p->payload;
    4448:	6847      	ldr	r7, [r0, #4]
    444a:	e7ca      	b.n	43e2 <ip_input+0xd2>
			udp_input(p, inp);
    444c:	4631      	mov	r1, r6
    444e:	4628      	mov	r0, r5
    4450:	4b16      	ldr	r3, [pc, #88]	; (44ac <ip_input+0x19c>)
    4452:	4798      	blx	r3
	current_netif  = NULL;
    4454:	2300      	movs	r3, #0
    4456:	4a11      	ldr	r2, [pc, #68]	; (449c <ip_input+0x18c>)
    4458:	6013      	str	r3, [r2, #0]
	current_header = NULL;
    445a:	4a11      	ldr	r2, [pc, #68]	; (44a0 <ip_input+0x190>)
    445c:	6013      	str	r3, [r2, #0]
	ip_addr_set_any(&current_iphdr_src);
    445e:	4a0c      	ldr	r2, [pc, #48]	; (4490 <ip_input+0x180>)
    4460:	6013      	str	r3, [r2, #0]
	ip_addr_set_any(&current_iphdr_dest);
    4462:	4a0a      	ldr	r2, [pc, #40]	; (448c <ip_input+0x17c>)
    4464:	6013      	str	r3, [r2, #0]
	return ERR_OK;
    4466:	e75d      	b.n	4324 <ip_input+0x14>
			tcp_input(p, inp);
    4468:	4631      	mov	r1, r6
    446a:	4628      	mov	r0, r5
    446c:	4b10      	ldr	r3, [pc, #64]	; (44b0 <ip_input+0x1a0>)
    446e:	4798      	blx	r3
			break;
    4470:	e7f0      	b.n	4454 <ip_input+0x144>
			icmp_input(p, inp);
    4472:	4631      	mov	r1, r6
    4474:	4628      	mov	r0, r5
    4476:	4b0f      	ldr	r3, [pc, #60]	; (44b4 <ip_input+0x1a4>)
    4478:	4798      	blx	r3
			break;
    447a:	e7eb      	b.n	4454 <ip_input+0x144>
    447c:	000054a1 	.word	0x000054a1
    4480:	00003e9d 	.word	0x00003e9d
    4484:	00004241 	.word	0x00004241
    4488:	0000562d 	.word	0x0000562d
    448c:	200129a8 	.word	0x200129a8
    4490:	200129a0 	.word	0x200129a0
    4494:	200161c4 	.word	0x200161c4
    4498:	000045ed 	.word	0x000045ed
    449c:	200129a4 	.word	0x200129a4
    44a0:	200129ac 	.word	0x200129ac
    44a4:	00004129 	.word	0x00004129
    44a8:	00004b2d 	.word	0x00004b2d
    44ac:	000085f9 	.word	0x000085f9
    44b0:	00007369 	.word	0x00007369
    44b4:	00003fbd 	.word	0x00003fbd

000044b8 <ip_output_if>:
 *
 * @note ip_id: RFC791 "some host may be able to simply use
 *  unique identifiers independent of destination"
 */
err_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t ttl, u8_t tos, u8_t proto, struct netif *netif)
{
    44b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44bc:	b083      	sub	sp, #12
    44be:	4606      	mov	r6, r0
    44c0:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    44c4:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
    44c8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	LWIP_ASSERT("p->ref == 1", p->ref == 1);

	snmp_inc_ipoutrequests();

	/* Should the IP header be generated or is it already included in p? */
	if (dest != IP_HDRINCL) {
    44ca:	2a00      	cmp	r2, #0
    44cc:	d055      	beq.n	457a <ip_output_if+0xc2>
    44ce:	4689      	mov	r9, r1
    44d0:	461c      	mov	r4, r3
    44d2:	4690      	mov	r8, r2
			}
#endif /* CHECKSUM_GEN_IP_INLINE */
		}
#endif /* IP_OPTIONS_SEND */
		/* generate IP header */
		if (pbuf_header(p, IP_HLEN)) {
    44d4:	2114      	movs	r1, #20
    44d6:	4b31      	ldr	r3, [pc, #196]	; (459c <ip_output_if+0xe4>)
    44d8:	4798      	blx	r3
    44da:	2800      	cmp	r0, #0
    44dc:	d15a      	bne.n	4594 <ip_output_if+0xdc>
			IP_STATS_INC(ip.err);
			snmp_inc_ipoutdiscards();
			return ERR_BUF;
		}

		iphdr = (struct ip_hdr *)p->payload;
    44de:	6875      	ldr	r5, [r6, #4]
		LWIP_ASSERT("check that first pbuf can hold struct ip_hdr", (p->len >= sizeof(struct ip_hdr)));

		IPH_TTL_SET(iphdr, ttl);
    44e0:	722c      	strb	r4, [r5, #8]
		IPH_PROTO_SET(iphdr, proto);
    44e2:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += LWIP_MAKE_U16(proto, ttl);
    44e6:	ea44 240b 	orr.w	r4, r4, fp, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

		/* dest cannot be NULL here */
		ip_addr_copy(iphdr->dest, *dest);
    44ea:	f8d8 0000 	ldr.w	r0, [r8]
    44ee:	6128      	str	r0, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    44f0:	fa14 f480 	uxtah	r4, r4, r0
		chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
    44f4:	eb04 4410 	add.w	r4, r4, r0, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

		IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    44f8:	2345      	movs	r3, #69	; 0x45
    44fa:	702b      	strb	r3, [r5, #0]
		IPH_TOS_SET(iphdr, tos);
    44fc:	f885 a001 	strb.w	sl, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
    4500:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    4504:	ea4a 0a03 	orr.w	sl, sl, r3
    4508:	4454      	add	r4, sl
#endif /* CHECKSUM_GEN_IP_INLINE */
		IPH_LEN_SET(iphdr, htons(p->tot_len));
    450a:	8930      	ldrh	r0, [r6, #8]
    450c:	f8df a094 	ldr.w	sl, [pc, #148]	; 45a4 <ip_output_if+0xec>
    4510:	47d0      	blx	sl
    4512:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += iphdr->_len;
    4514:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
		IPH_OFFSET_SET(iphdr, 0);
    4516:	2300      	movs	r3, #0
    4518:	71ab      	strb	r3, [r5, #6]
    451a:	71eb      	strb	r3, [r5, #7]
		IPH_ID_SET(iphdr, htons(ip_id));
    451c:	f8df b088 	ldr.w	fp, [pc, #136]	; 45a8 <ip_output_if+0xf0>
    4520:	f8bb 0000 	ldrh.w	r0, [fp]
    4524:	47d0      	blx	sl
    4526:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += iphdr->_id;
    4528:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
		++ip_id;
    452a:	f8bb 3000 	ldrh.w	r3, [fp]
    452e:	3301      	adds	r3, #1
    4530:	f8ab 3000 	strh.w	r3, [fp]

		if (ip_addr_isany(src)) {
    4534:	f1b9 0f00 	cmp.w	r9, #0
    4538:	d002      	beq.n	4540 <ip_output_if+0x88>
    453a:	f8d9 3000 	ldr.w	r3, [r9]
    453e:	b9d3      	cbnz	r3, 4576 <ip_output_if+0xbe>
			ip_addr_copy(iphdr->src, netif->ip_addr);
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	60eb      	str	r3, [r5, #12]
			/* src cannot be NULL here */
			ip_addr_copy(iphdr->src, *src);
		}

#if CHECKSUM_GEN_IP_INLINE
		chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    4544:	68e8      	ldr	r0, [r5, #12]
    4546:	fa14 f380 	uxtah	r3, r4, r0
		chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
    454a:	eb03 4010 	add.w	r0, r3, r0, lsr #16
		chk_sum        = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    454e:	b283      	uxth	r3, r0
    4550:	eb03 4310 	add.w	r3, r3, r0, lsr #16
		chk_sum        = (chk_sum >> 16) + chk_sum;
    4554:	eb03 4313 	add.w	r3, r3, r3, lsr #16
		chk_sum        = ~chk_sum;
		iphdr->_chksum = chk_sum; /* network order */
    4558:	43db      	mvns	r3, r3
    455a:	816b      	strh	r3, [r5, #10]
	}
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
	/* don't fragment if interface has mtu set to 0 [loopif] */
	if (netif->mtu && (p->tot_len > netif->mtu)) {
    455c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    455e:	b113      	cbz	r3, 4566 <ip_output_if+0xae>
    4560:	8932      	ldrh	r2, [r6, #8]
    4562:	4293      	cmp	r3, r2
    4564:	d310      	bcc.n	4588 <ip_output_if+0xd0>
		return ip_frag(p, netif, dest);
	}
#endif /* IP_FRAG */

	LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
	return netif->output(netif, p, dest);
    4566:	697b      	ldr	r3, [r7, #20]
    4568:	4642      	mov	r2, r8
    456a:	4631      	mov	r1, r6
    456c:	4638      	mov	r0, r7
    456e:	4798      	blx	r3
}
    4570:	b003      	add	sp, #12
    4572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ip_addr_copy(iphdr->src, *src);
    4576:	60eb      	str	r3, [r5, #12]
    4578:	e7e4      	b.n	4544 <ip_output_if+0x8c>
		iphdr = (struct ip_hdr *)p->payload;
    457a:	6843      	ldr	r3, [r0, #4]
		ip_addr_copy(dest_addr, iphdr->dest);
    457c:	691b      	ldr	r3, [r3, #16]
    457e:	f10d 0808 	add.w	r8, sp, #8
    4582:	f848 3d04 	str.w	r3, [r8, #-4]!
    4586:	e7e9      	b.n	455c <ip_output_if+0xa4>
		return ip_frag(p, netif, dest);
    4588:	4642      	mov	r2, r8
    458a:	4639      	mov	r1, r7
    458c:	4630      	mov	r0, r6
    458e:	4b04      	ldr	r3, [pc, #16]	; (45a0 <ip_output_if+0xe8>)
    4590:	4798      	blx	r3
    4592:	e7ed      	b.n	4570 <ip_output_if+0xb8>
			return ERR_BUF;
    4594:	f06f 0001 	mvn.w	r0, #1
    4598:	e7ea      	b.n	4570 <ip_output_if+0xb8>
    459a:	bf00      	nop
    459c:	00005427 	.word	0x00005427
    45a0:	00004ce1 	.word	0x00004ce1
    45a4:	00003e91 	.word	0x00003e91
    45a8:	200015ec 	.word	0x200015ec

000045ac <ip_output>:
 *
 * @return ERR_RTE if no route is found
 *         see ip_output_if() for more return values
 */
err_t ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t ttl, u8_t tos, u8_t proto)
{
    45ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ae:	b085      	sub	sp, #20
    45b0:	4605      	mov	r5, r0
    45b2:	460e      	mov	r6, r1
    45b4:	4614      	mov	r4, r2
    45b6:	461f      	mov	r7, r3

	/* pbufs passed to IP must have a ref-count of 1 as their payload pointer
	   gets altered as the packet is passed down the stack */
	LWIP_ASSERT("p->ref == 1", p->ref == 1);

	if ((netif = ip_route(dest)) == NULL) {
    45b8:	4610      	mov	r0, r2
    45ba:	4b0a      	ldr	r3, [pc, #40]	; (45e4 <ip_output+0x38>)
    45bc:	4798      	blx	r3
    45be:	b170      	cbz	r0, 45de <ip_output+0x32>
		             ip4_addr4_16(dest)));
		IP_STATS_INC(ip.rterr);
		return ERR_RTE;
	}

	return ip_output_if(p, src, dest, ttl, tos, proto, netif);
    45c0:	9002      	str	r0, [sp, #8]
    45c2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    45c6:	9301      	str	r3, [sp, #4]
    45c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    45cc:	9300      	str	r3, [sp, #0]
    45ce:	463b      	mov	r3, r7
    45d0:	4622      	mov	r2, r4
    45d2:	4631      	mov	r1, r6
    45d4:	4628      	mov	r0, r5
    45d6:	4c04      	ldr	r4, [pc, #16]	; (45e8 <ip_output+0x3c>)
    45d8:	47a0      	blx	r4
}
    45da:	b005      	add	sp, #20
    45dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_RTE;
    45de:	f06f 0003 	mvn.w	r0, #3
    45e2:	e7fa      	b.n	45da <ip_output+0x2e>
    45e4:	000042a1 	.word	0x000042a1
    45e8:	000044b9 	.word	0x000044b9

000045ec <ip4_addr_isbroadcast>:
{
	ip_addr_t ipaddr;
	ip4_addr_set_u32(&ipaddr, addr);

	/* all ones (broadcast) or all zeroes (old skool broadcast) */
	if ((~addr == IPADDR_ANY) || (addr == IPADDR_ANY)) {
    45ec:	1e43      	subs	r3, r0, #1
    45ee:	f113 0f03 	cmn.w	r3, #3
    45f2:	d811      	bhi.n	4618 <ip4_addr_isbroadcast+0x2c>
		return 1;
		/* no broadcast support on this network interface? */
	} else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
    45f4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    45f8:	f013 0f02 	tst.w	r3, #2
    45fc:	d00e      	beq.n	461c <ip4_addr_isbroadcast+0x30>
		/* the given address cannot be a broadcast address
		 * nor can we check against any broadcast addresses */
		return 0;
		/* address matches network interface address exactly? => no broadcast */
	} else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    45fe:	684b      	ldr	r3, [r1, #4]
    4600:	4298      	cmp	r0, r3
    4602:	d00d      	beq.n	4620 <ip4_addr_isbroadcast+0x34>
		return 0;
		/*  on the same (sub) network... */
	} else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
    4604:	688a      	ldr	r2, [r1, #8]
    4606:	4043      	eors	r3, r0
    4608:	4213      	tst	r3, r2
    460a:	d10b      	bne.n	4624 <ip4_addr_isbroadcast+0x38>
	           /* ...and host identifier bits are all ones? =>... */
	           && ((addr & ~ip4_addr_get_u32(&netif->netmask))
    460c:	43d2      	mvns	r2, r2
    460e:	ea32 0300 	bics.w	r3, r2, r0
    4612:	d009      	beq.n	4628 <ip4_addr_isbroadcast+0x3c>
	               == (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
		/* => network broadcast address */
		return 1;
	} else {
		return 0;
    4614:	2000      	movs	r0, #0
    4616:	4770      	bx	lr
		return 1;
    4618:	2001      	movs	r0, #1
    461a:	4770      	bx	lr
		return 0;
    461c:	2000      	movs	r0, #0
    461e:	4770      	bx	lr
		return 0;
    4620:	2000      	movs	r0, #0
    4622:	4770      	bx	lr
		return 0;
    4624:	2000      	movs	r0, #0
    4626:	4770      	bx	lr
		return 1;
    4628:	2001      	movs	r0, #1
	}
}
    462a:	4770      	bx	lr

0000462c <ipaddr_aton>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int ipaddr_aton(const char *cp, ip_addr_t *addr)
{
    462c:	b570      	push	{r4, r5, r6, lr}
    462e:	b084      	sub	sp, #16
    4630:	4605      	mov	r5, r0
    4632:	460c      	mov	r4, r1
	u8_t   base;
	char   c;
	u32_t  parts[4];
	u32_t *pp = parts;

	c = *cp;
    4634:	7803      	ldrb	r3, [r0, #0]
	u32_t *pp = parts;
    4636:	466e      	mov	r6, sp
    4638:	e03b      	b.n	46b2 <ipaddr_aton+0x86>
		if (!isdigit(c))
			return (0);
		val  = 0;
		base = 10;
		if (c == '0') {
			c = *++cp;
    463a:	1c6a      	adds	r2, r5, #1
    463c:	786b      	ldrb	r3, [r5, #1]
			if (c == 'x' || c == 'X') {
    463e:	2b78      	cmp	r3, #120	; 0x78
    4640:	d004      	beq.n	464c <ipaddr_aton+0x20>
    4642:	2b58      	cmp	r3, #88	; 0x58
    4644:	d002      	beq.n	464c <ipaddr_aton+0x20>
			c = *++cp;
    4646:	4615      	mov	r5, r2
				base = 16;
				c    = *++cp;
			} else
				base = 8;
    4648:	2108      	movs	r1, #8
    464a:	e03a      	b.n	46c2 <ipaddr_aton+0x96>
				c    = *++cp;
    464c:	78ab      	ldrb	r3, [r5, #2]
    464e:	3502      	adds	r5, #2
				base = 16;
    4650:	2110      	movs	r1, #16
				c    = *++cp;
    4652:	e036      	b.n	46c2 <ipaddr_aton+0x96>
		}
		for (;;) {
			if (isdigit(c)) {
				val = (val * base) + (int)(c - '0');
				c   = *++cp;
			} else if (base == 16 && isxdigit(c)) {
    4654:	2910      	cmp	r1, #16
    4656:	d123      	bne.n	46a0 <ipaddr_aton+0x74>
    4658:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    465c:	b2d2      	uxtb	r2, r2
    465e:	2a05      	cmp	r2, #5
    4660:	d904      	bls.n	466c <ipaddr_aton+0x40>
    4662:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    4666:	b2d2      	uxtb	r2, r2
    4668:	2a05      	cmp	r2, #5
    466a:	d819      	bhi.n	46a0 <ipaddr_aton+0x74>
				val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
    466c:	0100      	lsls	r0, r0, #4
    466e:	f103 020a 	add.w	r2, r3, #10
    4672:	3b61      	subs	r3, #97	; 0x61
    4674:	b2db      	uxtb	r3, r3
    4676:	2b19      	cmp	r3, #25
    4678:	d810      	bhi.n	469c <ipaddr_aton+0x70>
    467a:	2361      	movs	r3, #97	; 0x61
    467c:	1ad2      	subs	r2, r2, r3
    467e:	4310      	orrs	r0, r2
				c   = *++cp;
    4680:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (isdigit(c)) {
    4684:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4688:	b2d2      	uxtb	r2, r2
    468a:	2a09      	cmp	r2, #9
    468c:	d8e2      	bhi.n	4654 <ipaddr_aton+0x28>
				val = (val * base) + (int)(c - '0');
    468e:	fb00 3301 	mla	r3, r0, r1, r3
    4692:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
				c   = *++cp;
    4696:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    469a:	e7f3      	b.n	4684 <ipaddr_aton+0x58>
				val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
    469c:	2341      	movs	r3, #65	; 0x41
    469e:	e7ed      	b.n	467c <ipaddr_aton+0x50>
			} else
				break;
		}
		if (c == '.') {
    46a0:	2b2e      	cmp	r3, #46	; 0x2e
    46a2:	d110      	bne.n	46c6 <ipaddr_aton+0x9a>
			 * Internet format:
			 *  a.b.c.d
			 *  a.b.c   (with c treated as 16 bits)
			 *  a.b (with b treated as 24 bits)
			 */
			if (pp >= parts + 3) {
    46a4:	ab03      	add	r3, sp, #12
    46a6:	429e      	cmp	r6, r3
    46a8:	d24b      	bcs.n	4742 <ipaddr_aton+0x116>
				return (0);
			}
			*pp++ = val;
    46aa:	6030      	str	r0, [r6, #0]
			c     = *++cp;
    46ac:	786b      	ldrb	r3, [r5, #1]
			*pp++ = val;
    46ae:	3604      	adds	r6, #4
			c     = *++cp;
    46b0:	3501      	adds	r5, #1
		if (!isdigit(c))
    46b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    46b6:	b2d2      	uxtb	r2, r2
    46b8:	2a09      	cmp	r2, #9
    46ba:	d840      	bhi.n	473e <ipaddr_aton+0x112>
		if (c == '0') {
    46bc:	2b30      	cmp	r3, #48	; 0x30
    46be:	d0bc      	beq.n	463a <ipaddr_aton+0xe>
		base = 10;
    46c0:	210a      	movs	r1, #10
				base = 16;
    46c2:	2000      	movs	r0, #0
    46c4:	e7de      	b.n	4684 <ipaddr_aton+0x58>
			break;
	}
	/*
	 * Check for trailing characters.
	 */
	if (c != '\0' && !isspace(c)) {
    46c6:	b16b      	cbz	r3, 46e4 <ipaddr_aton+0xb8>
    46c8:	2b20      	cmp	r3, #32
    46ca:	d00b      	beq.n	46e4 <ipaddr_aton+0xb8>
    46cc:	2b0c      	cmp	r3, #12
    46ce:	d009      	beq.n	46e4 <ipaddr_aton+0xb8>
    46d0:	2b0a      	cmp	r3, #10
    46d2:	d007      	beq.n	46e4 <ipaddr_aton+0xb8>
    46d4:	2b0d      	cmp	r3, #13
    46d6:	d005      	beq.n	46e4 <ipaddr_aton+0xb8>
    46d8:	2b09      	cmp	r3, #9
    46da:	d003      	beq.n	46e4 <ipaddr_aton+0xb8>
    46dc:	2b0b      	cmp	r3, #11
    46de:	d001      	beq.n	46e4 <ipaddr_aton+0xb8>
		return (0);
    46e0:	2300      	movs	r3, #0
    46e2:	e02f      	b.n	4744 <ipaddr_aton+0x118>
	}
	/*
	 * Concoct the address according to
	 * the number of parts specified.
	 */
	switch (pp - parts + 1) {
    46e4:	466b      	mov	r3, sp
    46e6:	1af3      	subs	r3, r6, r3
    46e8:	109b      	asrs	r3, r3, #2
    46ea:	3301      	adds	r3, #1
    46ec:	2b04      	cmp	r3, #4
    46ee:	d80a      	bhi.n	4706 <ipaddr_aton+0xda>
    46f0:	e8df f003 	tbb	[pc, r3]
    46f4:	0f030928 	.word	0x0f030928
    46f8:	19          	.byte	0x19
    46f9:	00          	.byte	0x00

	case 1: /* a -- 32 bits */
		break;

	case 2: /* a.b -- 8.24 bits */
		if (val > 0xffffffUL) {
    46fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    46fe:	d224      	bcs.n	474a <ipaddr_aton+0x11e>
			return (0);
		}
		val |= parts[0] << 24;
    4700:	9b00      	ldr	r3, [sp, #0]
    4702:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
		break;
	default:
		LWIP_ASSERT("unhandled", 0);
		break;
	}
	if (addr) {
    4706:	b334      	cbz	r4, 4756 <ipaddr_aton+0x12a>
		ip4_addr_set_u32(addr, htonl(val));
    4708:	4b14      	ldr	r3, [pc, #80]	; (475c <ipaddr_aton+0x130>)
    470a:	4798      	blx	r3
    470c:	6020      	str	r0, [r4, #0]
	}
	return (1);
    470e:	2301      	movs	r3, #1
    4710:	e018      	b.n	4744 <ipaddr_aton+0x118>
		if (val > 0xffff) {
    4712:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4716:	d21a      	bcs.n	474e <ipaddr_aton+0x122>
		val |= (parts[0] << 24) | (parts[1] << 16);
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	041b      	lsls	r3, r3, #16
    471c:	9a00      	ldr	r2, [sp, #0]
    471e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    4722:	4318      	orrs	r0, r3
		break;
    4724:	e7ef      	b.n	4706 <ipaddr_aton+0xda>
		if (val > 0xff) {
    4726:	28ff      	cmp	r0, #255	; 0xff
    4728:	d813      	bhi.n	4752 <ipaddr_aton+0x126>
		val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
    472a:	9b01      	ldr	r3, [sp, #4]
    472c:	041b      	lsls	r3, r3, #16
    472e:	9a00      	ldr	r2, [sp, #0]
    4730:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    4734:	9a02      	ldr	r2, [sp, #8]
    4736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    473a:	4318      	orrs	r0, r3
		break;
    473c:	e7e3      	b.n	4706 <ipaddr_aton+0xda>
			return (0);
    473e:	2300      	movs	r3, #0
    4740:	e000      	b.n	4744 <ipaddr_aton+0x118>
				return (0);
    4742:	2300      	movs	r3, #0
}
    4744:	4618      	mov	r0, r3
    4746:	b004      	add	sp, #16
    4748:	bd70      	pop	{r4, r5, r6, pc}
			return (0);
    474a:	2300      	movs	r3, #0
    474c:	e7fa      	b.n	4744 <ipaddr_aton+0x118>
			return (0);
    474e:	2300      	movs	r3, #0
    4750:	e7f8      	b.n	4744 <ipaddr_aton+0x118>
			return (0);
    4752:	2300      	movs	r3, #0
    4754:	e7f6      	b.n	4744 <ipaddr_aton+0x118>
	return (1);
    4756:	2301      	movs	r3, #1
    4758:	e7f4      	b.n	4744 <ipaddr_aton+0x118>
    475a:	bf00      	nop
    475c:	00003ea9 	.word	0x00003ea9

00004760 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
    4760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4764:	b083      	sub	sp, #12
    4766:	4689      	mov	r9, r1
	u8_t  rem;
	u8_t  n;
	u8_t  i;
	int   len = 0;

	s_addr = ip4_addr_get_u32(addr);
    4768:	6803      	ldr	r3, [r0, #0]
    476a:	f10d 0e08 	add.w	lr, sp, #8
    476e:	f84e 3d04 	str.w	r3, [lr, #-4]!

	rp = buf;
    4772:	460f      	mov	r7, r1
	int   len = 0;
    4774:	2600      	movs	r6, #0
	ap = (u8_t *)&s_addr;
	for (n = 0; n < 4; n++) {
    4776:	4630      	mov	r0, r6
    4778:	2803      	cmp	r0, #3
    477a:	d838      	bhi.n	47ee <ipaddr_ntoa_r+0x8e>
    477c:	2500      	movs	r5, #0
		i = 0;
		do {
			rem = *ap % (u8_t)10;
    477e:	f89e 4000 	ldrb.w	r4, [lr]
    4782:	4b20      	ldr	r3, [pc, #128]	; (4804 <ipaddr_ntoa_r+0xa4>)
    4784:	fba3 1304 	umull	r1, r3, r3, r4
    4788:	08db      	lsrs	r3, r3, #3
    478a:	eb03 0883 	add.w	r8, r3, r3, lsl #2
    478e:	ea4f 0c48 	mov.w	ip, r8, lsl #1
    4792:	eba4 040c 	sub.w	r4, r4, ip
    4796:	b2e4      	uxtb	r4, r4
			*ap /= (u8_t)10;
    4798:	b2db      	uxtb	r3, r3
    479a:	f88e 3000 	strb.w	r3, [lr]
			inv[i++] = '0' + rem;
    479e:	f105 0c01 	add.w	ip, r5, #1
    47a2:	fa5f f18c 	uxtb.w	r1, ip
    47a6:	3430      	adds	r4, #48	; 0x30
    47a8:	f10d 0c08 	add.w	ip, sp, #8
    47ac:	4465      	add	r5, ip
    47ae:	f805 4c08 	strb.w	r4, [r5, #-8]
    47b2:	460d      	mov	r5, r1
		} while (*ap);
    47b4:	2b00      	cmp	r3, #0
    47b6:	d1e2      	bne.n	477e <ipaddr_ntoa_r+0x1e>
		while (i--) {
    47b8:	1e4b      	subs	r3, r1, #1
    47ba:	b2db      	uxtb	r3, r3
    47bc:	b159      	cbz	r1, 47d6 <ipaddr_ntoa_r+0x76>
			if (len++ >= buflen) {
    47be:	1c74      	adds	r4, r6, #1
    47c0:	4296      	cmp	r6, r2
    47c2:	da19      	bge.n	47f8 <ipaddr_ntoa_r+0x98>
				return NULL;
			}
			*rp++ = inv[i];
    47c4:	a902      	add	r1, sp, #8
    47c6:	18cd      	adds	r5, r1, r3
    47c8:	f815 5c08 	ldrb.w	r5, [r5, #-8]
    47cc:	703d      	strb	r5, [r7, #0]
			if (len++ >= buflen) {
    47ce:	4626      	mov	r6, r4
		while (i--) {
    47d0:	4619      	mov	r1, r3
			*rp++ = inv[i];
    47d2:	3701      	adds	r7, #1
    47d4:	e7f0      	b.n	47b8 <ipaddr_ntoa_r+0x58>
		}
		if (len++ >= buflen) {
    47d6:	1c73      	adds	r3, r6, #1
    47d8:	4296      	cmp	r6, r2
    47da:	da11      	bge.n	4800 <ipaddr_ntoa_r+0xa0>
			return NULL;
		}
		*rp++ = '.';
    47dc:	242e      	movs	r4, #46	; 0x2e
    47de:	703c      	strb	r4, [r7, #0]
		ap++;
    47e0:	f10e 0e01 	add.w	lr, lr, #1
	for (n = 0; n < 4; n++) {
    47e4:	3001      	adds	r0, #1
    47e6:	b2c0      	uxtb	r0, r0
		if (len++ >= buflen) {
    47e8:	461e      	mov	r6, r3
		*rp++ = '.';
    47ea:	3701      	adds	r7, #1
    47ec:	e7c4      	b.n	4778 <ipaddr_ntoa_r+0x18>
	}
	*--rp = 0;
    47ee:	2300      	movs	r3, #0
    47f0:	f807 3c01 	strb.w	r3, [r7, #-1]
	return buf;
    47f4:	4648      	mov	r0, r9
    47f6:	e000      	b.n	47fa <ipaddr_ntoa_r+0x9a>
				return NULL;
    47f8:	2000      	movs	r0, #0
}
    47fa:	b003      	add	sp, #12
    47fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return NULL;
    4800:	2000      	movs	r0, #0
    4802:	e7fa      	b.n	47fa <ipaddr_ntoa_r+0x9a>
    4804:	cccccccd 	.word	0xcccccccd

00004808 <ip_reass_dequeue_datagram>:
/**
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    4808:	b508      	push	{r3, lr}

	/* dequeue the reass struct  */
	if (reassdatagrams == ipr) {
    480a:	4b07      	ldr	r3, [pc, #28]	; (4828 <ip_reass_dequeue_datagram+0x20>)
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	4283      	cmp	r3, r0
    4810:	d006      	beq.n	4820 <ip_reass_dequeue_datagram+0x18>
		/* it was the first in the list */
		reassdatagrams = ipr->next;
	} else {
		/* it wasn't the first, so it must have a valid 'prev' */
		LWIP_ASSERT("sanity check linked list", prev != NULL);
		prev->next = ipr->next;
    4812:	6803      	ldr	r3, [r0, #0]
    4814:	600b      	str	r3, [r1, #0]
	}

	/* now we can free the ip_reass struct */
	memp_free(MEMP_REASSDATA, ipr);
    4816:	4601      	mov	r1, r0
    4818:	2004      	movs	r0, #4
    481a:	4b04      	ldr	r3, [pc, #16]	; (482c <ip_reass_dequeue_datagram+0x24>)
    481c:	4798      	blx	r3
    481e:	bd08      	pop	{r3, pc}
		reassdatagrams = ipr->next;
    4820:	6802      	ldr	r2, [r0, #0]
    4822:	4b01      	ldr	r3, [pc, #4]	; (4828 <ip_reass_dequeue_datagram+0x20>)
    4824:	601a      	str	r2, [r3, #0]
    4826:	e7f6      	b.n	4816 <ip_reass_dequeue_datagram+0xe>
    4828:	200015f0 	.word	0x200015f0
    482c:	000051fd 	.word	0x000051fd

00004830 <ip_reass_free_complete_datagram>:
{
    4830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4834:	4607      	mov	r7, r0
    4836:	4688      	mov	r8, r1
	iprh = (struct ip_reass_helper *)ipr->p->payload;
    4838:	6844      	ldr	r4, [r0, #4]
    483a:	6863      	ldr	r3, [r4, #4]
	if (iprh->start == 0) {
    483c:	889a      	ldrh	r2, [r3, #4]
    483e:	b112      	cbz	r2, 4846 <ip_reass_free_complete_datagram+0x16>
	u16_t                   pbufs_freed = 0;
    4840:	2500      	movs	r5, #0
	p = ipr->p;
    4842:	687c      	ldr	r4, [r7, #4]
	while (p != NULL) {
    4844:	e025      	b.n	4892 <ip_reass_free_complete_datagram+0x62>
		ipr->p = iprh->next_pbuf;
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	6043      	str	r3, [r0, #4]
		SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
    484a:	4603      	mov	r3, r0
    484c:	6862      	ldr	r2, [r4, #4]
    484e:	f853 1f08 	ldr.w	r1, [r3, #8]!
    4852:	685e      	ldr	r6, [r3, #4]
    4854:	689d      	ldr	r5, [r3, #8]
    4856:	68d8      	ldr	r0, [r3, #12]
    4858:	6011      	str	r1, [r2, #0]
    485a:	6056      	str	r6, [r2, #4]
    485c:	6095      	str	r5, [r2, #8]
    485e:	60d0      	str	r0, [r2, #12]
    4860:	6919      	ldr	r1, [r3, #16]
    4862:	6111      	str	r1, [r2, #16]
		icmp_time_exceeded(p, ICMP_TE_FRAG);
    4864:	2101      	movs	r1, #1
    4866:	4620      	mov	r0, r4
    4868:	4b10      	ldr	r3, [pc, #64]	; (48ac <ip_reass_free_complete_datagram+0x7c>)
    486a:	4798      	blx	r3
		clen = pbuf_clen(p);
    486c:	4620      	mov	r0, r4
    486e:	4b10      	ldr	r3, [pc, #64]	; (48b0 <ip_reass_free_complete_datagram+0x80>)
    4870:	4798      	blx	r3
		pbufs_freed += clen;
    4872:	b285      	uxth	r5, r0
		pbuf_free(p);
    4874:	4620      	mov	r0, r4
    4876:	4b0f      	ldr	r3, [pc, #60]	; (48b4 <ip_reass_free_complete_datagram+0x84>)
    4878:	4798      	blx	r3
    487a:	e7e2      	b.n	4842 <ip_reass_free_complete_datagram+0x12>
		iprh = (struct ip_reass_helper *)p->payload;
    487c:	6863      	ldr	r3, [r4, #4]
		p    = iprh->next_pbuf;
    487e:	681e      	ldr	r6, [r3, #0]
		clen = pbuf_clen(pcur);
    4880:	4620      	mov	r0, r4
    4882:	4b0b      	ldr	r3, [pc, #44]	; (48b0 <ip_reass_free_complete_datagram+0x80>)
    4884:	4798      	blx	r3
		pbufs_freed += clen;
    4886:	4405      	add	r5, r0
    4888:	b2ad      	uxth	r5, r5
		pbuf_free(pcur);
    488a:	4620      	mov	r0, r4
    488c:	4b09      	ldr	r3, [pc, #36]	; (48b4 <ip_reass_free_complete_datagram+0x84>)
    488e:	4798      	blx	r3
		p    = iprh->next_pbuf;
    4890:	4634      	mov	r4, r6
	while (p != NULL) {
    4892:	2c00      	cmp	r4, #0
    4894:	d1f2      	bne.n	487c <ip_reass_free_complete_datagram+0x4c>
	ip_reass_dequeue_datagram(ipr, prev);
    4896:	4641      	mov	r1, r8
    4898:	4638      	mov	r0, r7
    489a:	4b07      	ldr	r3, [pc, #28]	; (48b8 <ip_reass_free_complete_datagram+0x88>)
    489c:	4798      	blx	r3
	ip_reass_pbufcount -= pbufs_freed;
    489e:	4a07      	ldr	r2, [pc, #28]	; (48bc <ip_reass_free_complete_datagram+0x8c>)
    48a0:	8893      	ldrh	r3, [r2, #4]
    48a2:	1b5b      	subs	r3, r3, r5
    48a4:	8093      	strh	r3, [r2, #4]
}
    48a6:	4628      	mov	r0, r5
    48a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48ac:	00004139 	.word	0x00004139
    48b0:	00005685 	.word	0x00005685
    48b4:	000054a1 	.word	0x000054a1
    48b8:	00004809 	.word	0x00004809
    48bc:	200015f0 	.word	0x200015f0

000048c0 <ip_reass_remove_oldest_datagram>:
{
    48c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48c4:	4605      	mov	r5, r0
    48c6:	4688      	mov	r8, r1
	int                  pbufs_freed = 0, pbufs_freed_current;
    48c8:	2600      	movs	r6, #0
    48ca:	e028      	b.n	491e <ip_reass_remove_oldest_datagram+0x5e>
			if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    48cc:	699a      	ldr	r2, [r3, #24]
    48ce:	f8d5 e010 	ldr.w	lr, [r5, #16]
    48d2:	4572      	cmp	r2, lr
    48d4:	d10f      	bne.n	48f6 <ip_reass_remove_oldest_datagram+0x36>
    48d6:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    48da:	88aa      	ldrh	r2, [r5, #4]
    48dc:	4596      	cmp	lr, r2
    48de:	d10a      	bne.n	48f6 <ip_reass_remove_oldest_datagram+0x36>
    48e0:	e000      	b.n	48e4 <ip_reass_remove_oldest_datagram+0x24>
					oldest = r;
    48e2:	4618      	mov	r0, r3
			if (r->next != NULL) {
    48e4:	681a      	ldr	r2, [r3, #0]
    48e6:	b182      	cbz	r2, 490a <ip_reass_remove_oldest_datagram+0x4a>
    48e8:	4619      	mov	r1, r3
    48ea:	4613      	mov	r3, r2
		while (r != NULL) {
    48ec:	b17b      	cbz	r3, 490e <ip_reass_remove_oldest_datagram+0x4e>
			if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    48ee:	68ea      	ldr	r2, [r5, #12]
    48f0:	695f      	ldr	r7, [r3, #20]
    48f2:	4297      	cmp	r7, r2
    48f4:	d0ea      	beq.n	48cc <ip_reass_remove_oldest_datagram+0xc>
				other_datagrams++;
    48f6:	3401      	adds	r4, #1
				if (oldest == NULL) {
    48f8:	2800      	cmp	r0, #0
    48fa:	d0f2      	beq.n	48e2 <ip_reass_remove_oldest_datagram+0x22>
				} else if (r->timer <= oldest->timer) {
    48fc:	f893 e01f 	ldrb.w	lr, [r3, #31]
    4900:	7fc2      	ldrb	r2, [r0, #31]
    4902:	4596      	cmp	lr, r2
    4904:	d8ee      	bhi.n	48e4 <ip_reass_remove_oldest_datagram+0x24>
					oldest = r;
    4906:	4618      	mov	r0, r3
    4908:	e7ec      	b.n	48e4 <ip_reass_remove_oldest_datagram+0x24>
			if (r->next != NULL) {
    490a:	460b      	mov	r3, r1
    490c:	e7ec      	b.n	48e8 <ip_reass_remove_oldest_datagram+0x28>
		if (oldest != NULL) {
    490e:	b110      	cbz	r0, 4916 <ip_reass_remove_oldest_datagram+0x56>
			pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
    4910:	4b07      	ldr	r3, [pc, #28]	; (4930 <ip_reass_remove_oldest_datagram+0x70>)
    4912:	4798      	blx	r3
			pbufs_freed += pbufs_freed_current;
    4914:	4406      	add	r6, r0
	} while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
    4916:	4546      	cmp	r6, r8
    4918:	da07      	bge.n	492a <ip_reass_remove_oldest_datagram+0x6a>
    491a:	2c01      	cmp	r4, #1
    491c:	dd05      	ble.n	492a <ip_reass_remove_oldest_datagram+0x6a>
		r               = reassdatagrams;
    491e:	4b05      	ldr	r3, [pc, #20]	; (4934 <ip_reass_remove_oldest_datagram+0x74>)
    4920:	681b      	ldr	r3, [r3, #0]
		other_datagrams = 0;
    4922:	2400      	movs	r4, #0
		prev            = NULL;
    4924:	4621      	mov	r1, r4
		oldest          = NULL;
    4926:	4620      	mov	r0, r4
		while (r != NULL) {
    4928:	e7e0      	b.n	48ec <ip_reass_remove_oldest_datagram+0x2c>
}
    492a:	4630      	mov	r0, r6
    492c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4930:	00004831 	.word	0x00004831
    4934:	200015f0 	.word	0x200015f0

00004938 <ip_frag_free_pbuf_custom_ref>:
	return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
}

/** Free a struct pbuf_custom_ref */
static void ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
    4938:	b508      	push	{r3, lr}
	LWIP_ASSERT("p != NULL", p != NULL);
	memp_free(MEMP_FRAG_PBUF, p);
    493a:	4601      	mov	r1, r0
    493c:	2005      	movs	r0, #5
    493e:	4b01      	ldr	r3, [pc, #4]	; (4944 <ip_frag_free_pbuf_custom_ref+0xc>)
    4940:	4798      	blx	r3
    4942:	bd08      	pop	{r3, pc}
    4944:	000051fd 	.word	0x000051fd

00004948 <ipfrag_free_pbuf_custom>:
}

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void ipfrag_free_pbuf_custom(struct pbuf *p)
{
    4948:	b510      	push	{r4, lr}
    494a:	4604      	mov	r4, r0
	struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
	LWIP_ASSERT("pcr != NULL", pcr != NULL);
	LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
	if (pcr->original != NULL) {
    494c:	6940      	ldr	r0, [r0, #20]
    494e:	b108      	cbz	r0, 4954 <ipfrag_free_pbuf_custom+0xc>
		pbuf_free(pcr->original);
    4950:	4b02      	ldr	r3, [pc, #8]	; (495c <ipfrag_free_pbuf_custom+0x14>)
    4952:	4798      	blx	r3
	}
	ip_frag_free_pbuf_custom_ref(pcr);
    4954:	4620      	mov	r0, r4
    4956:	4b02      	ldr	r3, [pc, #8]	; (4960 <ipfrag_free_pbuf_custom+0x18>)
    4958:	4798      	blx	r3
    495a:	bd10      	pop	{r4, pc}
    495c:	000054a1 	.word	0x000054a1
    4960:	00004939 	.word	0x00004939

00004964 <ip_reass_chain_frag_into_datagram_and_validate>:
{
    4964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4968:	4607      	mov	r7, r0
    496a:	460e      	mov	r6, r1
	fraghdr = (struct ip_hdr *)new_p->payload;
    496c:	684c      	ldr	r4, [r1, #4]
	len     = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    496e:	8860      	ldrh	r0, [r4, #2]
    4970:	f8df 8108 	ldr.w	r8, [pc, #264]	; 4a7c <ip_reass_chain_frag_into_datagram_and_validate+0x118>
    4974:	47c0      	blx	r8
    4976:	7825      	ldrb	r5, [r4, #0]
    4978:	f005 050f 	and.w	r5, r5, #15
    497c:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
    4980:	b2ad      	uxth	r5, r5
	offset  = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    4982:	88e0      	ldrh	r0, [r4, #6]
    4984:	47c0      	blx	r8
    4986:	f3c0 000c 	ubfx	r0, r0, #0, #13
    498a:	00c1      	lsls	r1, r0, #3
	iprh            = (struct ip_reass_helper *)new_p->payload;
    498c:	f8d6 c004 	ldr.w	ip, [r6, #4]
	iprh->next_pbuf = NULL;
    4990:	2400      	movs	r4, #0
    4992:	f88c 4000 	strb.w	r4, [ip]
    4996:	f88c 4001 	strb.w	r4, [ip, #1]
    499a:	f88c 4002 	strb.w	r4, [ip, #2]
    499e:	f88c 4003 	strb.w	r4, [ip, #3]
	iprh->start     = offset;
    49a2:	f8ac 1004 	strh.w	r1, [ip, #4]
	iprh->end       = offset + len;
    49a6:	eb05 0e01 	add.w	lr, r5, r1
    49aa:	fa1f fe8e 	uxth.w	lr, lr
    49ae:	f8ac e006 	strh.w	lr, [ip, #6]
	for (q = ipr->p; q != NULL;) {
    49b2:	687d      	ldr	r5, [r7, #4]
	int                     valid = 1;
    49b4:	2001      	movs	r0, #1
	for (q = ipr->p; q != NULL;) {
    49b6:	e025      	b.n	4a04 <ip_reass_chain_frag_into_datagram_and_validate+0xa0>
			iprh->next_pbuf = q;
    49b8:	f8cc 5000 	str.w	r5, [ip]
			if (iprh_prev != NULL) {
    49bc:	b1f4      	cbz	r4, 49fc <ip_reass_chain_frag_into_datagram_and_validate+0x98>
				if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
    49be:	88e2      	ldrh	r2, [r4, #6]
    49c0:	4291      	cmp	r1, r2
    49c2:	d33e      	bcc.n	4a42 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
    49c4:	889b      	ldrh	r3, [r3, #4]
    49c6:	459e      	cmp	lr, r3
    49c8:	d83b      	bhi.n	4a42 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
				iprh_prev->next_pbuf = new_p;
    49ca:	6026      	str	r6, [r4, #0]
	if (q == NULL) {
    49cc:	b365      	cbz	r5, 4a28 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
	if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
    49ce:	7fbb      	ldrb	r3, [r7, #30]
    49d0:	f013 0f01 	tst.w	r3, #1
    49d4:	d043      	beq.n	4a5e <ip_reass_chain_frag_into_datagram_and_validate+0xfa>
		if (valid) {
    49d6:	2800      	cmp	r0, #0
    49d8:	d048      	beq.n	4a6c <ip_reass_chain_frag_into_datagram_and_validate+0x108>
			if (((struct ip_reass_helper *)ipr->p->payload)->start != 0) {
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	685b      	ldr	r3, [r3, #4]
    49de:	889b      	ldrh	r3, [r3, #4]
    49e0:	2b00      	cmp	r3, #0
    49e2:	d13f      	bne.n	4a64 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
				q         = iprh->next_pbuf;
    49e4:	f8dc 2000 	ldr.w	r2, [ip]
				while (q != NULL) {
    49e8:	b34a      	cbz	r2, 4a3e <ip_reass_chain_frag_into_datagram_and_validate+0xda>
					iprh = (struct ip_reass_helper *)q->payload;
    49ea:	6853      	ldr	r3, [r2, #4]
					if (iprh_prev->end != iprh->start) {
    49ec:	f8bc 1006 	ldrh.w	r1, [ip, #6]
    49f0:	889a      	ldrh	r2, [r3, #4]
    49f2:	4291      	cmp	r1, r2
    49f4:	d139      	bne.n	4a6a <ip_reass_chain_frag_into_datagram_and_validate+0x106>
					q         = iprh->next_pbuf;
    49f6:	681a      	ldr	r2, [r3, #0]
					iprh_prev = iprh;
    49f8:	469c      	mov	ip, r3
    49fa:	e7f5      	b.n	49e8 <ip_reass_chain_frag_into_datagram_and_validate+0x84>
				ipr->p = new_p;
    49fc:	607e      	str	r6, [r7, #4]
    49fe:	e7e5      	b.n	49cc <ip_reass_chain_frag_into_datagram_and_validate+0x68>
		q         = iprh_tmp->next_pbuf;
    4a00:	681d      	ldr	r5, [r3, #0]
		iprh_prev = iprh_tmp;
    4a02:	461c      	mov	r4, r3
	for (q = ipr->p; q != NULL;) {
    4a04:	2d00      	cmp	r5, #0
    4a06:	d0e1      	beq.n	49cc <ip_reass_chain_frag_into_datagram_and_validate+0x68>
		iprh_tmp = (struct ip_reass_helper *)q->payload;
    4a08:	686b      	ldr	r3, [r5, #4]
		if (iprh->start < iprh_tmp->start) {
    4a0a:	889a      	ldrh	r2, [r3, #4]
    4a0c:	4291      	cmp	r1, r2
    4a0e:	d3d3      	bcc.n	49b8 <ip_reass_chain_frag_into_datagram_and_validate+0x54>
		} else if (iprh->start == iprh_tmp->start) {
    4a10:	4291      	cmp	r1, r2
    4a12:	d016      	beq.n	4a42 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
		} else if (iprh->start < iprh_tmp->end) {
    4a14:	88dd      	ldrh	r5, [r3, #6]
    4a16:	42a9      	cmp	r1, r5
    4a18:	d313      	bcc.n	4a42 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
			if (iprh_prev != NULL) {
    4a1a:	2c00      	cmp	r4, #0
    4a1c:	d0f0      	beq.n	4a00 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
				if (iprh_prev->end != iprh_tmp->start) {
    4a1e:	88e4      	ldrh	r4, [r4, #6]
    4a20:	42a2      	cmp	r2, r4
    4a22:	d0ed      	beq.n	4a00 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
					valid = 0;
    4a24:	2000      	movs	r0, #0
    4a26:	e7eb      	b.n	4a00 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
		if (iprh_prev != NULL) {
    4a28:	b13c      	cbz	r4, 4a3a <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
			iprh_prev->next_pbuf = new_p;
    4a2a:	6026      	str	r6, [r4, #0]
			if (iprh_prev->end != iprh->start) {
    4a2c:	88e2      	ldrh	r2, [r4, #6]
    4a2e:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    4a32:	429a      	cmp	r2, r3
    4a34:	d0cb      	beq.n	49ce <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
				valid = 0;
    4a36:	2000      	movs	r0, #0
    4a38:	e7c9      	b.n	49ce <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
			ipr->p = new_p;
    4a3a:	607e      	str	r6, [r7, #4]
    4a3c:	e7c7      	b.n	49ce <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
    4a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ip_reass_pbufcount -= pbuf_clen(new_p);
    4a42:	4630      	mov	r0, r6
    4a44:	4b0a      	ldr	r3, [pc, #40]	; (4a70 <ip_reass_chain_frag_into_datagram_and_validate+0x10c>)
    4a46:	4798      	blx	r3
    4a48:	b280      	uxth	r0, r0
    4a4a:	4a0a      	ldr	r2, [pc, #40]	; (4a74 <ip_reass_chain_frag_into_datagram_and_validate+0x110>)
    4a4c:	8893      	ldrh	r3, [r2, #4]
    4a4e:	1a18      	subs	r0, r3, r0
    4a50:	8090      	strh	r0, [r2, #4]
	pbuf_free(new_p);
    4a52:	4630      	mov	r0, r6
    4a54:	4b08      	ldr	r3, [pc, #32]	; (4a78 <ip_reass_chain_frag_into_datagram_and_validate+0x114>)
    4a56:	4798      	blx	r3
	return 0;
    4a58:	2000      	movs	r0, #0
    4a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0; /* not yet valid! */
    4a5e:	2000      	movs	r0, #0
    4a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				valid = 0;
    4a64:	2000      	movs	r0, #0
    4a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						valid = 0;
    4a6a:	2000      	movs	r0, #0
}
    4a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a70:	00005685 	.word	0x00005685
    4a74:	200015f0 	.word	0x200015f0
    4a78:	000054a1 	.word	0x000054a1
    4a7c:	00003e9d 	.word	0x00003e9d

00004a80 <ip_frag_alloc_pbuf_custom_ref>:
{
    4a80:	b508      	push	{r3, lr}
	return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
    4a82:	2005      	movs	r0, #5
    4a84:	4b01      	ldr	r3, [pc, #4]	; (4a8c <ip_frag_alloc_pbuf_custom_ref+0xc>)
    4a86:	4798      	blx	r3
}
    4a88:	bd08      	pop	{r3, pc}
    4a8a:	bf00      	nop
    4a8c:	000051d5 	.word	0x000051d5

00004a90 <ip_reass_enqueue_new_datagram>:
{
    4a90:	b570      	push	{r4, r5, r6, lr}
    4a92:	4605      	mov	r5, r0
    4a94:	460e      	mov	r6, r1
	ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    4a96:	2004      	movs	r0, #4
    4a98:	4b14      	ldr	r3, [pc, #80]	; (4aec <ip_reass_enqueue_new_datagram+0x5c>)
    4a9a:	4798      	blx	r3
	if (ipr == NULL) {
    4a9c:	4604      	mov	r4, r0
    4a9e:	b1b0      	cbz	r0, 4ace <ip_reass_enqueue_new_datagram+0x3e>
	memset(ipr, 0, sizeof(struct ip_reassdata));
    4aa0:	2220      	movs	r2, #32
    4aa2:	2100      	movs	r1, #0
    4aa4:	4620      	mov	r0, r4
    4aa6:	4b12      	ldr	r3, [pc, #72]	; (4af0 <ip_reass_enqueue_new_datagram+0x60>)
    4aa8:	4798      	blx	r3
	ipr->timer = IP_REASS_MAXAGE;
    4aaa:	2303      	movs	r3, #3
    4aac:	77e3      	strb	r3, [r4, #31]
	ipr->next      = reassdatagrams;
    4aae:	4b11      	ldr	r3, [pc, #68]	; (4af4 <ip_reass_enqueue_new_datagram+0x64>)
    4ab0:	681a      	ldr	r2, [r3, #0]
    4ab2:	6022      	str	r2, [r4, #0]
	reassdatagrams = ipr;
    4ab4:	601c      	str	r4, [r3, #0]
	SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
    4ab6:	682a      	ldr	r2, [r5, #0]
    4ab8:	686e      	ldr	r6, [r5, #4]
    4aba:	68a8      	ldr	r0, [r5, #8]
    4abc:	68e9      	ldr	r1, [r5, #12]
    4abe:	60a2      	str	r2, [r4, #8]
    4ac0:	60e6      	str	r6, [r4, #12]
    4ac2:	6120      	str	r0, [r4, #16]
    4ac4:	6161      	str	r1, [r4, #20]
    4ac6:	692a      	ldr	r2, [r5, #16]
    4ac8:	61a2      	str	r2, [r4, #24]
}
    4aca:	4620      	mov	r0, r4
    4acc:	bd70      	pop	{r4, r5, r6, pc}
		if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
    4ace:	4631      	mov	r1, r6
    4ad0:	4628      	mov	r0, r5
    4ad2:	4b09      	ldr	r3, [pc, #36]	; (4af8 <ip_reass_enqueue_new_datagram+0x68>)
    4ad4:	4798      	blx	r3
    4ad6:	4286      	cmp	r6, r0
    4ad8:	dd02      	ble.n	4ae0 <ip_reass_enqueue_new_datagram+0x50>
		if (ipr == NULL)
    4ada:	2c00      	cmp	r4, #0
    4adc:	d1e0      	bne.n	4aa0 <ip_reass_enqueue_new_datagram+0x10>
    4ade:	e7f4      	b.n	4aca <ip_reass_enqueue_new_datagram+0x3a>
			ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    4ae0:	2004      	movs	r0, #4
    4ae2:	4b02      	ldr	r3, [pc, #8]	; (4aec <ip_reass_enqueue_new_datagram+0x5c>)
    4ae4:	4798      	blx	r3
    4ae6:	4604      	mov	r4, r0
    4ae8:	e7f7      	b.n	4ada <ip_reass_enqueue_new_datagram+0x4a>
    4aea:	bf00      	nop
    4aec:	000051d5 	.word	0x000051d5
    4af0:	0000c119 	.word	0x0000c119
    4af4:	200015f0 	.word	0x200015f0
    4af8:	000048c1 	.word	0x000048c1

00004afc <ip_reass_tmr>:
{
    4afc:	b538      	push	{r3, r4, r5, lr}
	r = reassdatagrams;
    4afe:	4b09      	ldr	r3, [pc, #36]	; (4b24 <ip_reass_tmr+0x28>)
    4b00:	6818      	ldr	r0, [r3, #0]
	struct ip_reassdata *r, *prev = NULL;
    4b02:	2400      	movs	r4, #0
	while (r != NULL) {
    4b04:	e004      	b.n	4b10 <ip_reass_tmr+0x14>
			r = r->next;
    4b06:	6805      	ldr	r5, [r0, #0]
			ip_reass_free_complete_datagram(tmp, prev);
    4b08:	4621      	mov	r1, r4
    4b0a:	4b07      	ldr	r3, [pc, #28]	; (4b28 <ip_reass_tmr+0x2c>)
    4b0c:	4798      	blx	r3
			r = r->next;
    4b0e:	4628      	mov	r0, r5
	while (r != NULL) {
    4b10:	b138      	cbz	r0, 4b22 <ip_reass_tmr+0x26>
		if (r->timer > 0) {
    4b12:	7fc3      	ldrb	r3, [r0, #31]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d0f6      	beq.n	4b06 <ip_reass_tmr+0xa>
			r->timer--;
    4b18:	3b01      	subs	r3, #1
    4b1a:	77c3      	strb	r3, [r0, #31]
			prev = r;
    4b1c:	4604      	mov	r4, r0
			r    = r->next;
    4b1e:	6800      	ldr	r0, [r0, #0]
    4b20:	e7f6      	b.n	4b10 <ip_reass_tmr+0x14>
}
    4b22:	bd38      	pop	{r3, r4, r5, pc}
    4b24:	200015f0 	.word	0x200015f0
    4b28:	00004831 	.word	0x00004831

00004b2c <ip_reass>:
{
    4b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b30:	4681      	mov	r9, r0
	fraghdr = (struct ip_hdr *)p->payload;
    4b32:	6845      	ldr	r5, [r0, #4]
	if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
    4b34:	782b      	ldrb	r3, [r5, #0]
    4b36:	f003 030f 	and.w	r3, r3, #15
    4b3a:	2b05      	cmp	r3, #5
    4b3c:	d125      	bne.n	4b8a <ip_reass+0x5e>
	offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    4b3e:	88e8      	ldrh	r0, [r5, #6]
    4b40:	4c5b      	ldr	r4, [pc, #364]	; (4cb0 <ip_reass+0x184>)
    4b42:	47a0      	blx	r4
    4b44:	f3c0 000c 	ubfx	r0, r0, #0, #13
    4b48:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
	len    = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    4b4c:	8868      	ldrh	r0, [r5, #2]
    4b4e:	47a0      	blx	r4
    4b50:	782f      	ldrb	r7, [r5, #0]
    4b52:	f007 070f 	and.w	r7, r7, #15
    4b56:	eba0 0787 	sub.w	r7, r0, r7, lsl #2
    4b5a:	b2bf      	uxth	r7, r7
	clen = pbuf_clen(p);
    4b5c:	4648      	mov	r0, r9
    4b5e:	4b55      	ldr	r3, [pc, #340]	; (4cb4 <ip_reass+0x188>)
    4b60:	4798      	blx	r3
    4b62:	4680      	mov	r8, r0
	if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
    4b64:	4b54      	ldr	r3, [pc, #336]	; (4cb8 <ip_reass+0x18c>)
    4b66:	889b      	ldrh	r3, [r3, #4]
    4b68:	4403      	add	r3, r0
    4b6a:	2b0a      	cmp	r3, #10
    4b6c:	dc03      	bgt.n	4b76 <ip_reass+0x4a>
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    4b6e:	4b52      	ldr	r3, [pc, #328]	; (4cb8 <ip_reass+0x18c>)
    4b70:	681c      	ldr	r4, [r3, #0]
	struct ip_reassdata *   ipr_prev = NULL;
    4b72:	2600      	movs	r6, #0
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    4b74:	e011      	b.n	4b9a <ip_reass+0x6e>
		if (!ip_reass_remove_oldest_datagram(fraghdr, clen) || ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
    4b76:	4601      	mov	r1, r0
    4b78:	4628      	mov	r0, r5
    4b7a:	4b50      	ldr	r3, [pc, #320]	; (4cbc <ip_reass+0x190>)
    4b7c:	4798      	blx	r3
    4b7e:	b120      	cbz	r0, 4b8a <ip_reass+0x5e>
    4b80:	4b4d      	ldr	r3, [pc, #308]	; (4cb8 <ip_reass+0x18c>)
    4b82:	889b      	ldrh	r3, [r3, #4]
    4b84:	4443      	add	r3, r8
    4b86:	2b0a      	cmp	r3, #10
    4b88:	ddf1      	ble.n	4b6e <ip_reass+0x42>
	pbuf_free(p);
    4b8a:	4648      	mov	r0, r9
    4b8c:	4b4c      	ldr	r3, [pc, #304]	; (4cc0 <ip_reass+0x194>)
    4b8e:	4798      	blx	r3
	return NULL;
    4b90:	f04f 0800 	mov.w	r8, #0
    4b94:	e085      	b.n	4ca2 <ip_reass+0x176>
		ipr_prev = ipr;
    4b96:	4626      	mov	r6, r4
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    4b98:	6824      	ldr	r4, [r4, #0]
    4b9a:	b15c      	cbz	r4, 4bb4 <ip_reass+0x88>
		if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
    4b9c:	6962      	ldr	r2, [r4, #20]
    4b9e:	68eb      	ldr	r3, [r5, #12]
    4ba0:	429a      	cmp	r2, r3
    4ba2:	d1f8      	bne.n	4b96 <ip_reass+0x6a>
    4ba4:	69a2      	ldr	r2, [r4, #24]
    4ba6:	692b      	ldr	r3, [r5, #16]
    4ba8:	429a      	cmp	r2, r3
    4baa:	d1f4      	bne.n	4b96 <ip_reass+0x6a>
    4bac:	89a2      	ldrh	r2, [r4, #12]
    4bae:	88ab      	ldrh	r3, [r5, #4]
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d1f0      	bne.n	4b96 <ip_reass+0x6a>
	if (ipr == NULL) {
    4bb4:	2c00      	cmp	r4, #0
    4bb6:	d04c      	beq.n	4c52 <ip_reass+0x126>
		if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    4bb8:	88e8      	ldrh	r0, [r5, #6]
    4bba:	4b3d      	ldr	r3, [pc, #244]	; (4cb0 <ip_reass+0x184>)
    4bbc:	4798      	blx	r3
    4bbe:	f3c0 000c 	ubfx	r0, r0, #0, #13
    4bc2:	2800      	cmp	r0, #0
    4bc4:	d04d      	beq.n	4c62 <ip_reass+0x136>
	ip_reass_pbufcount += clen;
    4bc6:	4b3c      	ldr	r3, [pc, #240]	; (4cb8 <ip_reass+0x18c>)
    4bc8:	889a      	ldrh	r2, [r3, #4]
    4bca:	4490      	add	r8, r2
    4bcc:	f8a3 8004 	strh.w	r8, [r3, #4]
	if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    4bd0:	88eb      	ldrh	r3, [r5, #6]
    4bd2:	f013 0f20 	tst.w	r3, #32
    4bd6:	d105      	bne.n	4be4 <ip_reass+0xb8>
		ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    4bd8:	7fa3      	ldrb	r3, [r4, #30]
    4bda:	f043 0301 	orr.w	r3, r3, #1
    4bde:	77a3      	strb	r3, [r4, #30]
		ipr->datagram_len = offset + len;
    4be0:	4457      	add	r7, sl
    4be2:	83a7      	strh	r7, [r4, #28]
	if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    4be4:	4649      	mov	r1, r9
    4be6:	4620      	mov	r0, r4
    4be8:	4b36      	ldr	r3, [pc, #216]	; (4cc4 <ip_reass+0x198>)
    4bea:	4798      	blx	r3
    4bec:	2800      	cmp	r0, #0
    4bee:	d05b      	beq.n	4ca8 <ip_reass+0x17c>
		ipr->datagram_len += IP_HLEN;
    4bf0:	8ba3      	ldrh	r3, [r4, #28]
    4bf2:	3314      	adds	r3, #20
    4bf4:	83a3      	strh	r3, [r4, #28]
		r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
    4bf6:	6863      	ldr	r3, [r4, #4]
    4bf8:	685f      	ldr	r7, [r3, #4]
    4bfa:	683d      	ldr	r5, [r7, #0]
		SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
    4bfc:	4623      	mov	r3, r4
    4bfe:	f853 2f08 	ldr.w	r2, [r3, #8]!
    4c02:	f8d3 e004 	ldr.w	lr, [r3, #4]
    4c06:	6898      	ldr	r0, [r3, #8]
    4c08:	68d9      	ldr	r1, [r3, #12]
    4c0a:	603a      	str	r2, [r7, #0]
    4c0c:	f8c7 e004 	str.w	lr, [r7, #4]
    4c10:	60b8      	str	r0, [r7, #8]
    4c12:	60f9      	str	r1, [r7, #12]
    4c14:	691a      	ldr	r2, [r3, #16]
    4c16:	613a      	str	r2, [r7, #16]
		IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
    4c18:	8ba0      	ldrh	r0, [r4, #28]
    4c1a:	4b2b      	ldr	r3, [pc, #172]	; (4cc8 <ip_reass+0x19c>)
    4c1c:	4798      	blx	r3
    4c1e:	8078      	strh	r0, [r7, #2]
		IPH_OFFSET_SET(fraghdr, 0);
    4c20:	2300      	movs	r3, #0
    4c22:	71bb      	strb	r3, [r7, #6]
    4c24:	71fb      	strb	r3, [r7, #7]
		IPH_CHKSUM_SET(fraghdr, 0);
    4c26:	72bb      	strb	r3, [r7, #10]
    4c28:	72fb      	strb	r3, [r7, #11]
		IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    4c2a:	2114      	movs	r1, #20
    4c2c:	4638      	mov	r0, r7
    4c2e:	4b27      	ldr	r3, [pc, #156]	; (4ccc <ip_reass+0x1a0>)
    4c30:	4798      	blx	r3
    4c32:	8178      	strh	r0, [r7, #10]
		p = ipr->p;
    4c34:	f8d4 8004 	ldr.w	r8, [r4, #4]
		while (r != NULL) {
    4c38:	b33d      	cbz	r5, 4c8a <ip_reass+0x15e>
			iprh = (struct ip_reass_helper *)r->payload;
    4c3a:	686f      	ldr	r7, [r5, #4]
			pbuf_header(r, -IP_HLEN);
    4c3c:	f06f 0113 	mvn.w	r1, #19
    4c40:	4628      	mov	r0, r5
    4c42:	4b23      	ldr	r3, [pc, #140]	; (4cd0 <ip_reass+0x1a4>)
    4c44:	4798      	blx	r3
			pbuf_cat(p, r);
    4c46:	4629      	mov	r1, r5
    4c48:	4640      	mov	r0, r8
    4c4a:	4b22      	ldr	r3, [pc, #136]	; (4cd4 <ip_reass+0x1a8>)
    4c4c:	4798      	blx	r3
			r = iprh->next_pbuf;
    4c4e:	683d      	ldr	r5, [r7, #0]
    4c50:	e7f2      	b.n	4c38 <ip_reass+0x10c>
		ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    4c52:	4641      	mov	r1, r8
    4c54:	4628      	mov	r0, r5
    4c56:	4b20      	ldr	r3, [pc, #128]	; (4cd8 <ip_reass+0x1ac>)
    4c58:	4798      	blx	r3
		if (ipr == NULL) {
    4c5a:	4604      	mov	r4, r0
    4c5c:	2800      	cmp	r0, #0
    4c5e:	d1b2      	bne.n	4bc6 <ip_reass+0x9a>
    4c60:	e793      	b.n	4b8a <ip_reass+0x5e>
		if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    4c62:	89e0      	ldrh	r0, [r4, #14]
    4c64:	4b12      	ldr	r3, [pc, #72]	; (4cb0 <ip_reass+0x184>)
    4c66:	4798      	blx	r3
    4c68:	f3c0 000c 	ubfx	r0, r0, #0, #13
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d0aa      	beq.n	4bc6 <ip_reass+0x9a>
			SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
    4c70:	682a      	ldr	r2, [r5, #0]
    4c72:	f8d5 e004 	ldr.w	lr, [r5, #4]
    4c76:	68a8      	ldr	r0, [r5, #8]
    4c78:	68e9      	ldr	r1, [r5, #12]
    4c7a:	60a2      	str	r2, [r4, #8]
    4c7c:	f8c4 e00c 	str.w	lr, [r4, #12]
    4c80:	6120      	str	r0, [r4, #16]
    4c82:	6161      	str	r1, [r4, #20]
    4c84:	692a      	ldr	r2, [r5, #16]
    4c86:	61a2      	str	r2, [r4, #24]
    4c88:	e79d      	b.n	4bc6 <ip_reass+0x9a>
		ip_reass_dequeue_datagram(ipr, ipr_prev);
    4c8a:	4631      	mov	r1, r6
    4c8c:	4620      	mov	r0, r4
    4c8e:	4b13      	ldr	r3, [pc, #76]	; (4cdc <ip_reass+0x1b0>)
    4c90:	4798      	blx	r3
		ip_reass_pbufcount -= pbuf_clen(p);
    4c92:	4640      	mov	r0, r8
    4c94:	4b07      	ldr	r3, [pc, #28]	; (4cb4 <ip_reass+0x188>)
    4c96:	4798      	blx	r3
    4c98:	b280      	uxth	r0, r0
    4c9a:	4a07      	ldr	r2, [pc, #28]	; (4cb8 <ip_reass+0x18c>)
    4c9c:	8893      	ldrh	r3, [r2, #4]
    4c9e:	1a18      	subs	r0, r3, r0
    4ca0:	8090      	strh	r0, [r2, #4]
}
    4ca2:	4640      	mov	r0, r8
    4ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return NULL;
    4ca8:	f04f 0800 	mov.w	r8, #0
    4cac:	e7f9      	b.n	4ca2 <ip_reass+0x176>
    4cae:	bf00      	nop
    4cb0:	00003e9d 	.word	0x00003e9d
    4cb4:	00005685 	.word	0x00005685
    4cb8:	200015f0 	.word	0x200015f0
    4cbc:	000048c1 	.word	0x000048c1
    4cc0:	000054a1 	.word	0x000054a1
    4cc4:	00004965 	.word	0x00004965
    4cc8:	00003e91 	.word	0x00003e91
    4ccc:	00004241 	.word	0x00004241
    4cd0:	00005427 	.word	0x00005427
    4cd4:	000056a1 	.word	0x000056a1
    4cd8:	00004a91 	.word	0x00004a91
    4cdc:	00004809 	.word	0x00004809

00004ce0 <ip_frag>:
 * @param dest destination ip address to which to send
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
    4ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ce4:	b08d      	sub	sp, #52	; 0x34
    4ce6:	4605      	mov	r5, r0
    4ce8:	910a      	str	r1, [sp, #40]	; 0x28
    4cea:	920b      	str	r2, [sp, #44]	; 0x2c
	struct ip_hdr *original_iphdr;
#endif
	struct ip_hdr *iphdr;
	u16_t          nfb;
	u16_t          left, cop;
	u16_t          mtu = netif->mtu;
    4cec:	8c8c      	ldrh	r4, [r1, #36]	; 0x24

	/* Copy the IP header in it */
	iphdr = (struct ip_hdr *)rambuf->payload;
	SMEMCPY(iphdr, p->payload, IP_HLEN);
#else  /* IP_FRAG_USES_STATIC_BUF */
	original_iphdr = (struct ip_hdr *)p->payload;
    4cee:	f8d0 a004 	ldr.w	sl, [r0, #4]
	iphdr          = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

	/* Save original offset */
	tmp = ntohs(IPH_OFFSET(iphdr));
    4cf2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
    4cf6:	4b61      	ldr	r3, [pc, #388]	; (4e7c <ip_frag+0x19c>)
    4cf8:	4798      	blx	r3
	ofo = tmp & IP_OFFMASK;
    4cfa:	f3c0 030c 	ubfx	r3, r0, #0, #13
    4cfe:	9304      	str	r3, [sp, #16]
	omf = tmp & IP_MF;
    4d00:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
    4d04:	9309      	str	r3, [sp, #36]	; 0x24

	left = p->tot_len - IP_HLEN;
    4d06:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    4d0a:	f1a9 0914 	sub.w	r9, r9, #20
    4d0e:	fa1f f989 	uxth.w	r9, r9

	nfb = (mtu - IP_HLEN) / 8;
    4d12:	f1a4 0314 	sub.w	r3, r4, #20
    4d16:	9306      	str	r3, [sp, #24]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	db05      	blt.n	4d28 <ip_frag+0x48>
    4d1c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
    4d20:	9308      	str	r3, [sp, #32]
	u16_t newpbuflen = 0;
    4d22:	2400      	movs	r4, #0
	u16_t          poff = IP_HLEN;
    4d24:	2614      	movs	r6, #20

	while (left) {
    4d26:	e08a      	b.n	4e3e <ip_frag+0x15e>
	nfb = (mtu - IP_HLEN) / 8;
    4d28:	3307      	adds	r3, #7
    4d2a:	e7f7      	b.n	4d1c <ip_frag+0x3c>
		if (!last) {
			tmp = tmp | IP_MF;
		}

		/* Fill this fragment */
		cop = last ? left : nfb * 8;
    4d2c:	f8cd 9014 	str.w	r9, [sp, #20]
		/* When not using a static buffer, create a chain of pbufs.
		 * The first will be a PBUF_RAM holding the link and IP header.
		 * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
		 * but limited to the size of an mtu.
		 */
		rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    4d30:	2200      	movs	r2, #0
    4d32:	2114      	movs	r1, #20
    4d34:	2002      	movs	r0, #2
    4d36:	4b52      	ldr	r3, [pc, #328]	; (4e80 <ip_frag+0x1a0>)
    4d38:	4798      	blx	r3
		if (rambuf == NULL) {
    4d3a:	9003      	str	r0, [sp, #12]
    4d3c:	2800      	cmp	r0, #0
    4d3e:	f000 8099 	beq.w	4e74 <ip_frag+0x194>
			return ERR_MEM;
		}
		LWIP_ASSERT("this needs a pbuf in one piece!", (p->len >= (IP_HLEN)));
		SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
    4d42:	6843      	ldr	r3, [r0, #4]
    4d44:	f8da 2000 	ldr.w	r2, [sl]
    4d48:	f8da 7004 	ldr.w	r7, [sl, #4]
    4d4c:	f8da 0008 	ldr.w	r0, [sl, #8]
    4d50:	f8da 100c 	ldr.w	r1, [sl, #12]
    4d54:	601a      	str	r2, [r3, #0]
    4d56:	605f      	str	r7, [r3, #4]
    4d58:	6098      	str	r0, [r3, #8]
    4d5a:	60d9      	str	r1, [r3, #12]
    4d5c:	f8da 2010 	ldr.w	r2, [sl, #16]
    4d60:	611a      	str	r2, [r3, #16]
		iphdr = (struct ip_hdr *)rambuf->payload;
    4d62:	9b03      	ldr	r3, [sp, #12]
    4d64:	f8d3 b004 	ldr.w	fp, [r3, #4]

		/* Can just adjust p directly for needed offset. */
		p->payload = (u8_t *)p->payload + poff;
    4d68:	686b      	ldr	r3, [r5, #4]
    4d6a:	4433      	add	r3, r6
    4d6c:	606b      	str	r3, [r5, #4]
		p->len -= poff;
    4d6e:	896b      	ldrh	r3, [r5, #10]
    4d70:	1b9e      	subs	r6, r3, r6
    4d72:	816e      	strh	r6, [r5, #10]

		left_to_copy = cop;
    4d74:	9e05      	ldr	r6, [sp, #20]
		while (left_to_copy) {
    4d76:	e01d      	b.n	4db4 <ip_frag+0xd4>
			/* Is this pbuf already empty? */
			if (!newpbuflen) {
				p = p->next;
				continue;
			}
			pcr = ip_frag_alloc_pbuf_custom_ref();
    4d78:	4b42      	ldr	r3, [pc, #264]	; (4e84 <ip_frag+0x1a4>)
    4d7a:	4798      	blx	r3
			if (pcr == NULL) {
    4d7c:	4607      	mov	r7, r0
    4d7e:	b318      	cbz	r0, 4dc8 <ip_frag+0xe8>
				pbuf_free(rambuf);
				return ERR_MEM;
			}
			/* Mirror this pbuf, although we might not need all of it. */
			newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
    4d80:	686b      	ldr	r3, [r5, #4]
    4d82:	9401      	str	r4, [sp, #4]
    4d84:	9300      	str	r3, [sp, #0]
    4d86:	4603      	mov	r3, r0
    4d88:	2202      	movs	r2, #2
    4d8a:	4621      	mov	r1, r4
    4d8c:	2003      	movs	r0, #3
    4d8e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 4ea4 <ip_frag+0x1c4>
    4d92:	47c0      	blx	r8
			if (newpbuf == NULL) {
    4d94:	4680      	mov	r8, r0
    4d96:	b1f8      	cbz	r0, 4dd8 <ip_frag+0xf8>
				ip_frag_free_pbuf_custom_ref(pcr);
				pbuf_free(rambuf);
				return ERR_MEM;
			}
			pbuf_ref(p);
    4d98:	4628      	mov	r0, r5
    4d9a:	4b3b      	ldr	r3, [pc, #236]	; (4e88 <ip_frag+0x1a8>)
    4d9c:	4798      	blx	r3
			pcr->original                = p;
    4d9e:	617d      	str	r5, [r7, #20]
			pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
    4da0:	4b3a      	ldr	r3, [pc, #232]	; (4e8c <ip_frag+0x1ac>)
    4da2:	613b      	str	r3, [r7, #16]

			/* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
			 * so that it is removed when pbuf_dechain is later called on rambuf.
			 */
			pbuf_cat(rambuf, newpbuf);
    4da4:	4641      	mov	r1, r8
    4da6:	9803      	ldr	r0, [sp, #12]
    4da8:	4b39      	ldr	r3, [pc, #228]	; (4e90 <ip_frag+0x1b0>)
    4daa:	4798      	blx	r3
			left_to_copy -= newpbuflen;
    4dac:	1b36      	subs	r6, r6, r4
    4dae:	b2b6      	uxth	r6, r6
			if (left_to_copy) {
    4db0:	b106      	cbz	r6, 4db4 <ip_frag+0xd4>
				p = p->next;
    4db2:	682d      	ldr	r5, [r5, #0]
		while (left_to_copy) {
    4db4:	b1ce      	cbz	r6, 4dea <ip_frag+0x10a>
			newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
    4db6:	896c      	ldrh	r4, [r5, #10]
    4db8:	42b4      	cmp	r4, r6
    4dba:	bf28      	it	cs
    4dbc:	4634      	movcs	r4, r6
    4dbe:	b2a4      	uxth	r4, r4
			if (!newpbuflen) {
    4dc0:	2c00      	cmp	r4, #0
    4dc2:	d1d9      	bne.n	4d78 <ip_frag+0x98>
				p = p->next;
    4dc4:	682d      	ldr	r5, [r5, #0]
				continue;
    4dc6:	e7f5      	b.n	4db4 <ip_frag+0xd4>
				pbuf_free(rambuf);
    4dc8:	9803      	ldr	r0, [sp, #12]
    4dca:	4b32      	ldr	r3, [pc, #200]	; (4e94 <ip_frag+0x1b4>)
    4dcc:	4798      	blx	r3
				return ERR_MEM;
    4dce:	f04f 30ff 	mov.w	r0, #4294967295
#if IP_FRAG_USES_STATIC_BUF
	pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
	snmp_inc_ipfragoks();
	return ERR_OK;
}
    4dd2:	b00d      	add	sp, #52	; 0x34
    4dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ip_frag_free_pbuf_custom_ref(pcr);
    4dd8:	4638      	mov	r0, r7
    4dda:	4b2f      	ldr	r3, [pc, #188]	; (4e98 <ip_frag+0x1b8>)
    4ddc:	4798      	blx	r3
				pbuf_free(rambuf);
    4dde:	9803      	ldr	r0, [sp, #12]
    4de0:	4b2c      	ldr	r3, [pc, #176]	; (4e94 <ip_frag+0x1b4>)
    4de2:	4798      	blx	r3
				return ERR_MEM;
    4de4:	f04f 30ff 	mov.w	r0, #4294967295
    4de8:	e7f3      	b.n	4dd2 <ip_frag+0xf2>
		IPH_OFFSET_SET(iphdr, htons(tmp));
    4dea:	9807      	ldr	r0, [sp, #28]
    4dec:	4e2b      	ldr	r6, [pc, #172]	; (4e9c <ip_frag+0x1bc>)
    4dee:	47b0      	blx	r6
    4df0:	f8ab 0006 	strh.w	r0, [fp, #6]
		IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
    4df4:	9f05      	ldr	r7, [sp, #20]
    4df6:	f107 0014 	add.w	r0, r7, #20
    4dfa:	b280      	uxth	r0, r0
    4dfc:	47b0      	blx	r6
    4dfe:	f8ab 0002 	strh.w	r0, [fp, #2]
		IPH_CHKSUM_SET(iphdr, 0);
    4e02:	2300      	movs	r3, #0
    4e04:	f88b 300a 	strb.w	r3, [fp, #10]
    4e08:	f88b 300b 	strb.w	r3, [fp, #11]
		IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    4e0c:	2114      	movs	r1, #20
    4e0e:	4658      	mov	r0, fp
    4e10:	4b23      	ldr	r3, [pc, #140]	; (4ea0 <ip_frag+0x1c0>)
    4e12:	4798      	blx	r3
    4e14:	f8ab 000a 	strh.w	r0, [fp, #10]
        netif->output(netif, rambuf, dest);
    4e18:	980a      	ldr	r0, [sp, #40]	; 0x28
    4e1a:	6943      	ldr	r3, [r0, #20]
    4e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4e1e:	9e03      	ldr	r6, [sp, #12]
    4e20:	4631      	mov	r1, r6
    4e22:	4798      	blx	r3
        pbuf_free(rambuf);
    4e24:	4630      	mov	r0, r6
    4e26:	4b1b      	ldr	r3, [pc, #108]	; (4e94 <ip_frag+0x1b4>)
    4e28:	4798      	blx	r3
		left -= cop;
    4e2a:	eba9 0907 	sub.w	r9, r9, r7
    4e2e:	fa1f f989 	uxth.w	r9, r9
		ofo += nfb;
    4e32:	9b04      	ldr	r3, [sp, #16]
    4e34:	9a08      	ldr	r2, [sp, #32]
    4e36:	4413      	add	r3, r2
    4e38:	b29b      	uxth	r3, r3
    4e3a:	9304      	str	r3, [sp, #16]
		poff = newpbuflen;
    4e3c:	4626      	mov	r6, r4
	while (left) {
    4e3e:	f1b9 0f00 	cmp.w	r9, #0
    4e42:	d015      	beq.n	4e70 <ip_frag+0x190>
		last = (left <= mtu - IP_HLEN);
    4e44:	464b      	mov	r3, r9
		tmp = omf | (IP_OFFMASK & (ofo));
    4e46:	9a04      	ldr	r2, [sp, #16]
    4e48:	f3c2 020c 	ubfx	r2, r2, #0, #13
    4e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
    4e4e:	430a      	orrs	r2, r1
    4e50:	9207      	str	r2, [sp, #28]
		if (!last) {
    4e52:	9906      	ldr	r1, [sp, #24]
    4e54:	4549      	cmp	r1, r9
    4e56:	da02      	bge.n	4e5e <ip_frag+0x17e>
			tmp = tmp | IP_MF;
    4e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    4e5c:	9207      	str	r2, [sp, #28]
		cop = last ? left : nfb * 8;
    4e5e:	9a06      	ldr	r2, [sp, #24]
    4e60:	429a      	cmp	r2, r3
    4e62:	f6bf af63 	bge.w	4d2c <ip_frag+0x4c>
    4e66:	9b08      	ldr	r3, [sp, #32]
    4e68:	00db      	lsls	r3, r3, #3
    4e6a:	b29b      	uxth	r3, r3
    4e6c:	9305      	str	r3, [sp, #20]
    4e6e:	e75f      	b.n	4d30 <ip_frag+0x50>
	return ERR_OK;
    4e70:	2000      	movs	r0, #0
    4e72:	e7ae      	b.n	4dd2 <ip_frag+0xf2>
			return ERR_MEM;
    4e74:	f04f 30ff 	mov.w	r0, #4294967295
    4e78:	e7ab      	b.n	4dd2 <ip_frag+0xf2>
    4e7a:	bf00      	nop
    4e7c:	00003e9d 	.word	0x00003e9d
    4e80:	00005505 	.word	0x00005505
    4e84:	00004a81 	.word	0x00004a81
    4e88:	00005697 	.word	0x00005697
    4e8c:	00004949 	.word	0x00004949
    4e90:	000056a1 	.word	0x000056a1
    4e94:	000054a1 	.word	0x000054a1
    4e98:	00004939 	.word	0x00004939
    4e9c:	00003e91 	.word	0x00003e91
    4ea0:	00004241 	.word	0x00004241
    4ea4:	000053c9 	.word	0x000053c9

00004ea8 <plug_holes>:
 *
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void plug_holes(struct mem *mem)
{
    4ea8:	b410      	push	{r4}
	LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

	/* plug hole forward */
	LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

	nmem = (struct mem *)(void *)&ram[mem->next];
    4eaa:	4b17      	ldr	r3, [pc, #92]	; (4f08 <plug_holes+0x60>)
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	8801      	ldrh	r1, [r0, #0]
    4eb0:	185a      	adds	r2, r3, r1
	if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
    4eb2:	4290      	cmp	r0, r2
    4eb4:	d00f      	beq.n	4ed6 <plug_holes+0x2e>
    4eb6:	7914      	ldrb	r4, [r2, #4]
    4eb8:	b96c      	cbnz	r4, 4ed6 <plug_holes+0x2e>
    4eba:	4c13      	ldr	r4, [pc, #76]	; (4f08 <plug_holes+0x60>)
    4ebc:	6864      	ldr	r4, [r4, #4]
    4ebe:	42a2      	cmp	r2, r4
    4ec0:	d009      	beq.n	4ed6 <plug_holes+0x2e>
		/* if mem->next is unused and not end of ram, combine mem and mem->next */
		if (lfree == nmem) {
    4ec2:	4c11      	ldr	r4, [pc, #68]	; (4f08 <plug_holes+0x60>)
    4ec4:	68a4      	ldr	r4, [r4, #8]
    4ec6:	42a2      	cmp	r2, r4
    4ec8:	d018      	beq.n	4efc <plug_holes+0x54>
			lfree = mem;
		}
		mem->next                                      = nmem->next;
    4eca:	5a5a      	ldrh	r2, [r3, r1]
    4ecc:	8002      	strh	r2, [r0, #0]
		((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
    4ece:	5a5a      	ldrh	r2, [r3, r1]
    4ed0:	441a      	add	r2, r3
    4ed2:	1ac1      	subs	r1, r0, r3
    4ed4:	8051      	strh	r1, [r2, #2]
	}

	/* plug hole backward */
	pmem = (struct mem *)(void *)&ram[mem->prev];
    4ed6:	8841      	ldrh	r1, [r0, #2]
    4ed8:	185a      	adds	r2, r3, r1
	if (pmem != mem && pmem->used == 0) {
    4eda:	4290      	cmp	r0, r2
    4edc:	d00b      	beq.n	4ef6 <plug_holes+0x4e>
    4ede:	7914      	ldrb	r4, [r2, #4]
    4ee0:	b94c      	cbnz	r4, 4ef6 <plug_holes+0x4e>
		/* if mem->prev is unused, combine mem and mem->prev */
		if (lfree == mem) {
    4ee2:	4c09      	ldr	r4, [pc, #36]	; (4f08 <plug_holes+0x60>)
    4ee4:	68a4      	ldr	r4, [r4, #8]
    4ee6:	42a0      	cmp	r0, r4
    4ee8:	d00b      	beq.n	4f02 <plug_holes+0x5a>
			lfree = pmem;
		}
		pmem->next                                    = mem->next;
    4eea:	8804      	ldrh	r4, [r0, #0]
    4eec:	525c      	strh	r4, [r3, r1]
		((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
    4eee:	8801      	ldrh	r1, [r0, #0]
    4ef0:	4419      	add	r1, r3
    4ef2:	1ad3      	subs	r3, r2, r3
    4ef4:	804b      	strh	r3, [r1, #2]
	}
}
    4ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
    4efa:	4770      	bx	lr
			lfree = mem;
    4efc:	4a02      	ldr	r2, [pc, #8]	; (4f08 <plug_holes+0x60>)
    4efe:	6090      	str	r0, [r2, #8]
    4f00:	e7e3      	b.n	4eca <plug_holes+0x22>
			lfree = pmem;
    4f02:	4c01      	ldr	r4, [pc, #4]	; (4f08 <plug_holes+0x60>)
    4f04:	60a2      	str	r2, [r4, #8]
    4f06:	e7f0      	b.n	4eea <plug_holes+0x42>
    4f08:	200015f8 	.word	0x200015f8

00004f0c <mem_init>:

/**
 * Zero the heap and initialize start, end and lowest-free
 */
void mem_init(void)
{
    4f0c:	b510      	push	{r4, lr}
	struct mem *mem;

	LWIP_ASSERT("Sanity check alignment", (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

	/* align the heap */
	ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
    4f0e:	4b0b      	ldr	r3, [pc, #44]	; (4f3c <mem_init+0x30>)
    4f10:	f023 0303 	bic.w	r3, r3, #3
    4f14:	480a      	ldr	r0, [pc, #40]	; (4f40 <mem_init+0x34>)
    4f16:	6003      	str	r3, [r0, #0]
	/* initialize the start of the heap */
	mem       = (struct mem *)(void *)ram;
	mem->next = MEM_SIZE_ALIGNED;
    4f18:	f44f 5460 	mov.w	r4, #14336	; 0x3800
    4f1c:	801c      	strh	r4, [r3, #0]
	mem->prev = 0;
    4f1e:	2200      	movs	r2, #0
    4f20:	805a      	strh	r2, [r3, #2]
	mem->used = 0;
    4f22:	711a      	strb	r2, [r3, #4]
	/* initialize the end of the heap */
	ram_end       = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
    4f24:	191a      	adds	r2, r3, r4
    4f26:	6042      	str	r2, [r0, #4]
	ram_end->used = 1;
    4f28:	2101      	movs	r1, #1
    4f2a:	7111      	strb	r1, [r2, #4]
	ram_end->next = MEM_SIZE_ALIGNED;
    4f2c:	8014      	strh	r4, [r2, #0]
	ram_end->prev = MEM_SIZE_ALIGNED;
    4f2e:	8054      	strh	r4, [r2, #2]

	/* initialize the lowest-free pointer to the start of the heap */
	lfree = (struct mem *)(void *)ram;
    4f30:	6083      	str	r3, [r0, #8]

	MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

	if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    4f32:	300c      	adds	r0, #12
    4f34:	4b03      	ldr	r3, [pc, #12]	; (4f44 <mem_init+0x38>)
    4f36:	4798      	blx	r3
    4f38:	bd10      	pop	{r4, pc}
    4f3a:	bf00      	nop
    4f3c:	200129b3 	.word	0x200129b3
    4f40:	200015f8 	.word	0x200015f8
    4f44:	00002449 	.word	0x00002449

00004f48 <mem_free>:
void mem_free(void *rmem)
{
	struct mem *mem;
	LWIP_MEM_FREE_DECL_PROTECT();

	if (rmem == NULL) {
    4f48:	b1f8      	cbz	r0, 4f8a <mem_free+0x42>
{
    4f4a:	b538      	push	{r3, r4, r5, lr}
    4f4c:	4604      	mov	r4, r0
	}
	LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) == 0);

	LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram && (u8_t *)rmem < (u8_t *)ram_end);

	if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    4f4e:	4a0f      	ldr	r2, [pc, #60]	; (4f8c <mem_free+0x44>)
    4f50:	6812      	ldr	r2, [r2, #0]
    4f52:	4290      	cmp	r0, r2
    4f54:	d303      	bcc.n	4f5e <mem_free+0x16>
    4f56:	4a0d      	ldr	r2, [pc, #52]	; (4f8c <mem_free+0x44>)
    4f58:	6852      	ldr	r2, [r2, #4]
    4f5a:	4290      	cmp	r0, r2
    4f5c:	d300      	bcc.n	4f60 <mem_free+0x18>
    4f5e:	bd38      	pop	{r3, r4, r5, pc}
		MEM_STATS_INC(illegal);
		SYS_ARCH_UNPROTECT(lev);
		return;
	}
	/* protect the heap from concurrent access */
	LWIP_MEM_FREE_PROTECT();
    4f60:	4d0a      	ldr	r5, [pc, #40]	; (4f8c <mem_free+0x44>)
    4f62:	2100      	movs	r1, #0
    4f64:	f105 000c 	add.w	r0, r5, #12
    4f68:	4b09      	ldr	r3, [pc, #36]	; (4f90 <mem_free+0x48>)
    4f6a:	4798      	blx	r3
	/* Get the corresponding struct mem ... */
	mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    4f6c:	f1a4 0008 	sub.w	r0, r4, #8
	/* ... which has to be in a used state ... */
	LWIP_ASSERT("mem_free: mem->used", mem->used);
	/* ... and is now unused. */
	mem->used = 0;
    4f70:	2300      	movs	r3, #0
    4f72:	f804 3c04 	strb.w	r3, [r4, #-4]

	if (mem < lfree) {
    4f76:	68ab      	ldr	r3, [r5, #8]
    4f78:	4298      	cmp	r0, r3
    4f7a:	d200      	bcs.n	4f7e <mem_free+0x36>
		/* the newly freed struct is now the lowest */
		lfree = mem;
    4f7c:	60a8      	str	r0, [r5, #8]
	}

	MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

	/* finally, see if prev or next are free also */
	plug_holes(mem);
    4f7e:	4b05      	ldr	r3, [pc, #20]	; (4f94 <mem_free+0x4c>)
    4f80:	4798      	blx	r3
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_FREE_UNPROTECT();
    4f82:	4805      	ldr	r0, [pc, #20]	; (4f98 <mem_free+0x50>)
    4f84:	4b05      	ldr	r3, [pc, #20]	; (4f9c <mem_free+0x54>)
    4f86:	4798      	blx	r3
    4f88:	e7e9      	b.n	4f5e <mem_free+0x16>
    4f8a:	4770      	bx	lr
    4f8c:	200015f8 	.word	0x200015f8
    4f90:	000024d9 	.word	0x000024d9
    4f94:	00004ea9 	.word	0x00004ea9
    4f98:	20001604 	.word	0x20001604
    4f9c:	000024c1 	.word	0x000024c1

00004fa0 <mem_trim>:
 * @return for compatibility reasons: is always == rmem, at the moment
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *mem_trim(void *rmem, mem_size_t newsize)
{
    4fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fa4:	4605      	mov	r5, r0
	/* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
	LWIP_MEM_FREE_DECL_PROTECT();

	/* Expand the size of the allocated memory region so that we can
	   adjust for alignment. */
	newsize = LWIP_MEM_ALIGN_SIZE(newsize);
    4fa6:	1ccc      	adds	r4, r1, #3
    4fa8:	b2a4      	uxth	r4, r4
    4faa:	f024 0403 	bic.w	r4, r4, #3
    4fae:	b2a4      	uxth	r4, r4

	if (newsize < MIN_SIZE_ALIGNED) {
    4fb0:	2c0b      	cmp	r4, #11
    4fb2:	d800      	bhi.n	4fb6 <mem_trim+0x16>
		/* every data block must be at least MIN_SIZE_ALIGNED long */
		newsize = MIN_SIZE_ALIGNED;
    4fb4:	240c      	movs	r4, #12
	}

	if (newsize > MEM_SIZE_ALIGNED) {
    4fb6:	f5b4 5f60 	cmp.w	r4, #14336	; 0x3800
    4fba:	d860      	bhi.n	507e <mem_trim+0xde>
		return NULL;
	}

	LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram && (u8_t *)rmem < (u8_t *)ram_end);

	if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    4fbc:	4b32      	ldr	r3, [pc, #200]	; (5088 <mem_trim+0xe8>)
    4fbe:	681b      	ldr	r3, [r3, #0]
    4fc0:	42ab      	cmp	r3, r5
    4fc2:	d837      	bhi.n	5034 <mem_trim+0x94>
    4fc4:	4a30      	ldr	r2, [pc, #192]	; (5088 <mem_trim+0xe8>)
    4fc6:	6852      	ldr	r2, [r2, #4]
    4fc8:	4295      	cmp	r5, r2
    4fca:	d233      	bcs.n	5034 <mem_trim+0x94>
		MEM_STATS_INC(illegal);
		SYS_ARCH_UNPROTECT(lev);
		return rmem;
	}
	/* Get the corresponding struct mem ... */
	mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    4fcc:	f1a5 0708 	sub.w	r7, r5, #8
	/* ... and its offset pointer */
	ptr = (mem_size_t)((u8_t *)mem - ram);
    4fd0:	1aff      	subs	r7, r7, r3
    4fd2:	b2bf      	uxth	r7, r7

	size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    4fd4:	f835 6c08 	ldrh.w	r6, [r5, #-8]
    4fd8:	1bf6      	subs	r6, r6, r7
    4fda:	b2b6      	uxth	r6, r6
    4fdc:	3e08      	subs	r6, #8
    4fde:	b2b6      	uxth	r6, r6
	LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
	if (newsize > size) {
    4fe0:	42b4      	cmp	r4, r6
    4fe2:	d84e      	bhi.n	5082 <mem_trim+0xe2>
		/* not supported */
		return NULL;
	}
	if (newsize == size) {
    4fe4:	d026      	beq.n	5034 <mem_trim+0x94>
		/* No change in size, simply return */
		return rmem;
	}

	/* protect the heap from concurrent access */
	LWIP_MEM_FREE_PROTECT();
    4fe6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5088 <mem_trim+0xe8>
    4fea:	2100      	movs	r1, #0
    4fec:	f108 000c 	add.w	r0, r8, #12
    4ff0:	4b26      	ldr	r3, [pc, #152]	; (508c <mem_trim+0xec>)
    4ff2:	4798      	blx	r3

	mem2 = (struct mem *)(void *)&ram[mem->next];
    4ff4:	f8d8 2000 	ldr.w	r2, [r8]
    4ff8:	f835 3c08 	ldrh.w	r3, [r5, #-8]
    4ffc:	18d1      	adds	r1, r2, r3
	if (mem2->used == 0) {
    4ffe:	7908      	ldrb	r0, [r1, #4]
    5000:	b9f8      	cbnz	r0, 5042 <mem_trim+0xa2>
		/* The next struct is unused, we can simply move it at little */
		mem_size_t next;
		/* remember the old next pointer */
		next = mem2->next;
    5002:	5ad0      	ldrh	r0, [r2, r3]
		/* create new struct mem which is moved directly after the shrinked mem */
		ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    5004:	19e3      	adds	r3, r4, r7
    5006:	b29b      	uxth	r3, r3
    5008:	3308      	adds	r3, #8
    500a:	b29b      	uxth	r3, r3
		if (lfree == mem2) {
    500c:	f8d8 4008 	ldr.w	r4, [r8, #8]
    5010:	42a1      	cmp	r1, r4
    5012:	d012      	beq.n	503a <mem_trim+0x9a>
			lfree = (struct mem *)(void *)&ram[ptr2];
		}
		mem2       = (struct mem *)(void *)&ram[ptr2];
    5014:	18d1      	adds	r1, r2, r3
		mem2->used = 0;
    5016:	2400      	movs	r4, #0
    5018:	710c      	strb	r4, [r1, #4]
		/* restore the next pointer */
		mem2->next = next;
    501a:	52d0      	strh	r0, [r2, r3]
		/* link it back to mem */
		mem2->prev = ptr;
    501c:	804f      	strh	r7, [r1, #2]
		/* link mem to it */
		mem->next = ptr2;
    501e:	f825 3c08 	strh.w	r3, [r5, #-8]
		/* last thing to restore linked list: as we have moved mem2,
		 * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
		 * the end of the heap */
		if (mem2->next != MEM_SIZE_ALIGNED) {
    5022:	5ad1      	ldrh	r1, [r2, r3]
    5024:	f5b1 5f60 	cmp.w	r1, #14336	; 0x3800
    5028:	d001      	beq.n	502e <mem_trim+0x8e>
			((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    502a:	440a      	add	r2, r1
    502c:	8053      	strh	r3, [r2, #2]
		  -> the remaining space stays unused since it is too small
		} */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_FREE_UNPROTECT();
    502e:	4818      	ldr	r0, [pc, #96]	; (5090 <mem_trim+0xf0>)
    5030:	4b18      	ldr	r3, [pc, #96]	; (5094 <mem_trim+0xf4>)
    5032:	4798      	blx	r3
	return rmem;
}
    5034:	4628      	mov	r0, r5
    5036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			lfree = (struct mem *)(void *)&ram[ptr2];
    503a:	18d1      	adds	r1, r2, r3
    503c:	f8c8 1008 	str.w	r1, [r8, #8]
    5040:	e7e8      	b.n	5014 <mem_trim+0x74>
	} else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
    5042:	f104 0314 	add.w	r3, r4, #20
    5046:	42b3      	cmp	r3, r6
    5048:	d8f1      	bhi.n	502e <mem_trim+0x8e>
		ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    504a:	19e3      	adds	r3, r4, r7
    504c:	b29b      	uxth	r3, r3
    504e:	3308      	adds	r3, #8
    5050:	b29b      	uxth	r3, r3
		mem2 = (struct mem *)(void *)&ram[ptr2];
    5052:	18d1      	adds	r1, r2, r3
		if (mem2 < lfree) {
    5054:	480c      	ldr	r0, [pc, #48]	; (5088 <mem_trim+0xe8>)
    5056:	6880      	ldr	r0, [r0, #8]
    5058:	4281      	cmp	r1, r0
    505a:	d201      	bcs.n	5060 <mem_trim+0xc0>
			lfree = mem2;
    505c:	480a      	ldr	r0, [pc, #40]	; (5088 <mem_trim+0xe8>)
    505e:	6081      	str	r1, [r0, #8]
		mem2->used = 0;
    5060:	2000      	movs	r0, #0
    5062:	7108      	strb	r0, [r1, #4]
		mem2->next = mem->next;
    5064:	f835 0c08 	ldrh.w	r0, [r5, #-8]
    5068:	52d0      	strh	r0, [r2, r3]
		mem2->prev = ptr;
    506a:	804f      	strh	r7, [r1, #2]
		mem->next  = ptr2;
    506c:	f825 3c08 	strh.w	r3, [r5, #-8]
		if (mem2->next != MEM_SIZE_ALIGNED) {
    5070:	5ad1      	ldrh	r1, [r2, r3]
    5072:	f5b1 5f60 	cmp.w	r1, #14336	; 0x3800
    5076:	d0da      	beq.n	502e <mem_trim+0x8e>
			((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    5078:	440a      	add	r2, r1
    507a:	8053      	strh	r3, [r2, #2]
    507c:	e7d7      	b.n	502e <mem_trim+0x8e>
		return NULL;
    507e:	2500      	movs	r5, #0
    5080:	e7d8      	b.n	5034 <mem_trim+0x94>
		return NULL;
    5082:	2500      	movs	r5, #0
    5084:	e7d6      	b.n	5034 <mem_trim+0x94>
    5086:	bf00      	nop
    5088:	200015f8 	.word	0x200015f8
    508c:	000024d9 	.word	0x000024d9
    5090:	20001604 	.word	0x20001604
    5094:	000024c1 	.word	0x000024c1

00005098 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	u8_t        local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_ALLOC_DECL_PROTECT();

	if (size == 0) {
    5098:	2800      	cmp	r0, #0
    509a:	d05b      	beq.n	5154 <mem_malloc+0xbc>
{
    509c:	b538      	push	{r3, r4, r5, lr}
    509e:	4605      	mov	r5, r0
		return NULL;
	}

	/* Expand the size of the allocated memory region so that we can
	   adjust for alignment. */
	size = LWIP_MEM_ALIGN_SIZE(size);
    50a0:	3503      	adds	r5, #3
    50a2:	b2ad      	uxth	r5, r5
    50a4:	f025 0503 	bic.w	r5, r5, #3
    50a8:	b2ad      	uxth	r5, r5

	if (size < MIN_SIZE_ALIGNED) {
    50aa:	2d0b      	cmp	r5, #11
    50ac:	d800      	bhi.n	50b0 <mem_malloc+0x18>
		/* every data block must be at least MIN_SIZE_ALIGNED long */
		size = MIN_SIZE_ALIGNED;
    50ae:	250c      	movs	r5, #12
	}

	if (size > MEM_SIZE_ALIGNED) {
    50b0:	f5b5 5f60 	cmp.w	r5, #14336	; 0x3800
    50b4:	d850      	bhi.n	5158 <mem_malloc+0xc0>
		return NULL;
	}

	/* protect the heap from concurrent access */
	sys_mutex_lock(&mem_mutex);
    50b6:	4c29      	ldr	r4, [pc, #164]	; (515c <mem_malloc+0xc4>)
    50b8:	2100      	movs	r1, #0
    50ba:	f104 000c 	add.w	r0, r4, #12
    50be:	4b28      	ldr	r3, [pc, #160]	; (5160 <mem_malloc+0xc8>)
    50c0:	4798      	blx	r3
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

		/* Scan through the heap searching for a free block that is big enough,
		 * beginning with the lowest free block.
		 */
		for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    50c2:	6821      	ldr	r1, [r4, #0]
    50c4:	68a3      	ldr	r3, [r4, #8]
    50c6:	1a5b      	subs	r3, r3, r1
    50c8:	b29b      	uxth	r3, r3
    50ca:	e019      	b.n	5100 <mem_malloc+0x68>
					 * take care of this).
					 * -> near fit or excact fit: do not split, no mem2 creation
					 * also can't move mem->next directly behind mem, since mem->next
					 * will always be used at this point!
					 */
					mem->used = 1;
    50cc:	2301      	movs	r3, #1
    50ce:	7123      	strb	r3, [r4, #4]
					MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
				}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
			mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
				if (mem == lfree) {
    50d0:	4b22      	ldr	r3, [pc, #136]	; (515c <mem_malloc+0xc4>)
    50d2:	689b      	ldr	r3, [r3, #8]
    50d4:	429c      	cmp	r4, r3
    50d6:	d009      	beq.n	50ec <mem_malloc+0x54>
					}
					lfree = cur;
					LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
				}
				LWIP_MEM_ALLOC_UNPROTECT();
				sys_mutex_unlock(&mem_mutex);
    50d8:	4822      	ldr	r0, [pc, #136]	; (5164 <mem_malloc+0xcc>)
    50da:	4b23      	ldr	r3, [pc, #140]	; (5168 <mem_malloc+0xd0>)
    50dc:	4798      	blx	r3
				            (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
				LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
				            ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
				LWIP_ASSERT("mem_malloc: sanity check alignment", (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

				return (u8_t *)mem + SIZEOF_STRUCT_MEM;
    50de:	f104 0008 	add.w	r0, r4, #8
    50e2:	bd38      	pop	{r3, r4, r5, pc}
						cur = (struct mem *)(void *)&ram[cur->next];
    50e4:	4a1d      	ldr	r2, [pc, #116]	; (515c <mem_malloc+0xc4>)
    50e6:	6812      	ldr	r2, [r2, #0]
    50e8:	881b      	ldrh	r3, [r3, #0]
    50ea:	4413      	add	r3, r2
					while (cur->used && cur != ram_end) {
    50ec:	791a      	ldrb	r2, [r3, #4]
    50ee:	b11a      	cbz	r2, 50f8 <mem_malloc+0x60>
    50f0:	4a1a      	ldr	r2, [pc, #104]	; (515c <mem_malloc+0xc4>)
    50f2:	6852      	ldr	r2, [r2, #4]
    50f4:	4293      	cmp	r3, r2
    50f6:	d1f5      	bne.n	50e4 <mem_malloc+0x4c>
					lfree = cur;
    50f8:	4a18      	ldr	r2, [pc, #96]	; (515c <mem_malloc+0xc4>)
    50fa:	6093      	str	r3, [r2, #8]
    50fc:	e7ec      	b.n	50d8 <mem_malloc+0x40>
		     ptr = ((struct mem *)(void *)&ram[ptr])->next) {
    50fe:	8823      	ldrh	r3, [r4, #0]
		for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    5100:	f5c5 5260 	rsb	r2, r5, #14336	; 0x3800
    5104:	4293      	cmp	r3, r2
    5106:	da20      	bge.n	514a <mem_malloc+0xb2>
			mem            = (struct mem *)(void *)&ram[ptr];
    5108:	18cc      	adds	r4, r1, r3
			if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
    510a:	7922      	ldrb	r2, [r4, #4]
    510c:	2a00      	cmp	r2, #0
    510e:	d1f6      	bne.n	50fe <mem_malloc+0x66>
    5110:	5aca      	ldrh	r2, [r1, r3]
    5112:	1ad2      	subs	r2, r2, r3
    5114:	3a08      	subs	r2, #8
    5116:	4628      	mov	r0, r5
    5118:	42aa      	cmp	r2, r5
    511a:	d3f0      	bcc.n	50fe <mem_malloc+0x66>
				if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
    511c:	3014      	adds	r0, #20
    511e:	4282      	cmp	r2, r0
    5120:	d3d4      	bcc.n	50cc <mem_malloc+0x34>
					ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    5122:	18ea      	adds	r2, r5, r3
    5124:	b292      	uxth	r2, r2
    5126:	3208      	adds	r2, #8
    5128:	b292      	uxth	r2, r2
					mem2       = (struct mem *)(void *)&ram[ptr2];
    512a:	1888      	adds	r0, r1, r2
					mem2->used = 0;
    512c:	2500      	movs	r5, #0
    512e:	7105      	strb	r5, [r0, #4]
					mem2->next = mem->next;
    5130:	8825      	ldrh	r5, [r4, #0]
    5132:	528d      	strh	r5, [r1, r2]
					mem2->prev = ptr;
    5134:	8043      	strh	r3, [r0, #2]
					mem->next = ptr2;
    5136:	8022      	strh	r2, [r4, #0]
					mem->used = 1;
    5138:	2301      	movs	r3, #1
    513a:	7123      	strb	r3, [r4, #4]
					if (mem2->next != MEM_SIZE_ALIGNED) {
    513c:	5a8b      	ldrh	r3, [r1, r2]
    513e:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    5142:	d0c5      	beq.n	50d0 <mem_malloc+0x38>
						((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    5144:	4419      	add	r1, r3
    5146:	804a      	strh	r2, [r1, #2]
    5148:	e7c2      	b.n	50d0 <mem_malloc+0x38>
	} while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %" S16_F " bytes\n", (s16_t)size));
	MEM_STATS_INC(err);
	LWIP_MEM_ALLOC_UNPROTECT();
	sys_mutex_unlock(&mem_mutex);
    514a:	4806      	ldr	r0, [pc, #24]	; (5164 <mem_malloc+0xcc>)
    514c:	4b06      	ldr	r3, [pc, #24]	; (5168 <mem_malloc+0xd0>)
    514e:	4798      	blx	r3
	return NULL;
    5150:	2000      	movs	r0, #0
    5152:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    5154:	2000      	movs	r0, #0
    5156:	4770      	bx	lr
		return NULL;
    5158:	2000      	movs	r0, #0
}
    515a:	bd38      	pop	{r3, r4, r5, pc}
    515c:	200015f8 	.word	0x200015f8
    5160:	000024d9 	.word	0x000024d9
    5164:	20001604 	.word	0x20001604
    5168:	000024c1 	.word	0x000024c1

0000516c <memp_init>:
 * Initialize this module.
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void memp_init(void)
{
    516c:	b430      	push	{r4, r5}
	struct memp *memp;
	u16_t        i, j;

	for (i = 0; i < MEMP_MAX; ++i) {
    516e:	2300      	movs	r3, #0
    5170:	e001      	b.n	5176 <memp_init+0xa>
    5172:	3301      	adds	r3, #1
    5174:	b29b      	uxth	r3, r3
    5176:	2b0c      	cmp	r3, #12
    5178:	d9fb      	bls.n	5172 <memp_init+0x6>
		MEMP_STATS_AVAIL(err, i, 0);
		MEMP_STATS_AVAIL(avail, i, memp_num[i]);
	}

#if !MEMP_SEPARATE_POOLS
	memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
    517a:	4913      	ldr	r1, [pc, #76]	; (51c8 <memp_init+0x5c>)
    517c:	f021 0103 	bic.w	r1, r1, #3
#endif /* !MEMP_SEPARATE_POOLS */
	/* for every pool: */
	for (i = 0; i < MEMP_MAX; ++i) {
    5180:	2500      	movs	r5, #0
    5182:	e015      	b.n	51b0 <memp_init+0x44>
#if MEMP_SEPARATE_POOLS
		memp = (struct memp *)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
		/* create a linked list of memp elements */
		for (j = 0; j < memp_num[i]; ++j) {
			memp->next  = memp_tab[i];
    5184:	4a11      	ldr	r2, [pc, #68]	; (51cc <memp_init+0x60>)
    5186:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    518a:	f8d2 4494 	ldr.w	r4, [r2, #1172]	; 0x494
    518e:	600c      	str	r4, [r1, #0]
			memp_tab[i] = memp;
    5190:	f8c2 1494 	str.w	r1, [r2, #1172]	; 0x494
			memp        = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
    5194:	4a0e      	ldr	r2, [pc, #56]	; (51d0 <memp_init+0x64>)
    5196:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    519a:	4411      	add	r1, r2
		for (j = 0; j < memp_num[i]; ++j) {
    519c:	3301      	adds	r3, #1
    519e:	b29b      	uxth	r3, r3
    51a0:	4a0b      	ldr	r2, [pc, #44]	; (51d0 <memp_init+0x64>)
    51a2:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    51a6:	8b92      	ldrh	r2, [r2, #28]
    51a8:	4293      	cmp	r3, r2
    51aa:	d3eb      	bcc.n	5184 <memp_init+0x18>
	for (i = 0; i < MEMP_MAX; ++i) {
    51ac:	3501      	adds	r5, #1
    51ae:	b2ad      	uxth	r5, r5
    51b0:	2d0c      	cmp	r5, #12
    51b2:	d807      	bhi.n	51c4 <memp_init+0x58>
		memp_tab[i] = NULL;
    51b4:	4628      	mov	r0, r5
    51b6:	4a05      	ldr	r2, [pc, #20]	; (51cc <memp_init+0x60>)
    51b8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    51bc:	2300      	movs	r3, #0
    51be:	f8c2 3494 	str.w	r3, [r2, #1172]	; 0x494
		for (j = 0; j < memp_num[i]; ++j) {
    51c2:	e7ed      	b.n	51a0 <memp_init+0x34>
#if MEMP_OVERFLOW_CHECK
	memp_overflow_init();
	/* check everything a first time to see if it worked */
	memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
    51c4:	bc30      	pop	{r4, r5}
    51c6:	4770      	bx	lr
    51c8:	2000160b 	.word	0x2000160b
    51cc:	20007bd8 	.word	0x20007bd8
    51d0:	0000d3f8 	.word	0x0000d3f8

000051d4 <memp_malloc>:
#endif
{
	struct memp *memp;
	SYS_ARCH_DECL_PROTECT(old_level);

	LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
    51d4:	280c      	cmp	r0, #12
    51d6:	d900      	bls.n	51da <memp_malloc+0x6>
    51d8:	e7fe      	b.n	51d8 <memp_malloc+0x4>
	SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
	memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

	memp = memp_tab[type];
    51da:	4b07      	ldr	r3, [pc, #28]	; (51f8 <memp_malloc+0x24>)
    51dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    51e0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494

	if (memp != NULL) {
    51e4:	b12b      	cbz	r3, 51f2 <memp_malloc+0x1e>
		memp_tab[type] = memp->next;
    51e6:	6819      	ldr	r1, [r3, #0]
    51e8:	4a03      	ldr	r2, [pc, #12]	; (51f8 <memp_malloc+0x24>)
    51ea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    51ee:	f8c2 1494 	str.w	r1, [r2, #1172]	; 0x494
	}

	SYS_ARCH_UNPROTECT(old_level);

	return memp;
}
    51f2:	4618      	mov	r0, r3
    51f4:	4770      	bx	lr
    51f6:	bf00      	nop
    51f8:	20007bd8 	.word	0x20007bd8

000051fc <memp_free>:
void memp_free(memp_t type, void *mem)
{
	struct memp *memp;
	SYS_ARCH_DECL_PROTECT(old_level);

	if (mem == NULL) {
    51fc:	b139      	cbz	r1, 520e <memp_free+0x12>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

	MEMP_STATS_DEC(used, type);

	memp->next     = memp_tab[type];
    51fe:	4b04      	ldr	r3, [pc, #16]	; (5210 <memp_free+0x14>)
    5200:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5204:	f8d0 3494 	ldr.w	r3, [r0, #1172]	; 0x494
    5208:	600b      	str	r3, [r1, #0]
	memp_tab[type] = memp;
    520a:	f8c0 1494 	str.w	r1, [r0, #1172]	; 0x494
    520e:	4770      	bx	lr
    5210:	20007bd8 	.word	0x20007bd8

00005214 <netif_init>:
	return ERR_OK;
}
#endif /* LWIP_HAVE_LOOPIF */

void netif_init(void)
{
    5214:	4770      	bx	lr
	...

00005218 <netif_set_ipaddr>:
 *
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
    5218:	b570      	push	{r4, r5, r6, lr}
    521a:	4604      	mov	r4, r0
#if LWIP_TCP
	struct tcp_pcb *       pcb;
	struct tcp_pcb_listen *lpcb;

	/* address is actually being changed? */
	if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    521c:	460d      	mov	r5, r1
    521e:	b309      	cbz	r1, 5264 <netif_set_ipaddr+0x4c>
    5220:	680a      	ldr	r2, [r1, #0]
    5222:	6843      	ldr	r3, [r0, #4]
    5224:	429a      	cmp	r2, r3
    5226:	d01d      	beq.n	5264 <netif_set_ipaddr+0x4c>
		/* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
		pcb = tcp_active_pcbs;
    5228:	4b11      	ldr	r3, [pc, #68]	; (5270 <netif_set_ipaddr+0x58>)
    522a:	6818      	ldr	r0, [r3, #0]
		while (pcb != NULL) {
    522c:	e003      	b.n	5236 <netif_set_ipaddr+0x1e>
			    /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
			    && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
			) {
				/* this connection must be aborted */
				struct tcp_pcb *next = pcb->next;
    522e:	68c6      	ldr	r6, [r0, #12]
				LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
				tcp_abort(pcb);
    5230:	4b10      	ldr	r3, [pc, #64]	; (5274 <netif_set_ipaddr+0x5c>)
    5232:	4798      	blx	r3
				pcb = next;
    5234:	4630      	mov	r0, r6
		while (pcb != NULL) {
    5236:	b128      	cbz	r0, 5244 <netif_set_ipaddr+0x2c>
			if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
    5238:	6802      	ldr	r2, [r0, #0]
    523a:	6863      	ldr	r3, [r4, #4]
    523c:	429a      	cmp	r2, r3
    523e:	d0f6      	beq.n	522e <netif_set_ipaddr+0x16>
			} else {
				pcb = pcb->next;
    5240:	68c0      	ldr	r0, [r0, #12]
    5242:	e7f8      	b.n	5236 <netif_set_ipaddr+0x1e>
			}
		}
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    5244:	4b0c      	ldr	r3, [pc, #48]	; (5278 <netif_set_ipaddr+0x60>)
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	e000      	b.n	524c <netif_set_ipaddr+0x34>
    524a:	68db      	ldr	r3, [r3, #12]
    524c:	b153      	cbz	r3, 5264 <netif_set_ipaddr+0x4c>
			/* PCB bound to current local interface address? */
			if ((!(ip_addr_isany(&(lpcb->local_ip)))) && (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
    524e:	2b00      	cmp	r3, #0
    5250:	d0fb      	beq.n	524a <netif_set_ipaddr+0x32>
    5252:	681a      	ldr	r2, [r3, #0]
    5254:	2a00      	cmp	r2, #0
    5256:	d0f8      	beq.n	524a <netif_set_ipaddr+0x32>
    5258:	6861      	ldr	r1, [r4, #4]
    525a:	428a      	cmp	r2, r1
    525c:	d1f5      	bne.n	524a <netif_set_ipaddr+0x32>
				/* The PCB is listening to the old ipaddr and
				 * is set to listen to the new one instead */
				ip_addr_set(&(lpcb->local_ip), ipaddr);
    525e:	682a      	ldr	r2, [r5, #0]
    5260:	601a      	str	r2, [r3, #0]
    5262:	e7f2      	b.n	524a <netif_set_ipaddr+0x32>
	}
#endif
	snmp_delete_ipaddridx_tree(netif);
	snmp_delete_iprteidx_tree(0, netif);
	/* set new IP address to netif */
	ip_addr_set(&(netif->ip_addr), ipaddr);
    5264:	b115      	cbz	r5, 526c <netif_set_ipaddr+0x54>
    5266:	682b      	ldr	r3, [r5, #0]
    5268:	6063      	str	r3, [r4, #4]
    526a:	bd70      	pop	{r4, r5, r6, pc}
    526c:	2300      	movs	r3, #0
    526e:	e7fb      	b.n	5268 <netif_set_ipaddr+0x50>
    5270:	200161d4 	.word	0x200161d4
    5274:	000061bd 	.word	0x000061bd
    5278:	200161dc 	.word	0x200161dc

0000527c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
	ip_addr_set(&(netif->gw), gw);
    527c:	b111      	cbz	r1, 5284 <netif_set_gw+0x8>
    527e:	680b      	ldr	r3, [r1, #0]
    5280:	60c3      	str	r3, [r0, #12]
    5282:	4770      	bx	lr
    5284:	2300      	movs	r3, #0
    5286:	e7fb      	b.n	5280 <netif_set_gw+0x4>

00005288 <netif_set_netmask>:
 */
void netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
	snmp_delete_iprteidx_tree(0, netif);
	/* set new netmask to netif */
	ip_addr_set(&(netif->netmask), netmask);
    5288:	b111      	cbz	r1, 5290 <netif_set_netmask+0x8>
    528a:	680b      	ldr	r3, [r1, #0]
    528c:	6083      	str	r3, [r0, #8]
    528e:	4770      	bx	lr
    5290:	2300      	movs	r3, #0
    5292:	e7fb      	b.n	528c <netif_set_netmask+0x4>

00005294 <netif_set_addr>:
{
    5294:	b570      	push	{r4, r5, r6, lr}
    5296:	4604      	mov	r4, r0
    5298:	4616      	mov	r6, r2
    529a:	461d      	mov	r5, r3
	netif_set_ipaddr(netif, ipaddr);
    529c:	4b05      	ldr	r3, [pc, #20]	; (52b4 <netif_set_addr+0x20>)
    529e:	4798      	blx	r3
	netif_set_netmask(netif, netmask);
    52a0:	4631      	mov	r1, r6
    52a2:	4620      	mov	r0, r4
    52a4:	4b04      	ldr	r3, [pc, #16]	; (52b8 <netif_set_addr+0x24>)
    52a6:	4798      	blx	r3
	netif_set_gw(netif, gw);
    52a8:	4629      	mov	r1, r5
    52aa:	4620      	mov	r0, r4
    52ac:	4b03      	ldr	r3, [pc, #12]	; (52bc <netif_set_addr+0x28>)
    52ae:	4798      	blx	r3
    52b0:	bd70      	pop	{r4, r5, r6, pc}
    52b2:	bf00      	nop
    52b4:	00005219 	.word	0x00005219
    52b8:	00005289 	.word	0x00005289
    52bc:	0000527d 	.word	0x0000527d

000052c0 <netif_add>:
{
    52c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52c2:	4604      	mov	r4, r0
	ip_addr_set_zero(&netif->ip_addr);
    52c4:	2500      	movs	r5, #0
    52c6:	6045      	str	r5, [r0, #4]
	ip_addr_set_zero(&netif->netmask);
    52c8:	6085      	str	r5, [r0, #8]
	ip_addr_set_zero(&netif->gw);
    52ca:	60c5      	str	r5, [r0, #12]
	netif->flags = 0;
    52cc:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
	netif->status_callback = NULL;
    52d0:	61c5      	str	r5, [r0, #28]
	netif->state = state;
    52d2:	9d06      	ldr	r5, [sp, #24]
    52d4:	6205      	str	r5, [r0, #32]
	netif->num   = netif_num++;
    52d6:	4e0b      	ldr	r6, [pc, #44]	; (5304 <netif_add+0x44>)
    52d8:	7835      	ldrb	r5, [r6, #0]
    52da:	1c6f      	adds	r7, r5, #1
    52dc:	7037      	strb	r7, [r6, #0]
    52de:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
	netif->input = input;
    52e2:	9d08      	ldr	r5, [sp, #32]
    52e4:	6105      	str	r5, [r0, #16]
	netif_set_addr(netif, ipaddr, netmask, gw);
    52e6:	4d08      	ldr	r5, [pc, #32]	; (5308 <netif_add+0x48>)
    52e8:	47a8      	blx	r5
	if (init(netif) != ERR_OK) {
    52ea:	4620      	mov	r0, r4
    52ec:	9b07      	ldr	r3, [sp, #28]
    52ee:	4798      	blx	r3
    52f0:	b928      	cbnz	r0, 52fe <netif_add+0x3e>
	netif->next = netif_list;
    52f2:	4b06      	ldr	r3, [pc, #24]	; (530c <netif_add+0x4c>)
    52f4:	681a      	ldr	r2, [r3, #0]
    52f6:	6022      	str	r2, [r4, #0]
	netif_list  = netif;
    52f8:	601c      	str	r4, [r3, #0]
	return netif;
    52fa:	4620      	mov	r0, r4
    52fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    52fe:	2000      	movs	r0, #0
}
    5300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5302:	bf00      	nop
    5304:	200080a0 	.word	0x200080a0
    5308:	00005295 	.word	0x00005295
    530c:	200161c4 	.word	0x200161c4

00005310 <netif_set_default>:
		snmp_delete_iprteidx_tree(1, netif);
	} else {
		/* install default route */
		snmp_insert_iprteidx_tree(1, netif);
	}
	netif_default = netif;
    5310:	4b01      	ldr	r3, [pc, #4]	; (5318 <netif_set_default+0x8>)
    5312:	6018      	str	r0, [r3, #0]
    5314:	4770      	bx	lr
    5316:	bf00      	nop
    5318:	200161c8 	.word	0x200161c8

0000531c <netif_set_up>:
 *
 * @see dhcp_start()
 */
void netif_set_up(struct netif *netif)
{
	if (!(netif->flags & NETIF_FLAG_UP)) {
    531c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    5320:	f013 0f01 	tst.w	r3, #1
    5324:	d116      	bne.n	5354 <netif_set_up+0x38>
{
    5326:	b510      	push	{r4, lr}
    5328:	4604      	mov	r4, r0
		netif->flags |= NETIF_FLAG_UP;
    532a:	f043 0301 	orr.w	r3, r3, #1
    532e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

#if LWIP_SNMP
		snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

		NETIF_STATUS_CALLBACK(netif);
    5332:	69c3      	ldr	r3, [r0, #28]
    5334:	b103      	cbz	r3, 5338 <netif_set_up+0x1c>
    5336:	4798      	blx	r3

		if (netif->flags & NETIF_FLAG_LINK_UP) {
    5338:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    533c:	f013 0f10 	tst.w	r3, #16
    5340:	d002      	beq.n	5348 <netif_set_up+0x2c>
#if LWIP_ARP
			/* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
			if (netif->flags & (NETIF_FLAG_ETHARP)) {
    5342:	f013 0f20 	tst.w	r3, #32
    5346:	d100      	bne.n	534a <netif_set_up+0x2e>
    5348:	bd10      	pop	{r4, pc}
				etharp_gratuitous(netif);
    534a:	1d21      	adds	r1, r4, #4
    534c:	4620      	mov	r0, r4
    534e:	4b02      	ldr	r3, [pc, #8]	; (5358 <netif_set_up+0x3c>)
    5350:	4798      	blx	r3
				igmp_report_groups(netif);
			}
#endif /* LWIP_IGMP */
		}
	}
}
    5352:	e7f9      	b.n	5348 <netif_set_up+0x2c>
    5354:	4770      	bx	lr
    5356:	bf00      	nop
    5358:	00008e51 	.word	0x00008e51

0000535c <pbuf_pool_is_empty>:
}
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void pbuf_pool_is_empty(void)
{
    535c:	b508      	push	{r3, lr}
	SYS_ARCH_UNPROTECT(old_level);
#else  /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
	u8_t queued;
	SYS_ARCH_DECL_PROTECT(old_level);
	SYS_ARCH_PROTECT(old_level);
	queued                  = pbuf_free_ooseq_pending;
    535e:	4b08      	ldr	r3, [pc, #32]	; (5380 <pbuf_pool_is_empty+0x24>)
    5360:	781a      	ldrb	r2, [r3, #0]
	pbuf_free_ooseq_pending = 1;
    5362:	2101      	movs	r1, #1
    5364:	7019      	strb	r1, [r3, #0]
	SYS_ARCH_UNPROTECT(old_level);

	if (!queued) {
    5366:	b102      	cbz	r2, 536a <pbuf_pool_is_empty+0xe>
    5368:	bd08      	pop	{r3, pc}
		/* queue a call to pbuf_free_ooseq if not already queued */
		PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
    536a:	4611      	mov	r1, r2
    536c:	4805      	ldr	r0, [pc, #20]	; (5384 <pbuf_pool_is_empty+0x28>)
    536e:	4b06      	ldr	r3, [pc, #24]	; (5388 <pbuf_pool_is_empty+0x2c>)
    5370:	4798      	blx	r3
    5372:	2800      	cmp	r0, #0
    5374:	d0f8      	beq.n	5368 <pbuf_pool_is_empty+0xc>
    5376:	2200      	movs	r2, #0
    5378:	4b01      	ldr	r3, [pc, #4]	; (5380 <pbuf_pool_is_empty+0x24>)
    537a:	701a      	strb	r2, [r3, #0]
	}
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
    537c:	e7f4      	b.n	5368 <pbuf_pool_is_empty+0xc>
    537e:	bf00      	nop
    5380:	200161cc 	.word	0x200161cc
    5384:	000053bd 	.word	0x000053bd
    5388:	00003d8d 	.word	0x00003d8d

0000538c <pbuf_free_ooseq>:
{
    538c:	b510      	push	{r4, lr}
	pbuf_free_ooseq_pending = 0;
    538e:	2200      	movs	r2, #0
    5390:	4b07      	ldr	r3, [pc, #28]	; (53b0 <pbuf_free_ooseq+0x24>)
    5392:	701a      	strb	r2, [r3, #0]
	for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    5394:	4b07      	ldr	r3, [pc, #28]	; (53b4 <pbuf_free_ooseq+0x28>)
    5396:	681c      	ldr	r4, [r3, #0]
    5398:	b144      	cbz	r4, 53ac <pbuf_free_ooseq+0x20>
		if (NULL != pcb->ooseq) {
    539a:	6f60      	ldr	r0, [r4, #116]	; 0x74
    539c:	b908      	cbnz	r0, 53a2 <pbuf_free_ooseq+0x16>
	for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    539e:	68e4      	ldr	r4, [r4, #12]
    53a0:	e7fa      	b.n	5398 <pbuf_free_ooseq+0xc>
			tcp_segs_free(pcb->ooseq);
    53a2:	4b05      	ldr	r3, [pc, #20]	; (53b8 <pbuf_free_ooseq+0x2c>)
    53a4:	4798      	blx	r3
			pcb->ooseq = NULL;
    53a6:	2300      	movs	r3, #0
    53a8:	6763      	str	r3, [r4, #116]	; 0x74
			return;
    53aa:	bd10      	pop	{r4, pc}
    53ac:	bd10      	pop	{r4, pc}
    53ae:	bf00      	nop
    53b0:	200161cc 	.word	0x200161cc
    53b4:	200161d4 	.word	0x200161d4
    53b8:	00005981 	.word	0x00005981

000053bc <pbuf_free_ooseq_callback>:
{
    53bc:	b508      	push	{r3, lr}
	pbuf_free_ooseq();
    53be:	4b01      	ldr	r3, [pc, #4]	; (53c4 <pbuf_free_ooseq_callback+0x8>)
    53c0:	4798      	blx	r3
    53c2:	bd08      	pop	{r3, pc}
    53c4:	0000538d 	.word	0x0000538d

000053c8 <pbuf_alloced_custom>:
 * @param payload_mem_len the size of the 'payload_mem' buffer, must be at least
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p, void *payload_mem,
                                 u16_t payload_mem_len)
{
    53c8:	b470      	push	{r4, r5, r6}
    53ca:	9c03      	ldr	r4, [sp, #12]
	u16_t offset;
	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%" U16_F ")\n", length));

	/* determine header offset */
	switch (l) {
    53cc:	2803      	cmp	r0, #3
    53ce:	d826      	bhi.n	541e <pbuf_alloced_custom+0x56>
    53d0:	e8df f000 	tbb	[pc, r0]
    53d4:	06040802 	.word	0x06040802
	case PBUF_TRANSPORT:
		/* add room for transport (often TCP) layer header */
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    53d8:	2038      	movs	r0, #56	; 0x38
    53da:	e004      	b.n	53e6 <pbuf_alloced_custom+0x1e>
		/* add room for IP layer header */
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
		break;
	case PBUF_LINK:
		/* add room for link layer header */
		offset = PBUF_LINK_HLEN;
    53dc:	2010      	movs	r0, #16
		break;
    53de:	e002      	b.n	53e6 <pbuf_alloced_custom+0x1e>
	case PBUF_RAW:
		offset = 0;
    53e0:	2000      	movs	r0, #0
		break;
    53e2:	e000      	b.n	53e6 <pbuf_alloced_custom+0x1e>
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
    53e4:	2024      	movs	r0, #36	; 0x24
	default:
		LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
		return NULL;
	}

	if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
    53e6:	3003      	adds	r0, #3
    53e8:	f020 0503 	bic.w	r5, r0, #3
    53ec:	440d      	add	r5, r1
    53ee:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    53f2:	42b5      	cmp	r5, r6
    53f4:	dc15      	bgt.n	5422 <pbuf_alloced_custom+0x5a>
		LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING,
		            ("pbuf_alloced_custom(length=%" U16_F ") buffer too short\n", length));
		return NULL;
	}

	p->pbuf.next = NULL;
    53f6:	2500      	movs	r5, #0
    53f8:	601d      	str	r5, [r3, #0]
	if (payload_mem != NULL) {
    53fa:	b16c      	cbz	r4, 5418 <pbuf_alloced_custom+0x50>
		p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
    53fc:	f020 0003 	bic.w	r0, r0, #3
    5400:	4420      	add	r0, r4
    5402:	6058      	str	r0, [r3, #4]
	} else {
		p->pbuf.payload = NULL;
	}
	p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
    5404:	2002      	movs	r0, #2
    5406:	7358      	strb	r0, [r3, #13]
	p->pbuf.len = p->pbuf.tot_len = length;
    5408:	8119      	strh	r1, [r3, #8]
    540a:	8159      	strh	r1, [r3, #10]
	p->pbuf.type                  = type;
    540c:	731a      	strb	r2, [r3, #12]
	p->pbuf.ref                   = 1;
    540e:	2201      	movs	r2, #1
    5410:	81da      	strh	r2, [r3, #14]
	return &p->pbuf;
    5412:	4618      	mov	r0, r3
}
    5414:	bc70      	pop	{r4, r5, r6}
    5416:	4770      	bx	lr
		p->pbuf.payload = NULL;
    5418:	2000      	movs	r0, #0
    541a:	6058      	str	r0, [r3, #4]
    541c:	e7f2      	b.n	5404 <pbuf_alloced_custom+0x3c>
		return NULL;
    541e:	2000      	movs	r0, #0
    5420:	e7f8      	b.n	5414 <pbuf_alloced_custom+0x4c>
		return NULL;
    5422:	2000      	movs	r0, #0
    5424:	e7f6      	b.n	5414 <pbuf_alloced_custom+0x4c>

00005426 <pbuf_header>:
	u16_t type;
	void *payload;
	u16_t increment_magnitude;

	LWIP_ASSERT("p != NULL", p != NULL);
	if ((header_size_increment == 0) || (p == NULL)) {
    5426:	2900      	cmp	r1, #0
    5428:	d032      	beq.n	5490 <pbuf_header+0x6a>
    542a:	460b      	mov	r3, r1
    542c:	2800      	cmp	r0, #0
    542e:	d031      	beq.n	5494 <pbuf_header+0x6e>
{
    5430:	b410      	push	{r4}
		return 0;
	}

	if (header_size_increment < 0) {
    5432:	2900      	cmp	r1, #0
    5434:	db0d      	blt.n	5452 <pbuf_header+0x2c>
		increment_magnitude = -header_size_increment;
		/* Check that we aren't going to move off the end of the pbuf */
		LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
	} else {
		increment_magnitude = header_size_increment;
    5436:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
	}

	type = p->type;
    5438:	7b02      	ldrb	r2, [r0, #12]
	/* remember current payload pointer */
	payload = p->payload;
    543a:	6841      	ldr	r1, [r0, #4]

	/* pbuf types containing payloads? */
	if (type == PBUF_RAM || type == PBUF_POOL) {
    543c:	b17a      	cbz	r2, 545e <pbuf_header+0x38>
    543e:	2a03      	cmp	r2, #3
    5440:	d00d      	beq.n	545e <pbuf_header+0x38>
			p->payload = payload;
			/* bail out unsuccesfully */
			return 1;
		}
		/* pbuf types refering to external payloads? */
	} else if (type == PBUF_REF || type == PBUF_ROM) {
    5442:	3a01      	subs	r2, #1
    5444:	b292      	uxth	r2, r2
    5446:	2a01      	cmp	r2, #1
    5448:	d826      	bhi.n	5498 <pbuf_header+0x72>
		/* hide a header in the payload? */
		if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    544a:	2b00      	cmp	r3, #0
    544c:	db10      	blt.n	5470 <pbuf_header+0x4a>
			/* increase payload pointer */
			p->payload = (u8_t *)p->payload - header_size_increment;
		} else {
			/* cannot expand payload to front (yet!)
			 * bail out unsuccesfully */
			return 1;
    544e:	2001      	movs	r0, #1
    5450:	e01b      	b.n	548a <pbuf_header+0x64>
		increment_magnitude = -header_size_increment;
    5452:	424c      	negs	r4, r1
    5454:	b2a4      	uxth	r4, r4
		LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    5456:	8942      	ldrh	r2, [r0, #10]
    5458:	4294      	cmp	r4, r2
    545a:	d9ed      	bls.n	5438 <pbuf_header+0x12>
    545c:	e7fe      	b.n	545c <pbuf_header+0x36>
		p->payload = (u8_t *)p->payload - header_size_increment;
    545e:	1aca      	subs	r2, r1, r3
    5460:	6042      	str	r2, [r0, #4]
		if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
    5462:	f100 0410 	add.w	r4, r0, #16
    5466:	42a2      	cmp	r2, r4
    5468:	d207      	bcs.n	547a <pbuf_header+0x54>
			p->payload = payload;
    546a:	6041      	str	r1, [r0, #4]
			return 1;
    546c:	2001      	movs	r0, #1
    546e:	e00c      	b.n	548a <pbuf_header+0x64>
		if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    5470:	8942      	ldrh	r2, [r0, #10]
    5472:	4294      	cmp	r4, r2
    5474:	d812      	bhi.n	549c <pbuf_header+0x76>
			p->payload = (u8_t *)p->payload - header_size_increment;
    5476:	1ac9      	subs	r1, r1, r3
    5478:	6041      	str	r1, [r0, #4]
		/* Unknown type */
		LWIP_ASSERT("bad pbuf type", 0);
		return 1;
	}
	/* modify pbuf length fields */
	p->len += header_size_increment;
    547a:	b29b      	uxth	r3, r3
    547c:	8942      	ldrh	r2, [r0, #10]
    547e:	441a      	add	r2, r3
    5480:	8142      	strh	r2, [r0, #10]
	p->tot_len += header_size_increment;
    5482:	8902      	ldrh	r2, [r0, #8]
    5484:	4413      	add	r3, r2
    5486:	8103      	strh	r3, [r0, #8]

	LWIP_DEBUGF(
	    PBUF_DEBUG | LWIP_DBG_TRACE,
	    ("pbuf_header: old %p new %p (%" S16_F ")\n", (void *)payload, (void *)p->payload, header_size_increment));

	return 0;
    5488:	2000      	movs	r0, #0
}
    548a:	f85d 4b04 	ldr.w	r4, [sp], #4
    548e:	4770      	bx	lr
		return 0;
    5490:	2000      	movs	r0, #0
    5492:	4770      	bx	lr
    5494:	2000      	movs	r0, #0
    5496:	4770      	bx	lr
		return 1;
    5498:	2001      	movs	r0, #1
    549a:	e7f6      	b.n	548a <pbuf_header+0x64>
			return 1;
    549c:	2001      	movs	r0, #1
    549e:	e7f4      	b.n	548a <pbuf_header+0x64>

000054a0 <pbuf_free>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t pbuf_free(struct pbuf *p)
{
    54a0:	b538      	push	{r3, r4, r5, lr}
	u16_t        type;
	struct pbuf *q;
	u8_t         count;

	if (p == NULL) {
    54a2:	b340      	cbz	r0, 54f6 <pbuf_free+0x56>
    54a4:	4601      	mov	r1, r0
    54a6:	2400      	movs	r4, #0
    54a8:	e005      	b.n	54b6 <pbuf_free+0x16>
#if LWIP_SUPPORT_CUSTOM_PBUF
			/* is this a custom pbuf? */
			if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
				struct pbuf_custom *pc = (struct pbuf_custom *)p;
				LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
				pc->custom_free_function(p);
    54aa:	690b      	ldr	r3, [r1, #16]
    54ac:	4608      	mov	r0, r1
    54ae:	4798      	blx	r3
					/* type == PBUF_RAM */
				} else {
					mem_free(p);
				}
			}
			count++;
    54b0:	3401      	adds	r4, #1
    54b2:	b2e4      	uxtb	r4, r4
			/* proceed to next pbuf */
			p = q;
    54b4:	4629      	mov	r1, r5
	while (p != NULL) {
    54b6:	b1f9      	cbz	r1, 54f8 <pbuf_free+0x58>
		ref = --(p->ref);
    54b8:	89cb      	ldrh	r3, [r1, #14]
    54ba:	3b01      	subs	r3, #1
    54bc:	b29b      	uxth	r3, r3
    54be:	81cb      	strh	r3, [r1, #14]
		if (ref == 0) {
    54c0:	b9bb      	cbnz	r3, 54f2 <pbuf_free+0x52>
			q = p->next;
    54c2:	680d      	ldr	r5, [r1, #0]
			type = p->type;
    54c4:	7b0b      	ldrb	r3, [r1, #12]
			if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
    54c6:	7b4a      	ldrb	r2, [r1, #13]
    54c8:	f012 0f02 	tst.w	r2, #2
    54cc:	d1ed      	bne.n	54aa <pbuf_free+0xa>
				if (type == PBUF_POOL) {
    54ce:	2b03      	cmp	r3, #3
    54d0:	d007      	beq.n	54e2 <pbuf_free+0x42>
				} else if (type == PBUF_ROM || type == PBUF_REF) {
    54d2:	3b01      	subs	r3, #1
    54d4:	b29b      	uxth	r3, r3
    54d6:	2b01      	cmp	r3, #1
    54d8:	d907      	bls.n	54ea <pbuf_free+0x4a>
					mem_free(p);
    54da:	4608      	mov	r0, r1
    54dc:	4b07      	ldr	r3, [pc, #28]	; (54fc <pbuf_free+0x5c>)
    54de:	4798      	blx	r3
    54e0:	e7e6      	b.n	54b0 <pbuf_free+0x10>
					memp_free(MEMP_PBUF_POOL, p);
    54e2:	200c      	movs	r0, #12
    54e4:	4b06      	ldr	r3, [pc, #24]	; (5500 <pbuf_free+0x60>)
    54e6:	4798      	blx	r3
    54e8:	e7e2      	b.n	54b0 <pbuf_free+0x10>
					memp_free(MEMP_PBUF, p);
    54ea:	200b      	movs	r0, #11
    54ec:	4b04      	ldr	r3, [pc, #16]	; (5500 <pbuf_free+0x60>)
    54ee:	4798      	blx	r3
    54f0:	e7de      	b.n	54b0 <pbuf_free+0x10>
			/* (and so the remaining pbufs in chain as well) */
		} else {
			LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE,
			            ("pbuf_free: %p has ref %" U16_F ", ending here.\n", (void *)p, ref));
			/* stop walking through the chain */
			p = NULL;
    54f2:	2100      	movs	r1, #0
    54f4:	e7df      	b.n	54b6 <pbuf_free+0x16>
		return 0;
    54f6:	2400      	movs	r4, #0
		}
	}
	PERF_STOP("pbuf_free");
	/* return number of de-allocated pbufs */
	return count;
}
    54f8:	4620      	mov	r0, r4
    54fa:	bd38      	pop	{r3, r4, r5, pc}
    54fc:	00004f49 	.word	0x00004f49
    5500:	000051fd 	.word	0x000051fd

00005504 <pbuf_alloc>:
{
    5504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (layer) {
    5508:	2803      	cmp	r0, #3
    550a:	f200 8083 	bhi.w	5614 <pbuf_alloc+0x110>
    550e:	e8df f000 	tbb	[pc, r0]
    5512:	0802      	.short	0x0802
    5514:	0604      	.short	0x0604
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    5516:	2438      	movs	r4, #56	; 0x38
    5518:	e004      	b.n	5524 <pbuf_alloc+0x20>
		offset = PBUF_LINK_HLEN;
    551a:	2410      	movs	r4, #16
		break;
    551c:	e002      	b.n	5524 <pbuf_alloc+0x20>
		offset = 0;
    551e:	2400      	movs	r4, #0
		break;
    5520:	e000      	b.n	5524 <pbuf_alloc+0x20>
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
    5522:	2424      	movs	r4, #36	; 0x24
    5524:	4616      	mov	r6, r2
    5526:	460d      	mov	r5, r1
	switch (type) {
    5528:	2a03      	cmp	r2, #3
    552a:	d875      	bhi.n	5618 <pbuf_alloc+0x114>
    552c:	e8df f002 	tbb	[pc, r2]
    5530:	02656546 	.word	0x02656546
		p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    5534:	200c      	movs	r0, #12
    5536:	4b39      	ldr	r3, [pc, #228]	; (561c <pbuf_alloc+0x118>)
    5538:	4798      	blx	r3
		if (p == NULL) {
    553a:	4607      	mov	r7, r0
    553c:	2800      	cmp	r0, #0
    553e:	d033      	beq.n	55a8 <pbuf_alloc+0xa4>
		p->type = type;
    5540:	7306      	strb	r6, [r0, #12]
		p->next = NULL;
    5542:	2300      	movs	r3, #0
    5544:	6003      	str	r3, [r0, #0]
		p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    5546:	f104 0310 	add.w	r3, r4, #16
    554a:	4403      	add	r3, r0
    554c:	3303      	adds	r3, #3
    554e:	f023 0303 	bic.w	r3, r3, #3
    5552:	6043      	str	r3, [r0, #4]
		p->tot_len = length;
    5554:	8105      	strh	r5, [r0, #8]
		p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
    5556:	f5c4 64bd 	rsb	r4, r4, #1512	; 0x5e8
    555a:	3404      	adds	r4, #4
    555c:	42ac      	cmp	r4, r5
    555e:	bfa8      	it	ge
    5560:	462c      	movge	r4, r5
    5562:	b2a4      	uxth	r4, r4
    5564:	8144      	strh	r4, [r0, #10]
		p->ref = 1;
    5566:	2301      	movs	r3, #1
    5568:	81c3      	strh	r3, [r0, #14]
		rem_len = length - p->len;
    556a:	1b2d      	subs	r5, r5, r4
		r = p;
    556c:	4680      	mov	r8, r0
		while (rem_len > 0) {
    556e:	2d00      	cmp	r5, #0
    5570:	dd3c      	ble.n	55ec <pbuf_alloc+0xe8>
			q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    5572:	200c      	movs	r0, #12
    5574:	4b29      	ldr	r3, [pc, #164]	; (561c <pbuf_alloc+0x118>)
    5576:	4798      	blx	r3
			if (q == NULL) {
    5578:	4604      	mov	r4, r0
    557a:	b1c0      	cbz	r0, 55ae <pbuf_alloc+0xaa>
			q->type  = type;
    557c:	7306      	strb	r6, [r0, #12]
			q->flags = 0;
    557e:	2300      	movs	r3, #0
    5580:	7343      	strb	r3, [r0, #13]
			q->next  = NULL;
    5582:	6003      	str	r3, [r0, #0]
			r->next = q;
    5584:	f8c8 0000 	str.w	r0, [r8]
			q->tot_len = (u16_t)rem_len;
    5588:	b2ab      	uxth	r3, r5
    558a:	8103      	strh	r3, [r0, #8]
			q->len     = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
    558c:	f240 52ec 	movw	r2, #1516	; 0x5ec
    5590:	4293      	cmp	r3, r2
    5592:	bf28      	it	cs
    5594:	4613      	movcs	r3, r2
    5596:	8143      	strh	r3, [r0, #10]
			q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
    5598:	f100 0210 	add.w	r2, r0, #16
    559c:	6042      	str	r2, [r0, #4]
			q->ref = 1;
    559e:	2201      	movs	r2, #1
    55a0:	81c2      	strh	r2, [r0, #14]
			rem_len -= q->len;
    55a2:	1aed      	subs	r5, r5, r3
			r = q;
    55a4:	4680      	mov	r8, r0
    55a6:	e7e2      	b.n	556e <pbuf_alloc+0x6a>
			PBUF_POOL_IS_EMPTY();
    55a8:	4b1d      	ldr	r3, [pc, #116]	; (5620 <pbuf_alloc+0x11c>)
    55aa:	4798      	blx	r3
			return NULL;
    55ac:	e022      	b.n	55f4 <pbuf_alloc+0xf0>
				PBUF_POOL_IS_EMPTY();
    55ae:	4b1c      	ldr	r3, [pc, #112]	; (5620 <pbuf_alloc+0x11c>)
    55b0:	4798      	blx	r3
				pbuf_free(p);
    55b2:	4638      	mov	r0, r7
    55b4:	4b1b      	ldr	r3, [pc, #108]	; (5624 <pbuf_alloc+0x120>)
    55b6:	4798      	blx	r3
				return NULL;
    55b8:	4627      	mov	r7, r4
    55ba:	e01b      	b.n	55f4 <pbuf_alloc+0xf0>
		p = (struct pbuf *)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    55bc:	f104 0010 	add.w	r0, r4, #16
    55c0:	1ccb      	adds	r3, r1, #3
    55c2:	b29b      	uxth	r3, r3
    55c4:	f023 0303 	bic.w	r3, r3, #3
    55c8:	4418      	add	r0, r3
    55ca:	b280      	uxth	r0, r0
    55cc:	4b16      	ldr	r3, [pc, #88]	; (5628 <pbuf_alloc+0x124>)
    55ce:	4798      	blx	r3
		if (p == NULL) {
    55d0:	4607      	mov	r7, r0
    55d2:	b178      	cbz	r0, 55f4 <pbuf_alloc+0xf0>
		p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
    55d4:	f104 0310 	add.w	r3, r4, #16
    55d8:	4403      	add	r3, r0
    55da:	3303      	adds	r3, #3
    55dc:	f023 0303 	bic.w	r3, r3, #3
    55e0:	6043      	str	r3, [r0, #4]
		p->len = p->tot_len = length;
    55e2:	8105      	strh	r5, [r0, #8]
    55e4:	8145      	strh	r5, [r0, #10]
		p->next             = NULL;
    55e6:	2300      	movs	r3, #0
    55e8:	6003      	str	r3, [r0, #0]
		p->type             = type;
    55ea:	7306      	strb	r6, [r0, #12]
	p->ref = 1;
    55ec:	2301      	movs	r3, #1
    55ee:	81fb      	strh	r3, [r7, #14]
	p->flags = 0;
    55f0:	2300      	movs	r3, #0
    55f2:	737b      	strb	r3, [r7, #13]
}
    55f4:	4638      	mov	r0, r7
    55f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    55fa:	200b      	movs	r0, #11
    55fc:	4b07      	ldr	r3, [pc, #28]	; (561c <pbuf_alloc+0x118>)
    55fe:	4798      	blx	r3
		if (p == NULL) {
    5600:	4607      	mov	r7, r0
    5602:	2800      	cmp	r0, #0
    5604:	d0f6      	beq.n	55f4 <pbuf_alloc+0xf0>
		p->payload = NULL;
    5606:	2300      	movs	r3, #0
    5608:	6043      	str	r3, [r0, #4]
		p->len = p->tot_len = length;
    560a:	8105      	strh	r5, [r0, #8]
    560c:	8145      	strh	r5, [r0, #10]
		p->next             = NULL;
    560e:	6003      	str	r3, [r0, #0]
		p->type             = type;
    5610:	7306      	strb	r6, [r0, #12]
		break;
    5612:	e7eb      	b.n	55ec <pbuf_alloc+0xe8>
		return NULL;
    5614:	2700      	movs	r7, #0
    5616:	e7ed      	b.n	55f4 <pbuf_alloc+0xf0>
		return NULL;
    5618:	2700      	movs	r7, #0
    561a:	e7eb      	b.n	55f4 <pbuf_alloc+0xf0>
    561c:	000051d5 	.word	0x000051d5
    5620:	0000535d 	.word	0x0000535d
    5624:	000054a1 	.word	0x000054a1
    5628:	00005099 	.word	0x00005099

0000562c <pbuf_realloc>:
{
    562c:	b538      	push	{r3, r4, r5, lr}
    562e:	4604      	mov	r4, r0
	if (new_len >= p->tot_len) {
    5630:	8900      	ldrh	r0, [r0, #8]
    5632:	4288      	cmp	r0, r1
    5634:	d920      	bls.n	5678 <pbuf_realloc+0x4c>
    5636:	460d      	mov	r5, r1
    5638:	e006      	b.n	5648 <pbuf_realloc+0x1c>
		rem_len -= q->len;
    563a:	1aeb      	subs	r3, r5, r3
    563c:	b29d      	uxth	r5, r3
		q->tot_len += (u16_t)grow;
    563e:	1a0b      	subs	r3, r1, r0
    5640:	8922      	ldrh	r2, [r4, #8]
    5642:	4413      	add	r3, r2
    5644:	8123      	strh	r3, [r4, #8]
		q = q->next;
    5646:	6824      	ldr	r4, [r4, #0]
	while (rem_len > q->len) {
    5648:	8963      	ldrh	r3, [r4, #10]
    564a:	429d      	cmp	r5, r3
    564c:	d8f5      	bhi.n	563a <pbuf_realloc+0xe>
	if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
    564e:	7b22      	ldrb	r2, [r4, #12]
    5650:	b952      	cbnz	r2, 5668 <pbuf_realloc+0x3c>
    5652:	429d      	cmp	r5, r3
    5654:	d008      	beq.n	5668 <pbuf_realloc+0x3c>
		q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    5656:	6863      	ldr	r3, [r4, #4]
    5658:	1b1b      	subs	r3, r3, r4
    565a:	fa15 f183 	uxtah	r1, r5, r3
    565e:	b289      	uxth	r1, r1
    5660:	4620      	mov	r0, r4
    5662:	4b06      	ldr	r3, [pc, #24]	; (567c <pbuf_realloc+0x50>)
    5664:	4798      	blx	r3
    5666:	4604      	mov	r4, r0
	q->len     = rem_len;
    5668:	8165      	strh	r5, [r4, #10]
	q->tot_len = q->len;
    566a:	8125      	strh	r5, [r4, #8]
	if (q->next != NULL) {
    566c:	6820      	ldr	r0, [r4, #0]
    566e:	b108      	cbz	r0, 5674 <pbuf_realloc+0x48>
		pbuf_free(q->next);
    5670:	4b03      	ldr	r3, [pc, #12]	; (5680 <pbuf_realloc+0x54>)
    5672:	4798      	blx	r3
	q->next = NULL;
    5674:	2300      	movs	r3, #0
    5676:	6023      	str	r3, [r4, #0]
    5678:	bd38      	pop	{r3, r4, r5, pc}
    567a:	bf00      	nop
    567c:	00004fa1 	.word	0x00004fa1
    5680:	000054a1 	.word	0x000054a1

00005684 <pbuf_clen>:

u8_t pbuf_clen(struct pbuf *p)
{
	u8_t len;

	len = 0;
    5684:	2300      	movs	r3, #0
	while (p != NULL) {
    5686:	e002      	b.n	568e <pbuf_clen+0xa>
		++len;
    5688:	3301      	adds	r3, #1
    568a:	b2db      	uxtb	r3, r3
		p = p->next;
    568c:	6800      	ldr	r0, [r0, #0]
	while (p != NULL) {
    568e:	2800      	cmp	r0, #0
    5690:	d1fa      	bne.n	5688 <pbuf_clen+0x4>
	}
	return len;
}
    5692:	4618      	mov	r0, r3
    5694:	4770      	bx	lr

00005696 <pbuf_ref>:
 */
void pbuf_ref(struct pbuf *p)
{
	SYS_ARCH_DECL_PROTECT(old_level);
	/* pbuf given? */
	if (p != NULL) {
    5696:	b110      	cbz	r0, 569e <pbuf_ref+0x8>
		SYS_ARCH_PROTECT(old_level);
		++(p->ref);
    5698:	89c3      	ldrh	r3, [r0, #14]
    569a:	3301      	adds	r3, #1
    569c:	81c3      	strh	r3, [r0, #14]
    569e:	4770      	bx	lr

000056a0 <pbuf_cat>:

void pbuf_cat(struct pbuf *h, struct pbuf *t)
{
	struct pbuf *p;

	LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)", ((h != NULL) && (t != NULL)), return;);
    56a0:	b118      	cbz	r0, 56aa <pbuf_cat+0xa>
    56a2:	4603      	mov	r3, r0
    56a4:	b109      	cbz	r1, 56aa <pbuf_cat+0xa>
{
    56a6:	b410      	push	{r4}
    56a8:	e005      	b.n	56b6 <pbuf_cat+0x16>
    56aa:	e7fe      	b.n	56aa <pbuf_cat+0xa>

	/* proceed to last pbuf of chain */
	for (p = h; p->next != NULL; p = p->next) {
		/* add total length of second chain to all totals of first chain */
		p->tot_len += t->tot_len;
    56ac:	890a      	ldrh	r2, [r1, #8]
    56ae:	891c      	ldrh	r4, [r3, #8]
    56b0:	4422      	add	r2, r4
    56b2:	811a      	strh	r2, [r3, #8]
	for (p = h; p->next != NULL; p = p->next) {
    56b4:	4603      	mov	r3, r0
    56b6:	6818      	ldr	r0, [r3, #0]
    56b8:	2800      	cmp	r0, #0
    56ba:	d1f7      	bne.n	56ac <pbuf_cat+0xc>
	}
	/* { p is last pbuf of first h chain, p->next == NULL } */
	LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
	LWIP_ASSERT("p->next == NULL", p->next == NULL);
	/* add total length of second chain to last pbuf total of first chain */
	p->tot_len += t->tot_len;
    56bc:	890a      	ldrh	r2, [r1, #8]
    56be:	8918      	ldrh	r0, [r3, #8]
    56c0:	4402      	add	r2, r0
    56c2:	811a      	strh	r2, [r3, #8]
	/* chain last pbuf of head (p) with first of tail (t) */
	p->next = t;
    56c4:	6019      	str	r1, [r3, #0]
	/* p->next now references t, but the caller will drop its reference to t,
	 * so netto there is no change to the reference count of t.
	 */
}
    56c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    56ca:	4770      	bx	lr

000056cc <pbuf_chain>:
 * The ->next field of the last pbuf of the head chain is adjusted.
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void pbuf_chain(struct pbuf *h, struct pbuf *t)
{
    56cc:	b510      	push	{r4, lr}
    56ce:	460c      	mov	r4, r1
	pbuf_cat(h, t);
    56d0:	4b02      	ldr	r3, [pc, #8]	; (56dc <pbuf_chain+0x10>)
    56d2:	4798      	blx	r3
	/* t is now referenced by h */
	pbuf_ref(t);
    56d4:	4620      	mov	r0, r4
    56d6:	4b02      	ldr	r3, [pc, #8]	; (56e0 <pbuf_chain+0x14>)
    56d8:	4798      	blx	r3
    56da:	bd10      	pop	{r4, pc}
    56dc:	000056a1 	.word	0x000056a1
    56e0:	00005697 	.word	0x00005697

000056e4 <pbuf_copy>:
	u16_t offset_to = 0, offset_from = 0, len;

	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n", (void *)p_to, (void *)p_from));

	/* is the target big enough to hold the source? */
	LWIP_ERROR("pbuf_copy: target not big enough to hold source",
    56e4:	2800      	cmp	r0, #0
    56e6:	d04c      	beq.n	5782 <pbuf_copy+0x9e>
{
    56e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ec:	460c      	mov	r4, r1
    56ee:	4605      	mov	r5, r0
	LWIP_ERROR("pbuf_copy: target not big enough to hold source",
    56f0:	b119      	cbz	r1, 56fa <pbuf_copy+0x16>
    56f2:	8902      	ldrh	r2, [r0, #8]
    56f4:	890b      	ldrh	r3, [r1, #8]
    56f6:	429a      	cmp	r2, r3
    56f8:	d200      	bcs.n	56fc <pbuf_copy+0x18>
    56fa:	e7fe      	b.n	56fa <pbuf_copy+0x16>
    56fc:	f04f 0800 	mov.w	r8, #0
    5700:	4647      	mov	r7, r8
    5702:	e010      	b.n	5726 <pbuf_copy+0x42>
		if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
			/* complete current p_from fits into current p_to */
			len = p_from->len - offset_from;
		} else {
			/* current p_from does not fit into current p_to */
			len = p_to->len - offset_to;
    5704:	1bdb      	subs	r3, r3, r7
    5706:	b29e      	uxth	r6, r3
    5708:	e015      	b.n	5736 <pbuf_copy+0x52>
		if (offset_from >= p_from->len) {
			/* on to next p_from (if any) */
			offset_from = 0;
			p_from      = p_from->next;
		}
		if (offset_to == p_to->len) {
    570a:	896b      	ldrh	r3, [r5, #10]
    570c:	429f      	cmp	r7, r3
    570e:	d025      	beq.n	575c <pbuf_copy+0x78>
			offset_to = 0;
			p_to      = p_to->next;
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
		}

		if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
    5710:	b11c      	cbz	r4, 571a <pbuf_copy+0x36>
    5712:	8962      	ldrh	r2, [r4, #10]
    5714:	8923      	ldrh	r3, [r4, #8]
    5716:	429a      	cmp	r2, r3
    5718:	d028      	beq.n	576c <pbuf_copy+0x88>
			/* don't copy more than one packet! */
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_from->next == NULL), return ERR_VAL;);
		}
		if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
    571a:	b11d      	cbz	r5, 5724 <pbuf_copy+0x40>
    571c:	896a      	ldrh	r2, [r5, #10]
    571e:	892b      	ldrh	r3, [r5, #8]
    5720:	429a      	cmp	r2, r3
    5722:	d027      	beq.n	5774 <pbuf_copy+0x90>
			/* don't copy more than one packet! */
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_to->next == NULL), return ERR_VAL;);
		}
	} while (p_from);
    5724:	b354      	cbz	r4, 577c <pbuf_copy+0x98>
		if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
    5726:	896b      	ldrh	r3, [r5, #10]
    5728:	1bd8      	subs	r0, r3, r7
    572a:	8962      	ldrh	r2, [r4, #10]
    572c:	eba2 0108 	sub.w	r1, r2, r8
    5730:	4288      	cmp	r0, r1
    5732:	dbe7      	blt.n	5704 <pbuf_copy+0x20>
			len = p_from->len - offset_from;
    5734:	b28e      	uxth	r6, r1
		MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    5736:	6868      	ldr	r0, [r5, #4]
    5738:	6861      	ldr	r1, [r4, #4]
    573a:	4632      	mov	r2, r6
    573c:	4441      	add	r1, r8
    573e:	4438      	add	r0, r7
    5740:	4b10      	ldr	r3, [pc, #64]	; (5784 <pbuf_copy+0xa0>)
    5742:	4798      	blx	r3
		offset_to += len;
    5744:	4437      	add	r7, r6
    5746:	b2bf      	uxth	r7, r7
		offset_from += len;
    5748:	4446      	add	r6, r8
    574a:	fa1f f886 	uxth.w	r8, r6
		if (offset_from >= p_from->len) {
    574e:	8963      	ldrh	r3, [r4, #10]
    5750:	4598      	cmp	r8, r3
    5752:	d3da      	bcc.n	570a <pbuf_copy+0x26>
			p_from      = p_from->next;
    5754:	6824      	ldr	r4, [r4, #0]
			offset_from = 0;
    5756:	f04f 0800 	mov.w	r8, #0
    575a:	e7d6      	b.n	570a <pbuf_copy+0x26>
			p_to      = p_to->next;
    575c:	682d      	ldr	r5, [r5, #0]
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    575e:	b10d      	cbz	r5, 5764 <pbuf_copy+0x80>
			offset_to = 0;
    5760:	2700      	movs	r7, #0
    5762:	e7d5      	b.n	5710 <pbuf_copy+0x2c>
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    5764:	b90c      	cbnz	r4, 576a <pbuf_copy+0x86>
			offset_to = 0;
    5766:	2700      	movs	r7, #0
    5768:	e7d2      	b.n	5710 <pbuf_copy+0x2c>
    576a:	e7fe      	b.n	576a <pbuf_copy+0x86>
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_from->next == NULL), return ERR_VAL;);
    576c:	6823      	ldr	r3, [r4, #0]
    576e:	2b00      	cmp	r3, #0
    5770:	d0d3      	beq.n	571a <pbuf_copy+0x36>
    5772:	e7fe      	b.n	5772 <pbuf_copy+0x8e>
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_to->next == NULL), return ERR_VAL;);
    5774:	682b      	ldr	r3, [r5, #0]
    5776:	2b00      	cmp	r3, #0
    5778:	d0d4      	beq.n	5724 <pbuf_copy+0x40>
    577a:	e7fe      	b.n	577a <pbuf_copy+0x96>
	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
	return ERR_OK;
}
    577c:	2000      	movs	r0, #0
    577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5782:	e7fe      	b.n	5782 <pbuf_copy+0x9e>
    5784:	0000c103 	.word	0x0000c103

00005788 <pbuf_copy_partial>:
	struct pbuf *p;
	u16_t        left;
	u16_t        buf_copy_len;
	u16_t        copied_total = 0;

	LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    5788:	b138      	cbz	r0, 579a <pbuf_copy_partial+0x12>
{
    578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    578e:	460f      	mov	r7, r1
    5790:	4690      	mov	r8, r2
    5792:	4605      	mov	r5, r0
	LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    5794:	b111      	cbz	r1, 579c <pbuf_copy_partial+0x14>
    5796:	2600      	movs	r6, #0
    5798:	e015      	b.n	57c6 <pbuf_copy_partial+0x3e>
    579a:	e7fe      	b.n	579a <pbuf_copy_partial+0x12>
    579c:	e7fe      	b.n	579c <pbuf_copy_partial+0x14>
		if ((offset != 0) && (offset >= p->len)) {
			/* don't copy from this buffer -> on to the next */
			offset -= p->len;
		} else {
			/* copy from this buffer. maybe only partially. */
			buf_copy_len = p->len - offset;
    579e:	896a      	ldrh	r2, [r5, #10]
    57a0:	1ad2      	subs	r2, r2, r3
    57a2:	b294      	uxth	r4, r2
			if (buf_copy_len > len)
    57a4:	45a0      	cmp	r8, r4
    57a6:	d200      	bcs.n	57aa <pbuf_copy_partial+0x22>
				buf_copy_len = len;
    57a8:	4644      	mov	r4, r8
			/* copy the necessary parts of the buffer */
			MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
    57aa:	6869      	ldr	r1, [r5, #4]
    57ac:	4622      	mov	r2, r4
    57ae:	4419      	add	r1, r3
    57b0:	19b8      	adds	r0, r7, r6
    57b2:	4b0c      	ldr	r3, [pc, #48]	; (57e4 <pbuf_copy_partial+0x5c>)
    57b4:	4798      	blx	r3
			copied_total += buf_copy_len;
    57b6:	4426      	add	r6, r4
    57b8:	b2b6      	uxth	r6, r6
			left += buf_copy_len;
			len -= buf_copy_len;
    57ba:	eba8 0404 	sub.w	r4, r8, r4
    57be:	fa1f f884 	uxth.w	r8, r4
			offset = 0;
    57c2:	2300      	movs	r3, #0
	for (p = buf; len != 0 && p != NULL; p = p->next) {
    57c4:	682d      	ldr	r5, [r5, #0]
    57c6:	f1b8 0f00 	cmp.w	r8, #0
    57ca:	d008      	beq.n	57de <pbuf_copy_partial+0x56>
    57cc:	b13d      	cbz	r5, 57de <pbuf_copy_partial+0x56>
		if ((offset != 0) && (offset >= p->len)) {
    57ce:	2b00      	cmp	r3, #0
    57d0:	d0e5      	beq.n	579e <pbuf_copy_partial+0x16>
    57d2:	896a      	ldrh	r2, [r5, #10]
    57d4:	4293      	cmp	r3, r2
    57d6:	d3e2      	bcc.n	579e <pbuf_copy_partial+0x16>
			offset -= p->len;
    57d8:	1a9b      	subs	r3, r3, r2
    57da:	b29b      	uxth	r3, r3
    57dc:	e7f2      	b.n	57c4 <pbuf_copy_partial+0x3c>
		}
	}
	return copied_total;
}
    57de:	4630      	mov	r0, r6
    57e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57e4:	0000c103 	.word	0x0000c103

000057e8 <tcp_new_port>:
 * Allocate a new local TCP port.
 *
 * @return a new (free) local TCP port number
 */
static u16_t tcp_new_port(void)
{
    57e8:	b410      	push	{r4}
	u8_t            i;
	u16_t           n = 0;
    57ea:	2200      	movs	r2, #0
	struct tcp_pcb *pcb;

again:
	if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    57ec:	4914      	ldr	r1, [pc, #80]	; (5840 <tcp_new_port+0x58>)
    57ee:	880b      	ldrh	r3, [r1, #0]
    57f0:	1c58      	adds	r0, r3, #1
    57f2:	8008      	strh	r0, [r1, #0]
    57f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    57f8:	428b      	cmp	r3, r1
    57fa:	d103      	bne.n	5804 <tcp_new_port+0x1c>
		tcp_port = TCP_LOCAL_PORT_RANGE_START;
    57fc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    5800:	4b0f      	ldr	r3, [pc, #60]	; (5840 <tcp_new_port+0x58>)
    5802:	8019      	strh	r1, [r3, #0]
	}
	/* Check all PCB lists. */
	for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    5804:	2300      	movs	r3, #0
    5806:	2b03      	cmp	r3, #3
    5808:	d904      	bls.n	5814 <tcp_new_port+0x2c>
				}
				goto again;
			}
		}
	}
	return tcp_port;
    580a:	4b0d      	ldr	r3, [pc, #52]	; (5840 <tcp_new_port+0x58>)
    580c:	8818      	ldrh	r0, [r3, #0]
}
    580e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5812:	4770      	bx	lr
		for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    5814:	490b      	ldr	r1, [pc, #44]	; (5844 <tcp_new_port+0x5c>)
    5816:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    581a:	6809      	ldr	r1, [r1, #0]
    581c:	b911      	cbnz	r1, 5824 <tcp_new_port+0x3c>
	for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    581e:	3301      	adds	r3, #1
    5820:	b2db      	uxtb	r3, r3
    5822:	e7f0      	b.n	5806 <tcp_new_port+0x1e>
			if (pcb->local_port == tcp_port) {
    5824:	8b4c      	ldrh	r4, [r1, #26]
    5826:	4806      	ldr	r0, [pc, #24]	; (5840 <tcp_new_port+0x58>)
    5828:	8800      	ldrh	r0, [r0, #0]
    582a:	4284      	cmp	r4, r0
    582c:	d106      	bne.n	583c <tcp_new_port+0x54>
				if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
    582e:	3201      	adds	r2, #1
    5830:	b292      	uxth	r2, r2
    5832:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    5836:	d3d9      	bcc.n	57ec <tcp_new_port+0x4>
					return 0;
    5838:	2000      	movs	r0, #0
    583a:	e7e8      	b.n	580e <tcp_new_port+0x26>
		for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    583c:	68c9      	ldr	r1, [r1, #12]
    583e:	e7ed      	b.n	581c <tcp_new_port+0x34>
    5840:	2000003c 	.word	0x2000003c
    5844:	0000d430 	.word	0x0000d430

00005848 <tcp_init>:
{
    5848:	4770      	bx	lr
	...

0000584c <tcp_bind>:
	LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
    584c:	7e03      	ldrb	r3, [r0, #24]
    584e:	b103      	cbz	r3, 5852 <tcp_bind+0x6>
    5850:	e7fe      	b.n	5850 <tcp_bind+0x4>
{
    5852:	b570      	push	{r4, r5, r6, lr}
    5854:	4604      	mov	r4, r0
    5856:	460d      	mov	r5, r1
	if (port == 0) {
    5858:	b13a      	cbz	r2, 586a <tcp_bind+0x1e>
	for (i = 0; i < max_pcb_list; i++) {
    585a:	2100      	movs	r1, #0
    585c:	2903      	cmp	r1, #3
    585e:	dc1e      	bgt.n	589e <tcp_bind+0x52>
		for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    5860:	4b1b      	ldr	r3, [pc, #108]	; (58d0 <tcp_bind+0x84>)
    5862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5866:	681b      	ldr	r3, [r3, #0]
    5868:	e008      	b.n	587c <tcp_bind+0x30>
		port = tcp_new_port();
    586a:	4b1a      	ldr	r3, [pc, #104]	; (58d4 <tcp_bind+0x88>)
    586c:	4798      	blx	r3
		if (port == 0) {
    586e:	4602      	mov	r2, r0
    5870:	2800      	cmp	r0, #0
    5872:	d1f2      	bne.n	585a <tcp_bind+0xe>
			return ERR_BUF;
    5874:	f06f 0001 	mvn.w	r0, #1
    5878:	bd70      	pop	{r4, r5, r6, pc}
		for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    587a:	68db      	ldr	r3, [r3, #12]
    587c:	b16b      	cbz	r3, 589a <tcp_bind+0x4e>
			if (cpcb->local_port == port) {
    587e:	8b58      	ldrh	r0, [r3, #26]
    5880:	4282      	cmp	r2, r0
    5882:	d1fa      	bne.n	587a <tcp_bind+0x2e>
					if (ip_addr_isany(&(cpcb->local_ip)) || ip_addr_isany(ipaddr)
    5884:	b1c3      	cbz	r3, 58b8 <tcp_bind+0x6c>
    5886:	681e      	ldr	r6, [r3, #0]
    5888:	b1ce      	cbz	r6, 58be <tcp_bind+0x72>
    588a:	b1dd      	cbz	r5, 58c4 <tcp_bind+0x78>
    588c:	6828      	ldr	r0, [r5, #0]
    588e:	b1e0      	cbz	r0, 58ca <tcp_bind+0x7e>
					    || ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
    5890:	4286      	cmp	r6, r0
    5892:	d1f2      	bne.n	587a <tcp_bind+0x2e>
						return ERR_USE;
    5894:	f06f 0007 	mvn.w	r0, #7
}
    5898:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < max_pcb_list; i++) {
    589a:	3101      	adds	r1, #1
    589c:	e7de      	b.n	585c <tcp_bind+0x10>
	if (!ip_addr_isany(ipaddr)) {
    589e:	b115      	cbz	r5, 58a6 <tcp_bind+0x5a>
    58a0:	682b      	ldr	r3, [r5, #0]
    58a2:	b103      	cbz	r3, 58a6 <tcp_bind+0x5a>
		pcb->local_ip = *ipaddr;
    58a4:	6023      	str	r3, [r4, #0]
	pcb->local_port = port;
    58a6:	8362      	strh	r2, [r4, #26]
	TCP_REG(&tcp_bound_pcbs, pcb);
    58a8:	4b0b      	ldr	r3, [pc, #44]	; (58d8 <tcp_bind+0x8c>)
    58aa:	681a      	ldr	r2, [r3, #0]
    58ac:	60e2      	str	r2, [r4, #12]
    58ae:	601c      	str	r4, [r3, #0]
    58b0:	4b0a      	ldr	r3, [pc, #40]	; (58dc <tcp_bind+0x90>)
    58b2:	4798      	blx	r3
	return ERR_OK;
    58b4:	2000      	movs	r0, #0
    58b6:	bd70      	pop	{r4, r5, r6, pc}
						return ERR_USE;
    58b8:	f06f 0007 	mvn.w	r0, #7
    58bc:	bd70      	pop	{r4, r5, r6, pc}
    58be:	f06f 0007 	mvn.w	r0, #7
    58c2:	bd70      	pop	{r4, r5, r6, pc}
    58c4:	f06f 0007 	mvn.w	r0, #7
    58c8:	bd70      	pop	{r4, r5, r6, pc}
    58ca:	f06f 0007 	mvn.w	r0, #7
    58ce:	bd70      	pop	{r4, r5, r6, pc}
    58d0:	0000d430 	.word	0x0000d430
    58d4:	000057e9 	.word	0x000057e9
    58d8:	200161e4 	.word	0x200161e4
    58dc:	000083fd 	.word	0x000083fd

000058e0 <tcp_update_rcv_ann_wnd>:
{
    58e0:	b470      	push	{r4, r5, r6}
	u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
    58e2:	6a85      	ldr	r5, [r0, #40]	; 0x28
    58e4:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    58e6:	192a      	adds	r2, r5, r4
	if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
    58e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    58ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    58ec:	f640 3668 	movw	r6, #2920	; 0xb68
    58f0:	42b3      	cmp	r3, r6
    58f2:	d900      	bls.n	58f6 <tcp_update_rcv_ann_wnd+0x16>
    58f4:	4633      	mov	r3, r6
    58f6:	440b      	add	r3, r1
    58f8:	1ad3      	subs	r3, r2, r3
    58fa:	2b00      	cmp	r3, #0
    58fc:	db03      	blt.n	5906 <tcp_update_rcv_ann_wnd+0x26>
		pcb->rcv_ann_wnd = pcb->rcv_wnd;
    58fe:	85c4      	strh	r4, [r0, #46]	; 0x2e
		return new_right_edge - pcb->rcv_ann_right_edge;
    5900:	1a50      	subs	r0, r2, r1
}
    5902:	bc70      	pop	{r4, r5, r6}
    5904:	4770      	bx	lr
		if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
    5906:	1a6b      	subs	r3, r5, r1
    5908:	2b00      	cmp	r3, #0
    590a:	dd03      	ble.n	5914 <tcp_update_rcv_ann_wnd+0x34>
			pcb->rcv_ann_wnd = 0;
    590c:	2200      	movs	r2, #0
    590e:	85c2      	strh	r2, [r0, #46]	; 0x2e
		return 0;
    5910:	4610      	mov	r0, r2
    5912:	e7f6      	b.n	5902 <tcp_update_rcv_ann_wnd+0x22>
			u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
    5914:	1b49      	subs	r1, r1, r5
			pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    5916:	85c1      	strh	r1, [r0, #46]	; 0x2e
		return 0;
    5918:	2000      	movs	r0, #0
    591a:	e7f2      	b.n	5902 <tcp_update_rcv_ann_wnd+0x22>

0000591c <tcp_recved>:
{
    591c:	b510      	push	{r4, lr}
    591e:	4604      	mov	r4, r0
	pcb->rcv_wnd += len;
    5920:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    5922:	4419      	add	r1, r3
    5924:	b289      	uxth	r1, r1
    5926:	8581      	strh	r1, [r0, #44]	; 0x2c
	if (pcb->rcv_wnd > TCP_WND) {
    5928:	f241 63d0 	movw	r3, #5840	; 0x16d0
    592c:	4299      	cmp	r1, r3
    592e:	d900      	bls.n	5932 <tcp_recved+0x16>
		pcb->rcv_wnd = TCP_WND;
    5930:	8583      	strh	r3, [r0, #44]	; 0x2c
	wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
    5932:	4620      	mov	r0, r4
    5934:	4b07      	ldr	r3, [pc, #28]	; (5954 <tcp_recved+0x38>)
    5936:	4798      	blx	r3
	if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    5938:	f240 53b3 	movw	r3, #1459	; 0x5b3
    593c:	4298      	cmp	r0, r3
    593e:	dc00      	bgt.n	5942 <tcp_recved+0x26>
    5940:	bd10      	pop	{r4, pc}
		tcp_ack_now(pcb);
    5942:	7fa3      	ldrb	r3, [r4, #30]
    5944:	f043 0302 	orr.w	r3, r3, #2
    5948:	77a3      	strb	r3, [r4, #30]
		tcp_output(pcb);
    594a:	4620      	mov	r0, r4
    594c:	4b02      	ldr	r3, [pc, #8]	; (5958 <tcp_recved+0x3c>)
    594e:	4798      	blx	r3
}
    5950:	e7f6      	b.n	5940 <tcp_recved+0x24>
    5952:	bf00      	nop
    5954:	000058e1 	.word	0x000058e1
    5958:	00007ee9 	.word	0x00007ee9

0000595c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void tcp_seg_free(struct tcp_seg *seg)
{
	if (seg != NULL) {
    595c:	b150      	cbz	r0, 5974 <tcp_seg_free+0x18>
{
    595e:	b510      	push	{r4, lr}
    5960:	4604      	mov	r4, r0
		if (seg->p != NULL) {
    5962:	6840      	ldr	r0, [r0, #4]
    5964:	b108      	cbz	r0, 596a <tcp_seg_free+0xe>
			pbuf_free(seg->p);
    5966:	4b04      	ldr	r3, [pc, #16]	; (5978 <tcp_seg_free+0x1c>)
    5968:	4798      	blx	r3
#if TCP_DEBUG
			seg->p = NULL;
#endif /* TCP_DEBUG */
		}
		memp_free(MEMP_TCP_SEG, seg);
    596a:	4621      	mov	r1, r4
    596c:	2003      	movs	r0, #3
    596e:	4b03      	ldr	r3, [pc, #12]	; (597c <tcp_seg_free+0x20>)
    5970:	4798      	blx	r3
    5972:	bd10      	pop	{r4, pc}
    5974:	4770      	bx	lr
    5976:	bf00      	nop
    5978:	000054a1 	.word	0x000054a1
    597c:	000051fd 	.word	0x000051fd

00005980 <tcp_segs_free>:
	while (seg != NULL) {
    5980:	b138      	cbz	r0, 5992 <tcp_segs_free+0x12>
{
    5982:	b510      	push	{r4, lr}
		struct tcp_seg *next = seg->next;
    5984:	6804      	ldr	r4, [r0, #0]
		tcp_seg_free(seg);
    5986:	4b03      	ldr	r3, [pc, #12]	; (5994 <tcp_segs_free+0x14>)
    5988:	4798      	blx	r3
		seg = next;
    598a:	4620      	mov	r0, r4
	while (seg != NULL) {
    598c:	2c00      	cmp	r4, #0
    598e:	d1f9      	bne.n	5984 <tcp_segs_free+0x4>
}
    5990:	bd10      	pop	{r4, pc}
    5992:	4770      	bx	lr
    5994:	0000595d 	.word	0x0000595d

00005998 <tcp_seg_copy>:
 *
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *tcp_seg_copy(struct tcp_seg *seg)
{
    5998:	b538      	push	{r3, r4, r5, lr}
    599a:	4605      	mov	r5, r0
	struct tcp_seg *cseg;

	cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
    599c:	2003      	movs	r0, #3
    599e:	4b08      	ldr	r3, [pc, #32]	; (59c0 <tcp_seg_copy+0x28>)
    59a0:	4798      	blx	r3
	if (cseg == NULL) {
    59a2:	4604      	mov	r4, r0
    59a4:	b150      	cbz	r0, 59bc <tcp_seg_copy+0x24>
		return NULL;
	}
	SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
    59a6:	6828      	ldr	r0, [r5, #0]
    59a8:	6869      	ldr	r1, [r5, #4]
    59aa:	68aa      	ldr	r2, [r5, #8]
    59ac:	68eb      	ldr	r3, [r5, #12]
    59ae:	6020      	str	r0, [r4, #0]
    59b0:	6061      	str	r1, [r4, #4]
    59b2:	60a2      	str	r2, [r4, #8]
    59b4:	60e3      	str	r3, [r4, #12]
	pbuf_ref(cseg->p);
    59b6:	6860      	ldr	r0, [r4, #4]
    59b8:	4b02      	ldr	r3, [pc, #8]	; (59c4 <tcp_seg_copy+0x2c>)
    59ba:	4798      	blx	r3
	return cseg;
}
    59bc:	4620      	mov	r0, r4
    59be:	bd38      	pop	{r3, r4, r5, pc}
    59c0:	000051d5 	.word	0x000051d5
    59c4:	00005697 	.word	0x00005697

000059c8 <tcp_arg>:
 */
void tcp_arg(struct tcp_pcb *pcb, void *arg)
{
	/* This function is allowed to be called for both listen pcbs and
	   connection pcbs. */
	pcb->callback_arg = arg;
    59c8:	6101      	str	r1, [r0, #16]
    59ca:	4770      	bx	lr

000059cc <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
	LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
	pcb->recv = recv;
    59cc:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    59d0:	4770      	bx	lr

000059d2 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
	LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
	pcb->sent = sent;
    59d2:	67c1      	str	r1, [r0, #124]	; 0x7c
    59d4:	4770      	bx	lr

000059d6 <tcp_err>:
 *        has occured on the connection
 */
void tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
	LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
	pcb->errf = err;
    59d6:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
    59da:	4770      	bx	lr

000059dc <tcp_accept>:
 */
void tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
	/* This function is allowed to be called for both listen pcbs and
	   connection pcbs. */
	pcb->accept = accept;
    59dc:	6141      	str	r1, [r0, #20]
    59de:	4770      	bx	lr

000059e0 <tcp_poll>:
 */
void tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
	LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
	pcb->poll = poll;
    59e0:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else  /* LWIP_CALLBACK_API */
	LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
	pcb->pollinterval = interval;
    59e4:	f880 2020 	strb.w	r2, [r0, #32]
    59e8:	4770      	bx	lr
	...

000059ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void tcp_pcb_purge(struct tcp_pcb *pcb)
{
	if (pcb->state != CLOSED && pcb->state != TIME_WAIT && pcb->state != LISTEN) {
    59ec:	7e03      	ldrb	r3, [r0, #24]
    59ee:	b1e3      	cbz	r3, 5a2a <tcp_pcb_purge+0x3e>
    59f0:	2b0a      	cmp	r3, #10
    59f2:	d01a      	beq.n	5a2a <tcp_pcb_purge+0x3e>
    59f4:	2b01      	cmp	r3, #1
    59f6:	d018      	beq.n	5a2a <tcp_pcb_purge+0x3e>
{
    59f8:	b570      	push	{r4, r5, r6, lr}
    59fa:	4604      	mov	r4, r0
				}
			}
		}
#endif /* TCP_LISTEN_BACKLOG */

		if (pcb->refused_data != NULL) {
    59fc:	6f80      	ldr	r0, [r0, #120]	; 0x78
    59fe:	b118      	cbz	r0, 5a08 <tcp_pcb_purge+0x1c>
			LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
			pbuf_free(pcb->refused_data);
    5a00:	4b0a      	ldr	r3, [pc, #40]	; (5a2c <tcp_pcb_purge+0x40>)
    5a02:	4798      	blx	r3
			pcb->refused_data = NULL;
    5a04:	2300      	movs	r3, #0
    5a06:	67a3      	str	r3, [r4, #120]	; 0x78
		}
#if TCP_QUEUE_OOSEQ
		if (pcb->ooseq != NULL) {
			LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
		}
		tcp_segs_free(pcb->ooseq);
    5a08:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5a0a:	4e09      	ldr	r6, [pc, #36]	; (5a30 <tcp_pcb_purge+0x44>)
    5a0c:	47b0      	blx	r6
		pcb->ooseq = NULL;
    5a0e:	2500      	movs	r5, #0
    5a10:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

		/* Stop the retransmission timer as it will expect data on unacked
		   queue if it fires */
		pcb->rtime = -1;
    5a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5a16:	86a3      	strh	r3, [r4, #52]	; 0x34

		tcp_segs_free(pcb->unsent);
    5a18:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5a1a:	47b0      	blx	r6
		tcp_segs_free(pcb->unacked);
    5a1c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5a1e:	47b0      	blx	r6
		pcb->unacked = pcb->unsent = NULL;
    5a20:	66e5      	str	r5, [r4, #108]	; 0x6c
    5a22:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
		pcb->unsent_oversize = 0;
    5a24:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    5a28:	bd70      	pop	{r4, r5, r6, pc}
    5a2a:	4770      	bx	lr
    5a2c:	000054a1 	.word	0x000054a1
    5a30:	00005981 	.word	0x00005981

00005a34 <tcp_slowtmr>:
{
    5a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a38:	b082      	sub	sp, #8
	++tcp_ticks;
    5a3a:	4aa2      	ldr	r2, [pc, #648]	; (5cc4 <tcp_slowtmr+0x290>)
    5a3c:	6813      	ldr	r3, [r2, #0]
    5a3e:	3301      	adds	r3, #1
    5a40:	6013      	str	r3, [r2, #0]
	++tcp_timer_ctr;
    5a42:	4aa1      	ldr	r2, [pc, #644]	; (5cc8 <tcp_slowtmr+0x294>)
    5a44:	7813      	ldrb	r3, [r2, #0]
    5a46:	3301      	adds	r3, #1
    5a48:	7013      	strb	r3, [r2, #0]
	pcb  = tcp_active_pcbs;
    5a4a:	4ba0      	ldr	r3, [pc, #640]	; (5ccc <tcp_slowtmr+0x298>)
    5a4c:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    5a4e:	2600      	movs	r6, #0
	while (pcb != NULL) {
    5a50:	e000      	b.n	5a54 <tcp_slowtmr+0x20>
			pcb = pcb->next;
    5a52:	68e4      	ldr	r4, [r4, #12]
	while (pcb != NULL) {
    5a54:	2c00      	cmp	r4, #0
    5a56:	f000 8131 	beq.w	5cbc <tcp_slowtmr+0x288>
		if (pcb->last_timer == tcp_timer_ctr) {
    5a5a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    5a5e:	4b9a      	ldr	r3, [pc, #616]	; (5cc8 <tcp_slowtmr+0x294>)
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	429a      	cmp	r2, r3
    5a64:	d0f5      	beq.n	5a52 <tcp_slowtmr+0x1e>
		pcb->last_timer = tcp_timer_ctr;
    5a66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    5a6a:	7e23      	ldrb	r3, [r4, #24]
    5a6c:	2b02      	cmp	r3, #2
    5a6e:	d01f      	beq.n	5ab0 <tcp_slowtmr+0x7c>
		} else if (pcb->nrtx == TCP_MAXRTX) {
    5a70:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    5a74:	2a0c      	cmp	r2, #12
    5a76:	d056      	beq.n	5b26 <tcp_slowtmr+0xf2>
			if (pcb->persist_backoff > 0) {
    5a78:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
    5a7c:	b1f5      	cbz	r5, 5abc <tcp_slowtmr+0x88>
				pcb->persist_cnt++;
    5a7e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    5a82:	3301      	adds	r3, #1
    5a84:	b2db      	uxtb	r3, r3
    5a86:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
				if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff - 1]) {
    5a8a:	1e69      	subs	r1, r5, #1
    5a8c:	4a90      	ldr	r2, [pc, #576]	; (5cd0 <tcp_slowtmr+0x29c>)
    5a8e:	440a      	add	r2, r1
    5a90:	7c12      	ldrb	r2, [r2, #16]
    5a92:	4293      	cmp	r3, r2
    5a94:	d355      	bcc.n	5b42 <tcp_slowtmr+0x10e>
					pcb->persist_cnt = 0;
    5a96:	2300      	movs	r3, #0
    5a98:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
					if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
    5a9c:	2d06      	cmp	r5, #6
    5a9e:	d802      	bhi.n	5aa6 <tcp_slowtmr+0x72>
						pcb->persist_backoff++;
    5aa0:	3501      	adds	r5, #1
    5aa2:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
					tcp_zero_window_probe(pcb);
    5aa6:	4620      	mov	r0, r4
    5aa8:	4b8a      	ldr	r3, [pc, #552]	; (5cd4 <tcp_slowtmr+0x2a0>)
    5aaa:	4798      	blx	r3
		pcb_remove = 0;
    5aac:	2500      	movs	r5, #0
    5aae:	e03b      	b.n	5b28 <tcp_slowtmr+0xf4>
		if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    5ab0:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    5ab4:	2a06      	cmp	r2, #6
    5ab6:	d1db      	bne.n	5a70 <tcp_slowtmr+0x3c>
			++pcb_remove;
    5ab8:	2501      	movs	r5, #1
    5aba:	e035      	b.n	5b28 <tcp_slowtmr+0xf4>
				if (pcb->rtime >= 0) {
    5abc:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    5ac0:	2900      	cmp	r1, #0
    5ac2:	db01      	blt.n	5ac8 <tcp_slowtmr+0x94>
					++pcb->rtime;
    5ac4:	3101      	adds	r1, #1
    5ac6:	86a1      	strh	r1, [r4, #52]	; 0x34
				if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
    5ac8:	6f21      	ldr	r1, [r4, #112]	; 0x70
    5aca:	b369      	cbz	r1, 5b28 <tcp_slowtmr+0xf4>
    5acc:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
    5ad0:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    5ad4:	4288      	cmp	r0, r1
    5ad6:	db27      	blt.n	5b28 <tcp_slowtmr+0xf4>
					if (pcb->state != SYN_SENT) {
    5ad8:	2b02      	cmp	r3, #2
    5ada:	d00b      	beq.n	5af4 <tcp_slowtmr+0xc0>
						pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
    5adc:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    5ae0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
    5ae4:	eb03 03e1 	add.w	r3, r3, r1, asr #3
    5ae8:	4979      	ldr	r1, [pc, #484]	; (5cd0 <tcp_slowtmr+0x29c>)
    5aea:	440a      	add	r2, r1
    5aec:	7e12      	ldrb	r2, [r2, #24]
    5aee:	4093      	lsls	r3, r2
    5af0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
					pcb->rtime = 0;
    5af4:	2300      	movs	r3, #0
    5af6:	86a3      	strh	r3, [r4, #52]	; 0x34
					eff_wnd       = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
    5af8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    5afc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    5b00:	4293      	cmp	r3, r2
    5b02:	bf28      	it	cs
    5b04:	4613      	movcs	r3, r2
					pcb->ssthresh = eff_wnd >> 1;
    5b06:	085b      	lsrs	r3, r3, #1
    5b08:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
					if (pcb->ssthresh < (pcb->mss << 1)) {
    5b0c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    5b0e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    5b12:	da02      	bge.n	5b1a <tcp_slowtmr+0xe6>
						pcb->ssthresh = (pcb->mss << 1);
    5b14:	0053      	lsls	r3, r2, #1
    5b16:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
					pcb->cwnd = pcb->mss;
    5b1a:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
					tcp_rexmit_rto(pcb);
    5b1e:	4620      	mov	r0, r4
    5b20:	4b6d      	ldr	r3, [pc, #436]	; (5cd8 <tcp_slowtmr+0x2a4>)
    5b22:	4798      	blx	r3
    5b24:	e000      	b.n	5b28 <tcp_slowtmr+0xf4>
			++pcb_remove;
    5b26:	2501      	movs	r5, #1
		if (pcb->state == FIN_WAIT_2) {
    5b28:	7e23      	ldrb	r3, [r4, #24]
    5b2a:	2b06      	cmp	r3, #6
    5b2c:	d00b      	beq.n	5b46 <tcp_slowtmr+0x112>
		if (ip_get_option(pcb, SOF_KEEPALIVE) && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
    5b2e:	7a22      	ldrb	r2, [r4, #8]
    5b30:	f012 0f08 	tst.w	r2, #8
    5b34:	d03f      	beq.n	5bb6 <tcp_slowtmr+0x182>
    5b36:	2b04      	cmp	r3, #4
    5b38:	d012      	beq.n	5b60 <tcp_slowtmr+0x12c>
    5b3a:	2b07      	cmp	r3, #7
    5b3c:	d010      	beq.n	5b60 <tcp_slowtmr+0x12c>
		pcb_reset  = 0;
    5b3e:	2700      	movs	r7, #0
    5b40:	e03a      	b.n	5bb8 <tcp_slowtmr+0x184>
		pcb_remove = 0;
    5b42:	2500      	movs	r5, #0
    5b44:	e7f0      	b.n	5b28 <tcp_slowtmr+0xf4>
			if (pcb->flags & TF_RXCLOSED) {
    5b46:	7fa2      	ldrb	r2, [r4, #30]
    5b48:	f012 0f10 	tst.w	r2, #16
    5b4c:	d0ef      	beq.n	5b2e <tcp_slowtmr+0xfa>
				if ((u32_t)(tcp_ticks - pcb->tmr) > TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
    5b4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5b50:	4a5c      	ldr	r2, [pc, #368]	; (5cc4 <tcp_slowtmr+0x290>)
    5b52:	6812      	ldr	r2, [r2, #0]
    5b54:	1a52      	subs	r2, r2, r1
    5b56:	2a28      	cmp	r2, #40	; 0x28
    5b58:	d9e9      	bls.n	5b2e <tcp_slowtmr+0xfa>
					++pcb_remove;
    5b5a:	3501      	adds	r5, #1
    5b5c:	b2ed      	uxtb	r5, r5
    5b5e:	e7e6      	b.n	5b2e <tcp_slowtmr+0xfa>
			if ((u32_t)(tcp_ticks - pcb->tmr) > (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
    5b60:	4b58      	ldr	r3, [pc, #352]	; (5cc4 <tcp_slowtmr+0x290>)
    5b62:	681a      	ldr	r2, [r3, #0]
    5b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5b66:	1ad2      	subs	r2, r2, r3
    5b68:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    5b6c:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
    5b70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
    5b74:	4859      	ldr	r0, [pc, #356]	; (5cdc <tcp_slowtmr+0x2a8>)
    5b76:	fba0 0303 	umull	r0, r3, r0, r3
    5b7a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    5b7e:	d903      	bls.n	5b88 <tcp_slowtmr+0x154>
				++pcb_remove;
    5b80:	3501      	adds	r5, #1
    5b82:	b2ed      	uxtb	r5, r5
				++pcb_reset;
    5b84:	2701      	movs	r7, #1
    5b86:	e017      	b.n	5bb8 <tcp_slowtmr+0x184>
			           > (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb)) / TCP_SLOW_INTERVAL) {
    5b88:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    5b8c:	4854      	ldr	r0, [pc, #336]	; (5ce0 <tcp_slowtmr+0x2ac>)
    5b8e:	fb00 1303 	mla	r3, r0, r3, r1
    5b92:	4952      	ldr	r1, [pc, #328]	; (5cdc <tcp_slowtmr+0x2a8>)
    5b94:	fba1 1303 	umull	r1, r3, r1, r3
			} else if ((u32_t)(tcp_ticks - pcb->tmr)
    5b98:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    5b9c:	d801      	bhi.n	5ba2 <tcp_slowtmr+0x16e>
		pcb_reset  = 0;
    5b9e:	2700      	movs	r7, #0
    5ba0:	e00a      	b.n	5bb8 <tcp_slowtmr+0x184>
				tcp_keepalive(pcb);
    5ba2:	4620      	mov	r0, r4
    5ba4:	4b4f      	ldr	r3, [pc, #316]	; (5ce4 <tcp_slowtmr+0x2b0>)
    5ba6:	4798      	blx	r3
				pcb->keep_cnt_sent++;
    5ba8:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    5bac:	3301      	adds	r3, #1
    5bae:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		pcb_reset  = 0;
    5bb2:	2700      	movs	r7, #0
    5bb4:	e000      	b.n	5bb8 <tcp_slowtmr+0x184>
    5bb6:	2700      	movs	r7, #0
		if (pcb->ooseq != NULL && (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
    5bb8:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5bba:	b150      	cbz	r0, 5bd2 <tcp_slowtmr+0x19e>
    5bbc:	4b41      	ldr	r3, [pc, #260]	; (5cc4 <tcp_slowtmr+0x290>)
    5bbe:	681a      	ldr	r2, [r3, #0]
    5bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5bc2:	1ad2      	subs	r2, r2, r3
    5bc4:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    5bc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5bcc:	0059      	lsls	r1, r3, #1
    5bce:	428a      	cmp	r2, r1
    5bd0:	d224      	bcs.n	5c1c <tcp_slowtmr+0x1e8>
		if (pcb->state == SYN_RCVD) {
    5bd2:	7e23      	ldrb	r3, [r4, #24]
    5bd4:	2b03      	cmp	r3, #3
    5bd6:	d026      	beq.n	5c26 <tcp_slowtmr+0x1f2>
		if (pcb->state == LAST_ACK) {
    5bd8:	2b09      	cmp	r3, #9
    5bda:	d02d      	beq.n	5c38 <tcp_slowtmr+0x204>
		if (pcb_remove) {
    5bdc:	2d00      	cmp	r5, #0
    5bde:	d134      	bne.n	5c4a <tcp_slowtmr+0x216>
			pcb  = pcb->next;
    5be0:	68e5      	ldr	r5, [r4, #12]
			++prev->polltmr;
    5be2:	7fe3      	ldrb	r3, [r4, #31]
    5be4:	3301      	adds	r3, #1
    5be6:	b2db      	uxtb	r3, r3
    5be8:	77e3      	strb	r3, [r4, #31]
			if (prev->polltmr >= prev->pollinterval) {
    5bea:	f894 2020 	ldrb.w	r2, [r4, #32]
    5bee:	4293      	cmp	r3, r2
    5bf0:	d361      	bcc.n	5cb6 <tcp_slowtmr+0x282>
				prev->polltmr = 0;
    5bf2:	2300      	movs	r3, #0
    5bf4:	77e3      	strb	r3, [r4, #31]
				tcp_active_pcbs_changed = 0;
    5bf6:	4a3c      	ldr	r2, [pc, #240]	; (5ce8 <tcp_slowtmr+0x2b4>)
    5bf8:	7013      	strb	r3, [r2, #0]
				TCP_EVENT_POLL(prev, err);
    5bfa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d051      	beq.n	5ca6 <tcp_slowtmr+0x272>
    5c02:	4621      	mov	r1, r4
    5c04:	6920      	ldr	r0, [r4, #16]
    5c06:	4798      	blx	r3
				if (tcp_active_pcbs_changed) {
    5c08:	4b37      	ldr	r3, [pc, #220]	; (5ce8 <tcp_slowtmr+0x2b4>)
    5c0a:	781b      	ldrb	r3, [r3, #0]
    5c0c:	2b00      	cmp	r3, #0
    5c0e:	f47f af1c 	bne.w	5a4a <tcp_slowtmr+0x16>
				if (err == ERR_OK) {
    5c12:	2800      	cmp	r0, #0
    5c14:	d049      	beq.n	5caa <tcp_slowtmr+0x276>
			prev = pcb;
    5c16:	4626      	mov	r6, r4
			pcb  = pcb->next;
    5c18:	462c      	mov	r4, r5
    5c1a:	e71b      	b.n	5a54 <tcp_slowtmr+0x20>
			tcp_segs_free(pcb->ooseq);
    5c1c:	4b33      	ldr	r3, [pc, #204]	; (5cec <tcp_slowtmr+0x2b8>)
    5c1e:	4798      	blx	r3
			pcb->ooseq = NULL;
    5c20:	2300      	movs	r3, #0
    5c22:	6763      	str	r3, [r4, #116]	; 0x74
    5c24:	e7d5      	b.n	5bd2 <tcp_slowtmr+0x19e>
			if ((u32_t)(tcp_ticks - pcb->tmr) > TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
    5c26:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5c28:	4a26      	ldr	r2, [pc, #152]	; (5cc4 <tcp_slowtmr+0x290>)
    5c2a:	6812      	ldr	r2, [r2, #0]
    5c2c:	1a52      	subs	r2, r2, r1
    5c2e:	2a28      	cmp	r2, #40	; 0x28
    5c30:	d9d2      	bls.n	5bd8 <tcp_slowtmr+0x1a4>
				++pcb_remove;
    5c32:	3501      	adds	r5, #1
    5c34:	b2ed      	uxtb	r5, r5
    5c36:	e7cf      	b.n	5bd8 <tcp_slowtmr+0x1a4>
			if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    5c38:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5c3a:	4b22      	ldr	r3, [pc, #136]	; (5cc4 <tcp_slowtmr+0x290>)
    5c3c:	681b      	ldr	r3, [r3, #0]
    5c3e:	1a9b      	subs	r3, r3, r2
    5c40:	2bf0      	cmp	r3, #240	; 0xf0
    5c42:	d9cb      	bls.n	5bdc <tcp_slowtmr+0x1a8>
				++pcb_remove;
    5c44:	3501      	adds	r5, #1
    5c46:	b2ed      	uxtb	r5, r5
    5c48:	e7c8      	b.n	5bdc <tcp_slowtmr+0x1a8>
			tcp_pcb_purge(pcb);
    5c4a:	4620      	mov	r0, r4
    5c4c:	4b28      	ldr	r3, [pc, #160]	; (5cf0 <tcp_slowtmr+0x2bc>)
    5c4e:	4798      	blx	r3
			if (prev != NULL) {
    5c50:	b1d6      	cbz	r6, 5c88 <tcp_slowtmr+0x254>
				prev->next = pcb->next;
    5c52:	68e3      	ldr	r3, [r4, #12]
    5c54:	60f3      	str	r3, [r6, #12]
			if (pcb_reset) {
    5c56:	b9df      	cbnz	r7, 5c90 <tcp_slowtmr+0x25c>
			err_fn  = pcb->errf;
    5c58:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
			err_arg = pcb->callback_arg;
    5c5c:	f8d4 8010 	ldr.w	r8, [r4, #16]
			pcb     = pcb->next;
    5c60:	68e7      	ldr	r7, [r4, #12]
			memp_free(MEMP_TCP_PCB, pcb2);
    5c62:	4621      	mov	r1, r4
    5c64:	2001      	movs	r0, #1
    5c66:	4b23      	ldr	r3, [pc, #140]	; (5cf4 <tcp_slowtmr+0x2c0>)
    5c68:	4798      	blx	r3
			tcp_active_pcbs_changed = 0;
    5c6a:	2200      	movs	r2, #0
    5c6c:	4b1e      	ldr	r3, [pc, #120]	; (5ce8 <tcp_slowtmr+0x2b4>)
    5c6e:	701a      	strb	r2, [r3, #0]
			TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
    5c70:	b11d      	cbz	r5, 5c7a <tcp_slowtmr+0x246>
    5c72:	f06f 0109 	mvn.w	r1, #9
    5c76:	4640      	mov	r0, r8
    5c78:	47a8      	blx	r5
			if (tcp_active_pcbs_changed) {
    5c7a:	4b1b      	ldr	r3, [pc, #108]	; (5ce8 <tcp_slowtmr+0x2b4>)
    5c7c:	781b      	ldrb	r3, [r3, #0]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	f47f aee3 	bne.w	5a4a <tcp_slowtmr+0x16>
			pcb     = pcb->next;
    5c84:	463c      	mov	r4, r7
    5c86:	e6e5      	b.n	5a54 <tcp_slowtmr+0x20>
				tcp_active_pcbs = pcb->next;
    5c88:	68e2      	ldr	r2, [r4, #12]
    5c8a:	4b10      	ldr	r3, [pc, #64]	; (5ccc <tcp_slowtmr+0x298>)
    5c8c:	601a      	str	r2, [r3, #0]
    5c8e:	e7e2      	b.n	5c56 <tcp_slowtmr+0x222>
				tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    5c90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5c92:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5c94:	8ba3      	ldrh	r3, [r4, #28]
    5c96:	9301      	str	r3, [sp, #4]
    5c98:	8b63      	ldrh	r3, [r4, #26]
    5c9a:	9300      	str	r3, [sp, #0]
    5c9c:	1d23      	adds	r3, r4, #4
    5c9e:	4622      	mov	r2, r4
    5ca0:	4d15      	ldr	r5, [pc, #84]	; (5cf8 <tcp_slowtmr+0x2c4>)
    5ca2:	47a8      	blx	r5
    5ca4:	e7d8      	b.n	5c58 <tcp_slowtmr+0x224>
				TCP_EVENT_POLL(prev, err);
    5ca6:	2000      	movs	r0, #0
    5ca8:	e7ae      	b.n	5c08 <tcp_slowtmr+0x1d4>
					tcp_output(prev);
    5caa:	4620      	mov	r0, r4
    5cac:	4b13      	ldr	r3, [pc, #76]	; (5cfc <tcp_slowtmr+0x2c8>)
    5cae:	4798      	blx	r3
			prev = pcb;
    5cb0:	4626      	mov	r6, r4
			pcb  = pcb->next;
    5cb2:	462c      	mov	r4, r5
    5cb4:	e6ce      	b.n	5a54 <tcp_slowtmr+0x20>
			prev = pcb;
    5cb6:	4626      	mov	r6, r4
			pcb  = pcb->next;
    5cb8:	462c      	mov	r4, r5
    5cba:	e6cb      	b.n	5a54 <tcp_slowtmr+0x20>
	pcb  = tcp_tw_pcbs;
    5cbc:	4b10      	ldr	r3, [pc, #64]	; (5d00 <tcp_slowtmr+0x2cc>)
    5cbe:	681d      	ldr	r5, [r3, #0]
	while (pcb != NULL) {
    5cc0:	e024      	b.n	5d0c <tcp_slowtmr+0x2d8>
    5cc2:	bf00      	nop
    5cc4:	200161d8 	.word	0x200161d8
    5cc8:	200080a1 	.word	0x200080a1
    5ccc:	200161d4 	.word	0x200161d4
    5cd0:	0000d430 	.word	0x0000d430
    5cd4:	000082c1 	.word	0x000082c1
    5cd8:	00008169 	.word	0x00008169
    5cdc:	10624dd3 	.word	0x10624dd3
    5ce0:	000124f8 	.word	0x000124f8
    5ce4:	00008255 	.word	0x00008255
    5ce8:	200161d0 	.word	0x200161d0
    5cec:	00005981 	.word	0x00005981
    5cf0:	000059ed 	.word	0x000059ed
    5cf4:	000051fd 	.word	0x000051fd
    5cf8:	000080c5 	.word	0x000080c5
    5cfc:	00007ee9 	.word	0x00007ee9
    5d00:	200161e8 	.word	0x200161e8
			++pcb_remove;
    5d04:	2301      	movs	r3, #1
		if (pcb_remove) {
    5d06:	b953      	cbnz	r3, 5d1e <tcp_slowtmr+0x2ea>
			prev = pcb;
    5d08:	462c      	mov	r4, r5
			pcb  = pcb->next;
    5d0a:	68ed      	ldr	r5, [r5, #12]
	while (pcb != NULL) {
    5d0c:	b1c5      	cbz	r5, 5d40 <tcp_slowtmr+0x30c>
		if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    5d0e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5d10:	4b0d      	ldr	r3, [pc, #52]	; (5d48 <tcp_slowtmr+0x314>)
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	1a9b      	subs	r3, r3, r2
    5d16:	2bf0      	cmp	r3, #240	; 0xf0
    5d18:	d8f4      	bhi.n	5d04 <tcp_slowtmr+0x2d0>
		pcb_remove = 0;
    5d1a:	2300      	movs	r3, #0
    5d1c:	e7f3      	b.n	5d06 <tcp_slowtmr+0x2d2>
			tcp_pcb_purge(pcb);
    5d1e:	4628      	mov	r0, r5
    5d20:	4b0a      	ldr	r3, [pc, #40]	; (5d4c <tcp_slowtmr+0x318>)
    5d22:	4798      	blx	r3
			if (prev != NULL) {
    5d24:	b144      	cbz	r4, 5d38 <tcp_slowtmr+0x304>
				prev->next = pcb->next;
    5d26:	68eb      	ldr	r3, [r5, #12]
    5d28:	60e3      	str	r3, [r4, #12]
			pcb  = pcb->next;
    5d2a:	68ee      	ldr	r6, [r5, #12]
			memp_free(MEMP_TCP_PCB, pcb2);
    5d2c:	4629      	mov	r1, r5
    5d2e:	2001      	movs	r0, #1
    5d30:	4b07      	ldr	r3, [pc, #28]	; (5d50 <tcp_slowtmr+0x31c>)
    5d32:	4798      	blx	r3
			pcb  = pcb->next;
    5d34:	4635      	mov	r5, r6
    5d36:	e7e9      	b.n	5d0c <tcp_slowtmr+0x2d8>
				tcp_tw_pcbs = pcb->next;
    5d38:	68ea      	ldr	r2, [r5, #12]
    5d3a:	4b06      	ldr	r3, [pc, #24]	; (5d54 <tcp_slowtmr+0x320>)
    5d3c:	601a      	str	r2, [r3, #0]
    5d3e:	e7f4      	b.n	5d2a <tcp_slowtmr+0x2f6>
}
    5d40:	b002      	add	sp, #8
    5d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d46:	bf00      	nop
    5d48:	200161d8 	.word	0x200161d8
    5d4c:	000059ed 	.word	0x000059ed
    5d50:	000051fd 	.word	0x000051fd
    5d54:	200161e8 	.word	0x200161e8

00005d58 <tcp_pcb_remove>:
 *
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
    5d58:	b510      	push	{r4, lr}
    5d5a:	460c      	mov	r4, r1
	TCP_RMV(pcblist, pcb);
    5d5c:	6803      	ldr	r3, [r0, #0]
    5d5e:	428b      	cmp	r3, r1
    5d60:	d00a      	beq.n	5d78 <tcp_pcb_remove+0x20>
    5d62:	4a14      	ldr	r2, [pc, #80]	; (5db4 <tcp_pcb_remove+0x5c>)
    5d64:	6013      	str	r3, [r2, #0]
    5d66:	4b13      	ldr	r3, [pc, #76]	; (5db4 <tcp_pcb_remove+0x5c>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	b153      	cbz	r3, 5d82 <tcp_pcb_remove+0x2a>
    5d6c:	68da      	ldr	r2, [r3, #12]
    5d6e:	4294      	cmp	r4, r2
    5d70:	d005      	beq.n	5d7e <tcp_pcb_remove+0x26>
    5d72:	4b10      	ldr	r3, [pc, #64]	; (5db4 <tcp_pcb_remove+0x5c>)
    5d74:	601a      	str	r2, [r3, #0]
    5d76:	e7f6      	b.n	5d66 <tcp_pcb_remove+0xe>
    5d78:	68db      	ldr	r3, [r3, #12]
    5d7a:	6003      	str	r3, [r0, #0]
    5d7c:	e001      	b.n	5d82 <tcp_pcb_remove+0x2a>
    5d7e:	68e2      	ldr	r2, [r4, #12]
    5d80:	60da      	str	r2, [r3, #12]
    5d82:	2300      	movs	r3, #0
    5d84:	60e3      	str	r3, [r4, #12]

	tcp_pcb_purge(pcb);
    5d86:	4620      	mov	r0, r4
    5d88:	4b0b      	ldr	r3, [pc, #44]	; (5db8 <tcp_pcb_remove+0x60>)
    5d8a:	4798      	blx	r3

	/* if there is an outstanding delayed ACKs, send it */
	if (pcb->state != TIME_WAIT && pcb->state != LISTEN && pcb->flags & TF_ACK_DELAY) {
    5d8c:	7e23      	ldrb	r3, [r4, #24]
    5d8e:	2b0a      	cmp	r3, #10
    5d90:	d005      	beq.n	5d9e <tcp_pcb_remove+0x46>
    5d92:	2b01      	cmp	r3, #1
    5d94:	d003      	beq.n	5d9e <tcp_pcb_remove+0x46>
    5d96:	7fa3      	ldrb	r3, [r4, #30]
    5d98:	f013 0f01 	tst.w	r3, #1
    5d9c:	d102      	bne.n	5da4 <tcp_pcb_remove+0x4c>
#if TCP_QUEUE_OOSEQ
		LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
	}

	pcb->state = CLOSED;
    5d9e:	2300      	movs	r3, #0
    5da0:	7623      	strb	r3, [r4, #24]
    5da2:	bd10      	pop	{r4, pc}
		pcb->flags |= TF_ACK_NOW;
    5da4:	f043 0302 	orr.w	r3, r3, #2
    5da8:	77a3      	strb	r3, [r4, #30]
		tcp_output(pcb);
    5daa:	4620      	mov	r0, r4
    5dac:	4b03      	ldr	r3, [pc, #12]	; (5dbc <tcp_pcb_remove+0x64>)
    5dae:	4798      	blx	r3
    5db0:	e7f5      	b.n	5d9e <tcp_pcb_remove+0x46>
    5db2:	bf00      	nop
    5db4:	200161e0 	.word	0x200161e0
    5db8:	000059ed 	.word	0x000059ed
    5dbc:	00007ee9 	.word	0x00007ee9

00005dc0 <tcp_close_shutdown>:
{
    5dc0:	b530      	push	{r4, r5, lr}
    5dc2:	b083      	sub	sp, #12
    5dc4:	4604      	mov	r4, r0
	if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
    5dc6:	b121      	cbz	r1, 5dd2 <tcp_close_shutdown+0x12>
    5dc8:	7e03      	ldrb	r3, [r0, #24]
    5dca:	2b04      	cmp	r3, #4
    5dcc:	d00b      	beq.n	5de6 <tcp_close_shutdown+0x26>
    5dce:	2b07      	cmp	r3, #7
    5dd0:	d009      	beq.n	5de6 <tcp_close_shutdown+0x26>
	switch (pcb->state) {
    5dd2:	7e23      	ldrb	r3, [r4, #24]
    5dd4:	2b07      	cmp	r3, #7
    5dd6:	f200 80a0 	bhi.w	5f1a <tcp_close_shutdown+0x15a>
    5dda:	e8df f003 	tbb	[pc, r3]
    5dde:	6b46      	.short	0x6b46
    5de0:	9e8c8376 	.word	0x9e8c8376
    5de4:	959e      	.short	0x959e
		if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    5de6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    5de8:	b1db      	cbz	r3, 5e22 <tcp_close_shutdown+0x62>
			tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    5dea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5dec:	6d20      	ldr	r0, [r4, #80]	; 0x50
    5dee:	8ba3      	ldrh	r3, [r4, #28]
    5df0:	9301      	str	r3, [sp, #4]
    5df2:	8b63      	ldrh	r3, [r4, #26]
    5df4:	9300      	str	r3, [sp, #0]
    5df6:	1d23      	adds	r3, r4, #4
    5df8:	4622      	mov	r2, r4
    5dfa:	4d4b      	ldr	r5, [pc, #300]	; (5f28 <tcp_close_shutdown+0x168>)
    5dfc:	47a8      	blx	r5
			tcp_pcb_purge(pcb);
    5dfe:	4620      	mov	r0, r4
    5e00:	4b4a      	ldr	r3, [pc, #296]	; (5f2c <tcp_close_shutdown+0x16c>)
    5e02:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    5e04:	4b4a      	ldr	r3, [pc, #296]	; (5f30 <tcp_close_shutdown+0x170>)
    5e06:	681b      	ldr	r3, [r3, #0]
    5e08:	429c      	cmp	r4, r3
    5e0a:	d010      	beq.n	5e2e <tcp_close_shutdown+0x6e>
    5e0c:	4a49      	ldr	r2, [pc, #292]	; (5f34 <tcp_close_shutdown+0x174>)
    5e0e:	6013      	str	r3, [r2, #0]
    5e10:	4b48      	ldr	r3, [pc, #288]	; (5f34 <tcp_close_shutdown+0x174>)
    5e12:	681b      	ldr	r3, [r3, #0]
    5e14:	b18b      	cbz	r3, 5e3a <tcp_close_shutdown+0x7a>
    5e16:	68da      	ldr	r2, [r3, #12]
    5e18:	4294      	cmp	r4, r2
    5e1a:	d00c      	beq.n	5e36 <tcp_close_shutdown+0x76>
    5e1c:	4b45      	ldr	r3, [pc, #276]	; (5f34 <tcp_close_shutdown+0x174>)
    5e1e:	601a      	str	r2, [r3, #0]
    5e20:	e7f6      	b.n	5e10 <tcp_close_shutdown+0x50>
		if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    5e22:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    5e24:	f241 63d0 	movw	r3, #5840	; 0x16d0
    5e28:	429a      	cmp	r2, r3
    5e2a:	d1de      	bne.n	5dea <tcp_close_shutdown+0x2a>
    5e2c:	e7d1      	b.n	5dd2 <tcp_close_shutdown+0x12>
			TCP_RMV_ACTIVE(pcb);
    5e2e:	68da      	ldr	r2, [r3, #12]
    5e30:	4b3f      	ldr	r3, [pc, #252]	; (5f30 <tcp_close_shutdown+0x170>)
    5e32:	601a      	str	r2, [r3, #0]
    5e34:	e001      	b.n	5e3a <tcp_close_shutdown+0x7a>
    5e36:	68e2      	ldr	r2, [r4, #12]
    5e38:	60da      	str	r2, [r3, #12]
    5e3a:	2300      	movs	r3, #0
    5e3c:	60e3      	str	r3, [r4, #12]
    5e3e:	2201      	movs	r2, #1
    5e40:	4b3d      	ldr	r3, [pc, #244]	; (5f38 <tcp_close_shutdown+0x178>)
    5e42:	701a      	strb	r2, [r3, #0]
			if (pcb->state == ESTABLISHED) {
    5e44:	7e23      	ldrb	r3, [r4, #24]
    5e46:	2b04      	cmp	r3, #4
    5e48:	d005      	beq.n	5e56 <tcp_close_shutdown+0x96>
				memp_free(MEMP_TCP_PCB, pcb);
    5e4a:	4621      	mov	r1, r4
    5e4c:	2001      	movs	r0, #1
    5e4e:	4b3b      	ldr	r3, [pc, #236]	; (5f3c <tcp_close_shutdown+0x17c>)
    5e50:	4798      	blx	r3
			return ERR_OK;
    5e52:	2500      	movs	r5, #0
    5e54:	e02b      	b.n	5eae <tcp_close_shutdown+0xee>
				pcb->state = TIME_WAIT;
    5e56:	230a      	movs	r3, #10
    5e58:	7623      	strb	r3, [r4, #24]
				TCP_REG(&tcp_tw_pcbs, pcb);
    5e5a:	4b39      	ldr	r3, [pc, #228]	; (5f40 <tcp_close_shutdown+0x180>)
    5e5c:	681a      	ldr	r2, [r3, #0]
    5e5e:	60e2      	str	r2, [r4, #12]
    5e60:	601c      	str	r4, [r3, #0]
    5e62:	4b38      	ldr	r3, [pc, #224]	; (5f44 <tcp_close_shutdown+0x184>)
    5e64:	4798      	blx	r3
			return ERR_OK;
    5e66:	2500      	movs	r5, #0
    5e68:	e021      	b.n	5eae <tcp_close_shutdown+0xee>
		if (pcb->local_port != 0) {
    5e6a:	8b63      	ldrh	r3, [r4, #26]
    5e6c:	b1b3      	cbz	r3, 5e9c <tcp_close_shutdown+0xdc>
			TCP_RMV(&tcp_bound_pcbs, pcb);
    5e6e:	4b36      	ldr	r3, [pc, #216]	; (5f48 <tcp_close_shutdown+0x188>)
    5e70:	681b      	ldr	r3, [r3, #0]
    5e72:	429c      	cmp	r4, r3
    5e74:	d00a      	beq.n	5e8c <tcp_close_shutdown+0xcc>
    5e76:	4a2f      	ldr	r2, [pc, #188]	; (5f34 <tcp_close_shutdown+0x174>)
    5e78:	6013      	str	r3, [r2, #0]
    5e7a:	4b2e      	ldr	r3, [pc, #184]	; (5f34 <tcp_close_shutdown+0x174>)
    5e7c:	681b      	ldr	r3, [r3, #0]
    5e7e:	b15b      	cbz	r3, 5e98 <tcp_close_shutdown+0xd8>
    5e80:	68da      	ldr	r2, [r3, #12]
    5e82:	4294      	cmp	r4, r2
    5e84:	d006      	beq.n	5e94 <tcp_close_shutdown+0xd4>
    5e86:	4b2b      	ldr	r3, [pc, #172]	; (5f34 <tcp_close_shutdown+0x174>)
    5e88:	601a      	str	r2, [r3, #0]
    5e8a:	e7f6      	b.n	5e7a <tcp_close_shutdown+0xba>
    5e8c:	68da      	ldr	r2, [r3, #12]
    5e8e:	4b2e      	ldr	r3, [pc, #184]	; (5f48 <tcp_close_shutdown+0x188>)
    5e90:	601a      	str	r2, [r3, #0]
    5e92:	e001      	b.n	5e98 <tcp_close_shutdown+0xd8>
    5e94:	68e2      	ldr	r2, [r4, #12]
    5e96:	60da      	str	r2, [r3, #12]
    5e98:	2300      	movs	r3, #0
    5e9a:	60e3      	str	r3, [r4, #12]
		memp_free(MEMP_TCP_PCB, pcb);
    5e9c:	4621      	mov	r1, r4
    5e9e:	2001      	movs	r0, #1
    5ea0:	4b26      	ldr	r3, [pc, #152]	; (5f3c <tcp_close_shutdown+0x17c>)
    5ea2:	4798      	blx	r3
		err = ERR_OK;
    5ea4:	2400      	movs	r4, #0
		pcb = NULL;
    5ea6:	4625      	mov	r5, r4
	if (pcb != NULL && err == ERR_OK) {
    5ea8:	b10c      	cbz	r4, 5eae <tcp_close_shutdown+0xee>
    5eaa:	2d00      	cmp	r5, #0
    5eac:	d038      	beq.n	5f20 <tcp_close_shutdown+0x160>
}
    5eae:	4628      	mov	r0, r5
    5eb0:	b003      	add	sp, #12
    5eb2:	bd30      	pop	{r4, r5, pc}
		tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    5eb4:	4621      	mov	r1, r4
    5eb6:	4825      	ldr	r0, [pc, #148]	; (5f4c <tcp_close_shutdown+0x18c>)
    5eb8:	4b25      	ldr	r3, [pc, #148]	; (5f50 <tcp_close_shutdown+0x190>)
    5eba:	4798      	blx	r3
		memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    5ebc:	4621      	mov	r1, r4
    5ebe:	2002      	movs	r0, #2
    5ec0:	4b1e      	ldr	r3, [pc, #120]	; (5f3c <tcp_close_shutdown+0x17c>)
    5ec2:	4798      	blx	r3
		err = ERR_OK;
    5ec4:	2400      	movs	r4, #0
		pcb = NULL;
    5ec6:	4625      	mov	r5, r4
		break;
    5ec8:	e7ee      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		TCP_PCB_REMOVE_ACTIVE(pcb);
    5eca:	4621      	mov	r1, r4
    5ecc:	4818      	ldr	r0, [pc, #96]	; (5f30 <tcp_close_shutdown+0x170>)
    5ece:	4b20      	ldr	r3, [pc, #128]	; (5f50 <tcp_close_shutdown+0x190>)
    5ed0:	4798      	blx	r3
    5ed2:	2001      	movs	r0, #1
    5ed4:	4b18      	ldr	r3, [pc, #96]	; (5f38 <tcp_close_shutdown+0x178>)
    5ed6:	7018      	strb	r0, [r3, #0]
		memp_free(MEMP_TCP_PCB, pcb);
    5ed8:	4621      	mov	r1, r4
    5eda:	4b18      	ldr	r3, [pc, #96]	; (5f3c <tcp_close_shutdown+0x17c>)
    5edc:	4798      	blx	r3
		err = ERR_OK;
    5ede:	2400      	movs	r4, #0
		pcb = NULL;
    5ee0:	4625      	mov	r5, r4
		break;
    5ee2:	e7e1      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    5ee4:	4620      	mov	r0, r4
    5ee6:	4b1b      	ldr	r3, [pc, #108]	; (5f54 <tcp_close_shutdown+0x194>)
    5ee8:	4798      	blx	r3
		if (err == ERR_OK) {
    5eea:	4605      	mov	r5, r0
    5eec:	2800      	cmp	r0, #0
    5eee:	d1db      	bne.n	5ea8 <tcp_close_shutdown+0xe8>
			pcb->state = FIN_WAIT_1;
    5ef0:	2305      	movs	r3, #5
    5ef2:	7623      	strb	r3, [r4, #24]
    5ef4:	e7d8      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    5ef6:	4620      	mov	r0, r4
    5ef8:	4b16      	ldr	r3, [pc, #88]	; (5f54 <tcp_close_shutdown+0x194>)
    5efa:	4798      	blx	r3
		if (err == ERR_OK) {
    5efc:	4605      	mov	r5, r0
    5efe:	2800      	cmp	r0, #0
    5f00:	d1d2      	bne.n	5ea8 <tcp_close_shutdown+0xe8>
			pcb->state = FIN_WAIT_1;
    5f02:	2305      	movs	r3, #5
    5f04:	7623      	strb	r3, [r4, #24]
    5f06:	e7cf      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    5f08:	4620      	mov	r0, r4
    5f0a:	4b12      	ldr	r3, [pc, #72]	; (5f54 <tcp_close_shutdown+0x194>)
    5f0c:	4798      	blx	r3
		if (err == ERR_OK) {
    5f0e:	4605      	mov	r5, r0
    5f10:	2800      	cmp	r0, #0
    5f12:	d1c9      	bne.n	5ea8 <tcp_close_shutdown+0xe8>
			pcb->state = LAST_ACK;
    5f14:	2309      	movs	r3, #9
    5f16:	7623      	strb	r3, [r4, #24]
    5f18:	e7c6      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		err = ERR_OK;
    5f1a:	2500      	movs	r5, #0
		pcb = NULL;
    5f1c:	462c      	mov	r4, r5
    5f1e:	e7c3      	b.n	5ea8 <tcp_close_shutdown+0xe8>
		tcp_output(pcb);
    5f20:	4620      	mov	r0, r4
    5f22:	4b0d      	ldr	r3, [pc, #52]	; (5f58 <tcp_close_shutdown+0x198>)
    5f24:	4798      	blx	r3
    5f26:	e7c2      	b.n	5eae <tcp_close_shutdown+0xee>
    5f28:	000080c5 	.word	0x000080c5
    5f2c:	000059ed 	.word	0x000059ed
    5f30:	200161d4 	.word	0x200161d4
    5f34:	200161e0 	.word	0x200161e0
    5f38:	200161d0 	.word	0x200161d0
    5f3c:	000051fd 	.word	0x000051fd
    5f40:	200161e8 	.word	0x200161e8
    5f44:	000083fd 	.word	0x000083fd
    5f48:	200161e4 	.word	0x200161e4
    5f4c:	200161dc 	.word	0x200161dc
    5f50:	00005d59 	.word	0x00005d59
    5f54:	00007e21 	.word	0x00007e21
    5f58:	00007ee9 	.word	0x00007ee9

00005f5c <tcp_close>:
{
    5f5c:	b508      	push	{r3, lr}
	if (pcb->state != LISTEN) {
    5f5e:	7e03      	ldrb	r3, [r0, #24]
    5f60:	2b01      	cmp	r3, #1
    5f62:	d003      	beq.n	5f6c <tcp_close+0x10>
		pcb->flags |= TF_RXCLOSED;
    5f64:	7f83      	ldrb	r3, [r0, #30]
    5f66:	f043 0310 	orr.w	r3, r3, #16
    5f6a:	7783      	strb	r3, [r0, #30]
	return tcp_close_shutdown(pcb, 1);
    5f6c:	2101      	movs	r1, #1
    5f6e:	4b01      	ldr	r3, [pc, #4]	; (5f74 <tcp_close+0x18>)
    5f70:	4798      	blx	r3
}
    5f72:	bd08      	pop	{r3, pc}
    5f74:	00005dc1 	.word	0x00005dc1

00005f78 <tcp_recv_null>:
{
    5f78:	b510      	push	{r4, lr}
    5f7a:	4608      	mov	r0, r1
	if (p != NULL) {
    5f7c:	b142      	cbz	r2, 5f90 <tcp_recv_null+0x18>
    5f7e:	4614      	mov	r4, r2
		tcp_recved(pcb, p->tot_len);
    5f80:	8911      	ldrh	r1, [r2, #8]
    5f82:	4b06      	ldr	r3, [pc, #24]	; (5f9c <tcp_recv_null+0x24>)
    5f84:	4798      	blx	r3
		pbuf_free(p);
    5f86:	4620      	mov	r0, r4
    5f88:	4b05      	ldr	r3, [pc, #20]	; (5fa0 <tcp_recv_null+0x28>)
    5f8a:	4798      	blx	r3
	return ERR_OK;
    5f8c:	2000      	movs	r0, #0
    5f8e:	bd10      	pop	{r4, pc}
	} else if (err == ERR_OK) {
    5f90:	b10b      	cbz	r3, 5f96 <tcp_recv_null+0x1e>
	return ERR_OK;
    5f92:	2000      	movs	r0, #0
}
    5f94:	bd10      	pop	{r4, pc}
		return tcp_close(pcb);
    5f96:	4b03      	ldr	r3, [pc, #12]	; (5fa4 <tcp_recv_null+0x2c>)
    5f98:	4798      	blx	r3
    5f9a:	bd10      	pop	{r4, pc}
    5f9c:	0000591d 	.word	0x0000591d
    5fa0:	000054a1 	.word	0x000054a1
    5fa4:	00005f5d 	.word	0x00005f5d

00005fa8 <tcp_process_refused_data>:
{
    5fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5faa:	4604      	mov	r4, r0
	u8_t  refused_flags = pcb->refused_data->flags;
    5fac:	6f86      	ldr	r6, [r0, #120]	; 0x78
    5fae:	7b77      	ldrb	r7, [r6, #13]
	pcb->refused_data         = NULL;
    5fb0:	2300      	movs	r3, #0
    5fb2:	6783      	str	r3, [r0, #120]	; 0x78
	TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
    5fb4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    5fb8:	b1e5      	cbz	r5, 5ff4 <tcp_process_refused_data+0x4c>
    5fba:	4632      	mov	r2, r6
    5fbc:	4601      	mov	r1, r0
    5fbe:	6900      	ldr	r0, [r0, #16]
    5fc0:	47a8      	blx	r5
    5fc2:	4605      	mov	r5, r0
	if (err == ERR_OK) {
    5fc4:	bb05      	cbnz	r5, 6008 <tcp_process_refused_data+0x60>
		if (refused_flags & PBUF_FLAG_TCP_FIN) {
    5fc6:	f017 0f20 	tst.w	r7, #32
    5fca:	d022      	beq.n	6012 <tcp_process_refused_data+0x6a>
			if (pcb->rcv_wnd != TCP_WND) {
    5fcc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    5fce:	f241 62d0 	movw	r2, #5840	; 0x16d0
    5fd2:	4293      	cmp	r3, r2
    5fd4:	d001      	beq.n	5fda <tcp_process_refused_data+0x32>
				pcb->rcv_wnd++;
    5fd6:	3301      	adds	r3, #1
    5fd8:	85a3      	strh	r3, [r4, #44]	; 0x2c
			TCP_EVENT_CLOSED(pcb, err);
    5fda:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    5fde:	b18e      	cbz	r6, 6004 <tcp_process_refused_data+0x5c>
    5fe0:	2300      	movs	r3, #0
    5fe2:	461a      	mov	r2, r3
    5fe4:	4621      	mov	r1, r4
    5fe6:	6920      	ldr	r0, [r4, #16]
    5fe8:	47b0      	blx	r6
			if (err == ERR_ABRT) {
    5fea:	f110 0f0a 	cmn.w	r0, #10
    5fee:	d110      	bne.n	6012 <tcp_process_refused_data+0x6a>
				return ERR_ABRT;
    5ff0:	4605      	mov	r5, r0
    5ff2:	e00e      	b.n	6012 <tcp_process_refused_data+0x6a>
	TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
    5ff4:	2300      	movs	r3, #0
    5ff6:	4632      	mov	r2, r6
    5ff8:	4601      	mov	r1, r0
    5ffa:	4618      	mov	r0, r3
    5ffc:	4d06      	ldr	r5, [pc, #24]	; (6018 <tcp_process_refused_data+0x70>)
    5ffe:	47a8      	blx	r5
    6000:	4605      	mov	r5, r0
    6002:	e7df      	b.n	5fc4 <tcp_process_refused_data+0x1c>
			TCP_EVENT_CLOSED(pcb, err);
    6004:	4628      	mov	r0, r5
    6006:	e7f0      	b.n	5fea <tcp_process_refused_data+0x42>
	} else if (err == ERR_ABRT) {
    6008:	f115 0f0a 	cmn.w	r5, #10
    600c:	d001      	beq.n	6012 <tcp_process_refused_data+0x6a>
		pcb->refused_data = refused_data;
    600e:	67a6      	str	r6, [r4, #120]	; 0x78
	return ERR_OK;
    6010:	2500      	movs	r5, #0
}
    6012:	4628      	mov	r0, r5
    6014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6016:	bf00      	nop
    6018:	00005f79 	.word	0x00005f79

0000601c <tcp_fasttmr>:
{
    601c:	b570      	push	{r4, r5, r6, lr}
	++tcp_timer_ctr;
    601e:	4a16      	ldr	r2, [pc, #88]	; (6078 <tcp_fasttmr+0x5c>)
    6020:	7813      	ldrb	r3, [r2, #0]
    6022:	3301      	adds	r3, #1
    6024:	7013      	strb	r3, [r2, #0]
	pcb = tcp_active_pcbs;
    6026:	4b15      	ldr	r3, [pc, #84]	; (607c <tcp_fasttmr+0x60>)
    6028:	681c      	ldr	r4, [r3, #0]
	while (pcb != NULL) {
    602a:	b324      	cbz	r4, 6076 <tcp_fasttmr+0x5a>
		if (pcb->last_timer != tcp_timer_ctr) {
    602c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    6030:	4b11      	ldr	r3, [pc, #68]	; (6078 <tcp_fasttmr+0x5c>)
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	429a      	cmp	r2, r3
    6036:	d0f8      	beq.n	602a <tcp_fasttmr+0xe>
			pcb->last_timer = tcp_timer_ctr;
    6038:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
			if (pcb->flags & TF_ACK_DELAY) {
    603c:	7fa3      	ldrb	r3, [r4, #30]
    603e:	f013 0f01 	tst.w	r3, #1
    6042:	d10d      	bne.n	6060 <tcp_fasttmr+0x44>
			next = pcb->next;
    6044:	68e6      	ldr	r6, [r4, #12]
			if (pcb->refused_data != NULL) {
    6046:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    6048:	b143      	cbz	r3, 605c <tcp_fasttmr+0x40>
				tcp_active_pcbs_changed = 0;
    604a:	4d0d      	ldr	r5, [pc, #52]	; (6080 <tcp_fasttmr+0x64>)
    604c:	2300      	movs	r3, #0
    604e:	702b      	strb	r3, [r5, #0]
				tcp_process_refused_data(pcb);
    6050:	4620      	mov	r0, r4
    6052:	4b0c      	ldr	r3, [pc, #48]	; (6084 <tcp_fasttmr+0x68>)
    6054:	4798      	blx	r3
				if (tcp_active_pcbs_changed) {
    6056:	782b      	ldrb	r3, [r5, #0]
    6058:	2b00      	cmp	r3, #0
    605a:	d1e4      	bne.n	6026 <tcp_fasttmr+0xa>
{
    605c:	4634      	mov	r4, r6
    605e:	e7e4      	b.n	602a <tcp_fasttmr+0xe>
				tcp_ack_now(pcb);
    6060:	f043 0302 	orr.w	r3, r3, #2
    6064:	77a3      	strb	r3, [r4, #30]
				tcp_output(pcb);
    6066:	4620      	mov	r0, r4
    6068:	4b07      	ldr	r3, [pc, #28]	; (6088 <tcp_fasttmr+0x6c>)
    606a:	4798      	blx	r3
				pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    606c:	7fa3      	ldrb	r3, [r4, #30]
    606e:	f023 0303 	bic.w	r3, r3, #3
    6072:	77a3      	strb	r3, [r4, #30]
    6074:	e7e6      	b.n	6044 <tcp_fasttmr+0x28>
}
    6076:	bd70      	pop	{r4, r5, r6, pc}
    6078:	200080a1 	.word	0x200080a1
    607c:	200161d4 	.word	0x200161d4
    6080:	200161d0 	.word	0x200161d0
    6084:	00005fa9 	.word	0x00005fa9
    6088:	00007ee9 	.word	0x00007ee9

0000608c <tcp_tmr>:
{
    608c:	b508      	push	{r3, lr}
	tcp_fasttmr();
    608e:	4b07      	ldr	r3, [pc, #28]	; (60ac <tcp_tmr+0x20>)
    6090:	4798      	blx	r3
	if (++tcp_timer & 1) {
    6092:	4a07      	ldr	r2, [pc, #28]	; (60b0 <tcp_tmr+0x24>)
    6094:	7853      	ldrb	r3, [r2, #1]
    6096:	3301      	adds	r3, #1
    6098:	b2db      	uxtb	r3, r3
    609a:	7053      	strb	r3, [r2, #1]
    609c:	f013 0f01 	tst.w	r3, #1
    60a0:	d100      	bne.n	60a4 <tcp_tmr+0x18>
    60a2:	bd08      	pop	{r3, pc}
		tcp_slowtmr();
    60a4:	4b03      	ldr	r3, [pc, #12]	; (60b4 <tcp_tmr+0x28>)
    60a6:	4798      	blx	r3
}
    60a8:	e7fb      	b.n	60a2 <tcp_tmr+0x16>
    60aa:	bf00      	nop
    60ac:	0000601d 	.word	0x0000601d
    60b0:	200080a1 	.word	0x200080a1
    60b4:	00005a35 	.word	0x00005a35

000060b8 <tcp_shutdown>:
	if (pcb->state == LISTEN) {
    60b8:	7e03      	ldrb	r3, [r0, #24]
    60ba:	2b01      	cmp	r3, #1
    60bc:	d020      	beq.n	6100 <tcp_shutdown+0x48>
{
    60be:	b570      	push	{r4, r5, r6, lr}
    60c0:	4616      	mov	r6, r2
    60c2:	460d      	mov	r5, r1
    60c4:	4604      	mov	r4, r0
	if (shut_rx) {
    60c6:	b151      	cbz	r1, 60de <tcp_shutdown+0x26>
		pcb->flags |= TF_RXCLOSED;
    60c8:	7f83      	ldrb	r3, [r0, #30]
    60ca:	f043 0310 	orr.w	r3, r3, #16
    60ce:	7783      	strb	r3, [r0, #30]
		if (shut_tx) {
    60d0:	b992      	cbnz	r2, 60f8 <tcp_shutdown+0x40>
		if (pcb->refused_data != NULL) {
    60d2:	6f80      	ldr	r0, [r0, #120]	; 0x78
    60d4:	b118      	cbz	r0, 60de <tcp_shutdown+0x26>
			pbuf_free(pcb->refused_data);
    60d6:	4b0e      	ldr	r3, [pc, #56]	; (6110 <tcp_shutdown+0x58>)
    60d8:	4798      	blx	r3
			pcb->refused_data = NULL;
    60da:	2300      	movs	r3, #0
    60dc:	67a3      	str	r3, [r4, #120]	; 0x78
	if (shut_tx) {
    60de:	b196      	cbz	r6, 6106 <tcp_shutdown+0x4e>
		switch (pcb->state) {
    60e0:	7e23      	ldrb	r3, [r4, #24]
    60e2:	2b03      	cmp	r3, #3
    60e4:	d311      	bcc.n	610a <tcp_shutdown+0x52>
    60e6:	2b04      	cmp	r3, #4
    60e8:	d901      	bls.n	60ee <tcp_shutdown+0x36>
    60ea:	2b07      	cmp	r3, #7
    60ec:	d10d      	bne.n	610a <tcp_shutdown+0x52>
			return tcp_close_shutdown(pcb, shut_rx);
    60ee:	b2e9      	uxtb	r1, r5
    60f0:	4620      	mov	r0, r4
    60f2:	4b08      	ldr	r3, [pc, #32]	; (6114 <tcp_shutdown+0x5c>)
    60f4:	4798      	blx	r3
    60f6:	bd70      	pop	{r4, r5, r6, pc}
			return tcp_close_shutdown(pcb, 1);
    60f8:	2101      	movs	r1, #1
    60fa:	4b06      	ldr	r3, [pc, #24]	; (6114 <tcp_shutdown+0x5c>)
    60fc:	4798      	blx	r3
    60fe:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_CONN;
    6100:	f06f 000c 	mvn.w	r0, #12
    6104:	4770      	bx	lr
	return ERR_OK;
    6106:	2000      	movs	r0, #0
    6108:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_CONN;
    610a:	f06f 000c 	mvn.w	r0, #12
}
    610e:	bd70      	pop	{r4, r5, r6, pc}
    6110:	000054a1 	.word	0x000054a1
    6114:	00005dc1 	.word	0x00005dc1

00006118 <tcp_abandon>:
{
    6118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    611c:	b083      	sub	sp, #12
    611e:	4604      	mov	r4, r0
	if (pcb->state == TIME_WAIT) {
    6120:	7e03      	ldrb	r3, [r0, #24]
    6122:	2b0a      	cmp	r3, #10
    6124:	d027      	beq.n	6176 <tcp_abandon+0x5e>
    6126:	460e      	mov	r6, r1
		seqno = pcb->snd_nxt;
    6128:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
		ackno = pcb->rcv_nxt;
    612c:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
		errf = pcb->errf;
    6130:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
		errf_arg = pcb->callback_arg;
    6134:	6907      	ldr	r7, [r0, #16]
		TCP_PCB_REMOVE_ACTIVE(pcb);
    6136:	4601      	mov	r1, r0
    6138:	4819      	ldr	r0, [pc, #100]	; (61a0 <tcp_abandon+0x88>)
    613a:	4b1a      	ldr	r3, [pc, #104]	; (61a4 <tcp_abandon+0x8c>)
    613c:	4798      	blx	r3
    613e:	2201      	movs	r2, #1
    6140:	4b19      	ldr	r3, [pc, #100]	; (61a8 <tcp_abandon+0x90>)
    6142:	701a      	strb	r2, [r3, #0]
		if (pcb->unacked != NULL) {
    6144:	6f20      	ldr	r0, [r4, #112]	; 0x70
    6146:	b108      	cbz	r0, 614c <tcp_abandon+0x34>
			tcp_segs_free(pcb->unacked);
    6148:	4b18      	ldr	r3, [pc, #96]	; (61ac <tcp_abandon+0x94>)
    614a:	4798      	blx	r3
		if (pcb->unsent != NULL) {
    614c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    614e:	b108      	cbz	r0, 6154 <tcp_abandon+0x3c>
			tcp_segs_free(pcb->unsent);
    6150:	4b16      	ldr	r3, [pc, #88]	; (61ac <tcp_abandon+0x94>)
    6152:	4798      	blx	r3
		if (pcb->ooseq != NULL) {
    6154:	6f60      	ldr	r0, [r4, #116]	; 0x74
    6156:	b108      	cbz	r0, 615c <tcp_abandon+0x44>
			tcp_segs_free(pcb->ooseq);
    6158:	4b14      	ldr	r3, [pc, #80]	; (61ac <tcp_abandon+0x94>)
    615a:	4798      	blx	r3
		if (reset) {
    615c:	b9a6      	cbnz	r6, 6188 <tcp_abandon+0x70>
		memp_free(MEMP_TCP_PCB, pcb);
    615e:	4621      	mov	r1, r4
    6160:	2001      	movs	r0, #1
    6162:	4b13      	ldr	r3, [pc, #76]	; (61b0 <tcp_abandon+0x98>)
    6164:	4798      	blx	r3
		TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
    6166:	b11d      	cbz	r5, 6170 <tcp_abandon+0x58>
    6168:	f06f 0109 	mvn.w	r1, #9
    616c:	4638      	mov	r0, r7
    616e:	47a8      	blx	r5
}
    6170:	b003      	add	sp, #12
    6172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    6176:	4601      	mov	r1, r0
    6178:	480e      	ldr	r0, [pc, #56]	; (61b4 <tcp_abandon+0x9c>)
    617a:	4b0a      	ldr	r3, [pc, #40]	; (61a4 <tcp_abandon+0x8c>)
    617c:	4798      	blx	r3
		memp_free(MEMP_TCP_PCB, pcb);
    617e:	4621      	mov	r1, r4
    6180:	2001      	movs	r0, #1
    6182:	4b0b      	ldr	r3, [pc, #44]	; (61b0 <tcp_abandon+0x98>)
    6184:	4798      	blx	r3
    6186:	e7f3      	b.n	6170 <tcp_abandon+0x58>
			tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    6188:	8ba3      	ldrh	r3, [r4, #28]
    618a:	9301      	str	r3, [sp, #4]
    618c:	8b63      	ldrh	r3, [r4, #26]
    618e:	9300      	str	r3, [sp, #0]
    6190:	1d23      	adds	r3, r4, #4
    6192:	4622      	mov	r2, r4
    6194:	4649      	mov	r1, r9
    6196:	4640      	mov	r0, r8
    6198:	4e07      	ldr	r6, [pc, #28]	; (61b8 <tcp_abandon+0xa0>)
    619a:	47b0      	blx	r6
    619c:	e7df      	b.n	615e <tcp_abandon+0x46>
    619e:	bf00      	nop
    61a0:	200161d4 	.word	0x200161d4
    61a4:	00005d59 	.word	0x00005d59
    61a8:	200161d0 	.word	0x200161d0
    61ac:	00005981 	.word	0x00005981
    61b0:	000051fd 	.word	0x000051fd
    61b4:	200161e8 	.word	0x200161e8
    61b8:	000080c5 	.word	0x000080c5

000061bc <tcp_abort>:
{
    61bc:	b508      	push	{r3, lr}
	tcp_abandon(pcb, 1);
    61be:	2101      	movs	r1, #1
    61c0:	4b01      	ldr	r3, [pc, #4]	; (61c8 <tcp_abort+0xc>)
    61c2:	4798      	blx	r3
    61c4:	bd08      	pop	{r3, pc}
    61c6:	bf00      	nop
    61c8:	00006119 	.word	0x00006119

000061cc <tcp_kill_timewait>:
{
    61cc:	b510      	push	{r4, lr}
	for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    61ce:	4b0a      	ldr	r3, [pc, #40]	; (61f8 <tcp_kill_timewait+0x2c>)
    61d0:	681b      	ldr	r3, [r3, #0]
	inactivity = 0;
    61d2:	2400      	movs	r4, #0
	inactive   = NULL;
    61d4:	4620      	mov	r0, r4
	for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    61d6:	e000      	b.n	61da <tcp_kill_timewait+0xe>
    61d8:	68db      	ldr	r3, [r3, #12]
    61da:	b143      	cbz	r3, 61ee <tcp_kill_timewait+0x22>
		if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    61dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    61de:	4a07      	ldr	r2, [pc, #28]	; (61fc <tcp_kill_timewait+0x30>)
    61e0:	6812      	ldr	r2, [r2, #0]
    61e2:	1a52      	subs	r2, r2, r1
    61e4:	4294      	cmp	r4, r2
    61e6:	d8f7      	bhi.n	61d8 <tcp_kill_timewait+0xc>
			inactivity = tcp_ticks - pcb->tmr;
    61e8:	4614      	mov	r4, r2
			inactive   = pcb;
    61ea:	4618      	mov	r0, r3
    61ec:	e7f4      	b.n	61d8 <tcp_kill_timewait+0xc>
	if (inactive != NULL) {
    61ee:	b108      	cbz	r0, 61f4 <tcp_kill_timewait+0x28>
		tcp_abort(inactive);
    61f0:	4b03      	ldr	r3, [pc, #12]	; (6200 <tcp_kill_timewait+0x34>)
    61f2:	4798      	blx	r3
    61f4:	bd10      	pop	{r4, pc}
    61f6:	bf00      	nop
    61f8:	200161e8 	.word	0x200161e8
    61fc:	200161d8 	.word	0x200161d8
    6200:	000061bd 	.word	0x000061bd

00006204 <tcp_kill_prio>:
{
    6204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    6206:	4b0e      	ldr	r3, [pc, #56]	; (6240 <tcp_kill_prio+0x3c>)
    6208:	681b      	ldr	r3, [r3, #0]
	mprio = TCP_PRIO_MAX;
    620a:	247f      	movs	r4, #127	; 0x7f
	inactivity = 0;
    620c:	2500      	movs	r5, #0
	inactive   = NULL;
    620e:	462f      	mov	r7, r5
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    6210:	e000      	b.n	6214 <tcp_kill_prio+0x10>
    6212:	68db      	ldr	r3, [r3, #12]
    6214:	b173      	cbz	r3, 6234 <tcp_kill_prio+0x30>
		if (pcb->prio <= prio && pcb->prio <= mprio && (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    6216:	7e5a      	ldrb	r2, [r3, #25]
    6218:	4282      	cmp	r2, r0
    621a:	d8fa      	bhi.n	6212 <tcp_kill_prio+0xe>
    621c:	4294      	cmp	r4, r2
    621e:	d3f8      	bcc.n	6212 <tcp_kill_prio+0xe>
    6220:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    6222:	4908      	ldr	r1, [pc, #32]	; (6244 <tcp_kill_prio+0x40>)
    6224:	6809      	ldr	r1, [r1, #0]
    6226:	1b89      	subs	r1, r1, r6
    6228:	428d      	cmp	r5, r1
    622a:	d8f2      	bhi.n	6212 <tcp_kill_prio+0xe>
			mprio      = pcb->prio;
    622c:	4614      	mov	r4, r2
			inactivity = tcp_ticks - pcb->tmr;
    622e:	460d      	mov	r5, r1
			inactive   = pcb;
    6230:	461f      	mov	r7, r3
    6232:	e7ee      	b.n	6212 <tcp_kill_prio+0xe>
	if (inactive != NULL) {
    6234:	b117      	cbz	r7, 623c <tcp_kill_prio+0x38>
		tcp_abort(inactive);
    6236:	4638      	mov	r0, r7
    6238:	4b03      	ldr	r3, [pc, #12]	; (6248 <tcp_kill_prio+0x44>)
    623a:	4798      	blx	r3
    623c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    623e:	bf00      	nop
    6240:	200161d4 	.word	0x200161d4
    6244:	200161d8 	.word	0x200161d8
    6248:	000061bd 	.word	0x000061bd

0000624c <tcp_next_iss>:
 */
u32_t tcp_next_iss(void)
{
	static u32_t iss = 6510;

	iss += tcp_ticks; /* XXX */
    624c:	4b03      	ldr	r3, [pc, #12]	; (625c <tcp_next_iss+0x10>)
    624e:	6858      	ldr	r0, [r3, #4]
    6250:	4a03      	ldr	r2, [pc, #12]	; (6260 <tcp_next_iss+0x14>)
    6252:	6812      	ldr	r2, [r2, #0]
    6254:	4410      	add	r0, r2
    6256:	6058      	str	r0, [r3, #4]
	return iss;
}
    6258:	4770      	bx	lr
    625a:	bf00      	nop
    625c:	2000003c 	.word	0x2000003c
    6260:	200161d8 	.word	0x200161d8

00006264 <tcp_alloc>:
{
    6264:	b538      	push	{r3, r4, r5, lr}
    6266:	4605      	mov	r5, r0
	pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    6268:	2001      	movs	r0, #1
    626a:	4b29      	ldr	r3, [pc, #164]	; (6310 <tcp_alloc+0xac>)
    626c:	4798      	blx	r3
	if (pcb == NULL) {
    626e:	4604      	mov	r4, r0
    6270:	2800      	cmp	r0, #0
    6272:	d03d      	beq.n	62f0 <tcp_alloc+0x8c>
	if (pcb != NULL) {
    6274:	2c00      	cmp	r4, #0
    6276:	d039      	beq.n	62ec <tcp_alloc+0x88>
		memset(pcb, 0, sizeof(struct tcp_pcb));
    6278:	2298      	movs	r2, #152	; 0x98
    627a:	2100      	movs	r1, #0
    627c:	4620      	mov	r0, r4
    627e:	4b25      	ldr	r3, [pc, #148]	; (6314 <tcp_alloc+0xb0>)
    6280:	4798      	blx	r3
		pcb->prio         = prio;
    6282:	7665      	strb	r5, [r4, #25]
		pcb->snd_buf      = TCP_SND_BUF;
    6284:	f640 3368 	movw	r3, #2920	; 0xb68
    6288:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
		pcb->snd_queuelen = 0;
    628c:	2500      	movs	r5, #0
    628e:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
		pcb->rcv_wnd      = TCP_WND;
    6292:	f241 63d0 	movw	r3, #5840	; 0x16d0
    6296:	85a3      	strh	r3, [r4, #44]	; 0x2c
		pcb->rcv_ann_wnd  = TCP_WND;
    6298:	85e3      	strh	r3, [r4, #46]	; 0x2e
		pcb->tos          = 0;
    629a:	7265      	strb	r5, [r4, #9]
		pcb->ttl          = TCP_TTL;
    629c:	23ff      	movs	r3, #255	; 0xff
    629e:	72a3      	strb	r3, [r4, #10]
		pcb->mss        = (TCP_MSS > 536) ? 536 : TCP_MSS;
    62a0:	f44f 7306 	mov.w	r3, #536	; 0x218
    62a4:	86e3      	strh	r3, [r4, #54]	; 0x36
		pcb->rto        = 3000 / TCP_SLOW_INTERVAL;
    62a6:	2306      	movs	r3, #6
    62a8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		pcb->sa         = 0;
    62ac:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		pcb->sv         = 3000 / TCP_SLOW_INTERVAL;
    62b0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		pcb->rtime      = -1;
    62b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    62b8:	86a3      	strh	r3, [r4, #52]	; 0x34
		pcb->cwnd       = 1;
    62ba:	2301      	movs	r3, #1
    62bc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		iss             = tcp_next_iss();
    62c0:	4b15      	ldr	r3, [pc, #84]	; (6318 <tcp_alloc+0xb4>)
    62c2:	4798      	blx	r3
		pcb->snd_wl2    = iss;
    62c4:	65a0      	str	r0, [r4, #88]	; 0x58
		pcb->snd_nxt    = iss;
    62c6:	6520      	str	r0, [r4, #80]	; 0x50
		pcb->lastack    = iss;
    62c8:	64a0      	str	r0, [r4, #72]	; 0x48
		pcb->snd_lbb    = iss;
    62ca:	65e0      	str	r0, [r4, #92]	; 0x5c
		pcb->tmr        = tcp_ticks;
    62cc:	4b13      	ldr	r3, [pc, #76]	; (631c <tcp_alloc+0xb8>)
    62ce:	681b      	ldr	r3, [r3, #0]
    62d0:	6263      	str	r3, [r4, #36]	; 0x24
		pcb->last_timer = tcp_timer_ctr;
    62d2:	4b13      	ldr	r3, [pc, #76]	; (6320 <tcp_alloc+0xbc>)
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		pcb->polltmr = 0;
    62da:	77e5      	strb	r5, [r4, #31]
		pcb->recv = tcp_recv_null;
    62dc:	4b11      	ldr	r3, [pc, #68]	; (6324 <tcp_alloc+0xc0>)
    62de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;
    62e2:	4b11      	ldr	r3, [pc, #68]	; (6328 <tcp_alloc+0xc4>)
    62e4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		pcb->keep_cnt_sent = 0;
    62e8:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
    62ec:	4620      	mov	r0, r4
    62ee:	bd38      	pop	{r3, r4, r5, pc}
		tcp_kill_timewait();
    62f0:	4b0e      	ldr	r3, [pc, #56]	; (632c <tcp_alloc+0xc8>)
    62f2:	4798      	blx	r3
		pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    62f4:	2001      	movs	r0, #1
    62f6:	4b06      	ldr	r3, [pc, #24]	; (6310 <tcp_alloc+0xac>)
    62f8:	4798      	blx	r3
		if (pcb == NULL) {
    62fa:	4604      	mov	r4, r0
    62fc:	2800      	cmp	r0, #0
    62fe:	d1b9      	bne.n	6274 <tcp_alloc+0x10>
			tcp_kill_prio(prio);
    6300:	4628      	mov	r0, r5
    6302:	4b0b      	ldr	r3, [pc, #44]	; (6330 <tcp_alloc+0xcc>)
    6304:	4798      	blx	r3
			pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    6306:	2001      	movs	r0, #1
    6308:	4b01      	ldr	r3, [pc, #4]	; (6310 <tcp_alloc+0xac>)
    630a:	4798      	blx	r3
    630c:	4604      	mov	r4, r0
    630e:	e7b1      	b.n	6274 <tcp_alloc+0x10>
    6310:	000051d5 	.word	0x000051d5
    6314:	0000c119 	.word	0x0000c119
    6318:	0000624d 	.word	0x0000624d
    631c:	200161d8 	.word	0x200161d8
    6320:	200080a1 	.word	0x200080a1
    6324:	00005f79 	.word	0x00005f79
    6328:	006ddd00 	.word	0x006ddd00
    632c:	000061cd 	.word	0x000061cd
    6330:	00006205 	.word	0x00006205

00006334 <tcp_new>:
{
    6334:	b508      	push	{r3, lr}
	return tcp_alloc(TCP_PRIO_NORMAL);
    6336:	2040      	movs	r0, #64	; 0x40
    6338:	4b01      	ldr	r3, [pc, #4]	; (6340 <tcp_new+0xc>)
    633a:	4798      	blx	r3
}
    633c:	bd08      	pop	{r3, pc}
    633e:	bf00      	nop
    6340:	00006265 	.word	0x00006265

00006344 <tcp_eff_send_mss>:
 * Calcluates the effective send mss that can be used for a specific IP address
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
    6344:	b510      	push	{r4, lr}
    6346:	4604      	mov	r4, r0
	u16_t         mss_s;
	struct netif *outif;

	outif = ip_route(addr);
    6348:	4608      	mov	r0, r1
    634a:	4b07      	ldr	r3, [pc, #28]	; (6368 <tcp_eff_send_mss+0x24>)
    634c:	4798      	blx	r3
	if ((outif != NULL) && (outif->mtu != 0)) {
    634e:	b138      	cbz	r0, 6360 <tcp_eff_send_mss+0x1c>
    6350:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    6352:	b13b      	cbz	r3, 6364 <tcp_eff_send_mss+0x20>
		mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    6354:	3b28      	subs	r3, #40	; 0x28
    6356:	b298      	uxth	r0, r3
		/* RFC 1122, chap 4.2.2.6:
		 * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
		 * We correct for TCP options in tcp_write(), and don't support IP options.
		 */
		sendmss = LWIP_MIN(sendmss, mss_s);
    6358:	42a0      	cmp	r0, r4
    635a:	bf28      	it	cs
    635c:	4620      	movcs	r0, r4
    635e:	bd10      	pop	{r4, pc}
    6360:	4620      	mov	r0, r4
    6362:	bd10      	pop	{r4, pc}
    6364:	4620      	mov	r0, r4
	}
	return sendmss;
}
    6366:	bd10      	pop	{r4, pc}
    6368:	000042a1 	.word	0x000042a1

0000636c <tcp_parseopt>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void tcp_parseopt(struct tcp_pcb *pcb)
{
    636c:	b570      	push	{r4, r5, r6, lr}
    636e:	4605      	mov	r5, r0
	u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
	u32_t tsval;
#endif

	opts = (u8_t *)tcphdr + TCP_HLEN;
    6370:	4b21      	ldr	r3, [pc, #132]	; (63f8 <tcp_parseopt+0x8c>)
    6372:	681b      	ldr	r3, [r3, #0]
    6374:	f103 0414 	add.w	r4, r3, #20

	/* Parse the TCP MSS option, if present. */
	if (TCPH_HDRLEN(tcphdr) > 0x5) {
    6378:	8998      	ldrh	r0, [r3, #12]
    637a:	4b20      	ldr	r3, [pc, #128]	; (63fc <tcp_parseopt+0x90>)
    637c:	4798      	blx	r3
    637e:	f3c0 300f 	ubfx	r0, r0, #12, #16
    6382:	2805      	cmp	r0, #5
    6384:	d800      	bhi.n	6388 <tcp_parseopt+0x1c>
    6386:	bd70      	pop	{r4, r5, r6, pc}
		max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    6388:	4b1b      	ldr	r3, [pc, #108]	; (63f8 <tcp_parseopt+0x8c>)
    638a:	681b      	ldr	r3, [r3, #0]
    638c:	8998      	ldrh	r0, [r3, #12]
    638e:	4b1b      	ldr	r3, [pc, #108]	; (63fc <tcp_parseopt+0x90>)
    6390:	4798      	blx	r3
    6392:	0b02      	lsrs	r2, r0, #12
    6394:	3a05      	subs	r2, #5
    6396:	b292      	uxth	r2, r2
    6398:	0092      	lsls	r2, r2, #2
    639a:	b292      	uxth	r2, r2
		for (c = 0; c < max_c;) {
    639c:	2300      	movs	r3, #0
    639e:	4293      	cmp	r3, r2
    63a0:	d2f1      	bcs.n	6386 <tcp_parseopt+0x1a>
			opt = opts[c];
    63a2:	4618      	mov	r0, r3
    63a4:	5ce1      	ldrb	r1, [r4, r3]
			switch (opt) {
    63a6:	2901      	cmp	r1, #1
    63a8:	d00a      	beq.n	63c0 <tcp_parseopt+0x54>
    63aa:	2900      	cmp	r1, #0
    63ac:	d0eb      	beq.n	6386 <tcp_parseopt+0x1a>
    63ae:	2902      	cmp	r1, #2
    63b0:	d009      	beq.n	63c6 <tcp_parseopt+0x5a>
				c += 0x0A;
				break;
#endif
			default:
				LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
				if (opts[c + 1] == 0) {
    63b2:	4420      	add	r0, r4
    63b4:	7841      	ldrb	r1, [r0, #1]
    63b6:	2900      	cmp	r1, #0
    63b8:	d0e5      	beq.n	6386 <tcp_parseopt+0x1a>
					   and we don't process them further. */
					return;
				}
				/* All other options have a length field, so that we easily
				   can skip past them. */
				c += opts[c + 1];
    63ba:	440b      	add	r3, r1
    63bc:	b29b      	uxth	r3, r3
    63be:	e7ee      	b.n	639e <tcp_parseopt+0x32>
				++c;
    63c0:	3301      	adds	r3, #1
    63c2:	b29b      	uxth	r3, r3
				break;
    63c4:	e7eb      	b.n	639e <tcp_parseopt+0x32>
				if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
    63c6:	18e1      	adds	r1, r4, r3
    63c8:	7849      	ldrb	r1, [r1, #1]
    63ca:	2904      	cmp	r1, #4
    63cc:	d1db      	bne.n	6386 <tcp_parseopt+0x1a>
    63ce:	1d19      	adds	r1, r3, #4
    63d0:	4291      	cmp	r1, r2
    63d2:	dcd8      	bgt.n	6386 <tcp_parseopt+0x1a>
				mss = (opts[c + 2] << 8) | opts[c + 3];
    63d4:	4420      	add	r0, r4
    63d6:	7886      	ldrb	r6, [r0, #2]
    63d8:	78c1      	ldrb	r1, [r0, #3]
    63da:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
    63de:	1e48      	subs	r0, r1, #1
    63e0:	b280      	uxth	r0, r0
    63e2:	f240 56b3 	movw	r6, #1459	; 0x5b3
    63e6:	42b0      	cmp	r0, r6
    63e8:	d901      	bls.n	63ee <tcp_parseopt+0x82>
    63ea:	f240 51b4 	movw	r1, #1460	; 0x5b4
    63ee:	86e9      	strh	r1, [r5, #54]	; 0x36
				c += 0x04;
    63f0:	3304      	adds	r3, #4
    63f2:	b29b      	uxth	r3, r3
				break;
    63f4:	e7d3      	b.n	639e <tcp_parseopt+0x32>
    63f6:	bf00      	nop
    63f8:	200080a4 	.word	0x200080a4
    63fc:	00003e9d 	.word	0x00003e9d

00006400 <tcp_timewait_input>:
	if (flags & TCP_RST) {
    6400:	4b1c      	ldr	r3, [pc, #112]	; (6474 <tcp_timewait_input+0x74>)
    6402:	791b      	ldrb	r3, [r3, #4]
    6404:	f013 0f04 	tst.w	r3, #4
    6408:	d12f      	bne.n	646a <tcp_timewait_input+0x6a>
{
    640a:	b510      	push	{r4, lr}
    640c:	b082      	sub	sp, #8
	if (flags & TCP_SYN) {
    640e:	f013 0f02 	tst.w	r3, #2
    6412:	d01a      	beq.n	644a <tcp_timewait_input+0x4a>
		if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
    6414:	4b17      	ldr	r3, [pc, #92]	; (6474 <tcp_timewait_input+0x74>)
    6416:	6899      	ldr	r1, [r3, #8]
    6418:	6a83      	ldr	r3, [r0, #40]	; 0x28
    641a:	1aca      	subs	r2, r1, r3
    641c:	2a00      	cmp	r2, #0
    641e:	db1a      	blt.n	6456 <tcp_timewait_input+0x56>
    6420:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    6422:	4413      	add	r3, r2
    6424:	1acb      	subs	r3, r1, r3
    6426:	2b00      	cmp	r3, #0
    6428:	dc15      	bgt.n	6456 <tcp_timewait_input+0x56>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    642a:	4812      	ldr	r0, [pc, #72]	; (6474 <tcp_timewait_input+0x74>)
    642c:	6803      	ldr	r3, [r0, #0]
    642e:	8984      	ldrh	r4, [r0, #12]
    6430:	881a      	ldrh	r2, [r3, #0]
    6432:	9201      	str	r2, [sp, #4]
    6434:	885b      	ldrh	r3, [r3, #2]
    6436:	9300      	str	r3, [sp, #0]
    6438:	4b0f      	ldr	r3, [pc, #60]	; (6478 <tcp_timewait_input+0x78>)
    643a:	4a10      	ldr	r2, [pc, #64]	; (647c <tcp_timewait_input+0x7c>)
    643c:	4421      	add	r1, r4
    643e:	6900      	ldr	r0, [r0, #16]
    6440:	4c0f      	ldr	r4, [pc, #60]	; (6480 <tcp_timewait_input+0x80>)
    6442:	47a0      	blx	r4
			return ERR_OK;
    6444:	2000      	movs	r0, #0
}
    6446:	b002      	add	sp, #8
    6448:	bd10      	pop	{r4, pc}
	} else if (flags & TCP_FIN) {
    644a:	f013 0f01 	tst.w	r3, #1
    644e:	d002      	beq.n	6456 <tcp_timewait_input+0x56>
		pcb->tmr = tcp_ticks;
    6450:	4b0c      	ldr	r3, [pc, #48]	; (6484 <tcp_timewait_input+0x84>)
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	6243      	str	r3, [r0, #36]	; 0x24
	if ((tcplen > 0)) {
    6456:	4b07      	ldr	r3, [pc, #28]	; (6474 <tcp_timewait_input+0x74>)
    6458:	899b      	ldrh	r3, [r3, #12]
    645a:	b143      	cbz	r3, 646e <tcp_timewait_input+0x6e>
		pcb->flags |= TF_ACK_NOW;
    645c:	7f83      	ldrb	r3, [r0, #30]
    645e:	f043 0302 	orr.w	r3, r3, #2
    6462:	7783      	strb	r3, [r0, #30]
		return tcp_output(pcb);
    6464:	4b08      	ldr	r3, [pc, #32]	; (6488 <tcp_timewait_input+0x88>)
    6466:	4798      	blx	r3
    6468:	e7ed      	b.n	6446 <tcp_timewait_input+0x46>
		return ERR_OK;
    646a:	2000      	movs	r0, #0
    646c:	4770      	bx	lr
	return ERR_OK;
    646e:	2000      	movs	r0, #0
    6470:	e7e9      	b.n	6446 <tcp_timewait_input+0x46>
    6472:	bf00      	nop
    6474:	200080a4 	.word	0x200080a4
    6478:	200129a0 	.word	0x200129a0
    647c:	200129a8 	.word	0x200129a8
    6480:	000080c5 	.word	0x000080c5
    6484:	200161d8 	.word	0x200161d8
    6488:	00007ee9 	.word	0x00007ee9

0000648c <tcp_listen_input>:
{
    648c:	b530      	push	{r4, r5, lr}
    648e:	b083      	sub	sp, #12
	if (flags & TCP_RST) {
    6490:	4b37      	ldr	r3, [pc, #220]	; (6570 <tcp_listen_input+0xe4>)
    6492:	791b      	ldrb	r3, [r3, #4]
    6494:	f013 0f04 	tst.w	r3, #4
    6498:	d163      	bne.n	6562 <tcp_listen_input+0xd6>
    649a:	4605      	mov	r5, r0
	if (flags & TCP_ACK) {
    649c:	f013 0f10 	tst.w	r3, #16
    64a0:	d011      	beq.n	64c6 <tcp_listen_input+0x3a>
		tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    64a2:	4833      	ldr	r0, [pc, #204]	; (6570 <tcp_listen_input+0xe4>)
    64a4:	6803      	ldr	r3, [r0, #0]
    64a6:	8984      	ldrh	r4, [r0, #12]
    64a8:	6881      	ldr	r1, [r0, #8]
    64aa:	881a      	ldrh	r2, [r3, #0]
    64ac:	9201      	str	r2, [sp, #4]
    64ae:	885b      	ldrh	r3, [r3, #2]
    64b0:	9300      	str	r3, [sp, #0]
    64b2:	4b30      	ldr	r3, [pc, #192]	; (6574 <tcp_listen_input+0xe8>)
    64b4:	4a30      	ldr	r2, [pc, #192]	; (6578 <tcp_listen_input+0xec>)
    64b6:	4421      	add	r1, r4
    64b8:	6900      	ldr	r0, [r0, #16]
    64ba:	4c30      	ldr	r4, [pc, #192]	; (657c <tcp_listen_input+0xf0>)
    64bc:	47a0      	blx	r4
	return ERR_OK;
    64be:	2500      	movs	r5, #0
}
    64c0:	4628      	mov	r0, r5
    64c2:	b003      	add	sp, #12
    64c4:	bd30      	pop	{r4, r5, pc}
	} else if (flags & TCP_SYN) {
    64c6:	f013 0f02 	tst.w	r3, #2
    64ca:	d04c      	beq.n	6566 <tcp_listen_input+0xda>
		npcb = tcp_alloc(pcb->prio);
    64cc:	7e40      	ldrb	r0, [r0, #25]
    64ce:	4b2c      	ldr	r3, [pc, #176]	; (6580 <tcp_listen_input+0xf4>)
    64d0:	4798      	blx	r3
		if (npcb == NULL) {
    64d2:	4604      	mov	r4, r0
    64d4:	2800      	cmp	r0, #0
    64d6:	d048      	beq.n	656a <tcp_listen_input+0xde>
		ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    64d8:	4b27      	ldr	r3, [pc, #156]	; (6578 <tcp_listen_input+0xec>)
    64da:	681b      	ldr	r3, [r3, #0]
    64dc:	6003      	str	r3, [r0, #0]
		npcb->local_port = pcb->local_port;
    64de:	8b6b      	ldrh	r3, [r5, #26]
    64e0:	8343      	strh	r3, [r0, #26]
		ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    64e2:	4b24      	ldr	r3, [pc, #144]	; (6574 <tcp_listen_input+0xe8>)
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	6043      	str	r3, [r0, #4]
		npcb->remote_port        = tcphdr->src;
    64e8:	4b21      	ldr	r3, [pc, #132]	; (6570 <tcp_listen_input+0xe4>)
    64ea:	681a      	ldr	r2, [r3, #0]
    64ec:	8811      	ldrh	r1, [r2, #0]
    64ee:	8381      	strh	r1, [r0, #28]
		npcb->state              = SYN_RCVD;
    64f0:	2103      	movs	r1, #3
    64f2:	7601      	strb	r1, [r0, #24]
		npcb->rcv_nxt            = seqno + 1;
    64f4:	689b      	ldr	r3, [r3, #8]
    64f6:	1c59      	adds	r1, r3, #1
    64f8:	6281      	str	r1, [r0, #40]	; 0x28
		npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    64fa:	6301      	str	r1, [r0, #48]	; 0x30
		npcb->snd_wnd            = tcphdr->wnd;
    64fc:	89d1      	ldrh	r1, [r2, #14]
    64fe:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
		npcb->snd_wnd_max        = tcphdr->wnd;
    6502:	89d2      	ldrh	r2, [r2, #14]
    6504:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		npcb->ssthresh           = npcb->snd_wnd;
    6508:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
		npcb->snd_wl1            = seqno - 1; /* initialise to seqno-1 to force window update */
    650c:	3b01      	subs	r3, #1
    650e:	6543      	str	r3, [r0, #84]	; 0x54
		npcb->callback_arg       = pcb->callback_arg;
    6510:	692b      	ldr	r3, [r5, #16]
    6512:	6103      	str	r3, [r0, #16]
		npcb->accept = pcb->accept;
    6514:	696b      	ldr	r3, [r5, #20]
    6516:	6143      	str	r3, [r0, #20]
		npcb->so_options = pcb->so_options & SOF_INHERITED;
    6518:	7a2b      	ldrb	r3, [r5, #8]
    651a:	f003 038c 	and.w	r3, r3, #140	; 0x8c
    651e:	7203      	strb	r3, [r0, #8]
		TCP_REG_ACTIVE(npcb);
    6520:	4b18      	ldr	r3, [pc, #96]	; (6584 <tcp_listen_input+0xf8>)
    6522:	681a      	ldr	r2, [r3, #0]
    6524:	60c2      	str	r2, [r0, #12]
    6526:	6018      	str	r0, [r3, #0]
    6528:	4b17      	ldr	r3, [pc, #92]	; (6588 <tcp_listen_input+0xfc>)
    652a:	4798      	blx	r3
    652c:	2201      	movs	r2, #1
    652e:	4b17      	ldr	r3, [pc, #92]	; (658c <tcp_listen_input+0x100>)
    6530:	701a      	strb	r2, [r3, #0]
		tcp_parseopt(npcb);
    6532:	4620      	mov	r0, r4
    6534:	4b16      	ldr	r3, [pc, #88]	; (6590 <tcp_listen_input+0x104>)
    6536:	4798      	blx	r3
		npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
    6538:	1d21      	adds	r1, r4, #4
    653a:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    653c:	4b15      	ldr	r3, [pc, #84]	; (6594 <tcp_listen_input+0x108>)
    653e:	4798      	blx	r3
    6540:	86e0      	strh	r0, [r4, #54]	; 0x36
		rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
    6542:	2112      	movs	r1, #18
    6544:	4620      	mov	r0, r4
    6546:	4b14      	ldr	r3, [pc, #80]	; (6598 <tcp_listen_input+0x10c>)
    6548:	4798      	blx	r3
		if (rc != ERR_OK) {
    654a:	4605      	mov	r5, r0
    654c:	b120      	cbz	r0, 6558 <tcp_listen_input+0xcc>
			tcp_abandon(npcb, 0);
    654e:	2100      	movs	r1, #0
    6550:	4620      	mov	r0, r4
    6552:	4b12      	ldr	r3, [pc, #72]	; (659c <tcp_listen_input+0x110>)
    6554:	4798      	blx	r3
			return rc;
    6556:	e7b3      	b.n	64c0 <tcp_listen_input+0x34>
		return tcp_output(npcb);
    6558:	4620      	mov	r0, r4
    655a:	4b11      	ldr	r3, [pc, #68]	; (65a0 <tcp_listen_input+0x114>)
    655c:	4798      	blx	r3
    655e:	4605      	mov	r5, r0
    6560:	e7ae      	b.n	64c0 <tcp_listen_input+0x34>
		return ERR_OK;
    6562:	2500      	movs	r5, #0
    6564:	e7ac      	b.n	64c0 <tcp_listen_input+0x34>
	return ERR_OK;
    6566:	2500      	movs	r5, #0
    6568:	e7aa      	b.n	64c0 <tcp_listen_input+0x34>
			return ERR_MEM;
    656a:	f04f 35ff 	mov.w	r5, #4294967295
    656e:	e7a7      	b.n	64c0 <tcp_listen_input+0x34>
    6570:	200080a4 	.word	0x200080a4
    6574:	200129a0 	.word	0x200129a0
    6578:	200129a8 	.word	0x200129a8
    657c:	000080c5 	.word	0x000080c5
    6580:	00006265 	.word	0x00006265
    6584:	200161d4 	.word	0x200161d4
    6588:	000083fd 	.word	0x000083fd
    658c:	200161d0 	.word	0x200161d0
    6590:	0000636d 	.word	0x0000636d
    6594:	00006345 	.word	0x00006345
    6598:	00007d45 	.word	0x00007d45
    659c:	00006119 	.word	0x00006119
    65a0:	00007ee9 	.word	0x00007ee9

000065a4 <tcp_oos_insert_segment>:
{
    65a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65a6:	4605      	mov	r5, r0
    65a8:	460c      	mov	r4, r1
	if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    65aa:	68c3      	ldr	r3, [r0, #12]
    65ac:	8998      	ldrh	r0, [r3, #12]
    65ae:	4b1d      	ldr	r3, [pc, #116]	; (6624 <tcp_oos_insert_segment+0x80>)
    65b0:	4798      	blx	r3
    65b2:	f010 0f01 	tst.w	r0, #1
    65b6:	d009      	beq.n	65cc <tcp_oos_insert_segment+0x28>
		tcp_segs_free(next);
    65b8:	4620      	mov	r0, r4
    65ba:	4b1b      	ldr	r3, [pc, #108]	; (6628 <tcp_oos_insert_segment+0x84>)
    65bc:	4798      	blx	r3
		next = NULL;
    65be:	2400      	movs	r4, #0
    65c0:	e02e      	b.n	6620 <tcp_oos_insert_segment+0x7c>
			next    = next->next;
    65c2:	6826      	ldr	r6, [r4, #0]
			tcp_seg_free(old_seg);
    65c4:	4620      	mov	r0, r4
    65c6:	4b19      	ldr	r3, [pc, #100]	; (662c <tcp_oos_insert_segment+0x88>)
    65c8:	4798      	blx	r3
			next    = next->next;
    65ca:	4634      	mov	r4, r6
		while (next && TCP_SEQ_GEQ((seqno + cseg->len), (next->tcphdr->seqno + next->len))) {
    65cc:	b1c4      	cbz	r4, 6600 <tcp_oos_insert_segment+0x5c>
    65ce:	892b      	ldrh	r3, [r5, #8]
    65d0:	4a17      	ldr	r2, [pc, #92]	; (6630 <tcp_oos_insert_segment+0x8c>)
    65d2:	6892      	ldr	r2, [r2, #8]
    65d4:	4413      	add	r3, r2
    65d6:	68e1      	ldr	r1, [r4, #12]
    65d8:	684a      	ldr	r2, [r1, #4]
    65da:	8920      	ldrh	r0, [r4, #8]
    65dc:	4402      	add	r2, r0
    65de:	1a9b      	subs	r3, r3, r2
    65e0:	2b00      	cmp	r3, #0
    65e2:	db0d      	blt.n	6600 <tcp_oos_insert_segment+0x5c>
			if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    65e4:	8988      	ldrh	r0, [r1, #12]
    65e6:	4b0f      	ldr	r3, [pc, #60]	; (6624 <tcp_oos_insert_segment+0x80>)
    65e8:	4798      	blx	r3
    65ea:	f010 0f01 	tst.w	r0, #1
    65ee:	d0e8      	beq.n	65c2 <tcp_oos_insert_segment+0x1e>
				TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
    65f0:	68ef      	ldr	r7, [r5, #12]
    65f2:	89be      	ldrh	r6, [r7, #12]
    65f4:	2001      	movs	r0, #1
    65f6:	4b0f      	ldr	r3, [pc, #60]	; (6634 <tcp_oos_insert_segment+0x90>)
    65f8:	4798      	blx	r3
    65fa:	4330      	orrs	r0, r6
    65fc:	81b8      	strh	r0, [r7, #12]
    65fe:	e7e0      	b.n	65c2 <tcp_oos_insert_segment+0x1e>
		if (next && TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
    6600:	b174      	cbz	r4, 6620 <tcp_oos_insert_segment+0x7c>
    6602:	892b      	ldrh	r3, [r5, #8]
    6604:	4a0a      	ldr	r2, [pc, #40]	; (6630 <tcp_oos_insert_segment+0x8c>)
    6606:	6891      	ldr	r1, [r2, #8]
    6608:	440b      	add	r3, r1
    660a:	68e2      	ldr	r2, [r4, #12]
    660c:	6852      	ldr	r2, [r2, #4]
    660e:	1a9b      	subs	r3, r3, r2
    6610:	2b00      	cmp	r3, #0
    6612:	dd05      	ble.n	6620 <tcp_oos_insert_segment+0x7c>
			cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
    6614:	1a52      	subs	r2, r2, r1
    6616:	b291      	uxth	r1, r2
    6618:	8129      	strh	r1, [r5, #8]
			pbuf_realloc(cseg->p, cseg->len);
    661a:	6868      	ldr	r0, [r5, #4]
    661c:	4b06      	ldr	r3, [pc, #24]	; (6638 <tcp_oos_insert_segment+0x94>)
    661e:	4798      	blx	r3
	cseg->next = next;
    6620:	602c      	str	r4, [r5, #0]
    6622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6624:	00003e9d 	.word	0x00003e9d
    6628:	00005981 	.word	0x00005981
    662c:	0000595d 	.word	0x0000595d
    6630:	200080a4 	.word	0x200080a4
    6634:	00003e91 	.word	0x00003e91
    6638:	0000562d 	.word	0x0000562d

0000663c <tcp_receive>:
{
    663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6640:	4604      	mov	r4, r0
	if (flags & TCP_ACK) {
    6642:	4b8e      	ldr	r3, [pc, #568]	; (687c <tcp_receive+0x240>)
    6644:	791b      	ldrb	r3, [r3, #4]
    6646:	f013 0f10 	tst.w	r3, #16
    664a:	f000 816c 	beq.w	6926 <tcp_receive+0x2ea>
		right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
    664e:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
    6652:	6da2      	ldr	r2, [r4, #88]	; 0x58
    6654:	1886      	adds	r6, r0, r2
		if (TCP_SEQ_LT(pcb->snd_wl1, seqno) || (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno))
    6656:	6d61      	ldr	r1, [r4, #84]	; 0x54
    6658:	4b88      	ldr	r3, [pc, #544]	; (687c <tcp_receive+0x240>)
    665a:	689b      	ldr	r3, [r3, #8]
    665c:	1acd      	subs	r5, r1, r3
    665e:	2d00      	cmp	r5, #0
    6660:	db20      	blt.n	66a4 <tcp_receive+0x68>
    6662:	4299      	cmp	r1, r3
    6664:	d013      	beq.n	668e <tcp_receive+0x52>
		    || (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    6666:	4985      	ldr	r1, [pc, #532]	; (687c <tcp_receive+0x240>)
    6668:	6909      	ldr	r1, [r1, #16]
    666a:	428a      	cmp	r2, r1
    666c:	d015      	beq.n	669a <tcp_receive+0x5e>
		if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
    666e:	4b83      	ldr	r3, [pc, #524]	; (687c <tcp_receive+0x240>)
    6670:	691a      	ldr	r2, [r3, #16]
    6672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6674:	1ad1      	subs	r1, r2, r3
    6676:	2900      	cmp	r1, #0
    6678:	dd39      	ble.n	66ee <tcp_receive+0xb2>
		} else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    667a:	2901      	cmp	r1, #1
    667c:	d403      	bmi.n	6686 <tcp_receive+0x4a>
    667e:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6680:	1a51      	subs	r1, r2, r1
    6682:	2900      	cmp	r1, #0
    6684:	dd74      	ble.n	6770 <tcp_receive+0x134>
			pcb->acked = 0;
    6686:	2300      	movs	r3, #0
    6688:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    668c:	e10e      	b.n	68ac <tcp_receive+0x270>
		if (TCP_SEQ_LT(pcb->snd_wl1, seqno) || (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno))
    668e:	497b      	ldr	r1, [pc, #492]	; (687c <tcp_receive+0x240>)
    6690:	6909      	ldr	r1, [r1, #16]
    6692:	1a51      	subs	r1, r2, r1
    6694:	2900      	cmp	r1, #0
    6696:	dae6      	bge.n	6666 <tcp_receive+0x2a>
    6698:	e004      	b.n	66a4 <tcp_receive+0x68>
		    || (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    669a:	4a78      	ldr	r2, [pc, #480]	; (687c <tcp_receive+0x240>)
    669c:	6812      	ldr	r2, [r2, #0]
    669e:	89d2      	ldrh	r2, [r2, #14]
    66a0:	4290      	cmp	r0, r2
    66a2:	d2e4      	bcs.n	666e <tcp_receive+0x32>
			pcb->snd_wnd = tcphdr->wnd;
    66a4:	4a75      	ldr	r2, [pc, #468]	; (687c <tcp_receive+0x240>)
    66a6:	6812      	ldr	r2, [r2, #0]
    66a8:	89d1      	ldrh	r1, [r2, #14]
    66aa:	b288      	uxth	r0, r1
    66ac:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
			if (pcb->snd_wnd_max < tcphdr->wnd) {
    66b0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
    66b4:	89d2      	ldrh	r2, [r2, #14]
    66b6:	b291      	uxth	r1, r2
    66b8:	428d      	cmp	r5, r1
    66ba:	d201      	bcs.n	66c0 <tcp_receive+0x84>
				pcb->snd_wnd_max = tcphdr->wnd;
    66bc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
			pcb->snd_wl1 = seqno;
    66c0:	6563      	str	r3, [r4, #84]	; 0x54
			pcb->snd_wl2 = ackno;
    66c2:	4b6e      	ldr	r3, [pc, #440]	; (687c <tcp_receive+0x240>)
    66c4:	691b      	ldr	r3, [r3, #16]
    66c6:	65a3      	str	r3, [r4, #88]	; 0x58
			if (pcb->snd_wnd == 0) {
    66c8:	b948      	cbnz	r0, 66de <tcp_receive+0xa2>
				if (pcb->persist_backoff == 0) {
    66ca:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    66ce:	2b00      	cmp	r3, #0
    66d0:	d1cd      	bne.n	666e <tcp_receive+0x32>
					pcb->persist_cnt     = 0;
    66d2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
					pcb->persist_backoff = 1;
    66d6:	2301      	movs	r3, #1
    66d8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    66dc:	e7c7      	b.n	666e <tcp_receive+0x32>
			} else if (pcb->persist_backoff > 0) {
    66de:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    66e2:	2b00      	cmp	r3, #0
    66e4:	d0c3      	beq.n	666e <tcp_receive+0x32>
				pcb->persist_backoff = 0;
    66e6:	2300      	movs	r3, #0
    66e8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    66ec:	e7bf      	b.n	666e <tcp_receive+0x32>
			pcb->acked = 0;
    66ee:	2100      	movs	r1, #0
    66f0:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
			if (tcplen == 0) {
    66f4:	4961      	ldr	r1, [pc, #388]	; (687c <tcp_receive+0x240>)
    66f6:	8989      	ldrh	r1, [r1, #12]
    66f8:	bb79      	cbnz	r1, 675a <tcp_receive+0x11e>
				if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
    66fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
    66fc:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
    6700:	4401      	add	r1, r0
    6702:	428e      	cmp	r6, r1
    6704:	d001      	beq.n	670a <tcp_receive+0xce>
	int          found_dupack = 0;
    6706:	2300      	movs	r3, #0
    6708:	e028      	b.n	675c <tcp_receive+0x120>
					if (pcb->rtime >= 0) {
    670a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    670e:	2900      	cmp	r1, #0
    6710:	db2a      	blt.n	6768 <tcp_receive+0x12c>
						if (pcb->lastack == ackno) {
    6712:	429a      	cmp	r2, r3
    6714:	d001      	beq.n	671a <tcp_receive+0xde>
	int          found_dupack = 0;
    6716:	2300      	movs	r3, #0
    6718:	e020      	b.n	675c <tcp_receive+0x120>
							if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
    671a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    671e:	1c53      	adds	r3, r2, #1
    6720:	b2db      	uxtb	r3, r3
    6722:	429a      	cmp	r2, r3
    6724:	d201      	bcs.n	672a <tcp_receive+0xee>
								++pcb->dupacks;
    6726:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
							if (pcb->dupacks > 3) {
    672a:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    672e:	2b03      	cmp	r3, #3
    6730:	d90a      	bls.n	6748 <tcp_receive+0x10c>
								if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    6732:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    6736:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    6738:	4413      	add	r3, r2
    673a:	b29b      	uxth	r3, r3
    673c:	429a      	cmp	r2, r3
    673e:	d215      	bcs.n	676c <tcp_receive+0x130>
									pcb->cwnd += pcb->mss;
    6740:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
							found_dupack = 1;
    6744:	2301      	movs	r3, #1
    6746:	e009      	b.n	675c <tcp_receive+0x120>
							} else if (pcb->dupacks == 3) {
    6748:	2b03      	cmp	r3, #3
    674a:	d001      	beq.n	6750 <tcp_receive+0x114>
							found_dupack = 1;
    674c:	2301      	movs	r3, #1
    674e:	e005      	b.n	675c <tcp_receive+0x120>
								tcp_rexmit_fast(pcb);
    6750:	4620      	mov	r0, r4
    6752:	4b4b      	ldr	r3, [pc, #300]	; (6880 <tcp_receive+0x244>)
    6754:	4798      	blx	r3
							found_dupack = 1;
    6756:	2301      	movs	r3, #1
    6758:	e000      	b.n	675c <tcp_receive+0x120>
	int          found_dupack = 0;
    675a:	2300      	movs	r3, #0
			if (!found_dupack) {
    675c:	2b00      	cmp	r3, #0
    675e:	f040 80a5 	bne.w	68ac <tcp_receive+0x270>
				pcb->dupacks = 0;
    6762:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    6766:	e0a1      	b.n	68ac <tcp_receive+0x270>
	int          found_dupack = 0;
    6768:	2300      	movs	r3, #0
    676a:	e7f7      	b.n	675c <tcp_receive+0x120>
							found_dupack = 1;
    676c:	2301      	movs	r3, #1
    676e:	e7f5      	b.n	675c <tcp_receive+0x120>
			if (pcb->flags & TF_INFR) {
    6770:	7fa1      	ldrb	r1, [r4, #30]
    6772:	f011 0f04 	tst.w	r1, #4
    6776:	d006      	beq.n	6786 <tcp_receive+0x14a>
				pcb->flags &= ~TF_INFR;
    6778:	f021 0104 	bic.w	r1, r1, #4
    677c:	77a1      	strb	r1, [r4, #30]
				pcb->cwnd = pcb->ssthresh;
    677e:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6782:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
			pcb->nrtx = 0;
    6786:	2000      	movs	r0, #0
    6788:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
			pcb->rto = (pcb->sa >> 3) + pcb->sv;
    678c:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    6790:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    6794:	eb01 01e5 	add.w	r1, r1, r5, asr #3
    6798:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
			pcb->acked = (u16_t)(ackno - pcb->lastack);
    679c:	1ad3      	subs	r3, r2, r3
    679e:	b29b      	uxth	r3, r3
    67a0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
			pcb->snd_buf += pcb->acked;
    67a4:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
    67a8:	440b      	add	r3, r1
    67aa:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pcb->dupacks = 0;
    67ae:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
			pcb->lastack = ackno;
    67b2:	64a2      	str	r2, [r4, #72]	; 0x48
			if (pcb->state >= ESTABLISHED) {
    67b4:	7e23      	ldrb	r3, [r4, #24]
    67b6:	2b03      	cmp	r3, #3
    67b8:	d926      	bls.n	6808 <tcp_receive+0x1cc>
				if (pcb->cwnd < pcb->ssthresh) {
    67ba:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    67be:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    67c2:	429a      	cmp	r2, r3
    67c4:	d207      	bcs.n	67d6 <tcp_receive+0x19a>
					if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    67c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    67c8:	4413      	add	r3, r2
    67ca:	b29b      	uxth	r3, r3
    67cc:	429a      	cmp	r2, r3
    67ce:	d21b      	bcs.n	6808 <tcp_receive+0x1cc>
						pcb->cwnd += pcb->mss;
    67d0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    67d4:	e018      	b.n	6808 <tcp_receive+0x1cc>
					u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
    67d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    67d8:	fb03 f303 	mul.w	r3, r3, r3
    67dc:	fb93 f3f2 	sdiv	r3, r3, r2
    67e0:	fa12 f383 	uxtah	r3, r2, r3
    67e4:	b29b      	uxth	r3, r3
					if (new_cwnd > pcb->cwnd) {
    67e6:	429a      	cmp	r2, r3
    67e8:	d20e      	bcs.n	6808 <tcp_receive+0x1cc>
						pcb->cwnd = new_cwnd;
    67ea:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    67ee:	e00b      	b.n	6808 <tcp_receive+0x1cc>
				pcb->snd_queuelen -= pbuf_clen(next->p);
    67f0:	6868      	ldr	r0, [r5, #4]
    67f2:	4b24      	ldr	r3, [pc, #144]	; (6884 <tcp_receive+0x248>)
    67f4:	4798      	blx	r3
    67f6:	b280      	uxth	r0, r0
    67f8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    67fc:	1a18      	subs	r0, r3, r0
    67fe:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
				tcp_seg_free(next);
    6802:	4628      	mov	r0, r5
    6804:	4b20      	ldr	r3, [pc, #128]	; (6888 <tcp_receive+0x24c>)
    6806:	4798      	blx	r3
			while (pcb->unacked != NULL
    6808:	6f23      	ldr	r3, [r4, #112]	; 0x70
    680a:	b34b      	cbz	r3, 6860 <tcp_receive+0x224>
			       && TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked), ackno)) {
    680c:	68db      	ldr	r3, [r3, #12]
    680e:	6858      	ldr	r0, [r3, #4]
    6810:	4b1e      	ldr	r3, [pc, #120]	; (688c <tcp_receive+0x250>)
    6812:	4798      	blx	r3
    6814:	4605      	mov	r5, r0
    6816:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6818:	891e      	ldrh	r6, [r3, #8]
    681a:	68db      	ldr	r3, [r3, #12]
    681c:	8998      	ldrh	r0, [r3, #12]
    681e:	4b1c      	ldr	r3, [pc, #112]	; (6890 <tcp_receive+0x254>)
    6820:	4798      	blx	r3
    6822:	f010 0003 	ands.w	r0, r0, #3
    6826:	bf18      	it	ne
    6828:	2001      	movne	r0, #1
    682a:	4406      	add	r6, r0
    682c:	4435      	add	r5, r6
    682e:	4b13      	ldr	r3, [pc, #76]	; (687c <tcp_receive+0x240>)
    6830:	691b      	ldr	r3, [r3, #16]
    6832:	1aed      	subs	r5, r5, r3
    6834:	2d00      	cmp	r5, #0
    6836:	dc13      	bgt.n	6860 <tcp_receive+0x224>
				next         = pcb->unacked;
    6838:	6f25      	ldr	r5, [r4, #112]	; 0x70
				pcb->unacked = pcb->unacked->next;
    683a:	682b      	ldr	r3, [r5, #0]
    683c:	6723      	str	r3, [r4, #112]	; 0x70
				if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    683e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6842:	2b00      	cmp	r3, #0
    6844:	d0d4      	beq.n	67f0 <tcp_receive+0x1b4>
    6846:	68eb      	ldr	r3, [r5, #12]
    6848:	8998      	ldrh	r0, [r3, #12]
    684a:	4b11      	ldr	r3, [pc, #68]	; (6890 <tcp_receive+0x254>)
    684c:	4798      	blx	r3
    684e:	f010 0f01 	tst.w	r0, #1
    6852:	d0cd      	beq.n	67f0 <tcp_receive+0x1b4>
					pcb->acked--;
    6854:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6858:	3b01      	subs	r3, #1
    685a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    685e:	e7c7      	b.n	67f0 <tcp_receive+0x1b4>
			if (pcb->unacked == NULL)
    6860:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6862:	b123      	cbz	r3, 686e <tcp_receive+0x232>
				pcb->rtime = 0;
    6864:	2300      	movs	r3, #0
    6866:	86a3      	strh	r3, [r4, #52]	; 0x34
			pcb->polltmr = 0;
    6868:	2300      	movs	r3, #0
    686a:	77e3      	strb	r3, [r4, #31]
    686c:	e01e      	b.n	68ac <tcp_receive+0x270>
				pcb->rtime = -1;
    686e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6872:	86a3      	strh	r3, [r4, #52]	; 0x34
    6874:	e7f8      	b.n	6868 <tcp_receive+0x22c>
				pcb->unsent_oversize = 0;
    6876:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    687a:	e03b      	b.n	68f4 <tcp_receive+0x2b8>
    687c:	200080a4 	.word	0x200080a4
    6880:	000081f5 	.word	0x000081f5
    6884:	00005685 	.word	0x00005685
    6888:	0000595d 	.word	0x0000595d
    688c:	00003ec1 	.word	0x00003ec1
    6890:	00003e9d 	.word	0x00003e9d
			pcb->snd_queuelen -= pbuf_clen(next->p);
    6894:	6868      	ldr	r0, [r5, #4]
    6896:	4b93      	ldr	r3, [pc, #588]	; (6ae4 <tcp_receive+0x4a8>)
    6898:	4798      	blx	r3
    689a:	b280      	uxth	r0, r0
    689c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    68a0:	1a18      	subs	r0, r3, r0
    68a2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
			tcp_seg_free(next);
    68a6:	4628      	mov	r0, r5
    68a8:	4b8f      	ldr	r3, [pc, #572]	; (6ae8 <tcp_receive+0x4ac>)
    68aa:	4798      	blx	r3
		while (pcb->unsent != NULL
    68ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    68ae:	2b00      	cmp	r3, #0
    68b0:	d031      	beq.n	6916 <tcp_receive+0x2da>
		       && TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
    68b2:	4a8e      	ldr	r2, [pc, #568]	; (6aec <tcp_receive+0x4b0>)
    68b4:	6915      	ldr	r5, [r2, #16]
    68b6:	68db      	ldr	r3, [r3, #12]
    68b8:	6858      	ldr	r0, [r3, #4]
    68ba:	4b8d      	ldr	r3, [pc, #564]	; (6af0 <tcp_receive+0x4b4>)
    68bc:	4798      	blx	r3
    68be:	4606      	mov	r6, r0
    68c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    68c2:	891f      	ldrh	r7, [r3, #8]
    68c4:	68db      	ldr	r3, [r3, #12]
    68c6:	8998      	ldrh	r0, [r3, #12]
    68c8:	4b8a      	ldr	r3, [pc, #552]	; (6af4 <tcp_receive+0x4b8>)
    68ca:	4798      	blx	r3
    68cc:	f010 0003 	ands.w	r0, r0, #3
    68d0:	bf18      	it	ne
    68d2:	2001      	movne	r0, #1
    68d4:	4407      	add	r7, r0
    68d6:	443e      	add	r6, r7
    68d8:	1bad      	subs	r5, r5, r6
    68da:	2d00      	cmp	r5, #0
    68dc:	db1b      	blt.n	6916 <tcp_receive+0x2da>
    68de:	4b83      	ldr	r3, [pc, #524]	; (6aec <tcp_receive+0x4b0>)
    68e0:	691b      	ldr	r3, [r3, #16]
    68e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    68e4:	1a9b      	subs	r3, r3, r2
    68e6:	2b00      	cmp	r3, #0
    68e8:	dc15      	bgt.n	6916 <tcp_receive+0x2da>
			next        = pcb->unsent;
    68ea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
			pcb->unsent = pcb->unsent->next;
    68ec:	682b      	ldr	r3, [r5, #0]
    68ee:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (pcb->unsent == NULL) {
    68f0:	2b00      	cmp	r3, #0
    68f2:	d0c0      	beq.n	6876 <tcp_receive+0x23a>
			if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    68f4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    68f8:	2b00      	cmp	r3, #0
    68fa:	d0cb      	beq.n	6894 <tcp_receive+0x258>
    68fc:	68eb      	ldr	r3, [r5, #12]
    68fe:	8998      	ldrh	r0, [r3, #12]
    6900:	4b7c      	ldr	r3, [pc, #496]	; (6af4 <tcp_receive+0x4b8>)
    6902:	4798      	blx	r3
    6904:	f010 0f01 	tst.w	r0, #1
    6908:	d0c4      	beq.n	6894 <tcp_receive+0x258>
				pcb->acked--;
    690a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    690e:	3b01      	subs	r3, #1
    6910:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    6914:	e7be      	b.n	6894 <tcp_receive+0x258>
		if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
    6916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6918:	b12b      	cbz	r3, 6926 <tcp_receive+0x2ea>
    691a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    691c:	4973      	ldr	r1, [pc, #460]	; (6aec <tcp_receive+0x4b0>)
    691e:	6909      	ldr	r1, [r1, #16]
    6920:	1a52      	subs	r2, r2, r1
    6922:	2a00      	cmp	r2, #0
    6924:	db27      	blt.n	6976 <tcp_receive+0x33a>
	if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
    6926:	4b71      	ldr	r3, [pc, #452]	; (6aec <tcp_receive+0x4b0>)
    6928:	899b      	ldrh	r3, [r3, #12]
    692a:	2b00      	cmp	r3, #0
    692c:	f000 82a2 	beq.w	6e74 <tcp_receive+0x838>
    6930:	7e22      	ldrb	r2, [r4, #24]
    6932:	2a06      	cmp	r2, #6
    6934:	f200 829e 	bhi.w	6e74 <tcp_receive+0x838>
		if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
    6938:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    693a:	4a6c      	ldr	r2, [pc, #432]	; (6aec <tcp_receive+0x4b0>)
    693c:	6892      	ldr	r2, [r2, #8]
    693e:	1a8d      	subs	r5, r1, r2
    6940:	2d01      	cmp	r5, #1
    6942:	d404      	bmi.n	694e <tcp_receive+0x312>
    6944:	4413      	add	r3, r2
    6946:	1acb      	subs	r3, r1, r3
    6948:	3301      	adds	r3, #1
    694a:	2b00      	cmp	r3, #0
    694c:	dd36      	ble.n	69bc <tcp_receive+0x380>
			if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
    694e:	1a52      	subs	r2, r2, r1
    6950:	2a00      	cmp	r2, #0
    6952:	db5b      	blt.n	6a0c <tcp_receive+0x3d0>
		if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
    6954:	4b65      	ldr	r3, [pc, #404]	; (6aec <tcp_receive+0x4b0>)
    6956:	6899      	ldr	r1, [r3, #8]
    6958:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    695a:	1a8b      	subs	r3, r1, r2
    695c:	2b00      	cmp	r3, #0
    695e:	db05      	blt.n	696c <tcp_receive+0x330>
    6960:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6962:	4413      	add	r3, r2
    6964:	1acb      	subs	r3, r1, r3
    6966:	3301      	adds	r3, #1
    6968:	2b00      	cmp	r3, #0
    696a:	dd54      	ble.n	6a16 <tcp_receive+0x3da>
			tcp_send_empty_ack(pcb);
    696c:	4620      	mov	r0, r4
    696e:	4b62      	ldr	r3, [pc, #392]	; (6af8 <tcp_receive+0x4bc>)
    6970:	4798      	blx	r3
    6972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			m = (s16_t)(tcp_ticks - pcb->rttest);
    6976:	4a61      	ldr	r2, [pc, #388]	; (6afc <tcp_receive+0x4c0>)
    6978:	6812      	ldr	r2, [r2, #0]
    697a:	1ad2      	subs	r2, r2, r3
    697c:	b292      	uxth	r2, r2
			m = m - (pcb->sa >> 3);
    697e:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    6982:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
    6986:	b292      	uxth	r2, r2
    6988:	b213      	sxth	r3, r2
			pcb->sa += m;
    698a:	4411      	add	r1, r2
    698c:	b209      	sxth	r1, r1
    698e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
			if (m < 0) {
    6992:	2b00      	cmp	r3, #0
    6994:	db0f      	blt.n	69b6 <tcp_receive+0x37a>
			m = m - (pcb->sv >> 2);
    6996:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
    699a:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
			pcb->sv += m;
    699e:	fa12 f383 	uxtah	r3, r2, r3
    69a2:	b29b      	uxth	r3, r3
    69a4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
			pcb->rto = (pcb->sa >> 3) + pcb->sv;
    69a8:	eb03 03e1 	add.w	r3, r3, r1, asr #3
    69ac:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			pcb->rttest = 0;
    69b0:	2300      	movs	r3, #0
    69b2:	63a3      	str	r3, [r4, #56]	; 0x38
    69b4:	e7b7      	b.n	6926 <tcp_receive+0x2ea>
				m = -m;
    69b6:	4253      	negs	r3, r2
    69b8:	b21b      	sxth	r3, r3
    69ba:	e7ec      	b.n	6996 <tcp_receive+0x35a>
			off = pcb->rcv_nxt - seqno;
    69bc:	462b      	mov	r3, r5
			p   = inseg.p;
    69be:	4a4b      	ldr	r2, [pc, #300]	; (6aec <tcp_receive+0x4b0>)
    69c0:	6990      	ldr	r0, [r2, #24]
			if (inseg.p->len < off) {
    69c2:	8942      	ldrh	r2, [r0, #10]
    69c4:	4295      	cmp	r5, r2
    69c6:	dd1c      	ble.n	6a02 <tcp_receive+0x3c6>
				new_tot_len = (u16_t)(inseg.p->tot_len - off);
    69c8:	8901      	ldrh	r1, [r0, #8]
    69ca:	b2ad      	uxth	r5, r5
    69cc:	1b4d      	subs	r5, r1, r5
    69ce:	b2a9      	uxth	r1, r5
				while (p->len < off) {
    69d0:	e004      	b.n	69dc <tcp_receive+0x3a0>
					off -= p->len;
    69d2:	1a9b      	subs	r3, r3, r2
					p->tot_len = new_tot_len;
    69d4:	8101      	strh	r1, [r0, #8]
					p->len     = 0;
    69d6:	2200      	movs	r2, #0
    69d8:	8142      	strh	r2, [r0, #10]
					p          = p->next;
    69da:	6800      	ldr	r0, [r0, #0]
				while (p->len < off) {
    69dc:	8942      	ldrh	r2, [r0, #10]
    69de:	4293      	cmp	r3, r2
    69e0:	dcf7      	bgt.n	69d2 <tcp_receive+0x396>
				if (pbuf_header(p, (s16_t)-off)) {
    69e2:	425b      	negs	r3, r3
    69e4:	b219      	sxth	r1, r3
    69e6:	4b46      	ldr	r3, [pc, #280]	; (6b00 <tcp_receive+0x4c4>)
    69e8:	4798      	blx	r3
			inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
    69ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    69ec:	4b3f      	ldr	r3, [pc, #252]	; (6aec <tcp_receive+0x4b0>)
    69ee:	689a      	ldr	r2, [r3, #8]
    69f0:	1a52      	subs	r2, r2, r1
    69f2:	8b98      	ldrh	r0, [r3, #28]
    69f4:	fa10 f282 	uxtah	r2, r0, r2
    69f8:	839a      	strh	r2, [r3, #28]
			inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    69fa:	6a1a      	ldr	r2, [r3, #32]
    69fc:	6099      	str	r1, [r3, #8]
    69fe:	6051      	str	r1, [r2, #4]
    6a00:	e7a8      	b.n	6954 <tcp_receive+0x318>
				if (pbuf_header(inseg.p, (s16_t)-off)) {
    6a02:	4269      	negs	r1, r5
    6a04:	b209      	sxth	r1, r1
    6a06:	4b3e      	ldr	r3, [pc, #248]	; (6b00 <tcp_receive+0x4c4>)
    6a08:	4798      	blx	r3
    6a0a:	e7ee      	b.n	69ea <tcp_receive+0x3ae>
				tcp_ack_now(pcb);
    6a0c:	7fa3      	ldrb	r3, [r4, #30]
    6a0e:	f043 0302 	orr.w	r3, r3, #2
    6a12:	77a3      	strb	r3, [r4, #30]
    6a14:	e79e      	b.n	6954 <tcp_receive+0x318>
			if (pcb->rcv_nxt == seqno) {
    6a16:	4291      	cmp	r1, r2
    6a18:	d008      	beq.n	6a2c <tcp_receive+0x3f0>
				tcp_send_empty_ack(pcb);
    6a1a:	4620      	mov	r0, r4
    6a1c:	4b36      	ldr	r3, [pc, #216]	; (6af8 <tcp_receive+0x4bc>)
    6a1e:	4798      	blx	r3
				if (pcb->ooseq == NULL) {
    6a20:	6f65      	ldr	r5, [r4, #116]	; 0x74
    6a22:	2d00      	cmp	r5, #0
    6a24:	f000 8150 	beq.w	6cc8 <tcp_receive+0x68c>
    6a28:	2600      	movs	r6, #0
    6a2a:	e172      	b.n	6d12 <tcp_receive+0x6d6>
				tcplen = TCP_TCPLEN(&inseg);
    6a2c:	4e2f      	ldr	r6, [pc, #188]	; (6aec <tcp_receive+0x4b0>)
    6a2e:	8bb5      	ldrh	r5, [r6, #28]
    6a30:	6a33      	ldr	r3, [r6, #32]
    6a32:	8998      	ldrh	r0, [r3, #12]
    6a34:	4b2f      	ldr	r3, [pc, #188]	; (6af4 <tcp_receive+0x4b8>)
    6a36:	4798      	blx	r3
    6a38:	f010 0303 	ands.w	r3, r0, #3
    6a3c:	bf18      	it	ne
    6a3e:	2301      	movne	r3, #1
    6a40:	442b      	add	r3, r5
    6a42:	b29b      	uxth	r3, r3
    6a44:	81b3      	strh	r3, [r6, #12]
				if (tcplen > pcb->rcv_wnd) {
    6a46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    6a48:	4293      	cmp	r3, r2
    6a4a:	d80d      	bhi.n	6a68 <tcp_receive+0x42c>
				if (pcb->ooseq != NULL) {
    6a4c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    6a4e:	2b00      	cmp	r3, #0
    6a50:	f000 80bc 	beq.w	6bcc <tcp_receive+0x590>
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    6a54:	4b25      	ldr	r3, [pc, #148]	; (6aec <tcp_receive+0x4b0>)
    6a56:	6a1b      	ldr	r3, [r3, #32]
    6a58:	8998      	ldrh	r0, [r3, #12]
    6a5a:	4b26      	ldr	r3, [pc, #152]	; (6af4 <tcp_receive+0x4b8>)
    6a5c:	4798      	blx	r3
    6a5e:	f010 0f01 	tst.w	r0, #1
    6a62:	d137      	bne.n	6ad4 <tcp_receive+0x498>
						next = pcb->ooseq;
    6a64:	6f65      	ldr	r5, [r4, #116]	; 0x74
						while (next && TCP_SEQ_GEQ(seqno + tcplen, next->tcphdr->seqno + next->len)) {
    6a66:	e056      	b.n	6b16 <tcp_receive+0x4da>
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    6a68:	6a33      	ldr	r3, [r6, #32]
    6a6a:	8998      	ldrh	r0, [r3, #12]
    6a6c:	4b21      	ldr	r3, [pc, #132]	; (6af4 <tcp_receive+0x4b8>)
    6a6e:	4798      	blx	r3
    6a70:	f010 0f01 	tst.w	r0, #1
    6a74:	d11e      	bne.n	6ab4 <tcp_receive+0x478>
					inseg.len = pcb->rcv_wnd;
    6a76:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    6a78:	4b1c      	ldr	r3, [pc, #112]	; (6aec <tcp_receive+0x4b0>)
    6a7a:	839a      	strh	r2, [r3, #28]
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    6a7c:	6a1b      	ldr	r3, [r3, #32]
    6a7e:	8998      	ldrh	r0, [r3, #12]
    6a80:	4b1c      	ldr	r3, [pc, #112]	; (6af4 <tcp_receive+0x4b8>)
    6a82:	4798      	blx	r3
    6a84:	f010 0f02 	tst.w	r0, #2
    6a88:	d003      	beq.n	6a92 <tcp_receive+0x456>
						inseg.len -= 1;
    6a8a:	4a18      	ldr	r2, [pc, #96]	; (6aec <tcp_receive+0x4b0>)
    6a8c:	8b93      	ldrh	r3, [r2, #28]
    6a8e:	3b01      	subs	r3, #1
    6a90:	8393      	strh	r3, [r2, #28]
					pbuf_realloc(inseg.p, inseg.len);
    6a92:	4d16      	ldr	r5, [pc, #88]	; (6aec <tcp_receive+0x4b0>)
    6a94:	8ba9      	ldrh	r1, [r5, #28]
    6a96:	69a8      	ldr	r0, [r5, #24]
    6a98:	4b1a      	ldr	r3, [pc, #104]	; (6b04 <tcp_receive+0x4c8>)
    6a9a:	4798      	blx	r3
					tcplen = TCP_TCPLEN(&inseg);
    6a9c:	8bae      	ldrh	r6, [r5, #28]
    6a9e:	6a2b      	ldr	r3, [r5, #32]
    6aa0:	8998      	ldrh	r0, [r3, #12]
    6aa2:	4b14      	ldr	r3, [pc, #80]	; (6af4 <tcp_receive+0x4b8>)
    6aa4:	4798      	blx	r3
    6aa6:	f010 0003 	ands.w	r0, r0, #3
    6aaa:	bf18      	it	ne
    6aac:	2001      	movne	r0, #1
    6aae:	4406      	add	r6, r0
    6ab0:	81ae      	strh	r6, [r5, #12]
    6ab2:	e7cb      	b.n	6a4c <tcp_receive+0x410>
						TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~TCP_FIN);
    6ab4:	6a36      	ldr	r6, [r6, #32]
    6ab6:	89b0      	ldrh	r0, [r6, #12]
    6ab8:	b205      	sxth	r5, r0
    6aba:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
    6abe:	b280      	uxth	r0, r0
    6ac0:	4b0c      	ldr	r3, [pc, #48]	; (6af4 <tcp_receive+0x4b8>)
    6ac2:	4798      	blx	r3
    6ac4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    6ac8:	4b0f      	ldr	r3, [pc, #60]	; (6b08 <tcp_receive+0x4cc>)
    6aca:	4798      	blx	r3
    6acc:	b200      	sxth	r0, r0
    6ace:	4305      	orrs	r5, r0
    6ad0:	81b5      	strh	r5, [r6, #12]
    6ad2:	e7d0      	b.n	6a76 <tcp_receive+0x43a>
						while (pcb->ooseq != NULL) {
    6ad4:	6f60      	ldr	r0, [r4, #116]	; 0x74
    6ad6:	2800      	cmp	r0, #0
    6ad8:	d078      	beq.n	6bcc <tcp_receive+0x590>
							pcb->ooseq                = pcb->ooseq->next;
    6ada:	6803      	ldr	r3, [r0, #0]
    6adc:	6763      	str	r3, [r4, #116]	; 0x74
							tcp_seg_free(old_ooseq);
    6ade:	4b02      	ldr	r3, [pc, #8]	; (6ae8 <tcp_receive+0x4ac>)
    6ae0:	4798      	blx	r3
    6ae2:	e7f7      	b.n	6ad4 <tcp_receive+0x498>
    6ae4:	00005685 	.word	0x00005685
    6ae8:	0000595d 	.word	0x0000595d
    6aec:	200080a4 	.word	0x200080a4
    6af0:	00003ec1 	.word	0x00003ec1
    6af4:	00003e9d 	.word	0x00003e9d
    6af8:	00007e71 	.word	0x00007e71
    6afc:	200161d8 	.word	0x200161d8
    6b00:	00005427 	.word	0x00005427
    6b04:	0000562d 	.word	0x0000562d
    6b08:	00003e91 	.word	0x00003e91
							next = next->next;
    6b0c:	682e      	ldr	r6, [r5, #0]
							tcp_seg_free(prev);
    6b0e:	4628      	mov	r0, r5
    6b10:	4b9e      	ldr	r3, [pc, #632]	; (6d8c <tcp_receive+0x750>)
    6b12:	4798      	blx	r3
							next = next->next;
    6b14:	4635      	mov	r5, r6
						while (next && TCP_SEQ_GEQ(seqno + tcplen, next->tcphdr->seqno + next->len)) {
    6b16:	2d00      	cmp	r5, #0
    6b18:	d02f      	beq.n	6b7a <tcp_receive+0x53e>
    6b1a:	4a9d      	ldr	r2, [pc, #628]	; (6d90 <tcp_receive+0x754>)
    6b1c:	8993      	ldrh	r3, [r2, #12]
    6b1e:	6892      	ldr	r2, [r2, #8]
    6b20:	4413      	add	r3, r2
    6b22:	68e9      	ldr	r1, [r5, #12]
    6b24:	684a      	ldr	r2, [r1, #4]
    6b26:	8928      	ldrh	r0, [r5, #8]
    6b28:	4402      	add	r2, r0
    6b2a:	1a9b      	subs	r3, r3, r2
    6b2c:	2b00      	cmp	r3, #0
    6b2e:	db24      	blt.n	6b7a <tcp_receive+0x53e>
							if (TCPH_FLAGS(next->tcphdr) & TCP_FIN && (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
    6b30:	8988      	ldrh	r0, [r1, #12]
    6b32:	4b98      	ldr	r3, [pc, #608]	; (6d94 <tcp_receive+0x758>)
    6b34:	4798      	blx	r3
    6b36:	f010 0f01 	tst.w	r0, #1
    6b3a:	d0e7      	beq.n	6b0c <tcp_receive+0x4d0>
    6b3c:	4b94      	ldr	r3, [pc, #592]	; (6d90 <tcp_receive+0x754>)
    6b3e:	6a1b      	ldr	r3, [r3, #32]
    6b40:	8998      	ldrh	r0, [r3, #12]
    6b42:	4b94      	ldr	r3, [pc, #592]	; (6d94 <tcp_receive+0x758>)
    6b44:	4798      	blx	r3
    6b46:	f010 0f02 	tst.w	r0, #2
    6b4a:	d1df      	bne.n	6b0c <tcp_receive+0x4d0>
								TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
    6b4c:	4e90      	ldr	r6, [pc, #576]	; (6d90 <tcp_receive+0x754>)
    6b4e:	f8d6 8020 	ldr.w	r8, [r6, #32]
    6b52:	f8b8 700c 	ldrh.w	r7, [r8, #12]
    6b56:	2001      	movs	r0, #1
    6b58:	4b8f      	ldr	r3, [pc, #572]	; (6d98 <tcp_receive+0x75c>)
    6b5a:	4798      	blx	r3
    6b5c:	4338      	orrs	r0, r7
    6b5e:	f8a8 000c 	strh.w	r0, [r8, #12]
								tcplen = TCP_TCPLEN(&inseg);
    6b62:	8bb7      	ldrh	r7, [r6, #28]
    6b64:	6a33      	ldr	r3, [r6, #32]
    6b66:	8998      	ldrh	r0, [r3, #12]
    6b68:	4b8a      	ldr	r3, [pc, #552]	; (6d94 <tcp_receive+0x758>)
    6b6a:	4798      	blx	r3
    6b6c:	f010 0003 	ands.w	r0, r0, #3
    6b70:	bf18      	it	ne
    6b72:	2001      	movne	r0, #1
    6b74:	4407      	add	r7, r0
    6b76:	81b7      	strh	r7, [r6, #12]
    6b78:	e7c8      	b.n	6b0c <tcp_receive+0x4d0>
						if (next && TCP_SEQ_GT(seqno + tcplen, next->tcphdr->seqno)) {
    6b7a:	b335      	cbz	r5, 6bca <tcp_receive+0x58e>
    6b7c:	4b84      	ldr	r3, [pc, #528]	; (6d90 <tcp_receive+0x754>)
    6b7e:	6899      	ldr	r1, [r3, #8]
    6b80:	899b      	ldrh	r3, [r3, #12]
    6b82:	440b      	add	r3, r1
    6b84:	68ea      	ldr	r2, [r5, #12]
    6b86:	6852      	ldr	r2, [r2, #4]
    6b88:	1a9b      	subs	r3, r3, r2
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	dd1d      	ble.n	6bca <tcp_receive+0x58e>
							inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
    6b8e:	1a52      	subs	r2, r2, r1
    6b90:	4b7f      	ldr	r3, [pc, #508]	; (6d90 <tcp_receive+0x754>)
    6b92:	839a      	strh	r2, [r3, #28]
							if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    6b94:	6a1b      	ldr	r3, [r3, #32]
    6b96:	8998      	ldrh	r0, [r3, #12]
    6b98:	4b7e      	ldr	r3, [pc, #504]	; (6d94 <tcp_receive+0x758>)
    6b9a:	4798      	blx	r3
    6b9c:	f010 0f02 	tst.w	r0, #2
    6ba0:	d003      	beq.n	6baa <tcp_receive+0x56e>
								inseg.len -= 1;
    6ba2:	4a7b      	ldr	r2, [pc, #492]	; (6d90 <tcp_receive+0x754>)
    6ba4:	8b93      	ldrh	r3, [r2, #28]
    6ba6:	3b01      	subs	r3, #1
    6ba8:	8393      	strh	r3, [r2, #28]
							pbuf_realloc(inseg.p, inseg.len);
    6baa:	4e79      	ldr	r6, [pc, #484]	; (6d90 <tcp_receive+0x754>)
    6bac:	8bb1      	ldrh	r1, [r6, #28]
    6bae:	69b0      	ldr	r0, [r6, #24]
    6bb0:	4b7a      	ldr	r3, [pc, #488]	; (6d9c <tcp_receive+0x760>)
    6bb2:	4798      	blx	r3
							tcplen = TCP_TCPLEN(&inseg);
    6bb4:	8bb7      	ldrh	r7, [r6, #28]
    6bb6:	6a33      	ldr	r3, [r6, #32]
    6bb8:	8998      	ldrh	r0, [r3, #12]
    6bba:	4b76      	ldr	r3, [pc, #472]	; (6d94 <tcp_receive+0x758>)
    6bbc:	4798      	blx	r3
    6bbe:	f010 0003 	ands.w	r0, r0, #3
    6bc2:	bf18      	it	ne
    6bc4:	2001      	movne	r0, #1
    6bc6:	4407      	add	r7, r0
    6bc8:	81b7      	strh	r7, [r6, #12]
						pcb->ooseq = next;
    6bca:	6765      	str	r5, [r4, #116]	; 0x74
				pcb->rcv_nxt = seqno + tcplen;
    6bcc:	4d70      	ldr	r5, [pc, #448]	; (6d90 <tcp_receive+0x754>)
    6bce:	89aa      	ldrh	r2, [r5, #12]
    6bd0:	68ab      	ldr	r3, [r5, #8]
    6bd2:	4413      	add	r3, r2
    6bd4:	62a3      	str	r3, [r4, #40]	; 0x28
				pcb->rcv_wnd -= tcplen;
    6bd6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6bd8:	1a9b      	subs	r3, r3, r2
    6bda:	85a3      	strh	r3, [r4, #44]	; 0x2c
				tcp_update_rcv_ann_wnd(pcb);
    6bdc:	4620      	mov	r0, r4
    6bde:	4b70      	ldr	r3, [pc, #448]	; (6da0 <tcp_receive+0x764>)
    6be0:	4798      	blx	r3
				if (inseg.p->tot_len > 0) {
    6be2:	69ab      	ldr	r3, [r5, #24]
    6be4:	891a      	ldrh	r2, [r3, #8]
    6be6:	b112      	cbz	r2, 6bee <tcp_receive+0x5b2>
					recv_data = inseg.p;
    6be8:	626b      	str	r3, [r5, #36]	; 0x24
					inseg.p = NULL;
    6bea:	2300      	movs	r3, #0
    6bec:	61ab      	str	r3, [r5, #24]
				if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    6bee:	4b68      	ldr	r3, [pc, #416]	; (6d90 <tcp_receive+0x754>)
    6bf0:	6a1b      	ldr	r3, [r3, #32]
    6bf2:	8998      	ldrh	r0, [r3, #12]
    6bf4:	4b67      	ldr	r3, [pc, #412]	; (6d94 <tcp_receive+0x758>)
    6bf6:	4798      	blx	r3
    6bf8:	f010 0f01 	tst.w	r0, #1
    6bfc:	d021      	beq.n	6c42 <tcp_receive+0x606>
					recv_flags |= TF_GOT_FIN;
    6bfe:	4a64      	ldr	r2, [pc, #400]	; (6d90 <tcp_receive+0x754>)
    6c00:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    6c04:	f043 0320 	orr.w	r3, r3, #32
    6c08:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    6c0c:	e019      	b.n	6c42 <tcp_receive+0x606>
							recv_data = cseg->p;
    6c0e:	4b60      	ldr	r3, [pc, #384]	; (6d90 <tcp_receive+0x754>)
    6c10:	6259      	str	r1, [r3, #36]	; 0x24
						cseg->p = NULL;
    6c12:	2300      	movs	r3, #0
    6c14:	606b      	str	r3, [r5, #4]
					if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    6c16:	68eb      	ldr	r3, [r5, #12]
    6c18:	8998      	ldrh	r0, [r3, #12]
    6c1a:	4b5e      	ldr	r3, [pc, #376]	; (6d94 <tcp_receive+0x758>)
    6c1c:	4798      	blx	r3
    6c1e:	f010 0f01 	tst.w	r0, #1
    6c22:	d009      	beq.n	6c38 <tcp_receive+0x5fc>
						recv_flags |= TF_GOT_FIN;
    6c24:	4a5a      	ldr	r2, [pc, #360]	; (6d90 <tcp_receive+0x754>)
    6c26:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    6c2a:	f043 0320 	orr.w	r3, r3, #32
    6c2e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
						if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
    6c32:	7e23      	ldrb	r3, [r4, #24]
    6c34:	2b04      	cmp	r3, #4
    6c36:	d034      	beq.n	6ca2 <tcp_receive+0x666>
					pcb->ooseq = cseg->next;
    6c38:	682b      	ldr	r3, [r5, #0]
    6c3a:	6763      	str	r3, [r4, #116]	; 0x74
					tcp_seg_free(cseg);
    6c3c:	4628      	mov	r0, r5
    6c3e:	4b53      	ldr	r3, [pc, #332]	; (6d8c <tcp_receive+0x750>)
    6c40:	4798      	blx	r3
				while (pcb->ooseq != NULL && pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
    6c42:	6f65      	ldr	r5, [r4, #116]	; 0x74
    6c44:	2d00      	cmp	r5, #0
    6c46:	d02f      	beq.n	6ca8 <tcp_receive+0x66c>
    6c48:	68ea      	ldr	r2, [r5, #12]
    6c4a:	6853      	ldr	r3, [r2, #4]
    6c4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6c4e:	428b      	cmp	r3, r1
    6c50:	d12a      	bne.n	6ca8 <tcp_receive+0x66c>
					seqno = pcb->ooseq->tcphdr->seqno;
    6c52:	494f      	ldr	r1, [pc, #316]	; (6d90 <tcp_receive+0x754>)
    6c54:	608b      	str	r3, [r1, #8]
					pcb->rcv_nxt += TCP_TCPLEN(cseg);
    6c56:	892e      	ldrh	r6, [r5, #8]
    6c58:	8990      	ldrh	r0, [r2, #12]
    6c5a:	4f4e      	ldr	r7, [pc, #312]	; (6d94 <tcp_receive+0x758>)
    6c5c:	47b8      	blx	r7
    6c5e:	f010 0003 	ands.w	r0, r0, #3
    6c62:	bf18      	it	ne
    6c64:	2001      	movne	r0, #1
    6c66:	4406      	add	r6, r0
    6c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6c6a:	4433      	add	r3, r6
    6c6c:	62a3      	str	r3, [r4, #40]	; 0x28
					pcb->rcv_wnd -= TCP_TCPLEN(cseg);
    6c6e:	892e      	ldrh	r6, [r5, #8]
    6c70:	68eb      	ldr	r3, [r5, #12]
    6c72:	8998      	ldrh	r0, [r3, #12]
    6c74:	47b8      	blx	r7
    6c76:	f010 0003 	ands.w	r0, r0, #3
    6c7a:	bf18      	it	ne
    6c7c:	2001      	movne	r0, #1
    6c7e:	4406      	add	r6, r0
    6c80:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6c82:	1b9b      	subs	r3, r3, r6
    6c84:	85a3      	strh	r3, [r4, #44]	; 0x2c
					tcp_update_rcv_ann_wnd(pcb);
    6c86:	4620      	mov	r0, r4
    6c88:	4b45      	ldr	r3, [pc, #276]	; (6da0 <tcp_receive+0x764>)
    6c8a:	4798      	blx	r3
					if (cseg->p->tot_len > 0) {
    6c8c:	6869      	ldr	r1, [r5, #4]
    6c8e:	890b      	ldrh	r3, [r1, #8]
    6c90:	2b00      	cmp	r3, #0
    6c92:	d0c0      	beq.n	6c16 <tcp_receive+0x5da>
						if (recv_data) {
    6c94:	4b3e      	ldr	r3, [pc, #248]	; (6d90 <tcp_receive+0x754>)
    6c96:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6c98:	2800      	cmp	r0, #0
    6c9a:	d0b8      	beq.n	6c0e <tcp_receive+0x5d2>
							pbuf_cat(recv_data, cseg->p);
    6c9c:	4b41      	ldr	r3, [pc, #260]	; (6da4 <tcp_receive+0x768>)
    6c9e:	4798      	blx	r3
    6ca0:	e7b7      	b.n	6c12 <tcp_receive+0x5d6>
							pcb->state = CLOSE_WAIT;
    6ca2:	2307      	movs	r3, #7
    6ca4:	7623      	strb	r3, [r4, #24]
    6ca6:	e7c7      	b.n	6c38 <tcp_receive+0x5fc>
				tcp_ack(pcb);
    6ca8:	7fa3      	ldrb	r3, [r4, #30]
    6caa:	f013 0f01 	tst.w	r3, #1
    6cae:	d006      	beq.n	6cbe <tcp_receive+0x682>
    6cb0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6cb4:	f043 0302 	orr.w	r3, r3, #2
    6cb8:	77a3      	strb	r3, [r4, #30]
    6cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cbe:	f043 0301 	orr.w	r3, r3, #1
    6cc2:	77a3      	strb	r3, [r4, #30]
    6cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pcb->ooseq = tcp_seg_copy(&inseg);
    6cc8:	4837      	ldr	r0, [pc, #220]	; (6da8 <tcp_receive+0x76c>)
    6cca:	4b38      	ldr	r3, [pc, #224]	; (6dac <tcp_receive+0x770>)
    6ccc:	4798      	blx	r3
    6cce:	6760      	str	r0, [r4, #116]	; 0x74
    6cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							if (inseg.len > next->len) {
    6cd4:	4b2e      	ldr	r3, [pc, #184]	; (6d90 <tcp_receive+0x754>)
    6cd6:	8b9a      	ldrh	r2, [r3, #28]
    6cd8:	892b      	ldrh	r3, [r5, #8]
    6cda:	429a      	cmp	r2, r3
    6cdc:	f240 80da 	bls.w	6e94 <tcp_receive+0x858>
								cseg = tcp_seg_copy(&inseg);
    6ce0:	4831      	ldr	r0, [pc, #196]	; (6da8 <tcp_receive+0x76c>)
    6ce2:	4b32      	ldr	r3, [pc, #200]	; (6dac <tcp_receive+0x770>)
    6ce4:	4798      	blx	r3
								if (cseg != NULL) {
    6ce6:	4603      	mov	r3, r0
    6ce8:	2800      	cmp	r0, #0
    6cea:	f000 80d3 	beq.w	6e94 <tcp_receive+0x858>
									if (prev != NULL) {
    6cee:	b136      	cbz	r6, 6cfe <tcp_receive+0x6c2>
										prev->next = cseg;
    6cf0:	6030      	str	r0, [r6, #0]
									tcp_oos_insert_segment(cseg, next);
    6cf2:	4629      	mov	r1, r5
    6cf4:	4618      	mov	r0, r3
    6cf6:	4b2e      	ldr	r3, [pc, #184]	; (6db0 <tcp_receive+0x774>)
    6cf8:	4798      	blx	r3
    6cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
										pcb->ooseq = cseg;
    6cfe:	6760      	str	r0, [r4, #116]	; 0x74
    6d00:	e7f7      	b.n	6cf2 <tcp_receive+0x6b6>
								if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
    6d02:	1a5a      	subs	r2, r3, r1
    6d04:	2a00      	cmp	r2, #0
    6d06:	db35      	blt.n	6d74 <tcp_receive+0x738>
							if (next->next == NULL && TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    6d08:	682a      	ldr	r2, [r5, #0]
    6d0a:	462e      	mov	r6, r5
    6d0c:	2a00      	cmp	r2, #0
    6d0e:	d051      	beq.n	6db4 <tcp_receive+0x778>
    6d10:	4615      	mov	r5, r2
					for (next = pcb->ooseq; next != NULL; next = next->next) {
    6d12:	2d00      	cmp	r5, #0
    6d14:	f000 80ac 	beq.w	6e70 <tcp_receive+0x834>
						if (seqno == next->tcphdr->seqno) {
    6d18:	68e8      	ldr	r0, [r5, #12]
    6d1a:	6841      	ldr	r1, [r0, #4]
    6d1c:	4b1c      	ldr	r3, [pc, #112]	; (6d90 <tcp_receive+0x754>)
    6d1e:	689b      	ldr	r3, [r3, #8]
    6d20:	4299      	cmp	r1, r3
    6d22:	d0d7      	beq.n	6cd4 <tcp_receive+0x698>
							if (prev == NULL) {
    6d24:	2e00      	cmp	r6, #0
    6d26:	d0ec      	beq.n	6d02 <tcp_receive+0x6c6>
								if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
    6d28:	68f2      	ldr	r2, [r6, #12]
    6d2a:	6852      	ldr	r2, [r2, #4]
    6d2c:	1a9a      	subs	r2, r3, r2
    6d2e:	2a01      	cmp	r2, #1
    6d30:	d4ea      	bmi.n	6d08 <tcp_receive+0x6cc>
    6d32:	1a5a      	subs	r2, r3, r1
    6d34:	3201      	adds	r2, #1
    6d36:	2a00      	cmp	r2, #0
    6d38:	dce6      	bgt.n	6d08 <tcp_receive+0x6cc>
									cseg = tcp_seg_copy(&inseg);
    6d3a:	481b      	ldr	r0, [pc, #108]	; (6da8 <tcp_receive+0x76c>)
    6d3c:	4b1b      	ldr	r3, [pc, #108]	; (6dac <tcp_receive+0x770>)
    6d3e:	4798      	blx	r3
									if (cseg != NULL) {
    6d40:	4604      	mov	r4, r0
    6d42:	2800      	cmp	r0, #0
    6d44:	f000 80a6 	beq.w	6e94 <tcp_receive+0x858>
										if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
    6d48:	68f3      	ldr	r3, [r6, #12]
    6d4a:	6859      	ldr	r1, [r3, #4]
    6d4c:	8932      	ldrh	r2, [r6, #8]
    6d4e:	440a      	add	r2, r1
    6d50:	4b0f      	ldr	r3, [pc, #60]	; (6d90 <tcp_receive+0x754>)
    6d52:	689b      	ldr	r3, [r3, #8]
    6d54:	1ad2      	subs	r2, r2, r3
    6d56:	2a00      	cmp	r2, #0
    6d58:	dd05      	ble.n	6d66 <tcp_receive+0x72a>
											prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
    6d5a:	1a5b      	subs	r3, r3, r1
    6d5c:	b299      	uxth	r1, r3
    6d5e:	8131      	strh	r1, [r6, #8]
											pbuf_realloc(prev->p, prev->len);
    6d60:	6870      	ldr	r0, [r6, #4]
    6d62:	4b0e      	ldr	r3, [pc, #56]	; (6d9c <tcp_receive+0x760>)
    6d64:	4798      	blx	r3
										prev->next = cseg;
    6d66:	6034      	str	r4, [r6, #0]
										tcp_oos_insert_segment(cseg, next);
    6d68:	4629      	mov	r1, r5
    6d6a:	4620      	mov	r0, r4
    6d6c:	4b10      	ldr	r3, [pc, #64]	; (6db0 <tcp_receive+0x774>)
    6d6e:	4798      	blx	r3
    6d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
									cseg = tcp_seg_copy(&inseg);
    6d74:	480c      	ldr	r0, [pc, #48]	; (6da8 <tcp_receive+0x76c>)
    6d76:	4b0d      	ldr	r3, [pc, #52]	; (6dac <tcp_receive+0x770>)
    6d78:	4798      	blx	r3
									if (cseg != NULL) {
    6d7a:	2800      	cmp	r0, #0
    6d7c:	f000 808a 	beq.w	6e94 <tcp_receive+0x858>
										pcb->ooseq = cseg;
    6d80:	6760      	str	r0, [r4, #116]	; 0x74
										tcp_oos_insert_segment(cseg, next);
    6d82:	4629      	mov	r1, r5
    6d84:	4b0a      	ldr	r3, [pc, #40]	; (6db0 <tcp_receive+0x774>)
    6d86:	4798      	blx	r3
    6d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d8c:	0000595d 	.word	0x0000595d
    6d90:	200080a4 	.word	0x200080a4
    6d94:	00003e9d 	.word	0x00003e9d
    6d98:	00003e91 	.word	0x00003e91
    6d9c:	0000562d 	.word	0x0000562d
    6da0:	000058e1 	.word	0x000058e1
    6da4:	000056a1 	.word	0x000056a1
    6da8:	200080b8 	.word	0x200080b8
    6dac:	00005999 	.word	0x00005999
    6db0:	000065a5 	.word	0x000065a5
							if (next->next == NULL && TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    6db4:	1a5b      	subs	r3, r3, r1
    6db6:	2b00      	cmp	r3, #0
    6db8:	dc01      	bgt.n	6dbe <tcp_receive+0x782>
    6dba:	4615      	mov	r5, r2
    6dbc:	e7a9      	b.n	6d12 <tcp_receive+0x6d6>
								if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    6dbe:	8980      	ldrh	r0, [r0, #12]
    6dc0:	4b35      	ldr	r3, [pc, #212]	; (6e98 <tcp_receive+0x85c>)
    6dc2:	4798      	blx	r3
    6dc4:	f010 0f01 	tst.w	r0, #1
    6dc8:	d164      	bne.n	6e94 <tcp_receive+0x858>
								next->next = tcp_seg_copy(&inseg);
    6dca:	4834      	ldr	r0, [pc, #208]	; (6e9c <tcp_receive+0x860>)
    6dcc:	4b34      	ldr	r3, [pc, #208]	; (6ea0 <tcp_receive+0x864>)
    6dce:	4798      	blx	r3
    6dd0:	6028      	str	r0, [r5, #0]
								if (next->next != NULL) {
    6dd2:	2800      	cmp	r0, #0
    6dd4:	d05e      	beq.n	6e94 <tcp_receive+0x858>
									if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
    6dd6:	68eb      	ldr	r3, [r5, #12]
    6dd8:	6859      	ldr	r1, [r3, #4]
    6dda:	892a      	ldrh	r2, [r5, #8]
    6ddc:	440a      	add	r2, r1
    6dde:	4b31      	ldr	r3, [pc, #196]	; (6ea4 <tcp_receive+0x868>)
    6de0:	689b      	ldr	r3, [r3, #8]
    6de2:	1ad2      	subs	r2, r2, r3
    6de4:	2a00      	cmp	r2, #0
    6de6:	dd05      	ble.n	6df4 <tcp_receive+0x7b8>
										next->len = (u16_t)(seqno - next->tcphdr->seqno);
    6de8:	1a5b      	subs	r3, r3, r1
    6dea:	b299      	uxth	r1, r3
    6dec:	8129      	strh	r1, [r5, #8]
										pbuf_realloc(next->p, next->len);
    6dee:	6868      	ldr	r0, [r5, #4]
    6df0:	4b2d      	ldr	r3, [pc, #180]	; (6ea8 <tcp_receive+0x86c>)
    6df2:	4798      	blx	r3
									if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
    6df4:	4b2b      	ldr	r3, [pc, #172]	; (6ea4 <tcp_receive+0x868>)
    6df6:	899a      	ldrh	r2, [r3, #12]
    6df8:	689b      	ldr	r3, [r3, #8]
    6dfa:	441a      	add	r2, r3
    6dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6dfe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    6e00:	440b      	add	r3, r1
    6e02:	429a      	cmp	r2, r3
    6e04:	d946      	bls.n	6e94 <tcp_receive+0x858>
										if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
    6e06:	682b      	ldr	r3, [r5, #0]
    6e08:	68db      	ldr	r3, [r3, #12]
    6e0a:	8998      	ldrh	r0, [r3, #12]
    6e0c:	4b22      	ldr	r3, [pc, #136]	; (6e98 <tcp_receive+0x85c>)
    6e0e:	4798      	blx	r3
    6e10:	f010 0f01 	tst.w	r0, #1
    6e14:	d11b      	bne.n	6e4e <tcp_receive+0x812>
										next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
    6e16:	682a      	ldr	r2, [r5, #0]
    6e18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6e1a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6e1c:	440b      	add	r3, r1
    6e1e:	b29b      	uxth	r3, r3
    6e20:	4e20      	ldr	r6, [pc, #128]	; (6ea4 <tcp_receive+0x868>)
    6e22:	68b1      	ldr	r1, [r6, #8]
    6e24:	1a5b      	subs	r3, r3, r1
    6e26:	8113      	strh	r3, [r2, #8]
										pbuf_realloc(next->next->p, next->next->len);
    6e28:	682b      	ldr	r3, [r5, #0]
    6e2a:	8919      	ldrh	r1, [r3, #8]
    6e2c:	6858      	ldr	r0, [r3, #4]
    6e2e:	4b1e      	ldr	r3, [pc, #120]	; (6ea8 <tcp_receive+0x86c>)
    6e30:	4798      	blx	r3
										tcplen = TCP_TCPLEN(next->next);
    6e32:	682b      	ldr	r3, [r5, #0]
    6e34:	891c      	ldrh	r4, [r3, #8]
    6e36:	68db      	ldr	r3, [r3, #12]
    6e38:	8998      	ldrh	r0, [r3, #12]
    6e3a:	4b17      	ldr	r3, [pc, #92]	; (6e98 <tcp_receive+0x85c>)
    6e3c:	4798      	blx	r3
    6e3e:	f010 0003 	ands.w	r0, r0, #3
    6e42:	bf18      	it	ne
    6e44:	2001      	movne	r0, #1
    6e46:	4404      	add	r4, r0
    6e48:	81b4      	strh	r4, [r6, #12]
    6e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
											TCPH_FLAGS_SET(next->next->tcphdr,
    6e4e:	682b      	ldr	r3, [r5, #0]
    6e50:	68df      	ldr	r7, [r3, #12]
    6e52:	89b8      	ldrh	r0, [r7, #12]
    6e54:	b206      	sxth	r6, r0
    6e56:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
    6e5a:	b280      	uxth	r0, r0
    6e5c:	4b0e      	ldr	r3, [pc, #56]	; (6e98 <tcp_receive+0x85c>)
    6e5e:	4798      	blx	r3
    6e60:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    6e64:	4b11      	ldr	r3, [pc, #68]	; (6eac <tcp_receive+0x870>)
    6e66:	4798      	blx	r3
    6e68:	b200      	sxth	r0, r0
    6e6a:	4306      	orrs	r6, r0
    6e6c:	81be      	strh	r6, [r7, #12]
    6e6e:	e7d2      	b.n	6e16 <tcp_receive+0x7da>
    6e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
    6e74:	4b0b      	ldr	r3, [pc, #44]	; (6ea4 <tcp_receive+0x868>)
    6e76:	689b      	ldr	r3, [r3, #8]
    6e78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6e7a:	1a99      	subs	r1, r3, r2
    6e7c:	2900      	cmp	r1, #0
    6e7e:	db05      	blt.n	6e8c <tcp_receive+0x850>
    6e80:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    6e82:	440a      	add	r2, r1
    6e84:	1a9b      	subs	r3, r3, r2
    6e86:	3301      	adds	r3, #1
    6e88:	2b00      	cmp	r3, #0
    6e8a:	dd03      	ble.n	6e94 <tcp_receive+0x858>
			tcp_ack_now(pcb);
    6e8c:	7fa3      	ldrb	r3, [r4, #30]
    6e8e:	f043 0302 	orr.w	r3, r3, #2
    6e92:	77a3      	strb	r3, [r4, #30]
    6e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e98:	00003e9d 	.word	0x00003e9d
    6e9c:	200080b8 	.word	0x200080b8
    6ea0:	00005999 	.word	0x00005999
    6ea4:	200080a4 	.word	0x200080a4
    6ea8:	0000562d 	.word	0x0000562d
    6eac:	00003e91 	.word	0x00003e91

00006eb0 <tcp_process>:
{
    6eb0:	b570      	push	{r4, r5, r6, lr}
    6eb2:	b082      	sub	sp, #8
	if (flags & TCP_RST) {
    6eb4:	4ba7      	ldr	r3, [pc, #668]	; (7154 <tcp_process+0x2a4>)
    6eb6:	791b      	ldrb	r3, [r3, #4]
    6eb8:	f013 0f04 	tst.w	r3, #4
    6ebc:	d02e      	beq.n	6f1c <tcp_process+0x6c>
		if (pcb->state == SYN_SENT) {
    6ebe:	7e03      	ldrb	r3, [r0, #24]
    6ec0:	2b02      	cmp	r3, #2
    6ec2:	d010      	beq.n	6ee6 <tcp_process+0x36>
			if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
    6ec4:	4ba3      	ldr	r3, [pc, #652]	; (7154 <tcp_process+0x2a4>)
    6ec6:	689b      	ldr	r3, [r3, #8]
    6ec8:	6a82      	ldr	r2, [r0, #40]	; 0x28
    6eca:	1a99      	subs	r1, r3, r2
    6ecc:	2900      	cmp	r1, #0
    6ece:	db13      	blt.n	6ef8 <tcp_process+0x48>
    6ed0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    6ed2:	440a      	add	r2, r1
    6ed4:	1a9b      	subs	r3, r3, r2
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	dd10      	ble.n	6efc <tcp_process+0x4c>
	u8_t            acceptable = 0;
    6eda:	2300      	movs	r3, #0
		if (acceptable) {
    6edc:	b983      	cbnz	r3, 6f00 <tcp_process+0x50>
			return ERR_OK;
    6ede:	2500      	movs	r5, #0
}
    6ee0:	4628      	mov	r0, r5
    6ee2:	b002      	add	sp, #8
    6ee4:	bd70      	pop	{r4, r5, r6, pc}
			if (ackno == pcb->snd_nxt) {
    6ee6:	6d02      	ldr	r2, [r0, #80]	; 0x50
    6ee8:	4b9a      	ldr	r3, [pc, #616]	; (7154 <tcp_process+0x2a4>)
    6eea:	691b      	ldr	r3, [r3, #16]
    6eec:	429a      	cmp	r2, r3
    6eee:	d001      	beq.n	6ef4 <tcp_process+0x44>
	u8_t            acceptable = 0;
    6ef0:	2300      	movs	r3, #0
    6ef2:	e7f3      	b.n	6edc <tcp_process+0x2c>
				acceptable = 1;
    6ef4:	2301      	movs	r3, #1
    6ef6:	e7f1      	b.n	6edc <tcp_process+0x2c>
	u8_t            acceptable = 0;
    6ef8:	2300      	movs	r3, #0
    6efa:	e7ef      	b.n	6edc <tcp_process+0x2c>
				acceptable = 1;
    6efc:	2301      	movs	r3, #1
    6efe:	e7ed      	b.n	6edc <tcp_process+0x2c>
			recv_flags |= TF_RESET;
    6f00:	4a94      	ldr	r2, [pc, #592]	; (7154 <tcp_process+0x2a4>)
    6f02:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    6f06:	f043 0308 	orr.w	r3, r3, #8
    6f0a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			pcb->flags &= ~TF_ACK_DELAY;
    6f0e:	7f83      	ldrb	r3, [r0, #30]
    6f10:	f023 0301 	bic.w	r3, r3, #1
    6f14:	7783      	strb	r3, [r0, #30]
			return ERR_RST;
    6f16:	f06f 050a 	mvn.w	r5, #10
    6f1a:	e7e1      	b.n	6ee0 <tcp_process+0x30>
	if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
    6f1c:	f013 0f02 	tst.w	r3, #2
    6f20:	d00a      	beq.n	6f38 <tcp_process+0x88>
    6f22:	7e03      	ldrb	r3, [r0, #24]
    6f24:	3b02      	subs	r3, #2
    6f26:	b2db      	uxtb	r3, r3
    6f28:	2b01      	cmp	r3, #1
    6f2a:	d905      	bls.n	6f38 <tcp_process+0x88>
		tcp_ack_now(pcb);
    6f2c:	7f83      	ldrb	r3, [r0, #30]
    6f2e:	f043 0302 	orr.w	r3, r3, #2
    6f32:	7783      	strb	r3, [r0, #30]
		return ERR_OK;
    6f34:	2500      	movs	r5, #0
    6f36:	e7d3      	b.n	6ee0 <tcp_process+0x30>
	if ((pcb->flags & TF_RXCLOSED) == 0) {
    6f38:	7f83      	ldrb	r3, [r0, #30]
    6f3a:	f013 0f10 	tst.w	r3, #16
    6f3e:	d102      	bne.n	6f46 <tcp_process+0x96>
		pcb->tmr = tcp_ticks;
    6f40:	4b85      	ldr	r3, [pc, #532]	; (7158 <tcp_process+0x2a8>)
    6f42:	681b      	ldr	r3, [r3, #0]
    6f44:	6243      	str	r3, [r0, #36]	; 0x24
    6f46:	4604      	mov	r4, r0
	pcb->keep_cnt_sent = 0;
    6f48:	2300      	movs	r3, #0
    6f4a:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	tcp_parseopt(pcb);
    6f4e:	4b83      	ldr	r3, [pc, #524]	; (715c <tcp_process+0x2ac>)
    6f50:	4798      	blx	r3
	switch (pcb->state) {
    6f52:	7e23      	ldrb	r3, [r4, #24]
    6f54:	3b02      	subs	r3, #2
    6f56:	2b07      	cmp	r3, #7
    6f58:	f200 81e9 	bhi.w	732e <tcp_process+0x47e>
    6f5c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6f60:	00800008 	.word	0x00800008
    6f64:	011200e8 	.word	0x011200e8
    6f68:	00e80167 	.word	0x00e80167
    6f6c:	01cf019b 	.word	0x01cf019b
		if ((flags & TCP_ACK) && (flags & TCP_SYN) && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    6f70:	4b78      	ldr	r3, [pc, #480]	; (7154 <tcp_process+0x2a4>)
    6f72:	791b      	ldrb	r3, [r3, #4]
    6f74:	f003 0312 	and.w	r3, r3, #18
    6f78:	2b12      	cmp	r3, #18
    6f7a:	d006      	beq.n	6f8a <tcp_process+0xda>
		else if (flags & TCP_ACK) {
    6f7c:	4b75      	ldr	r3, [pc, #468]	; (7154 <tcp_process+0x2a4>)
    6f7e:	791b      	ldrb	r3, [r3, #4]
    6f80:	f013 0f10 	tst.w	r3, #16
    6f84:	d15c      	bne.n	7040 <tcp_process+0x190>
	return ERR_OK;
    6f86:	2500      	movs	r5, #0
    6f88:	e7aa      	b.n	6ee0 <tcp_process+0x30>
		if ((flags & TCP_ACK) && (flags & TCP_SYN) && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    6f8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6f8c:	68db      	ldr	r3, [r3, #12]
    6f8e:	6858      	ldr	r0, [r3, #4]
    6f90:	4b73      	ldr	r3, [pc, #460]	; (7160 <tcp_process+0x2b0>)
    6f92:	4798      	blx	r3
    6f94:	3001      	adds	r0, #1
    6f96:	4b6f      	ldr	r3, [pc, #444]	; (7154 <tcp_process+0x2a4>)
    6f98:	691b      	ldr	r3, [r3, #16]
    6f9a:	4298      	cmp	r0, r3
    6f9c:	d1ee      	bne.n	6f7c <tcp_process+0xcc>
			pcb->snd_buf++;
    6f9e:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    6fa2:	3201      	adds	r2, #1
    6fa4:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
			pcb->rcv_nxt            = seqno + 1;
    6fa8:	496a      	ldr	r1, [pc, #424]	; (7154 <tcp_process+0x2a4>)
    6faa:	688a      	ldr	r2, [r1, #8]
    6fac:	1c50      	adds	r0, r2, #1
    6fae:	62a0      	str	r0, [r4, #40]	; 0x28
			pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    6fb0:	6320      	str	r0, [r4, #48]	; 0x30
			pcb->lastack            = ackno;
    6fb2:	64a3      	str	r3, [r4, #72]	; 0x48
			pcb->snd_wnd            = tcphdr->wnd;
    6fb4:	680b      	ldr	r3, [r1, #0]
    6fb6:	89d9      	ldrh	r1, [r3, #14]
    6fb8:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
			pcb->snd_wnd_max        = tcphdr->wnd;
    6fbc:	89db      	ldrh	r3, [r3, #14]
    6fbe:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
			pcb->snd_wl1            = seqno - 1; /* initialise to seqno - 1 to force window update */
    6fc2:	3a01      	subs	r2, #1
    6fc4:	6562      	str	r2, [r4, #84]	; 0x54
			pcb->state              = ESTABLISHED;
    6fc6:	2304      	movs	r3, #4
    6fc8:	7623      	strb	r3, [r4, #24]
			pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
    6fca:	18e1      	adds	r1, r4, r3
    6fcc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    6fce:	4b65      	ldr	r3, [pc, #404]	; (7164 <tcp_process+0x2b4>)
    6fd0:	4798      	blx	r3
    6fd2:	86e0      	strh	r0, [r4, #54]	; 0x36
			pcb->ssthresh = pcb->mss * 10;
    6fd4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    6fd8:	0053      	lsls	r3, r2, #1
    6fda:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
			pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    6fde:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    6fe2:	2b01      	cmp	r3, #1
    6fe4:	d023      	beq.n	702e <tcp_process+0x17e>
    6fe6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
			--pcb->snd_queuelen;
    6fea:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    6fee:	3b01      	subs	r3, #1
    6ff0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			rseg         = pcb->unacked;
    6ff4:	6f20      	ldr	r0, [r4, #112]	; 0x70
			pcb->unacked = rseg->next;
    6ff6:	6803      	ldr	r3, [r0, #0]
    6ff8:	6723      	str	r3, [r4, #112]	; 0x70
			tcp_seg_free(rseg);
    6ffa:	4b5b      	ldr	r3, [pc, #364]	; (7168 <tcp_process+0x2b8>)
    6ffc:	4798      	blx	r3
			if (pcb->unacked == NULL)
    6ffe:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7000:	b1c3      	cbz	r3, 7034 <tcp_process+0x184>
				pcb->rtime = 0;
    7002:	2300      	movs	r3, #0
    7004:	86a3      	strh	r3, [r4, #52]	; 0x34
				pcb->nrtx  = 0;
    7006:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    700a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    700e:	b1ab      	cbz	r3, 703c <tcp_process+0x18c>
    7010:	2200      	movs	r2, #0
    7012:	4621      	mov	r1, r4
    7014:	6920      	ldr	r0, [r4, #16]
    7016:	4798      	blx	r3
    7018:	4605      	mov	r5, r0
			if (err == ERR_ABRT) {
    701a:	f115 0f0a 	cmn.w	r5, #10
    701e:	f43f af5f 	beq.w	6ee0 <tcp_process+0x30>
			tcp_ack_now(pcb);
    7022:	7fa3      	ldrb	r3, [r4, #30]
    7024:	f043 0302 	orr.w	r3, r3, #2
    7028:	77a3      	strb	r3, [r4, #30]
	return ERR_OK;
    702a:	2500      	movs	r5, #0
			tcp_ack_now(pcb);
    702c:	e758      	b.n	6ee0 <tcp_process+0x30>
			pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    702e:	0040      	lsls	r0, r0, #1
    7030:	b280      	uxth	r0, r0
    7032:	e7d8      	b.n	6fe6 <tcp_process+0x136>
				pcb->rtime = -1;
    7034:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7038:	86a3      	strh	r3, [r4, #52]	; 0x34
    703a:	e7e6      	b.n	700a <tcp_process+0x15a>
			TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    703c:	2500      	movs	r5, #0
    703e:	e7ec      	b.n	701a <tcp_process+0x16a>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    7040:	4b44      	ldr	r3, [pc, #272]	; (7154 <tcp_process+0x2a4>)
    7042:	681a      	ldr	r2, [r3, #0]
    7044:	899c      	ldrh	r4, [r3, #12]
    7046:	6899      	ldr	r1, [r3, #8]
    7048:	6918      	ldr	r0, [r3, #16]
    704a:	8813      	ldrh	r3, [r2, #0]
    704c:	9301      	str	r3, [sp, #4]
    704e:	8853      	ldrh	r3, [r2, #2]
    7050:	9300      	str	r3, [sp, #0]
    7052:	4b46      	ldr	r3, [pc, #280]	; (716c <tcp_process+0x2bc>)
    7054:	4a46      	ldr	r2, [pc, #280]	; (7170 <tcp_process+0x2c0>)
    7056:	4421      	add	r1, r4
    7058:	4c46      	ldr	r4, [pc, #280]	; (7174 <tcp_process+0x2c4>)
    705a:	47a0      	blx	r4
	return ERR_OK;
    705c:	2500      	movs	r5, #0
    705e:	e73f      	b.n	6ee0 <tcp_process+0x30>
		if (flags & TCP_ACK) {
    7060:	4b3c      	ldr	r3, [pc, #240]	; (7154 <tcp_process+0x2a4>)
    7062:	791b      	ldrb	r3, [r3, #4]
    7064:	f013 0f10 	tst.w	r3, #16
    7068:	d051      	beq.n	710e <tcp_process+0x25e>
			if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    706a:	4b3a      	ldr	r3, [pc, #232]	; (7154 <tcp_process+0x2a4>)
    706c:	6918      	ldr	r0, [r3, #16]
    706e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7070:	1ac3      	subs	r3, r0, r3
    7072:	2b01      	cmp	r3, #1
    7074:	d403      	bmi.n	707e <tcp_process+0x1ce>
    7076:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7078:	1ac3      	subs	r3, r0, r3
    707a:	2b00      	cmp	r3, #0
    707c:	dd0e      	ble.n	709c <tcp_process+0x1ec>
				    ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    707e:	4b35      	ldr	r3, [pc, #212]	; (7154 <tcp_process+0x2a4>)
    7080:	681a      	ldr	r2, [r3, #0]
				tcp_rst(
    7082:	899c      	ldrh	r4, [r3, #12]
    7084:	6899      	ldr	r1, [r3, #8]
    7086:	8813      	ldrh	r3, [r2, #0]
    7088:	9301      	str	r3, [sp, #4]
    708a:	8853      	ldrh	r3, [r2, #2]
    708c:	9300      	str	r3, [sp, #0]
    708e:	4b37      	ldr	r3, [pc, #220]	; (716c <tcp_process+0x2bc>)
    7090:	4a37      	ldr	r2, [pc, #220]	; (7170 <tcp_process+0x2c0>)
    7092:	4421      	add	r1, r4
    7094:	4c37      	ldr	r4, [pc, #220]	; (7174 <tcp_process+0x2c4>)
    7096:	47a0      	blx	r4
	return ERR_OK;
    7098:	2500      	movs	r5, #0
    709a:	e721      	b.n	6ee0 <tcp_process+0x30>
				pcb->state = ESTABLISHED;
    709c:	2304      	movs	r3, #4
    709e:	7623      	strb	r3, [r4, #24]
				TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    70a0:	6963      	ldr	r3, [r4, #20]
    70a2:	b17b      	cbz	r3, 70c4 <tcp_process+0x214>
    70a4:	2200      	movs	r2, #0
    70a6:	4621      	mov	r1, r4
    70a8:	6920      	ldr	r0, [r4, #16]
    70aa:	4798      	blx	r3
    70ac:	4605      	mov	r5, r0
				if (err != ERR_OK) {
    70ae:	b165      	cbz	r5, 70ca <tcp_process+0x21a>
					if (err != ERR_ABRT) {
    70b0:	f115 0f0a 	cmn.w	r5, #10
    70b4:	f43f af14 	beq.w	6ee0 <tcp_process+0x30>
						tcp_abort(pcb);
    70b8:	4620      	mov	r0, r4
    70ba:	4b2f      	ldr	r3, [pc, #188]	; (7178 <tcp_process+0x2c8>)
    70bc:	4798      	blx	r3
					return ERR_ABRT;
    70be:	f06f 0509 	mvn.w	r5, #9
    70c2:	e70d      	b.n	6ee0 <tcp_process+0x30>
				TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    70c4:	f06f 050d 	mvn.w	r5, #13
    70c8:	e7f1      	b.n	70ae <tcp_process+0x1fe>
				old_cwnd = pcb->cwnd;
    70ca:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
				tcp_receive(pcb);
    70ce:	4620      	mov	r0, r4
    70d0:	4b2a      	ldr	r3, [pc, #168]	; (717c <tcp_process+0x2cc>)
    70d2:	4798      	blx	r3
				if (pcb->acked != 0) {
    70d4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    70d8:	b113      	cbz	r3, 70e0 <tcp_process+0x230>
					pcb->acked--;
    70da:	3b01      	subs	r3, #1
    70dc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
				pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    70e0:	2e01      	cmp	r6, #1
    70e2:	d010      	beq.n	7106 <tcp_process+0x256>
    70e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    70e6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				if (recv_flags & TF_GOT_FIN) {
    70ea:	4b1a      	ldr	r3, [pc, #104]	; (7154 <tcp_process+0x2a4>)
    70ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    70f0:	f013 0f20 	tst.w	r3, #32
    70f4:	f43f aef4 	beq.w	6ee0 <tcp_process+0x30>
					tcp_ack_now(pcb);
    70f8:	7fa3      	ldrb	r3, [r4, #30]
    70fa:	f043 0302 	orr.w	r3, r3, #2
    70fe:	77a3      	strb	r3, [r4, #30]
					pcb->state = CLOSE_WAIT;
    7100:	2307      	movs	r3, #7
    7102:	7623      	strb	r3, [r4, #24]
    7104:	e6ec      	b.n	6ee0 <tcp_process+0x30>
				pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    7106:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7108:	005b      	lsls	r3, r3, #1
    710a:	b29b      	uxth	r3, r3
    710c:	e7eb      	b.n	70e6 <tcp_process+0x236>
		} else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
    710e:	f013 0f02 	tst.w	r3, #2
    7112:	f000 810e 	beq.w	7332 <tcp_process+0x482>
    7116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7118:	3b01      	subs	r3, #1
    711a:	4a0e      	ldr	r2, [pc, #56]	; (7154 <tcp_process+0x2a4>)
    711c:	6892      	ldr	r2, [r2, #8]
    711e:	4293      	cmp	r3, r2
    7120:	d001      	beq.n	7126 <tcp_process+0x276>
	return ERR_OK;
    7122:	2500      	movs	r5, #0
    7124:	e6dc      	b.n	6ee0 <tcp_process+0x30>
			tcp_rexmit(pcb);
    7126:	4620      	mov	r0, r4
    7128:	4b15      	ldr	r3, [pc, #84]	; (7180 <tcp_process+0x2d0>)
    712a:	4798      	blx	r3
	return ERR_OK;
    712c:	2500      	movs	r5, #0
    712e:	e6d7      	b.n	6ee0 <tcp_process+0x30>
		tcp_receive(pcb);
    7130:	4620      	mov	r0, r4
    7132:	4b12      	ldr	r3, [pc, #72]	; (717c <tcp_process+0x2cc>)
    7134:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) { /* passive close */
    7136:	4b07      	ldr	r3, [pc, #28]	; (7154 <tcp_process+0x2a4>)
    7138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    713c:	f013 0f20 	tst.w	r3, #32
    7140:	f000 80f9 	beq.w	7336 <tcp_process+0x486>
			tcp_ack_now(pcb);
    7144:	7fa3      	ldrb	r3, [r4, #30]
    7146:	f043 0302 	orr.w	r3, r3, #2
    714a:	77a3      	strb	r3, [r4, #30]
			pcb->state = CLOSE_WAIT;
    714c:	2307      	movs	r3, #7
    714e:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    7150:	2500      	movs	r5, #0
    7152:	e6c5      	b.n	6ee0 <tcp_process+0x30>
    7154:	200080a4 	.word	0x200080a4
    7158:	200161d8 	.word	0x200161d8
    715c:	0000636d 	.word	0x0000636d
    7160:	00003ec1 	.word	0x00003ec1
    7164:	00006345 	.word	0x00006345
    7168:	0000595d 	.word	0x0000595d
    716c:	200129a0 	.word	0x200129a0
    7170:	200129a8 	.word	0x200129a8
    7174:	000080c5 	.word	0x000080c5
    7178:	000061bd 	.word	0x000061bd
    717c:	0000663d 	.word	0x0000663d
    7180:	0000819d 	.word	0x0000819d
		tcp_receive(pcb);
    7184:	4620      	mov	r0, r4
    7186:	4b70      	ldr	r3, [pc, #448]	; (7348 <tcp_process+0x498>)
    7188:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) {
    718a:	4b70      	ldr	r3, [pc, #448]	; (734c <tcp_process+0x49c>)
    718c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7190:	f013 0f20 	tst.w	r3, #32
    7194:	d03a      	beq.n	720c <tcp_process+0x35c>
			if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    7196:	4b6d      	ldr	r3, [pc, #436]	; (734c <tcp_process+0x49c>)
    7198:	791b      	ldrb	r3, [r3, #4]
    719a:	f013 0f10 	tst.w	r3, #16
    719e:	d004      	beq.n	71aa <tcp_process+0x2fa>
    71a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
    71a2:	4b6a      	ldr	r3, [pc, #424]	; (734c <tcp_process+0x49c>)
    71a4:	691b      	ldr	r3, [r3, #16]
    71a6:	429a      	cmp	r2, r3
    71a8:	d007      	beq.n	71ba <tcp_process+0x30a>
				tcp_ack_now(pcb);
    71aa:	7fa3      	ldrb	r3, [r4, #30]
    71ac:	f043 0302 	orr.w	r3, r3, #2
    71b0:	77a3      	strb	r3, [r4, #30]
				pcb->state = CLOSING;
    71b2:	2308      	movs	r3, #8
    71b4:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    71b6:	2500      	movs	r5, #0
    71b8:	e692      	b.n	6ee0 <tcp_process+0x30>
				tcp_ack_now(pcb);
    71ba:	7fa3      	ldrb	r3, [r4, #30]
    71bc:	f043 0302 	orr.w	r3, r3, #2
    71c0:	77a3      	strb	r3, [r4, #30]
				tcp_pcb_purge(pcb);
    71c2:	4620      	mov	r0, r4
    71c4:	4b62      	ldr	r3, [pc, #392]	; (7350 <tcp_process+0x4a0>)
    71c6:	4798      	blx	r3
				TCP_RMV_ACTIVE(pcb);
    71c8:	4b62      	ldr	r3, [pc, #392]	; (7354 <tcp_process+0x4a4>)
    71ca:	681b      	ldr	r3, [r3, #0]
    71cc:	429c      	cmp	r4, r3
    71ce:	d00a      	beq.n	71e6 <tcp_process+0x336>
    71d0:	4a61      	ldr	r2, [pc, #388]	; (7358 <tcp_process+0x4a8>)
    71d2:	6013      	str	r3, [r2, #0]
    71d4:	4b60      	ldr	r3, [pc, #384]	; (7358 <tcp_process+0x4a8>)
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	b15b      	cbz	r3, 71f2 <tcp_process+0x342>
    71da:	68da      	ldr	r2, [r3, #12]
    71dc:	4294      	cmp	r4, r2
    71de:	d006      	beq.n	71ee <tcp_process+0x33e>
    71e0:	4b5d      	ldr	r3, [pc, #372]	; (7358 <tcp_process+0x4a8>)
    71e2:	601a      	str	r2, [r3, #0]
    71e4:	e7f6      	b.n	71d4 <tcp_process+0x324>
    71e6:	68da      	ldr	r2, [r3, #12]
    71e8:	4b5a      	ldr	r3, [pc, #360]	; (7354 <tcp_process+0x4a4>)
    71ea:	601a      	str	r2, [r3, #0]
    71ec:	e001      	b.n	71f2 <tcp_process+0x342>
    71ee:	68e2      	ldr	r2, [r4, #12]
    71f0:	60da      	str	r2, [r3, #12]
    71f2:	2201      	movs	r2, #1
    71f4:	4b59      	ldr	r3, [pc, #356]	; (735c <tcp_process+0x4ac>)
    71f6:	701a      	strb	r2, [r3, #0]
				pcb->state = TIME_WAIT;
    71f8:	230a      	movs	r3, #10
    71fa:	7623      	strb	r3, [r4, #24]
				TCP_REG(&tcp_tw_pcbs, pcb);
    71fc:	4b58      	ldr	r3, [pc, #352]	; (7360 <tcp_process+0x4b0>)
    71fe:	681a      	ldr	r2, [r3, #0]
    7200:	60e2      	str	r2, [r4, #12]
    7202:	601c      	str	r4, [r3, #0]
    7204:	4b57      	ldr	r3, [pc, #348]	; (7364 <tcp_process+0x4b4>)
    7206:	4798      	blx	r3
	return ERR_OK;
    7208:	2500      	movs	r5, #0
				TCP_REG(&tcp_tw_pcbs, pcb);
    720a:	e669      	b.n	6ee0 <tcp_process+0x30>
		} else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    720c:	4b4f      	ldr	r3, [pc, #316]	; (734c <tcp_process+0x49c>)
    720e:	791b      	ldrb	r3, [r3, #4]
    7210:	f013 0f10 	tst.w	r3, #16
    7214:	f000 8091 	beq.w	733a <tcp_process+0x48a>
    7218:	6d22      	ldr	r2, [r4, #80]	; 0x50
    721a:	4b4c      	ldr	r3, [pc, #304]	; (734c <tcp_process+0x49c>)
    721c:	691b      	ldr	r3, [r3, #16]
    721e:	429a      	cmp	r2, r3
    7220:	d001      	beq.n	7226 <tcp_process+0x376>
	return ERR_OK;
    7222:	2500      	movs	r5, #0
    7224:	e65c      	b.n	6ee0 <tcp_process+0x30>
			pcb->state = FIN_WAIT_2;
    7226:	2306      	movs	r3, #6
    7228:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    722a:	2500      	movs	r5, #0
    722c:	e658      	b.n	6ee0 <tcp_process+0x30>
		tcp_receive(pcb);
    722e:	4620      	mov	r0, r4
    7230:	4b45      	ldr	r3, [pc, #276]	; (7348 <tcp_process+0x498>)
    7232:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) {
    7234:	4b45      	ldr	r3, [pc, #276]	; (734c <tcp_process+0x49c>)
    7236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    723a:	f013 0f20 	tst.w	r3, #32
    723e:	d101      	bne.n	7244 <tcp_process+0x394>
	return ERR_OK;
    7240:	2500      	movs	r5, #0
    7242:	e64d      	b.n	6ee0 <tcp_process+0x30>
			tcp_ack_now(pcb);
    7244:	7fa3      	ldrb	r3, [r4, #30]
    7246:	f043 0302 	orr.w	r3, r3, #2
    724a:	77a3      	strb	r3, [r4, #30]
			tcp_pcb_purge(pcb);
    724c:	4620      	mov	r0, r4
    724e:	4b40      	ldr	r3, [pc, #256]	; (7350 <tcp_process+0x4a0>)
    7250:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    7252:	4b40      	ldr	r3, [pc, #256]	; (7354 <tcp_process+0x4a4>)
    7254:	681b      	ldr	r3, [r3, #0]
    7256:	429c      	cmp	r4, r3
    7258:	d00a      	beq.n	7270 <tcp_process+0x3c0>
    725a:	4a3f      	ldr	r2, [pc, #252]	; (7358 <tcp_process+0x4a8>)
    725c:	6013      	str	r3, [r2, #0]
    725e:	4b3e      	ldr	r3, [pc, #248]	; (7358 <tcp_process+0x4a8>)
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	b15b      	cbz	r3, 727c <tcp_process+0x3cc>
    7264:	68da      	ldr	r2, [r3, #12]
    7266:	4294      	cmp	r4, r2
    7268:	d006      	beq.n	7278 <tcp_process+0x3c8>
    726a:	4b3b      	ldr	r3, [pc, #236]	; (7358 <tcp_process+0x4a8>)
    726c:	601a      	str	r2, [r3, #0]
    726e:	e7f6      	b.n	725e <tcp_process+0x3ae>
    7270:	68da      	ldr	r2, [r3, #12]
    7272:	4b38      	ldr	r3, [pc, #224]	; (7354 <tcp_process+0x4a4>)
    7274:	601a      	str	r2, [r3, #0]
    7276:	e001      	b.n	727c <tcp_process+0x3cc>
    7278:	68e2      	ldr	r2, [r4, #12]
    727a:	60da      	str	r2, [r3, #12]
    727c:	2201      	movs	r2, #1
    727e:	4b37      	ldr	r3, [pc, #220]	; (735c <tcp_process+0x4ac>)
    7280:	701a      	strb	r2, [r3, #0]
			pcb->state = TIME_WAIT;
    7282:	230a      	movs	r3, #10
    7284:	7623      	strb	r3, [r4, #24]
			TCP_REG(&tcp_tw_pcbs, pcb);
    7286:	4b36      	ldr	r3, [pc, #216]	; (7360 <tcp_process+0x4b0>)
    7288:	681a      	ldr	r2, [r3, #0]
    728a:	60e2      	str	r2, [r4, #12]
    728c:	601c      	str	r4, [r3, #0]
    728e:	4b35      	ldr	r3, [pc, #212]	; (7364 <tcp_process+0x4b4>)
    7290:	4798      	blx	r3
	return ERR_OK;
    7292:	2500      	movs	r5, #0
    7294:	e624      	b.n	6ee0 <tcp_process+0x30>
		tcp_receive(pcb);
    7296:	4620      	mov	r0, r4
    7298:	4b2b      	ldr	r3, [pc, #172]	; (7348 <tcp_process+0x498>)
    729a:	4798      	blx	r3
		if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    729c:	4b2b      	ldr	r3, [pc, #172]	; (734c <tcp_process+0x49c>)
    729e:	791b      	ldrb	r3, [r3, #4]
    72a0:	f013 0f10 	tst.w	r3, #16
    72a4:	d04b      	beq.n	733e <tcp_process+0x48e>
    72a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    72a8:	4b28      	ldr	r3, [pc, #160]	; (734c <tcp_process+0x49c>)
    72aa:	691b      	ldr	r3, [r3, #16]
    72ac:	429a      	cmp	r2, r3
    72ae:	d001      	beq.n	72b4 <tcp_process+0x404>
	return ERR_OK;
    72b0:	2500      	movs	r5, #0
    72b2:	e615      	b.n	6ee0 <tcp_process+0x30>
			tcp_pcb_purge(pcb);
    72b4:	4620      	mov	r0, r4
    72b6:	4b26      	ldr	r3, [pc, #152]	; (7350 <tcp_process+0x4a0>)
    72b8:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    72ba:	4b26      	ldr	r3, [pc, #152]	; (7354 <tcp_process+0x4a4>)
    72bc:	681b      	ldr	r3, [r3, #0]
    72be:	429c      	cmp	r4, r3
    72c0:	d002      	beq.n	72c8 <tcp_process+0x418>
    72c2:	4a25      	ldr	r2, [pc, #148]	; (7358 <tcp_process+0x4a8>)
    72c4:	6013      	str	r3, [r2, #0]
    72c6:	e005      	b.n	72d4 <tcp_process+0x424>
    72c8:	68da      	ldr	r2, [r3, #12]
    72ca:	4b22      	ldr	r3, [pc, #136]	; (7354 <tcp_process+0x4a4>)
    72cc:	601a      	str	r2, [r3, #0]
    72ce:	e009      	b.n	72e4 <tcp_process+0x434>
    72d0:	4b21      	ldr	r3, [pc, #132]	; (7358 <tcp_process+0x4a8>)
    72d2:	601a      	str	r2, [r3, #0]
    72d4:	4b20      	ldr	r3, [pc, #128]	; (7358 <tcp_process+0x4a8>)
    72d6:	681b      	ldr	r3, [r3, #0]
    72d8:	b123      	cbz	r3, 72e4 <tcp_process+0x434>
    72da:	68da      	ldr	r2, [r3, #12]
    72dc:	4294      	cmp	r4, r2
    72de:	d1f7      	bne.n	72d0 <tcp_process+0x420>
    72e0:	68e2      	ldr	r2, [r4, #12]
    72e2:	60da      	str	r2, [r3, #12]
    72e4:	2201      	movs	r2, #1
    72e6:	4b1d      	ldr	r3, [pc, #116]	; (735c <tcp_process+0x4ac>)
    72e8:	701a      	strb	r2, [r3, #0]
			pcb->state = TIME_WAIT;
    72ea:	230a      	movs	r3, #10
    72ec:	7623      	strb	r3, [r4, #24]
			TCP_REG(&tcp_tw_pcbs, pcb);
    72ee:	4b1c      	ldr	r3, [pc, #112]	; (7360 <tcp_process+0x4b0>)
    72f0:	681a      	ldr	r2, [r3, #0]
    72f2:	60e2      	str	r2, [r4, #12]
    72f4:	601c      	str	r4, [r3, #0]
    72f6:	4b1b      	ldr	r3, [pc, #108]	; (7364 <tcp_process+0x4b4>)
    72f8:	4798      	blx	r3
	return ERR_OK;
    72fa:	2500      	movs	r5, #0
    72fc:	e5f0      	b.n	6ee0 <tcp_process+0x30>
		tcp_receive(pcb);
    72fe:	4620      	mov	r0, r4
    7300:	4b11      	ldr	r3, [pc, #68]	; (7348 <tcp_process+0x498>)
    7302:	4798      	blx	r3
		if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    7304:	4b11      	ldr	r3, [pc, #68]	; (734c <tcp_process+0x49c>)
    7306:	791b      	ldrb	r3, [r3, #4]
    7308:	f013 0f10 	tst.w	r3, #16
    730c:	d019      	beq.n	7342 <tcp_process+0x492>
    730e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7310:	4b0e      	ldr	r3, [pc, #56]	; (734c <tcp_process+0x49c>)
    7312:	691b      	ldr	r3, [r3, #16]
    7314:	429a      	cmp	r2, r3
    7316:	d001      	beq.n	731c <tcp_process+0x46c>
	return ERR_OK;
    7318:	2500      	movs	r5, #0
    731a:	e5e1      	b.n	6ee0 <tcp_process+0x30>
			recv_flags |= TF_CLOSED;
    731c:	4a0b      	ldr	r2, [pc, #44]	; (734c <tcp_process+0x49c>)
    731e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    7322:	f043 0310 	orr.w	r3, r3, #16
    7326:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	return ERR_OK;
    732a:	2500      	movs	r5, #0
    732c:	e5d8      	b.n	6ee0 <tcp_process+0x30>
    732e:	2500      	movs	r5, #0
    7330:	e5d6      	b.n	6ee0 <tcp_process+0x30>
    7332:	2500      	movs	r5, #0
    7334:	e5d4      	b.n	6ee0 <tcp_process+0x30>
    7336:	2500      	movs	r5, #0
    7338:	e5d2      	b.n	6ee0 <tcp_process+0x30>
    733a:	2500      	movs	r5, #0
    733c:	e5d0      	b.n	6ee0 <tcp_process+0x30>
    733e:	2500      	movs	r5, #0
    7340:	e5ce      	b.n	6ee0 <tcp_process+0x30>
    7342:	2500      	movs	r5, #0
    7344:	e5cc      	b.n	6ee0 <tcp_process+0x30>
    7346:	bf00      	nop
    7348:	0000663d 	.word	0x0000663d
    734c:	200080a4 	.word	0x200080a4
    7350:	000059ed 	.word	0x000059ed
    7354:	200161d4 	.word	0x200161d4
    7358:	200161e0 	.word	0x200161e0
    735c:	200161d0 	.word	0x200161d0
    7360:	200161e8 	.word	0x200161e8
    7364:	000083fd 	.word	0x000083fd

00007368 <tcp_input>:
{
    7368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    736c:	b082      	sub	sp, #8
    736e:	4604      	mov	r4, r0
    7370:	460d      	mov	r5, r1
	iphdr  = (struct ip_hdr *)p->payload;
    7372:	6843      	ldr	r3, [r0, #4]
	tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
    7374:	7819      	ldrb	r1, [r3, #0]
    7376:	f001 010f 	and.w	r1, r1, #15
    737a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    737e:	4a8b      	ldr	r2, [pc, #556]	; (75ac <tcp_input+0x244>)
    7380:	6013      	str	r3, [r2, #0]
	if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
    7382:	0089      	lsls	r1, r1, #2
    7384:	4249      	negs	r1, r1
    7386:	4b8a      	ldr	r3, [pc, #552]	; (75b0 <tcp_input+0x248>)
    7388:	4798      	blx	r3
    738a:	b910      	cbnz	r0, 7392 <tcp_input+0x2a>
    738c:	8923      	ldrh	r3, [r4, #8]
    738e:	2b13      	cmp	r3, #19
    7390:	d805      	bhi.n	739e <tcp_input+0x36>
	pbuf_free(p);
    7392:	4620      	mov	r0, r4
    7394:	4b87      	ldr	r3, [pc, #540]	; (75b4 <tcp_input+0x24c>)
    7396:	4798      	blx	r3
}
    7398:	b002      	add	sp, #8
    739a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ip_addr_isbroadcast(&current_iphdr_dest, inp) || ip_addr_ismulticast(&current_iphdr_dest)) {
    739e:	4629      	mov	r1, r5
    73a0:	4b85      	ldr	r3, [pc, #532]	; (75b8 <tcp_input+0x250>)
    73a2:	6818      	ldr	r0, [r3, #0]
    73a4:	4b85      	ldr	r3, [pc, #532]	; (75bc <tcp_input+0x254>)
    73a6:	4798      	blx	r3
    73a8:	2800      	cmp	r0, #0
    73aa:	d1f2      	bne.n	7392 <tcp_input+0x2a>
    73ac:	4b82      	ldr	r3, [pc, #520]	; (75b8 <tcp_input+0x250>)
    73ae:	681b      	ldr	r3, [r3, #0]
    73b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    73b4:	2be0      	cmp	r3, #224	; 0xe0
    73b6:	d0ec      	beq.n	7392 <tcp_input+0x2a>
	if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(), IP_PROTO_TCP, p->tot_len) != 0) {
    73b8:	8923      	ldrh	r3, [r4, #8]
    73ba:	9300      	str	r3, [sp, #0]
    73bc:	2306      	movs	r3, #6
    73be:	4a7e      	ldr	r2, [pc, #504]	; (75b8 <tcp_input+0x250>)
    73c0:	497f      	ldr	r1, [pc, #508]	; (75c0 <tcp_input+0x258>)
    73c2:	4620      	mov	r0, r4
    73c4:	4d7f      	ldr	r5, [pc, #508]	; (75c4 <tcp_input+0x25c>)
    73c6:	47a8      	blx	r5
    73c8:	2800      	cmp	r0, #0
    73ca:	d1e2      	bne.n	7392 <tcp_input+0x2a>
	hdrlen = TCPH_HDRLEN(tcphdr);
    73cc:	4b77      	ldr	r3, [pc, #476]	; (75ac <tcp_input+0x244>)
    73ce:	681b      	ldr	r3, [r3, #0]
    73d0:	8998      	ldrh	r0, [r3, #12]
    73d2:	4b7d      	ldr	r3, [pc, #500]	; (75c8 <tcp_input+0x260>)
    73d4:	4798      	blx	r3
    73d6:	f3c0 300f 	ubfx	r0, r0, #12, #16
	if (pbuf_header(p, -(hdrlen * 4))) {
    73da:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
    73de:	0081      	lsls	r1, r0, #2
    73e0:	b209      	sxth	r1, r1
    73e2:	4620      	mov	r0, r4
    73e4:	4b72      	ldr	r3, [pc, #456]	; (75b0 <tcp_input+0x248>)
    73e6:	4798      	blx	r3
    73e8:	2800      	cmp	r0, #0
    73ea:	d1d2      	bne.n	7392 <tcp_input+0x2a>
	tcphdr->src  = ntohs(tcphdr->src);
    73ec:	4d6f      	ldr	r5, [pc, #444]	; (75ac <tcp_input+0x244>)
    73ee:	682f      	ldr	r7, [r5, #0]
    73f0:	8838      	ldrh	r0, [r7, #0]
    73f2:	4e75      	ldr	r6, [pc, #468]	; (75c8 <tcp_input+0x260>)
    73f4:	47b0      	blx	r6
    73f6:	8038      	strh	r0, [r7, #0]
	tcphdr->dest = ntohs(tcphdr->dest);
    73f8:	682f      	ldr	r7, [r5, #0]
    73fa:	8878      	ldrh	r0, [r7, #2]
    73fc:	47b0      	blx	r6
    73fe:	8078      	strh	r0, [r7, #2]
	seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
    7400:	682f      	ldr	r7, [r5, #0]
    7402:	6878      	ldr	r0, [r7, #4]
    7404:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 75f4 <tcp_input+0x28c>
    7408:	47c0      	blx	r8
    740a:	6078      	str	r0, [r7, #4]
    740c:	60a8      	str	r0, [r5, #8]
	ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
    740e:	682f      	ldr	r7, [r5, #0]
    7410:	68b8      	ldr	r0, [r7, #8]
    7412:	47c0      	blx	r8
    7414:	60b8      	str	r0, [r7, #8]
    7416:	6128      	str	r0, [r5, #16]
	tcphdr->wnd           = ntohs(tcphdr->wnd);
    7418:	682f      	ldr	r7, [r5, #0]
    741a:	89f8      	ldrh	r0, [r7, #14]
    741c:	47b0      	blx	r6
    741e:	81f8      	strh	r0, [r7, #14]
	flags  = TCPH_FLAGS(tcphdr);
    7420:	682b      	ldr	r3, [r5, #0]
    7422:	8998      	ldrh	r0, [r3, #12]
    7424:	47b0      	blx	r6
    7426:	f000 073f 	and.w	r7, r0, #63	; 0x3f
    742a:	712f      	strb	r7, [r5, #4]
	tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
    742c:	8923      	ldrh	r3, [r4, #8]
    742e:	f017 0203 	ands.w	r2, r7, #3
    7432:	bf18      	it	ne
    7434:	2201      	movne	r2, #1
    7436:	4413      	add	r3, r2
    7438:	81ab      	strh	r3, [r5, #12]
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    743a:	4b64      	ldr	r3, [pc, #400]	; (75cc <tcp_input+0x264>)
    743c:	6818      	ldr	r0, [r3, #0]
    743e:	4605      	mov	r5, r0
	prev = NULL;
    7440:	2600      	movs	r6, #0
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    7442:	e001      	b.n	7448 <tcp_input+0xe0>
		prev = pcb;
    7444:	462e      	mov	r6, r5
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    7446:	68ed      	ldr	r5, [r5, #12]
    7448:	b1cd      	cbz	r5, 747e <tcp_input+0x116>
		if (pcb->remote_port == tcphdr->src && pcb->local_port == tcphdr->dest
    744a:	8ba9      	ldrh	r1, [r5, #28]
    744c:	4b57      	ldr	r3, [pc, #348]	; (75ac <tcp_input+0x244>)
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	881a      	ldrh	r2, [r3, #0]
    7452:	4291      	cmp	r1, r2
    7454:	d1f6      	bne.n	7444 <tcp_input+0xdc>
    7456:	8b6a      	ldrh	r2, [r5, #26]
    7458:	885b      	ldrh	r3, [r3, #2]
    745a:	429a      	cmp	r2, r3
    745c:	d1f2      	bne.n	7444 <tcp_input+0xdc>
		    && ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src)
    745e:	686a      	ldr	r2, [r5, #4]
    7460:	4b57      	ldr	r3, [pc, #348]	; (75c0 <tcp_input+0x258>)
    7462:	681b      	ldr	r3, [r3, #0]
    7464:	429a      	cmp	r2, r3
    7466:	d1ed      	bne.n	7444 <tcp_input+0xdc>
		    && ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    7468:	682a      	ldr	r2, [r5, #0]
    746a:	4b53      	ldr	r3, [pc, #332]	; (75b8 <tcp_input+0x250>)
    746c:	681b      	ldr	r3, [r3, #0]
    746e:	429a      	cmp	r2, r3
    7470:	d1e8      	bne.n	7444 <tcp_input+0xdc>
			if (prev != NULL) {
    7472:	b126      	cbz	r6, 747e <tcp_input+0x116>
				prev->next      = pcb->next;
    7474:	68eb      	ldr	r3, [r5, #12]
    7476:	60f3      	str	r3, [r6, #12]
				pcb->next       = tcp_active_pcbs;
    7478:	60e8      	str	r0, [r5, #12]
				tcp_active_pcbs = pcb;
    747a:	4b54      	ldr	r3, [pc, #336]	; (75cc <tcp_input+0x264>)
    747c:	601d      	str	r5, [r3, #0]
	if (pcb == NULL) {
    747e:	2d00      	cmp	r5, #0
    7480:	d04e      	beq.n	7520 <tcp_input+0x1b8>
	if (pcb != NULL) {
    7482:	2d00      	cmp	r5, #0
    7484:	f000 8128 	beq.w	76d8 <tcp_input+0x370>
		inseg.next   = NULL;
    7488:	4b48      	ldr	r3, [pc, #288]	; (75ac <tcp_input+0x244>)
    748a:	2200      	movs	r2, #0
    748c:	615a      	str	r2, [r3, #20]
		inseg.len    = p->tot_len;
    748e:	8921      	ldrh	r1, [r4, #8]
    7490:	8399      	strh	r1, [r3, #28]
		inseg.p      = p;
    7492:	619c      	str	r4, [r3, #24]
		inseg.tcphdr = tcphdr;
    7494:	6819      	ldr	r1, [r3, #0]
    7496:	6219      	str	r1, [r3, #32]
		recv_data  = NULL;
    7498:	625a      	str	r2, [r3, #36]	; 0x24
		recv_flags = 0;
    749a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (flags & TCP_PSH) {
    749e:	f017 0f08 	tst.w	r7, #8
    74a2:	d003      	beq.n	74ac <tcp_input+0x144>
			p->flags |= PBUF_FLAG_PUSH;
    74a4:	7b63      	ldrb	r3, [r4, #13]
    74a6:	f043 0301 	orr.w	r3, r3, #1
    74aa:	7363      	strb	r3, [r4, #13]
		if (pcb->refused_data != NULL) {
    74ac:	6fab      	ldr	r3, [r5, #120]	; 0x78
    74ae:	b153      	cbz	r3, 74c6 <tcp_input+0x15e>
			if ((tcp_process_refused_data(pcb) == ERR_ABRT) || ((pcb->refused_data != NULL) && (tcplen > 0))) {
    74b0:	4628      	mov	r0, r5
    74b2:	4b47      	ldr	r3, [pc, #284]	; (75d0 <tcp_input+0x268>)
    74b4:	4798      	blx	r3
    74b6:	f110 0f0a 	cmn.w	r0, #10
    74ba:	d022      	beq.n	7502 <tcp_input+0x19a>
    74bc:	6fab      	ldr	r3, [r5, #120]	; 0x78
    74be:	b113      	cbz	r3, 74c6 <tcp_input+0x15e>
    74c0:	4b3a      	ldr	r3, [pc, #232]	; (75ac <tcp_input+0x244>)
    74c2:	899b      	ldrh	r3, [r3, #12]
    74c4:	b9eb      	cbnz	r3, 7502 <tcp_input+0x19a>
		tcp_input_pcb = pcb;
    74c6:	4b43      	ldr	r3, [pc, #268]	; (75d4 <tcp_input+0x26c>)
    74c8:	601d      	str	r5, [r3, #0]
		err           = tcp_process(pcb);
    74ca:	4628      	mov	r0, r5
    74cc:	4b42      	ldr	r3, [pc, #264]	; (75d8 <tcp_input+0x270>)
    74ce:	4798      	blx	r3
		if (err != ERR_ABRT) {
    74d0:	f110 0f0a 	cmn.w	r0, #10
    74d4:	d015      	beq.n	7502 <tcp_input+0x19a>
			if (recv_flags & TF_RESET) {
    74d6:	4b35      	ldr	r3, [pc, #212]	; (75ac <tcp_input+0x244>)
    74d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    74dc:	f013 0f08 	tst.w	r3, #8
    74e0:	f000 808a 	beq.w	75f8 <tcp_input+0x290>
				TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
    74e4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    74e8:	b11b      	cbz	r3, 74f2 <tcp_input+0x18a>
    74ea:	f06f 010a 	mvn.w	r1, #10
    74ee:	6928      	ldr	r0, [r5, #16]
    74f0:	4798      	blx	r3
				tcp_pcb_remove(&tcp_active_pcbs, pcb);
    74f2:	4629      	mov	r1, r5
    74f4:	4835      	ldr	r0, [pc, #212]	; (75cc <tcp_input+0x264>)
    74f6:	4b39      	ldr	r3, [pc, #228]	; (75dc <tcp_input+0x274>)
    74f8:	4798      	blx	r3
				memp_free(MEMP_TCP_PCB, pcb);
    74fa:	4629      	mov	r1, r5
    74fc:	2001      	movs	r0, #1
    74fe:	4b38      	ldr	r3, [pc, #224]	; (75e0 <tcp_input+0x278>)
    7500:	4798      	blx	r3
		tcp_input_pcb = NULL;
    7502:	2200      	movs	r2, #0
    7504:	4b33      	ldr	r3, [pc, #204]	; (75d4 <tcp_input+0x26c>)
    7506:	601a      	str	r2, [r3, #0]
		recv_data     = NULL;
    7508:	4b28      	ldr	r3, [pc, #160]	; (75ac <tcp_input+0x244>)
    750a:	625a      	str	r2, [r3, #36]	; 0x24
		if (inseg.p != NULL) {
    750c:	6998      	ldr	r0, [r3, #24]
    750e:	2800      	cmp	r0, #0
    7510:	f43f af42 	beq.w	7398 <tcp_input+0x30>
			pbuf_free(inseg.p);
    7514:	4b27      	ldr	r3, [pc, #156]	; (75b4 <tcp_input+0x24c>)
    7516:	4798      	blx	r3
			inseg.p = NULL;
    7518:	2200      	movs	r2, #0
    751a:	4b24      	ldr	r3, [pc, #144]	; (75ac <tcp_input+0x244>)
    751c:	619a      	str	r2, [r3, #24]
    751e:	e73b      	b.n	7398 <tcp_input+0x30>
		for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    7520:	4b30      	ldr	r3, [pc, #192]	; (75e4 <tcp_input+0x27c>)
    7522:	681d      	ldr	r5, [r3, #0]
    7524:	e000      	b.n	7528 <tcp_input+0x1c0>
    7526:	68ed      	ldr	r5, [r5, #12]
    7528:	b1d5      	cbz	r5, 7560 <tcp_input+0x1f8>
			if (pcb->remote_port == tcphdr->src && pcb->local_port == tcphdr->dest
    752a:	8ba9      	ldrh	r1, [r5, #28]
    752c:	4b1f      	ldr	r3, [pc, #124]	; (75ac <tcp_input+0x244>)
    752e:	681b      	ldr	r3, [r3, #0]
    7530:	881a      	ldrh	r2, [r3, #0]
    7532:	4291      	cmp	r1, r2
    7534:	d1f7      	bne.n	7526 <tcp_input+0x1be>
    7536:	8b6a      	ldrh	r2, [r5, #26]
    7538:	885b      	ldrh	r3, [r3, #2]
    753a:	429a      	cmp	r2, r3
    753c:	d1f3      	bne.n	7526 <tcp_input+0x1be>
			    && ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src)
    753e:	686a      	ldr	r2, [r5, #4]
    7540:	4b1f      	ldr	r3, [pc, #124]	; (75c0 <tcp_input+0x258>)
    7542:	681b      	ldr	r3, [r3, #0]
    7544:	429a      	cmp	r2, r3
    7546:	d1ee      	bne.n	7526 <tcp_input+0x1be>
			    && ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    7548:	682a      	ldr	r2, [r5, #0]
    754a:	4b1b      	ldr	r3, [pc, #108]	; (75b8 <tcp_input+0x250>)
    754c:	681b      	ldr	r3, [r3, #0]
    754e:	429a      	cmp	r2, r3
    7550:	d1e9      	bne.n	7526 <tcp_input+0x1be>
				tcp_timewait_input(pcb);
    7552:	4628      	mov	r0, r5
    7554:	4b24      	ldr	r3, [pc, #144]	; (75e8 <tcp_input+0x280>)
    7556:	4798      	blx	r3
				pbuf_free(p);
    7558:	4620      	mov	r0, r4
    755a:	4b16      	ldr	r3, [pc, #88]	; (75b4 <tcp_input+0x24c>)
    755c:	4798      	blx	r3
				return;
    755e:	e71b      	b.n	7398 <tcp_input+0x30>
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    7560:	4b22      	ldr	r3, [pc, #136]	; (75ec <tcp_input+0x284>)
    7562:	681e      	ldr	r6, [r3, #0]
    7564:	4630      	mov	r0, r6
		prev = NULL;
    7566:	4629      	mov	r1, r5
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    7568:	e001      	b.n	756e <tcp_input+0x206>
			prev = (struct tcp_pcb *)lpcb;
    756a:	4601      	mov	r1, r0
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    756c:	68c0      	ldr	r0, [r0, #12]
    756e:	b168      	cbz	r0, 758c <tcp_input+0x224>
			if (lpcb->local_port == tcphdr->dest) {
    7570:	8b42      	ldrh	r2, [r0, #26]
    7572:	4b0e      	ldr	r3, [pc, #56]	; (75ac <tcp_input+0x244>)
    7574:	681b      	ldr	r3, [r3, #0]
    7576:	885b      	ldrh	r3, [r3, #2]
    7578:	429a      	cmp	r2, r3
    757a:	d1f6      	bne.n	756a <tcp_input+0x202>
				if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) || ip_addr_isany(&(lpcb->local_ip))) {
    757c:	6803      	ldr	r3, [r0, #0]
    757e:	4a0e      	ldr	r2, [pc, #56]	; (75b8 <tcp_input+0x250>)
    7580:	6812      	ldr	r2, [r2, #0]
    7582:	4293      	cmp	r3, r2
    7584:	d002      	beq.n	758c <tcp_input+0x224>
    7586:	b108      	cbz	r0, 758c <tcp_input+0x224>
    7588:	2b00      	cmp	r3, #0
    758a:	d1ee      	bne.n	756a <tcp_input+0x202>
		if (lpcb != NULL) {
    758c:	2800      	cmp	r0, #0
    758e:	f43f af78 	beq.w	7482 <tcp_input+0x11a>
			if (prev != NULL) {
    7592:	b121      	cbz	r1, 759e <tcp_input+0x236>
				((struct tcp_pcb_listen *)prev)->next = lpcb->next;
    7594:	68c3      	ldr	r3, [r0, #12]
    7596:	60cb      	str	r3, [r1, #12]
				lpcb->next = tcp_listen_pcbs.listen_pcbs;
    7598:	60c6      	str	r6, [r0, #12]
				tcp_listen_pcbs.listen_pcbs = lpcb;
    759a:	4b14      	ldr	r3, [pc, #80]	; (75ec <tcp_input+0x284>)
    759c:	6018      	str	r0, [r3, #0]
			tcp_listen_input(lpcb);
    759e:	4b14      	ldr	r3, [pc, #80]	; (75f0 <tcp_input+0x288>)
    75a0:	4798      	blx	r3
			pbuf_free(p);
    75a2:	4620      	mov	r0, r4
    75a4:	4b03      	ldr	r3, [pc, #12]	; (75b4 <tcp_input+0x24c>)
    75a6:	4798      	blx	r3
			return;
    75a8:	e6f6      	b.n	7398 <tcp_input+0x30>
    75aa:	bf00      	nop
    75ac:	200080a4 	.word	0x200080a4
    75b0:	00005427 	.word	0x00005427
    75b4:	000054a1 	.word	0x000054a1
    75b8:	200129a8 	.word	0x200129a8
    75bc:	000045ed 	.word	0x000045ed
    75c0:	200129a0 	.word	0x200129a0
    75c4:	000041b1 	.word	0x000041b1
    75c8:	00003e9d 	.word	0x00003e9d
    75cc:	200161d4 	.word	0x200161d4
    75d0:	00005fa9 	.word	0x00005fa9
    75d4:	200161ec 	.word	0x200161ec
    75d8:	00006eb1 	.word	0x00006eb1
    75dc:	00005d59 	.word	0x00005d59
    75e0:	000051fd 	.word	0x000051fd
    75e4:	200161e8 	.word	0x200161e8
    75e8:	00006401 	.word	0x00006401
    75ec:	200161dc 	.word	0x200161dc
    75f0:	0000648d 	.word	0x0000648d
    75f4:	00003ec1 	.word	0x00003ec1
			} else if (recv_flags & TF_CLOSED) {
    75f8:	f013 0f10 	tst.w	r3, #16
    75fc:	d013      	beq.n	7626 <tcp_input+0x2be>
				if (!(pcb->flags & TF_RXCLOSED)) {
    75fe:	7fab      	ldrb	r3, [r5, #30]
    7600:	f013 0f10 	tst.w	r3, #16
    7604:	d106      	bne.n	7614 <tcp_input+0x2ac>
					TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
    7606:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    760a:	b11b      	cbz	r3, 7614 <tcp_input+0x2ac>
    760c:	f06f 010b 	mvn.w	r1, #11
    7610:	6928      	ldr	r0, [r5, #16]
    7612:	4798      	blx	r3
				tcp_pcb_remove(&tcp_active_pcbs, pcb);
    7614:	4629      	mov	r1, r5
    7616:	483e      	ldr	r0, [pc, #248]	; (7710 <tcp_input+0x3a8>)
    7618:	4b3e      	ldr	r3, [pc, #248]	; (7714 <tcp_input+0x3ac>)
    761a:	4798      	blx	r3
				memp_free(MEMP_TCP_PCB, pcb);
    761c:	4629      	mov	r1, r5
    761e:	2001      	movs	r0, #1
    7620:	4b3d      	ldr	r3, [pc, #244]	; (7718 <tcp_input+0x3b0>)
    7622:	4798      	blx	r3
    7624:	e76d      	b.n	7502 <tcp_input+0x19a>
				if (pcb->acked > 0) {
    7626:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    762a:	b142      	cbz	r2, 763e <tcp_input+0x2d6>
					TCP_EVENT_SENT(pcb, pcb->acked, err);
    762c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    762e:	b1a3      	cbz	r3, 765a <tcp_input+0x2f2>
    7630:	4629      	mov	r1, r5
    7632:	6928      	ldr	r0, [r5, #16]
    7634:	4798      	blx	r3
					if (err == ERR_ABRT) {
    7636:	f110 0f0a 	cmn.w	r0, #10
    763a:	f43f af62 	beq.w	7502 <tcp_input+0x19a>
				if (recv_data != NULL) {
    763e:	4b37      	ldr	r3, [pc, #220]	; (771c <tcp_input+0x3b4>)
    7640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7642:	b1da      	cbz	r2, 767c <tcp_input+0x314>
					if (pcb->flags & TF_RXCLOSED) {
    7644:	7fab      	ldrb	r3, [r5, #30]
    7646:	f013 0f10 	tst.w	r3, #16
    764a:	d008      	beq.n	765e <tcp_input+0x2f6>
						pbuf_free(recv_data);
    764c:	4610      	mov	r0, r2
    764e:	4b34      	ldr	r3, [pc, #208]	; (7720 <tcp_input+0x3b8>)
    7650:	4798      	blx	r3
						tcp_abort(pcb);
    7652:	4628      	mov	r0, r5
    7654:	4b33      	ldr	r3, [pc, #204]	; (7724 <tcp_input+0x3bc>)
    7656:	4798      	blx	r3
						goto aborted;
    7658:	e753      	b.n	7502 <tcp_input+0x19a>
					TCP_EVENT_SENT(pcb, pcb->acked, err);
    765a:	2000      	movs	r0, #0
    765c:	e7eb      	b.n	7636 <tcp_input+0x2ce>
					TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    765e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    7662:	b1f4      	cbz	r4, 76a2 <tcp_input+0x33a>
    7664:	2300      	movs	r3, #0
    7666:	4629      	mov	r1, r5
    7668:	6928      	ldr	r0, [r5, #16]
    766a:	47a0      	blx	r4
					if (err == ERR_ABRT) {
    766c:	f110 0f0a 	cmn.w	r0, #10
    7670:	f43f af47 	beq.w	7502 <tcp_input+0x19a>
					if (err != ERR_OK) {
    7674:	b110      	cbz	r0, 767c <tcp_input+0x314>
						pcb->refused_data = recv_data;
    7676:	4b29      	ldr	r3, [pc, #164]	; (771c <tcp_input+0x3b4>)
    7678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    767a:	67ab      	str	r3, [r5, #120]	; 0x78
				if (recv_flags & TF_GOT_FIN) {
    767c:	4b27      	ldr	r3, [pc, #156]	; (771c <tcp_input+0x3b4>)
    767e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7682:	f013 0f20 	tst.w	r3, #32
    7686:	d005      	beq.n	7694 <tcp_input+0x32c>
					if (pcb->refused_data != NULL) {
    7688:	6fab      	ldr	r3, [r5, #120]	; 0x78
    768a:	b183      	cbz	r3, 76ae <tcp_input+0x346>
						pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
    768c:	7b5a      	ldrb	r2, [r3, #13]
    768e:	f042 0220 	orr.w	r2, r2, #32
    7692:	735a      	strb	r2, [r3, #13]
				tcp_input_pcb = NULL;
    7694:	2200      	movs	r2, #0
    7696:	4b24      	ldr	r3, [pc, #144]	; (7728 <tcp_input+0x3c0>)
    7698:	601a      	str	r2, [r3, #0]
				tcp_output(pcb);
    769a:	4628      	mov	r0, r5
    769c:	4b23      	ldr	r3, [pc, #140]	; (772c <tcp_input+0x3c4>)
    769e:	4798      	blx	r3
    76a0:	e72f      	b.n	7502 <tcp_input+0x19a>
					TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    76a2:	2300      	movs	r3, #0
    76a4:	4629      	mov	r1, r5
    76a6:	4618      	mov	r0, r3
    76a8:	4c21      	ldr	r4, [pc, #132]	; (7730 <tcp_input+0x3c8>)
    76aa:	47a0      	blx	r4
    76ac:	e7de      	b.n	766c <tcp_input+0x304>
						if (pcb->rcv_wnd != TCP_WND) {
    76ae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    76b0:	f241 62d0 	movw	r2, #5840	; 0x16d0
    76b4:	4293      	cmp	r3, r2
    76b6:	d001      	beq.n	76bc <tcp_input+0x354>
							pcb->rcv_wnd++;
    76b8:	3301      	adds	r3, #1
    76ba:	85ab      	strh	r3, [r5, #44]	; 0x2c
						TCP_EVENT_CLOSED(pcb, err);
    76bc:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    76c0:	b144      	cbz	r4, 76d4 <tcp_input+0x36c>
    76c2:	2300      	movs	r3, #0
    76c4:	461a      	mov	r2, r3
    76c6:	4629      	mov	r1, r5
    76c8:	6928      	ldr	r0, [r5, #16]
    76ca:	47a0      	blx	r4
						if (err == ERR_ABRT) {
    76cc:	f110 0f0a 	cmn.w	r0, #10
    76d0:	d1e0      	bne.n	7694 <tcp_input+0x32c>
    76d2:	e716      	b.n	7502 <tcp_input+0x19a>
						TCP_EVENT_CLOSED(pcb, err);
    76d4:	2000      	movs	r0, #0
    76d6:	e7f9      	b.n	76cc <tcp_input+0x364>
		if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
    76d8:	4b10      	ldr	r3, [pc, #64]	; (771c <tcp_input+0x3b4>)
    76da:	681b      	ldr	r3, [r3, #0]
    76dc:	8998      	ldrh	r0, [r3, #12]
    76de:	4b15      	ldr	r3, [pc, #84]	; (7734 <tcp_input+0x3cc>)
    76e0:	4798      	blx	r3
    76e2:	f010 0f04 	tst.w	r0, #4
    76e6:	d003      	beq.n	76f0 <tcp_input+0x388>
		pbuf_free(p);
    76e8:	4620      	mov	r0, r4
    76ea:	4b0d      	ldr	r3, [pc, #52]	; (7720 <tcp_input+0x3b8>)
    76ec:	4798      	blx	r3
    76ee:	e653      	b.n	7398 <tcp_input+0x30>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    76f0:	480a      	ldr	r0, [pc, #40]	; (771c <tcp_input+0x3b4>)
    76f2:	6803      	ldr	r3, [r0, #0]
    76f4:	8985      	ldrh	r5, [r0, #12]
    76f6:	6881      	ldr	r1, [r0, #8]
    76f8:	881a      	ldrh	r2, [r3, #0]
    76fa:	9201      	str	r2, [sp, #4]
    76fc:	885b      	ldrh	r3, [r3, #2]
    76fe:	9300      	str	r3, [sp, #0]
    7700:	4b0d      	ldr	r3, [pc, #52]	; (7738 <tcp_input+0x3d0>)
    7702:	4a0e      	ldr	r2, [pc, #56]	; (773c <tcp_input+0x3d4>)
    7704:	4429      	add	r1, r5
    7706:	6900      	ldr	r0, [r0, #16]
    7708:	4d0d      	ldr	r5, [pc, #52]	; (7740 <tcp_input+0x3d8>)
    770a:	47a8      	blx	r5
    770c:	e7ec      	b.n	76e8 <tcp_input+0x380>
    770e:	bf00      	nop
    7710:	200161d4 	.word	0x200161d4
    7714:	00005d59 	.word	0x00005d59
    7718:	000051fd 	.word	0x000051fd
    771c:	200080a4 	.word	0x200080a4
    7720:	000054a1 	.word	0x000054a1
    7724:	000061bd 	.word	0x000061bd
    7728:	200161ec 	.word	0x200161ec
    772c:	00007ee9 	.word	0x00007ee9
    7730:	00005f79 	.word	0x00005f79
    7734:	00003e9d 	.word	0x00003e9d
    7738:	200129a0 	.word	0x200129a0
    773c:	200129a8 	.word	0x200129a8
    7740:	000080c5 	.word	0x000080c5

00007744 <tcp_write_checks>:
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
	/* connection is in invalid state for data transmission? */
	if ((pcb->state != ESTABLISHED) && (pcb->state != CLOSE_WAIT) && (pcb->state != SYN_SENT)
    7744:	7e03      	ldrb	r3, [r0, #24]
    7746:	2b04      	cmp	r3, #4
    7748:	d005      	beq.n	7756 <tcp_write_checks+0x12>
    774a:	2b07      	cmp	r3, #7
    774c:	d003      	beq.n	7756 <tcp_write_checks+0x12>
    774e:	2b02      	cmp	r3, #2
    7750:	d001      	beq.n	7756 <tcp_write_checks+0x12>
	    && (pcb->state != SYN_RCVD)) {
    7752:	2b03      	cmp	r3, #3
    7754:	d118      	bne.n	7788 <tcp_write_checks+0x44>
		LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE,
		            ("tcp_write() called in invalid state\n"));
		return ERR_CONN;
	} else if (len == 0) {
    7756:	b1d1      	cbz	r1, 778e <tcp_write_checks+0x4a>
		return ERR_OK;
	}

	/* fail on too much data */
	if (len > pcb->snd_buf) {
    7758:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    775c:	4299      	cmp	r1, r3
    775e:	d805      	bhi.n	776c <tcp_write_checks+0x28>
	LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %" U16_F "\n", (u16_t)pcb->snd_queuelen));

	/* If total number of pbufs on the unsent/unacked queues exceeds the
	 * configured maximum, return an error */
	/* check for configured max queuelen and possible overflow */
	if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    7760:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    7764:	2b07      	cmp	r3, #7
    7766:	d808      	bhi.n	777a <tcp_write_checks+0x36>
		LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
		            pcb->unacked != NULL || pcb->unsent != NULL);
	} else {
		LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty", pcb->unacked == NULL && pcb->unsent == NULL);
	}
	return ERR_OK;
    7768:	2000      	movs	r0, #0
}
    776a:	4770      	bx	lr
		pcb->flags |= TF_NAGLEMEMERR;
    776c:	7f83      	ldrb	r3, [r0, #30]
    776e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7772:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    7774:	f04f 30ff 	mov.w	r0, #4294967295
    7778:	4770      	bx	lr
		pcb->flags |= TF_NAGLEMEMERR;
    777a:	7f83      	ldrb	r3, [r0, #30]
    777c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7780:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    7782:	f04f 30ff 	mov.w	r0, #4294967295
    7786:	4770      	bx	lr
		return ERR_CONN;
    7788:	f06f 000c 	mvn.w	r0, #12
    778c:	4770      	bx	lr
		return ERR_OK;
    778e:	2000      	movs	r0, #0
    7790:	4770      	bx	lr
	...

00007794 <tcp_pbuf_prealloc>:
{
    7794:	b538      	push	{r3, r4, r5, lr}
    7796:	460c      	mov	r4, r1
    7798:	461d      	mov	r5, r3
    779a:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (length < max_length) {
    779e:	4291      	cmp	r1, r2
    77a0:	d215      	bcs.n	77ce <tcp_pbuf_prealloc+0x3a>
		if ((apiflags & TCP_WRITE_FLAG_MORE)
    77a2:	f89d 1014 	ldrb.w	r1, [sp, #20]
    77a6:	f011 0f02 	tst.w	r1, #2
    77aa:	d108      	bne.n	77be <tcp_pbuf_prealloc+0x2a>
		    || (!(pcb->flags & TF_NODELAY) && (!first_seg || pcb->unsent != NULL || pcb->unacked != NULL))) {
    77ac:	9904      	ldr	r1, [sp, #16]
    77ae:	7f89      	ldrb	r1, [r1, #30]
    77b0:	f011 0f40 	tst.w	r1, #64	; 0x40
    77b4:	d11d      	bne.n	77f2 <tcp_pbuf_prealloc+0x5e>
    77b6:	b113      	cbz	r3, 77be <tcp_pbuf_prealloc+0x2a>
    77b8:	9b04      	ldr	r3, [sp, #16]
    77ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    77bc:	b19b      	cbz	r3, 77e6 <tcp_pbuf_prealloc+0x52>
			alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    77be:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
    77c2:	f021 0103 	bic.w	r1, r1, #3
    77c6:	428a      	cmp	r2, r1
    77c8:	bfa8      	it	ge
    77ca:	460a      	movge	r2, r1
    77cc:	b291      	uxth	r1, r2
	p = pbuf_alloc(layer, alloc, PBUF_RAM);
    77ce:	2200      	movs	r2, #0
    77d0:	4b09      	ldr	r3, [pc, #36]	; (77f8 <tcp_pbuf_prealloc+0x64>)
    77d2:	4798      	blx	r3
	if (p == NULL) {
    77d4:	4603      	mov	r3, r0
    77d6:	b120      	cbz	r0, 77e2 <tcp_pbuf_prealloc+0x4e>
	*oversize = p->len - length;
    77d8:	8942      	ldrh	r2, [r0, #10]
    77da:	1b12      	subs	r2, r2, r4
    77dc:	802a      	strh	r2, [r5, #0]
	p->len = p->tot_len = length;
    77de:	8104      	strh	r4, [r0, #8]
    77e0:	8144      	strh	r4, [r0, #10]
}
    77e2:	4618      	mov	r0, r3
    77e4:	bd38      	pop	{r3, r4, r5, pc}
		    || (!(pcb->flags & TF_NODELAY) && (!first_seg || pcb->unsent != NULL || pcb->unacked != NULL))) {
    77e6:	9b04      	ldr	r3, [sp, #16]
    77e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    77ea:	2b00      	cmp	r3, #0
    77ec:	d1e7      	bne.n	77be <tcp_pbuf_prealloc+0x2a>
	u16_t        alloc = length;
    77ee:	4621      	mov	r1, r4
    77f0:	e7ed      	b.n	77ce <tcp_pbuf_prealloc+0x3a>
    77f2:	4621      	mov	r1, r4
    77f4:	e7eb      	b.n	77ce <tcp_pbuf_prealloc+0x3a>
    77f6:	bf00      	nop
    77f8:	00005505 	.word	0x00005505

000077fc <tcp_create_segment>:
{
    77fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7800:	4681      	mov	r9, r0
    7802:	460f      	mov	r7, r1
    7804:	4690      	mov	r8, r2
    7806:	469a      	mov	sl, r3
    7808:	f89d 6020 	ldrb.w	r6, [sp, #32]
	u8_t            optlen = LWIP_TCP_OPT_LENGTH(optflags);
    780c:	f016 0f01 	tst.w	r6, #1
    7810:	d03a      	beq.n	7888 <tcp_create_segment+0x8c>
    7812:	2504      	movs	r5, #4
    7814:	f016 0f02 	tst.w	r6, #2
    7818:	d038      	beq.n	788c <tcp_create_segment+0x90>
    781a:	230c      	movs	r3, #12
    781c:	441d      	add	r5, r3
	if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
    781e:	2003      	movs	r0, #3
    7820:	4b20      	ldr	r3, [pc, #128]	; (78a4 <tcp_create_segment+0xa8>)
    7822:	4798      	blx	r3
    7824:	4604      	mov	r4, r0
    7826:	2800      	cmp	r0, #0
    7828:	d032      	beq.n	7890 <tcp_create_segment+0x94>
	seg->flags = optflags;
    782a:	7286      	strb	r6, [r0, #10]
	seg->next  = NULL;
    782c:	2300      	movs	r3, #0
    782e:	6003      	str	r3, [r0, #0]
	seg->p     = p;
    7830:	6047      	str	r7, [r0, #4]
	seg->len   = p->tot_len - optlen;
    7832:	893b      	ldrh	r3, [r7, #8]
    7834:	1b5b      	subs	r3, r3, r5
    7836:	8103      	strh	r3, [r0, #8]
	if (pbuf_header(p, TCP_HLEN)) {
    7838:	2114      	movs	r1, #20
    783a:	4638      	mov	r0, r7
    783c:	4b1a      	ldr	r3, [pc, #104]	; (78a8 <tcp_create_segment+0xac>)
    783e:	4798      	blx	r3
    7840:	bb50      	cbnz	r0, 7898 <tcp_create_segment+0x9c>
	seg->tcphdr        = (struct tcp_hdr *)seg->p->payload;
    7842:	6863      	ldr	r3, [r4, #4]
    7844:	685f      	ldr	r7, [r3, #4]
    7846:	60e7      	str	r7, [r4, #12]
	seg->tcphdr->src   = htons(pcb->local_port);
    7848:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    784c:	4e17      	ldr	r6, [pc, #92]	; (78ac <tcp_create_segment+0xb0>)
    784e:	47b0      	blx	r6
    7850:	8038      	strh	r0, [r7, #0]
	seg->tcphdr->dest  = htons(pcb->remote_port);
    7852:	68e7      	ldr	r7, [r4, #12]
    7854:	f8b9 001c 	ldrh.w	r0, [r9, #28]
    7858:	47b0      	blx	r6
    785a:	8078      	strh	r0, [r7, #2]
	seg->tcphdr->seqno = htonl(seqno);
    785c:	68e7      	ldr	r7, [r4, #12]
    785e:	4650      	mov	r0, sl
    7860:	4b13      	ldr	r3, [pc, #76]	; (78b0 <tcp_create_segment+0xb4>)
    7862:	4798      	blx	r3
    7864:	6078      	str	r0, [r7, #4]
	TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
    7866:	68e7      	ldr	r7, [r4, #12]
    7868:	f3c5 0087 	ubfx	r0, r5, #2, #8
    786c:	3005      	adds	r0, #5
    786e:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
    7872:	b200      	sxth	r0, r0
    7874:	b280      	uxth	r0, r0
    7876:	47b0      	blx	r6
    7878:	81b8      	strh	r0, [r7, #12]
	seg->tcphdr->urgp = 0;
    787a:	68e3      	ldr	r3, [r4, #12]
    787c:	2200      	movs	r2, #0
    787e:	749a      	strb	r2, [r3, #18]
    7880:	74da      	strb	r2, [r3, #19]
}
    7882:	4620      	mov	r0, r4
    7884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	u8_t            optlen = LWIP_TCP_OPT_LENGTH(optflags);
    7888:	2500      	movs	r5, #0
    788a:	e7c3      	b.n	7814 <tcp_create_segment+0x18>
    788c:	2300      	movs	r3, #0
    788e:	e7c5      	b.n	781c <tcp_create_segment+0x20>
		pbuf_free(p);
    7890:	4638      	mov	r0, r7
    7892:	4b08      	ldr	r3, [pc, #32]	; (78b4 <tcp_create_segment+0xb8>)
    7894:	4798      	blx	r3
		return NULL;
    7896:	e7f4      	b.n	7882 <tcp_create_segment+0x86>
		tcp_seg_free(seg);
    7898:	4620      	mov	r0, r4
    789a:	4b07      	ldr	r3, [pc, #28]	; (78b8 <tcp_create_segment+0xbc>)
    789c:	4798      	blx	r3
		return NULL;
    789e:	2400      	movs	r4, #0
    78a0:	e7ef      	b.n	7882 <tcp_create_segment+0x86>
    78a2:	bf00      	nop
    78a4:	000051d5 	.word	0x000051d5
    78a8:	00005427 	.word	0x00005427
    78ac:	00003e91 	.word	0x00003e91
    78b0:	00003ea9 	.word	0x00003ea9
    78b4:	000054a1 	.word	0x000054a1
    78b8:	0000595d 	.word	0x0000595d

000078bc <tcp_output_alloc_header>:
{
    78bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    78c0:	4606      	mov	r6, r0
    78c2:	460c      	mov	r4, r1
    78c4:	4699      	mov	r9, r3
	struct pbuf *   p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
    78c6:	4411      	add	r1, r2
    78c8:	b289      	uxth	r1, r1
    78ca:	3114      	adds	r1, #20
    78cc:	2200      	movs	r2, #0
    78ce:	b289      	uxth	r1, r1
    78d0:	2001      	movs	r0, #1
    78d2:	4b14      	ldr	r3, [pc, #80]	; (7924 <tcp_output_alloc_header+0x68>)
    78d4:	4798      	blx	r3
	if (p != NULL) {
    78d6:	4680      	mov	r8, r0
    78d8:	b308      	cbz	r0, 791e <tcp_output_alloc_header+0x62>
		tcphdr        = (struct tcp_hdr *)p->payload;
    78da:	6845      	ldr	r5, [r0, #4]
		tcphdr->src   = htons(pcb->local_port);
    78dc:	8b70      	ldrh	r0, [r6, #26]
    78de:	4f12      	ldr	r7, [pc, #72]	; (7928 <tcp_output_alloc_header+0x6c>)
    78e0:	47b8      	blx	r7
    78e2:	8028      	strh	r0, [r5, #0]
		tcphdr->dest  = htons(pcb->remote_port);
    78e4:	8bb0      	ldrh	r0, [r6, #28]
    78e6:	47b8      	blx	r7
    78e8:	8068      	strh	r0, [r5, #2]
		tcphdr->seqno = seqno_be;
    78ea:	f8c5 9004 	str.w	r9, [r5, #4]
		tcphdr->ackno = htonl(pcb->rcv_nxt);
    78ee:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    78f0:	4b0e      	ldr	r3, [pc, #56]	; (792c <tcp_output_alloc_header+0x70>)
    78f2:	4798      	blx	r3
    78f4:	60a8      	str	r0, [r5, #8]
		TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    78f6:	08a0      	lsrs	r0, r4, #2
    78f8:	3005      	adds	r0, #5
    78fa:	0300      	lsls	r0, r0, #12
    78fc:	b280      	uxth	r0, r0
    78fe:	f040 0010 	orr.w	r0, r0, #16
    7902:	47b8      	blx	r7
    7904:	81a8      	strh	r0, [r5, #12]
		tcphdr->wnd    = htons(pcb->rcv_ann_wnd);
    7906:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
    7908:	47b8      	blx	r7
    790a:	81e8      	strh	r0, [r5, #14]
		tcphdr->chksum = 0;
    790c:	2300      	movs	r3, #0
    790e:	742b      	strb	r3, [r5, #16]
    7910:	746b      	strb	r3, [r5, #17]
		tcphdr->urgp   = 0;
    7912:	74ab      	strb	r3, [r5, #18]
    7914:	74eb      	strb	r3, [r5, #19]
		pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    7916:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7918:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
    791a:	4413      	add	r3, r2
    791c:	6333      	str	r3, [r6, #48]	; 0x30
}
    791e:	4640      	mov	r0, r8
    7920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7924:	00005505 	.word	0x00005505
    7928:	00003e91 	.word	0x00003e91
    792c:	00003ea9 	.word	0x00003ea9

00007930 <tcp_output_segment>:
 *
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
    7930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7934:	b082      	sub	sp, #8
    7936:	4605      	mov	r5, r0
    7938:	460c      	mov	r4, r1
	/** @bug Exclude retransmitted segments from this count. */
	snmp_inc_tcpoutsegs();

	/* The TCP header has already been constructed, but the ackno and
	 wnd fields remain. */
	seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
    793a:	68c6      	ldr	r6, [r0, #12]
    793c:	6a88      	ldr	r0, [r1, #40]	; 0x28
    793e:	4b33      	ldr	r3, [pc, #204]	; (7a0c <tcp_output_segment+0xdc>)
    7940:	4798      	blx	r3
    7942:	60b0      	str	r0, [r6, #8]

	/* advertise our receive window size in this TCP segment */
	seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
    7944:	68ee      	ldr	r6, [r5, #12]
    7946:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    7948:	4b31      	ldr	r3, [pc, #196]	; (7a10 <tcp_output_segment+0xe0>)
    794a:	4798      	blx	r3
    794c:	81f0      	strh	r0, [r6, #14]

	pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    794e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7950:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    7952:	4413      	add	r3, r2
    7954:	6323      	str	r3, [r4, #48]	; 0x30

	/* Add any requested options.  NB MSS option is only set on SYN
	   packets, so ignore it here */
	opts = (u32_t *)(void *)(seg->tcphdr + 1);
    7956:	68ee      	ldr	r6, [r5, #12]
	if (seg->flags & TF_SEG_OPTS_MSS) {
    7958:	7aab      	ldrb	r3, [r5, #10]
    795a:	f013 0f01 	tst.w	r3, #1
    795e:	d13d      	bne.n	79dc <tcp_output_segment+0xac>
	}
#endif

	/* Set retransmission timer running if it is not currently enabled
	   This must be set before checking the route. */
	if (pcb->rtime == -1) {
    7960:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    7964:	f1b3 3fff 	cmp.w	r3, #4294967295
    7968:	d043      	beq.n	79f2 <tcp_output_segment+0xc2>
		pcb->rtime = 0;
	}

	/* If we don't have a local IP address, we get one by
	   calling ip_route(). */
	if (ip_addr_isany(&(pcb->local_ip))) {
    796a:	b10c      	cbz	r4, 7970 <tcp_output_segment+0x40>
    796c:	6823      	ldr	r3, [r4, #0]
    796e:	b933      	cbnz	r3, 797e <tcp_output_segment+0x4e>
		netif = ip_route(&(pcb->remote_ip));
    7970:	1d20      	adds	r0, r4, #4
    7972:	4b28      	ldr	r3, [pc, #160]	; (7a14 <tcp_output_segment+0xe4>)
    7974:	4798      	blx	r3
		if (netif == NULL) {
    7976:	2800      	cmp	r0, #0
    7978:	d02d      	beq.n	79d6 <tcp_output_segment+0xa6>
			return;
		}
		ip_addr_copy(pcb->local_ip, netif->ip_addr);
    797a:	6843      	ldr	r3, [r0, #4]
    797c:	6023      	str	r3, [r4, #0]
	}

	if (pcb->rttest == 0) {
    797e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7980:	2b00      	cmp	r3, #0
    7982:	d039      	beq.n	79f8 <tcp_output_segment+0xc8>
	LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
	            ("tcp_output_segment: %" U32_F ":%" U32_F "\n",
	             htonl(seg->tcphdr->seqno),
	             htonl(seg->tcphdr->seqno) + seg->len));

	len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
    7984:	68eb      	ldr	r3, [r5, #12]
    7986:	686a      	ldr	r2, [r5, #4]
    7988:	6851      	ldr	r1, [r2, #4]
    798a:	1a5b      	subs	r3, r3, r1
    798c:	b29b      	uxth	r3, r3

	seg->p->len -= len;
    798e:	8951      	ldrh	r1, [r2, #10]
    7990:	1ac9      	subs	r1, r1, r3
    7992:	8151      	strh	r1, [r2, #10]
	seg->p->tot_len -= len;
    7994:	6869      	ldr	r1, [r5, #4]
    7996:	890a      	ldrh	r2, [r1, #8]
    7998:	1ad3      	subs	r3, r2, r3
    799a:	810b      	strh	r3, [r1, #8]

	seg->p->payload = seg->tcphdr;
    799c:	686b      	ldr	r3, [r5, #4]
    799e:	68ea      	ldr	r2, [r5, #12]
    79a0:	605a      	str	r2, [r3, #4]

	seg->tcphdr->chksum = 0;
    79a2:	68eb      	ldr	r3, [r5, #12]
    79a4:	2200      	movs	r2, #0
    79a6:	741a      	strb	r2, [r3, #16]
    79a8:	745a      	strb	r2, [r3, #17]
			seg->tcphdr->chksum = chksum_slow;
		}
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
	}
#else  /* TCP_CHECKSUM_ON_COPY */
	seg->tcphdr->chksum
    79aa:	68ef      	ldr	r7, [r5, #12]
	    = inet_chksum_pseudo(seg->p, &(pcb->local_ip), &(pcb->remote_ip), IP_PROTO_TCP, seg->p->tot_len);
    79ac:	6868      	ldr	r0, [r5, #4]
    79ae:	1d26      	adds	r6, r4, #4
    79b0:	8903      	ldrh	r3, [r0, #8]
    79b2:	9300      	str	r3, [sp, #0]
    79b4:	2306      	movs	r3, #6
    79b6:	4632      	mov	r2, r6
    79b8:	4621      	mov	r1, r4
    79ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7a28 <tcp_output_segment+0xf8>
    79be:	47c0      	blx	r8
    79c0:	8238      	strh	r0, [r7, #16]
	TCP_STATS_INC(tcp.xmit);

#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP);
    79c2:	7aa3      	ldrb	r3, [r4, #10]
    79c4:	6868      	ldr	r0, [r5, #4]
    79c6:	2206      	movs	r2, #6
    79c8:	9201      	str	r2, [sp, #4]
    79ca:	7a62      	ldrb	r2, [r4, #9]
    79cc:	9200      	str	r2, [sp, #0]
    79ce:	4632      	mov	r2, r6
    79d0:	4621      	mov	r1, r4
    79d2:	4c11      	ldr	r4, [pc, #68]	; (7a18 <tcp_output_segment+0xe8>)
    79d4:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/
}
    79d6:	b002      	add	sp, #8
    79d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
    79dc:	1d21      	adds	r1, r4, #4
    79de:	f240 50b4 	movw	r0, #1460	; 0x5b4
    79e2:	4b0e      	ldr	r3, [pc, #56]	; (7a1c <tcp_output_segment+0xec>)
    79e4:	4798      	blx	r3
		*opts = TCP_BUILD_MSS_OPTION(mss);
    79e6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
    79ea:	4b08      	ldr	r3, [pc, #32]	; (7a0c <tcp_output_segment+0xdc>)
    79ec:	4798      	blx	r3
    79ee:	6170      	str	r0, [r6, #20]
    79f0:	e7b6      	b.n	7960 <tcp_output_segment+0x30>
		pcb->rtime = 0;
    79f2:	2300      	movs	r3, #0
    79f4:	86a3      	strh	r3, [r4, #52]	; 0x34
    79f6:	e7b8      	b.n	796a <tcp_output_segment+0x3a>
		pcb->rttest = tcp_ticks;
    79f8:	4b09      	ldr	r3, [pc, #36]	; (7a20 <tcp_output_segment+0xf0>)
    79fa:	681b      	ldr	r3, [r3, #0]
    79fc:	63a3      	str	r3, [r4, #56]	; 0x38
		pcb->rtseq  = ntohl(seg->tcphdr->seqno);
    79fe:	68eb      	ldr	r3, [r5, #12]
    7a00:	6858      	ldr	r0, [r3, #4]
    7a02:	4b08      	ldr	r3, [pc, #32]	; (7a24 <tcp_output_segment+0xf4>)
    7a04:	4798      	blx	r3
    7a06:	63e0      	str	r0, [r4, #60]	; 0x3c
    7a08:	e7bc      	b.n	7984 <tcp_output_segment+0x54>
    7a0a:	bf00      	nop
    7a0c:	00003ea9 	.word	0x00003ea9
    7a10:	00003e91 	.word	0x00003e91
    7a14:	000042a1 	.word	0x000042a1
    7a18:	000045ad 	.word	0x000045ad
    7a1c:	00006345 	.word	0x00006345
    7a20:	200161d8 	.word	0x200161d8
    7a24:	00003ec1 	.word	0x00003ec1
    7a28:	000041b1 	.word	0x000041b1

00007a2c <tcp_write>:
{
    7a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a30:	b08f      	sub	sp, #60	; 0x3c
	u16_t oversize      = 0;
    7a32:	2400      	movs	r4, #0
    7a34:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
	u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max / 2);
    7a38:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
    7a3c:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
    7a3e:	0864      	lsrs	r4, r4, #1
    7a40:	42ac      	cmp	r4, r5
    7a42:	bf28      	it	cs
    7a44:	462c      	movcs	r4, r5
    7a46:	9409      	str	r4, [sp, #36]	; 0x24
	LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", arg != NULL, return ERR_ARG;);
    7a48:	b1b9      	cbz	r1, 7a7a <tcp_write+0x4e>
    7a4a:	9106      	str	r1, [sp, #24]
    7a4c:	9307      	str	r3, [sp, #28]
    7a4e:	4692      	mov	sl, r2
    7a50:	4607      	mov	r7, r0
	err = tcp_write_checks(pcb, len);
    7a52:	4611      	mov	r1, r2
    7a54:	4ba8      	ldr	r3, [pc, #672]	; (7cf8 <tcp_write+0x2cc>)
    7a56:	4798      	blx	r3
	if (err != ERR_OK) {
    7a58:	900b      	str	r0, [sp, #44]	; 0x2c
    7a5a:	2800      	cmp	r0, #0
    7a5c:	f040 80f8 	bne.w	7c50 <tcp_write+0x224>
	queuelen = pcb->snd_queuelen;
    7a60:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    7a64:	9305      	str	r3, [sp, #20]
	if (pcb->unsent != NULL) {
    7a66:	f8d7 806c 	ldr.w	r8, [r7, #108]	; 0x6c
    7a6a:	f1b8 0f00 	cmp.w	r8, #0
    7a6e:	d106      	bne.n	7a7e <tcp_write+0x52>
	struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    7a70:	46c3      	mov	fp, r8
	u16_t oversize_used = 0;
    7a72:	2400      	movs	r4, #0
	u16_t           pos = 0; /* position in 'arg' data */
    7a74:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    7a76:	46a1      	mov	r9, r4
    7a78:	e070      	b.n	7b5c <tcp_write+0x130>
    7a7a:	e7fe      	b.n	7a7a <tcp_write+0x4e>
		for (last_unsent = pcb->unsent; last_unsent->next != NULL; last_unsent = last_unsent->next)
    7a7c:	4698      	mov	r8, r3
    7a7e:	f8d8 3000 	ldr.w	r3, [r8]
    7a82:	2b00      	cmp	r3, #0
    7a84:	d1fa      	bne.n	7a7c <tcp_write+0x50>
    7a86:	9304      	str	r3, [sp, #16]
		unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    7a88:	f898 200a 	ldrb.w	r2, [r8, #10]
    7a8c:	f012 0f01 	tst.w	r2, #1
    7a90:	d04e      	beq.n	7b30 <tcp_write+0x104>
    7a92:	2304      	movs	r3, #4
    7a94:	f012 0f02 	tst.w	r2, #2
    7a98:	d04c      	beq.n	7b34 <tcp_write+0x108>
    7a9a:	220c      	movs	r2, #12
    7a9c:	441a      	add	r2, r3
		space         = mss_local - (last_unsent->len + unsent_optlen);
    7a9e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    7aa2:	441a      	add	r2, r3
    7aa4:	b292      	uxth	r2, r2
    7aa6:	9909      	ldr	r1, [sp, #36]	; 0x24
    7aa8:	1a8a      	subs	r2, r1, r2
    7aaa:	b292      	uxth	r2, r2
		oversize = pcb->unsent_oversize;
    7aac:	f8b7 406a 	ldrh.w	r4, [r7, #106]	; 0x6a
    7ab0:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
		if (oversize > 0) {
    7ab4:	2c00      	cmp	r4, #0
    7ab6:	d03f      	beq.n	7b38 <tcp_write+0x10c>
			oversize_used = oversize < len ? oversize : len;
    7ab8:	4651      	mov	r1, sl
    7aba:	45a2      	cmp	sl, r4
    7abc:	bf28      	it	cs
    7abe:	4621      	movcs	r1, r4
			oversize -= oversize_used;
    7ac0:	1a64      	subs	r4, r4, r1
    7ac2:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
			space -= oversize_used;
    7ac6:	1a52      	subs	r2, r2, r1
    7ac8:	b292      	uxth	r2, r2
			pos += oversize_used;
    7aca:	460c      	mov	r4, r1
			seg           = last_unsent;
    7acc:	46c3      	mov	fp, r8
		if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
    7ace:	4554      	cmp	r4, sl
    7ad0:	d241      	bcs.n	7b56 <tcp_write+0x12a>
    7ad2:	2a00      	cmp	r2, #0
    7ad4:	d047      	beq.n	7b66 <tcp_write+0x13a>
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	d049      	beq.n	7b6e <tcp_write+0x142>
			u16_t seglen = space < len - pos ? space : len - pos;
    7ada:	ebaa 0604 	sub.w	r6, sl, r4
    7ade:	4296      	cmp	r6, r2
    7ae0:	bfa8      	it	ge
    7ae2:	4616      	movge	r6, r2
    7ae4:	b2b5      	uxth	r5, r6
			if (apiflags & TCP_WRITE_FLAG_COPY) {
    7ae6:	9907      	ldr	r1, [sp, #28]
    7ae8:	f011 0f01 	tst.w	r1, #1
    7aec:	d027      	beq.n	7b3e <tcp_write+0x112>
				if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
    7aee:	2301      	movs	r3, #1
    7af0:	9302      	str	r3, [sp, #8]
    7af2:	9101      	str	r1, [sp, #4]
    7af4:	9700      	str	r7, [sp, #0]
    7af6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    7afa:	4629      	mov	r1, r5
    7afc:	2003      	movs	r0, #3
    7afe:	f8df 9218 	ldr.w	r9, [pc, #536]	; 7d18 <tcp_write+0x2ec>
    7b02:	47c8      	blx	r9
    7b04:	4681      	mov	r9, r0
    7b06:	2800      	cmp	r0, #0
    7b08:	f000 8090 	beq.w	7c2c <tcp_write+0x200>
				TCP_DATA_COPY2(concat_p->payload, (u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
    7b0c:	462a      	mov	r2, r5
    7b0e:	9b06      	ldr	r3, [sp, #24]
    7b10:	1919      	adds	r1, r3, r4
    7b12:	6840      	ldr	r0, [r0, #4]
    7b14:	4b79      	ldr	r3, [pc, #484]	; (7cfc <tcp_write+0x2d0>)
    7b16:	4798      	blx	r3
			pos += seglen;
    7b18:	4425      	add	r5, r4
    7b1a:	b2ad      	uxth	r5, r5
			queuelen += pbuf_clen(concat_p);
    7b1c:	4648      	mov	r0, r9
    7b1e:	4b78      	ldr	r3, [pc, #480]	; (7d00 <tcp_write+0x2d4>)
    7b20:	4798      	blx	r3
    7b22:	9b05      	ldr	r3, [sp, #20]
    7b24:	fa13 f080 	uxtah	r0, r3, r0
    7b28:	b283      	uxth	r3, r0
    7b2a:	9305      	str	r3, [sp, #20]
			seg          = last_unsent;
    7b2c:	46c3      	mov	fp, r8
    7b2e:	e015      	b.n	7b5c <tcp_write+0x130>
		unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    7b30:	2300      	movs	r3, #0
    7b32:	e7af      	b.n	7a94 <tcp_write+0x68>
    7b34:	2200      	movs	r2, #0
    7b36:	e7b1      	b.n	7a9c <tcp_write+0x70>
	struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    7b38:	f8dd b010 	ldr.w	fp, [sp, #16]
    7b3c:	e7c7      	b.n	7ace <tcp_write+0xa2>
				if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
    7b3e:	2201      	movs	r2, #1
    7b40:	4629      	mov	r1, r5
    7b42:	2003      	movs	r0, #3
    7b44:	4b6f      	ldr	r3, [pc, #444]	; (7d04 <tcp_write+0x2d8>)
    7b46:	4798      	blx	r3
    7b48:	4681      	mov	r9, r0
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d06e      	beq.n	7c2c <tcp_write+0x200>
				concat_p->payload = (u8_t *)arg + pos;
    7b4e:	9b06      	ldr	r3, [sp, #24]
    7b50:	4423      	add	r3, r4
    7b52:	6043      	str	r3, [r0, #4]
    7b54:	e7e0      	b.n	7b18 <tcp_write+0xec>
    7b56:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    7b58:	f04f 0900 	mov.w	r9, #0
			queue = seg;
    7b5c:	2300      	movs	r3, #0
    7b5e:	9304      	str	r3, [sp, #16]
    7b60:	9308      	str	r3, [sp, #32]
    7b62:	465b      	mov	r3, fp
    7b64:	e03b      	b.n	7bde <tcp_write+0x1b2>
    7b66:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    7b68:	f04f 0900 	mov.w	r9, #0
    7b6c:	e7f6      	b.n	7b5c <tcp_write+0x130>
    7b6e:	4625      	mov	r5, r4
    7b70:	f04f 0900 	mov.w	r9, #0
    7b74:	e7f2      	b.n	7b5c <tcp_write+0x130>
			if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
    7b76:	2201      	movs	r2, #1
    7b78:	4631      	mov	r1, r6
    7b7a:	2000      	movs	r0, #0
    7b7c:	4b61      	ldr	r3, [pc, #388]	; (7d04 <tcp_write+0x2d8>)
    7b7e:	4798      	blx	r3
    7b80:	900a      	str	r0, [sp, #40]	; 0x28
    7b82:	2800      	cmp	r0, #0
    7b84:	d052      	beq.n	7c2c <tcp_write+0x200>
			p2->payload = (u8_t *)arg + pos;
    7b86:	9b06      	ldr	r3, [sp, #24]
    7b88:	442b      	add	r3, r5
    7b8a:	6043      	str	r3, [r0, #4]
			if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    7b8c:	2200      	movs	r2, #0
    7b8e:	4611      	mov	r1, r2
    7b90:	4610      	mov	r0, r2
    7b92:	4b5c      	ldr	r3, [pc, #368]	; (7d04 <tcp_write+0x2d8>)
    7b94:	4798      	blx	r3
    7b96:	4683      	mov	fp, r0
    7b98:	2800      	cmp	r0, #0
    7b9a:	d044      	beq.n	7c26 <tcp_write+0x1fa>
			pbuf_cat(p /*header*/, p2 /*data*/);
    7b9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b9e:	4b5a      	ldr	r3, [pc, #360]	; (7d08 <tcp_write+0x2dc>)
    7ba0:	4798      	blx	r3
		queuelen += pbuf_clen(p);
    7ba2:	4658      	mov	r0, fp
    7ba4:	4b56      	ldr	r3, [pc, #344]	; (7d00 <tcp_write+0x2d4>)
    7ba6:	4798      	blx	r3
    7ba8:	9b05      	ldr	r3, [sp, #20]
    7baa:	fa13 f080 	uxtah	r0, r3, r0
    7bae:	b283      	uxth	r3, r0
    7bb0:	9305      	str	r3, [sp, #20]
		if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    7bb2:	2b08      	cmp	r3, #8
    7bb4:	d850      	bhi.n	7c58 <tcp_write+0x22c>
		if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
    7bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7bb8:	2200      	movs	r2, #0
    7bba:	9200      	str	r2, [sp, #0]
    7bbc:	442b      	add	r3, r5
    7bbe:	4659      	mov	r1, fp
    7bc0:	4638      	mov	r0, r7
    7bc2:	f8df b158 	ldr.w	fp, [pc, #344]	; 7d1c <tcp_write+0x2f0>
    7bc6:	47d8      	blx	fp
    7bc8:	4603      	mov	r3, r0
    7bca:	2800      	cmp	r0, #0
    7bcc:	d02e      	beq.n	7c2c <tcp_write+0x200>
		if (queue == NULL) {
    7bce:	9a04      	ldr	r2, [sp, #16]
    7bd0:	2a00      	cmp	r2, #0
    7bd2:	d045      	beq.n	7c60 <tcp_write+0x234>
			prev_seg->next = seg;
    7bd4:	9a08      	ldr	r2, [sp, #32]
    7bd6:	6010      	str	r0, [r2, #0]
		pos += seglen;
    7bd8:	4435      	add	r5, r6
    7bda:	b2ad      	uxth	r5, r5
		prev_seg = seg;
    7bdc:	9308      	str	r3, [sp, #32]
	while (pos < len) {
    7bde:	4555      	cmp	r5, sl
    7be0:	d240      	bcs.n	7c64 <tcp_write+0x238>
		u16_t        left    = len - pos;
    7be2:	ebaa 0605 	sub.w	r6, sl, r5
    7be6:	b2b6      	uxth	r6, r6
		u16_t        seglen  = left > max_len ? max_len : left;
    7be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7bea:	4296      	cmp	r6, r2
    7bec:	bf28      	it	cs
    7bee:	4616      	movcs	r6, r2
		if (apiflags & TCP_WRITE_FLAG_COPY) {
    7bf0:	9907      	ldr	r1, [sp, #28]
    7bf2:	f011 0f01 	tst.w	r1, #1
    7bf6:	d0be      	beq.n	7b76 <tcp_write+0x14a>
			if ((p = tcp_pbuf_prealloc(
    7bf8:	9b04      	ldr	r3, [sp, #16]
    7bfa:	fab3 f383 	clz	r3, r3
    7bfe:	095b      	lsrs	r3, r3, #5
    7c00:	9302      	str	r3, [sp, #8]
    7c02:	9101      	str	r1, [sp, #4]
    7c04:	9700      	str	r7, [sp, #0]
    7c06:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    7c0a:	4631      	mov	r1, r6
    7c0c:	2000      	movs	r0, #0
    7c0e:	f8df b108 	ldr.w	fp, [pc, #264]	; 7d18 <tcp_write+0x2ec>
    7c12:	47d8      	blx	fp
    7c14:	4683      	mov	fp, r0
    7c16:	b148      	cbz	r0, 7c2c <tcp_write+0x200>
			TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
    7c18:	4632      	mov	r2, r6
    7c1a:	9b06      	ldr	r3, [sp, #24]
    7c1c:	1959      	adds	r1, r3, r5
    7c1e:	6840      	ldr	r0, [r0, #4]
    7c20:	4b36      	ldr	r3, [pc, #216]	; (7cfc <tcp_write+0x2d0>)
    7c22:	4798      	blx	r3
    7c24:	e7bd      	b.n	7ba2 <tcp_write+0x176>
				pbuf_free(p2);
    7c26:	980a      	ldr	r0, [sp, #40]	; 0x28
    7c28:	4b38      	ldr	r3, [pc, #224]	; (7d0c <tcp_write+0x2e0>)
    7c2a:	4798      	blx	r3
	pcb->flags |= TF_NAGLEMEMERR;
    7c2c:	7fbb      	ldrb	r3, [r7, #30]
    7c2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7c32:	77bb      	strb	r3, [r7, #30]
	if (concat_p != NULL) {
    7c34:	f1b9 0f00 	cmp.w	r9, #0
    7c38:	d002      	beq.n	7c40 <tcp_write+0x214>
		pbuf_free(concat_p);
    7c3a:	4648      	mov	r0, r9
    7c3c:	4b33      	ldr	r3, [pc, #204]	; (7d0c <tcp_write+0x2e0>)
    7c3e:	4798      	blx	r3
	if (queue != NULL) {
    7c40:	9b04      	ldr	r3, [sp, #16]
    7c42:	b113      	cbz	r3, 7c4a <tcp_write+0x21e>
		tcp_segs_free(queue);
    7c44:	4618      	mov	r0, r3
    7c46:	4b32      	ldr	r3, [pc, #200]	; (7d10 <tcp_write+0x2e4>)
    7c48:	4798      	blx	r3
	return ERR_MEM;
    7c4a:	f04f 33ff 	mov.w	r3, #4294967295
    7c4e:	930b      	str	r3, [sp, #44]	; 0x2c
}
    7c50:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7c52:	b00f      	add	sp, #60	; 0x3c
    7c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pbuf_free(p);
    7c58:	4658      	mov	r0, fp
    7c5a:	4b2c      	ldr	r3, [pc, #176]	; (7d0c <tcp_write+0x2e0>)
    7c5c:	4798      	blx	r3
			goto memerr;
    7c5e:	e7e5      	b.n	7c2c <tcp_write+0x200>
			queue = seg;
    7c60:	9004      	str	r0, [sp, #16]
    7c62:	e7b9      	b.n	7bd8 <tcp_write+0x1ac>
    7c64:	469b      	mov	fp, r3
	if (oversize_used > 0) {
    7c66:	b184      	cbz	r4, 7c8a <tcp_write+0x25e>
		for (p = last_unsent->p; p; p = p->next) {
    7c68:	f8d8 5004 	ldr.w	r5, [r8, #4]
    7c6c:	e006      	b.n	7c7c <tcp_write+0x250>
			p->tot_len += oversize_used;
    7c6e:	892b      	ldrh	r3, [r5, #8]
    7c70:	4423      	add	r3, r4
    7c72:	812b      	strh	r3, [r5, #8]
			if (p->next == NULL) {
    7c74:	682b      	ldr	r3, [r5, #0]
    7c76:	2b00      	cmp	r3, #0
    7c78:	d052      	beq.n	7d20 <tcp_write+0x2f4>
		for (p = last_unsent->p; p; p = p->next) {
    7c7a:	682d      	ldr	r5, [r5, #0]
    7c7c:	2d00      	cmp	r5, #0
    7c7e:	d1f6      	bne.n	7c6e <tcp_write+0x242>
		last_unsent->len += oversize_used;
    7c80:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    7c84:	441c      	add	r4, r3
    7c86:	f8a8 4008 	strh.w	r4, [r8, #8]
	pcb->unsent_oversize = oversize;
    7c8a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    7c8e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	if (concat_p != NULL) {
    7c92:	f1b9 0f00 	cmp.w	r9, #0
    7c96:	d00b      	beq.n	7cb0 <tcp_write+0x284>
		pbuf_cat(last_unsent->p, concat_p);
    7c98:	4649      	mov	r1, r9
    7c9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7c9e:	4b1a      	ldr	r3, [pc, #104]	; (7d08 <tcp_write+0x2dc>)
    7ca0:	4798      	blx	r3
		last_unsent->len += concat_p->tot_len;
    7ca2:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    7ca6:	f8b8 2008 	ldrh.w	r2, [r8, #8]
    7caa:	4413      	add	r3, r2
    7cac:	f8a8 3008 	strh.w	r3, [r8, #8]
	if (last_unsent == NULL) {
    7cb0:	f1b8 0f00 	cmp.w	r8, #0
    7cb4:	d13f      	bne.n	7d36 <tcp_write+0x30a>
		pcb->unsent = queue;
    7cb6:	9b04      	ldr	r3, [sp, #16]
    7cb8:	66fb      	str	r3, [r7, #108]	; 0x6c
	pcb->snd_lbb += len;
    7cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7cbc:	4453      	add	r3, sl
    7cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	pcb->snd_buf -= len;
    7cc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    7cc4:	eba3 030a 	sub.w	r3, r3, sl
    7cc8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	pcb->snd_queuelen = queuelen;
    7ccc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7cd0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
    7cd4:	f1bb 0f00 	cmp.w	fp, #0
    7cd8:	d0ba      	beq.n	7c50 <tcp_write+0x224>
    7cda:	f8db 400c 	ldr.w	r4, [fp, #12]
    7cde:	2c00      	cmp	r4, #0
    7ce0:	d0b6      	beq.n	7c50 <tcp_write+0x224>
    7ce2:	9b07      	ldr	r3, [sp, #28]
    7ce4:	f013 0f02 	tst.w	r3, #2
    7ce8:	d1b2      	bne.n	7c50 <tcp_write+0x224>
		TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
    7cea:	89a5      	ldrh	r5, [r4, #12]
    7cec:	2008      	movs	r0, #8
    7cee:	4b09      	ldr	r3, [pc, #36]	; (7d14 <tcp_write+0x2e8>)
    7cf0:	4798      	blx	r3
    7cf2:	4328      	orrs	r0, r5
    7cf4:	81a0      	strh	r0, [r4, #12]
    7cf6:	e7ab      	b.n	7c50 <tcp_write+0x224>
    7cf8:	00007745 	.word	0x00007745
    7cfc:	0000c103 	.word	0x0000c103
    7d00:	00005685 	.word	0x00005685
    7d04:	00005505 	.word	0x00005505
    7d08:	000056a1 	.word	0x000056a1
    7d0c:	000054a1 	.word	0x000054a1
    7d10:	00005981 	.word	0x00005981
    7d14:	00003e91 	.word	0x00003e91
    7d18:	00007795 	.word	0x00007795
    7d1c:	000077fd 	.word	0x000077fd
				TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
    7d20:	6868      	ldr	r0, [r5, #4]
    7d22:	896b      	ldrh	r3, [r5, #10]
    7d24:	4622      	mov	r2, r4
    7d26:	9906      	ldr	r1, [sp, #24]
    7d28:	4418      	add	r0, r3
    7d2a:	4b05      	ldr	r3, [pc, #20]	; (7d40 <tcp_write+0x314>)
    7d2c:	4798      	blx	r3
				p->len += oversize_used;
    7d2e:	896b      	ldrh	r3, [r5, #10]
    7d30:	4423      	add	r3, r4
    7d32:	816b      	strh	r3, [r5, #10]
    7d34:	e7a1      	b.n	7c7a <tcp_write+0x24e>
		last_unsent->next = queue;
    7d36:	9b04      	ldr	r3, [sp, #16]
    7d38:	f8c8 3000 	str.w	r3, [r8]
    7d3c:	e7bd      	b.n	7cba <tcp_write+0x28e>
    7d3e:	bf00      	nop
    7d40:	0000c103 	.word	0x0000c103

00007d44 <tcp_enqueue_flags>:
	if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    7d44:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    7d48:	2b07      	cmp	r3, #7
    7d4a:	d820      	bhi.n	7d8e <tcp_enqueue_flags+0x4a>
{
    7d4c:	b570      	push	{r4, r5, r6, lr}
    7d4e:	b082      	sub	sp, #8
	if (flags & TCP_SYN) {
    7d50:	f011 0f02 	tst.w	r1, #2
    7d54:	d122      	bne.n	7d9c <tcp_enqueue_flags+0x58>
	u8_t            optflags = 0;
    7d56:	2600      	movs	r6, #0
	optlen = LWIP_TCP_OPT_LENGTH(optflags);
    7d58:	b316      	cbz	r6, 7da0 <tcp_enqueue_flags+0x5c>
    7d5a:	2304      	movs	r3, #4
	if (pcb->snd_buf == 0) {
    7d5c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    7d60:	2a00      	cmp	r2, #0
    7d62:	d053      	beq.n	7e0c <tcp_enqueue_flags+0xc8>
    7d64:	460d      	mov	r5, r1
    7d66:	4604      	mov	r4, r0
	if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    7d68:	b299      	uxth	r1, r3
    7d6a:	2200      	movs	r2, #0
    7d6c:	4610      	mov	r0, r2
    7d6e:	4b29      	ldr	r3, [pc, #164]	; (7e14 <tcp_enqueue_flags+0xd0>)
    7d70:	4798      	blx	r3
    7d72:	4601      	mov	r1, r0
    7d74:	b1b0      	cbz	r0, 7da4 <tcp_enqueue_flags+0x60>
	if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    7d76:	9600      	str	r6, [sp, #0]
    7d78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7d7a:	462a      	mov	r2, r5
    7d7c:	4620      	mov	r0, r4
    7d7e:	4e26      	ldr	r6, [pc, #152]	; (7e18 <tcp_enqueue_flags+0xd4>)
    7d80:	47b0      	blx	r6
    7d82:	4601      	mov	r1, r0
    7d84:	b1a8      	cbz	r0, 7db2 <tcp_enqueue_flags+0x6e>
	if (pcb->unsent == NULL) {
    7d86:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    7d88:	b9da      	cbnz	r2, 7dc2 <tcp_enqueue_flags+0x7e>
		pcb->unsent = seg;
    7d8a:	66e0      	str	r0, [r4, #108]	; 0x6c
    7d8c:	e01d      	b.n	7dca <tcp_enqueue_flags+0x86>
		pcb->flags |= TF_NAGLEMEMERR;
    7d8e:	7f83      	ldrb	r3, [r0, #30]
    7d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d94:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    7d96:	f04f 30ff 	mov.w	r0, #4294967295
    7d9a:	4770      	bx	lr
		optflags = TF_SEG_OPTS_MSS;
    7d9c:	2601      	movs	r6, #1
    7d9e:	e7db      	b.n	7d58 <tcp_enqueue_flags+0x14>
	optlen = LWIP_TCP_OPT_LENGTH(optflags);
    7da0:	2300      	movs	r3, #0
    7da2:	e7db      	b.n	7d5c <tcp_enqueue_flags+0x18>
		pcb->flags |= TF_NAGLEMEMERR;
    7da4:	7fa3      	ldrb	r3, [r4, #30]
    7da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7daa:	77a3      	strb	r3, [r4, #30]
		return ERR_MEM;
    7dac:	f04f 30ff 	mov.w	r0, #4294967295
    7db0:	e02a      	b.n	7e08 <tcp_enqueue_flags+0xc4>
		pcb->flags |= TF_NAGLEMEMERR;
    7db2:	7fa3      	ldrb	r3, [r4, #30]
    7db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7db8:	77a3      	strb	r3, [r4, #30]
		return ERR_MEM;
    7dba:	f04f 30ff 	mov.w	r0, #4294967295
    7dbe:	e023      	b.n	7e08 <tcp_enqueue_flags+0xc4>
		for (useg = pcb->unsent; useg->next != NULL; useg = useg->next)
    7dc0:	461a      	mov	r2, r3
    7dc2:	6813      	ldr	r3, [r2, #0]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d1fb      	bne.n	7dc0 <tcp_enqueue_flags+0x7c>
		useg->next = seg;
    7dc8:	6011      	str	r1, [r2, #0]
	pcb->unsent_oversize = 0;
    7dca:	2300      	movs	r3, #0
    7dcc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    7dd0:	f015 0f03 	tst.w	r5, #3
    7dd4:	d007      	beq.n	7de6 <tcp_enqueue_flags+0xa2>
		pcb->snd_lbb++;
    7dd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7dd8:	3301      	adds	r3, #1
    7dda:	65e3      	str	r3, [r4, #92]	; 0x5c
		pcb->snd_buf--;
    7ddc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7de0:	3b01      	subs	r3, #1
    7de2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	if (flags & TCP_FIN) {
    7de6:	f015 0f01 	tst.w	r5, #1
    7dea:	d003      	beq.n	7df4 <tcp_enqueue_flags+0xb0>
		pcb->flags |= TF_FIN;
    7dec:	7fa3      	ldrb	r3, [r4, #30]
    7dee:	f043 0320 	orr.w	r3, r3, #32
    7df2:	77a3      	strb	r3, [r4, #30]
	pcb->snd_queuelen += pbuf_clen(seg->p);
    7df4:	6848      	ldr	r0, [r1, #4]
    7df6:	4b09      	ldr	r3, [pc, #36]	; (7e1c <tcp_enqueue_flags+0xd8>)
    7df8:	4798      	blx	r3
    7dfa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7dfe:	fa13 f080 	uxtah	r0, r3, r0
    7e02:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
	return ERR_OK;
    7e06:	2000      	movs	r0, #0
}
    7e08:	b002      	add	sp, #8
    7e0a:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
    7e0c:	f04f 30ff 	mov.w	r0, #4294967295
    7e10:	e7fa      	b.n	7e08 <tcp_enqueue_flags+0xc4>
    7e12:	bf00      	nop
    7e14:	00005505 	.word	0x00005505
    7e18:	000077fd 	.word	0x000077fd
    7e1c:	00005685 	.word	0x00005685

00007e20 <tcp_send_fin>:
{
    7e20:	b570      	push	{r4, r5, r6, lr}
    7e22:	4605      	mov	r5, r0
	if (pcb->unsent != NULL) {
    7e24:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    7e26:	b90c      	cbnz	r4, 7e2c <tcp_send_fin+0xc>
    7e28:	e00a      	b.n	7e40 <tcp_send_fin+0x20>
		for (last_unsent = pcb->unsent; last_unsent->next != NULL; last_unsent = last_unsent->next)
    7e2a:	461c      	mov	r4, r3
    7e2c:	6823      	ldr	r3, [r4, #0]
    7e2e:	2b00      	cmp	r3, #0
    7e30:	d1fb      	bne.n	7e2a <tcp_send_fin+0xa>
		if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
    7e32:	68e3      	ldr	r3, [r4, #12]
    7e34:	8998      	ldrh	r0, [r3, #12]
    7e36:	4b0b      	ldr	r3, [pc, #44]	; (7e64 <tcp_send_fin+0x44>)
    7e38:	4798      	blx	r3
    7e3a:	f010 0f07 	tst.w	r0, #7
    7e3e:	d004      	beq.n	7e4a <tcp_send_fin+0x2a>
	return tcp_enqueue_flags(pcb, TCP_FIN);
    7e40:	2101      	movs	r1, #1
    7e42:	4628      	mov	r0, r5
    7e44:	4b08      	ldr	r3, [pc, #32]	; (7e68 <tcp_send_fin+0x48>)
    7e46:	4798      	blx	r3
}
    7e48:	bd70      	pop	{r4, r5, r6, pc}
			TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
    7e4a:	68e6      	ldr	r6, [r4, #12]
    7e4c:	89b4      	ldrh	r4, [r6, #12]
    7e4e:	2001      	movs	r0, #1
    7e50:	4b06      	ldr	r3, [pc, #24]	; (7e6c <tcp_send_fin+0x4c>)
    7e52:	4798      	blx	r3
    7e54:	4320      	orrs	r0, r4
    7e56:	81b0      	strh	r0, [r6, #12]
			pcb->flags |= TF_FIN;
    7e58:	7fab      	ldrb	r3, [r5, #30]
    7e5a:	f043 0320 	orr.w	r3, r3, #32
    7e5e:	77ab      	strb	r3, [r5, #30]
			return ERR_OK;
    7e60:	2000      	movs	r0, #0
    7e62:	bd70      	pop	{r4, r5, r6, pc}
    7e64:	00003e9d 	.word	0x00003e9d
    7e68:	00007d45 	.word	0x00007d45
    7e6c:	00003e91 	.word	0x00003e91

00007e70 <tcp_send_empty_ack>:
{
    7e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e74:	b082      	sub	sp, #8
    7e76:	4604      	mov	r4, r0
	p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
    7e78:	6d00      	ldr	r0, [r0, #80]	; 0x50
    7e7a:	4b16      	ldr	r3, [pc, #88]	; (7ed4 <tcp_send_empty_ack+0x64>)
    7e7c:	4798      	blx	r3
    7e7e:	4603      	mov	r3, r0
    7e80:	2200      	movs	r2, #0
    7e82:	4611      	mov	r1, r2
    7e84:	4620      	mov	r0, r4
    7e86:	4d14      	ldr	r5, [pc, #80]	; (7ed8 <tcp_send_empty_ack+0x68>)
    7e88:	47a8      	blx	r5
	if (p == NULL) {
    7e8a:	b300      	cbz	r0, 7ece <tcp_send_empty_ack+0x5e>
    7e8c:	4605      	mov	r5, r0
	tcphdr = (struct tcp_hdr *)p->payload;
    7e8e:	6847      	ldr	r7, [r0, #4]
	pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    7e90:	7fa3      	ldrb	r3, [r4, #30]
    7e92:	f023 0303 	bic.w	r3, r3, #3
    7e96:	77a3      	strb	r3, [r4, #30]
	tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip), IP_PROTO_TCP, p->tot_len);
    7e98:	1d26      	adds	r6, r4, #4
    7e9a:	8903      	ldrh	r3, [r0, #8]
    7e9c:	9300      	str	r3, [sp, #0]
    7e9e:	2306      	movs	r3, #6
    7ea0:	4632      	mov	r2, r6
    7ea2:	4621      	mov	r1, r4
    7ea4:	f8df 803c 	ldr.w	r8, [pc, #60]	; 7ee4 <tcp_send_empty_ack+0x74>
    7ea8:	47c0      	blx	r8
    7eaa:	8238      	strh	r0, [r7, #16]
	ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP);
    7eac:	7aa3      	ldrb	r3, [r4, #10]
    7eae:	2206      	movs	r2, #6
    7eb0:	9201      	str	r2, [sp, #4]
    7eb2:	7a62      	ldrb	r2, [r4, #9]
    7eb4:	9200      	str	r2, [sp, #0]
    7eb6:	4632      	mov	r2, r6
    7eb8:	4621      	mov	r1, r4
    7eba:	4628      	mov	r0, r5
    7ebc:	4c07      	ldr	r4, [pc, #28]	; (7edc <tcp_send_empty_ack+0x6c>)
    7ebe:	47a0      	blx	r4
	pbuf_free(p);
    7ec0:	4628      	mov	r0, r5
    7ec2:	4b07      	ldr	r3, [pc, #28]	; (7ee0 <tcp_send_empty_ack+0x70>)
    7ec4:	4798      	blx	r3
	return ERR_OK;
    7ec6:	2000      	movs	r0, #0
}
    7ec8:	b002      	add	sp, #8
    7eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUF;
    7ece:	f06f 0001 	mvn.w	r0, #1
    7ed2:	e7f9      	b.n	7ec8 <tcp_send_empty_ack+0x58>
    7ed4:	00003ea9 	.word	0x00003ea9
    7ed8:	000078bd 	.word	0x000078bd
    7edc:	000045ad 	.word	0x000045ad
    7ee0:	000054a1 	.word	0x000054a1
    7ee4:	000041b1 	.word	0x000041b1

00007ee8 <tcp_output>:
	if (tcp_input_pcb == pcb) {
    7ee8:	4b6f      	ldr	r3, [pc, #444]	; (80a8 <tcp_output+0x1c0>)
    7eea:	681b      	ldr	r3, [r3, #0]
    7eec:	4283      	cmp	r3, r0
    7eee:	f000 80d9 	beq.w	80a4 <tcp_output+0x1bc>
{
    7ef2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
    7ef6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    7efa:	f8b0 804c 	ldrh.w	r8, [r0, #76]	; 0x4c
    7efe:	4543      	cmp	r3, r8
    7f00:	d200      	bcs.n	7f04 <tcp_output+0x1c>
    7f02:	4698      	mov	r8, r3
    7f04:	4605      	mov	r5, r0
	seg = pcb->unsent;
    7f06:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	if (pcb->flags & TF_ACK_NOW && (seg == NULL || ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
    7f08:	7f83      	ldrb	r3, [r0, #30]
    7f0a:	f013 0f02 	tst.w	r3, #2
    7f0e:	d00a      	beq.n	7f26 <tcp_output+0x3e>
    7f10:	b164      	cbz	r4, 7f2c <tcp_output+0x44>
    7f12:	68e3      	ldr	r3, [r4, #12]
    7f14:	6858      	ldr	r0, [r3, #4]
    7f16:	4b65      	ldr	r3, [pc, #404]	; (80ac <tcp_output+0x1c4>)
    7f18:	4798      	blx	r3
    7f1a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    7f1c:	1ac3      	subs	r3, r0, r3
    7f1e:	8920      	ldrh	r0, [r4, #8]
    7f20:	4403      	add	r3, r0
    7f22:	4598      	cmp	r8, r3
    7f24:	d302      	bcc.n	7f2c <tcp_output+0x44>
	useg = pcb->unacked;
    7f26:	6f2f      	ldr	r7, [r5, #112]	; 0x70
	if (useg != NULL) {
    7f28:	b937      	cbnz	r7, 7f38 <tcp_output+0x50>
    7f2a:	e06b      	b.n	8004 <tcp_output+0x11c>
		return tcp_send_empty_ack(pcb);
    7f2c:	4628      	mov	r0, r5
    7f2e:	4b60      	ldr	r3, [pc, #384]	; (80b0 <tcp_output+0x1c8>)
    7f30:	4798      	blx	r3
    7f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (; useg->next != NULL; useg = useg->next)
    7f36:	461f      	mov	r7, r3
    7f38:	683b      	ldr	r3, [r7, #0]
    7f3a:	2b00      	cmp	r3, #0
    7f3c:	d1fb      	bne.n	7f36 <tcp_output+0x4e>
    7f3e:	e061      	b.n	8004 <tcp_output+0x11c>
		if ((tcp_do_output_nagle(pcb) == 0) && ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
    7f40:	891a      	ldrh	r2, [r3, #8]
    7f42:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    7f44:	429a      	cmp	r2, r3
    7f46:	d278      	bcs.n	803a <tcp_output+0x152>
    7f48:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d076      	beq.n	803e <tcp_output+0x156>
    7f50:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    7f54:	2b07      	cmp	r3, #7
    7f56:	d974      	bls.n	8042 <tcp_output+0x15a>
    7f58:	2301      	movs	r3, #1
    7f5a:	e002      	b.n	7f62 <tcp_output+0x7a>
    7f5c:	2301      	movs	r3, #1
    7f5e:	e000      	b.n	7f62 <tcp_output+0x7a>
    7f60:	2301      	movs	r3, #1
    7f62:	b923      	cbnz	r3, 7f6e <tcp_output+0x86>
    7f64:	7fab      	ldrb	r3, [r5, #30]
    7f66:	f013 0fa0 	tst.w	r3, #160	; 0xa0
    7f6a:	f000 808f 	beq.w	808c <tcp_output+0x1a4>
		pcb->unsent = seg->next;
    7f6e:	6823      	ldr	r3, [r4, #0]
    7f70:	66eb      	str	r3, [r5, #108]	; 0x6c
		if (pcb->state != SYN_SENT) {
    7f72:	7e2b      	ldrb	r3, [r5, #24]
    7f74:	2b02      	cmp	r3, #2
    7f76:	d00d      	beq.n	7f94 <tcp_output+0xac>
			TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    7f78:	f8d4 900c 	ldr.w	r9, [r4, #12]
    7f7c:	f8b9 600c 	ldrh.w	r6, [r9, #12]
    7f80:	2010      	movs	r0, #16
    7f82:	4b4c      	ldr	r3, [pc, #304]	; (80b4 <tcp_output+0x1cc>)
    7f84:	4798      	blx	r3
    7f86:	4330      	orrs	r0, r6
    7f88:	f8a9 000c 	strh.w	r0, [r9, #12]
			pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    7f8c:	7fab      	ldrb	r3, [r5, #30]
    7f8e:	f023 0303 	bic.w	r3, r3, #3
    7f92:	77ab      	strb	r3, [r5, #30]
		tcp_output_segment(seg, pcb);
    7f94:	4629      	mov	r1, r5
    7f96:	4620      	mov	r0, r4
    7f98:	4b47      	ldr	r3, [pc, #284]	; (80b8 <tcp_output+0x1d0>)
    7f9a:	4798      	blx	r3
		snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    7f9c:	68e3      	ldr	r3, [r4, #12]
    7f9e:	6858      	ldr	r0, [r3, #4]
    7fa0:	4b42      	ldr	r3, [pc, #264]	; (80ac <tcp_output+0x1c4>)
    7fa2:	4798      	blx	r3
    7fa4:	4606      	mov	r6, r0
    7fa6:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    7faa:	68e3      	ldr	r3, [r4, #12]
    7fac:	8998      	ldrh	r0, [r3, #12]
    7fae:	4b43      	ldr	r3, [pc, #268]	; (80bc <tcp_output+0x1d4>)
    7fb0:	4798      	blx	r3
    7fb2:	f010 0003 	ands.w	r0, r0, #3
    7fb6:	bf18      	it	ne
    7fb8:	2001      	movne	r0, #1
    7fba:	4448      	add	r0, r9
    7fbc:	4430      	add	r0, r6
		if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    7fbe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    7fc0:	1a1b      	subs	r3, r3, r0
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	db3f      	blt.n	8046 <tcp_output+0x15e>
		if (TCP_TCPLEN(seg) > 0) {
    7fc6:	8926      	ldrh	r6, [r4, #8]
    7fc8:	68e3      	ldr	r3, [r4, #12]
    7fca:	8998      	ldrh	r0, [r3, #12]
    7fcc:	4b3b      	ldr	r3, [pc, #236]	; (80bc <tcp_output+0x1d4>)
    7fce:	4798      	blx	r3
    7fd0:	f010 0003 	ands.w	r0, r0, #3
    7fd4:	bf18      	it	ne
    7fd6:	2001      	movne	r0, #1
    7fd8:	42c6      	cmn	r6, r0
    7fda:	d053      	beq.n	8084 <tcp_output+0x19c>
			seg->next = NULL;
    7fdc:	2300      	movs	r3, #0
    7fde:	6023      	str	r3, [r4, #0]
			if (pcb->unacked == NULL) {
    7fe0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d031      	beq.n	804a <tcp_output+0x162>
				if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
    7fe6:	68e3      	ldr	r3, [r4, #12]
    7fe8:	6858      	ldr	r0, [r3, #4]
    7fea:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80ac <tcp_output+0x1c4>
    7fee:	47c8      	blx	r9
    7ff0:	4606      	mov	r6, r0
    7ff2:	68fb      	ldr	r3, [r7, #12]
    7ff4:	6858      	ldr	r0, [r3, #4]
    7ff6:	47c8      	blx	r9
    7ff8:	1a30      	subs	r0, r6, r0
    7ffa:	2800      	cmp	r0, #0
    7ffc:	db28      	blt.n	8050 <tcp_output+0x168>
					useg->next = seg;
    7ffe:	603c      	str	r4, [r7, #0]
					useg       = useg->next;
    8000:	4627      	mov	r7, r4
		seg = pcb->unsent;
    8002:	6eec      	ldr	r4, [r5, #108]	; 0x6c
	while (seg != NULL && ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    8004:	2c00      	cmp	r4, #0
    8006:	d041      	beq.n	808c <tcp_output+0x1a4>
    8008:	68e3      	ldr	r3, [r4, #12]
    800a:	6858      	ldr	r0, [r3, #4]
    800c:	4b27      	ldr	r3, [pc, #156]	; (80ac <tcp_output+0x1c4>)
    800e:	4798      	blx	r3
    8010:	6cab      	ldr	r3, [r5, #72]	; 0x48
    8012:	1ac0      	subs	r0, r0, r3
    8014:	8923      	ldrh	r3, [r4, #8]
    8016:	4418      	add	r0, r3
    8018:	4580      	cmp	r8, r0
    801a:	d337      	bcc.n	808c <tcp_output+0x1a4>
		if ((tcp_do_output_nagle(pcb) == 0) && ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
    801c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    801e:	2b00      	cmp	r3, #0
    8020:	d09c      	beq.n	7f5c <tcp_output+0x74>
    8022:	7fab      	ldrb	r3, [r5, #30]
    8024:	f013 0f44 	tst.w	r3, #68	; 0x44
    8028:	d19a      	bne.n	7f60 <tcp_output+0x78>
    802a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    802c:	2b00      	cmp	r3, #0
    802e:	d08b      	beq.n	7f48 <tcp_output+0x60>
    8030:	681a      	ldr	r2, [r3, #0]
    8032:	2a00      	cmp	r2, #0
    8034:	d084      	beq.n	7f40 <tcp_output+0x58>
    8036:	2301      	movs	r3, #1
    8038:	e793      	b.n	7f62 <tcp_output+0x7a>
    803a:	2301      	movs	r3, #1
    803c:	e791      	b.n	7f62 <tcp_output+0x7a>
    803e:	2301      	movs	r3, #1
    8040:	e78f      	b.n	7f62 <tcp_output+0x7a>
    8042:	2300      	movs	r3, #0
    8044:	e78d      	b.n	7f62 <tcp_output+0x7a>
			pcb->snd_nxt = snd_nxt;
    8046:	6528      	str	r0, [r5, #80]	; 0x50
    8048:	e7bd      	b.n	7fc6 <tcp_output+0xde>
				pcb->unacked = seg;
    804a:	672c      	str	r4, [r5, #112]	; 0x70
				useg         = seg;
    804c:	4627      	mov	r7, r4
    804e:	e7d8      	b.n	8002 <tcp_output+0x11a>
					struct tcp_seg **cur_seg = &(pcb->unacked);
    8050:	f105 0970 	add.w	r9, r5, #112	; 0x70
					while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    8054:	e001      	b.n	805a <tcp_output+0x172>
						cur_seg = &((*cur_seg)->next);
    8056:	f8d9 9000 	ldr.w	r9, [r9]
					while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    805a:	f8d9 3000 	ldr.w	r3, [r9]
    805e:	b15b      	cbz	r3, 8078 <tcp_output+0x190>
    8060:	68db      	ldr	r3, [r3, #12]
    8062:	6858      	ldr	r0, [r3, #4]
    8064:	f8df a044 	ldr.w	sl, [pc, #68]	; 80ac <tcp_output+0x1c4>
    8068:	47d0      	blx	sl
    806a:	4606      	mov	r6, r0
    806c:	68e3      	ldr	r3, [r4, #12]
    806e:	6858      	ldr	r0, [r3, #4]
    8070:	47d0      	blx	sl
    8072:	1a30      	subs	r0, r6, r0
    8074:	2800      	cmp	r0, #0
    8076:	dbee      	blt.n	8056 <tcp_output+0x16e>
					seg->next  = (*cur_seg);
    8078:	f8d9 3000 	ldr.w	r3, [r9]
    807c:	6023      	str	r3, [r4, #0]
					(*cur_seg) = seg;
    807e:	f8c9 4000 	str.w	r4, [r9]
    8082:	e7be      	b.n	8002 <tcp_output+0x11a>
			tcp_seg_free(seg);
    8084:	4620      	mov	r0, r4
    8086:	4b0e      	ldr	r3, [pc, #56]	; (80c0 <tcp_output+0x1d8>)
    8088:	4798      	blx	r3
    808a:	e7ba      	b.n	8002 <tcp_output+0x11a>
	if (pcb->unsent == NULL) {
    808c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    808e:	b133      	cbz	r3, 809e <tcp_output+0x1b6>
	pcb->flags &= ~TF_NAGLEMEMERR;
    8090:	7fab      	ldrb	r3, [r5, #30]
    8092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8096:	77ab      	strb	r3, [r5, #30]
	return ERR_OK;
    8098:	2000      	movs	r0, #0
    809a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pcb->unsent_oversize = 0;
    809e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    80a2:	e7f5      	b.n	8090 <tcp_output+0x1a8>
		return ERR_OK;
    80a4:	2000      	movs	r0, #0
    80a6:	4770      	bx	lr
    80a8:	200161ec 	.word	0x200161ec
    80ac:	00003ec1 	.word	0x00003ec1
    80b0:	00007e71 	.word	0x00007e71
    80b4:	00003e91 	.word	0x00003e91
    80b8:	00007931 	.word	0x00007931
    80bc:	00003e9d 	.word	0x00003e9d
    80c0:	0000595d 	.word	0x0000595d

000080c4 <tcp_rst>:
 * @param remote_ip the remote IP address to send the segment to
 * @param local_port the local TCP port to send the segment from
 * @param remote_port the remote TCP port to send the segment to
 */
void tcp_rst(u32_t seqno, u32_t ackno, ip_addr_t *local_ip, ip_addr_t *remote_ip, u16_t local_port, u16_t remote_port)
{
    80c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80c8:	b083      	sub	sp, #12
    80ca:	4681      	mov	r9, r0
    80cc:	468a      	mov	sl, r1
    80ce:	4693      	mov	fp, r2
    80d0:	4698      	mov	r8, r3
	struct pbuf *   p;
	struct tcp_hdr *tcphdr;
	p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
    80d2:	2200      	movs	r2, #0
    80d4:	2114      	movs	r1, #20
    80d6:	2001      	movs	r0, #1
    80d8:	4b1d      	ldr	r3, [pc, #116]	; (8150 <tcp_rst+0x8c>)
    80da:	4798      	blx	r3
	if (p == NULL) {
    80dc:	2800      	cmp	r0, #0
    80de:	d034      	beq.n	814a <tcp_rst+0x86>
    80e0:	4605      	mov	r5, r0
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
		return;
	}
	LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr", (p->len >= sizeof(struct tcp_hdr)));

	tcphdr        = (struct tcp_hdr *)p->payload;
    80e2:	6844      	ldr	r4, [r0, #4]
	tcphdr->src   = htons(local_port);
    80e4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    80e8:	4e1a      	ldr	r6, [pc, #104]	; (8154 <tcp_rst+0x90>)
    80ea:	47b0      	blx	r6
    80ec:	8020      	strh	r0, [r4, #0]
	tcphdr->dest  = htons(remote_port);
    80ee:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
    80f2:	47b0      	blx	r6
    80f4:	8060      	strh	r0, [r4, #2]
	tcphdr->seqno = htonl(seqno);
    80f6:	4648      	mov	r0, r9
    80f8:	4f17      	ldr	r7, [pc, #92]	; (8158 <tcp_rst+0x94>)
    80fa:	47b8      	blx	r7
    80fc:	6060      	str	r0, [r4, #4]
	tcphdr->ackno = htonl(ackno);
    80fe:	4650      	mov	r0, sl
    8100:	47b8      	blx	r7
    8102:	60a0      	str	r0, [r4, #8]
	TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN / 4, TCP_RST | TCP_ACK);
    8104:	f245 0014 	movw	r0, #20500	; 0x5014
    8108:	47b0      	blx	r6
    810a:	81a0      	strh	r0, [r4, #12]
	tcphdr->wnd    = PP_HTONS(TCP_WND);
    810c:	2600      	movs	r6, #0
    810e:	2316      	movs	r3, #22
    8110:	73a3      	strb	r3, [r4, #14]
    8112:	f06f 032f 	mvn.w	r3, #47	; 0x2f
    8116:	73e3      	strb	r3, [r4, #15]
	tcphdr->chksum = 0;
    8118:	7426      	strb	r6, [r4, #16]
    811a:	7466      	strb	r6, [r4, #17]
	tcphdr->urgp   = 0;
    811c:	74a6      	strb	r6, [r4, #18]
    811e:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip, IP_PROTO_TCP, p->tot_len);
    8120:	892b      	ldrh	r3, [r5, #8]
    8122:	9300      	str	r3, [sp, #0]
    8124:	2306      	movs	r3, #6
    8126:	4642      	mov	r2, r8
    8128:	4659      	mov	r1, fp
    812a:	4628      	mov	r0, r5
    812c:	4f0b      	ldr	r7, [pc, #44]	; (815c <tcp_rst+0x98>)
    812e:	47b8      	blx	r7
    8130:	8220      	strh	r0, [r4, #16]
#endif
	TCP_STATS_INC(tcp.xmit);
	snmp_inc_tcpoutrsts();
	/* Send output with hardcoded TTL since we have no access to the pcb */
	ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
    8132:	2306      	movs	r3, #6
    8134:	9301      	str	r3, [sp, #4]
    8136:	9600      	str	r6, [sp, #0]
    8138:	23ff      	movs	r3, #255	; 0xff
    813a:	4642      	mov	r2, r8
    813c:	4659      	mov	r1, fp
    813e:	4628      	mov	r0, r5
    8140:	4c07      	ldr	r4, [pc, #28]	; (8160 <tcp_rst+0x9c>)
    8142:	47a0      	blx	r4
	pbuf_free(p);
    8144:	4628      	mov	r0, r5
    8146:	4b07      	ldr	r3, [pc, #28]	; (8164 <tcp_rst+0xa0>)
    8148:	4798      	blx	r3
	LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %" U32_F " ackno %" U32_F ".\n", seqno, ackno));
}
    814a:	b003      	add	sp, #12
    814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8150:	00005505 	.word	0x00005505
    8154:	00003e91 	.word	0x00003e91
    8158:	00003ea9 	.word	0x00003ea9
    815c:	000041b1 	.word	0x000041b1
    8160:	000045ad 	.word	0x000045ad
    8164:	000054a1 	.word	0x000054a1

00008168 <tcp_rexmit_rto>:
 */
void tcp_rexmit_rto(struct tcp_pcb *pcb)
{
	struct tcp_seg *seg;

	if (pcb->unacked == NULL) {
    8168:	6f02      	ldr	r2, [r0, #112]	; 0x70
    816a:	b10a      	cbz	r2, 8170 <tcp_rexmit_rto+0x8>
{
    816c:	b508      	push	{r3, lr}
    816e:	e001      	b.n	8174 <tcp_rexmit_rto+0xc>
    8170:	4770      	bx	lr
		return;
	}

	/* Move all unacked segments to the head of the unsent queue */
	for (seg = pcb->unacked; seg->next != NULL; seg = seg->next)
    8172:	461a      	mov	r2, r3
    8174:	6813      	ldr	r3, [r2, #0]
    8176:	2b00      	cmp	r3, #0
    8178:	d1fb      	bne.n	8172 <tcp_rexmit_rto+0xa>
		;
	/* concatenate unsent queue after unacked queue */
	seg->next = pcb->unsent;
    817a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    817c:	6013      	str	r3, [r2, #0]
	/* unsent queue is the concatenated queue (of unacked, unsent) */
	pcb->unsent = pcb->unacked;
    817e:	6f03      	ldr	r3, [r0, #112]	; 0x70
    8180:	66c3      	str	r3, [r0, #108]	; 0x6c
	/* unacked queue is now empty */
	pcb->unacked = NULL;
    8182:	2200      	movs	r2, #0
    8184:	6702      	str	r2, [r0, #112]	; 0x70
	/* last unsent hasn't changed, no need to reset unsent_oversize */

	/* increment number of retransmissions */
	++pcb->nrtx;
    8186:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    818a:	3301      	adds	r3, #1
    818c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

	/* Don't take any RTT measurements after retransmitting. */
	pcb->rttest = 0;
    8190:	6382      	str	r2, [r0, #56]	; 0x38

	/* Do the actual retransmission */
	tcp_output(pcb);
    8192:	4b01      	ldr	r3, [pc, #4]	; (8198 <tcp_rexmit_rto+0x30>)
    8194:	4798      	blx	r3
    8196:	bd08      	pop	{r3, pc}
    8198:	00007ee9 	.word	0x00007ee9

0000819c <tcp_rexmit>:
 * Called by tcp_receive() for fast retramsmit.
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void tcp_rexmit(struct tcp_pcb *pcb)
{
    819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct tcp_seg * seg;
	struct tcp_seg **cur_seg;

	if (pcb->unacked == NULL) {
    81a0:	6f07      	ldr	r7, [r0, #112]	; 0x70
    81a2:	b307      	cbz	r7, 81e6 <tcp_rexmit+0x4a>
    81a4:	4680      	mov	r8, r0
	}

	/* Move the first unacked segment to the unsent queue */
	/* Keep the unsent queue sorted. */
	seg          = pcb->unacked;
	pcb->unacked = seg->next;
    81a6:	683b      	ldr	r3, [r7, #0]
    81a8:	6703      	str	r3, [r0, #112]	; 0x70

	cur_seg = &(pcb->unsent);
    81aa:	f100 056c 	add.w	r5, r0, #108	; 0x6c
	while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    81ae:	e000      	b.n	81b2 <tcp_rexmit+0x16>
		cur_seg = &((*cur_seg)->next);
    81b0:	682d      	ldr	r5, [r5, #0]
	while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    81b2:	682b      	ldr	r3, [r5, #0]
    81b4:	b153      	cbz	r3, 81cc <tcp_rexmit+0x30>
    81b6:	68db      	ldr	r3, [r3, #12]
    81b8:	6858      	ldr	r0, [r3, #4]
    81ba:	4e0d      	ldr	r6, [pc, #52]	; (81f0 <tcp_rexmit+0x54>)
    81bc:	47b0      	blx	r6
    81be:	4604      	mov	r4, r0
    81c0:	68fb      	ldr	r3, [r7, #12]
    81c2:	6858      	ldr	r0, [r3, #4]
    81c4:	47b0      	blx	r6
    81c6:	1a20      	subs	r0, r4, r0
    81c8:	2800      	cmp	r0, #0
    81ca:	dbf1      	blt.n	81b0 <tcp_rexmit+0x14>
	}
	seg->next = *cur_seg;
    81cc:	682b      	ldr	r3, [r5, #0]
    81ce:	603b      	str	r3, [r7, #0]
	*cur_seg  = seg;
    81d0:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
	if (seg->next == NULL) {
    81d2:	683b      	ldr	r3, [r7, #0]
    81d4:	b14b      	cbz	r3, 81ea <tcp_rexmit+0x4e>
		/* the retransmitted segment is last in unsent, so reset unsent_oversize */
		pcb->unsent_oversize = 0;
	}
#endif /* TCP_OVERSIZE */

	++pcb->nrtx;
    81d6:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
    81da:	3301      	adds	r3, #1
    81dc:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

	/* Don't take any rtt measurements after retransmitting. */
	pcb->rttest = 0;
    81e0:	2300      	movs	r3, #0
    81e2:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    81e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pcb->unsent_oversize = 0;
    81ea:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
    81ee:	e7f2      	b.n	81d6 <tcp_rexmit+0x3a>
    81f0:	00003ec1 	.word	0x00003ec1

000081f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void tcp_rexmit_fast(struct tcp_pcb *pcb)
{
	if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
    81f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    81f6:	b11b      	cbz	r3, 8200 <tcp_rexmit_fast+0xc>
    81f8:	7f83      	ldrb	r3, [r0, #30]
    81fa:	f013 0f04 	tst.w	r3, #4
    81fe:	d000      	beq.n	8202 <tcp_rexmit_fast+0xe>
    8200:	4770      	bx	lr
{
    8202:	b510      	push	{r4, lr}
    8204:	4604      	mov	r4, r0
		LWIP_DEBUGF(TCP_FR_DEBUG,
		            ("tcp_receive: dupacks %" U16_F " (%" U32_F "), fast retransmit %" U32_F "\n",
		             (u16_t)pcb->dupacks,
		             pcb->lastack,
		             ntohl(pcb->unacked->tcphdr->seqno)));
		tcp_rexmit(pcb);
    8206:	4b12      	ldr	r3, [pc, #72]	; (8250 <tcp_rexmit_fast+0x5c>)
    8208:	4798      	blx	r3

		/* Set ssthresh to half of the minimum of the current
		 * cwnd and the advertised window */
		if (pcb->cwnd > pcb->snd_wnd) {
    820a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    820e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    8212:	4293      	cmp	r3, r2
    8214:	d918      	bls.n	8248 <tcp_rexmit_fast+0x54>
			pcb->ssthresh = pcb->snd_wnd / 2;
    8216:	0852      	lsrs	r2, r2, #1
    8218:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
		} else {
			pcb->ssthresh = pcb->cwnd / 2;
		}

		/* The minimum value for ssthresh should be 2 MSS */
		if (pcb->ssthresh < 2 * pcb->mss) {
    821c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    8220:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    8222:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    8226:	da02      	bge.n	822e <tcp_rexmit_fast+0x3a>
			LWIP_DEBUGF(TCP_FR_DEBUG,
			            ("tcp_receive: The minimum value for ssthresh %" U16_F " should be min 2 mss %" U16_F "...\n",
			             pcb->ssthresh,
			             2 * pcb->mss));
			pcb->ssthresh = 2 * pcb->mss;
    8228:	005a      	lsls	r2, r3, #1
    822a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
		}

		pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    822e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    8232:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8236:	fa12 f383 	uxtah	r3, r2, r3
    823a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		pcb->flags |= TF_INFR;
    823e:	7fa3      	ldrb	r3, [r4, #30]
    8240:	f043 0304 	orr.w	r3, r3, #4
    8244:	77a3      	strb	r3, [r4, #30]
    8246:	bd10      	pop	{r4, pc}
			pcb->ssthresh = pcb->cwnd / 2;
    8248:	085b      	lsrs	r3, r3, #1
    824a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    824e:	e7e5      	b.n	821c <tcp_rexmit_fast+0x28>
    8250:	0000819d 	.word	0x0000819d

00008254 <tcp_keepalive>:
 * Called by tcp_slowtmr()
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void tcp_keepalive(struct tcp_pcb *pcb)
{
    8254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8258:	b082      	sub	sp, #8
    825a:	4604      	mov	r4, r0
	            ("tcp_keepalive: tcp_ticks %" U32_F "   pcb->tmr %" U32_F " pcb->keep_cnt_sent %" U16_F "\n",
	             tcp_ticks,
	             pcb->tmr,
	             pcb->keep_cnt_sent));

	p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
    825c:	6d00      	ldr	r0, [r0, #80]	; 0x50
    825e:	3801      	subs	r0, #1
    8260:	4b12      	ldr	r3, [pc, #72]	; (82ac <tcp_keepalive+0x58>)
    8262:	4798      	blx	r3
    8264:	4603      	mov	r3, r0
    8266:	2200      	movs	r2, #0
    8268:	4611      	mov	r1, r2
    826a:	4620      	mov	r0, r4
    826c:	4d10      	ldr	r5, [pc, #64]	; (82b0 <tcp_keepalive+0x5c>)
    826e:	47a8      	blx	r5
	if (p == NULL) {
    8270:	b1c0      	cbz	r0, 82a4 <tcp_keepalive+0x50>
    8272:	4605      	mov	r5, r0
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: could not allocate memory for pbuf\n"));
		return;
	}
	tcphdr = (struct tcp_hdr *)p->payload;
    8274:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip, IP_PROTO_TCP, p->tot_len);
    8276:	1d26      	adds	r6, r4, #4
    8278:	8903      	ldrh	r3, [r0, #8]
    827a:	9300      	str	r3, [sp, #0]
    827c:	2306      	movs	r3, #6
    827e:	4632      	mov	r2, r6
    8280:	4621      	mov	r1, r4
    8282:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82bc <tcp_keepalive+0x68>
    8286:	47c0      	blx	r8
    8288:	8238      	strh	r0, [r7, #16]

	/* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    828a:	7aa3      	ldrb	r3, [r4, #10]
    828c:	2206      	movs	r2, #6
    828e:	9201      	str	r2, [sp, #4]
    8290:	2200      	movs	r2, #0
    8292:	9200      	str	r2, [sp, #0]
    8294:	4632      	mov	r2, r6
    8296:	4621      	mov	r1, r4
    8298:	4628      	mov	r0, r5
    829a:	4c06      	ldr	r4, [pc, #24]	; (82b4 <tcp_keepalive+0x60>)
    829c:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

	pbuf_free(p);
    829e:	4628      	mov	r0, r5
    82a0:	4b05      	ldr	r3, [pc, #20]	; (82b8 <tcp_keepalive+0x64>)
    82a2:	4798      	blx	r3

	LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %" U32_F " ackno %" U32_F ".\n", pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    82a4:	b002      	add	sp, #8
    82a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82aa:	bf00      	nop
    82ac:	00003ea9 	.word	0x00003ea9
    82b0:	000078bd 	.word	0x000078bd
    82b4:	000045ad 	.word	0x000045ad
    82b8:	000054a1 	.word	0x000054a1
    82bc:	000041b1 	.word	0x000041b1

000082c0 <tcp_zero_window_probe>:
 * Called by tcp_slowtmr()
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void tcp_zero_window_probe(struct tcp_pcb *pcb)
{
    82c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82c4:	b082      	sub	sp, #8
	            ("tcp_zero_window_probe: tcp_ticks %" U32_F "   pcb->tmr %" U32_F " pcb->keep_cnt_sent %" U16_F "\n",
	             tcp_ticks,
	             pcb->tmr,
	             pcb->keep_cnt_sent));

	seg = pcb->unacked;
    82c6:	6f05      	ldr	r5, [r0, #112]	; 0x70

	if (seg == NULL) {
    82c8:	b175      	cbz	r5, 82e8 <tcp_zero_window_probe+0x28>
		seg = pcb->unsent;
	}
	if (seg == NULL) {
    82ca:	2d00      	cmp	r5, #0
    82cc:	d041      	beq.n	8352 <tcp_zero_window_probe+0x92>
    82ce:	4604      	mov	r4, r0
		return;
	}

	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    82d0:	68eb      	ldr	r3, [r5, #12]
    82d2:	8998      	ldrh	r0, [r3, #12]
    82d4:	4b27      	ldr	r3, [pc, #156]	; (8374 <tcp_zero_window_probe+0xb4>)
    82d6:	4798      	blx	r3
    82d8:	f010 0f01 	tst.w	r0, #1
    82dc:	d006      	beq.n	82ec <tcp_zero_window_probe+0x2c>
    82de:	892b      	ldrh	r3, [r5, #8]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d039      	beq.n	8358 <tcp_zero_window_probe+0x98>
    82e4:	2200      	movs	r2, #0
    82e6:	e002      	b.n	82ee <tcp_zero_window_probe+0x2e>
		seg = pcb->unsent;
    82e8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    82ea:	e7ee      	b.n	82ca <tcp_zero_window_probe+0xa>
	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    82ec:	2200      	movs	r2, #0
	/* we want to send one seqno: either FIN or data (no options) */
	len = is_fin ? 0 : 1;
    82ee:	f002 08ff 	and.w	r8, r2, #255	; 0xff

	p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
    82f2:	68eb      	ldr	r3, [r5, #12]
    82f4:	685b      	ldr	r3, [r3, #4]
    82f6:	f082 0201 	eor.w	r2, r2, #1
    82fa:	2100      	movs	r1, #0
    82fc:	4620      	mov	r0, r4
    82fe:	4e1e      	ldr	r6, [pc, #120]	; (8378 <tcp_zero_window_probe+0xb8>)
    8300:	47b0      	blx	r6
	if (p == NULL) {
    8302:	4606      	mov	r6, r0
    8304:	b328      	cbz	r0, 8352 <tcp_zero_window_probe+0x92>
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
		return;
	}
	tcphdr = (struct tcp_hdr *)p->payload;
    8306:	6847      	ldr	r7, [r0, #4]

	if (is_fin) {
    8308:	f1b8 0f00 	cmp.w	r8, #0
    830c:	d026      	beq.n	835c <tcp_zero_window_probe+0x9c>
		/* FIN segment, no data */
		TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
    830e:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
    8312:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
    8316:	2011      	movs	r0, #17
    8318:	4b18      	ldr	r3, [pc, #96]	; (837c <tcp_zero_window_probe+0xbc>)
    831a:	4798      	blx	r3
    831c:	b200      	sxth	r0, r0
    831e:	4305      	orrs	r5, r0
    8320:	81bd      	strh	r5, [r7, #12]
		   Ensure we copy the first TCP data byte: */
		pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
	}

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip, IP_PROTO_TCP, p->tot_len);
    8322:	1d25      	adds	r5, r4, #4
    8324:	8933      	ldrh	r3, [r6, #8]
    8326:	9300      	str	r3, [sp, #0]
    8328:	2306      	movs	r3, #6
    832a:	462a      	mov	r2, r5
    832c:	4621      	mov	r1, r4
    832e:	4630      	mov	r0, r6
    8330:	f8df 8058 	ldr.w	r8, [pc, #88]	; 838c <tcp_zero_window_probe+0xcc>
    8334:	47c0      	blx	r8
    8336:	8238      	strh	r0, [r7, #16]

	/* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    8338:	7aa3      	ldrb	r3, [r4, #10]
    833a:	2206      	movs	r2, #6
    833c:	9201      	str	r2, [sp, #4]
    833e:	2200      	movs	r2, #0
    8340:	9200      	str	r2, [sp, #0]
    8342:	462a      	mov	r2, r5
    8344:	4621      	mov	r1, r4
    8346:	4630      	mov	r0, r6
    8348:	4c0d      	ldr	r4, [pc, #52]	; (8380 <tcp_zero_window_probe+0xc0>)
    834a:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

	pbuf_free(p);
    834c:	4630      	mov	r0, r6
    834e:	4b0d      	ldr	r3, [pc, #52]	; (8384 <tcp_zero_window_probe+0xc4>)
    8350:	4798      	blx	r3

	LWIP_DEBUGF(TCP_DEBUG,
	            ("tcp_zero_window_probe: seqno %" U32_F " ackno %" U32_F ".\n", pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    8352:	b002      	add	sp, #8
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    8358:	2201      	movs	r2, #1
    835a:	e7c8      	b.n	82ee <tcp_zero_window_probe+0x2e>
		pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
    835c:	6868      	ldr	r0, [r5, #4]
    835e:	8903      	ldrh	r3, [r0, #8]
    8360:	892a      	ldrh	r2, [r5, #8]
    8362:	1a9b      	subs	r3, r3, r2
    8364:	b29b      	uxth	r3, r3
    8366:	2201      	movs	r2, #1
    8368:	f107 0114 	add.w	r1, r7, #20
    836c:	4d06      	ldr	r5, [pc, #24]	; (8388 <tcp_zero_window_probe+0xc8>)
    836e:	47a8      	blx	r5
    8370:	e7d7      	b.n	8322 <tcp_zero_window_probe+0x62>
    8372:	bf00      	nop
    8374:	00003e9d 	.word	0x00003e9d
    8378:	000078bd 	.word	0x000078bd
    837c:	00003e91 	.word	0x00003e91
    8380:	000045ad 	.word	0x000045ad
    8384:	000054a1 	.word	0x000054a1
    8388:	00005789 	.word	0x00005789
    838c:	000041b1 	.word	0x000041b1

00008390 <sys_timeout>:
#if LWIP_DEBUG_TIMERNAMES
void sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else  /* LWIP_DEBUG_TIMERNAMES */
void sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
    8390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8392:	4605      	mov	r5, r0
    8394:	460f      	mov	r7, r1
    8396:	4616      	mov	r6, r2
	struct sys_timeo *timeout, *t;

	timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
    8398:	200a      	movs	r0, #10
    839a:	4b16      	ldr	r3, [pc, #88]	; (83f4 <sys_timeout+0x64>)
    839c:	4798      	blx	r3
	if (timeout == NULL) {
    839e:	2800      	cmp	r0, #0
    83a0:	d027      	beq.n	83f2 <sys_timeout+0x62>
    83a2:	4604      	mov	r4, r0
		LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
		return;
	}
	timeout->next = NULL;
    83a4:	2300      	movs	r3, #0
    83a6:	6003      	str	r3, [r0, #0]
	timeout->h    = handler;
    83a8:	6087      	str	r7, [r0, #8]
	timeout->arg  = arg;
    83aa:	60c6      	str	r6, [r0, #12]
	timeout->time = msecs;
    83ac:	6045      	str	r5, [r0, #4]
	LWIP_DEBUGF(
	    TIMERS_DEBUG,
	    ("sys_timeout: %p msecs=%" U32_F " handler=%s arg=%p\n", (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

	if (next_timeout == NULL) {
    83ae:	4b12      	ldr	r3, [pc, #72]	; (83f8 <sys_timeout+0x68>)
    83b0:	681a      	ldr	r2, [r3, #0]
    83b2:	b172      	cbz	r2, 83d2 <sys_timeout+0x42>
		next_timeout = timeout;
		return;
	}

	if (next_timeout->time > msecs) {
    83b4:	6853      	ldr	r3, [r2, #4]
    83b6:	429d      	cmp	r5, r3
    83b8:	d30d      	bcc.n	83d6 <sys_timeout+0x46>
		next_timeout->time -= msecs;
		timeout->next = next_timeout;
		next_timeout  = timeout;
	} else {
		for (t = next_timeout; t != NULL; t = t->next) {
    83ba:	b1d2      	cbz	r2, 83f2 <sys_timeout+0x62>
			timeout->time -= t->time;
    83bc:	6851      	ldr	r1, [r2, #4]
    83be:	6863      	ldr	r3, [r4, #4]
    83c0:	1a5b      	subs	r3, r3, r1
    83c2:	6063      	str	r3, [r4, #4]
			if (t->next == NULL || t->next->time > timeout->time) {
    83c4:	6811      	ldr	r1, [r2, #0]
    83c6:	b161      	cbz	r1, 83e2 <sys_timeout+0x52>
    83c8:	6848      	ldr	r0, [r1, #4]
    83ca:	4283      	cmp	r3, r0
    83cc:	d309      	bcc.n	83e2 <sys_timeout+0x52>
		for (t = next_timeout; t != NULL; t = t->next) {
    83ce:	460a      	mov	r2, r1
    83d0:	e7f3      	b.n	83ba <sys_timeout+0x2a>
		next_timeout = timeout;
    83d2:	6018      	str	r0, [r3, #0]
		return;
    83d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		next_timeout->time -= msecs;
    83d6:	1b5d      	subs	r5, r3, r5
    83d8:	6055      	str	r5, [r2, #4]
		timeout->next = next_timeout;
    83da:	6002      	str	r2, [r0, #0]
		next_timeout  = timeout;
    83dc:	4b06      	ldr	r3, [pc, #24]	; (83f8 <sys_timeout+0x68>)
    83de:	6018      	str	r0, [r3, #0]
    83e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (t->next != NULL) {
    83e2:	b111      	cbz	r1, 83ea <sys_timeout+0x5a>
					t->next->time -= timeout->time;
    83e4:	6848      	ldr	r0, [r1, #4]
    83e6:	1ac3      	subs	r3, r0, r3
    83e8:	604b      	str	r3, [r1, #4]
				}
				timeout->next = t->next;
    83ea:	6813      	ldr	r3, [r2, #0]
    83ec:	6023      	str	r3, [r4, #0]
				t->next       = timeout;
    83ee:	6014      	str	r4, [r2, #0]
				break;
    83f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83f4:	000051d5 	.word	0x000051d5
    83f8:	200080d0 	.word	0x200080d0

000083fc <tcp_timer_needed>:
{
    83fc:	b508      	push	{r3, lr}
	if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    83fe:	4b0a      	ldr	r3, [pc, #40]	; (8428 <tcp_timer_needed+0x2c>)
    8400:	685b      	ldr	r3, [r3, #4]
    8402:	b953      	cbnz	r3, 841a <tcp_timer_needed+0x1e>
    8404:	4b09      	ldr	r3, [pc, #36]	; (842c <tcp_timer_needed+0x30>)
    8406:	681b      	ldr	r3, [r3, #0]
    8408:	b143      	cbz	r3, 841c <tcp_timer_needed+0x20>
		tcpip_tcp_timer_active = 1;
    840a:	2201      	movs	r2, #1
    840c:	4b06      	ldr	r3, [pc, #24]	; (8428 <tcp_timer_needed+0x2c>)
    840e:	605a      	str	r2, [r3, #4]
		sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    8410:	2200      	movs	r2, #0
    8412:	4907      	ldr	r1, [pc, #28]	; (8430 <tcp_timer_needed+0x34>)
    8414:	20fa      	movs	r0, #250	; 0xfa
    8416:	4b07      	ldr	r3, [pc, #28]	; (8434 <tcp_timer_needed+0x38>)
    8418:	4798      	blx	r3
    841a:	bd08      	pop	{r3, pc}
	if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    841c:	4b06      	ldr	r3, [pc, #24]	; (8438 <tcp_timer_needed+0x3c>)
    841e:	681b      	ldr	r3, [r3, #0]
    8420:	2b00      	cmp	r3, #0
    8422:	d1f2      	bne.n	840a <tcp_timer_needed+0xe>
    8424:	e7f9      	b.n	841a <tcp_timer_needed+0x1e>
    8426:	bf00      	nop
    8428:	200080d0 	.word	0x200080d0
    842c:	200161d4 	.word	0x200161d4
    8430:	0000843d 	.word	0x0000843d
    8434:	00008391 	.word	0x00008391
    8438:	200161e8 	.word	0x200161e8

0000843c <tcpip_tcp_timer>:
{
    843c:	b508      	push	{r3, lr}
	tcp_tmr();
    843e:	4b09      	ldr	r3, [pc, #36]	; (8464 <tcpip_tcp_timer+0x28>)
    8440:	4798      	blx	r3
	if (tcp_active_pcbs || tcp_tw_pcbs) {
    8442:	4b09      	ldr	r3, [pc, #36]	; (8468 <tcpip_tcp_timer+0x2c>)
    8444:	681b      	ldr	r3, [r3, #0]
    8446:	b12b      	cbz	r3, 8454 <tcpip_tcp_timer+0x18>
		sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    8448:	2200      	movs	r2, #0
    844a:	4908      	ldr	r1, [pc, #32]	; (846c <tcpip_tcp_timer+0x30>)
    844c:	20fa      	movs	r0, #250	; 0xfa
    844e:	4b08      	ldr	r3, [pc, #32]	; (8470 <tcpip_tcp_timer+0x34>)
    8450:	4798      	blx	r3
    8452:	bd08      	pop	{r3, pc}
	if (tcp_active_pcbs || tcp_tw_pcbs) {
    8454:	4b07      	ldr	r3, [pc, #28]	; (8474 <tcpip_tcp_timer+0x38>)
    8456:	681b      	ldr	r3, [r3, #0]
    8458:	2b00      	cmp	r3, #0
    845a:	d1f5      	bne.n	8448 <tcpip_tcp_timer+0xc>
		tcpip_tcp_timer_active = 0;
    845c:	2200      	movs	r2, #0
    845e:	4b06      	ldr	r3, [pc, #24]	; (8478 <tcpip_tcp_timer+0x3c>)
    8460:	605a      	str	r2, [r3, #4]
    8462:	bd08      	pop	{r3, pc}
    8464:	0000608d 	.word	0x0000608d
    8468:	200161d4 	.word	0x200161d4
    846c:	0000843d 	.word	0x0000843d
    8470:	00008391 	.word	0x00008391
    8474:	200161e8 	.word	0x200161e8
    8478:	200080d0 	.word	0x200080d0

0000847c <sys_timeouts_init>:
{
    847c:	b510      	push	{r4, lr}
	sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
    847e:	2200      	movs	r2, #0
    8480:	4905      	ldr	r1, [pc, #20]	; (8498 <sys_timeouts_init+0x1c>)
    8482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8486:	4c05      	ldr	r4, [pc, #20]	; (849c <sys_timeouts_init+0x20>)
    8488:	47a0      	blx	r4
	sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
    848a:	2200      	movs	r2, #0
    848c:	4904      	ldr	r1, [pc, #16]	; (84a0 <sys_timeouts_init+0x24>)
    848e:	f241 3088 	movw	r0, #5000	; 0x1388
    8492:	47a0      	blx	r4
    8494:	bd10      	pop	{r4, pc}
    8496:	bf00      	nop
    8498:	000084c5 	.word	0x000084c5
    849c:	00008391 	.word	0x00008391
    84a0:	000084a5 	.word	0x000084a5

000084a4 <arp_timer>:
{
    84a4:	b508      	push	{r3, lr}
	etharp_tmr();
    84a6:	4b04      	ldr	r3, [pc, #16]	; (84b8 <arp_timer+0x14>)
    84a8:	4798      	blx	r3
	sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
    84aa:	2200      	movs	r2, #0
    84ac:	4903      	ldr	r1, [pc, #12]	; (84bc <arp_timer+0x18>)
    84ae:	f241 3088 	movw	r0, #5000	; 0x1388
    84b2:	4b03      	ldr	r3, [pc, #12]	; (84c0 <arp_timer+0x1c>)
    84b4:	4798      	blx	r3
    84b6:	bd08      	pop	{r3, pc}
    84b8:	00008ded 	.word	0x00008ded
    84bc:	000084a5 	.word	0x000084a5
    84c0:	00008391 	.word	0x00008391

000084c4 <ip_reass_timer>:
{
    84c4:	b508      	push	{r3, lr}
	ip_reass_tmr();
    84c6:	4b04      	ldr	r3, [pc, #16]	; (84d8 <ip_reass_timer+0x14>)
    84c8:	4798      	blx	r3
	sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
    84ca:	2200      	movs	r2, #0
    84cc:	4903      	ldr	r1, [pc, #12]	; (84dc <ip_reass_timer+0x18>)
    84ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    84d2:	4b03      	ldr	r3, [pc, #12]	; (84e0 <ip_reass_timer+0x1c>)
    84d4:	4798      	blx	r3
    84d6:	bd08      	pop	{r3, pc}
    84d8:	00004afd 	.word	0x00004afd
    84dc:	000084c5 	.word	0x000084c5
    84e0:	00008391 	.word	0x00008391

000084e4 <sys_untimeout>:
 */
void sys_untimeout(sys_timeout_handler handler, void *arg)
{
	struct sys_timeo *prev_t, *t;

	if (next_timeout == NULL) {
    84e4:	4b11      	ldr	r3, [pc, #68]	; (852c <sys_untimeout+0x48>)
    84e6:	681b      	ldr	r3, [r3, #0]
    84e8:	b1fb      	cbz	r3, 852a <sys_untimeout+0x46>
{
    84ea:	b510      	push	{r4, lr}
    84ec:	2400      	movs	r4, #0
    84ee:	e005      	b.n	84fc <sys_untimeout+0x18>
	for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
		if ((t->h == handler) && (t->arg == arg)) {
			/* We have a match */
			/* Unlink from previous in list */
			if (prev_t == NULL) {
				next_timeout = t->next;
    84f0:	6819      	ldr	r1, [r3, #0]
    84f2:	4a0e      	ldr	r2, [pc, #56]	; (852c <sys_untimeout+0x48>)
    84f4:	6011      	str	r1, [r2, #0]
    84f6:	e00c      	b.n	8512 <sys_untimeout+0x2e>
	for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
    84f8:	461c      	mov	r4, r3
    84fa:	681b      	ldr	r3, [r3, #0]
    84fc:	b1a3      	cbz	r3, 8528 <sys_untimeout+0x44>
		if ((t->h == handler) && (t->arg == arg)) {
    84fe:	689a      	ldr	r2, [r3, #8]
    8500:	4282      	cmp	r2, r0
    8502:	d1f9      	bne.n	84f8 <sys_untimeout+0x14>
    8504:	68da      	ldr	r2, [r3, #12]
    8506:	428a      	cmp	r2, r1
    8508:	d1f6      	bne.n	84f8 <sys_untimeout+0x14>
			if (prev_t == NULL) {
    850a:	2c00      	cmp	r4, #0
    850c:	d0f0      	beq.n	84f0 <sys_untimeout+0xc>
			} else {
				prev_t->next = t->next;
    850e:	681a      	ldr	r2, [r3, #0]
    8510:	6022      	str	r2, [r4, #0]
			}
			/* If not the last one, add time of this one back to next */
			if (t->next != NULL) {
    8512:	681a      	ldr	r2, [r3, #0]
    8514:	b11a      	cbz	r2, 851e <sys_untimeout+0x3a>
				t->next->time += t->time;
    8516:	6858      	ldr	r0, [r3, #4]
    8518:	6851      	ldr	r1, [r2, #4]
    851a:	4401      	add	r1, r0
    851c:	6051      	str	r1, [r2, #4]
			}
			memp_free(MEMP_SYS_TIMEOUT, t);
    851e:	4619      	mov	r1, r3
    8520:	200a      	movs	r0, #10
    8522:	4b03      	ldr	r3, [pc, #12]	; (8530 <sys_untimeout+0x4c>)
    8524:	4798      	blx	r3
			return;
    8526:	bd10      	pop	{r4, pc}
    8528:	bd10      	pop	{r4, pc}
    852a:	4770      	bx	lr
    852c:	200080d0 	.word	0x200080d0
    8530:	000051fd 	.word	0x000051fd

00008534 <sys_timeouts_mbox_fetch>:
 *
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
    8534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8536:	4604      	mov	r4, r0
    8538:	460d      	mov	r5, r1
    853a:	e016      	b.n	856a <sys_timeouts_mbox_fetch+0x36>
	sys_timeout_handler handler;
	void *              arg;

again:
	if (!next_timeout) {
		time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
    853c:	2200      	movs	r2, #0
    853e:	4629      	mov	r1, r5
    8540:	4620      	mov	r0, r4
    8542:	4b16      	ldr	r3, [pc, #88]	; (859c <sys_timeouts_mbox_fetch+0x68>)
    8544:	4798      	blx	r3
    8546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		if (next_timeout->time > 0) {
			time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
    8548:	4629      	mov	r1, r5
    854a:	4620      	mov	r0, r4
    854c:	4b13      	ldr	r3, [pc, #76]	; (859c <sys_timeouts_mbox_fetch+0x68>)
    854e:	4798      	blx	r3
		} else {
			time_needed = SYS_ARCH_TIMEOUT;
		}

		if (time_needed == SYS_ARCH_TIMEOUT) {
    8550:	f1b0 3fff 	cmp.w	r0, #4294967295
    8554:	d116      	bne.n	8584 <sys_timeouts_mbox_fetch+0x50>
			/* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
			   could be fetched. We should now call the timeout handler and
			   deallocate the memory allocated for the timeout. */
			tmptimeout   = next_timeout;
    8556:	4b12      	ldr	r3, [pc, #72]	; (85a0 <sys_timeouts_mbox_fetch+0x6c>)
    8558:	6819      	ldr	r1, [r3, #0]
			next_timeout = tmptimeout->next;
    855a:	680a      	ldr	r2, [r1, #0]
    855c:	601a      	str	r2, [r3, #0]
			handler      = tmptimeout->h;
    855e:	688e      	ldr	r6, [r1, #8]
			arg          = tmptimeout->arg;
    8560:	68cf      	ldr	r7, [r1, #12]
#if LWIP_DEBUG_TIMERNAMES
			if (handler != NULL) {
				LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n", tmptimeout->handler_name, arg));
			}
#endif /* LWIP_DEBUG_TIMERNAMES */
			memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
    8562:	200a      	movs	r0, #10
    8564:	4b0f      	ldr	r3, [pc, #60]	; (85a4 <sys_timeouts_mbox_fetch+0x70>)
    8566:	4798      	blx	r3
			if (handler != NULL) {
    8568:	b94e      	cbnz	r6, 857e <sys_timeouts_mbox_fetch+0x4a>
	if (!next_timeout) {
    856a:	4b0d      	ldr	r3, [pc, #52]	; (85a0 <sys_timeouts_mbox_fetch+0x6c>)
    856c:	681b      	ldr	r3, [r3, #0]
    856e:	2b00      	cmp	r3, #0
    8570:	d0e4      	beq.n	853c <sys_timeouts_mbox_fetch+0x8>
		if (next_timeout->time > 0) {
    8572:	685a      	ldr	r2, [r3, #4]
    8574:	2a00      	cmp	r2, #0
    8576:	d1e7      	bne.n	8548 <sys_timeouts_mbox_fetch+0x14>
			time_needed = SYS_ARCH_TIMEOUT;
    8578:	f04f 30ff 	mov.w	r0, #4294967295
    857c:	e7e8      	b.n	8550 <sys_timeouts_mbox_fetch+0x1c>
				/* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
				   timeout handler function. */
				LOCK_TCPIP_CORE();
				handler(arg);
    857e:	4638      	mov	r0, r7
    8580:	47b0      	blx	r6
    8582:	e7f2      	b.n	856a <sys_timeouts_mbox_fetch+0x36>
			goto again;
		} else {
			/* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
			   occured. The time variable is set to the number of
			   milliseconds we waited for the message. */
			if (time_needed < next_timeout->time) {
    8584:	4b06      	ldr	r3, [pc, #24]	; (85a0 <sys_timeouts_mbox_fetch+0x6c>)
    8586:	681a      	ldr	r2, [r3, #0]
    8588:	6853      	ldr	r3, [r2, #4]
    858a:	4298      	cmp	r0, r3
    858c:	d302      	bcc.n	8594 <sys_timeouts_mbox_fetch+0x60>
				next_timeout->time -= time_needed;
			} else {
				next_timeout->time = 0;
    858e:	2300      	movs	r3, #0
    8590:	6053      	str	r3, [r2, #4]
    8592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				next_timeout->time -= time_needed;
    8594:	1a1b      	subs	r3, r3, r0
    8596:	6053      	str	r3, [r2, #4]
    8598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    859a:	bf00      	nop
    859c:	00002611 	.word	0x00002611
    85a0:	200080d0 	.word	0x200080d0
    85a4:	000051fd 	.word	0x000051fd

000085a8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t udp_new_port(void)
{
	u16_t           n = 0;
    85a8:	2000      	movs	r0, #0
	struct udp_pcb *pcb;

again:
	if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    85aa:	4a10      	ldr	r2, [pc, #64]	; (85ec <udp_new_port+0x44>)
    85ac:	8813      	ldrh	r3, [r2, #0]
    85ae:	1c59      	adds	r1, r3, #1
    85b0:	8011      	strh	r1, [r2, #0]
    85b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    85b6:	4293      	cmp	r3, r2
    85b8:	d009      	beq.n	85ce <udp_new_port+0x26>
		udp_port = UDP_LOCAL_PORT_RANGE_START;
	}
	/* Check all PCBs. */
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    85ba:	4b0d      	ldr	r3, [pc, #52]	; (85f0 <udp_new_port+0x48>)
    85bc:	681b      	ldr	r3, [r3, #0]
    85be:	b193      	cbz	r3, 85e6 <udp_new_port+0x3e>
		if (pcb->local_port == udp_port) {
    85c0:	8a59      	ldrh	r1, [r3, #18]
    85c2:	4a0a      	ldr	r2, [pc, #40]	; (85ec <udp_new_port+0x44>)
    85c4:	8812      	ldrh	r2, [r2, #0]
    85c6:	4291      	cmp	r1, r2
    85c8:	d006      	beq.n	85d8 <udp_new_port+0x30>
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    85ca:	68db      	ldr	r3, [r3, #12]
    85cc:	e7f7      	b.n	85be <udp_new_port+0x16>
		udp_port = UDP_LOCAL_PORT_RANGE_START;
    85ce:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    85d2:	4b06      	ldr	r3, [pc, #24]	; (85ec <udp_new_port+0x44>)
    85d4:	801a      	strh	r2, [r3, #0]
    85d6:	e7f0      	b.n	85ba <udp_new_port+0x12>
			if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
    85d8:	3001      	adds	r0, #1
    85da:	b280      	uxth	r0, r0
    85dc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    85e0:	d3e3      	bcc.n	85aa <udp_new_port+0x2>
				return 0;
    85e2:	2000      	movs	r0, #0
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
    85e4:	4770      	bx	lr
	return udp_port;
    85e6:	4b01      	ldr	r3, [pc, #4]	; (85ec <udp_new_port+0x44>)
    85e8:	8818      	ldrh	r0, [r3, #0]
    85ea:	4770      	bx	lr
    85ec:	20000044 	.word	0x20000044
    85f0:	200161f0 	.word	0x200161f0

000085f4 <udp_init>:
{
    85f4:	4770      	bx	lr
	...

000085f8 <udp_input>:
 * @param p pbuf to be demultiplexed to a UDP PCB.
 * @param inp network interface on which the datagram was received.
 *
 */
void udp_input(struct pbuf *p, struct netif *inp)
{
    85f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85fc:	b085      	sub	sp, #20
    85fe:	4606      	mov	r6, r0
    8600:	468a      	mov	sl, r1

	PERF_START;

	UDP_STATS_INC(udp.recv);

	iphdr = (struct ip_hdr *)p->payload;
    8602:	f8d0 9004 	ldr.w	r9, [r0, #4]

	/* Check minimum length (IP header + UDP header)
	 * and move payload pointer to UDP header */
	if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
    8606:	8903      	ldrh	r3, [r0, #8]
    8608:	f899 1000 	ldrb.w	r1, [r9]
    860c:	f001 010f 	and.w	r1, r1, #15
    8610:	1c8a      	adds	r2, r1, #2
    8612:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
    8616:	db05      	blt.n	8624 <udp_input+0x2c>
    8618:	0089      	lsls	r1, r1, #2
    861a:	4249      	negs	r1, r1
    861c:	4b5f      	ldr	r3, [pc, #380]	; (879c <udp_input+0x1a4>)
    861e:	4798      	blx	r3
    8620:	4605      	mov	r5, r0
    8622:	b128      	cbz	r0, 8630 <udp_input+0x38>
		/* drop short packets */
		LWIP_DEBUGF(UDP_DEBUG, ("udp_input: short UDP datagram (%" U16_F " bytes) discarded\n", p->tot_len));
		UDP_STATS_INC(udp.lenerr);
		UDP_STATS_INC(udp.drop);
		snmp_inc_udpinerrors();
		pbuf_free(p);
    8624:	4630      	mov	r0, r6
    8626:	4b5e      	ldr	r3, [pc, #376]	; (87a0 <udp_input+0x1a8>)
    8628:	4798      	blx	r3
	} else {
		pbuf_free(p);
	}
end:
	PERF_STOP("udp_input");
}
    862a:	b005      	add	sp, #20
    862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udphdr = (struct udp_hdr *)p->payload;
    8630:	f8d6 b004 	ldr.w	fp, [r6, #4]
	broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
    8634:	4651      	mov	r1, sl
    8636:	4b5b      	ldr	r3, [pc, #364]	; (87a4 <udp_input+0x1ac>)
    8638:	6818      	ldr	r0, [r3, #0]
    863a:	4b5b      	ldr	r3, [pc, #364]	; (87a8 <udp_input+0x1b0>)
    863c:	4798      	blx	r3
    863e:	4680      	mov	r8, r0
	src  = ntohs(udphdr->src);
    8640:	f8bb 0000 	ldrh.w	r0, [fp]
    8644:	4c59      	ldr	r4, [pc, #356]	; (87ac <udp_input+0x1b4>)
    8646:	47a0      	blx	r4
    8648:	4607      	mov	r7, r0
	dest = ntohs(udphdr->dest);
    864a:	f8bb 0002 	ldrh.w	r0, [fp, #2]
    864e:	47a0      	blx	r4
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    8650:	4b57      	ldr	r3, [pc, #348]	; (87b0 <udp_input+0x1b8>)
    8652:	681b      	ldr	r3, [r3, #0]
    8654:	9303      	str	r3, [sp, #12]
    8656:	461c      	mov	r4, r3
		uncon_pcb   = NULL;
    8658:	f04f 0c00 	mov.w	ip, #0
		prev        = NULL;
    865c:	4663      	mov	r3, ip
    865e:	4641      	mov	r1, r8
    8660:	46b6      	mov	lr, r6
    8662:	4666      	mov	r6, ip
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    8664:	e027      	b.n	86b6 <udp_input+0xbe>
				if ((!broadcast && ip_addr_isany(&pcb->local_ip)) || ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)
    8666:	b911      	cbnz	r1, 866e <udp_input+0x76>
    8668:	b19c      	cbz	r4, 8692 <udp_input+0x9a>
    866a:	6822      	ldr	r2, [r4, #0]
    866c:	b18a      	cbz	r2, 8692 <udp_input+0x9a>
    866e:	f8d4 c000 	ldr.w	ip, [r4]
    8672:	4a4c      	ldr	r2, [pc, #304]	; (87a4 <udp_input+0x1ac>)
    8674:	6812      	ldr	r2, [r2, #0]
    8676:	4594      	cmp	ip, r2
    8678:	d00b      	beq.n	8692 <udp_input+0x9a>
				    ||
    867a:	b199      	cbz	r1, 86a4 <udp_input+0xac>
				     && (ip_addr_isany(&pcb->local_ip)
    867c:	b14c      	cbz	r4, 8692 <udp_input+0x9a>
    867e:	f1bc 0f00 	cmp.w	ip, #0
    8682:	d006      	beq.n	8692 <udp_input+0x9a>
				         || ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
    8684:	ea8c 0c02 	eor.w	ip, ip, r2
    8688:	f8da 2008 	ldr.w	r2, [sl, #8]
    868c:	ea1c 0f02 	tst.w	ip, r2
    8690:	d10a      	bne.n	86a8 <udp_input+0xb0>
					if ((uncon_pcb == NULL) && ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
    8692:	b10e      	cbz	r6, 8698 <udp_input+0xa0>
					local_match = 1;
    8694:	2201      	movs	r2, #1
    8696:	e013      	b.n	86c0 <udp_input+0xc8>
					if ((uncon_pcb == NULL) && ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
    8698:	7c22      	ldrb	r2, [r4, #16]
    869a:	f012 0f04 	tst.w	r2, #4
    869e:	d005      	beq.n	86ac <udp_input+0xb4>
					local_match = 1;
    86a0:	2201      	movs	r2, #1
    86a2:	e00d      	b.n	86c0 <udp_input+0xc8>
			local_match = 0;
    86a4:	460a      	mov	r2, r1
    86a6:	e00b      	b.n	86c0 <udp_input+0xc8>
    86a8:	462a      	mov	r2, r5
    86aa:	e009      	b.n	86c0 <udp_input+0xc8>
						uncon_pcb = pcb;
    86ac:	4626      	mov	r6, r4
					local_match = 1;
    86ae:	2201      	movs	r2, #1
    86b0:	e006      	b.n	86c0 <udp_input+0xc8>
			prev = pcb;
    86b2:	4623      	mov	r3, r4
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    86b4:	68e4      	ldr	r4, [r4, #12]
    86b6:	b1f4      	cbz	r4, 86f6 <udp_input+0xfe>
			if (pcb->local_port == dest) {
    86b8:	8a62      	ldrh	r2, [r4, #18]
    86ba:	4290      	cmp	r0, r2
    86bc:	d0d3      	beq.n	8666 <udp_input+0x6e>
			local_match = 0;
    86be:	462a      	mov	r2, r5
			if ((local_match != 0) && (pcb->remote_port == src)
    86c0:	2a00      	cmp	r2, #0
    86c2:	d0f6      	beq.n	86b2 <udp_input+0xba>
    86c4:	8aa2      	ldrh	r2, [r4, #20]
    86c6:	4297      	cmp	r7, r2
    86c8:	d1f3      	bne.n	86b2 <udp_input+0xba>
			    && (ip_addr_isany(&pcb->remote_ip) || ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
    86ca:	f114 0f04 	cmn.w	r4, #4
    86ce:	d007      	beq.n	86e0 <udp_input+0xe8>
    86d0:	6862      	ldr	r2, [r4, #4]
    86d2:	b12a      	cbz	r2, 86e0 <udp_input+0xe8>
    86d4:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 87b4 <udp_input+0x1bc>
    86d8:	f8dc c000 	ldr.w	ip, [ip]
    86dc:	4562      	cmp	r2, ip
    86de:	d1e8      	bne.n	86b2 <udp_input+0xba>
    86e0:	46b4      	mov	ip, r6
    86e2:	4688      	mov	r8, r1
    86e4:	4676      	mov	r6, lr
				if (prev != NULL) {
    86e6:	b14b      	cbz	r3, 86fc <udp_input+0x104>
					prev->next = pcb->next;
    86e8:	68e2      	ldr	r2, [r4, #12]
    86ea:	60da      	str	r2, [r3, #12]
					pcb->next  = udp_pcbs;
    86ec:	9b03      	ldr	r3, [sp, #12]
    86ee:	60e3      	str	r3, [r4, #12]
					udp_pcbs   = pcb;
    86f0:	4b2f      	ldr	r3, [pc, #188]	; (87b0 <udp_input+0x1b8>)
    86f2:	601c      	str	r4, [r3, #0]
    86f4:	e002      	b.n	86fc <udp_input+0x104>
    86f6:	46b4      	mov	ip, r6
    86f8:	4688      	mov	r8, r1
    86fa:	4676      	mov	r6, lr
		if (pcb == NULL) {
    86fc:	b1e4      	cbz	r4, 8738 <udp_input+0x140>
	if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
    86fe:	b1ec      	cbz	r4, 873c <udp_input+0x144>
			if (udphdr->chksum != 0) {
    8700:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    8704:	b143      	cbz	r3, 8718 <udp_input+0x120>
				if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(), IP_PROTO_UDP, p->tot_len)
    8706:	8933      	ldrh	r3, [r6, #8]
    8708:	9300      	str	r3, [sp, #0]
    870a:	2311      	movs	r3, #17
    870c:	4a25      	ldr	r2, [pc, #148]	; (87a4 <udp_input+0x1ac>)
    870e:	4929      	ldr	r1, [pc, #164]	; (87b4 <udp_input+0x1bc>)
    8710:	4630      	mov	r0, r6
    8712:	4d29      	ldr	r5, [pc, #164]	; (87b8 <udp_input+0x1c0>)
    8714:	47a8      	blx	r5
    8716:	b9d8      	cbnz	r0, 8750 <udp_input+0x158>
		if (pbuf_header(p, -UDP_HLEN)) {
    8718:	f06f 0107 	mvn.w	r1, #7
    871c:	4630      	mov	r0, r6
    871e:	4b1f      	ldr	r3, [pc, #124]	; (879c <udp_input+0x1a4>)
    8720:	4798      	blx	r3
    8722:	b9c8      	cbnz	r0, 8758 <udp_input+0x160>
		if (pcb != NULL) {
    8724:	b304      	cbz	r4, 8768 <udp_input+0x170>
			if (pcb->recv != NULL) {
    8726:	69a5      	ldr	r5, [r4, #24]
    8728:	b1d5      	cbz	r5, 8760 <udp_input+0x168>
				pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
    872a:	69e0      	ldr	r0, [r4, #28]
    872c:	9700      	str	r7, [sp, #0]
    872e:	4b21      	ldr	r3, [pc, #132]	; (87b4 <udp_input+0x1bc>)
    8730:	4632      	mov	r2, r6
    8732:	4621      	mov	r1, r4
    8734:	47a8      	blx	r5
    8736:	e778      	b.n	862a <udp_input+0x32>
			pcb = uncon_pcb;
    8738:	4664      	mov	r4, ip
    873a:	e7e0      	b.n	86fe <udp_input+0x106>
	if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
    873c:	f8da 2004 	ldr.w	r2, [sl, #4]
    8740:	4b18      	ldr	r3, [pc, #96]	; (87a4 <udp_input+0x1ac>)
    8742:	681b      	ldr	r3, [r3, #0]
    8744:	429a      	cmp	r2, r3
    8746:	d0db      	beq.n	8700 <udp_input+0x108>
		pbuf_free(p);
    8748:	4630      	mov	r0, r6
    874a:	4b15      	ldr	r3, [pc, #84]	; (87a0 <udp_input+0x1a8>)
    874c:	4798      	blx	r3
}
    874e:	e76c      	b.n	862a <udp_input+0x32>
					pbuf_free(p);
    8750:	4630      	mov	r0, r6
    8752:	4b13      	ldr	r3, [pc, #76]	; (87a0 <udp_input+0x1a8>)
    8754:	4798      	blx	r3
					goto end;
    8756:	e768      	b.n	862a <udp_input+0x32>
			pbuf_free(p);
    8758:	4630      	mov	r0, r6
    875a:	4b11      	ldr	r3, [pc, #68]	; (87a0 <udp_input+0x1a8>)
    875c:	4798      	blx	r3
			goto end;
    875e:	e764      	b.n	862a <udp_input+0x32>
				pbuf_free(p);
    8760:	4630      	mov	r0, r6
    8762:	4b0f      	ldr	r3, [pc, #60]	; (87a0 <udp_input+0x1a8>)
    8764:	4798      	blx	r3
				goto end;
    8766:	e760      	b.n	862a <udp_input+0x32>
			if (!broadcast && !ip_addr_ismulticast(&current_iphdr_dest)) {
    8768:	f1b8 0f00 	cmp.w	r8, #0
    876c:	d112      	bne.n	8794 <udp_input+0x19c>
    876e:	4b0d      	ldr	r3, [pc, #52]	; (87a4 <udp_input+0x1ac>)
    8770:	681b      	ldr	r3, [r3, #0]
    8772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8776:	2be0      	cmp	r3, #224	; 0xe0
    8778:	d00c      	beq.n	8794 <udp_input+0x19c>
				pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
    877a:	f899 1000 	ldrb.w	r1, [r9]
    877e:	f001 010f 	and.w	r1, r1, #15
    8782:	3102      	adds	r1, #2
    8784:	0089      	lsls	r1, r1, #2
    8786:	4630      	mov	r0, r6
    8788:	4b04      	ldr	r3, [pc, #16]	; (879c <udp_input+0x1a4>)
    878a:	4798      	blx	r3
				icmp_dest_unreach(p, ICMP_DUR_PORT);
    878c:	2103      	movs	r1, #3
    878e:	4630      	mov	r0, r6
    8790:	4b0a      	ldr	r3, [pc, #40]	; (87bc <udp_input+0x1c4>)
    8792:	4798      	blx	r3
			pbuf_free(p);
    8794:	4630      	mov	r0, r6
    8796:	4b02      	ldr	r3, [pc, #8]	; (87a0 <udp_input+0x1a8>)
    8798:	4798      	blx	r3
    879a:	e746      	b.n	862a <udp_input+0x32>
    879c:	00005427 	.word	0x00005427
    87a0:	000054a1 	.word	0x000054a1
    87a4:	200129a8 	.word	0x200129a8
    87a8:	000045ed 	.word	0x000045ed
    87ac:	00003e9d 	.word	0x00003e9d
    87b0:	200161f0 	.word	0x200161f0
    87b4:	200129a0 	.word	0x200129a0
    87b8:	000041b1 	.word	0x000041b1
    87bc:	00004129 	.word	0x00004129

000087c0 <udp_bind>:
 * another UDP PCB.
 *
 * @see udp_disconnect()
 */
err_t udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
    87c0:	b570      	push	{r4, r5, r6, lr}
    87c2:	4604      	mov	r4, r0
	ip_addr_debug_print(UDP_DEBUG, ipaddr);
	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %" U16_F ")\n", port));

	rebind = 0;
	/* Check for double bind and rebind of the same pcb */
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    87c4:	4b1d      	ldr	r3, [pc, #116]	; (883c <udp_bind+0x7c>)
    87c6:	681b      	ldr	r3, [r3, #0]
	rebind = 0;
    87c8:	2600      	movs	r6, #0
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    87ca:	e001      	b.n	87d0 <udp_bind+0x10>
		/* is this UDP PCB already on active list? */
		if (pcb == ipcb) {
			/* pcb may occur at most once in active list */
			LWIP_ASSERT("rebind == 0", rebind == 0);
			/* pcb already in list, just rebind */
			rebind = 1;
    87cc:	2601      	movs	r6, #1
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    87ce:	68db      	ldr	r3, [r3, #12]
    87d0:	b17b      	cbz	r3, 87f2 <udp_bind+0x32>
		if (pcb == ipcb) {
    87d2:	42a3      	cmp	r3, r4
    87d4:	d0fa      	beq.n	87cc <udp_bind+0xc>
		else if (!ip_get_option(pcb, SOF_REUSEADDR) && !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else  /* SO_REUSE */
		/* port matches that of PCB in list and REUSEADDR not set -> reject */
		else {
#endif /* SO_REUSE */
			if ((ipcb->local_port == port) &&
    87d6:	8a58      	ldrh	r0, [r3, #18]
    87d8:	4290      	cmp	r0, r2
    87da:	d1f8      	bne.n	87ce <udp_bind+0xe>
    87dc:	b1fb      	cbz	r3, 881e <udp_bind+0x5e>
			    /* IP address matches, or one is IP_ADDR_ANY? */
			    (ip_addr_isany(&(ipcb->local_ip)) || ip_addr_isany(ipaddr) || ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
    87de:	6818      	ldr	r0, [r3, #0]
    87e0:	b300      	cbz	r0, 8824 <udp_bind+0x64>
    87e2:	b311      	cbz	r1, 882a <udp_bind+0x6a>
    87e4:	680d      	ldr	r5, [r1, #0]
    87e6:	b31d      	cbz	r5, 8830 <udp_bind+0x70>
    87e8:	42a8      	cmp	r0, r5
    87ea:	d1f0      	bne.n	87ce <udp_bind+0xe>
				/* other PCB already binds to this local IP and port */
				LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: local port %" U16_F " already bound by another pcb\n", port));
				return ERR_USE;
    87ec:	f06f 0007 	mvn.w	r0, #7
    87f0:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
	}

	ip_addr_set(&pcb->local_ip, ipaddr);
    87f2:	b151      	cbz	r1, 880a <udp_bind+0x4a>
    87f4:	680b      	ldr	r3, [r1, #0]
    87f6:	6023      	str	r3, [r4, #0]

	/* no port specified? */
	if (port == 0) {
    87f8:	b14a      	cbz	r2, 880e <udp_bind+0x4e>
			/* no more ports available in local range */
			LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
			return ERR_USE;
		}
	}
	pcb->local_port = port;
    87fa:	8262      	strh	r2, [r4, #18]
	snmp_insert_udpidx_tree(pcb);
	/* pcb not active yet? */
	if (rebind == 0) {
    87fc:	b9de      	cbnz	r6, 8836 <udp_bind+0x76>
		/* place the PCB on the active list if not already there */
		pcb->next = udp_pcbs;
    87fe:	4b0f      	ldr	r3, [pc, #60]	; (883c <udp_bind+0x7c>)
    8800:	681a      	ldr	r2, [r3, #0]
    8802:	60e2      	str	r2, [r4, #12]
		udp_pcbs  = pcb;
    8804:	601c      	str	r4, [r3, #0]
	             ip4_addr1_16(&pcb->local_ip),
	             ip4_addr2_16(&pcb->local_ip),
	             ip4_addr3_16(&pcb->local_ip),
	             ip4_addr4_16(&pcb->local_ip),
	             pcb->local_port));
	return ERR_OK;
    8806:	2000      	movs	r0, #0
    8808:	bd70      	pop	{r4, r5, r6, pc}
	ip_addr_set(&pcb->local_ip, ipaddr);
    880a:	2300      	movs	r3, #0
    880c:	e7f3      	b.n	87f6 <udp_bind+0x36>
		port = udp_new_port();
    880e:	4b0c      	ldr	r3, [pc, #48]	; (8840 <udp_bind+0x80>)
    8810:	4798      	blx	r3
		if (port == 0) {
    8812:	4602      	mov	r2, r0
    8814:	2800      	cmp	r0, #0
    8816:	d1f0      	bne.n	87fa <udp_bind+0x3a>
			return ERR_USE;
    8818:	f06f 0007 	mvn.w	r0, #7
    881c:	bd70      	pop	{r4, r5, r6, pc}
				return ERR_USE;
    881e:	f06f 0007 	mvn.w	r0, #7
    8822:	bd70      	pop	{r4, r5, r6, pc}
    8824:	f06f 0007 	mvn.w	r0, #7
    8828:	bd70      	pop	{r4, r5, r6, pc}
    882a:	f06f 0007 	mvn.w	r0, #7
    882e:	bd70      	pop	{r4, r5, r6, pc}
    8830:	f06f 0007 	mvn.w	r0, #7
    8834:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_OK;
    8836:	2000      	movs	r0, #0
}
    8838:	bd70      	pop	{r4, r5, r6, pc}
    883a:	bf00      	nop
    883c:	200161f0 	.word	0x200161f0
    8840:	000085a9 	.word	0x000085a9

00008844 <udp_sendto_if>:
{
    8844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8848:	b085      	sub	sp, #20
    884a:	4604      	mov	r4, r0
    884c:	460f      	mov	r7, r1
    884e:	4691      	mov	r9, r2
    8850:	469a      	mov	sl, r3
    8852:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (pcb->local_port == 0) {
    8856:	8a42      	ldrh	r2, [r0, #18]
    8858:	b92a      	cbnz	r2, 8866 <udp_sendto_if+0x22>
		err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
    885a:	4601      	mov	r1, r0
    885c:	4b34      	ldr	r3, [pc, #208]	; (8930 <udp_sendto_if+0xec>)
    885e:	4798      	blx	r3
		if (err != ERR_OK) {
    8860:	4605      	mov	r5, r0
    8862:	2800      	cmp	r0, #0
    8864:	d13f      	bne.n	88e6 <udp_sendto_if+0xa2>
	if (pbuf_header(p, UDP_HLEN)) {
    8866:	2108      	movs	r1, #8
    8868:	4638      	mov	r0, r7
    886a:	4b32      	ldr	r3, [pc, #200]	; (8934 <udp_sendto_if+0xf0>)
    886c:	4798      	blx	r3
    886e:	b168      	cbz	r0, 888c <udp_sendto_if+0x48>
		q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    8870:	2200      	movs	r2, #0
    8872:	2108      	movs	r1, #8
    8874:	2001      	movs	r0, #1
    8876:	4b30      	ldr	r3, [pc, #192]	; (8938 <udp_sendto_if+0xf4>)
    8878:	4798      	blx	r3
		if (q == NULL) {
    887a:	4606      	mov	r6, r0
    887c:	2800      	cmp	r0, #0
    887e:	d051      	beq.n	8924 <udp_sendto_if+0xe0>
		if (p->tot_len != 0) {
    8880:	893b      	ldrh	r3, [r7, #8]
    8882:	b123      	cbz	r3, 888e <udp_sendto_if+0x4a>
			pbuf_chain(q, p);
    8884:	4639      	mov	r1, r7
    8886:	4b2d      	ldr	r3, [pc, #180]	; (893c <udp_sendto_if+0xf8>)
    8888:	4798      	blx	r3
    888a:	e000      	b.n	888e <udp_sendto_if+0x4a>
		q = p;
    888c:	463e      	mov	r6, r7
	udphdr       = (struct udp_hdr *)q->payload;
    888e:	6875      	ldr	r5, [r6, #4]
	udphdr->src  = htons(pcb->local_port);
    8890:	8a60      	ldrh	r0, [r4, #18]
    8892:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8940 <udp_sendto_if+0xfc>
    8896:	47d8      	blx	fp
    8898:	8028      	strh	r0, [r5, #0]
	udphdr->dest = htons(dst_port);
    889a:	4650      	mov	r0, sl
    889c:	47d8      	blx	fp
    889e:	8068      	strh	r0, [r5, #2]
	udphdr->chksum = 0x0000;
    88a0:	2300      	movs	r3, #0
    88a2:	71ab      	strb	r3, [r5, #6]
    88a4:	71eb      	strb	r3, [r5, #7]
	if (ip_addr_isany(&pcb->local_ip)) {
    88a6:	46a2      	mov	sl, r4
    88a8:	b10c      	cbz	r4, 88ae <udp_sendto_if+0x6a>
    88aa:	6823      	ldr	r3, [r4, #0]
    88ac:	b9fb      	cbnz	r3, 88ee <udp_sendto_if+0xaa>
		src_ip = &(netif->ip_addr);
    88ae:	f108 0a04 	add.w	sl, r8, #4
		udphdr->len = htons(q->tot_len);
    88b2:	8930      	ldrh	r0, [r6, #8]
    88b4:	4b22      	ldr	r3, [pc, #136]	; (8940 <udp_sendto_if+0xfc>)
    88b6:	4798      	blx	r3
    88b8:	80a8      	strh	r0, [r5, #4]
		if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
    88ba:	7c23      	ldrb	r3, [r4, #16]
    88bc:	f013 0f01 	tst.w	r3, #1
    88c0:	d021      	beq.n	8906 <udp_sendto_if+0xc2>
		err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
    88c2:	7aa3      	ldrb	r3, [r4, #10]
    88c4:	7a62      	ldrb	r2, [r4, #9]
    88c6:	f8cd 8008 	str.w	r8, [sp, #8]
    88ca:	2111      	movs	r1, #17
    88cc:	9101      	str	r1, [sp, #4]
    88ce:	9200      	str	r2, [sp, #0]
    88d0:	464a      	mov	r2, r9
    88d2:	4651      	mov	r1, sl
    88d4:	4630      	mov	r0, r6
    88d6:	4c1b      	ldr	r4, [pc, #108]	; (8944 <udp_sendto_if+0x100>)
    88d8:	47a0      	blx	r4
    88da:	4605      	mov	r5, r0
	if (q != p) {
    88dc:	42be      	cmp	r6, r7
    88de:	d002      	beq.n	88e6 <udp_sendto_if+0xa2>
		pbuf_free(q);
    88e0:	4630      	mov	r0, r6
    88e2:	4b19      	ldr	r3, [pc, #100]	; (8948 <udp_sendto_if+0x104>)
    88e4:	4798      	blx	r3
}
    88e6:	4628      	mov	r0, r5
    88e8:	b005      	add	sp, #20
    88ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
    88ee:	f8d8 2004 	ldr.w	r2, [r8, #4]
    88f2:	4293      	cmp	r3, r2
    88f4:	d0dd      	beq.n	88b2 <udp_sendto_if+0x6e>
			if (q != p) {
    88f6:	42be      	cmp	r6, r7
    88f8:	d017      	beq.n	892a <udp_sendto_if+0xe6>
				pbuf_free(q);
    88fa:	4630      	mov	r0, r6
    88fc:	4b12      	ldr	r3, [pc, #72]	; (8948 <udp_sendto_if+0x104>)
    88fe:	4798      	blx	r3
			return ERR_VAL;
    8900:	f06f 0505 	mvn.w	r5, #5
    8904:	e7ef      	b.n	88e6 <udp_sendto_if+0xa2>
				udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
    8906:	8933      	ldrh	r3, [r6, #8]
    8908:	9300      	str	r3, [sp, #0]
    890a:	2311      	movs	r3, #17
    890c:	464a      	mov	r2, r9
    890e:	4651      	mov	r1, sl
    8910:	4630      	mov	r0, r6
    8912:	f8df b038 	ldr.w	fp, [pc, #56]	; 894c <udp_sendto_if+0x108>
    8916:	47d8      	blx	fp
			if (udpchksum == 0x0000) {
    8918:	4603      	mov	r3, r0
    891a:	b908      	cbnz	r0, 8920 <udp_sendto_if+0xdc>
				udpchksum = 0xffff;
    891c:	f64f 73ff 	movw	r3, #65535	; 0xffff
			udphdr->chksum = udpchksum;
    8920:	80eb      	strh	r3, [r5, #6]
    8922:	e7ce      	b.n	88c2 <udp_sendto_if+0x7e>
			return ERR_MEM;
    8924:	f04f 35ff 	mov.w	r5, #4294967295
    8928:	e7dd      	b.n	88e6 <udp_sendto_if+0xa2>
			return ERR_VAL;
    892a:	f06f 0505 	mvn.w	r5, #5
    892e:	e7da      	b.n	88e6 <udp_sendto_if+0xa2>
    8930:	000087c1 	.word	0x000087c1
    8934:	00005427 	.word	0x00005427
    8938:	00005505 	.word	0x00005505
    893c:	000056cd 	.word	0x000056cd
    8940:	00003e91 	.word	0x00003e91
    8944:	000044b9 	.word	0x000044b9
    8948:	000054a1 	.word	0x000054a1
    894c:	000041b1 	.word	0x000041b1

00008950 <udp_sendto>:
{
    8950:	b5f0      	push	{r4, r5, r6, r7, lr}
    8952:	b083      	sub	sp, #12
    8954:	4605      	mov	r5, r0
    8956:	460e      	mov	r6, r1
    8958:	4614      	mov	r4, r2
    895a:	461f      	mov	r7, r3
	netif = ip_route(dst_ip);
    895c:	4610      	mov	r0, r2
    895e:	4b07      	ldr	r3, [pc, #28]	; (897c <udp_sendto+0x2c>)
    8960:	4798      	blx	r3
	if (netif == NULL) {
    8962:	b140      	cbz	r0, 8976 <udp_sendto+0x26>
	return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
    8964:	9000      	str	r0, [sp, #0]
    8966:	463b      	mov	r3, r7
    8968:	4622      	mov	r2, r4
    896a:	4631      	mov	r1, r6
    896c:	4628      	mov	r0, r5
    896e:	4c04      	ldr	r4, [pc, #16]	; (8980 <udp_sendto+0x30>)
    8970:	47a0      	blx	r4
}
    8972:	b003      	add	sp, #12
    8974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_RTE;
    8976:	f06f 0003 	mvn.w	r0, #3
    897a:	e7fa      	b.n	8972 <udp_sendto+0x22>
    897c:	000042a1 	.word	0x000042a1
    8980:	00008845 	.word	0x00008845

00008984 <udp_send>:
{
    8984:	b510      	push	{r4, lr}
    8986:	4602      	mov	r2, r0
	return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
    8988:	8a83      	ldrh	r3, [r0, #20]
    898a:	3204      	adds	r2, #4
    898c:	4c01      	ldr	r4, [pc, #4]	; (8994 <udp_send+0x10>)
    898e:	47a0      	blx	r4
}
    8990:	bd10      	pop	{r4, pc}
    8992:	bf00      	nop
    8994:	00008951 	.word	0x00008951

00008998 <udp_recv>:
 * @param recv_arg additional argument to pass to the callback function
 */
void udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
	/* remember recv() callback and user data */
	pcb->recv     = recv;
    8998:	6181      	str	r1, [r0, #24]
	pcb->recv_arg = recv_arg;
    899a:	61c2      	str	r2, [r0, #28]
    899c:	4770      	bx	lr
	...

000089a0 <udp_remove>:
 * UDP PCB's and the data structure is freed from memory.
 *
 * @see udp_new()
 */
void udp_remove(struct udp_pcb *pcb)
{
    89a0:	b508      	push	{r3, lr}
    89a2:	4601      	mov	r1, r0
	struct udp_pcb *pcb2;

	snmp_delete_udpidx_tree(pcb);
	/* pcb to be removed is first in list? */
	if (udp_pcbs == pcb) {
    89a4:	4b0a      	ldr	r3, [pc, #40]	; (89d0 <udp_remove+0x30>)
    89a6:	681b      	ldr	r3, [r3, #0]
    89a8:	4283      	cmp	r3, r0
    89aa:	d107      	bne.n	89bc <udp_remove+0x1c>
		/* make list start at 2nd pcb */
		udp_pcbs = udp_pcbs->next;
    89ac:	68da      	ldr	r2, [r3, #12]
    89ae:	4b08      	ldr	r3, [pc, #32]	; (89d0 <udp_remove+0x30>)
    89b0:	601a      	str	r2, [r3, #0]
				/* remove pcb from list */
				pcb2->next = pcb->next;
			}
		}
	}
	memp_free(MEMP_UDP_PCB, pcb);
    89b2:	2000      	movs	r0, #0
    89b4:	4b07      	ldr	r3, [pc, #28]	; (89d4 <udp_remove+0x34>)
    89b6:	4798      	blx	r3
    89b8:	bd08      	pop	{r3, pc}
		for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
    89ba:	68db      	ldr	r3, [r3, #12]
    89bc:	2b00      	cmp	r3, #0
    89be:	d0f8      	beq.n	89b2 <udp_remove+0x12>
			if (pcb2->next != NULL && pcb2->next == pcb) {
    89c0:	68da      	ldr	r2, [r3, #12]
    89c2:	2a00      	cmp	r2, #0
    89c4:	d0f9      	beq.n	89ba <udp_remove+0x1a>
    89c6:	4291      	cmp	r1, r2
    89c8:	d1f7      	bne.n	89ba <udp_remove+0x1a>
				pcb2->next = pcb->next;
    89ca:	68ca      	ldr	r2, [r1, #12]
    89cc:	60da      	str	r2, [r3, #12]
    89ce:	e7f4      	b.n	89ba <udp_remove+0x1a>
    89d0:	200161f0 	.word	0x200161f0
    89d4:	000051fd 	.word	0x000051fd

000089d8 <udp_new>:
 * could not be allocated.
 *
 * @see udp_remove()
 */
struct udp_pcb *udp_new(void)
{
    89d8:	b510      	push	{r4, lr}
	struct udp_pcb *pcb;
	pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
    89da:	2000      	movs	r0, #0
    89dc:	4b05      	ldr	r3, [pc, #20]	; (89f4 <udp_new+0x1c>)
    89de:	4798      	blx	r3
	/* could allocate UDP PCB? */
	if (pcb != NULL) {
    89e0:	4604      	mov	r4, r0
    89e2:	b128      	cbz	r0, 89f0 <udp_new+0x18>
		/* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
		 * which means checksum is generated over the whole datagram per default
		 * (recommended as default by RFC 3828). */
		/* initialize PCB to all zeroes */
		memset(pcb, 0, sizeof(struct udp_pcb));
    89e4:	2220      	movs	r2, #32
    89e6:	2100      	movs	r1, #0
    89e8:	4b03      	ldr	r3, [pc, #12]	; (89f8 <udp_new+0x20>)
    89ea:	4798      	blx	r3
		pcb->ttl = UDP_TTL;
    89ec:	23ff      	movs	r3, #255	; 0xff
    89ee:	72a3      	strb	r3, [r4, #10]
	}
	return pcb;
}
    89f0:	4620      	mov	r0, r4
    89f2:	bd10      	pop	{r4, pc}
    89f4:	000051d5 	.word	0x000051d5
    89f8:	0000c119 	.word	0x0000c119

000089fc <etharp_free_entry>:

#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void etharp_free_entry(int i)
{
    89fc:	b510      	push	{r4, lr}
    89fe:	4604      	mov	r4, r0
	/* remove from SNMP ARP index tree */
	snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
	/* and empty packet queue */
	if (arp_table[i].q != NULL) {
    8a00:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    8a04:	0093      	lsls	r3, r2, #2
    8a06:	4a09      	ldr	r2, [pc, #36]	; (8a2c <etharp_free_entry+0x30>)
    8a08:	58d0      	ldr	r0, [r2, r3]
    8a0a:	b138      	cbz	r0, 8a1c <etharp_free_entry+0x20>
		/* remove all queued packets */
		LWIP_DEBUGF(
		    ETHARP_DEBUG,
		    ("etharp_free_entry: freeing entry %" U16_F ", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
		free_etharp_q(arp_table[i].q);
    8a0c:	4b08      	ldr	r3, [pc, #32]	; (8a30 <etharp_free_entry+0x34>)
    8a0e:	4798      	blx	r3
		arp_table[i].q = NULL;
    8a10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8a14:	0093      	lsls	r3, r2, #2
    8a16:	2100      	movs	r1, #0
    8a18:	4a04      	ldr	r2, [pc, #16]	; (8a2c <etharp_free_entry+0x30>)
    8a1a:	50d1      	str	r1, [r2, r3]
	}
	/* recycle entry for re-use */
	arp_table[i].state = ETHARP_STATE_EMPTY;
    8a1c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8a20:	00a2      	lsls	r2, r4, #2
    8a22:	4b02      	ldr	r3, [pc, #8]	; (8a2c <etharp_free_entry+0x30>)
    8a24:	4413      	add	r3, r2
    8a26:	2200      	movs	r2, #0
    8a28:	749a      	strb	r2, [r3, #18]
    8a2a:	bd10      	pop	{r4, pc}
    8a2c:	200080d8 	.word	0x200080d8
    8a30:	000054a1 	.word	0x000054a1

00008a34 <etharp_find_entry>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
    8a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s8_t empty = ARP_TABLE_SIZE;
	u8_t i = 0, age_pending = 0, age_stable = 0;
	/* oldest entry with packets on queue */
	s8_t old_queue = ARP_TABLE_SIZE;
	/* its age */
	u8_t age_queue = 0;
    8a38:	f04f 0e00 	mov.w	lr, #0
	s8_t old_queue = ARP_TABLE_SIZE;
    8a3c:	f04f 0c0a 	mov.w	ip, #10
	u8_t i = 0, age_pending = 0, age_stable = 0;
    8a40:	46f0      	mov	r8, lr
    8a42:	46f3      	mov	fp, lr
	 * 4) remember the oldest pending entry with queued packets (if any)
	 * 5) search for a matching IP entry, either pending or stable
	 *    until 5 matches, or all entries are searched for.
	 */

	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8a44:	4673      	mov	r3, lr
	s8_t empty = ARP_TABLE_SIZE;
    8a46:	4667      	mov	r7, ip
	s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
    8a48:	46e1      	mov	r9, ip
    8a4a:	46e2      	mov	sl, ip
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8a4c:	e003      	b.n	8a56 <etharp_find_entry+0x22>
		u8_t state = arp_table[i].state;
		/* no empty entry found yet and now we do find one? */
		if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
    8a4e:	b96c      	cbnz	r4, 8a6c <etharp_find_entry+0x38>
			LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %" U16_F "\n", (u16_t)i));
			/* remember first empty entry */
			empty = i;
    8a50:	b25f      	sxtb	r7, r3
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8a52:	3301      	adds	r3, #1
    8a54:	b2db      	uxtb	r3, r3
    8a56:	2b09      	cmp	r3, #9
    8a58:	d845      	bhi.n	8ae6 <etharp_find_entry+0xb2>
		u8_t state = arp_table[i].state;
    8a5a:	461a      	mov	r2, r3
    8a5c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    8a60:	00a5      	lsls	r5, r4, #2
    8a62:	4c40      	ldr	r4, [pc, #256]	; (8b64 <etharp_find_entry+0x130>)
    8a64:	442c      	add	r4, r5
    8a66:	7ca4      	ldrb	r4, [r4, #18]
		if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
    8a68:	2f0a      	cmp	r7, #10
    8a6a:	d0f0      	beq.n	8a4e <etharp_find_entry+0x1a>
		} else if (state != ETHARP_STATE_EMPTY) {
    8a6c:	2c00      	cmp	r4, #0
    8a6e:	d0f0      	beq.n	8a52 <etharp_find_entry+0x1e>
			LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
			            state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
			/* if given, does IP address match IP address in ARP entry? */
			if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
    8a70:	b140      	cbz	r0, 8a84 <etharp_find_entry+0x50>
    8a72:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    8a76:	00ae      	lsls	r6, r5, #2
    8a78:	4d3a      	ldr	r5, [pc, #232]	; (8b64 <etharp_find_entry+0x130>)
    8a7a:	4435      	add	r5, r6
    8a7c:	686d      	ldr	r5, [r5, #4]
    8a7e:	6806      	ldr	r6, [r0, #0]
    8a80:	42ae      	cmp	r6, r5
    8a82:	d00f      	beq.n	8aa4 <etharp_find_entry+0x70>
				            ("etharp_find_entry: found matching entry %" U16_F "\n", (u16_t)i));
				/* found exact IP address match, simply bail out */
				return i;
			}
			/* pending entry? */
			if (state == ETHARP_STATE_PENDING) {
    8a84:	2c01      	cmp	r4, #1
    8a86:	d010      	beq.n	8aaa <etharp_find_entry+0x76>
						old_pending = i;
						age_pending = arp_table[i].ctime;
					}
				}
				/* stable entry? */
			} else if (state >= ETHARP_STATE_STABLE) {
    8a88:	2c01      	cmp	r4, #1
    8a8a:	d9e2      	bls.n	8a52 <etharp_find_entry+0x1e>
				/* don't record old_stable for static entries since they never expire */
				if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
				{
					/* remember entry with oldest stable entry in oldest, its age in maxtime */
					if (arp_table[i].ctime >= age_stable) {
    8a8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8a90:	0094      	lsls	r4, r2, #2
    8a92:	4a34      	ldr	r2, [pc, #208]	; (8b64 <etharp_find_entry+0x130>)
    8a94:	4422      	add	r2, r4
    8a96:	7cd2      	ldrb	r2, [r2, #19]
    8a98:	4590      	cmp	r8, r2
    8a9a:	d8da      	bhi.n	8a52 <etharp_find_entry+0x1e>
						old_stable = i;
    8a9c:	fa4f f983 	sxtb.w	r9, r3
						age_stable = arp_table[i].ctime;
    8aa0:	4690      	mov	r8, r2
    8aa2:	e7d6      	b.n	8a52 <etharp_find_entry+0x1e>
				return i;
    8aa4:	b258      	sxtb	r0, r3
    8aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (arp_table[i].q != NULL) {
    8aaa:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    8aae:	00ac      	lsls	r4, r5, #2
    8ab0:	4d2c      	ldr	r5, [pc, #176]	; (8b64 <etharp_find_entry+0x130>)
    8ab2:	592c      	ldr	r4, [r5, r4]
    8ab4:	b15c      	cbz	r4, 8ace <etharp_find_entry+0x9a>
					if (arp_table[i].ctime >= age_queue) {
    8ab6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8aba:	0094      	lsls	r4, r2, #2
    8abc:	462a      	mov	r2, r5
    8abe:	4422      	add	r2, r4
    8ac0:	7cd2      	ldrb	r2, [r2, #19]
    8ac2:	4596      	cmp	lr, r2
    8ac4:	d8c5      	bhi.n	8a52 <etharp_find_entry+0x1e>
						old_queue = i;
    8ac6:	fa4f fc83 	sxtb.w	ip, r3
						age_queue = arp_table[i].ctime;
    8aca:	4696      	mov	lr, r2
    8acc:	e7c1      	b.n	8a52 <etharp_find_entry+0x1e>
					if (arp_table[i].ctime >= age_pending) {
    8ace:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8ad2:	0094      	lsls	r4, r2, #2
    8ad4:	4a23      	ldr	r2, [pc, #140]	; (8b64 <etharp_find_entry+0x130>)
    8ad6:	4422      	add	r2, r4
    8ad8:	7cd2      	ldrb	r2, [r2, #19]
    8ada:	4593      	cmp	fp, r2
    8adc:	d8b9      	bhi.n	8a52 <etharp_find_entry+0x1e>
						old_pending = i;
    8ade:	fa4f fa83 	sxtb.w	sl, r3
						age_pending = arp_table[i].ctime;
    8ae2:	4693      	mov	fp, r2
    8ae4:	e7b5      	b.n	8a52 <etharp_find_entry+0x1e>
		}
	}
	/* { we have no match } => try to create a new entry */

	/* don't create new entry, only search? */
	if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
    8ae6:	f011 0f02 	tst.w	r1, #2
    8aea:	d133      	bne.n	8b54 <etharp_find_entry+0x120>
    8aec:	2f0a      	cmp	r7, #10
    8aee:	d015      	beq.n	8b1c <etharp_find_entry+0xe8>
    8af0:	4604      	mov	r4, r0
	 *
	 * { ETHARP_FLAG_TRY_HARD is set at this point }
	 */

	/* 1) empty entry available? */
	if (empty < ARP_TABLE_SIZE) {
    8af2:	2f09      	cmp	r7, #9
    8af4:	dc19      	bgt.n	8b2a <etharp_find_entry+0xf6>
		i = empty;
    8af6:	b2ff      	uxtb	r7, r7

	LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
	LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY", arp_table[i].state == ETHARP_STATE_EMPTY);

	/* IP address given? */
	if (ipaddr != NULL) {
    8af8:	b134      	cbz	r4, 8b08 <etharp_find_entry+0xd4>
		/* set IP address */
		ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
    8afa:	6821      	ldr	r1, [r4, #0]
    8afc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8b00:	009a      	lsls	r2, r3, #2
    8b02:	4b18      	ldr	r3, [pc, #96]	; (8b64 <etharp_find_entry+0x130>)
    8b04:	4413      	add	r3, r2
    8b06:	6059      	str	r1, [r3, #4]
	}
	arp_table[i].ctime = 0;
    8b08:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8b0c:	009a      	lsls	r2, r3, #2
    8b0e:	4b15      	ldr	r3, [pc, #84]	; (8b64 <etharp_find_entry+0x130>)
    8b10:	4413      	add	r3, r2
    8b12:	2200      	movs	r2, #0
    8b14:	74da      	strb	r2, [r3, #19]
	return (err_t)i;
    8b16:	b278      	sxtb	r0, r7
    8b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    8b1c:	f011 0f01 	tst.w	r1, #1
    8b20:	d1e6      	bne.n	8af0 <etharp_find_entry+0xbc>
		return (s8_t)ERR_MEM;
    8b22:	f04f 30ff 	mov.w	r0, #4294967295
    8b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (old_stable < ARP_TABLE_SIZE) {
    8b2a:	f1b9 0f09 	cmp.w	r9, #9
    8b2e:	dc05      	bgt.n	8b3c <etharp_find_entry+0x108>
			i = old_stable;
    8b30:	fa5f f789 	uxtb.w	r7, r9
		etharp_free_entry(i);
    8b34:	4638      	mov	r0, r7
    8b36:	4b0c      	ldr	r3, [pc, #48]	; (8b68 <etharp_find_entry+0x134>)
    8b38:	4798      	blx	r3
    8b3a:	e7dd      	b.n	8af8 <etharp_find_entry+0xc4>
		} else if (old_pending < ARP_TABLE_SIZE) {
    8b3c:	f1ba 0f09 	cmp.w	sl, #9
    8b40:	dc02      	bgt.n	8b48 <etharp_find_entry+0x114>
			i = old_pending;
    8b42:	fa5f f78a 	uxtb.w	r7, sl
    8b46:	e7f5      	b.n	8b34 <etharp_find_entry+0x100>
		} else if (old_queue < ARP_TABLE_SIZE) {
    8b48:	f1bc 0f09 	cmp.w	ip, #9
    8b4c:	dc06      	bgt.n	8b5c <etharp_find_entry+0x128>
			i = old_queue;
    8b4e:	fa5f f78c 	uxtb.w	r7, ip
    8b52:	e7ef      	b.n	8b34 <etharp_find_entry+0x100>
		return (s8_t)ERR_MEM;
    8b54:	f04f 30ff 	mov.w	r0, #4294967295
    8b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return (s8_t)ERR_MEM;
    8b5c:	f04f 30ff 	mov.w	r0, #4294967295
}
    8b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b64:	200080d8 	.word	0x200080d8
    8b68:	000089fd 	.word	0x000089fd

00008b6c <etharp_send_ip>:
 * @params src the source MAC address to be copied into the ethernet header
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
    8b6c:	b538      	push	{r3, r4, r5, lr}
	struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
    8b6e:	684c      	ldr	r4, [r1, #4]

	LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
	            (netif->hwaddr_len == ETHARP_HWADDR_LEN));
	ETHADDR32_COPY(&ethhdr->dest, dst);
    8b70:	681d      	ldr	r5, [r3, #0]
    8b72:	f8c4 5002 	str.w	r5, [r4, #2]
    8b76:	889b      	ldrh	r3, [r3, #4]
    8b78:	80e3      	strh	r3, [r4, #6]
	ETHADDR16_COPY(&ethhdr->src, src);
    8b7a:	6813      	ldr	r3, [r2, #0]
    8b7c:	60a3      	str	r3, [r4, #8]
    8b7e:	8893      	ldrh	r3, [r2, #4]
    8b80:	81a3      	strh	r3, [r4, #12]
	ethhdr->type = PP_HTONS(ETHTYPE_IP);
    8b82:	2308      	movs	r3, #8
    8b84:	73a3      	strb	r3, [r4, #14]
    8b86:	2300      	movs	r3, #0
    8b88:	73e3      	strb	r3, [r4, #15]
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
	/* send the packet */
	return netif->linkoutput(netif, p);
    8b8a:	6983      	ldr	r3, [r0, #24]
    8b8c:	4798      	blx	r3
}
    8b8e:	bd38      	pop	{r3, r4, r5, pc}

00008b90 <etharp_update_arp_entry>:
	             ethaddr->addr[2],
	             ethaddr->addr[3],
	             ethaddr->addr[4],
	             ethaddr->addr[5]));
	/* non-unicast address? */
	if (ip_addr_isany(ipaddr) || ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr)) {
    8b90:	2900      	cmp	r1, #0
    8b92:	d03c      	beq.n	8c0e <etharp_update_arp_entry+0x7e>
{
    8b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b96:	4604      	mov	r4, r0
    8b98:	460e      	mov	r6, r1
	if (ip_addr_isany(ipaddr) || ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr)) {
    8b9a:	6808      	ldr	r0, [r1, #0]
    8b9c:	2800      	cmp	r0, #0
    8b9e:	d039      	beq.n	8c14 <etharp_update_arp_entry+0x84>
    8ba0:	461f      	mov	r7, r3
    8ba2:	4615      	mov	r5, r2
    8ba4:	4621      	mov	r1, r4
    8ba6:	4b21      	ldr	r3, [pc, #132]	; (8c2c <etharp_update_arp_entry+0x9c>)
    8ba8:	4798      	blx	r3
    8baa:	2800      	cmp	r0, #0
    8bac:	d135      	bne.n	8c1a <etharp_update_arp_entry+0x8a>
    8bae:	6833      	ldr	r3, [r6, #0]
    8bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8bb4:	2be0      	cmp	r3, #224	; 0xe0
    8bb6:	d033      	beq.n	8c20 <etharp_update_arp_entry+0x90>
		LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
		            ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
		return ERR_ARG;
	}
	/* find or create ARP entry */
	i = etharp_find_entry(ipaddr, flags);
    8bb8:	4639      	mov	r1, r7
    8bba:	4630      	mov	r0, r6
    8bbc:	4b1c      	ldr	r3, [pc, #112]	; (8c30 <etharp_update_arp_entry+0xa0>)
    8bbe:	4798      	blx	r3
	/* bail out if no entry could be found */
	if (i < 0) {
    8bc0:	2800      	cmp	r0, #0
    8bc2:	db31      	blt.n	8c28 <etharp_update_arp_entry+0x98>
		arp_table[i].state = ETHARP_STATE_STATIC;
	} else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
	{
		/* mark it stable */
		arp_table[i].state = ETHARP_STATE_STABLE;
    8bc4:	491b      	ldr	r1, [pc, #108]	; (8c34 <etharp_update_arp_entry+0xa4>)
    8bc6:	2314      	movs	r3, #20
    8bc8:	fb03 f300 	mul.w	r3, r3, r0
    8bcc:	18ce      	adds	r6, r1, r3
    8bce:	2202      	movs	r2, #2
    8bd0:	74b2      	strb	r2, [r6, #18]
	}

	/* record network interface */
	arp_table[i].netif = netif;
    8bd2:	60b4      	str	r4, [r6, #8]
	snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
	            ("etharp_update_arp_entry: updating stable entry %" S16_F "\n", (s16_t)i));
	/* update address */
	ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
    8bd4:	f103 0208 	add.w	r2, r3, #8
    8bd8:	440a      	add	r2, r1
    8bda:	682f      	ldr	r7, [r5, #0]
    8bdc:	6057      	str	r7, [r2, #4]
    8bde:	88af      	ldrh	r7, [r5, #4]
    8be0:	8117      	strh	r7, [r2, #8]
	/* reset time stamp */
	arp_table[i].ctime = 0;
    8be2:	2200      	movs	r2, #0
    8be4:	74f2      	strb	r2, [r6, #19]
		/* get the packet pointer */
		p = q->p;
		/* now queue entry can be freed */
		memp_free(MEMP_ARP_QUEUE, q);
#else  /* ARP_QUEUEING */
	if (arp_table[i].q != NULL) {
    8be6:	58cf      	ldr	r7, [r1, r3]
    8be8:	b1ef      	cbz	r7, 8c26 <etharp_update_arp_entry+0x96>
		struct pbuf *p = arp_table[i].q;
		arp_table[i].q = NULL;
    8bea:	2314      	movs	r3, #20
    8bec:	fb03 f000 	mul.w	r0, r3, r0
    8bf0:	4616      	mov	r6, r2
    8bf2:	460b      	mov	r3, r1
    8bf4:	501a      	str	r2, [r3, r0]
#endif /* ARP_QUEUEING */
		/* send the queued IP packet */
		etharp_send_ip(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr);
    8bf6:	462b      	mov	r3, r5
    8bf8:	f104 0227 	add.w	r2, r4, #39	; 0x27
    8bfc:	4639      	mov	r1, r7
    8bfe:	4620      	mov	r0, r4
    8c00:	4c0d      	ldr	r4, [pc, #52]	; (8c38 <etharp_update_arp_entry+0xa8>)
    8c02:	47a0      	blx	r4
		/* free the queued IP packet */
		pbuf_free(p);
    8c04:	4638      	mov	r0, r7
    8c06:	4b0d      	ldr	r3, [pc, #52]	; (8c3c <etharp_update_arp_entry+0xac>)
    8c08:	4798      	blx	r3
	}
	return ERR_OK;
    8c0a:	4630      	mov	r0, r6
    8c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_ARG;
    8c0e:	f06f 000d 	mvn.w	r0, #13
    8c12:	4770      	bx	lr
    8c14:	f06f 000d 	mvn.w	r0, #13
    8c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c1a:	f06f 000d 	mvn.w	r0, #13
    8c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c20:	f06f 000d 	mvn.w	r0, #13
    8c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return ERR_OK;
    8c26:	2000      	movs	r0, #0
}
    8c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c2a:	bf00      	nop
    8c2c:	000045ed 	.word	0x000045ed
    8c30:	00008a35 	.word	0x00008a35
    8c34:	200080d8 	.word	0x200080d8
    8c38:	00008b6d 	.word	0x00008b6d
    8c3c:	000054a1 	.word	0x000054a1

00008c40 <etharp_raw>:
#endif /* LWIP_AUTOIP */
    err_t
    etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr, const struct eth_addr *ethdst_addr,
               const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr, const struct eth_addr *hwdst_addr,
               const ip_addr_t *ipdst_addr, const u16_t opcode)
{
    8c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c44:	4606      	mov	r6, r0
    8c46:	460f      	mov	r7, r1
    8c48:	4690      	mov	r8, r2
    8c4a:	469a      	mov	sl, r3
    8c4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
#endif /* LWIP_AUTOIP */

	LWIP_ASSERT("netif != NULL", netif != NULL);

	/* allocate a pbuf for the outgoing ARP request packet */
	p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
    8c50:	2200      	movs	r2, #0
    8c52:	212c      	movs	r1, #44	; 0x2c
    8c54:	2003      	movs	r0, #3
    8c56:	4b23      	ldr	r3, [pc, #140]	; (8ce4 <etharp_raw+0xa4>)
    8c58:	4798      	blx	r3
	/* could allocate a pbuf for an ARP request? */
	if (p == NULL) {
    8c5a:	2800      	cmp	r0, #0
    8c5c:	d03e      	beq.n	8cdc <etharp_raw+0x9c>
    8c5e:	4605      	mov	r5, r0
		ETHARP_STATS_INC(etharp.memerr);
		return ERR_MEM;
	}
	LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr", (p->len >= SIZEOF_ETHARP_PACKET));

	ethhdr = (struct eth_hdr *)p->payload;
    8c60:	6844      	ldr	r4, [r0, #4]
	hdr    = (struct etharp_hdr *)((u8_t *)ethhdr + SIZEOF_ETH_HDR);
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
	hdr->opcode = htons(opcode);
    8c62:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    8c66:	4b20      	ldr	r3, [pc, #128]	; (8ce8 <etharp_raw+0xa8>)
    8c68:	4798      	blx	r3
    8c6a:	82e0      	strh	r0, [r4, #22]
	 * 'sender IP address' MUST be sent using link-layer broadcast instead of
	 * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
	ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t *)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
	/* Write the ARP MAC-Addresses */
	ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
    8c6c:	f8da 3000 	ldr.w	r3, [sl]
    8c70:	61a3      	str	r3, [r4, #24]
    8c72:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    8c76:	83a3      	strh	r3, [r4, #28]
	ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
    8c78:	f8d9 3000 	ldr.w	r3, [r9]
    8c7c:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    8c80:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    8c84:	84e3      	strh	r3, [r4, #38]	; 0x26
	/* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
	ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
	ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
    8c86:	f8d8 3000 	ldr.w	r3, [r8]
    8c8a:	f8c4 3002 	str.w	r3, [r4, #2]
    8c8e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    8c92:	80e3      	strh	r3, [r4, #6]
#endif /* LWIP_AUTOIP */
	ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
    8c94:	683b      	ldr	r3, [r7, #0]
    8c96:	60a3      	str	r3, [r4, #8]
    8c98:	88bb      	ldrh	r3, [r7, #4]
    8c9a:	81a3      	strh	r3, [r4, #12]
	/* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
	 * structure packing. */
	IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
    8c9c:	9b08      	ldr	r3, [sp, #32]
    8c9e:	681b      	ldr	r3, [r3, #0]
    8ca0:	f8c4 301e 	str.w	r3, [r4, #30]
	IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
    8ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ca6:	681b      	ldr	r3, [r3, #0]
    8ca8:	62a3      	str	r3, [r4, #40]	; 0x28

	hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
    8caa:	2200      	movs	r2, #0
    8cac:	7422      	strb	r2, [r4, #16]
    8cae:	2301      	movs	r3, #1
    8cb0:	7463      	strb	r3, [r4, #17]
	hdr->proto  = PP_HTONS(ETHTYPE_IP);
    8cb2:	2308      	movs	r3, #8
    8cb4:	74a3      	strb	r3, [r4, #18]
    8cb6:	74e2      	strb	r2, [r4, #19]
	/* set hwlen and protolen */
	hdr->hwlen    = ETHARP_HWADDR_LEN;
    8cb8:	2206      	movs	r2, #6
    8cba:	7522      	strb	r2, [r4, #20]
	hdr->protolen = sizeof(ip_addr_t);
    8cbc:	2204      	movs	r2, #4
    8cbe:	7562      	strb	r2, [r4, #21]

	ethhdr->type = PP_HTONS(ETHTYPE_ARP);
    8cc0:	73a3      	strb	r3, [r4, #14]
    8cc2:	2306      	movs	r3, #6
    8cc4:	73e3      	strb	r3, [r4, #15]
	/* send ARP query */
	result = netif->linkoutput(netif, p);
    8cc6:	69b3      	ldr	r3, [r6, #24]
    8cc8:	4629      	mov	r1, r5
    8cca:	4630      	mov	r0, r6
    8ccc:	4798      	blx	r3
    8cce:	4604      	mov	r4, r0
	ETHARP_STATS_INC(etharp.xmit);
	/* free ARP query packet */
	pbuf_free(p);
    8cd0:	4628      	mov	r0, r5
    8cd2:	4b06      	ldr	r3, [pc, #24]	; (8cec <etharp_raw+0xac>)
    8cd4:	4798      	blx	r3
	p = NULL;
	/* could not allocate pbuf for ARP request */

	return result;
}
    8cd6:	4620      	mov	r0, r4
    8cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ERR_MEM;
    8cdc:	f04f 34ff 	mov.w	r4, #4294967295
    8ce0:	e7f9      	b.n	8cd6 <etharp_raw+0x96>
    8ce2:	bf00      	nop
    8ce4:	00005505 	.word	0x00005505
    8ce8:	00003e91 	.word	0x00003e91
    8cec:	000054a1 	.word	0x000054a1

00008cf0 <etharp_arp_input>:
	LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    8cf0:	b1c8      	cbz	r0, 8d26 <etharp_arp_input+0x36>
{
    8cf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cf6:	b082      	sub	sp, #8
    8cf8:	4606      	mov	r6, r0
    8cfa:	4615      	mov	r5, r2
    8cfc:	460f      	mov	r7, r1
	if (p->len < SIZEOF_ETHARP_PACKET) {
    8cfe:	8953      	ldrh	r3, [r2, #10]
    8d00:	2b2b      	cmp	r3, #43	; 0x2b
    8d02:	d911      	bls.n	8d28 <etharp_arp_input+0x38>
	ethhdr = (struct eth_hdr *)p->payload;
    8d04:	6854      	ldr	r4, [r2, #4]
	if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) || (hdr->hwlen != ETHARP_HWADDR_LEN)
    8d06:	8a23      	ldrh	r3, [r4, #16]
    8d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d0c:	d105      	bne.n	8d1a <etharp_arp_input+0x2a>
    8d0e:	7d23      	ldrb	r3, [r4, #20]
    8d10:	2b06      	cmp	r3, #6
    8d12:	d102      	bne.n	8d1a <etharp_arp_input+0x2a>
	    || (hdr->protolen != sizeof(ip_addr_t)) || (hdr->proto != PP_HTONS(ETHTYPE_IP))) {
    8d14:	7d63      	ldrb	r3, [r4, #21]
    8d16:	2b04      	cmp	r3, #4
    8d18:	d00a      	beq.n	8d30 <etharp_arp_input+0x40>
		pbuf_free(p);
    8d1a:	4628      	mov	r0, r5
    8d1c:	4b30      	ldr	r3, [pc, #192]	; (8de0 <etharp_arp_input+0xf0>)
    8d1e:	4798      	blx	r3
}
    8d20:	b002      	add	sp, #8
    8d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d26:	e7fe      	b.n	8d26 <etharp_arp_input+0x36>
		pbuf_free(p);
    8d28:	4610      	mov	r0, r2
    8d2a:	4b2d      	ldr	r3, [pc, #180]	; (8de0 <etharp_arp_input+0xf0>)
    8d2c:	4798      	blx	r3
		return;
    8d2e:	e7f7      	b.n	8d20 <etharp_arp_input+0x30>
	    || (hdr->protolen != sizeof(ip_addr_t)) || (hdr->proto != PP_HTONS(ETHTYPE_IP))) {
    8d30:	8a63      	ldrh	r3, [r4, #18]
    8d32:	2b08      	cmp	r3, #8
    8d34:	d1f1      	bne.n	8d1a <etharp_arp_input+0x2a>
	IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
    8d36:	f8d4 301e 	ldr.w	r3, [r4, #30]
    8d3a:	9301      	str	r3, [sp, #4]
	IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
    8d3c:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
	if (ip_addr_isany(&netif->ip_addr)) {
    8d40:	f110 0f04 	cmn.w	r0, #4
    8d44:	d044      	beq.n	8dd0 <etharp_arp_input+0xe0>
    8d46:	6843      	ldr	r3, [r0, #4]
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d044      	beq.n	8dd6 <etharp_arp_input+0xe6>
		for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
    8d4c:	4599      	cmp	r9, r3
    8d4e:	bf14      	ite	ne
    8d50:	f04f 0900 	movne.w	r9, #0
    8d54:	f04f 0901 	moveq.w	r9, #1
	etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
    8d58:	f104 0818 	add.w	r8, r4, #24
    8d5c:	f1b9 0f00 	cmp.w	r9, #0
    8d60:	d03c      	beq.n	8ddc <etharp_arp_input+0xec>
    8d62:	2301      	movs	r3, #1
    8d64:	4642      	mov	r2, r8
    8d66:	a901      	add	r1, sp, #4
    8d68:	4630      	mov	r0, r6
    8d6a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8de8 <etharp_arp_input+0xf8>
    8d6e:	47d0      	blx	sl
	switch (hdr->opcode) {
    8d70:	8ae3      	ldrh	r3, [r4, #22]
    8d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8d76:	d127      	bne.n	8dc8 <etharp_arp_input+0xd8>
		if (for_us) {
    8d78:	f1b9 0f00 	cmp.w	r9, #0
    8d7c:	d024      	beq.n	8dc8 <etharp_arp_input+0xd8>
			hdr->opcode = htons(ARP_REPLY);
    8d7e:	2002      	movs	r0, #2
    8d80:	4b18      	ldr	r3, [pc, #96]	; (8de4 <etharp_arp_input+0xf4>)
    8d82:	4798      	blx	r3
    8d84:	82e0      	strh	r0, [r4, #22]
			IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
    8d86:	f8d4 301e 	ldr.w	r3, [r4, #30]
    8d8a:	62a3      	str	r3, [r4, #40]	; 0x28
			IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
    8d8c:	6873      	ldr	r3, [r6, #4]
    8d8e:	f8c4 301e 	str.w	r3, [r4, #30]
			ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
    8d92:	f8d8 3000 	ldr.w	r3, [r8]
    8d96:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    8d9a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    8d9e:	84e3      	strh	r3, [r4, #38]	; 0x26
			ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
    8da0:	f8d8 3000 	ldr.w	r3, [r8]
    8da4:	f8c4 3002 	str.w	r3, [r4, #2]
    8da8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    8dac:	80e3      	strh	r3, [r4, #6]
			ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
    8dae:	683b      	ldr	r3, [r7, #0]
    8db0:	61a3      	str	r3, [r4, #24]
    8db2:	88bb      	ldrh	r3, [r7, #4]
    8db4:	f8a8 3004 	strh.w	r3, [r8, #4]
			ETHADDR16_COPY(&ethhdr->src, ethaddr);
    8db8:	683b      	ldr	r3, [r7, #0]
    8dba:	60a3      	str	r3, [r4, #8]
    8dbc:	88bb      	ldrh	r3, [r7, #4]
    8dbe:	81a3      	strh	r3, [r4, #12]
			netif->linkoutput(netif, p);
    8dc0:	69b3      	ldr	r3, [r6, #24]
    8dc2:	4629      	mov	r1, r5
    8dc4:	4630      	mov	r0, r6
    8dc6:	4798      	blx	r3
	pbuf_free(p);
    8dc8:	4628      	mov	r0, r5
    8dca:	4b05      	ldr	r3, [pc, #20]	; (8de0 <etharp_arp_input+0xf0>)
    8dcc:	4798      	blx	r3
    8dce:	e7a7      	b.n	8d20 <etharp_arp_input+0x30>
		for_us = 0;
    8dd0:	f04f 0900 	mov.w	r9, #0
    8dd4:	e7c0      	b.n	8d58 <etharp_arp_input+0x68>
    8dd6:	f04f 0900 	mov.w	r9, #0
    8dda:	e7bd      	b.n	8d58 <etharp_arp_input+0x68>
	etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
    8ddc:	2302      	movs	r3, #2
    8dde:	e7c1      	b.n	8d64 <etharp_arp_input+0x74>
    8de0:	000054a1 	.word	0x000054a1
    8de4:	00003e91 	.word	0x00003e91
    8de8:	00008b91 	.word	0x00008b91

00008dec <etharp_tmr>:
{
    8dec:	b510      	push	{r4, lr}
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8dee:	2400      	movs	r4, #0
    8df0:	e005      	b.n	8dfe <etharp_tmr+0x12>
			    || ((arp_table[i].state == ETHARP_STATE_PENDING) && (arp_table[i].ctime >= ARP_MAXPENDING))) {
    8df2:	2b01      	cmp	r3, #1
    8df4:	d91c      	bls.n	8e30 <etharp_tmr+0x44>
				etharp_free_entry(i);
    8df6:	4b14      	ldr	r3, [pc, #80]	; (8e48 <etharp_tmr+0x5c>)
    8df8:	4798      	blx	r3
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    8dfa:	3401      	adds	r4, #1
    8dfc:	b2e4      	uxtb	r4, r4
    8dfe:	2c09      	cmp	r4, #9
    8e00:	d820      	bhi.n	8e44 <etharp_tmr+0x58>
		u8_t state = arp_table[i].state;
    8e02:	4620      	mov	r0, r4
    8e04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8e08:	009a      	lsls	r2, r3, #2
    8e0a:	4b10      	ldr	r3, [pc, #64]	; (8e4c <etharp_tmr+0x60>)
    8e0c:	4413      	add	r3, r2
    8e0e:	7c9b      	ldrb	r3, [r3, #18]
		if (state != ETHARP_STATE_EMPTY
    8e10:	2b00      	cmp	r3, #0
    8e12:	d0f2      	beq.n	8dfa <etharp_tmr+0xe>
			arp_table[i].ctime++;
    8e14:	4611      	mov	r1, r2
    8e16:	4a0d      	ldr	r2, [pc, #52]	; (8e4c <etharp_tmr+0x60>)
    8e18:	440a      	add	r2, r1
    8e1a:	7cd3      	ldrb	r3, [r2, #19]
    8e1c:	3301      	adds	r3, #1
    8e1e:	b2db      	uxtb	r3, r3
    8e20:	74d3      	strb	r3, [r2, #19]
			if ((arp_table[i].ctime >= ARP_MAXAGE)
    8e22:	2bef      	cmp	r3, #239	; 0xef
    8e24:	d8e7      	bhi.n	8df6 <etharp_tmr+0xa>
			    || ((arp_table[i].state == ETHARP_STATE_PENDING) && (arp_table[i].ctime >= ARP_MAXPENDING))) {
    8e26:	4a09      	ldr	r2, [pc, #36]	; (8e4c <etharp_tmr+0x60>)
    8e28:	440a      	add	r2, r1
    8e2a:	7c92      	ldrb	r2, [r2, #18]
    8e2c:	2a01      	cmp	r2, #1
    8e2e:	d0e0      	beq.n	8df2 <etharp_tmr+0x6>
			} else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
    8e30:	2a03      	cmp	r2, #3
    8e32:	d1e2      	bne.n	8dfa <etharp_tmr+0xe>
				arp_table[i].state = ETHARP_STATE_STABLE;
    8e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    8e38:	0082      	lsls	r2, r0, #2
    8e3a:	4b04      	ldr	r3, [pc, #16]	; (8e4c <etharp_tmr+0x60>)
    8e3c:	4413      	add	r3, r2
    8e3e:	2202      	movs	r2, #2
    8e40:	749a      	strb	r2, [r3, #18]
    8e42:	e7da      	b.n	8dfa <etharp_tmr+0xe>
}
    8e44:	bd10      	pop	{r4, pc}
    8e46:	bf00      	nop
    8e48:	000089fd 	.word	0x000089fd
    8e4c:	200080d8 	.word	0x200080d8

00008e50 <etharp_request>:
 * @return ERR_OK if the request has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
    8e50:	b530      	push	{r4, r5, lr}
    8e52:	b085      	sub	sp, #20
    8e54:	4603      	mov	r3, r0
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
	return etharp_raw(netif,
	                  (struct eth_addr *)netif->hwaddr,
    8e56:	f100 0427 	add.w	r4, r0, #39	; 0x27
	                  &ethbroadcast,
	                  (struct eth_addr *)netif->hwaddr,
	                  &netif->ip_addr,
    8e5a:	3304      	adds	r3, #4
	return etharp_raw(netif,
    8e5c:	4a06      	ldr	r2, [pc, #24]	; (8e78 <etharp_request+0x28>)
    8e5e:	2501      	movs	r5, #1
    8e60:	9503      	str	r5, [sp, #12]
    8e62:	9102      	str	r1, [sp, #8]
    8e64:	f102 0108 	add.w	r1, r2, #8
    8e68:	9101      	str	r1, [sp, #4]
    8e6a:	9300      	str	r3, [sp, #0]
    8e6c:	4623      	mov	r3, r4
    8e6e:	4621      	mov	r1, r4
    8e70:	4c02      	ldr	r4, [pc, #8]	; (8e7c <etharp_request+0x2c>)
    8e72:	47a0      	blx	r4
	                  &ethzero,
	                  ipaddr,
	                  ARP_REQUEST);
}
    8e74:	b005      	add	sp, #20
    8e76:	bd30      	pop	{r4, r5, pc}
    8e78:	0000d4fc 	.word	0x0000d4fc
    8e7c:	00008c41 	.word	0x00008c41

00008e80 <etharp_output_to_arp_index>:
{
    8e80:	b570      	push	{r4, r5, r6, lr}
    8e82:	4605      	mov	r5, r0
    8e84:	460e      	mov	r6, r1
    8e86:	4614      	mov	r4, r2
	if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    8e88:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    8e8c:	009a      	lsls	r2, r3, #2
    8e8e:	4b15      	ldr	r3, [pc, #84]	; (8ee4 <etharp_output_to_arp_index+0x64>)
    8e90:	4413      	add	r3, r2
    8e92:	7c9b      	ldrb	r3, [r3, #18]
    8e94:	2b02      	cmp	r3, #2
    8e96:	d00d      	beq.n	8eb4 <etharp_output_to_arp_index+0x34>
	return etharp_send_ip(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr);
    8e98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8e9c:	00a3      	lsls	r3, r4, #2
    8e9e:	3308      	adds	r3, #8
    8ea0:	4a10      	ldr	r2, [pc, #64]	; (8ee4 <etharp_output_to_arp_index+0x64>)
    8ea2:	4413      	add	r3, r2
    8ea4:	3304      	adds	r3, #4
    8ea6:	f105 0227 	add.w	r2, r5, #39	; 0x27
    8eaa:	4631      	mov	r1, r6
    8eac:	4628      	mov	r0, r5
    8eae:	4c0e      	ldr	r4, [pc, #56]	; (8ee8 <etharp_output_to_arp_index+0x68>)
    8eb0:	47a0      	blx	r4
}
    8eb2:	bd70      	pop	{r4, r5, r6, pc}
	if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    8eb4:	4b0b      	ldr	r3, [pc, #44]	; (8ee4 <etharp_output_to_arp_index+0x64>)
    8eb6:	4413      	add	r3, r2
    8eb8:	7cdb      	ldrb	r3, [r3, #19]
    8eba:	2be3      	cmp	r3, #227	; 0xe3
    8ebc:	d9ec      	bls.n	8e98 <etharp_output_to_arp_index+0x18>
		if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
    8ebe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8ec2:	0093      	lsls	r3, r2, #2
    8ec4:	4907      	ldr	r1, [pc, #28]	; (8ee4 <etharp_output_to_arp_index+0x64>)
    8ec6:	4419      	add	r1, r3
    8ec8:	3104      	adds	r1, #4
    8eca:	4b08      	ldr	r3, [pc, #32]	; (8eec <etharp_output_to_arp_index+0x6c>)
    8ecc:	4798      	blx	r3
    8ece:	2800      	cmp	r0, #0
    8ed0:	d1e2      	bne.n	8e98 <etharp_output_to_arp_index+0x18>
			arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    8ed2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8ed6:	009a      	lsls	r2, r3, #2
    8ed8:	4b02      	ldr	r3, [pc, #8]	; (8ee4 <etharp_output_to_arp_index+0x64>)
    8eda:	4413      	add	r3, r2
    8edc:	2203      	movs	r2, #3
    8ede:	749a      	strb	r2, [r3, #18]
    8ee0:	e7da      	b.n	8e98 <etharp_output_to_arp_index+0x18>
    8ee2:	bf00      	nop
    8ee4:	200080d8 	.word	0x200080d8
    8ee8:	00008b6d 	.word	0x00008b6d
    8eec:	00008e51 	.word	0x00008e51

00008ef0 <etharp_query>:
{
    8ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ef4:	4606      	mov	r6, r0
    8ef6:	460d      	mov	r5, r1
    8ef8:	4617      	mov	r7, r2
	struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
    8efa:	f100 0827 	add.w	r8, r0, #39	; 0x27
	if (ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr) || ip_addr_isany(ipaddr)) {
    8efe:	4601      	mov	r1, r0
    8f00:	6828      	ldr	r0, [r5, #0]
    8f02:	4b48      	ldr	r3, [pc, #288]	; (9024 <etharp_query+0x134>)
    8f04:	4798      	blx	r3
    8f06:	2800      	cmp	r0, #0
    8f08:	d175      	bne.n	8ff6 <etharp_query+0x106>
    8f0a:	682b      	ldr	r3, [r5, #0]
    8f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    8f10:	2ae0      	cmp	r2, #224	; 0xe0
    8f12:	d074      	beq.n	8ffe <etharp_query+0x10e>
    8f14:	2d00      	cmp	r5, #0
    8f16:	d076      	beq.n	9006 <etharp_query+0x116>
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d078      	beq.n	900e <etharp_query+0x11e>
	i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
    8f1c:	2101      	movs	r1, #1
    8f1e:	4628      	mov	r0, r5
    8f20:	4b41      	ldr	r3, [pc, #260]	; (9028 <etharp_query+0x138>)
    8f22:	4798      	blx	r3
	if (i < 0) {
    8f24:	1e04      	subs	r4, r0, #0
    8f26:	db76      	blt.n	9016 <etharp_query+0x126>
	if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    8f28:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f2c:	009a      	lsls	r2, r3, #2
    8f2e:	4b3f      	ldr	r3, [pc, #252]	; (902c <etharp_query+0x13c>)
    8f30:	4413      	add	r3, r2
    8f32:	7c9b      	ldrb	r3, [r3, #18]
    8f34:	b91b      	cbnz	r3, 8f3e <etharp_query+0x4e>
		arp_table[i].state = ETHARP_STATE_PENDING;
    8f36:	4b3d      	ldr	r3, [pc, #244]	; (902c <etharp_query+0x13c>)
    8f38:	4413      	add	r3, r2
    8f3a:	2201      	movs	r2, #1
    8f3c:	749a      	strb	r2, [r3, #18]
	if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    8f3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f42:	009a      	lsls	r2, r3, #2
    8f44:	4b39      	ldr	r3, [pc, #228]	; (902c <etharp_query+0x13c>)
    8f46:	4413      	add	r3, r2
    8f48:	7c9b      	ldrb	r3, [r3, #18]
    8f4a:	2b01      	cmp	r3, #1
    8f4c:	d00e      	beq.n	8f6c <etharp_query+0x7c>
    8f4e:	b16f      	cbz	r7, 8f6c <etharp_query+0x7c>
	err_t            result  = ERR_MEM;
    8f50:	f04f 30ff 	mov.w	r0, #4294967295
	if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    8f54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    8f58:	009a      	lsls	r2, r3, #2
    8f5a:	4b34      	ldr	r3, [pc, #208]	; (902c <etharp_query+0x13c>)
    8f5c:	4413      	add	r3, r2
    8f5e:	7c9b      	ldrb	r3, [r3, #18]
    8f60:	2b01      	cmp	r3, #1
    8f62:	d80b      	bhi.n	8f7c <etharp_query+0x8c>
	} else if (arp_table[i].state == ETHARP_STATE_PENDING) {
    8f64:	2b01      	cmp	r3, #1
    8f66:	d016      	beq.n	8f96 <etharp_query+0xa6>
}
    8f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = etharp_request(netif, ipaddr);
    8f6c:	4629      	mov	r1, r5
    8f6e:	4630      	mov	r0, r6
    8f70:	4b2f      	ldr	r3, [pc, #188]	; (9030 <etharp_query+0x140>)
    8f72:	4798      	blx	r3
		if (q == NULL) {
    8f74:	2f00      	cmp	r7, #0
    8f76:	d1ed      	bne.n	8f54 <etharp_query+0x64>
    8f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ETHARP_SET_HINT(netif, i);
    8f7c:	4b2b      	ldr	r3, [pc, #172]	; (902c <etharp_query+0x13c>)
    8f7e:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
		result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
    8f82:	3208      	adds	r2, #8
    8f84:	4413      	add	r3, r2
    8f86:	3304      	adds	r3, #4
    8f88:	4642      	mov	r2, r8
    8f8a:	4639      	mov	r1, r7
    8f8c:	4630      	mov	r0, r6
    8f8e:	4c29      	ldr	r4, [pc, #164]	; (9034 <etharp_query+0x144>)
    8f90:	47a0      	blx	r4
    8f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f96:	463b      	mov	r3, r7
		while (p) {
    8f98:	b123      	cbz	r3, 8fa4 <etharp_query+0xb4>
			if (p->type != PBUF_ROM) {
    8f9a:	7b1a      	ldrb	r2, [r3, #12]
    8f9c:	2a01      	cmp	r2, #1
    8f9e:	d113      	bne.n	8fc8 <etharp_query+0xd8>
			p = p->next;
    8fa0:	681b      	ldr	r3, [r3, #0]
    8fa2:	e7f9      	b.n	8f98 <etharp_query+0xa8>
		int          copy_needed = 0;
    8fa4:	2200      	movs	r2, #0
		if (copy_needed) {
    8fa6:	b18a      	cbz	r2, 8fcc <etharp_query+0xdc>
			p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
    8fa8:	2200      	movs	r2, #0
    8faa:	8919      	ldrh	r1, [r3, #8]
    8fac:	2003      	movs	r0, #3
    8fae:	4b22      	ldr	r3, [pc, #136]	; (9038 <etharp_query+0x148>)
    8fb0:	4798      	blx	r3
			if (p != NULL) {
    8fb2:	4605      	mov	r5, r0
    8fb4:	b170      	cbz	r0, 8fd4 <etharp_query+0xe4>
				if (pbuf_copy(p, q) != ERR_OK) {
    8fb6:	4639      	mov	r1, r7
    8fb8:	4b20      	ldr	r3, [pc, #128]	; (903c <etharp_query+0x14c>)
    8fba:	4798      	blx	r3
    8fbc:	b150      	cbz	r0, 8fd4 <etharp_query+0xe4>
					pbuf_free(p);
    8fbe:	4628      	mov	r0, r5
    8fc0:	4b1f      	ldr	r3, [pc, #124]	; (9040 <etharp_query+0x150>)
    8fc2:	4798      	blx	r3
					p = NULL;
    8fc4:	2500      	movs	r5, #0
    8fc6:	e005      	b.n	8fd4 <etharp_query+0xe4>
				copy_needed = 1;
    8fc8:	2201      	movs	r2, #1
    8fca:	e7ec      	b.n	8fa6 <etharp_query+0xb6>
			pbuf_ref(p);
    8fcc:	4638      	mov	r0, r7
    8fce:	4b1d      	ldr	r3, [pc, #116]	; (9044 <etharp_query+0x154>)
    8fd0:	4798      	blx	r3
			p = q;
    8fd2:	463d      	mov	r5, r7
		if (p != NULL) {
    8fd4:	b315      	cbz	r5, 901c <etharp_query+0x12c>
			if (arp_table[i].q != NULL) {
    8fd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    8fda:	0093      	lsls	r3, r2, #2
    8fdc:	4a13      	ldr	r2, [pc, #76]	; (902c <etharp_query+0x13c>)
    8fde:	58d0      	ldr	r0, [r2, r3]
    8fe0:	b108      	cbz	r0, 8fe6 <etharp_query+0xf6>
				pbuf_free(arp_table[i].q);
    8fe2:	4b17      	ldr	r3, [pc, #92]	; (9040 <etharp_query+0x150>)
    8fe4:	4798      	blx	r3
			arp_table[i].q = p;
    8fe6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    8fea:	00a3      	lsls	r3, r4, #2
    8fec:	4a0f      	ldr	r2, [pc, #60]	; (902c <etharp_query+0x13c>)
    8fee:	50d5      	str	r5, [r2, r3]
			result = ERR_OK;
    8ff0:	2000      	movs	r0, #0
    8ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_ARG;
    8ff6:	f06f 000d 	mvn.w	r0, #13
    8ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ffe:	f06f 000d 	mvn.w	r0, #13
    9002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9006:	f06f 000d 	mvn.w	r0, #13
    900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    900e:	f06f 000d 	mvn.w	r0, #13
    9012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (err_t)i;
    9016:	4620      	mov	r0, r4
    9018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			result = ERR_MEM;
    901c:	f04f 30ff 	mov.w	r0, #4294967295
    9020:	e7a2      	b.n	8f68 <etharp_query+0x78>
    9022:	bf00      	nop
    9024:	000045ed 	.word	0x000045ed
    9028:	00008a35 	.word	0x00008a35
    902c:	200080d8 	.word	0x200080d8
    9030:	00008e51 	.word	0x00008e51
    9034:	00008b6d 	.word	0x00008b6d
    9038:	00005505 	.word	0x00005505
    903c:	000056e5 	.word	0x000056e5
    9040:	000054a1 	.word	0x000054a1
    9044:	00005697 	.word	0x00005697

00009048 <etharp_output>:
{
    9048:	b570      	push	{r4, r5, r6, lr}
    904a:	b082      	sub	sp, #8
    904c:	4605      	mov	r5, r0
    904e:	460e      	mov	r6, r1
    9050:	4614      	mov	r4, r2
	if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    9052:	2110      	movs	r1, #16
    9054:	4630      	mov	r0, r6
    9056:	4b40      	ldr	r3, [pc, #256]	; (9158 <etharp_output+0x110>)
    9058:	4798      	blx	r3
    905a:	2800      	cmp	r0, #0
    905c:	d173      	bne.n	9146 <etharp_output+0xfe>
	if (ip_addr_isbroadcast(ipaddr, netif)) {
    905e:	4629      	mov	r1, r5
    9060:	6820      	ldr	r0, [r4, #0]
    9062:	4b3e      	ldr	r3, [pc, #248]	; (915c <etharp_output+0x114>)
    9064:	4798      	blx	r3
    9066:	2800      	cmp	r0, #0
    9068:	d164      	bne.n	9134 <etharp_output+0xec>
	} else if (ip_addr_ismulticast(ipaddr)) {
    906a:	6823      	ldr	r3, [r4, #0]
    906c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9070:	2ae0      	cmp	r2, #224	; 0xe0
    9072:	d021      	beq.n	90b8 <etharp_output+0x70>
		if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) && !ip_addr_islinklocal(ipaddr)) {
    9074:	686a      	ldr	r2, [r5, #4]
    9076:	68a9      	ldr	r1, [r5, #8]
    9078:	405a      	eors	r2, r3
    907a:	420a      	tst	r2, r1
    907c:	d00a      	beq.n	9094 <etharp_output+0x4c>
    907e:	b29b      	uxth	r3, r3
    9080:	f64f 62a9 	movw	r2, #65193	; 0xfea9
    9084:	4293      	cmp	r3, r2
    9086:	d005      	beq.n	9094 <etharp_output+0x4c>
				if (!ip_addr_isany(&netif->gw)) {
    9088:	f115 040c 	adds.w	r4, r5, #12
    908c:	d05e      	beq.n	914c <etharp_output+0x104>
    908e:	68eb      	ldr	r3, [r5, #12]
    9090:	2b00      	cmp	r3, #0
    9092:	d05e      	beq.n	9152 <etharp_output+0x10a>
				if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE)
    9094:	4b32      	ldr	r3, [pc, #200]	; (9160 <etharp_output+0x118>)
    9096:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    909a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    909e:	0081      	lsls	r1, r0, #2
    90a0:	440b      	add	r3, r1
    90a2:	7c9b      	ldrb	r3, [r3, #18]
    90a4:	2b01      	cmp	r3, #1
    90a6:	d93d      	bls.n	9124 <etharp_output+0xdc>
				    && (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
    90a8:	6820      	ldr	r0, [r4, #0]
    90aa:	4b2d      	ldr	r3, [pc, #180]	; (9160 <etharp_output+0x118>)
    90ac:	440b      	add	r3, r1
    90ae:	685b      	ldr	r3, [r3, #4]
    90b0:	4298      	cmp	r0, r3
    90b2:	d017      	beq.n	90e4 <etharp_output+0x9c>
    90b4:	2200      	movs	r2, #0
    90b6:	e01c      	b.n	90f2 <etharp_output+0xaa>
		mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
    90b8:	2301      	movs	r3, #1
    90ba:	f88d 3000 	strb.w	r3, [sp]
		mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
    90be:	2300      	movs	r3, #0
    90c0:	f88d 3001 	strb.w	r3, [sp, #1]
		mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
    90c4:	235e      	movs	r3, #94	; 0x5e
    90c6:	f88d 3002 	strb.w	r3, [sp, #2]
		mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
    90ca:	7863      	ldrb	r3, [r4, #1]
    90cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    90d0:	f88d 3003 	strb.w	r3, [sp, #3]
		mcastaddr.addr[4] = ip4_addr3(ipaddr);
    90d4:	78a3      	ldrb	r3, [r4, #2]
    90d6:	f88d 3004 	strb.w	r3, [sp, #4]
		mcastaddr.addr[5] = ip4_addr4(ipaddr);
    90da:	78e3      	ldrb	r3, [r4, #3]
    90dc:	f88d 3005 	strb.w	r3, [sp, #5]
		dest = &mcastaddr;
    90e0:	466b      	mov	r3, sp
    90e2:	e028      	b.n	9136 <etharp_output+0xee>
					return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
    90e4:	4631      	mov	r1, r6
    90e6:	4628      	mov	r0, r5
    90e8:	4b1e      	ldr	r3, [pc, #120]	; (9164 <etharp_output+0x11c>)
    90ea:	4798      	blx	r3
    90ec:	e029      	b.n	9142 <etharp_output+0xfa>
		for (i = 0; i < ARP_TABLE_SIZE; i++) {
    90ee:	3201      	adds	r2, #1
    90f0:	b252      	sxtb	r2, r2
    90f2:	2a09      	cmp	r2, #9
    90f4:	dc18      	bgt.n	9128 <etharp_output+0xe0>
			if ((arp_table[i].state >= ETHARP_STATE_STABLE) && (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
    90f6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    90fa:	0099      	lsls	r1, r3, #2
    90fc:	4b18      	ldr	r3, [pc, #96]	; (9160 <etharp_output+0x118>)
    90fe:	440b      	add	r3, r1
    9100:	7c9b      	ldrb	r3, [r3, #18]
    9102:	2b01      	cmp	r3, #1
    9104:	d9f3      	bls.n	90ee <etharp_output+0xa6>
    9106:	6820      	ldr	r0, [r4, #0]
    9108:	4b15      	ldr	r3, [pc, #84]	; (9160 <etharp_output+0x118>)
    910a:	440b      	add	r3, r1
    910c:	685b      	ldr	r3, [r3, #4]
    910e:	4298      	cmp	r0, r3
    9110:	d1ed      	bne.n	90ee <etharp_output+0xa6>
				ETHARP_SET_HINT(netif, i);
    9112:	b2d2      	uxtb	r2, r2
    9114:	4b12      	ldr	r3, [pc, #72]	; (9160 <etharp_output+0x118>)
    9116:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return etharp_output_to_arp_index(netif, q, i);
    911a:	4631      	mov	r1, r6
    911c:	4628      	mov	r0, r5
    911e:	4b11      	ldr	r3, [pc, #68]	; (9164 <etharp_output+0x11c>)
    9120:	4798      	blx	r3
    9122:	e00e      	b.n	9142 <etharp_output+0xfa>
    9124:	2200      	movs	r2, #0
    9126:	e7e4      	b.n	90f2 <etharp_output+0xaa>
		return etharp_query(netif, dst_addr, q);
    9128:	4632      	mov	r2, r6
    912a:	4621      	mov	r1, r4
    912c:	4628      	mov	r0, r5
    912e:	4b0e      	ldr	r3, [pc, #56]	; (9168 <etharp_output+0x120>)
    9130:	4798      	blx	r3
    9132:	e006      	b.n	9142 <etharp_output+0xfa>
		dest = (struct eth_addr *)&ethbroadcast;
    9134:	4b0d      	ldr	r3, [pc, #52]	; (916c <etharp_output+0x124>)
	return etharp_send_ip(netif, q, (struct eth_addr *)(netif->hwaddr), dest);
    9136:	f105 0227 	add.w	r2, r5, #39	; 0x27
    913a:	4631      	mov	r1, r6
    913c:	4628      	mov	r0, r5
    913e:	4c0c      	ldr	r4, [pc, #48]	; (9170 <etharp_output+0x128>)
    9140:	47a0      	blx	r4
}
    9142:	b002      	add	sp, #8
    9144:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUF;
    9146:	f06f 0001 	mvn.w	r0, #1
    914a:	e7fa      	b.n	9142 <etharp_output+0xfa>
					return ERR_RTE;
    914c:	f06f 0003 	mvn.w	r0, #3
    9150:	e7f7      	b.n	9142 <etharp_output+0xfa>
    9152:	f06f 0003 	mvn.w	r0, #3
    9156:	e7f4      	b.n	9142 <etharp_output+0xfa>
    9158:	00005427 	.word	0x00005427
    915c:	000045ed 	.word	0x000045ed
    9160:	200080d8 	.word	0x200080d8
    9164:	00008e81 	.word	0x00008e81
    9168:	00008ef1 	.word	0x00008ef1
    916c:	0000d4fc 	.word	0x0000d4fc
    9170:	00008b6d 	.word	0x00008b6d

00009174 <ethernet_input>:
 *
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t ethernet_input(struct pbuf *p, struct netif *netif)
{
    9174:	b570      	push	{r4, r5, r6, lr}
    9176:	4604      	mov	r4, r0
	u16_t           type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
	s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

	if (p->len <= SIZEOF_ETH_HDR) {
    9178:	8943      	ldrh	r3, [r0, #10]
    917a:	2b10      	cmp	r3, #16
    917c:	d917      	bls.n	91ae <ethernet_input+0x3a>
    917e:	460e      	mov	r6, r1
		ETHARP_STATS_INC(etharp.drop);
		goto free_and_return;
	}

	/* points to packet payload, which starts with an Ethernet header */
	ethhdr = (struct eth_hdr *)p->payload;
    9180:	6840      	ldr	r0, [r0, #4]
	             (unsigned)ethhdr->src.addr[3],
	             (unsigned)ethhdr->src.addr[4],
	             (unsigned)ethhdr->src.addr[5],
	             (unsigned)htons(ethhdr->type)));

	type = ethhdr->type;
    9182:	89c5      	ldrh	r5, [r0, #14]

#if LWIP_ARP_FILTER_NETIF
	netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

	if (ethhdr->dest.addr[0] & 1) {
    9184:	7883      	ldrb	r3, [r0, #2]
    9186:	f013 0f01 	tst.w	r3, #1
    918a:	d00b      	beq.n	91a4 <ethernet_input+0x30>
		/* this might be a multicast or broadcast packet */
		if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
    918c:	2b01      	cmp	r3, #1
    918e:	d013      	beq.n	91b8 <ethernet_input+0x44>
			if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) && (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
				/* mark the pbuf as link-layer multicast */
				p->flags |= PBUF_FLAG_LLMCAST;
			}
		} else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
    9190:	2206      	movs	r2, #6
    9192:	491d      	ldr	r1, [pc, #116]	; (9208 <ethernet_input+0x94>)
    9194:	3002      	adds	r0, #2
    9196:	4b1d      	ldr	r3, [pc, #116]	; (920c <ethernet_input+0x98>)
    9198:	4798      	blx	r3
    919a:	b918      	cbnz	r0, 91a4 <ethernet_input+0x30>
			/* mark the pbuf as link-layer broadcast */
			p->flags |= PBUF_FLAG_LLBCAST;
    919c:	7b63      	ldrb	r3, [r4, #13]
    919e:	f043 0308 	orr.w	r3, r3, #8
    91a2:	7363      	strb	r3, [r4, #13]
		}
	}

	switch (type) {
    91a4:	2d08      	cmp	r5, #8
    91a6:	d012      	beq.n	91ce <ethernet_input+0x5a>
    91a8:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
    91ac:	d020      	beq.n	91f0 <ethernet_input+0x7c>
	/* This means the pbuf is freed or consumed,
	   so the caller doesn't have to free it again */
	return ERR_OK;

free_and_return:
	pbuf_free(p);
    91ae:	4620      	mov	r0, r4
    91b0:	4b17      	ldr	r3, [pc, #92]	; (9210 <ethernet_input+0x9c>)
    91b2:	4798      	blx	r3
	return ERR_OK;
}
    91b4:	2000      	movs	r0, #0
    91b6:	bd70      	pop	{r4, r5, r6, pc}
			if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) && (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
    91b8:	78c3      	ldrb	r3, [r0, #3]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d1f2      	bne.n	91a4 <ethernet_input+0x30>
    91be:	7903      	ldrb	r3, [r0, #4]
    91c0:	2b5e      	cmp	r3, #94	; 0x5e
    91c2:	d1ef      	bne.n	91a4 <ethernet_input+0x30>
				p->flags |= PBUF_FLAG_LLMCAST;
    91c4:	7b63      	ldrb	r3, [r4, #13]
    91c6:	f043 0310 	orr.w	r3, r3, #16
    91ca:	7363      	strb	r3, [r4, #13]
    91cc:	e7ea      	b.n	91a4 <ethernet_input+0x30>
		if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    91ce:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    91d2:	f013 0f20 	tst.w	r3, #32
    91d6:	d0ea      	beq.n	91ae <ethernet_input+0x3a>
		if (pbuf_header(p, -ip_hdr_offset)) {
    91d8:	f06f 010f 	mvn.w	r1, #15
    91dc:	4620      	mov	r0, r4
    91de:	4b0d      	ldr	r3, [pc, #52]	; (9214 <ethernet_input+0xa0>)
    91e0:	4798      	blx	r3
    91e2:	2800      	cmp	r0, #0
    91e4:	d1e3      	bne.n	91ae <ethernet_input+0x3a>
			ip_input(p, netif);
    91e6:	4631      	mov	r1, r6
    91e8:	4620      	mov	r0, r4
    91ea:	4b0b      	ldr	r3, [pc, #44]	; (9218 <ethernet_input+0xa4>)
    91ec:	4798      	blx	r3
		break;
    91ee:	e7e1      	b.n	91b4 <ethernet_input+0x40>
		if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    91f0:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
    91f4:	f013 0f20 	tst.w	r3, #32
    91f8:	d0d9      	beq.n	91ae <ethernet_input+0x3a>
		etharp_arp_input(netif, (struct eth_addr *)(netif->hwaddr), p);
    91fa:	4622      	mov	r2, r4
    91fc:	f106 0127 	add.w	r1, r6, #39	; 0x27
    9200:	4630      	mov	r0, r6
    9202:	4b06      	ldr	r3, [pc, #24]	; (921c <ethernet_input+0xa8>)
    9204:	4798      	blx	r3
		break;
    9206:	e7d5      	b.n	91b4 <ethernet_input+0x40>
    9208:	0000d4fc 	.word	0x0000d4fc
    920c:	0000c0e5 	.word	0x0000c0e5
    9210:	000054a1 	.word	0x000054a1
    9214:	00005427 	.word	0x00005427
    9218:	00004311 	.word	0x00004311
    921c:	00008cf1 	.word	0x00008cf1

00009220 <count_encoderB>:


}

void count_encoderB (void)
{	
    9220:	b5f0      	push	{r4, r5, r6, r7, lr}
    9222:	b085      	sub	sp, #20
	BaseType_t task_woken = pdFALSE;
    9224:	2300      	movs	r3, #0
    9226:	9303      	str	r3, [sp, #12]
	
	
	ext_irq_disable(encoder_A);
    9228:	2060      	movs	r0, #96	; 0x60
    922a:	4c2a      	ldr	r4, [pc, #168]	; (92d4 <count_encoderB+0xb4>)
    922c:	47a0      	blx	r4
	ext_irq_disable(encoder_B);
    922e:	2027      	movs	r0, #39	; 0x27
    9230:	47a0      	blx	r4
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    9232:	a802      	add	r0, sp, #8
    9234:	4d28      	ldr	r5, [pc, #160]	; (92d8 <count_encoderB+0xb8>)
    9236:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9238:	4e28      	ldr	r6, [pc, #160]	; (92dc <count_encoderB+0xbc>)
    923a:	f8d6 2180 	ldr.w	r2, [r6, #384]	; 0x180
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    923e:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9242:	f8d6 4190 	ldr.w	r4, [r6, #400]	; 0x190

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9246:	405c      	eors	r4, r3
    9248:	4014      	ands	r4, r2
    924a:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    924c:	a802      	add	r0, sp, #8
    924e:	4f24      	ldr	r7, [pc, #144]	; (92e0 <count_encoderB+0xc0>)
    9250:	47b8      	blx	r7
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    9252:	f004 0401 	and.w	r4, r4, #1
	CRITICAL_SECTION_ENTER();
    9256:	a801      	add	r0, sp, #4
    9258:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    925a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    925e:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9262:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9266:	405d      	eors	r5, r3
    9268:	4015      	ands	r5, r2
    926a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    926c:	a801      	add	r0, sp, #4
    926e:	47b8      	blx	r7
	
	int encoderA_state = gpio_get_pin_level(encoder_A);
	int encoderB_state = gpio_get_pin_level(encoder_B);
	
	if (encoderA_state == 1 && encoderB_state == 1 && bFlag == 1){
    9270:	b134      	cbz	r4, 9280 <count_encoderB+0x60>
    9272:	f005 0580 	and.w	r5, r5, #128	; 0x80
    9276:	b11d      	cbz	r5, 9280 <count_encoderB+0x60>
    9278:	4b1a      	ldr	r3, [pc, #104]	; (92e4 <count_encoderB+0xc4>)
    927a:	681b      	ldr	r3, [r3, #0]
    927c:	2b01      	cmp	r3, #1
    927e:	d012      	beq.n	92a6 <count_encoderB+0x86>
		aFlag = 0;
		bFlag = 0;
		printf("%d ", counter);
		
	}
	else if(encoderA_state == 1){
    9280:	b114      	cbz	r4, 9288 <count_encoderB+0x68>
		aFlag = 1;
    9282:	2201      	movs	r2, #1
    9284:	4b17      	ldr	r3, [pc, #92]	; (92e4 <count_encoderB+0xc4>)
    9286:	609a      	str	r2, [r3, #8]
	}
	
	//ext_irq_disable(encoder_A);
	//ext_irq_disable(encoder_B);
	
	xSemaphoreGiveFromISR(ctx.sem, &task_woken);
    9288:	a903      	add	r1, sp, #12
    928a:	4b16      	ldr	r3, [pc, #88]	; (92e4 <count_encoderB+0xc4>)
    928c:	6918      	ldr	r0, [r3, #16]
    928e:	4b16      	ldr	r3, [pc, #88]	; (92e8 <count_encoderB+0xc8>)
    9290:	4798      	blx	r3
	
	//portEND_SWITCHING_ISR(task_woken);
	if (task_woken == pdTRUE)
    9292:	9b03      	ldr	r3, [sp, #12]
    9294:	2b01      	cmp	r3, #1
    9296:	d012      	beq.n	92be <count_encoderB+0x9e>
	portYIELD_FROM_ISR(task_woken);
	
	
	
	ext_irq_enable(encoder_A);
    9298:	2060      	movs	r0, #96	; 0x60
    929a:	4c14      	ldr	r4, [pc, #80]	; (92ec <count_encoderB+0xcc>)
    929c:	47a0      	blx	r4
	ext_irq_enable(encoder_B);
    929e:	2027      	movs	r0, #39	; 0x27
    92a0:	47a0      	blx	r4
	
}
    92a2:	b005      	add	sp, #20
    92a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter++;
    92a6:	4b0f      	ldr	r3, [pc, #60]	; (92e4 <count_encoderB+0xc4>)
    92a8:	685a      	ldr	r2, [r3, #4]
    92aa:	3201      	adds	r2, #1
    92ac:	605a      	str	r2, [r3, #4]
		aFlag = 0;
    92ae:	2200      	movs	r2, #0
    92b0:	609a      	str	r2, [r3, #8]
		bFlag = 0;
    92b2:	601a      	str	r2, [r3, #0]
		printf("%d ", counter);
    92b4:	6859      	ldr	r1, [r3, #4]
    92b6:	480e      	ldr	r0, [pc, #56]	; (92f0 <count_encoderB+0xd0>)
    92b8:	4b0e      	ldr	r3, [pc, #56]	; (92f4 <count_encoderB+0xd4>)
    92ba:	4798      	blx	r3
    92bc:	e7e4      	b.n	9288 <count_encoderB+0x68>
	portYIELD_FROM_ISR(task_woken);
    92be:	2b00      	cmp	r3, #0
    92c0:	d0ea      	beq.n	9298 <count_encoderB+0x78>
    92c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    92c6:	4b0c      	ldr	r3, [pc, #48]	; (92f8 <count_encoderB+0xd8>)
    92c8:	601a      	str	r2, [r3, #0]
    92ca:	f3bf 8f4f 	dsb	sy
    92ce:	f3bf 8f6f 	isb	sy
    92d2:	e7e1      	b.n	9298 <count_encoderB+0x78>
    92d4:	000010c5 	.word	0x000010c5
    92d8:	00000f51 	.word	0x00000f51
    92dc:	41008000 	.word	0x41008000
    92e0:	00000f5f 	.word	0x00000f5f
    92e4:	200081a8 	.word	0x200081a8
    92e8:	0000a409 	.word	0x0000a409
    92ec:	000010b5 	.word	0x000010b5
    92f0:	0000d50c 	.word	0x0000d50c
    92f4:	0000c281 	.word	0x0000c281
    92f8:	e000ed04 	.word	0xe000ed04

000092fc <count_encoderA>:
{	
    92fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    92fe:	b085      	sub	sp, #20
	ext_irq_disable(encoder_A);
    9300:	2060      	movs	r0, #96	; 0x60
    9302:	4c2b      	ldr	r4, [pc, #172]	; (93b0 <count_encoderA+0xb4>)
    9304:	47a0      	blx	r4
	ext_irq_disable(encoder_B);
    9306:	2027      	movs	r0, #39	; 0x27
    9308:	47a0      	blx	r4
	BaseType_t task_woken =pdFALSE;
    930a:	2300      	movs	r3, #0
    930c:	9303      	str	r3, [sp, #12]
	CRITICAL_SECTION_ENTER();
    930e:	a802      	add	r0, sp, #8
    9310:	4c28      	ldr	r4, [pc, #160]	; (93b4 <count_encoderA+0xb8>)
    9312:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9314:	4e28      	ldr	r6, [pc, #160]	; (93b8 <count_encoderA+0xbc>)
    9316:	f8d6 2180 	ldr.w	r2, [r6, #384]	; 0x180
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    931a:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    931e:	f8d6 5190 	ldr.w	r5, [r6, #400]	; 0x190
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9322:	405d      	eors	r5, r3
    9324:	4015      	ands	r5, r2
    9326:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    9328:	a802      	add	r0, sp, #8
    932a:	4f24      	ldr	r7, [pc, #144]	; (93bc <count_encoderA+0xc0>)
    932c:	47b8      	blx	r7
    932e:	f005 0501 	and.w	r5, r5, #1
	CRITICAL_SECTION_ENTER();
    9332:	a801      	add	r0, sp, #4
    9334:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9336:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    933a:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    933e:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9342:	4063      	eors	r3, r4
    9344:	4013      	ands	r3, r2
    9346:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    9348:	a801      	add	r0, sp, #4
    934a:	47b8      	blx	r7
    934c:	f004 0480 	and.w	r4, r4, #128	; 0x80
	if (encoderA_state == 1 && encoderB_state == 1 && aFlag == 1){
    9350:	b125      	cbz	r5, 935c <count_encoderA+0x60>
    9352:	b11c      	cbz	r4, 935c <count_encoderA+0x60>
    9354:	4a1a      	ldr	r2, [pc, #104]	; (93c0 <count_encoderA+0xc4>)
    9356:	6892      	ldr	r2, [r2, #8]
    9358:	2a01      	cmp	r2, #1
    935a:	d012      	beq.n	9382 <count_encoderA+0x86>
	else if(encoderB_state == 1){
    935c:	b114      	cbz	r4, 9364 <count_encoderA+0x68>
		bFlag = 1;
    935e:	2201      	movs	r2, #1
    9360:	4b17      	ldr	r3, [pc, #92]	; (93c0 <count_encoderA+0xc4>)
    9362:	601a      	str	r2, [r3, #0]
	xSemaphoreGiveFromISR(ctx.sem, &task_woken);
    9364:	a903      	add	r1, sp, #12
    9366:	4b16      	ldr	r3, [pc, #88]	; (93c0 <count_encoderA+0xc4>)
    9368:	6918      	ldr	r0, [r3, #16]
    936a:	4b16      	ldr	r3, [pc, #88]	; (93c4 <count_encoderA+0xc8>)
    936c:	4798      	blx	r3
	if (task_woken == pdTRUE)
    936e:	9b03      	ldr	r3, [sp, #12]
    9370:	2b01      	cmp	r3, #1
    9372:	d012      	beq.n	939a <count_encoderA+0x9e>
	ext_irq_enable(encoder_A);
    9374:	2060      	movs	r0, #96	; 0x60
    9376:	4c14      	ldr	r4, [pc, #80]	; (93c8 <count_encoderA+0xcc>)
    9378:	47a0      	blx	r4
	ext_irq_enable(encoder_B);
    937a:	2027      	movs	r0, #39	; 0x27
    937c:	47a0      	blx	r4
}
    937e:	b005      	add	sp, #20
    9380:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter--;
    9382:	4b0f      	ldr	r3, [pc, #60]	; (93c0 <count_encoderA+0xc4>)
    9384:	685a      	ldr	r2, [r3, #4]
    9386:	3a01      	subs	r2, #1
    9388:	605a      	str	r2, [r3, #4]
		aFlag = 0;
    938a:	2200      	movs	r2, #0
    938c:	609a      	str	r2, [r3, #8]
		bFlag = 0;
    938e:	601a      	str	r2, [r3, #0]
		printf("%d ", counter);
    9390:	6859      	ldr	r1, [r3, #4]
    9392:	480e      	ldr	r0, [pc, #56]	; (93cc <count_encoderA+0xd0>)
    9394:	4b0e      	ldr	r3, [pc, #56]	; (93d0 <count_encoderA+0xd4>)
    9396:	4798      	blx	r3
    9398:	e7e4      	b.n	9364 <count_encoderA+0x68>
	portYIELD_FROM_ISR( task_woken);
    939a:	2b00      	cmp	r3, #0
    939c:	d0ea      	beq.n	9374 <count_encoderA+0x78>
    939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    93a2:	4b0c      	ldr	r3, [pc, #48]	; (93d4 <count_encoderA+0xd8>)
    93a4:	601a      	str	r2, [r3, #0]
    93a6:	f3bf 8f4f 	dsb	sy
    93aa:	f3bf 8f6f 	isb	sy
    93ae:	e7e1      	b.n	9374 <count_encoderA+0x78>
    93b0:	000010c5 	.word	0x000010c5
    93b4:	00000f51 	.word	0x00000f51
    93b8:	41008000 	.word	0x41008000
    93bc:	00000f5f 	.word	0x00000f5f
    93c0:	200081a8 	.word	0x200081a8
    93c4:	0000a409 	.word	0x0000a409
    93c8:	000010b5 	.word	0x000010b5
    93cc:	0000d50c 	.word	0x0000d50c
    93d0:	0000c281 	.word	0x0000c281
    93d4:	e000ed04 	.word	0xe000ed04

000093d8 <print_ipaddress>:
{
    93d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("IP_ADDR    : %s\r\n",
    93da:	4f0d      	ldr	r7, [pc, #52]	; (9410 <print_ipaddress+0x38>)
    93dc:	4e0d      	ldr	r6, [pc, #52]	; (9414 <print_ipaddress+0x3c>)
    93de:	2210      	movs	r2, #16
    93e0:	4639      	mov	r1, r7
    93e2:	4630      	mov	r0, r6
    93e4:	4d0c      	ldr	r5, [pc, #48]	; (9418 <print_ipaddress+0x40>)
    93e6:	47a8      	blx	r5
    93e8:	4601      	mov	r1, r0
    93ea:	480c      	ldr	r0, [pc, #48]	; (941c <print_ipaddress+0x44>)
    93ec:	4c0c      	ldr	r4, [pc, #48]	; (9420 <print_ipaddress+0x48>)
    93ee:	47a0      	blx	r4
	printf("NET_MASK   : %s\r\n",
    93f0:	2210      	movs	r2, #16
    93f2:	4639      	mov	r1, r7
    93f4:	1d30      	adds	r0, r6, #4
    93f6:	47a8      	blx	r5
    93f8:	4601      	mov	r1, r0
    93fa:	480a      	ldr	r0, [pc, #40]	; (9424 <print_ipaddress+0x4c>)
    93fc:	47a0      	blx	r4
	printf("GATEWAY_IP : %s\r\n", ipaddr_ntoa_r((const ip_addr_t *)&(TCPIP_STACK_INTERFACE_0_desc.gw), tmp_buff, 16));
    93fe:	2210      	movs	r2, #16
    9400:	4639      	mov	r1, r7
    9402:	f106 0008 	add.w	r0, r6, #8
    9406:	47a8      	blx	r5
    9408:	4601      	mov	r1, r0
    940a:	4807      	ldr	r0, [pc, #28]	; (9428 <print_ipaddress+0x50>)
    940c:	47a0      	blx	r4
    940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9410:	20008340 	.word	0x20008340
    9414:	20012960 	.word	0x20012960
    9418:	00004761 	.word	0x00004761
    941c:	0000d510 	.word	0x0000d510
    9420:	0000c281 	.word	0x0000c281
    9424:	0000d524 	.word	0x0000d524
    9428:	0000d538 	.word	0x0000d538

0000942c <GetCurrentTime>:
{
    942c:	b508      	push	{r3, lr}
	return xTaskGetTickCount();
    942e:	4b01      	ldr	r3, [pc, #4]	; (9434 <GetCurrentTime+0x8>)
    9430:	4798      	blx	r3
}
    9432:	bd08      	pop	{r3, pc}
    9434:	0000aa8d 	.word	0x0000aa8d

00009438 <GetPIDTime>:
{
    9438:	b508      	push	{r3, lr}
	return (unsigned long) GetCurrentTime();
    943a:	4b01      	ldr	r3, [pc, #4]	; (9440 <GetPIDTime+0x8>)
    943c:	4798      	blx	r3
}
    943e:	bd08      	pop	{r3, pc}
    9440:	0000942d 	.word	0x0000942d

00009444 <ConvertAngleToPIDInt>:
{
    9444:	b510      	push	{r4, lr}
	return (int)(angle * 1000.0);
    9446:	4b04      	ldr	r3, [pc, #16]	; (9458 <ConvertAngleToPIDInt+0x14>)
    9448:	4798      	blx	r3
    944a:	2200      	movs	r2, #0
    944c:	4b03      	ldr	r3, [pc, #12]	; (945c <ConvertAngleToPIDInt+0x18>)
    944e:	4c04      	ldr	r4, [pc, #16]	; (9460 <ConvertAngleToPIDInt+0x1c>)
    9450:	47a0      	blx	r4
    9452:	4b04      	ldr	r3, [pc, #16]	; (9464 <ConvertAngleToPIDInt+0x20>)
    9454:	4798      	blx	r3
}
    9456:	bd10      	pop	{r4, pc}
    9458:	0000ba91 	.word	0x0000ba91
    945c:	408f4000 	.word	0x408f4000
    9460:	0000bb39 	.word	0x0000bb39
    9464:	0000bf5d 	.word	0x0000bf5d

00009468 <SteeringPIDSource>:
{
    9468:	b508      	push	{r3, lr}
	return ConvertAngleToPIDInt(ctx.steering_angle_commanded);
    946a:	4b02      	ldr	r3, [pc, #8]	; (9474 <SteeringPIDSource+0xc>)
    946c:	6a18      	ldr	r0, [r3, #32]
    946e:	4b02      	ldr	r3, [pc, #8]	; (9478 <SteeringPIDSource+0x10>)
    9470:	4798      	blx	r3
}
    9472:	bd08      	pop	{r3, pc}
    9474:	200081a8 	.word	0x200081a8
    9478:	00009445 	.word	0x00009445

0000947c <ConvertSpeedToPIDInt>:
{
    947c:	b510      	push	{r4, lr}
	return (int)(speed * 1000.0);
    947e:	4b04      	ldr	r3, [pc, #16]	; (9490 <ConvertSpeedToPIDInt+0x14>)
    9480:	4798      	blx	r3
    9482:	2200      	movs	r2, #0
    9484:	4b03      	ldr	r3, [pc, #12]	; (9494 <ConvertSpeedToPIDInt+0x18>)
    9486:	4c04      	ldr	r4, [pc, #16]	; (9498 <ConvertSpeedToPIDInt+0x1c>)
    9488:	47a0      	blx	r4
    948a:	4b04      	ldr	r3, [pc, #16]	; (949c <ConvertSpeedToPIDInt+0x20>)
    948c:	4798      	blx	r3
}
    948e:	bd10      	pop	{r4, pc}
    9490:	0000ba91 	.word	0x0000ba91
    9494:	408f4000 	.word	0x408f4000
    9498:	0000bb39 	.word	0x0000bb39
    949c:	0000bf5d 	.word	0x0000bf5d

000094a0 <SpeedPIDSource>:
{
    94a0:	b508      	push	{r3, lr}
	return ConvertSpeedToPIDInt(ctx.vehicle_speed_commanded);
    94a2:	4b02      	ldr	r3, [pc, #8]	; (94ac <SpeedPIDSource+0xc>)
    94a4:	69d8      	ldr	r0, [r3, #28]
    94a6:	4b02      	ldr	r3, [pc, #8]	; (94b0 <SpeedPIDSource+0x10>)
    94a8:	4798      	blx	r3
}
    94aa:	bd08      	pop	{r3, pc}
    94ac:	200081a8 	.word	0x200081a8
    94b0:	0000947d 	.word	0x0000947d

000094b4 <ConvertPIDIntToDutyCycle>:
	return ((float)PID_int) / 1000.0;
    94b4:	ee07 0a90 	vmov	s15, r0
    94b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
}
    94bc:	eddf 7a03 	vldr	s15, [pc, #12]	; 94cc <ConvertPIDIntToDutyCycle+0x18>
    94c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
    94c4:	ee16 0a90 	vmov	r0, s13
    94c8:	4770      	bx	lr
    94ca:	bf00      	nop
    94cc:	447a0000 	.word	0x447a0000

000094d0 <SteeringPIDOutput>:
{
    94d0:	b508      	push	{r3, lr}
	ctx.steering_torque_pid_out = ConvertPIDIntToDutyCycle(pid_output);
    94d2:	4b03      	ldr	r3, [pc, #12]	; (94e0 <SteeringPIDOutput+0x10>)
    94d4:	4798      	blx	r3
    94d6:	4b03      	ldr	r3, [pc, #12]	; (94e4 <SteeringPIDOutput+0x14>)
    94d8:	f8c3 0170 	str.w	r0, [r3, #368]	; 0x170
    94dc:	bd08      	pop	{r3, pc}
    94de:	bf00      	nop
    94e0:	000094b5 	.word	0x000094b5
    94e4:	200081a8 	.word	0x200081a8

000094e8 <SpeedPIDOutput>:
{
    94e8:	b508      	push	{r3, lr}
	ctx.acceleration_pid_out = ConvertPIDIntToDutyCycle(pid_output);
    94ea:	4b03      	ldr	r3, [pc, #12]	; (94f8 <SpeedPIDOutput+0x10>)
    94ec:	4798      	blx	r3
    94ee:	4b03      	ldr	r3, [pc, #12]	; (94fc <SpeedPIDOutput+0x14>)
    94f0:	f8c3 0174 	str.w	r0, [r3, #372]	; 0x174
    94f4:	bd08      	pop	{r3, pc}
    94f6:	bf00      	nop
    94f8:	000094b5 	.word	0x000094b5
    94fc:	200081a8 	.word	0x200081a8

00009500 <ConvertDutyCycleToPIDInt>:
{
    9500:	b510      	push	{r4, lr}
	return ((int)duty_cycle) * 1000.0;
    9502:	ee07 0a90 	vmov	s15, r0
    9506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    950a:	ee17 0a90 	vmov	r0, s15
    950e:	4b04      	ldr	r3, [pc, #16]	; (9520 <ConvertDutyCycleToPIDInt+0x20>)
    9510:	4798      	blx	r3
    9512:	2200      	movs	r2, #0
    9514:	4b03      	ldr	r3, [pc, #12]	; (9524 <ConvertDutyCycleToPIDInt+0x24>)
    9516:	4c04      	ldr	r4, [pc, #16]	; (9528 <ConvertDutyCycleToPIDInt+0x28>)
    9518:	47a0      	blx	r4
    951a:	4b04      	ldr	r3, [pc, #16]	; (952c <ConvertDutyCycleToPIDInt+0x2c>)
    951c:	4798      	blx	r3
}
    951e:	bd10      	pop	{r4, pc}
    9520:	0000ba6d 	.word	0x0000ba6d
    9524:	408f4000 	.word	0x408f4000
    9528:	0000bb39 	.word	0x0000bb39
    952c:	0000bf5d 	.word	0x0000bf5d

00009530 <TeleOperation>:
{
    9530:	b510      	push	{r4, lr}
	if(ctx->tele_operation_enabled && ctx->current_time - ctx->last_eth_input_rx_time < 100)
    9532:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    9536:	b12b      	cbz	r3, 9544 <TeleOperation+0x14>
    9538:	4604      	mov	r4, r0
    953a:	6883      	ldr	r3, [r0, #8]
    953c:	6842      	ldr	r2, [r0, #4]
    953e:	1a9b      	subs	r3, r3, r2
    9540:	2b63      	cmp	r3, #99	; 0x63
    9542:	d906      	bls.n	9552 <TeleOperation+0x22>
		SetAcceleration(0.0);
    9544:	2000      	movs	r0, #0
    9546:	4b12      	ldr	r3, [pc, #72]	; (9590 <TeleOperation+0x60>)
    9548:	4798      	blx	r3
		SetSafetyLight1On(0);
    954a:	2000      	movs	r0, #0
    954c:	4b11      	ldr	r3, [pc, #68]	; (9594 <TeleOperation+0x64>)
    954e:	4798      	blx	r3
    9550:	bd10      	pop	{r4, pc}
		SetSafetyLight1On(1);
    9552:	2001      	movs	r0, #1
    9554:	4b0f      	ldr	r3, [pc, #60]	; (9594 <TeleOperation+0x64>)
    9556:	4798      	blx	r3
		SetAcceleration(ctx->vehicle_speed_commanded);
    9558:	68e0      	ldr	r0, [r4, #12]
    955a:	4b0d      	ldr	r3, [pc, #52]	; (9590 <TeleOperation+0x60>)
    955c:	4798      	blx	r3
		if(ctx->steering_angle_commanded > 0)
    955e:	edd4 7a04 	vldr	s15, [r4, #16]
    9562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    956a:	dd07      	ble.n	957c <TeleOperation+0x4c>
			SetSteeringTorque(ctx->steering_angle_commanded);
    956c:	ee17 0a90 	vmov	r0, s15
    9570:	4b09      	ldr	r3, [pc, #36]	; (9598 <TeleOperation+0x68>)
    9572:	4798      	blx	r3
			SetSteerDirection(0);
    9574:	2000      	movs	r0, #0
    9576:	4b09      	ldr	r3, [pc, #36]	; (959c <TeleOperation+0x6c>)
    9578:	4798      	blx	r3
    957a:	bd10      	pop	{r4, pc}
			SetSteeringTorque(ctx->steering_angle_commanded * -1);
    957c:	eef1 7a67 	vneg.f32	s15, s15
    9580:	ee17 0a90 	vmov	r0, s15
    9584:	4b04      	ldr	r3, [pc, #16]	; (9598 <TeleOperation+0x68>)
    9586:	4798      	blx	r3
			SetSteerDirection(1);
    9588:	2001      	movs	r0, #1
    958a:	4b04      	ldr	r3, [pc, #16]	; (959c <TeleOperation+0x6c>)
    958c:	4798      	blx	r3
    958e:	bd10      	pop	{r4, pc}
    9590:	0000045d 	.word	0x0000045d
    9594:	0000036d 	.word	0x0000036d
    9598:	000003a1 	.word	0x000003a1
    959c:	00000389 	.word	0x00000389

000095a0 <main_task>:
{
    95a0:	b538      	push	{r3, r4, r5, lr}
    95a2:	4604      	mov	r4, r0
    95a4:	e00e      	b.n	95c4 <main_task+0x24>
		context->current_time = GetCurrentTime();
    95a6:	4b0f      	ldr	r3, [pc, #60]	; (95e4 <main_task+0x44>)
    95a8:	4798      	blx	r3
    95aa:	60a0      	str	r0, [r4, #8]
		TeleOperation(context);
    95ac:	4620      	mov	r0, r4
    95ae:	4b0e      	ldr	r3, [pc, #56]	; (95e8 <main_task+0x48>)
    95b0:	4798      	blx	r3
		xSemaphoreGive(context->sem);
    95b2:	2300      	movs	r3, #0
    95b4:	461a      	mov	r2, r3
    95b6:	4619      	mov	r1, r3
    95b8:	6820      	ldr	r0, [r4, #0]
    95ba:	4d0c      	ldr	r5, [pc, #48]	; (95ec <main_task+0x4c>)
    95bc:	47a8      	blx	r5
		vTaskDelay(MAIN_TASK_LOOP_TIME);
    95be:	2001      	movs	r0, #1
    95c0:	4b0b      	ldr	r3, [pc, #44]	; (95f0 <main_task+0x50>)
    95c2:	4798      	blx	r3
		if(xSemaphoreTake(context->sem, 50) != pdTRUE)
    95c4:	2300      	movs	r3, #0
    95c6:	2232      	movs	r2, #50	; 0x32
    95c8:	4619      	mov	r1, r3
    95ca:	6820      	ldr	r0, [r4, #0]
    95cc:	4d09      	ldr	r5, [pc, #36]	; (95f4 <main_task+0x54>)
    95ce:	47a8      	blx	r5
    95d0:	2801      	cmp	r0, #1
    95d2:	d0e8      	beq.n	95a6 <main_task+0x6>
			printf("Failed to take IO semaphore!\n");
    95d4:	4808      	ldr	r0, [pc, #32]	; (95f8 <main_task+0x58>)
    95d6:	4b09      	ldr	r3, [pc, #36]	; (95fc <main_task+0x5c>)
    95d8:	4798      	blx	r3
			vTaskDelay(1);
    95da:	2001      	movs	r0, #1
    95dc:	4b04      	ldr	r3, [pc, #16]	; (95f0 <main_task+0x50>)
    95de:	4798      	blx	r3
    95e0:	e7e1      	b.n	95a6 <main_task+0x6>
    95e2:	bf00      	nop
    95e4:	0000942d 	.word	0x0000942d
    95e8:	00009531 	.word	0x00009531
    95ec:	0000a135 	.word	0x0000a135
    95f0:	0000accd 	.word	0x0000accd
    95f4:	0000a4ed 	.word	0x0000a4ed
    95f8:	0000d54c 	.word	0x0000d54c
    95fc:	0000c369 	.word	0x0000c369

00009600 <main>:



int main(void)
{
    9600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9604:	ed2d 8b02 	vpush	{d8}
    9608:	b085      	sub	sp, #20
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    960a:	4b55      	ldr	r3, [pc, #340]	; (9760 <main+0x160>)
    960c:	4798      	blx	r3
	
	//Initialize PID controllers.
	ctx.steering_controller.p = STEERING_P_GAIN;
    960e:	4c55      	ldr	r4, [pc, #340]	; (9764 <main+0x164>)
    9610:	a34b      	add	r3, pc, #300	; (adr r3, 9740 <main+0x140>)
    9612:	e9d3 2300 	ldrd	r2, r3, [r3]
    9616:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	ctx.steering_controller.i = STEERING_I_GAIN;
    961a:	a34b      	add	r3, pc, #300	; (adr r3, 9748 <main+0x148>)
    961c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9620:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	ctx.steering_controller.d = STEERING_D_GAIN;
    9624:	ed9f 8b4a 	vldr	d8, [pc, #296]	; 9750 <main+0x150>
    9628:	ed84 8b14 	vstr	d8, [r4, #80]	; 0x50
	ctx.steering_controller.pidSource = SteeringPIDSource;
    962c:	4b4e      	ldr	r3, [pc, #312]	; (9768 <main+0x168>)
    962e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	ctx.steering_controller.pidOutput = SteeringPIDOutput;
    9632:	4b4e      	ldr	r3, [pc, #312]	; (976c <main+0x16c>)
    9634:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	setInputBounds(&(ctx.steering_controller), ConvertAngleToPIDInt(MIN_STEERING_ANGLE), ConvertAngleToPIDInt(MAX_STEERING_ANGLE));
    9638:	484d      	ldr	r0, [pc, #308]	; (9770 <main+0x170>)
    963a:	4d4e      	ldr	r5, [pc, #312]	; (9774 <main+0x174>)
    963c:	47a8      	blx	r5
    963e:	4606      	mov	r6, r0
    9640:	484d      	ldr	r0, [pc, #308]	; (9778 <main+0x178>)
    9642:	47a8      	blx	r5
    9644:	f104 0510 	add.w	r5, r4, #16
    9648:	f104 0740 	add.w	r7, r4, #64	; 0x40
    964c:	4602      	mov	r2, r0
    964e:	4631      	mov	r1, r6
    9650:	4638      	mov	r0, r7
    9652:	f8df a184 	ldr.w	sl, [pc, #388]	; 97d8 <main+0x1d8>
    9656:	47d0      	blx	sl
	setOutputBounds(&(ctx.steering_controller), ConvertDutyCycleToPIDInt(MAX_STEERING_DUTY_CYCLE)*-1, ConvertDutyCycleToPIDInt(MAX_STEERING_DUTY_CYCLE));
    9658:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    965c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 97dc <main+0x1dc>
    9660:	47c8      	blx	r9
    9662:	4606      	mov	r6, r0
    9664:	4602      	mov	r2, r0
    9666:	4241      	negs	r1, r0
    9668:	4638      	mov	r0, r7
    966a:	4f44      	ldr	r7, [pc, #272]	; (977c <main+0x17c>)
    966c:	47b8      	blx	r7
	ctx.steering_controller.getSystemTime = GetPIDTime;
    966e:	4b44      	ldr	r3, [pc, #272]	; (9780 <main+0x180>)
    9670:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	ctx.speed_controller.p = SPEED_P_GAIN;
    9674:	2200      	movs	r2, #0
    9676:	4b43      	ldr	r3, [pc, #268]	; (9784 <main+0x184>)
    9678:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
	ctx.speed_controller.i = SPEED_I_GAIN;
    967c:	a336      	add	r3, pc, #216	; (adr r3, 9758 <main+0x158>)
    967e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9682:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0
	ctx.speed_controller.d = SPEED_D_GAIN;
    9686:	ed84 8b3a 	vstr	d8, [r4, #232]	; 0xe8
	ctx.speed_controller.pidSource = SpeedPIDSource;
    968a:	4b3f      	ldr	r3, [pc, #252]	; (9788 <main+0x188>)
    968c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
	ctx.speed_controller.pidOutput = SpeedPIDOutput;
    9690:	4b3e      	ldr	r3, [pc, #248]	; (978c <main+0x18c>)
    9692:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
	setInputBounds(&(ctx.speed_controller), ConvertSpeedToPIDInt(MIN_VEHICLE_SPEED), ConvertSpeedToPIDInt(MAX_VEHICLE_SPEED));
    9696:	483e      	ldr	r0, [pc, #248]	; (9790 <main+0x190>)
    9698:	f8df 8144 	ldr.w	r8, [pc, #324]	; 97e0 <main+0x1e0>
    969c:	47c0      	blx	r8
    969e:	4683      	mov	fp, r0
    96a0:	483c      	ldr	r0, [pc, #240]	; (9794 <main+0x194>)
    96a2:	47c0      	blx	r8
    96a4:	f104 08d8 	add.w	r8, r4, #216	; 0xd8
    96a8:	4602      	mov	r2, r0
    96aa:	4659      	mov	r1, fp
    96ac:	4640      	mov	r0, r8
    96ae:	47d0      	blx	sl
	setOutputBounds(&(ctx.speed_controller), ConvertDutyCycleToPIDInt(MIN_ACCEL_DUTY_CYCLE), ConvertDutyCycleToPIDInt(MAX_ACCEL_DUTY_CYCLE));
    96b0:	4839      	ldr	r0, [pc, #228]	; (9798 <main+0x198>)
    96b2:	47c8      	blx	r9
    96b4:	4632      	mov	r2, r6
    96b6:	4601      	mov	r1, r0
    96b8:	4640      	mov	r0, r8
    96ba:	47b8      	blx	r7
	ctx.speed_controller.getSystemTime = GetPIDTime;
	
	memset(&ctx, 0, sizeof(ctx));
    96bc:	f44f 72c4 	mov.w	r2, #392	; 0x188
    96c0:	2100      	movs	r1, #0
    96c2:	4628      	mov	r0, r5
    96c4:	4b35      	ldr	r3, [pc, #212]	; (979c <main+0x19c>)
    96c6:	4798      	blx	r3
	// The idea of a Semaphore is to manage access to a shared resource, in our case its context ctx, which holds the vehicle information
	// Context is shared between the 1-ethernet_thread task, which handles communications with the host computer and 2-main_task which controls the vehicle's functionality
	
	// ctx.sem refers to the handle semaphore which acts as the gatekeeper of the shared resource, a Binary Semaphore allows the shared resource to be occupied
	// by one task at a time
	ctx.sem = xSemaphoreCreateBinary();
    96c8:	2203      	movs	r2, #3
    96ca:	2100      	movs	r1, #0
    96cc:	2001      	movs	r0, #1
    96ce:	4b34      	ldr	r3, [pc, #208]	; (97a0 <main+0x1a0>)
    96d0:	4798      	blx	r3
    96d2:	6120      	str	r0, [r4, #16]
	
	// We make the semaphore available
	xSemaphoreGive(ctx.sem);
    96d4:	2300      	movs	r3, #0
    96d6:	461a      	mov	r2, r3
    96d8:	4619      	mov	r1, r3
    96da:	4c32      	ldr	r4, [pc, #200]	; (97a4 <main+0x1a4>)
    96dc:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    96de:	4b32      	ldr	r3, [pc, #200]	; (97a8 <main+0x1a8>)
    96e0:	22a0      	movs	r2, #160	; 0xa0
    96e2:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    96e6:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
	// ISRs using FreeRTOS *FromISR APIs must have priorities below or equal to 
	// configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY. This version of RTOS, it is 4
	NVIC_SetPriority(EIC_0_IRQn, 5);
	NVIC_SetPriority(EIC_7_IRQn, 5);	

	xTaskCreate(ethernet_thread,
    96ea:	2400      	movs	r4, #0
    96ec:	9403      	str	r4, [sp, #12]
    96ee:	9402      	str	r4, [sp, #8]
    96f0:	9401      	str	r4, [sp, #4]
    96f2:	9400      	str	r4, [sp, #0]
    96f4:	462b      	mov	r3, r5
    96f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    96fa:	492c      	ldr	r1, [pc, #176]	; (97ac <main+0x1ac>)
    96fc:	482c      	ldr	r0, [pc, #176]	; (97b0 <main+0x1b0>)
    96fe:	4e2d      	ldr	r6, [pc, #180]	; (97b4 <main+0x1b4>)
    9700:	47b0      	blx	r6
		2048,
		&ctx,
		0,
		NULL);

	xTaskCreate(main_task,
    9702:	9403      	str	r4, [sp, #12]
    9704:	9402      	str	r4, [sp, #8]
    9706:	9401      	str	r4, [sp, #4]
    9708:	2302      	movs	r3, #2
    970a:	9300      	str	r3, [sp, #0]
    970c:	462b      	mov	r3, r5
    970e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9712:	4929      	ldr	r1, [pc, #164]	; (97b8 <main+0x1b8>)
    9714:	4829      	ldr	r0, [pc, #164]	; (97bc <main+0x1bc>)
    9716:	47b0      	blx	r6

		
		
		
	// Register the Interrupts and assign the pins to the functions	
	ext_irq_register(PIN_PB07, count_encoderA);
    9718:	4929      	ldr	r1, [pc, #164]	; (97c0 <main+0x1c0>)
    971a:	2027      	movs	r0, #39	; 0x27
    971c:	4d29      	ldr	r5, [pc, #164]	; (97c4 <main+0x1c4>)
    971e:	47a8      	blx	r5
	ext_irq_register(PIN_PD00, count_encoderB);
    9720:	4929      	ldr	r1, [pc, #164]	; (97c8 <main+0x1c8>)
    9722:	2060      	movs	r0, #96	; 0x60
    9724:	47a8      	blx	r5
	
	
	
		

	vTaskStartScheduler();
    9726:	4b29      	ldr	r3, [pc, #164]	; (97cc <main+0x1cc>)
    9728:	4798      	blx	r3
	
	//Should never reach here as vTaskStartScheduler is infinitely blocking
	//If we DO reach here then there is insufficient RAM
	printf("Insufficient RTOS heap available to create the idle or timer daemon tasks");
    972a:	4829      	ldr	r0, [pc, #164]	; (97d0 <main+0x1d0>)
    972c:	4b29      	ldr	r3, [pc, #164]	; (97d4 <main+0x1d4>)
    972e:	4798      	blx	r3

	return 0;
}
    9730:	4620      	mov	r0, r4
    9732:	b005      	add	sp, #20
    9734:	ecbd 8b02 	vpop	{d8}
    9738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    973c:	f3af 8000 	nop.w
    9740:	11111111 	.word	0x11111111
    9744:	3fa11111 	.word	0x3fa11111
    9748:	eb1c432d 	.word	0xeb1c432d
    974c:	3f0a36e2 	.word	0x3f0a36e2
	...
    9758:	d2f1a9fc 	.word	0xd2f1a9fc
    975c:	3f40624d 	.word	0x3f40624d
    9760:	000002d1 	.word	0x000002d1
    9764:	200081a8 	.word	0x200081a8
    9768:	00009469 	.word	0x00009469
    976c:	000094d1 	.word	0x000094d1
    9770:	c2480000 	.word	0xc2480000
    9774:	00009445 	.word	0x00009445
    9778:	42480000 	.word	0x42480000
    977c:	000097f5 	.word	0x000097f5
    9780:	00009439 	.word	0x00009439
    9784:	3ff00000 	.word	0x3ff00000
    9788:	000094a1 	.word	0x000094a1
    978c:	000094e9 	.word	0x000094e9
    9790:	bf800000 	.word	0xbf800000
    9794:	41400000 	.word	0x41400000
    9798:	be800000 	.word	0xbe800000
    979c:	0000c119 	.word	0x0000c119
    97a0:	0000a065 	.word	0x0000a065
    97a4:	0000a135 	.word	0x0000a135
    97a8:	e000e100 	.word	0xe000e100
    97ac:	0000d56c 	.word	0x0000d56c
    97b0:	00000c7d 	.word	0x00000c7d
    97b4:	0000a8a1 	.word	0x0000a8a1
    97b8:	0000d57c 	.word	0x0000d57c
    97bc:	000095a1 	.word	0x000095a1
    97c0:	000092fd 	.word	0x000092fd
    97c4:	00000fe5 	.word	0x00000fe5
    97c8:	00009221 	.word	0x00009221
    97cc:	0000a9f9 	.word	0x0000a9f9
    97d0:	0000d588 	.word	0x0000d588
    97d4:	0000c281 	.word	0x0000c281
    97d8:	000097e5 	.word	0x000097e5
    97dc:	00009501 	.word	0x00009501
    97e0:	0000947d 	.word	0x0000947d

000097e4 <setInputBounds>:
 * @param lower The lower input bound.
 * @param upper The upper input bound.
 */
void setInputBounds(PIDController *controller, int lower, int upper) {

	if(upper > lower) {
    97e4:	428a      	cmp	r2, r1
    97e6:	dd04      	ble.n	97f2 <setInputBounds+0xe>
		controller->inputBounded = 1;
    97e8:	2301      	movs	r3, #1
    97ea:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		controller->inputUpperBound = upper;
    97ee:	6682      	str	r2, [r0, #104]	; 0x68
		controller->inputLowerBound = lower;
    97f0:	6641      	str	r1, [r0, #100]	; 0x64
    97f2:	4770      	bx	lr

000097f4 <setOutputBounds>:
 * @param lower The lower output bound.
 * @param upper The upper output bound.
 */
void setOutputBounds(PIDController *controller, int lower, int upper) {

	if(upper > lower) {
    97f4:	428a      	cmp	r2, r1
    97f6:	dd04      	ble.n	9802 <setOutputBounds+0xe>
		controller->outputBounded = 1;
    97f8:	2301      	movs	r3, #1
    97fa:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		controller->outputLowerBound = lower;
    97fe:	6701      	str	r1, [r0, #112]	; 0x70
		controller->outputUpperBound = upper;
    9800:	6742      	str	r2, [r0, #116]	; 0x74
    9802:	4770      	bx	lr

00009804 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    9804:	b958      	cbnz	r0, 981e <_read+0x1a>
{
    9806:	b508      	push	{r3, lr}
    9808:	460b      	mov	r3, r1
    980a:	4611      	mov	r1, r2
    980c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    980e:	4b05      	ldr	r3, [pc, #20]	; (9824 <_read+0x20>)
    9810:	4798      	blx	r3
	if (n < 0) {
    9812:	2800      	cmp	r0, #0
    9814:	db00      	blt.n	9818 <_read+0x14>
		return -1;
	}

	return n;
}
    9816:	bd08      	pop	{r3, pc}
		return -1;
    9818:	f04f 30ff 	mov.w	r0, #4294967295
    981c:	bd08      	pop	{r3, pc}
		return -1;
    981e:	f04f 30ff 	mov.w	r0, #4294967295
    9822:	4770      	bx	lr
    9824:	0000987d 	.word	0x0000987d

00009828 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    9828:	3801      	subs	r0, #1
    982a:	2802      	cmp	r0, #2
    982c:	d80b      	bhi.n	9846 <_write+0x1e>
{
    982e:	b508      	push	{r3, lr}
    9830:	460b      	mov	r3, r1
    9832:	4611      	mov	r1, r2
    9834:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    9836:	4b05      	ldr	r3, [pc, #20]	; (984c <_write+0x24>)
    9838:	4798      	blx	r3
	if (n < 0) {
    983a:	2800      	cmp	r0, #0
    983c:	db00      	blt.n	9840 <_write+0x18>
		return -1;
	}

	return n;
}
    983e:	bd08      	pop	{r3, pc}
		return -1;
    9840:	f04f 30ff 	mov.w	r0, #4294967295
    9844:	bd08      	pop	{r3, pc}
		return -1;
    9846:	f04f 30ff 	mov.w	r0, #4294967295
    984a:	4770      	bx	lr
    984c:	000098a1 	.word	0x000098a1

00009850 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    9850:	b570      	push	{r4, r5, r6, lr}
    9852:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    9854:	4d06      	ldr	r5, [pc, #24]	; (9870 <stdio_io_init+0x20>)
    9856:	682b      	ldr	r3, [r5, #0]
    9858:	2100      	movs	r1, #0
    985a:	6898      	ldr	r0, [r3, #8]
    985c:	4c05      	ldr	r4, [pc, #20]	; (9874 <stdio_io_init+0x24>)
    985e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    9860:	682b      	ldr	r3, [r5, #0]
    9862:	2100      	movs	r1, #0
    9864:	6858      	ldr	r0, [r3, #4]
    9866:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    9868:	4b03      	ldr	r3, [pc, #12]	; (9878 <stdio_io_init+0x28>)
    986a:	601e      	str	r6, [r3, #0]
    986c:	bd70      	pop	{r4, r5, r6, pc}
    986e:	bf00      	nop
    9870:	20000050 	.word	0x20000050
    9874:	0000c399 	.word	0x0000c399
    9878:	20008360 	.word	0x20008360

0000987c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    987c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    987e:	4b06      	ldr	r3, [pc, #24]	; (9898 <stdio_io_read+0x1c>)
    9880:	681b      	ldr	r3, [r3, #0]
    9882:	b133      	cbz	r3, 9892 <stdio_io_read+0x16>
    9884:	460a      	mov	r2, r1
    9886:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    9888:	b292      	uxth	r2, r2
    988a:	4618      	mov	r0, r3
    988c:	4b03      	ldr	r3, [pc, #12]	; (989c <stdio_io_read+0x20>)
    988e:	4798      	blx	r3
    9890:	bd08      	pop	{r3, pc}
		return 0;
    9892:	2000      	movs	r0, #0
}
    9894:	bd08      	pop	{r3, pc}
    9896:	bf00      	nop
    9898:	20008360 	.word	0x20008360
    989c:	00001109 	.word	0x00001109

000098a0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    98a0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    98a2:	4b06      	ldr	r3, [pc, #24]	; (98bc <stdio_io_write+0x1c>)
    98a4:	681b      	ldr	r3, [r3, #0]
    98a6:	b133      	cbz	r3, 98b6 <stdio_io_write+0x16>
    98a8:	460a      	mov	r2, r1
    98aa:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    98ac:	b292      	uxth	r2, r2
    98ae:	4618      	mov	r0, r3
    98b0:	4b03      	ldr	r3, [pc, #12]	; (98c0 <stdio_io_write+0x20>)
    98b2:	4798      	blx	r3
    98b4:	bd08      	pop	{r3, pc}
		return 0;
    98b6:	2000      	movs	r0, #0
}
    98b8:	bd08      	pop	{r3, pc}
    98ba:	bf00      	nop
    98bc:	20008360 	.word	0x20008360
    98c0:	000010d5 	.word	0x000010d5

000098c4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    98c4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    98c6:	4c04      	ldr	r4, [pc, #16]	; (98d8 <stdio_redirect_init+0x14>)
    98c8:	4620      	mov	r0, r4
    98ca:	4b04      	ldr	r3, [pc, #16]	; (98dc <stdio_redirect_init+0x18>)
    98cc:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    98ce:	4620      	mov	r0, r4
    98d0:	4b03      	ldr	r3, [pc, #12]	; (98e0 <stdio_redirect_init+0x1c>)
    98d2:	4798      	blx	r3
    98d4:	bd10      	pop	{r4, pc}
    98d6:	bf00      	nop
    98d8:	200128f4 	.word	0x200128f4
    98dc:	000014f1 	.word	0x000014f1
    98e0:	00009851 	.word	0x00009851

000098e4 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    98e4:	f100 0308 	add.w	r3, r0, #8
    98e8:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    98ea:	f04f 32ff 	mov.w	r2, #4294967295
    98ee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    98f0:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    98f2:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    98f4:	2300      	movs	r3, #0
    98f6:	6003      	str	r3, [r0, #0]
    98f8:	4770      	bx	lr

000098fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    98fa:	2300      	movs	r3, #0
    98fc:	6103      	str	r3, [r0, #16]
    98fe:	4770      	bx	lr

00009900 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    9900:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    9902:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    9904:	689a      	ldr	r2, [r3, #8]
    9906:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    9908:	689a      	ldr	r2, [r3, #8]
    990a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    990c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    990e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    9910:	6803      	ldr	r3, [r0, #0]
    9912:	3301      	adds	r3, #1
    9914:	6003      	str	r3, [r0, #0]
    9916:	4770      	bx	lr

00009918 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    9918:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    991a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    991c:	f1b5 3fff 	cmp.w	r5, #4294967295
    9920:	d002      	beq.n	9928 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    9922:	f100 0208 	add.w	r2, r0, #8
    9926:	e002      	b.n	992e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    9928:	6902      	ldr	r2, [r0, #16]
    992a:	e004      	b.n	9936 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    992c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    992e:	6853      	ldr	r3, [r2, #4]
    9930:	681c      	ldr	r4, [r3, #0]
    9932:	42a5      	cmp	r5, r4
    9934:	d2fa      	bcs.n	992c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    9936:	6853      	ldr	r3, [r2, #4]
    9938:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    993a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    993c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    993e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    9940:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    9942:	6803      	ldr	r3, [r0, #0]
    9944:	3301      	adds	r3, #1
    9946:	6003      	str	r3, [r0, #0]
}
    9948:	bc30      	pop	{r4, r5}
    994a:	4770      	bx	lr

0000994c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    994c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    994e:	6842      	ldr	r2, [r0, #4]
    9950:	6881      	ldr	r1, [r0, #8]
    9952:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    9954:	6882      	ldr	r2, [r0, #8]
    9956:	6841      	ldr	r1, [r0, #4]
    9958:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    995a:	685a      	ldr	r2, [r3, #4]
    995c:	4290      	cmp	r0, r2
    995e:	d005      	beq.n	996c <uxListRemove+0x20>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    9960:	2200      	movs	r2, #0
    9962:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    9964:	6818      	ldr	r0, [r3, #0]
    9966:	3801      	subs	r0, #1
    9968:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    996a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    996c:	6882      	ldr	r2, [r0, #8]
    996e:	605a      	str	r2, [r3, #4]
    9970:	e7f6      	b.n	9960 <uxListRemove+0x14>
	...

00009974 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    9974:	4b0b      	ldr	r3, [pc, #44]	; (99a4 <prvTaskExitError+0x30>)
    9976:	681b      	ldr	r3, [r3, #0]
    9978:	f1b3 3fff 	cmp.w	r3, #4294967295
    997c:	d008      	beq.n	9990 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    997e:	f04f 0380 	mov.w	r3, #128	; 0x80
    9982:	f383 8811 	msr	BASEPRI, r3
    9986:	f3bf 8f6f 	isb	sy
    998a:	f3bf 8f4f 	dsb	sy
    998e:	e7fe      	b.n	998e <prvTaskExitError+0x1a>
    9990:	f04f 0380 	mov.w	r3, #128	; 0x80
    9994:	f383 8811 	msr	BASEPRI, r3
    9998:	f3bf 8f6f 	isb	sy
    999c:	f3bf 8f4f 	dsb	sy
    99a0:	e7fe      	b.n	99a0 <prvTaskExitError+0x2c>
    99a2:	bf00      	nop
    99a4:	20000048 	.word	0x20000048

000099a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask(void)
{
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    99a8:	4806      	ldr	r0, [pc, #24]	; (99c4 <prvPortStartFirstTask+0x1c>)
    99aa:	6800      	ldr	r0, [r0, #0]
    99ac:	6800      	ldr	r0, [r0, #0]
    99ae:	f380 8808 	msr	MSP, r0
    99b2:	b662      	cpsie	i
    99b4:	b661      	cpsie	f
    99b6:	f3bf 8f4f 	dsb	sy
    99ba:	f3bf 8f6f 	isb	sy
    99be:	df00      	svc	0
    99c0:	bf00      	nop
    99c2:	0000      	.short	0x0000
    99c4:	e000ed08 	.word	0xe000ed08

000099c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    99c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 99d8 <vPortEnableVFP+0x10>
    99cc:	6801      	ldr	r1, [r0, #0]
    99ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    99d2:	6001      	str	r1, [r0, #0]
    99d4:	4770      	bx	lr
    99d6:	0000      	.short	0x0000
    99d8:	e000ed88 	.word	0xe000ed88

000099dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    99dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    99e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    99e4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    99e8:	4b05      	ldr	r3, [pc, #20]	; (9a00 <pxPortInitialiseStack+0x24>)
    99ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    99ee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
    99f2:	f06f 0302 	mvn.w	r3, #2
    99f6:	f840 3c24 	str.w	r3, [r0, #-36]
}
    99fa:	3844      	subs	r0, #68	; 0x44
    99fc:	4770      	bx	lr
    99fe:	bf00      	nop
    9a00:	00009975 	.word	0x00009975

00009a04 <SVCall_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    9a04:	4b06      	ldr	r3, [pc, #24]	; (9a20 <pxCurrentTCBConst2>)
    9a06:	6819      	ldr	r1, [r3, #0]
    9a08:	6808      	ldr	r0, [r1, #0]
    9a0a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a0e:	f380 8809 	msr	PSP, r0
    9a12:	f3bf 8f6f 	isb	sy
    9a16:	f04f 0000 	mov.w	r0, #0
    9a1a:	f380 8811 	msr	BASEPRI, r0
    9a1e:	4770      	bx	lr

00009a20 <pxCurrentTCBConst2>:
    9a20:	20012864 	.word	0x20012864

00009a24 <vPortEnterCritical>:
    9a24:	f04f 0380 	mov.w	r3, #128	; 0x80
    9a28:	f383 8811 	msr	BASEPRI, r3
    9a2c:	f3bf 8f6f 	isb	sy
    9a30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    9a34:	4a0a      	ldr	r2, [pc, #40]	; (9a60 <vPortEnterCritical+0x3c>)
    9a36:	6813      	ldr	r3, [r2, #0]
    9a38:	3301      	adds	r3, #1
    9a3a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    9a3c:	2b01      	cmp	r3, #1
    9a3e:	d10d      	bne.n	9a5c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    9a40:	4b08      	ldr	r3, [pc, #32]	; (9a64 <vPortEnterCritical+0x40>)
    9a42:	681b      	ldr	r3, [r3, #0]
    9a44:	f013 0fff 	tst.w	r3, #255	; 0xff
    9a48:	d008      	beq.n	9a5c <vPortEnterCritical+0x38>
    9a4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    9a4e:	f383 8811 	msr	BASEPRI, r3
    9a52:	f3bf 8f6f 	isb	sy
    9a56:	f3bf 8f4f 	dsb	sy
    9a5a:	e7fe      	b.n	9a5a <vPortEnterCritical+0x36>
    9a5c:	4770      	bx	lr
    9a5e:	bf00      	nop
    9a60:	20000048 	.word	0x20000048
    9a64:	e000ed04 	.word	0xe000ed04

00009a68 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    9a68:	4b09      	ldr	r3, [pc, #36]	; (9a90 <vPortExitCritical+0x28>)
    9a6a:	681b      	ldr	r3, [r3, #0]
    9a6c:	b943      	cbnz	r3, 9a80 <vPortExitCritical+0x18>
    9a6e:	f04f 0380 	mov.w	r3, #128	; 0x80
    9a72:	f383 8811 	msr	BASEPRI, r3
    9a76:	f3bf 8f6f 	isb	sy
    9a7a:	f3bf 8f4f 	dsb	sy
    9a7e:	e7fe      	b.n	9a7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    9a80:	3b01      	subs	r3, #1
    9a82:	4a03      	ldr	r2, [pc, #12]	; (9a90 <vPortExitCritical+0x28>)
    9a84:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    9a86:	b90b      	cbnz	r3, 9a8c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    9a88:	f383 8811 	msr	BASEPRI, r3
    9a8c:	4770      	bx	lr
    9a8e:	bf00      	nop
    9a90:	20000048 	.word	0x20000048

00009a94 <PendSV_Handler>:
	__asm volatile(
    9a94:	f3ef 8009 	mrs	r0, PSP
    9a98:	f3bf 8f6f 	isb	sy
    9a9c:	4b14      	ldr	r3, [pc, #80]	; (9af0 <pxCurrentTCBConst>)
    9a9e:	681a      	ldr	r2, [r3, #0]
    9aa0:	f01e 0f10 	tst.w	lr, #16
    9aa4:	bf08      	it	eq
    9aa6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    9aaa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aae:	6010      	str	r0, [r2, #0]
    9ab0:	f84d 3d04 	str.w	r3, [sp, #-4]!
    9ab4:	f04f 0080 	mov.w	r0, #128	; 0x80
    9ab8:	f380 8811 	msr	BASEPRI, r0
    9abc:	f3bf 8f4f 	dsb	sy
    9ac0:	f3bf 8f6f 	isb	sy
    9ac4:	f001 f986 	bl	add4 <vTaskSwitchContext>
    9ac8:	f04f 0000 	mov.w	r0, #0
    9acc:	f380 8811 	msr	BASEPRI, r0
    9ad0:	bc08      	pop	{r3}
    9ad2:	6819      	ldr	r1, [r3, #0]
    9ad4:	6808      	ldr	r0, [r1, #0]
    9ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ada:	f01e 0f10 	tst.w	lr, #16
    9ade:	bf08      	it	eq
    9ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    9ae4:	f380 8809 	msr	PSP, r0
    9ae8:	f3bf 8f6f 	isb	sy
    9aec:	4770      	bx	lr
    9aee:	bf00      	nop

00009af0 <pxCurrentTCBConst>:
    9af0:	20012864 	.word	0x20012864

00009af4 <SysTick_Handler>:
{
    9af4:	b508      	push	{r3, lr}
	__asm volatile("	mrs %0, basepri											\n"
    9af6:	f3ef 8311 	mrs	r3, BASEPRI
    9afa:	f04f 0280 	mov.w	r2, #128	; 0x80
    9afe:	f382 8811 	msr	BASEPRI, r2
    9b02:	f3bf 8f6f 	isb	sy
    9b06:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    9b0a:	4b05      	ldr	r3, [pc, #20]	; (9b20 <SysTick_Handler+0x2c>)
    9b0c:	4798      	blx	r3
    9b0e:	b118      	cbz	r0, 9b18 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    9b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9b14:	4b03      	ldr	r3, [pc, #12]	; (9b24 <SysTick_Handler+0x30>)
    9b16:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    9b18:	2300      	movs	r3, #0
    9b1a:	f383 8811 	msr	BASEPRI, r3
    9b1e:	bd08      	pop	{r3, pc}
    9b20:	0000aa99 	.word	0x0000aa99
    9b24:	e000ed04 	.word	0xe000ed04

00009b28 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    9b28:	f642 62df 	movw	r2, #11999	; 0x2edf
    9b2c:	4b02      	ldr	r3, [pc, #8]	; (9b38 <vPortSetupTimerInterrupt+0x10>)
    9b2e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    9b30:	2207      	movs	r2, #7
    9b32:	3b04      	subs	r3, #4
    9b34:	601a      	str	r2, [r3, #0]
    9b36:	4770      	bx	lr
    9b38:	e000e014 	.word	0xe000e014

00009b3c <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    9b3c:	4b31      	ldr	r3, [pc, #196]	; (9c04 <xPortStartScheduler+0xc8>)
    9b3e:	681a      	ldr	r2, [r3, #0]
    9b40:	4b31      	ldr	r3, [pc, #196]	; (9c08 <xPortStartScheduler+0xcc>)
    9b42:	429a      	cmp	r2, r3
    9b44:	d019      	beq.n	9b7a <xPortStartScheduler+0x3e>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    9b46:	4b2f      	ldr	r3, [pc, #188]	; (9c04 <xPortStartScheduler+0xc8>)
    9b48:	681a      	ldr	r2, [r3, #0]
    9b4a:	4b30      	ldr	r3, [pc, #192]	; (9c0c <xPortStartScheduler+0xd0>)
    9b4c:	429a      	cmp	r2, r3
    9b4e:	d01d      	beq.n	9b8c <xPortStartScheduler+0x50>
{
    9b50:	b500      	push	{lr}
    9b52:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    9b54:	4b2e      	ldr	r3, [pc, #184]	; (9c10 <xPortStartScheduler+0xd4>)
    9b56:	781a      	ldrb	r2, [r3, #0]
    9b58:	b2d2      	uxtb	r2, r2
    9b5a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    9b5c:	22ff      	movs	r2, #255	; 0xff
    9b5e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    9b60:	781b      	ldrb	r3, [r3, #0]
    9b62:	b2db      	uxtb	r3, r3
    9b64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    9b68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    9b70:	4a28      	ldr	r2, [pc, #160]	; (9c14 <xPortStartScheduler+0xd8>)
    9b72:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    9b74:	2307      	movs	r3, #7
    9b76:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    9b78:	e01b      	b.n	9bb2 <xPortStartScheduler+0x76>
	__asm volatile("	mov %0, %1												\n"
    9b7a:	f04f 0380 	mov.w	r3, #128	; 0x80
    9b7e:	f383 8811 	msr	BASEPRI, r3
    9b82:	f3bf 8f6f 	isb	sy
    9b86:	f3bf 8f4f 	dsb	sy
    9b8a:	e7fe      	b.n	9b8a <xPortStartScheduler+0x4e>
    9b8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    9b90:	f383 8811 	msr	BASEPRI, r3
    9b94:	f3bf 8f6f 	isb	sy
    9b98:	f3bf 8f4f 	dsb	sy
    9b9c:	e7fe      	b.n	9b9c <xPortStartScheduler+0x60>
			ulMaxPRIGROUPValue--;
    9b9e:	4a1d      	ldr	r2, [pc, #116]	; (9c14 <xPortStartScheduler+0xd8>)
    9ba0:	6853      	ldr	r3, [r2, #4]
    9ba2:	3b01      	subs	r3, #1
    9ba4:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= (uint8_t)0x01;
    9ba6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9baa:	005b      	lsls	r3, r3, #1
    9bac:	b2db      	uxtb	r3, r3
    9bae:	f88d 3003 	strb.w	r3, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    9bb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9bb6:	f013 0f80 	tst.w	r3, #128	; 0x80
    9bba:	d1f0      	bne.n	9b9e <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    9bbc:	4a15      	ldr	r2, [pc, #84]	; (9c14 <xPortStartScheduler+0xd8>)
    9bbe:	6853      	ldr	r3, [r2, #4]
    9bc0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    9bc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    9bc6:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    9bc8:	9b01      	ldr	r3, [sp, #4]
    9bca:	b2db      	uxtb	r3, r3
    9bcc:	4a10      	ldr	r2, [pc, #64]	; (9c10 <xPortStartScheduler+0xd4>)
    9bce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    9bd0:	4b11      	ldr	r3, [pc, #68]	; (9c18 <xPortStartScheduler+0xdc>)
    9bd2:	681a      	ldr	r2, [r3, #0]
    9bd4:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    9bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    9bda:	681a      	ldr	r2, [r3, #0]
    9bdc:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    9be0:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    9be2:	4b0e      	ldr	r3, [pc, #56]	; (9c1c <xPortStartScheduler+0xe0>)
    9be4:	4798      	blx	r3
	uxCriticalNesting = 0;
    9be6:	2200      	movs	r2, #0
    9be8:	4b0d      	ldr	r3, [pc, #52]	; (9c20 <xPortStartScheduler+0xe4>)
    9bea:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
    9bec:	4b0d      	ldr	r3, [pc, #52]	; (9c24 <xPortStartScheduler+0xe8>)
    9bee:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    9bf0:	4a0d      	ldr	r2, [pc, #52]	; (9c28 <xPortStartScheduler+0xec>)
    9bf2:	6813      	ldr	r3, [r2, #0]
    9bf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    9bf8:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    9bfa:	4b0c      	ldr	r3, [pc, #48]	; (9c2c <xPortStartScheduler+0xf0>)
    9bfc:	4798      	blx	r3
	prvTaskExitError();
    9bfe:	4b0c      	ldr	r3, [pc, #48]	; (9c30 <xPortStartScheduler+0xf4>)
    9c00:	4798      	blx	r3
    9c02:	bf00      	nop
    9c04:	e000ed00 	.word	0xe000ed00
    9c08:	410fc271 	.word	0x410fc271
    9c0c:	410fc270 	.word	0x410fc270
    9c10:	e000e400 	.word	0xe000e400
    9c14:	20008364 	.word	0x20008364
    9c18:	e000ed20 	.word	0xe000ed20
    9c1c:	00009b29 	.word	0x00009b29
    9c20:	20000048 	.word	0x20000048
    9c24:	000099c9 	.word	0x000099c9
    9c28:	e000ef34 	.word	0xe000ef34
    9c2c:	000099a9 	.word	0x000099a9
    9c30:	00009975 	.word	0x00009975

00009c34 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt));
    9c34:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    9c38:	2b0f      	cmp	r3, #15
    9c3a:	d90f      	bls.n	9c5c <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    9c3c:	4a10      	ldr	r2, [pc, #64]	; (9c80 <vPortValidateInterruptPriority+0x4c>)
    9c3e:	5c9b      	ldrb	r3, [r3, r2]
    9c40:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    9c42:	4a10      	ldr	r2, [pc, #64]	; (9c84 <vPortValidateInterruptPriority+0x50>)
    9c44:	7812      	ldrb	r2, [r2, #0]
    9c46:	4293      	cmp	r3, r2
    9c48:	d208      	bcs.n	9c5c <vPortValidateInterruptPriority+0x28>
    9c4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    9c4e:	f383 8811 	msr	BASEPRI, r3
    9c52:	f3bf 8f6f 	isb	sy
    9c56:	f3bf 8f4f 	dsb	sy
    9c5a:	e7fe      	b.n	9c5a <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredicable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    9c5c:	4b0a      	ldr	r3, [pc, #40]	; (9c88 <vPortValidateInterruptPriority+0x54>)
    9c5e:	681b      	ldr	r3, [r3, #0]
    9c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    9c64:	4a07      	ldr	r2, [pc, #28]	; (9c84 <vPortValidateInterruptPriority+0x50>)
    9c66:	6852      	ldr	r2, [r2, #4]
    9c68:	4293      	cmp	r3, r2
    9c6a:	d908      	bls.n	9c7e <vPortValidateInterruptPriority+0x4a>
    9c6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    9c70:	f383 8811 	msr	BASEPRI, r3
    9c74:	f3bf 8f6f 	isb	sy
    9c78:	f3bf 8f4f 	dsb	sy
    9c7c:	e7fe      	b.n	9c7c <vPortValidateInterruptPriority+0x48>
    9c7e:	4770      	bx	lr
    9c80:	e000e3f0 	.word	0xe000e3f0
    9c84:	20008364 	.word	0x20008364
    9c88:	e000ed0c 	.word	0xe000ed0c

00009c8c <prvHeapInit>:
{
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *    pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    9c8c:	4a09      	ldr	r2, [pc, #36]	; (9cb4 <prvHeapInit+0x28>)
	                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    9c8e:	f022 0207 	bic.w	r2, r2, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
    9c92:	4b09      	ldr	r3, [pc, #36]	; (9cb8 <prvHeapInit+0x2c>)
    9c94:	f8c3 2b58 	str.w	r2, [r3, #2904]	; 0xb58
	xStart.xBlockSize      = (size_t)0;
    9c98:	2000      	movs	r0, #0
    9c9a:	f8c3 0b5c 	str.w	r0, [r3, #2908]	; 0xb5c

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize      = configADJUSTED_HEAP_SIZE;
    9c9e:	f24a 4108 	movw	r1, #41992	; 0xa408
    9ca2:	f8c3 1b64 	str.w	r1, [r3, #2916]	; 0xb64
	xEnd.pxNextFreeBlock = NULL;
    9ca6:	f8c3 0b60 	str.w	r0, [r3, #2912]	; 0xb60

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock                  = (void *)pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize      = configADJUSTED_HEAP_SIZE;
    9caa:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    9cac:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
    9cb0:	6013      	str	r3, [r2, #0]
    9cb2:	4770      	bx	lr
    9cb4:	20008374 	.word	0x20008374
    9cb8:	20011c24 	.word	0x20011c24

00009cbc <pvPortMalloc>:
{
    9cbc:	b570      	push	{r4, r5, r6, lr}
    9cbe:	4604      	mov	r4, r0
	vTaskSuspendAll();
    9cc0:	4b26      	ldr	r3, [pc, #152]	; (9d5c <pvPortMalloc+0xa0>)
    9cc2:	4798      	blx	r3
		if (xHeapHasBeenInitialised == pdFALSE) {
    9cc4:	4b26      	ldr	r3, [pc, #152]	; (9d60 <pvPortMalloc+0xa4>)
    9cc6:	f8d3 3b68 	ldr.w	r3, [r3, #2920]	; 0xb68
    9cca:	b193      	cbz	r3, 9cf2 <pvPortMalloc+0x36>
		if (xWantedSize > 0) {
    9ccc:	b134      	cbz	r4, 9cdc <pvPortMalloc+0x20>
			xWantedSize += heapSTRUCT_SIZE;
    9cce:	3408      	adds	r4, #8
			if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0) {
    9cd0:	f014 0f07 	tst.w	r4, #7
    9cd4:	d002      	beq.n	9cdc <pvPortMalloc+0x20>
				xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    9cd6:	f024 0407 	bic.w	r4, r4, #7
    9cda:	3408      	adds	r4, #8
		if ((xWantedSize > 0) && (xWantedSize < configADJUSTED_HEAP_SIZE)) {
    9cdc:	1e62      	subs	r2, r4, #1
    9cde:	f24a 4306 	movw	r3, #41990	; 0xa406
    9ce2:	429a      	cmp	r2, r3
    9ce4:	d835      	bhi.n	9d52 <pvPortMalloc+0x96>
			pxBlock         = xStart.pxNextFreeBlock;
    9ce6:	491e      	ldr	r1, [pc, #120]	; (9d60 <pvPortMalloc+0xa4>)
    9ce8:	f8d1 3b58 	ldr.w	r3, [r1, #2904]	; 0xb58
			pxPreviousBlock = &xStart;
    9cec:	f601 3158 	addw	r1, r1, #2904	; 0xb58
			while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
    9cf0:	e008      	b.n	9d04 <pvPortMalloc+0x48>
			prvHeapInit();
    9cf2:	4b1c      	ldr	r3, [pc, #112]	; (9d64 <pvPortMalloc+0xa8>)
    9cf4:	4798      	blx	r3
			xHeapHasBeenInitialised = pdTRUE;
    9cf6:	2201      	movs	r2, #1
    9cf8:	4b19      	ldr	r3, [pc, #100]	; (9d60 <pvPortMalloc+0xa4>)
    9cfa:	f8c3 2b68 	str.w	r2, [r3, #2920]	; 0xb68
    9cfe:	e7e5      	b.n	9ccc <pvPortMalloc+0x10>
				pxPreviousBlock = pxBlock;
    9d00:	4619      	mov	r1, r3
				pxBlock         = pxBlock->pxNextFreeBlock;
    9d02:	4613      	mov	r3, r2
			while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
    9d04:	685a      	ldr	r2, [r3, #4]
    9d06:	4294      	cmp	r4, r2
    9d08:	d902      	bls.n	9d10 <pvPortMalloc+0x54>
    9d0a:	681a      	ldr	r2, [r3, #0]
    9d0c:	2a00      	cmp	r2, #0
    9d0e:	d1f7      	bne.n	9d00 <pvPortMalloc+0x44>
			if (pxBlock != &xEnd) {
    9d10:	4a15      	ldr	r2, [pc, #84]	; (9d68 <pvPortMalloc+0xac>)
    9d12:	4293      	cmp	r3, r2
    9d14:	d01f      	beq.n	9d56 <pvPortMalloc+0x9a>
				pvReturn = (void *)(((uint8_t *)pxPreviousBlock->pxNextFreeBlock) + heapSTRUCT_SIZE);
    9d16:	680d      	ldr	r5, [r1, #0]
    9d18:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    9d1a:	681a      	ldr	r2, [r3, #0]
    9d1c:	600a      	str	r2, [r1, #0]
				if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
    9d1e:	685a      	ldr	r2, [r3, #4]
    9d20:	1b12      	subs	r2, r2, r4
    9d22:	2a10      	cmp	r2, #16
    9d24:	d90c      	bls.n	9d40 <pvPortMalloc+0x84>
					pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
    9d26:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    9d28:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize        = xWantedSize;
    9d2a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList((pxNewBlockLink));
    9d2c:	6874      	ldr	r4, [r6, #4]
    9d2e:	490f      	ldr	r1, [pc, #60]	; (9d6c <pvPortMalloc+0xb0>)
    9d30:	e000      	b.n	9d34 <pvPortMalloc+0x78>
    9d32:	4611      	mov	r1, r2
    9d34:	680a      	ldr	r2, [r1, #0]
    9d36:	6850      	ldr	r0, [r2, #4]
    9d38:	4284      	cmp	r4, r0
    9d3a:	d8fa      	bhi.n	9d32 <pvPortMalloc+0x76>
    9d3c:	6032      	str	r2, [r6, #0]
    9d3e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    9d40:	6859      	ldr	r1, [r3, #4]
    9d42:	4a0b      	ldr	r2, [pc, #44]	; (9d70 <pvPortMalloc+0xb4>)
    9d44:	6813      	ldr	r3, [r2, #0]
    9d46:	1a5b      	subs	r3, r3, r1
    9d48:	6013      	str	r3, [r2, #0]
	(void)xTaskResumeAll();
    9d4a:	4b0a      	ldr	r3, [pc, #40]	; (9d74 <pvPortMalloc+0xb8>)
    9d4c:	4798      	blx	r3
}
    9d4e:	4628      	mov	r0, r5
    9d50:	bd70      	pop	{r4, r5, r6, pc}
	void *            pvReturn                = NULL;
    9d52:	2500      	movs	r5, #0
    9d54:	e7f9      	b.n	9d4a <pvPortMalloc+0x8e>
    9d56:	2500      	movs	r5, #0
    9d58:	e7f7      	b.n	9d4a <pvPortMalloc+0x8e>
    9d5a:	bf00      	nop
    9d5c:	0000aa79 	.word	0x0000aa79
    9d60:	20011c24 	.word	0x20011c24
    9d64:	00009c8d 	.word	0x00009c8d
    9d68:	20012784 	.word	0x20012784
    9d6c:	2001277c 	.word	0x2001277c
    9d70:	2000004c 	.word	0x2000004c
    9d74:	0000abc1 	.word	0x0000abc1

00009d78 <vPortFree>:
	if (pv != NULL) {
    9d78:	b1d0      	cbz	r0, 9db0 <vPortFree+0x38>
{
    9d7a:	b570      	push	{r4, r5, r6, lr}
    9d7c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    9d7e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    9d82:	4b0c      	ldr	r3, [pc, #48]	; (9db4 <vPortFree+0x3c>)
    9d84:	4798      	blx	r3
			prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
    9d86:	f855 4c04 	ldr.w	r4, [r5, #-4]
    9d8a:	4a0b      	ldr	r2, [pc, #44]	; (9db8 <vPortFree+0x40>)
    9d8c:	e000      	b.n	9d90 <vPortFree+0x18>
    9d8e:	461a      	mov	r2, r3
    9d90:	6813      	ldr	r3, [r2, #0]
    9d92:	6859      	ldr	r1, [r3, #4]
    9d94:	428c      	cmp	r4, r1
    9d96:	d8fa      	bhi.n	9d8e <vPortFree+0x16>
    9d98:	f845 3c08 	str.w	r3, [r5, #-8]
    9d9c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    9d9e:	f855 1c04 	ldr.w	r1, [r5, #-4]
    9da2:	4a06      	ldr	r2, [pc, #24]	; (9dbc <vPortFree+0x44>)
    9da4:	6813      	ldr	r3, [r2, #0]
    9da6:	440b      	add	r3, r1
    9da8:	6013      	str	r3, [r2, #0]
		(void)xTaskResumeAll();
    9daa:	4b05      	ldr	r3, [pc, #20]	; (9dc0 <vPortFree+0x48>)
    9dac:	4798      	blx	r3
    9dae:	bd70      	pop	{r4, r5, r6, pc}
    9db0:	4770      	bx	lr
    9db2:	bf00      	nop
    9db4:	0000aa79 	.word	0x0000aa79
    9db8:	2001277c 	.word	0x2001277c
    9dbc:	2000004c 	.word	0x2000004c
    9dc0:	0000abc1 	.word	0x0000abc1

00009dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    9dc4:	b510      	push	{r4, lr}
    9dc6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    9dc8:	4b06      	ldr	r3, [pc, #24]	; (9de4 <prvIsQueueFull+0x20>)
    9dca:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    9dcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9dd0:	429a      	cmp	r2, r3
    9dd2:	d004      	beq.n	9dde <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    9dd4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    9dd6:	4b04      	ldr	r3, [pc, #16]	; (9de8 <prvIsQueueFull+0x24>)
    9dd8:	4798      	blx	r3

	return xReturn;
}
    9dda:	4620      	mov	r0, r4
    9ddc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    9dde:	2401      	movs	r4, #1
    9de0:	e7f9      	b.n	9dd6 <prvIsQueueFull+0x12>
    9de2:	bf00      	nop
    9de4:	00009a25 	.word	0x00009a25
    9de8:	00009a69 	.word	0x00009a69

00009dec <prvIsQueueEmpty>:
{
    9dec:	b510      	push	{r4, lr}
    9dee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    9df0:	4b05      	ldr	r3, [pc, #20]	; (9e08 <prvIsQueueEmpty+0x1c>)
    9df2:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    9df4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9df6:	b123      	cbz	r3, 9e02 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
    9df8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    9dfa:	4b04      	ldr	r3, [pc, #16]	; (9e0c <prvIsQueueEmpty+0x20>)
    9dfc:	4798      	blx	r3
}
    9dfe:	4620      	mov	r0, r4
    9e00:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    9e02:	2401      	movs	r4, #1
    9e04:	e7f9      	b.n	9dfa <prvIsQueueEmpty+0xe>
    9e06:	bf00      	nop
    9e08:	00009a25 	.word	0x00009a25
    9e0c:	00009a69 	.word	0x00009a69

00009e10 <prvCopyDataToQueue>:
{
    9e10:	b538      	push	{r3, r4, r5, lr}
    9e12:	4604      	mov	r4, r0
    9e14:	4615      	mov	r5, r2
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    9e16:	6c02      	ldr	r2, [r0, #64]	; 0x40
    9e18:	b95a      	cbnz	r2, 9e32 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    9e1a:	6803      	ldr	r3, [r0, #0]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d12e      	bne.n	9e7e <prvCopyDataToQueue+0x6e>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    9e20:	6840      	ldr	r0, [r0, #4]
    9e22:	4b1b      	ldr	r3, [pc, #108]	; (9e90 <prvCopyDataToQueue+0x80>)
    9e24:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    9e26:	2300      	movs	r3, #0
    9e28:	6063      	str	r3, [r4, #4]
	++(pxQueue->uxMessagesWaiting);
    9e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9e2c:	3301      	adds	r3, #1
    9e2e:	63a3      	str	r3, [r4, #56]	; 0x38
}
    9e30:	bd38      	pop	{r3, r4, r5, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    9e32:	b96d      	cbnz	r5, 9e50 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    9e34:	6880      	ldr	r0, [r0, #8]
    9e36:	4b17      	ldr	r3, [pc, #92]	; (9e94 <prvCopyDataToQueue+0x84>)
    9e38:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    9e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    9e3c:	68a3      	ldr	r3, [r4, #8]
    9e3e:	4413      	add	r3, r2
    9e40:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    9e42:	6862      	ldr	r2, [r4, #4]
    9e44:	4293      	cmp	r3, r2
    9e46:	d31c      	bcc.n	9e82 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    9e48:	6823      	ldr	r3, [r4, #0]
    9e4a:	60a3      	str	r3, [r4, #8]
	BaseType_t xReturn = pdFALSE;
    9e4c:	2000      	movs	r0, #0
    9e4e:	e7ec      	b.n	9e2a <prvCopyDataToQueue+0x1a>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    9e50:	68c0      	ldr	r0, [r0, #12]
    9e52:	4b10      	ldr	r3, [pc, #64]	; (9e94 <prvCopyDataToQueue+0x84>)
    9e54:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    9e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9e58:	425b      	negs	r3, r3
    9e5a:	68e2      	ldr	r2, [r4, #12]
    9e5c:	441a      	add	r2, r3
    9e5e:	60e2      	str	r2, [r4, #12]
		    < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest
    9e60:	6821      	ldr	r1, [r4, #0]
		if (pxQueue->u.pcReadFrom
    9e62:	428a      	cmp	r2, r1
    9e64:	d202      	bcs.n	9e6c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    9e66:	6862      	ldr	r2, [r4, #4]
    9e68:	4413      	add	r3, r2
    9e6a:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    9e6c:	2d02      	cmp	r5, #2
    9e6e:	d10a      	bne.n	9e86 <prvCopyDataToQueue+0x76>
			if (pxQueue->uxMessagesWaiting > (UBaseType_t)0) {
    9e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9e72:	b153      	cbz	r3, 9e8a <prvCopyDataToQueue+0x7a>
				--(pxQueue->uxMessagesWaiting);
    9e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9e76:	3b01      	subs	r3, #1
    9e78:	63a3      	str	r3, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    9e7a:	2000      	movs	r0, #0
    9e7c:	e7d5      	b.n	9e2a <prvCopyDataToQueue+0x1a>
    9e7e:	2000      	movs	r0, #0
    9e80:	e7d3      	b.n	9e2a <prvCopyDataToQueue+0x1a>
    9e82:	2000      	movs	r0, #0
    9e84:	e7d1      	b.n	9e2a <prvCopyDataToQueue+0x1a>
    9e86:	2000      	movs	r0, #0
    9e88:	e7cf      	b.n	9e2a <prvCopyDataToQueue+0x1a>
    9e8a:	2000      	movs	r0, #0
    9e8c:	e7cd      	b.n	9e2a <prvCopyDataToQueue+0x1a>
    9e8e:	bf00      	nop
    9e90:	0000b141 	.word	0x0000b141
    9e94:	0000c103 	.word	0x0000c103

00009e98 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    9e98:	b530      	push	{r4, r5, lr}
    9e9a:	b083      	sub	sp, #12
    9e9c:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    9e9e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    9ea0:	b164      	cbz	r4, 9ebc <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    9ea2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9ea4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9ea6:	429a      	cmp	r2, r3
    9ea8:	d311      	bcc.n	9ece <prvNotifyQueueSetContainer+0x36>
    9eaa:	f04f 0380 	mov.w	r3, #128	; 0x80
    9eae:	f383 8811 	msr	BASEPRI, r3
    9eb2:	f3bf 8f6f 	isb	sy
    9eb6:	f3bf 8f4f 	dsb	sy
    9eba:	e7fe      	b.n	9eba <prvNotifyQueueSetContainer+0x22>
    9ebc:	f04f 0380 	mov.w	r3, #128	; 0x80
    9ec0:	f383 8811 	msr	BASEPRI, r3
    9ec4:	f3bf 8f6f 	isb	sy
    9ec8:	f3bf 8f4f 	dsb	sy
    9ecc:	e7fe      	b.n	9ecc <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    9ece:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9ed0:	4293      	cmp	r3, r2
    9ed2:	d803      	bhi.n	9edc <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    9ed4:	2500      	movs	r5, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    9ed6:	4628      	mov	r0, r5
    9ed8:	b003      	add	sp, #12
    9eda:	bd30      	pop	{r4, r5, pc}
    9edc:	460a      	mov	r2, r1
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    9ede:	a901      	add	r1, sp, #4
    9ee0:	4620      	mov	r0, r4
    9ee2:	4b0b      	ldr	r3, [pc, #44]	; (9f10 <prvNotifyQueueSetContainer+0x78>)
    9ee4:	4798      	blx	r3
    9ee6:	4605      	mov	r5, r0
		if (pxQueueSetContainer->xTxLock == queueUNLOCKED) {
    9ee8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9eea:	f1b3 3fff 	cmp.w	r3, #4294967295
    9eee:	d10a      	bne.n	9f06 <prvNotifyQueueSetContainer+0x6e>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    9ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d0ef      	beq.n	9ed6 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    9ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9efa:	4b06      	ldr	r3, [pc, #24]	; (9f14 <prvNotifyQueueSetContainer+0x7c>)
    9efc:	4798      	blx	r3
    9efe:	2800      	cmp	r0, #0
    9f00:	d0e9      	beq.n	9ed6 <prvNotifyQueueSetContainer+0x3e>
					xReturn = pdTRUE;
    9f02:	2501      	movs	r5, #1
	return xReturn;
    9f04:	e7e7      	b.n	9ed6 <prvNotifyQueueSetContainer+0x3e>
			(pxQueueSetContainer->xTxLock)++;
    9f06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9f08:	3301      	adds	r3, #1
    9f0a:	64a3      	str	r3, [r4, #72]	; 0x48
    9f0c:	e7e3      	b.n	9ed6 <prvNotifyQueueSetContainer+0x3e>
    9f0e:	bf00      	nop
    9f10:	00009e11 	.word	0x00009e11
    9f14:	0000af39 	.word	0x0000af39

00009f18 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    9f18:	6c02      	ldr	r2, [r0, #64]	; 0x40
    9f1a:	b172      	cbz	r2, 9f3a <prvCopyDataFromQueue+0x22>
{
    9f1c:	b510      	push	{r4, lr}
    9f1e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    9f20:	68c4      	ldr	r4, [r0, #12]
    9f22:	4414      	add	r4, r2
    9f24:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    9f26:	6840      	ldr	r0, [r0, #4]
    9f28:	4284      	cmp	r4, r0
    9f2a:	d301      	bcc.n	9f30 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    9f2c:	6818      	ldr	r0, [r3, #0]
    9f2e:	60d8      	str	r0, [r3, #12]
    9f30:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    9f32:	68d9      	ldr	r1, [r3, #12]
    9f34:	4b01      	ldr	r3, [pc, #4]	; (9f3c <prvCopyDataFromQueue+0x24>)
    9f36:	4798      	blx	r3
    9f38:	bd10      	pop	{r4, pc}
    9f3a:	4770      	bx	lr
    9f3c:	0000c103 	.word	0x0000c103

00009f40 <prvUnlockQueue>:
{
    9f40:	b510      	push	{r4, lr}
    9f42:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    9f44:	4b1e      	ldr	r3, [pc, #120]	; (9fc0 <prvUnlockQueue+0x80>)
    9f46:	4798      	blx	r3
		while (pxQueue->xTxLock > queueLOCKED_UNMODIFIED) {
    9f48:	e009      	b.n	9f5e <prvUnlockQueue+0x1e>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    9f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9f4c:	b1cb      	cbz	r3, 9f82 <prvUnlockQueue+0x42>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    9f4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9f52:	4b1c      	ldr	r3, [pc, #112]	; (9fc4 <prvUnlockQueue+0x84>)
    9f54:	4798      	blx	r3
    9f56:	b988      	cbnz	r0, 9f7c <prvUnlockQueue+0x3c>
			--(pxQueue->xTxLock);
    9f58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9f5a:	3b01      	subs	r3, #1
    9f5c:	64a3      	str	r3, [r4, #72]	; 0x48
		while (pxQueue->xTxLock > queueLOCKED_UNMODIFIED) {
    9f5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9f60:	2b00      	cmp	r3, #0
    9f62:	dd0e      	ble.n	9f82 <prvUnlockQueue+0x42>
				if (pxQueue->pxQueueSetContainer != NULL) {
    9f64:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9f66:	2b00      	cmp	r3, #0
    9f68:	d0ef      	beq.n	9f4a <prvUnlockQueue+0xa>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) == pdTRUE) {
    9f6a:	2100      	movs	r1, #0
    9f6c:	4620      	mov	r0, r4
    9f6e:	4b16      	ldr	r3, [pc, #88]	; (9fc8 <prvUnlockQueue+0x88>)
    9f70:	4798      	blx	r3
    9f72:	2801      	cmp	r0, #1
    9f74:	d1f0      	bne.n	9f58 <prvUnlockQueue+0x18>
						vTaskMissedYield();
    9f76:	4b15      	ldr	r3, [pc, #84]	; (9fcc <prvUnlockQueue+0x8c>)
    9f78:	4798      	blx	r3
    9f7a:	e7ed      	b.n	9f58 <prvUnlockQueue+0x18>
							vTaskMissedYield();
    9f7c:	4b13      	ldr	r3, [pc, #76]	; (9fcc <prvUnlockQueue+0x8c>)
    9f7e:	4798      	blx	r3
    9f80:	e7ea      	b.n	9f58 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
    9f82:	f04f 33ff 	mov.w	r3, #4294967295
    9f86:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
    9f88:	4b11      	ldr	r3, [pc, #68]	; (9fd0 <prvUnlockQueue+0x90>)
    9f8a:	4798      	blx	r3
	taskENTER_CRITICAL();
    9f8c:	4b0c      	ldr	r3, [pc, #48]	; (9fc0 <prvUnlockQueue+0x80>)
    9f8e:	4798      	blx	r3
		while (pxQueue->xRxLock > queueLOCKED_UNMODIFIED) {
    9f90:	e002      	b.n	9f98 <prvUnlockQueue+0x58>
				--(pxQueue->xRxLock);
    9f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9f94:	3b01      	subs	r3, #1
    9f96:	6463      	str	r3, [r4, #68]	; 0x44
		while (pxQueue->xRxLock > queueLOCKED_UNMODIFIED) {
    9f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	dd0a      	ble.n	9fb4 <prvUnlockQueue+0x74>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    9f9e:	6923      	ldr	r3, [r4, #16]
    9fa0:	b143      	cbz	r3, 9fb4 <prvUnlockQueue+0x74>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    9fa2:	f104 0010 	add.w	r0, r4, #16
    9fa6:	4b07      	ldr	r3, [pc, #28]	; (9fc4 <prvUnlockQueue+0x84>)
    9fa8:	4798      	blx	r3
    9faa:	2800      	cmp	r0, #0
    9fac:	d0f1      	beq.n	9f92 <prvUnlockQueue+0x52>
					vTaskMissedYield();
    9fae:	4b07      	ldr	r3, [pc, #28]	; (9fcc <prvUnlockQueue+0x8c>)
    9fb0:	4798      	blx	r3
    9fb2:	e7ee      	b.n	9f92 <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
    9fb4:	f04f 33ff 	mov.w	r3, #4294967295
    9fb8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
    9fba:	4b05      	ldr	r3, [pc, #20]	; (9fd0 <prvUnlockQueue+0x90>)
    9fbc:	4798      	blx	r3
    9fbe:	bd10      	pop	{r4, pc}
    9fc0:	00009a25 	.word	0x00009a25
    9fc4:	0000af39 	.word	0x0000af39
    9fc8:	00009e99 	.word	0x00009e99
    9fcc:	0000b07d 	.word	0x0000b07d
    9fd0:	00009a69 	.word	0x00009a69

00009fd4 <xQueueGenericReset>:
{
    9fd4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    9fd6:	b308      	cbz	r0, a01c <xQueueGenericReset+0x48>
    9fd8:	4604      	mov	r4, r0
    9fda:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    9fdc:	4b1c      	ldr	r3, [pc, #112]	; (a050 <xQueueGenericReset+0x7c>)
    9fde:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    9fe0:	6821      	ldr	r1, [r4, #0]
    9fe2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9fe6:	fb03 1002 	mla	r0, r3, r2, r1
    9fea:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    9fec:	2000      	movs	r0, #0
    9fee:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    9ff0:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    9ff2:	3a01      	subs	r2, #1
    9ff4:	fb02 1303 	mla	r3, r2, r3, r1
    9ff8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock           = queueUNLOCKED;
    9ffa:	f04f 33ff 	mov.w	r3, #4294967295
    9ffe:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock           = queueUNLOCKED;
    a000:	64a3      	str	r3, [r4, #72]	; 0x48
		if (xNewQueue == pdFALSE) {
    a002:	b9ed      	cbnz	r5, a040 <xQueueGenericReset+0x6c>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    a004:	6923      	ldr	r3, [r4, #16]
    a006:	b12b      	cbz	r3, a014 <xQueueGenericReset+0x40>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) == pdTRUE) {
    a008:	f104 0010 	add.w	r0, r4, #16
    a00c:	4b11      	ldr	r3, [pc, #68]	; (a054 <xQueueGenericReset+0x80>)
    a00e:	4798      	blx	r3
    a010:	2801      	cmp	r0, #1
    a012:	d00c      	beq.n	a02e <xQueueGenericReset+0x5a>
	taskEXIT_CRITICAL();
    a014:	4b10      	ldr	r3, [pc, #64]	; (a058 <xQueueGenericReset+0x84>)
    a016:	4798      	blx	r3
}
    a018:	2001      	movs	r0, #1
    a01a:	bd38      	pop	{r3, r4, r5, pc}
    a01c:	f04f 0380 	mov.w	r3, #128	; 0x80
    a020:	f383 8811 	msr	BASEPRI, r3
    a024:	f3bf 8f6f 	isb	sy
    a028:	f3bf 8f4f 	dsb	sy
    a02c:	e7fe      	b.n	a02c <xQueueGenericReset+0x58>
					queueYIELD_IF_USING_PREEMPTION();
    a02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a032:	4b0a      	ldr	r3, [pc, #40]	; (a05c <xQueueGenericReset+0x88>)
    a034:	601a      	str	r2, [r3, #0]
    a036:	f3bf 8f4f 	dsb	sy
    a03a:	f3bf 8f6f 	isb	sy
    a03e:	e7e9      	b.n	a014 <xQueueGenericReset+0x40>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    a040:	f104 0010 	add.w	r0, r4, #16
    a044:	4d06      	ldr	r5, [pc, #24]	; (a060 <xQueueGenericReset+0x8c>)
    a046:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    a048:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a04c:	47a8      	blx	r5
    a04e:	e7e1      	b.n	a014 <xQueueGenericReset+0x40>
    a050:	00009a25 	.word	0x00009a25
    a054:	0000af39 	.word	0x0000af39
    a058:	00009a69 	.word	0x00009a69
    a05c:	e000ed04 	.word	0xe000ed04
    a060:	000098e5 	.word	0x000098e5

0000a064 <xQueueGenericCreate>:
{
    a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    a066:	b940      	cbnz	r0, a07a <xQueueGenericCreate+0x16>
    a068:	f04f 0380 	mov.w	r3, #128	; 0x80
    a06c:	f383 8811 	msr	BASEPRI, r3
    a070:	f3bf 8f6f 	isb	sy
    a074:	f3bf 8f4f 	dsb	sy
    a078:	e7fe      	b.n	a078 <xQueueGenericCreate+0x14>
    a07a:	4606      	mov	r6, r0
	if (uxItemSize == (UBaseType_t)0) {
    a07c:	b119      	cbz	r1, a086 <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = (size_t)(uxQueueLength * uxItemSize)
    a07e:	fb01 f000 	mul.w	r0, r1, r0
    a082:	3001      	adds	r0, #1
    a084:	e000      	b.n	a088 <xQueueGenericCreate+0x24>
		xQueueSizeInBytes = (size_t)0;
    a086:	2000      	movs	r0, #0
    a088:	4617      	mov	r7, r2
    a08a:	460d      	mov	r5, r1
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    a08c:	3058      	adds	r0, #88	; 0x58
    a08e:	4b11      	ldr	r3, [pc, #68]	; (a0d4 <xQueueGenericCreate+0x70>)
    a090:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    a092:	4604      	mov	r4, r0
    a094:	b190      	cbz	r0, a0bc <xQueueGenericCreate+0x58>
		if (uxItemSize == (UBaseType_t)0) {
    a096:	b96d      	cbnz	r5, a0b4 <xQueueGenericCreate+0x50>
			pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    a098:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength   = uxQueueLength;
    a09a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
    a09c:	6425      	str	r5, [r4, #64]	; 0x40
		(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    a09e:	2101      	movs	r1, #1
    a0a0:	4620      	mov	r0, r4
    a0a2:	4b0d      	ldr	r3, [pc, #52]	; (a0d8 <xQueueGenericCreate+0x74>)
    a0a4:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
    a0a6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
    a0aa:	2300      	movs	r3, #0
    a0ac:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
    a0ae:	4620      	mov	r0, r4
	configASSERT(xReturn);
    a0b0:	b130      	cbz	r0, a0c0 <xQueueGenericCreate+0x5c>
}
    a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ((int8_t *)pxNewQueue) + sizeof(Queue_t);
    a0b4:	f100 0358 	add.w	r3, r0, #88	; 0x58
    a0b8:	6003      	str	r3, [r0, #0]
    a0ba:	e7ee      	b.n	a09a <xQueueGenericCreate+0x36>
	QueueHandle_t xReturn = NULL;
    a0bc:	2000      	movs	r0, #0
    a0be:	e7f7      	b.n	a0b0 <xQueueGenericCreate+0x4c>
    a0c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    a0c4:	f383 8811 	msr	BASEPRI, r3
    a0c8:	f3bf 8f6f 	isb	sy
    a0cc:	f3bf 8f4f 	dsb	sy
    a0d0:	e7fe      	b.n	a0d0 <xQueueGenericCreate+0x6c>
    a0d2:	bf00      	nop
    a0d4:	00009cbd 	.word	0x00009cbd
    a0d8:	00009fd5 	.word	0x00009fd5

0000a0dc <xQueueCreateCountingSemaphore>:
	configASSERT(uxMaxCount != 0);
    a0dc:	b940      	cbnz	r0, a0f0 <xQueueCreateCountingSemaphore+0x14>
    a0de:	f04f 0380 	mov.w	r3, #128	; 0x80
    a0e2:	f383 8811 	msr	BASEPRI, r3
    a0e6:	f3bf 8f6f 	isb	sy
    a0ea:	f3bf 8f4f 	dsb	sy
    a0ee:	e7fe      	b.n	a0ee <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    a0f0:	4288      	cmp	r0, r1
    a0f2:	d208      	bcs.n	a106 <xQueueCreateCountingSemaphore+0x2a>
    a0f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    a0f8:	f383 8811 	msr	BASEPRI, r3
    a0fc:	f3bf 8f6f 	isb	sy
    a100:	f3bf 8f4f 	dsb	sy
    a104:	e7fe      	b.n	a104 <xQueueCreateCountingSemaphore+0x28>
{
    a106:	b510      	push	{r4, lr}
    a108:	460c      	mov	r4, r1
	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    a10a:	2202      	movs	r2, #2
    a10c:	2100      	movs	r1, #0
    a10e:	4b08      	ldr	r3, [pc, #32]	; (a130 <xQueueCreateCountingSemaphore+0x54>)
    a110:	4798      	blx	r3
	if (xHandle != NULL) {
    a112:	4603      	mov	r3, r0
    a114:	b100      	cbz	r0, a118 <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    a116:	6384      	str	r4, [r0, #56]	; 0x38
	configASSERT(xHandle);
    a118:	b943      	cbnz	r3, a12c <xQueueCreateCountingSemaphore+0x50>
    a11a:	f04f 0380 	mov.w	r3, #128	; 0x80
    a11e:	f383 8811 	msr	BASEPRI, r3
    a122:	f3bf 8f6f 	isb	sy
    a126:	f3bf 8f4f 	dsb	sy
    a12a:	e7fe      	b.n	a12a <xQueueCreateCountingSemaphore+0x4e>
}
    a12c:	4618      	mov	r0, r3
    a12e:	bd10      	pop	{r4, pc}
    a130:	0000a065 	.word	0x0000a065

0000a134 <xQueueGenericSend>:
{
    a134:	b5f0      	push	{r4, r5, r6, r7, lr}
    a136:	b085      	sub	sp, #20
    a138:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    a13a:	b160      	cbz	r0, a156 <xQueueGenericSend+0x22>
    a13c:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    a13e:	b199      	cbz	r1, a168 <xQueueGenericSend+0x34>
    a140:	2501      	movs	r5, #1
    a142:	b9bd      	cbnz	r5, a174 <xQueueGenericSend+0x40>
    a144:	f04f 0380 	mov.w	r3, #128	; 0x80
    a148:	f383 8811 	msr	BASEPRI, r3
    a14c:	f3bf 8f6f 	isb	sy
    a150:	f3bf 8f4f 	dsb	sy
    a154:	e7fe      	b.n	a154 <xQueueGenericSend+0x20>
    a156:	f04f 0380 	mov.w	r3, #128	; 0x80
    a15a:	f383 8811 	msr	BASEPRI, r3
    a15e:	f3bf 8f6f 	isb	sy
    a162:	f3bf 8f4f 	dsb	sy
    a166:	e7fe      	b.n	a166 <xQueueGenericSend+0x32>
    a168:	6c02      	ldr	r2, [r0, #64]	; 0x40
    a16a:	b90a      	cbnz	r2, a170 <xQueueGenericSend+0x3c>
    a16c:	2501      	movs	r5, #1
    a16e:	e7e8      	b.n	a142 <xQueueGenericSend+0xe>
    a170:	2500      	movs	r5, #0
    a172:	e7e6      	b.n	a142 <xQueueGenericSend+0xe>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    a174:	2b02      	cmp	r3, #2
    a176:	d009      	beq.n	a18c <xQueueGenericSend+0x58>
    a178:	b96d      	cbnz	r5, a196 <xQueueGenericSend+0x62>
    a17a:	f04f 0380 	mov.w	r3, #128	; 0x80
    a17e:	f383 8811 	msr	BASEPRI, r3
    a182:	f3bf 8f6f 	isb	sy
    a186:	f3bf 8f4f 	dsb	sy
    a18a:	e7fe      	b.n	a18a <xQueueGenericSend+0x56>
    a18c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a18e:	2a01      	cmp	r2, #1
    a190:	d0f2      	beq.n	a178 <xQueueGenericSend+0x44>
    a192:	2500      	movs	r5, #0
    a194:	e7f0      	b.n	a178 <xQueueGenericSend+0x44>
    a196:	461e      	mov	r6, r3
    a198:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    a19a:	4b4d      	ldr	r3, [pc, #308]	; (a2d0 <xQueueGenericSend+0x19c>)
    a19c:	4798      	blx	r3
    a19e:	b910      	cbnz	r0, a1a6 <xQueueGenericSend+0x72>
    a1a0:	9b01      	ldr	r3, [sp, #4]
    a1a2:	b103      	cbz	r3, a1a6 <xQueueGenericSend+0x72>
    a1a4:	2500      	movs	r5, #0
    a1a6:	b945      	cbnz	r5, a1ba <xQueueGenericSend+0x86>
    a1a8:	f04f 0380 	mov.w	r3, #128	; 0x80
    a1ac:	f383 8811 	msr	BASEPRI, r3
    a1b0:	f3bf 8f6f 	isb	sy
    a1b4:	f3bf 8f4f 	dsb	sy
    a1b8:	e7fe      	b.n	a1b8 <xQueueGenericSend+0x84>
    a1ba:	2500      	movs	r5, #0
    a1bc:	e03e      	b.n	a23c <xQueueGenericSend+0x108>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    a1be:	4632      	mov	r2, r6
    a1c0:	4639      	mov	r1, r7
    a1c2:	4620      	mov	r0, r4
    a1c4:	4b43      	ldr	r3, [pc, #268]	; (a2d4 <xQueueGenericSend+0x1a0>)
    a1c6:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    a1c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a1ca:	b193      	cbz	r3, a1f2 <xQueueGenericSend+0xbe>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) == pdTRUE) {
    a1cc:	4631      	mov	r1, r6
    a1ce:	4620      	mov	r0, r4
    a1d0:	4b41      	ldr	r3, [pc, #260]	; (a2d8 <xQueueGenericSend+0x1a4>)
    a1d2:	4798      	blx	r3
    a1d4:	2801      	cmp	r0, #1
    a1d6:	d107      	bne.n	a1e8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
    a1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a1dc:	4b3f      	ldr	r3, [pc, #252]	; (a2dc <xQueueGenericSend+0x1a8>)
    a1de:	601a      	str	r2, [r3, #0]
    a1e0:	f3bf 8f4f 	dsb	sy
    a1e4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    a1e8:	4b3d      	ldr	r3, [pc, #244]	; (a2e0 <xQueueGenericSend+0x1ac>)
    a1ea:	4798      	blx	r3
				return pdPASS;
    a1ec:	2001      	movs	r0, #1
}
    a1ee:	b005      	add	sp, #20
    a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    a1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a1f4:	b173      	cbz	r3, a214 <xQueueGenericSend+0xe0>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) == pdTRUE) {
    a1f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a1fa:	4b3a      	ldr	r3, [pc, #232]	; (a2e4 <xQueueGenericSend+0x1b0>)
    a1fc:	4798      	blx	r3
    a1fe:	2801      	cmp	r0, #1
    a200:	d1f2      	bne.n	a1e8 <xQueueGenericSend+0xb4>
								queueYIELD_IF_USING_PREEMPTION();
    a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a206:	4b35      	ldr	r3, [pc, #212]	; (a2dc <xQueueGenericSend+0x1a8>)
    a208:	601a      	str	r2, [r3, #0]
    a20a:	f3bf 8f4f 	dsb	sy
    a20e:	f3bf 8f6f 	isb	sy
    a212:	e7e9      	b.n	a1e8 <xQueueGenericSend+0xb4>
						} else if (xYieldRequired != pdFALSE) {
    a214:	2800      	cmp	r0, #0
    a216:	d0e7      	beq.n	a1e8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
    a218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a21c:	4b2f      	ldr	r3, [pc, #188]	; (a2dc <xQueueGenericSend+0x1a8>)
    a21e:	601a      	str	r2, [r3, #0]
    a220:	f3bf 8f4f 	dsb	sy
    a224:	f3bf 8f6f 	isb	sy
    a228:	e7de      	b.n	a1e8 <xQueueGenericSend+0xb4>
					taskEXIT_CRITICAL();
    a22a:	4b2d      	ldr	r3, [pc, #180]	; (a2e0 <xQueueGenericSend+0x1ac>)
    a22c:	4798      	blx	r3
					return errQUEUE_FULL;
    a22e:	2000      	movs	r0, #0
    a230:	e7dd      	b.n	a1ee <xQueueGenericSend+0xba>
				prvUnlockQueue(pxQueue);
    a232:	4620      	mov	r0, r4
    a234:	4b2c      	ldr	r3, [pc, #176]	; (a2e8 <xQueueGenericSend+0x1b4>)
    a236:	4798      	blx	r3
				(void)xTaskResumeAll();
    a238:	4b2c      	ldr	r3, [pc, #176]	; (a2ec <xQueueGenericSend+0x1b8>)
    a23a:	4798      	blx	r3
		taskENTER_CRITICAL();
    a23c:	4b2c      	ldr	r3, [pc, #176]	; (a2f0 <xQueueGenericSend+0x1bc>)
    a23e:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    a240:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    a242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a244:	429a      	cmp	r2, r3
    a246:	d3ba      	bcc.n	a1be <xQueueGenericSend+0x8a>
    a248:	2e02      	cmp	r6, #2
    a24a:	d0b8      	beq.n	a1be <xQueueGenericSend+0x8a>
				if (xTicksToWait == (TickType_t)0) {
    a24c:	9b01      	ldr	r3, [sp, #4]
    a24e:	2b00      	cmp	r3, #0
    a250:	d0eb      	beq.n	a22a <xQueueGenericSend+0xf6>
				} else if (xEntryTimeSet == pdFALSE) {
    a252:	b91d      	cbnz	r5, a25c <xQueueGenericSend+0x128>
					vTaskSetTimeOutState(&xTimeOut);
    a254:	a802      	add	r0, sp, #8
    a256:	4b27      	ldr	r3, [pc, #156]	; (a2f4 <xQueueGenericSend+0x1c0>)
    a258:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    a25a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    a25c:	4b20      	ldr	r3, [pc, #128]	; (a2e0 <xQueueGenericSend+0x1ac>)
    a25e:	4798      	blx	r3
		vTaskSuspendAll();
    a260:	4b25      	ldr	r3, [pc, #148]	; (a2f8 <xQueueGenericSend+0x1c4>)
    a262:	4798      	blx	r3
		prvLockQueue(pxQueue);
    a264:	4b22      	ldr	r3, [pc, #136]	; (a2f0 <xQueueGenericSend+0x1bc>)
    a266:	4798      	blx	r3
    a268:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a26e:	d101      	bne.n	a274 <xQueueGenericSend+0x140>
    a270:	2300      	movs	r3, #0
    a272:	6463      	str	r3, [r4, #68]	; 0x44
    a274:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a276:	f1b3 3fff 	cmp.w	r3, #4294967295
    a27a:	d101      	bne.n	a280 <xQueueGenericSend+0x14c>
    a27c:	2300      	movs	r3, #0
    a27e:	64a3      	str	r3, [r4, #72]	; 0x48
    a280:	4b17      	ldr	r3, [pc, #92]	; (a2e0 <xQueueGenericSend+0x1ac>)
    a282:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    a284:	a901      	add	r1, sp, #4
    a286:	a802      	add	r0, sp, #8
    a288:	4b1c      	ldr	r3, [pc, #112]	; (a2fc <xQueueGenericSend+0x1c8>)
    a28a:	4798      	blx	r3
    a28c:	b9c8      	cbnz	r0, a2c2 <xQueueGenericSend+0x18e>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    a28e:	4620      	mov	r0, r4
    a290:	4b1b      	ldr	r3, [pc, #108]	; (a300 <xQueueGenericSend+0x1cc>)
    a292:	4798      	blx	r3
    a294:	2800      	cmp	r0, #0
    a296:	d0cc      	beq.n	a232 <xQueueGenericSend+0xfe>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    a298:	9901      	ldr	r1, [sp, #4]
    a29a:	f104 0010 	add.w	r0, r4, #16
    a29e:	4b19      	ldr	r3, [pc, #100]	; (a304 <xQueueGenericSend+0x1d0>)
    a2a0:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    a2a2:	4620      	mov	r0, r4
    a2a4:	4b10      	ldr	r3, [pc, #64]	; (a2e8 <xQueueGenericSend+0x1b4>)
    a2a6:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    a2a8:	4b10      	ldr	r3, [pc, #64]	; (a2ec <xQueueGenericSend+0x1b8>)
    a2aa:	4798      	blx	r3
    a2ac:	2800      	cmp	r0, #0
    a2ae:	d1c5      	bne.n	a23c <xQueueGenericSend+0x108>
					portYIELD_WITHIN_API();
    a2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a2b4:	4b09      	ldr	r3, [pc, #36]	; (a2dc <xQueueGenericSend+0x1a8>)
    a2b6:	601a      	str	r2, [r3, #0]
    a2b8:	f3bf 8f4f 	dsb	sy
    a2bc:	f3bf 8f6f 	isb	sy
    a2c0:	e7bc      	b.n	a23c <xQueueGenericSend+0x108>
			prvUnlockQueue(pxQueue);
    a2c2:	4620      	mov	r0, r4
    a2c4:	4b08      	ldr	r3, [pc, #32]	; (a2e8 <xQueueGenericSend+0x1b4>)
    a2c6:	4798      	blx	r3
			(void)xTaskResumeAll();
    a2c8:	4b08      	ldr	r3, [pc, #32]	; (a2ec <xQueueGenericSend+0x1b8>)
    a2ca:	4798      	blx	r3
			return errQUEUE_FULL;
    a2cc:	2000      	movs	r0, #0
    a2ce:	e78e      	b.n	a1ee <xQueueGenericSend+0xba>
    a2d0:	0000b08d 	.word	0x0000b08d
    a2d4:	00009e11 	.word	0x00009e11
    a2d8:	00009e99 	.word	0x00009e99
    a2dc:	e000ed04 	.word	0xe000ed04
    a2e0:	00009a69 	.word	0x00009a69
    a2e4:	0000af39 	.word	0x0000af39
    a2e8:	00009f41 	.word	0x00009f41
    a2ec:	0000abc1 	.word	0x0000abc1
    a2f0:	00009a25 	.word	0x00009a25
    a2f4:	0000afc9 	.word	0x0000afc9
    a2f8:	0000aa79 	.word	0x0000aa79
    a2fc:	0000aff1 	.word	0x0000aff1
    a300:	00009dc5 	.word	0x00009dc5
    a304:	0000ae75 	.word	0x0000ae75

0000a308 <xQueueGenericSendFromISR>:
	configASSERT(pxQueue);
    a308:	b170      	cbz	r0, a328 <xQueueGenericSendFromISR+0x20>
{
    a30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a30e:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    a310:	b199      	cbz	r1, a33a <xQueueGenericSendFromISR+0x32>
    a312:	2001      	movs	r0, #1
    a314:	b9b8      	cbnz	r0, a346 <xQueueGenericSendFromISR+0x3e>
    a316:	f04f 0380 	mov.w	r3, #128	; 0x80
    a31a:	f383 8811 	msr	BASEPRI, r3
    a31e:	f3bf 8f6f 	isb	sy
    a322:	f3bf 8f4f 	dsb	sy
    a326:	e7fe      	b.n	a326 <xQueueGenericSendFromISR+0x1e>
    a328:	f04f 0380 	mov.w	r3, #128	; 0x80
    a32c:	f383 8811 	msr	BASEPRI, r3
    a330:	f3bf 8f6f 	isb	sy
    a334:	f3bf 8f4f 	dsb	sy
    a338:	e7fe      	b.n	a338 <xQueueGenericSendFromISR+0x30>
    a33a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    a33c:	b908      	cbnz	r0, a342 <xQueueGenericSendFromISR+0x3a>
    a33e:	2001      	movs	r0, #1
    a340:	e7e8      	b.n	a314 <xQueueGenericSendFromISR+0xc>
    a342:	2000      	movs	r0, #0
    a344:	e7e6      	b.n	a314 <xQueueGenericSendFromISR+0xc>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    a346:	2b02      	cmp	r3, #2
    a348:	d009      	beq.n	a35e <xQueueGenericSendFromISR+0x56>
    a34a:	b968      	cbnz	r0, a368 <xQueueGenericSendFromISR+0x60>
    a34c:	f04f 0380 	mov.w	r3, #128	; 0x80
    a350:	f383 8811 	msr	BASEPRI, r3
    a354:	f3bf 8f6f 	isb	sy
    a358:	f3bf 8f4f 	dsb	sy
    a35c:	e7fe      	b.n	a35c <xQueueGenericSendFromISR+0x54>
    a35e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    a360:	2d01      	cmp	r5, #1
    a362:	d0f2      	beq.n	a34a <xQueueGenericSendFromISR+0x42>
    a364:	2000      	movs	r0, #0
    a366:	e7f0      	b.n	a34a <xQueueGenericSendFromISR+0x42>
    a368:	461e      	mov	r6, r3
    a36a:	4615      	mov	r5, r2
    a36c:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    a36e:	4b22      	ldr	r3, [pc, #136]	; (a3f8 <xQueueGenericSendFromISR+0xf0>)
    a370:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    a372:	f3ef 8711 	mrs	r7, BASEPRI
    a376:	f04f 0380 	mov.w	r3, #128	; 0x80
    a37a:	f383 8811 	msr	BASEPRI, r3
    a37e:	f3bf 8f6f 	isb	sy
    a382:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    a386:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    a388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a38a:	429a      	cmp	r2, r3
    a38c:	d301      	bcc.n	a392 <xQueueGenericSendFromISR+0x8a>
    a38e:	2e02      	cmp	r6, #2
    a390:	d126      	bne.n	a3e0 <xQueueGenericSendFromISR+0xd8>
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    a392:	4632      	mov	r2, r6
    a394:	4641      	mov	r1, r8
    a396:	4620      	mov	r0, r4
    a398:	4b18      	ldr	r3, [pc, #96]	; (a3fc <xQueueGenericSendFromISR+0xf4>)
    a39a:	4798      	blx	r3
			if (pxQueue->xTxLock == queueUNLOCKED) {
    a39c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a39e:	f1b3 3fff 	cmp.w	r3, #4294967295
    a3a2:	d118      	bne.n	a3d6 <xQueueGenericSendFromISR+0xce>
					if (pxQueue->pxQueueSetContainer != NULL) {
    a3a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a3a6:	b15b      	cbz	r3, a3c0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) == pdTRUE) {
    a3a8:	4631      	mov	r1, r6
    a3aa:	4620      	mov	r0, r4
    a3ac:	4b14      	ldr	r3, [pc, #80]	; (a400 <xQueueGenericSendFromISR+0xf8>)
    a3ae:	4798      	blx	r3
    a3b0:	2801      	cmp	r0, #1
    a3b2:	d117      	bne.n	a3e4 <xQueueGenericSendFromISR+0xdc>
							if (pxHigherPriorityTaskWoken != NULL) {
    a3b4:	b1c5      	cbz	r5, a3e8 <xQueueGenericSendFromISR+0xe0>
								*pxHigherPriorityTaskWoken = pdTRUE;
    a3b6:	6028      	str	r0, [r5, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    a3b8:	f387 8811 	msr	BASEPRI, r7
}
    a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    a3c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a3c2:	b19b      	cbz	r3, a3ec <xQueueGenericSendFromISR+0xe4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    a3c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a3c8:	4b0e      	ldr	r3, [pc, #56]	; (a404 <xQueueGenericSendFromISR+0xfc>)
    a3ca:	4798      	blx	r3
    a3cc:	b180      	cbz	r0, a3f0 <xQueueGenericSendFromISR+0xe8>
								if (pxHigherPriorityTaskWoken != NULL) {
    a3ce:	b18d      	cbz	r5, a3f4 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
    a3d0:	2001      	movs	r0, #1
    a3d2:	6028      	str	r0, [r5, #0]
    a3d4:	e7f0      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
				++(pxQueue->xTxLock);
    a3d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a3d8:	3301      	adds	r3, #1
    a3da:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
    a3dc:	2001      	movs	r0, #1
    a3de:	e7eb      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
    a3e0:	2000      	movs	r0, #0
    a3e2:	e7e9      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
    a3e4:	2001      	movs	r0, #1
    a3e6:	e7e7      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
    a3e8:	2001      	movs	r0, #1
    a3ea:	e7e5      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
    a3ec:	2001      	movs	r0, #1
    a3ee:	e7e3      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
    a3f0:	2001      	movs	r0, #1
    a3f2:	e7e1      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
    a3f4:	2001      	movs	r0, #1
    a3f6:	e7df      	b.n	a3b8 <xQueueGenericSendFromISR+0xb0>
    a3f8:	00009c35 	.word	0x00009c35
    a3fc:	00009e11 	.word	0x00009e11
    a400:	00009e99 	.word	0x00009e99
    a404:	0000af39 	.word	0x0000af39

0000a408 <xQueueGiveFromISR>:
	configASSERT(pxQueue);
    a408:	b160      	cbz	r0, a424 <xQueueGiveFromISR+0x1c>
{
    a40a:	b570      	push	{r4, r5, r6, lr}
    a40c:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    a40e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    a410:	b18b      	cbz	r3, a436 <xQueueGiveFromISR+0x2e>
	__asm volatile("	mov %0, %1												\n"
    a412:	f04f 0380 	mov.w	r3, #128	; 0x80
    a416:	f383 8811 	msr	BASEPRI, r3
    a41a:	f3bf 8f6f 	isb	sy
    a41e:	f3bf 8f4f 	dsb	sy
    a422:	e7fe      	b.n	a422 <xQueueGiveFromISR+0x1a>
    a424:	f04f 0380 	mov.w	r3, #128	; 0x80
    a428:	f383 8811 	msr	BASEPRI, r3
    a42c:	f3bf 8f6f 	isb	sy
    a430:	f3bf 8f4f 	dsb	sy
    a434:	e7fe      	b.n	a434 <xQueueGiveFromISR+0x2c>
	configASSERT(!((pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) && (pxQueue->pxMutexHolder != NULL)));
    a436:	6803      	ldr	r3, [r0, #0]
    a438:	b153      	cbz	r3, a450 <xQueueGiveFromISR+0x48>
    a43a:	2301      	movs	r3, #1
    a43c:	b973      	cbnz	r3, a45c <xQueueGiveFromISR+0x54>
    a43e:	f04f 0380 	mov.w	r3, #128	; 0x80
    a442:	f383 8811 	msr	BASEPRI, r3
    a446:	f3bf 8f6f 	isb	sy
    a44a:	f3bf 8f4f 	dsb	sy
    a44e:	e7fe      	b.n	a44e <xQueueGiveFromISR+0x46>
    a450:	6843      	ldr	r3, [r0, #4]
    a452:	b90b      	cbnz	r3, a458 <xQueueGiveFromISR+0x50>
    a454:	2301      	movs	r3, #1
    a456:	e7f1      	b.n	a43c <xQueueGiveFromISR+0x34>
    a458:	2300      	movs	r3, #0
    a45a:	e7ef      	b.n	a43c <xQueueGiveFromISR+0x34>
    a45c:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    a45e:	4b20      	ldr	r3, [pc, #128]	; (a4e0 <xQueueGiveFromISR+0xd8>)
    a460:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    a462:	f3ef 8611 	mrs	r6, BASEPRI
    a466:	f04f 0380 	mov.w	r3, #128	; 0x80
    a46a:	f383 8811 	msr	BASEPRI, r3
    a46e:	f3bf 8f6f 	isb	sy
    a472:	f3bf 8f4f 	dsb	sy
		if (pxQueue->uxMessagesWaiting < pxQueue->uxLength) {
    a476:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    a478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a47a:	429a      	cmp	r2, r3
    a47c:	d223      	bcs.n	a4c6 <xQueueGiveFromISR+0xbe>
			++(pxQueue->uxMessagesWaiting);
    a47e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a480:	3301      	adds	r3, #1
    a482:	63a3      	str	r3, [r4, #56]	; 0x38
			if (pxQueue->xTxLock == queueUNLOCKED) {
    a484:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a486:	f1b3 3fff 	cmp.w	r3, #4294967295
    a48a:	d117      	bne.n	a4bc <xQueueGiveFromISR+0xb4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    a48c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a48e:	b153      	cbz	r3, a4a6 <xQueueGiveFromISR+0x9e>
						if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) == pdTRUE) {
    a490:	2100      	movs	r1, #0
    a492:	4620      	mov	r0, r4
    a494:	4b13      	ldr	r3, [pc, #76]	; (a4e4 <xQueueGiveFromISR+0xdc>)
    a496:	4798      	blx	r3
    a498:	2801      	cmp	r0, #1
    a49a:	d116      	bne.n	a4ca <xQueueGiveFromISR+0xc2>
							if (pxHigherPriorityTaskWoken != NULL) {
    a49c:	b1bd      	cbz	r5, a4ce <xQueueGiveFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
    a49e:	6028      	str	r0, [r5, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    a4a0:	f386 8811 	msr	BASEPRI, r6
}
    a4a4:	bd70      	pop	{r4, r5, r6, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    a4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a4a8:	b19b      	cbz	r3, a4d2 <xQueueGiveFromISR+0xca>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    a4aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a4ae:	4b0e      	ldr	r3, [pc, #56]	; (a4e8 <xQueueGiveFromISR+0xe0>)
    a4b0:	4798      	blx	r3
    a4b2:	b180      	cbz	r0, a4d6 <xQueueGiveFromISR+0xce>
								if (pxHigherPriorityTaskWoken != NULL) {
    a4b4:	b18d      	cbz	r5, a4da <xQueueGiveFromISR+0xd2>
									*pxHigherPriorityTaskWoken = pdTRUE;
    a4b6:	2001      	movs	r0, #1
    a4b8:	6028      	str	r0, [r5, #0]
    a4ba:	e7f1      	b.n	a4a0 <xQueueGiveFromISR+0x98>
				++(pxQueue->xTxLock);
    a4bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a4be:	3301      	adds	r3, #1
    a4c0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
    a4c2:	2001      	movs	r0, #1
    a4c4:	e7ec      	b.n	a4a0 <xQueueGiveFromISR+0x98>
			xReturn = errQUEUE_FULL;
    a4c6:	2000      	movs	r0, #0
    a4c8:	e7ea      	b.n	a4a0 <xQueueGiveFromISR+0x98>
			xReturn = pdPASS;
    a4ca:	2001      	movs	r0, #1
    a4cc:	e7e8      	b.n	a4a0 <xQueueGiveFromISR+0x98>
    a4ce:	2001      	movs	r0, #1
    a4d0:	e7e6      	b.n	a4a0 <xQueueGiveFromISR+0x98>
    a4d2:	2001      	movs	r0, #1
    a4d4:	e7e4      	b.n	a4a0 <xQueueGiveFromISR+0x98>
    a4d6:	2001      	movs	r0, #1
    a4d8:	e7e2      	b.n	a4a0 <xQueueGiveFromISR+0x98>
    a4da:	2001      	movs	r0, #1
    a4dc:	e7e0      	b.n	a4a0 <xQueueGiveFromISR+0x98>
    a4de:	bf00      	nop
    a4e0:	00009c35 	.word	0x00009c35
    a4e4:	00009e99 	.word	0x00009e99
    a4e8:	0000af39 	.word	0x0000af39

0000a4ec <xQueueGenericReceive>:
{
    a4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ee:	b085      	sub	sp, #20
    a4f0:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    a4f2:	b160      	cbz	r0, a50e <xQueueGenericReceive+0x22>
    a4f4:	4604      	mov	r4, r0
	configASSERT(!((pvBuffer == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    a4f6:	b199      	cbz	r1, a520 <xQueueGenericReceive+0x34>
    a4f8:	2501      	movs	r5, #1
    a4fa:	b9bd      	cbnz	r5, a52c <xQueueGenericReceive+0x40>
	__asm volatile("	mov %0, %1												\n"
    a4fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    a500:	f383 8811 	msr	BASEPRI, r3
    a504:	f3bf 8f6f 	isb	sy
    a508:	f3bf 8f4f 	dsb	sy
    a50c:	e7fe      	b.n	a50c <xQueueGenericReceive+0x20>
    a50e:	f04f 0380 	mov.w	r3, #128	; 0x80
    a512:	f383 8811 	msr	BASEPRI, r3
    a516:	f3bf 8f6f 	isb	sy
    a51a:	f3bf 8f4f 	dsb	sy
    a51e:	e7fe      	b.n	a51e <xQueueGenericReceive+0x32>
    a520:	6c02      	ldr	r2, [r0, #64]	; 0x40
    a522:	b90a      	cbnz	r2, a528 <xQueueGenericReceive+0x3c>
    a524:	2501      	movs	r5, #1
    a526:	e7e8      	b.n	a4fa <xQueueGenericReceive+0xe>
    a528:	2500      	movs	r5, #0
    a52a:	e7e6      	b.n	a4fa <xQueueGenericReceive+0xe>
    a52c:	461f      	mov	r7, r3
    a52e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    a530:	4b51      	ldr	r3, [pc, #324]	; (a678 <xQueueGenericReceive+0x18c>)
    a532:	4798      	blx	r3
    a534:	b910      	cbnz	r0, a53c <xQueueGenericReceive+0x50>
    a536:	9b01      	ldr	r3, [sp, #4]
    a538:	b103      	cbz	r3, a53c <xQueueGenericReceive+0x50>
    a53a:	2500      	movs	r5, #0
    a53c:	b945      	cbnz	r5, a550 <xQueueGenericReceive+0x64>
    a53e:	f04f 0380 	mov.w	r3, #128	; 0x80
    a542:	f383 8811 	msr	BASEPRI, r3
    a546:	f3bf 8f6f 	isb	sy
    a54a:	f3bf 8f4f 	dsb	sy
    a54e:	e7fe      	b.n	a54e <xQueueGenericReceive+0x62>
    a550:	2500      	movs	r5, #0
    a552:	e046      	b.n	a5e2 <xQueueGenericReceive+0xf6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    a554:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    a556:	4631      	mov	r1, r6
    a558:	4620      	mov	r0, r4
    a55a:	4b48      	ldr	r3, [pc, #288]	; (a67c <xQueueGenericReceive+0x190>)
    a55c:	4798      	blx	r3
				if (xJustPeeking == pdFALSE) {
    a55e:	b9e7      	cbnz	r7, a59a <xQueueGenericReceive+0xae>
					--(pxQueue->uxMessagesWaiting);
    a560:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a562:	3b01      	subs	r3, #1
    a564:	63a3      	str	r3, [r4, #56]	; 0x38
						if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    a566:	6823      	ldr	r3, [r4, #0]
    a568:	b913      	cbnz	r3, a570 <xQueueGenericReceive+0x84>
							    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    a56a:	4b45      	ldr	r3, [pc, #276]	; (a680 <xQueueGenericReceive+0x194>)
    a56c:	4798      	blx	r3
    a56e:	6060      	str	r0, [r4, #4]
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    a570:	6923      	ldr	r3, [r4, #16]
    a572:	b16b      	cbz	r3, a590 <xQueueGenericReceive+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) == pdTRUE) {
    a574:	f104 0010 	add.w	r0, r4, #16
    a578:	4b42      	ldr	r3, [pc, #264]	; (a684 <xQueueGenericReceive+0x198>)
    a57a:	4798      	blx	r3
    a57c:	2801      	cmp	r0, #1
    a57e:	d107      	bne.n	a590 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
    a580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a584:	4b40      	ldr	r3, [pc, #256]	; (a688 <xQueueGenericReceive+0x19c>)
    a586:	601a      	str	r2, [r3, #0]
    a588:	f3bf 8f4f 	dsb	sy
    a58c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    a590:	4b3e      	ldr	r3, [pc, #248]	; (a68c <xQueueGenericReceive+0x1a0>)
    a592:	4798      	blx	r3
				return pdPASS;
    a594:	2001      	movs	r0, #1
}
    a596:	b005      	add	sp, #20
    a598:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    a59a:	60e5      	str	r5, [r4, #12]
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    a59c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d0f6      	beq.n	a590 <xQueueGenericReceive+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    a5a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a5a6:	4b37      	ldr	r3, [pc, #220]	; (a684 <xQueueGenericReceive+0x198>)
    a5a8:	4798      	blx	r3
    a5aa:	2800      	cmp	r0, #0
    a5ac:	d0f0      	beq.n	a590 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
    a5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a5b2:	4b35      	ldr	r3, [pc, #212]	; (a688 <xQueueGenericReceive+0x19c>)
    a5b4:	601a      	str	r2, [r3, #0]
    a5b6:	f3bf 8f4f 	dsb	sy
    a5ba:	f3bf 8f6f 	isb	sy
    a5be:	e7e7      	b.n	a590 <xQueueGenericReceive+0xa4>
					taskEXIT_CRITICAL();
    a5c0:	4b32      	ldr	r3, [pc, #200]	; (a68c <xQueueGenericReceive+0x1a0>)
    a5c2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    a5c4:	2000      	movs	r0, #0
    a5c6:	e7e6      	b.n	a596 <xQueueGenericReceive+0xaa>
						taskENTER_CRITICAL();
    a5c8:	4b31      	ldr	r3, [pc, #196]	; (a690 <xQueueGenericReceive+0x1a4>)
    a5ca:	4798      	blx	r3
							vTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    a5cc:	6860      	ldr	r0, [r4, #4]
    a5ce:	4b31      	ldr	r3, [pc, #196]	; (a694 <xQueueGenericReceive+0x1a8>)
    a5d0:	4798      	blx	r3
						taskEXIT_CRITICAL();
    a5d2:	4b2e      	ldr	r3, [pc, #184]	; (a68c <xQueueGenericReceive+0x1a0>)
    a5d4:	4798      	blx	r3
    a5d6:	e032      	b.n	a63e <xQueueGenericReceive+0x152>
				prvUnlockQueue(pxQueue);
    a5d8:	4620      	mov	r0, r4
    a5da:	4b2f      	ldr	r3, [pc, #188]	; (a698 <xQueueGenericReceive+0x1ac>)
    a5dc:	4798      	blx	r3
				(void)xTaskResumeAll();
    a5de:	4b2f      	ldr	r3, [pc, #188]	; (a69c <xQueueGenericReceive+0x1b0>)
    a5e0:	4798      	blx	r3
		taskENTER_CRITICAL();
    a5e2:	4b2b      	ldr	r3, [pc, #172]	; (a690 <xQueueGenericReceive+0x1a4>)
    a5e4:	4798      	blx	r3
			if (pxQueue->uxMessagesWaiting > (UBaseType_t)0) {
    a5e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a5e8:	2b00      	cmp	r3, #0
    a5ea:	d1b3      	bne.n	a554 <xQueueGenericReceive+0x68>
				if (xTicksToWait == (TickType_t)0) {
    a5ec:	9b01      	ldr	r3, [sp, #4]
    a5ee:	2b00      	cmp	r3, #0
    a5f0:	d0e6      	beq.n	a5c0 <xQueueGenericReceive+0xd4>
				} else if (xEntryTimeSet == pdFALSE) {
    a5f2:	b91d      	cbnz	r5, a5fc <xQueueGenericReceive+0x110>
					vTaskSetTimeOutState(&xTimeOut);
    a5f4:	a802      	add	r0, sp, #8
    a5f6:	4b2a      	ldr	r3, [pc, #168]	; (a6a0 <xQueueGenericReceive+0x1b4>)
    a5f8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    a5fa:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    a5fc:	4b23      	ldr	r3, [pc, #140]	; (a68c <xQueueGenericReceive+0x1a0>)
    a5fe:	4798      	blx	r3
		vTaskSuspendAll();
    a600:	4b28      	ldr	r3, [pc, #160]	; (a6a4 <xQueueGenericReceive+0x1b8>)
    a602:	4798      	blx	r3
		prvLockQueue(pxQueue);
    a604:	4b22      	ldr	r3, [pc, #136]	; (a690 <xQueueGenericReceive+0x1a4>)
    a606:	4798      	blx	r3
    a608:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a60a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a60e:	d101      	bne.n	a614 <xQueueGenericReceive+0x128>
    a610:	2300      	movs	r3, #0
    a612:	6463      	str	r3, [r4, #68]	; 0x44
    a614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a616:	f1b3 3fff 	cmp.w	r3, #4294967295
    a61a:	d101      	bne.n	a620 <xQueueGenericReceive+0x134>
    a61c:	2300      	movs	r3, #0
    a61e:	64a3      	str	r3, [r4, #72]	; 0x48
    a620:	4b1a      	ldr	r3, [pc, #104]	; (a68c <xQueueGenericReceive+0x1a0>)
    a622:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    a624:	a901      	add	r1, sp, #4
    a626:	a802      	add	r0, sp, #8
    a628:	4b1f      	ldr	r3, [pc, #124]	; (a6a8 <xQueueGenericReceive+0x1bc>)
    a62a:	4798      	blx	r3
    a62c:	b9e0      	cbnz	r0, a668 <xQueueGenericReceive+0x17c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    a62e:	4620      	mov	r0, r4
    a630:	4b1e      	ldr	r3, [pc, #120]	; (a6ac <xQueueGenericReceive+0x1c0>)
    a632:	4798      	blx	r3
    a634:	2800      	cmp	r0, #0
    a636:	d0cf      	beq.n	a5d8 <xQueueGenericReceive+0xec>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    a638:	6823      	ldr	r3, [r4, #0]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d0c4      	beq.n	a5c8 <xQueueGenericReceive+0xdc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    a63e:	9901      	ldr	r1, [sp, #4]
    a640:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a644:	4b1a      	ldr	r3, [pc, #104]	; (a6b0 <xQueueGenericReceive+0x1c4>)
    a646:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    a648:	4620      	mov	r0, r4
    a64a:	4b13      	ldr	r3, [pc, #76]	; (a698 <xQueueGenericReceive+0x1ac>)
    a64c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    a64e:	4b13      	ldr	r3, [pc, #76]	; (a69c <xQueueGenericReceive+0x1b0>)
    a650:	4798      	blx	r3
    a652:	2800      	cmp	r0, #0
    a654:	d1c5      	bne.n	a5e2 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
    a656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a65a:	4b0b      	ldr	r3, [pc, #44]	; (a688 <xQueueGenericReceive+0x19c>)
    a65c:	601a      	str	r2, [r3, #0]
    a65e:	f3bf 8f4f 	dsb	sy
    a662:	f3bf 8f6f 	isb	sy
    a666:	e7bc      	b.n	a5e2 <xQueueGenericReceive+0xf6>
			prvUnlockQueue(pxQueue);
    a668:	4620      	mov	r0, r4
    a66a:	4b0b      	ldr	r3, [pc, #44]	; (a698 <xQueueGenericReceive+0x1ac>)
    a66c:	4798      	blx	r3
			(void)xTaskResumeAll();
    a66e:	4b0b      	ldr	r3, [pc, #44]	; (a69c <xQueueGenericReceive+0x1b0>)
    a670:	4798      	blx	r3
			return errQUEUE_EMPTY;
    a672:	2000      	movs	r0, #0
    a674:	e78f      	b.n	a596 <xQueueGenericReceive+0xaa>
    a676:	bf00      	nop
    a678:	0000b08d 	.word	0x0000b08d
    a67c:	00009f19 	.word	0x00009f19
    a680:	0000b1dd 	.word	0x0000b1dd
    a684:	0000af39 	.word	0x0000af39
    a688:	e000ed04 	.word	0xe000ed04
    a68c:	00009a69 	.word	0x00009a69
    a690:	00009a25 	.word	0x00009a25
    a694:	0000b0ad 	.word	0x0000b0ad
    a698:	00009f41 	.word	0x00009f41
    a69c:	0000abc1 	.word	0x0000abc1
    a6a0:	0000afc9 	.word	0x0000afc9
    a6a4:	0000aa79 	.word	0x0000aa79
    a6a8:	0000aff1 	.word	0x0000aff1
    a6ac:	00009ded 	.word	0x00009ded
    a6b0:	0000ae75 	.word	0x0000ae75

0000a6b4 <vQueueDelete>:
{
    a6b4:	b508      	push	{r3, lr}
	configASSERT(pxQueue);
    a6b6:	b940      	cbnz	r0, a6ca <vQueueDelete+0x16>
    a6b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    a6bc:	f383 8811 	msr	BASEPRI, r3
    a6c0:	f3bf 8f6f 	isb	sy
    a6c4:	f3bf 8f4f 	dsb	sy
    a6c8:	e7fe      	b.n	a6c8 <vQueueDelete+0x14>
	vPortFree(pxQueue);
    a6ca:	4b01      	ldr	r3, [pc, #4]	; (a6d0 <vQueueDelete+0x1c>)
    a6cc:	4798      	blx	r3
    a6ce:	bd08      	pop	{r3, pc}
    a6d0:	00009d79 	.word	0x00009d79

0000a6d4 <vQueueWaitForMessageRestricted>:
{
    a6d4:	b570      	push	{r4, r5, r6, lr}
    a6d6:	4604      	mov	r4, r0
    a6d8:	460d      	mov	r5, r1
    a6da:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    a6dc:	4b0f      	ldr	r3, [pc, #60]	; (a71c <vQueueWaitForMessageRestricted+0x48>)
    a6de:	4798      	blx	r3
    a6e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    a6e6:	d00b      	beq.n	a700 <vQueueWaitForMessageRestricted+0x2c>
    a6e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    a6ee:	d00a      	beq.n	a706 <vQueueWaitForMessageRestricted+0x32>
    a6f0:	4b0b      	ldr	r3, [pc, #44]	; (a720 <vQueueWaitForMessageRestricted+0x4c>)
    a6f2:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    a6f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a6f6:	b14b      	cbz	r3, a70c <vQueueWaitForMessageRestricted+0x38>
	prvUnlockQueue(pxQueue);
    a6f8:	4620      	mov	r0, r4
    a6fa:	4b0a      	ldr	r3, [pc, #40]	; (a724 <vQueueWaitForMessageRestricted+0x50>)
    a6fc:	4798      	blx	r3
    a6fe:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    a700:	2300      	movs	r3, #0
    a702:	6463      	str	r3, [r4, #68]	; 0x44
    a704:	e7f0      	b.n	a6e8 <vQueueWaitForMessageRestricted+0x14>
    a706:	2300      	movs	r3, #0
    a708:	64a3      	str	r3, [r4, #72]	; 0x48
    a70a:	e7f1      	b.n	a6f0 <vQueueWaitForMessageRestricted+0x1c>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    a70c:	4632      	mov	r2, r6
    a70e:	4629      	mov	r1, r5
    a710:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a714:	4b04      	ldr	r3, [pc, #16]	; (a728 <vQueueWaitForMessageRestricted+0x54>)
    a716:	4798      	blx	r3
    a718:	e7ee      	b.n	a6f8 <vQueueWaitForMessageRestricted+0x24>
    a71a:	bf00      	nop
    a71c:	00009a25 	.word	0x00009a25
    a720:	00009a69 	.word	0x00009a69
    a724:	00009f41 	.word	0x00009f41
    a728:	0000aed9 	.word	0x0000aed9

0000a72c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    a72c:	4b09      	ldr	r3, [pc, #36]	; (a754 <prvResetNextTaskUnblockTime+0x28>)
    a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a730:	681b      	ldr	r3, [r3, #0]
    a732:	b943      	cbnz	r3, a746 <prvResetNextTaskUnblockTime+0x1a>
    a734:	2301      	movs	r3, #1
    a736:	b943      	cbnz	r3, a74a <prvResetNextTaskUnblockTime+0x1e>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    a738:	4b06      	ldr	r3, [pc, #24]	; (a754 <prvResetNextTaskUnblockTime+0x28>)
    a73a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a73c:	68d2      	ldr	r2, [r2, #12]
    a73e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xGenericListItem));
    a740:	6852      	ldr	r2, [r2, #4]
    a742:	62da      	str	r2, [r3, #44]	; 0x2c
    a744:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    a746:	2300      	movs	r3, #0
    a748:	e7f5      	b.n	a736 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
    a74a:	f04f 32ff 	mov.w	r2, #4294967295
    a74e:	4b01      	ldr	r3, [pc, #4]	; (a754 <prvResetNextTaskUnblockTime+0x28>)
    a750:	62da      	str	r2, [r3, #44]	; 0x2c
    a752:	4770      	bx	lr
    a754:	20012790 	.word	0x20012790

0000a758 <prvDeleteTCB>:
{
    a758:	b538      	push	{r3, r4, r5, lr}
    a75a:	4605      	mov	r5, r0
		vPortFreeAligned(pxTCB->pxStack);
    a75c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    a75e:	4c02      	ldr	r4, [pc, #8]	; (a768 <prvDeleteTCB+0x10>)
    a760:	47a0      	blx	r4
	vPortFree(pxTCB);
    a762:	4628      	mov	r0, r5
    a764:	47a0      	blx	r4
    a766:	bd38      	pop	{r3, r4, r5, pc}
    a768:	00009d79 	.word	0x00009d79

0000a76c <prvAllocateTCBAndStack>:
{
    a76c:	b570      	push	{r4, r5, r6, lr}
    a76e:	4606      	mov	r6, r0
		pxStack = (StackType_t *)pvPortMallocAligned(
    a770:	460c      	mov	r4, r1
    a772:	b919      	cbnz	r1, a77c <prvAllocateTCBAndStack+0x10>
    a774:	0080      	lsls	r0, r0, #2
    a776:	4b0c      	ldr	r3, [pc, #48]	; (a7a8 <prvAllocateTCBAndStack+0x3c>)
    a778:	4798      	blx	r3
    a77a:	4604      	mov	r4, r0
		if (pxStack != NULL) {
    a77c:	b18c      	cbz	r4, a7a2 <prvAllocateTCBAndStack+0x36>
			pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t));
    a77e:	2054      	movs	r0, #84	; 0x54
    a780:	4b09      	ldr	r3, [pc, #36]	; (a7a8 <prvAllocateTCBAndStack+0x3c>)
    a782:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    a784:	4605      	mov	r5, r0
    a786:	b140      	cbz	r0, a79a <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
    a788:	6304      	str	r4, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    a78a:	b125      	cbz	r5, a796 <prvAllocateTCBAndStack+0x2a>
			(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)usStackDepth * sizeof(StackType_t));
    a78c:	00b2      	lsls	r2, r6, #2
    a78e:	21a5      	movs	r1, #165	; 0xa5
    a790:	6b28      	ldr	r0, [r5, #48]	; 0x30
    a792:	4b06      	ldr	r3, [pc, #24]	; (a7ac <prvAllocateTCBAndStack+0x40>)
    a794:	4798      	blx	r3
}
    a796:	4628      	mov	r0, r5
    a798:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree(pxStack);
    a79a:	4620      	mov	r0, r4
    a79c:	4b04      	ldr	r3, [pc, #16]	; (a7b0 <prvAllocateTCBAndStack+0x44>)
    a79e:	4798      	blx	r3
    a7a0:	e7f3      	b.n	a78a <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
    a7a2:	2500      	movs	r5, #0
    a7a4:	e7f1      	b.n	a78a <prvAllocateTCBAndStack+0x1e>
    a7a6:	bf00      	nop
    a7a8:	00009cbd 	.word	0x00009cbd
    a7ac:	0000c119 	.word	0x0000c119
    a7b0:	00009d79 	.word	0x00009d79

0000a7b4 <prvInitialiseTCBVariables>:
{
    a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7b6:	4604      	mov	r4, r0
    a7b8:	4615      	mov	r5, r2
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    a7ba:	2300      	movs	r3, #0
    a7bc:	2b07      	cmp	r3, #7
    a7be:	d918      	bls.n	a7f2 <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    a7c0:	2300      	movs	r3, #0
    a7c2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    a7c6:	2d04      	cmp	r5, #4
    a7c8:	d900      	bls.n	a7cc <prvInitialiseTCBVariables+0x18>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    a7ca:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
    a7cc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
    a7ce:	6465      	str	r5, [r4, #68]	; 0x44
		pxTCB->uxMutexesHeld  = 0;
    a7d0:	2600      	movs	r6, #0
    a7d2:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxTCB->xGenericListItem));
    a7d4:	1d20      	adds	r0, r4, #4
    a7d6:	4f0b      	ldr	r7, [pc, #44]	; (a804 <prvInitialiseTCBVariables+0x50>)
    a7d8:	47b8      	blx	r7
	vListInitialiseItem(&(pxTCB->xEventListItem));
    a7da:	f104 0018 	add.w	r0, r4, #24
    a7de:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER(&(pxTCB->xGenericListItem), pxTCB);
    a7e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    a7e2:	f1c5 0505 	rsb	r5, r5, #5
    a7e6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxTCB->xEventListItem), pxTCB);
    a7e8:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
    a7ea:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->eNotifyState    = eNotWaitingNotification;
    a7ec:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    a7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[x] = pcName[x];
    a7f2:	5cc8      	ldrb	r0, [r1, r3]
    a7f4:	18e2      	adds	r2, r4, r3
    a7f6:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if (pcName[x] == 0x00) {
    a7fa:	5cca      	ldrb	r2, [r1, r3]
    a7fc:	2a00      	cmp	r2, #0
    a7fe:	d0df      	beq.n	a7c0 <prvInitialiseTCBVariables+0xc>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    a800:	3301      	adds	r3, #1
    a802:	e7db      	b.n	a7bc <prvInitialiseTCBVariables+0x8>
    a804:	000098fb 	.word	0x000098fb

0000a808 <prvInitialiseTaskLists>:
{
    a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    a80a:	2400      	movs	r4, #0
    a80c:	2c04      	cmp	r4, #4
    a80e:	d915      	bls.n	a83c <prvInitialiseTaskLists+0x34>
	vListInitialise(&xDelayedTaskList1);
    a810:	4c0e      	ldr	r4, [pc, #56]	; (a84c <prvInitialiseTaskLists+0x44>)
    a812:	f104 0794 	add.w	r7, r4, #148	; 0x94
    a816:	4638      	mov	r0, r7
    a818:	4d0d      	ldr	r5, [pc, #52]	; (a850 <prvInitialiseTaskLists+0x48>)
    a81a:	47a8      	blx	r5
	vListInitialise(&xDelayedTaskList2);
    a81c:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
    a820:	4630      	mov	r0, r6
    a822:	47a8      	blx	r5
	vListInitialise(&xPendingReadyList);
    a824:	f104 0014 	add.w	r0, r4, #20
    a828:	47a8      	blx	r5
		vListInitialise(&xTasksWaitingTermination);
    a82a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a82e:	47a8      	blx	r5
		vListInitialise(&xSuspendedTaskList);
    a830:	4620      	mov	r0, r4
    a832:	47a8      	blx	r5
	pxDelayedTaskList         = &xDelayedTaskList1;
    a834:	62a7      	str	r7, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    a836:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    a83c:	2014      	movs	r0, #20
    a83e:	4b05      	ldr	r3, [pc, #20]	; (a854 <prvInitialiseTaskLists+0x4c>)
    a840:	fb00 3004 	mla	r0, r0, r4, r3
    a844:	4b02      	ldr	r3, [pc, #8]	; (a850 <prvInitialiseTaskLists+0x48>)
    a846:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    a848:	3401      	adds	r4, #1
    a84a:	e7df      	b.n	a80c <prvInitialiseTaskLists+0x4>
    a84c:	20012790 	.word	0x20012790
    a850:	000098e5 	.word	0x000098e5
    a854:	200127c0 	.word	0x200127c0

0000a858 <prvAddCurrentTaskToDelayedList>:
{
    a858:	b538      	push	{r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xGenericListItem), xTimeToWake);
    a85a:	4b0f      	ldr	r3, [pc, #60]	; (a898 <prvAddCurrentTaskToDelayedList+0x40>)
    a85c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    a860:	6050      	str	r0, [r2, #4]
	if (xTimeToWake < xTickCount) {
    a862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    a866:	4298      	cmp	r0, r3
    a868:	d30c      	bcc.n	a884 <prvAddCurrentTaskToDelayedList+0x2c>
    a86a:	4604      	mov	r4, r0
		vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xGenericListItem));
    a86c:	4d0a      	ldr	r5, [pc, #40]	; (a898 <prvAddCurrentTaskToDelayedList+0x40>)
    a86e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    a870:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    a874:	3104      	adds	r1, #4
    a876:	4b09      	ldr	r3, [pc, #36]	; (a89c <prvAddCurrentTaskToDelayedList+0x44>)
    a878:	4798      	blx	r3
		if (xTimeToWake < xNextTaskUnblockTime) {
    a87a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    a87c:	429c      	cmp	r4, r3
    a87e:	d200      	bcs.n	a882 <prvAddCurrentTaskToDelayedList+0x2a>
			xNextTaskUnblockTime = xTimeToWake;
    a880:	62ec      	str	r4, [r5, #44]	; 0x2c
    a882:	bd38      	pop	{r3, r4, r5, pc}
		vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xGenericListItem));
    a884:	4b04      	ldr	r3, [pc, #16]	; (a898 <prvAddCurrentTaskToDelayedList+0x40>)
    a886:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    a88a:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    a88e:	3104      	adds	r1, #4
    a890:	4b02      	ldr	r3, [pc, #8]	; (a89c <prvAddCurrentTaskToDelayedList+0x44>)
    a892:	4798      	blx	r3
    a894:	bd38      	pop	{r3, r4, r5, pc}
    a896:	bf00      	nop
    a898:	20012790 	.word	0x20012790
    a89c:	00009919 	.word	0x00009919

0000a8a0 <xTaskGenericCreate>:
{
    a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8a4:	b083      	sub	sp, #12
    a8a6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    a8a8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT(pxTaskCode);
    a8ac:	b158      	cbz	r0, a8c6 <xTaskGenericCreate+0x26>
    a8ae:	4680      	mov	r8, r0
	configASSERT(((uxPriority & (UBaseType_t)(~portPRIVILEGE_BIT)) < (UBaseType_t)configMAX_PRIORITIES));
    a8b0:	2f04      	cmp	r7, #4
    a8b2:	d911      	bls.n	a8d8 <xTaskGenericCreate+0x38>
    a8b4:	f04f 0380 	mov.w	r3, #128	; 0x80
    a8b8:	f383 8811 	msr	BASEPRI, r3
    a8bc:	f3bf 8f6f 	isb	sy
    a8c0:	f3bf 8f4f 	dsb	sy
    a8c4:	e7fe      	b.n	a8c4 <xTaskGenericCreate+0x24>
    a8c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    a8ca:	f383 8811 	msr	BASEPRI, r3
    a8ce:	f3bf 8f6f 	isb	sy
    a8d2:	f3bf 8f4f 	dsb	sy
    a8d6:	e7fe      	b.n	a8d6 <xTaskGenericCreate+0x36>
    a8d8:	4699      	mov	r9, r3
    a8da:	4616      	mov	r6, r2
    a8dc:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack(usStackDepth, puxStackBuffer);
    a8de:	990e      	ldr	r1, [sp, #56]	; 0x38
    a8e0:	4610      	mov	r0, r2
    a8e2:	4b3b      	ldr	r3, [pc, #236]	; (a9d0 <xTaskGenericCreate+0x130>)
    a8e4:	4798      	blx	r3
	if (pxNewTCB != NULL) {
    a8e6:	4604      	mov	r4, r0
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d06d      	beq.n	a9c8 <xTaskGenericCreate+0x128>
			pxTopOfStack = pxNewTCB->pxStack + (usStackDepth - (uint16_t)1);
    a8ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a8ee:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
    a8f2:	3d01      	subs	r5, #1
    a8f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			                      & (~((portPOINTER_SIZE_TYPE)
    a8f8:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables(pxNewTCB, pcName, uxPriority, xRegions, usStackDepth);
    a8fc:	9600      	str	r6, [sp, #0]
    a8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a900:	463a      	mov	r2, r7
    a902:	4651      	mov	r1, sl
    a904:	4e33      	ldr	r6, [pc, #204]	; (a9d4 <xTaskGenericCreate+0x134>)
    a906:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    a908:	464a      	mov	r2, r9
    a90a:	4641      	mov	r1, r8
    a90c:	4628      	mov	r0, r5
    a90e:	4b32      	ldr	r3, [pc, #200]	; (a9d8 <xTaskGenericCreate+0x138>)
    a910:	4798      	blx	r3
    a912:	6020      	str	r0, [r4, #0]
		if ((void *)pxCreatedTask != NULL) {
    a914:	f1bb 0f00 	cmp.w	fp, #0
    a918:	d001      	beq.n	a91e <xTaskGenericCreate+0x7e>
			*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    a91a:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
    a91e:	4b2f      	ldr	r3, [pc, #188]	; (a9dc <xTaskGenericCreate+0x13c>)
    a920:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
    a922:	4b2f      	ldr	r3, [pc, #188]	; (a9e0 <xTaskGenericCreate+0x140>)
    a924:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
    a928:	3201      	adds	r2, #1
    a92a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			if (pxCurrentTCB == NULL) {
    a92e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    a932:	2b00      	cmp	r3, #0
    a934:	d139      	bne.n	a9aa <xTaskGenericCreate+0x10a>
				pxCurrentTCB = pxNewTCB;
    a936:	4b2a      	ldr	r3, [pc, #168]	; (a9e0 <xTaskGenericCreate+0x140>)
    a938:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
				if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    a93c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    a940:	2b01      	cmp	r3, #1
    a942:	d101      	bne.n	a948 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
    a944:	4b27      	ldr	r3, [pc, #156]	; (a9e4 <xTaskGenericCreate+0x144>)
    a946:	4798      	blx	r3
			uxTaskNumber++;
    a948:	4a25      	ldr	r2, [pc, #148]	; (a9e0 <xTaskGenericCreate+0x140>)
    a94a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    a94e:	3301      	adds	r3, #1
    a950:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    a954:	63e3      	str	r3, [r4, #60]	; 0x3c
			prvAddTaskToReadyList(pxNewTCB);
    a956:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a958:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    a95c:	4293      	cmp	r3, r2
    a95e:	d902      	bls.n	a966 <xTaskGenericCreate+0xc6>
    a960:	4a1f      	ldr	r2, [pc, #124]	; (a9e0 <xTaskGenericCreate+0x140>)
    a962:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    a966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a96a:	009a      	lsls	r2, r3, #2
    a96c:	1d21      	adds	r1, r4, #4
    a96e:	481e      	ldr	r0, [pc, #120]	; (a9e8 <xTaskGenericCreate+0x148>)
    a970:	4410      	add	r0, r2
    a972:	4b1e      	ldr	r3, [pc, #120]	; (a9ec <xTaskGenericCreate+0x14c>)
    a974:	4798      	blx	r3
		taskEXIT_CRITICAL();
    a976:	4b1e      	ldr	r3, [pc, #120]	; (a9f0 <xTaskGenericCreate+0x150>)
    a978:	4798      	blx	r3
			xReturn = pdPASS;
    a97a:	2001      	movs	r0, #1
	if (xReturn == pdPASS) {
    a97c:	2801      	cmp	r0, #1
    a97e:	d111      	bne.n	a9a4 <xTaskGenericCreate+0x104>
		if (xSchedulerRunning != pdFALSE) {
    a980:	4b17      	ldr	r3, [pc, #92]	; (a9e0 <xTaskGenericCreate+0x140>)
    a982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    a986:	b16b      	cbz	r3, a9a4 <xTaskGenericCreate+0x104>
			if (pxCurrentTCB->uxPriority < uxPriority) {
    a988:	4b15      	ldr	r3, [pc, #84]	; (a9e0 <xTaskGenericCreate+0x140>)
    a98a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a990:	429f      	cmp	r7, r3
    a992:	d907      	bls.n	a9a4 <xTaskGenericCreate+0x104>
				taskYIELD_IF_USING_PREEMPTION();
    a994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a998:	4b16      	ldr	r3, [pc, #88]	; (a9f4 <xTaskGenericCreate+0x154>)
    a99a:	601a      	str	r2, [r3, #0]
    a99c:	f3bf 8f4f 	dsb	sy
    a9a0:	f3bf 8f6f 	isb	sy
}
    a9a4:	b003      	add	sp, #12
    a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (xSchedulerRunning == pdFALSE) {
    a9aa:	4b0d      	ldr	r3, [pc, #52]	; (a9e0 <xTaskGenericCreate+0x140>)
    a9ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d1c9      	bne.n	a948 <xTaskGenericCreate+0xa8>
					if (pxCurrentTCB->uxPriority <= uxPriority) {
    a9b4:	4b0a      	ldr	r3, [pc, #40]	; (a9e0 <xTaskGenericCreate+0x140>)
    a9b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9bc:	429f      	cmp	r7, r3
    a9be:	d3c3      	bcc.n	a948 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
    a9c0:	4b07      	ldr	r3, [pc, #28]	; (a9e0 <xTaskGenericCreate+0x140>)
    a9c2:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
    a9c6:	e7bf      	b.n	a948 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    a9c8:	f04f 30ff 	mov.w	r0, #4294967295
    a9cc:	e7d6      	b.n	a97c <xTaskGenericCreate+0xdc>
    a9ce:	bf00      	nop
    a9d0:	0000a76d 	.word	0x0000a76d
    a9d4:	0000a7b5 	.word	0x0000a7b5
    a9d8:	000099dd 	.word	0x000099dd
    a9dc:	00009a25 	.word	0x00009a25
    a9e0:	20012790 	.word	0x20012790
    a9e4:	0000a809 	.word	0x0000a809
    a9e8:	200127c0 	.word	0x200127c0
    a9ec:	00009901 	.word	0x00009901
    a9f0:	00009a69 	.word	0x00009a69
    a9f4:	e000ed04 	.word	0xe000ed04

0000a9f8 <vTaskStartScheduler>:
{
    a9f8:	b510      	push	{r4, lr}
    a9fa:	b084      	sub	sp, #16
		xReturn = xTaskCreate(prvIdleTask,
    a9fc:	2300      	movs	r3, #0
    a9fe:	9303      	str	r3, [sp, #12]
    aa00:	9302      	str	r3, [sp, #8]
    aa02:	9301      	str	r3, [sp, #4]
    aa04:	9300      	str	r3, [sp, #0]
    aa06:	2240      	movs	r2, #64	; 0x40
    aa08:	4915      	ldr	r1, [pc, #84]	; (aa60 <vTaskStartScheduler+0x68>)
    aa0a:	4816      	ldr	r0, [pc, #88]	; (aa64 <vTaskStartScheduler+0x6c>)
    aa0c:	4c16      	ldr	r4, [pc, #88]	; (aa68 <vTaskStartScheduler+0x70>)
    aa0e:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    aa10:	2801      	cmp	r0, #1
    aa12:	d00b      	beq.n	aa2c <vTaskStartScheduler+0x34>
	if (xReturn == pdPASS) {
    aa14:	2801      	cmp	r0, #1
    aa16:	d00c      	beq.n	aa32 <vTaskStartScheduler+0x3a>
		configASSERT(xReturn);
    aa18:	b9f8      	cbnz	r0, aa5a <vTaskStartScheduler+0x62>
    aa1a:	f04f 0380 	mov.w	r3, #128	; 0x80
    aa1e:	f383 8811 	msr	BASEPRI, r3
    aa22:	f3bf 8f6f 	isb	sy
    aa26:	f3bf 8f4f 	dsb	sy
    aa2a:	e7fe      	b.n	aa2a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
    aa2c:	4b0f      	ldr	r3, [pc, #60]	; (aa6c <vTaskStartScheduler+0x74>)
    aa2e:	4798      	blx	r3
    aa30:	e7f0      	b.n	aa14 <vTaskStartScheduler+0x1c>
    aa32:	f04f 0380 	mov.w	r3, #128	; 0x80
    aa36:	f383 8811 	msr	BASEPRI, r3
    aa3a:	f3bf 8f6f 	isb	sy
    aa3e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    aa42:	4b0b      	ldr	r3, [pc, #44]	; (aa70 <vTaskStartScheduler+0x78>)
    aa44:	f04f 32ff 	mov.w	r2, #4294967295
    aa48:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    aa4a:	2201      	movs	r2, #1
    aa4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		xTickCount           = (TickType_t)0U;
    aa50:	2200      	movs	r2, #0
    aa52:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (xPortStartScheduler() != pdFALSE) {
    aa56:	4b07      	ldr	r3, [pc, #28]	; (aa74 <vTaskStartScheduler+0x7c>)
    aa58:	4798      	blx	r3
}
    aa5a:	b004      	add	sp, #16
    aa5c:	bd10      	pop	{r4, pc}
    aa5e:	bf00      	nop
    aa60:	0000d5d4 	.word	0x0000d5d4
    aa64:	0000ada9 	.word	0x0000ada9
    aa68:	0000a8a1 	.word	0x0000a8a1
    aa6c:	0000b2c5 	.word	0x0000b2c5
    aa70:	20012790 	.word	0x20012790
    aa74:	00009b3d 	.word	0x00009b3d

0000aa78 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    aa78:	4a03      	ldr	r2, [pc, #12]	; (aa88 <vTaskSuspendAll+0x10>)
    aa7a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    aa7e:	3301      	adds	r3, #1
    aa80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    aa84:	4770      	bx	lr
    aa86:	bf00      	nop
    aa88:	20012790 	.word	0x20012790

0000aa8c <xTaskGetTickCount>:
		xTicks = xTickCount;
    aa8c:	4b01      	ldr	r3, [pc, #4]	; (aa94 <xTaskGetTickCount+0x8>)
    aa8e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
}
    aa92:	4770      	bx	lr
    aa94:	20012790 	.word	0x20012790

0000aa98 <xTaskIncrementTick>:
{
    aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    aa9c:	4b44      	ldr	r3, [pc, #272]	; (abb0 <xTaskIncrementTick+0x118>)
    aa9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d175      	bne.n	ab92 <xTaskIncrementTick+0xfa>
		++xTickCount;
    aaa6:	4b42      	ldr	r3, [pc, #264]	; (abb0 <xTaskIncrementTick+0x118>)
    aaa8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    aaac:	3201      	adds	r2, #1
    aaae:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			const TickType_t xConstTickCount = xTickCount;
    aab2:	f8d3 60d8 	ldr.w	r6, [r3, #216]	; 0xd8
			if (xConstTickCount == (TickType_t)0U) {
    aab6:	b9ce      	cbnz	r6, aaec <xTaskIncrementTick+0x54>
				taskSWITCH_DELAYED_LISTS();
    aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aaba:	681b      	ldr	r3, [r3, #0]
    aabc:	b143      	cbz	r3, aad0 <xTaskIncrementTick+0x38>
    aabe:	f04f 0380 	mov.w	r3, #128	; 0x80
    aac2:	f383 8811 	msr	BASEPRI, r3
    aac6:	f3bf 8f6f 	isb	sy
    aaca:	f3bf 8f4f 	dsb	sy
    aace:	e7fe      	b.n	aace <xTaskIncrementTick+0x36>
    aad0:	4b37      	ldr	r3, [pc, #220]	; (abb0 <xTaskIncrementTick+0x118>)
    aad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aad4:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
    aad8:	6299      	str	r1, [r3, #40]	; 0x28
    aada:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    aade:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    aae2:	3201      	adds	r2, #1
    aae4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    aae8:	4b32      	ldr	r3, [pc, #200]	; (abb4 <xTaskIncrementTick+0x11c>)
    aaea:	4798      	blx	r3
			if (xConstTickCount >= xNextTaskUnblockTime) {
    aaec:	4b30      	ldr	r3, [pc, #192]	; (abb0 <xTaskIncrementTick+0x118>)
    aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aaf0:	429e      	cmp	r6, r3
    aaf2:	d242      	bcs.n	ab7a <xTaskIncrementTick+0xe2>
	BaseType_t xSwitchRequired = pdFALSE;
    aaf4:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    aaf6:	4a2e      	ldr	r2, [pc, #184]	; (abb0 <xTaskIncrementTick+0x118>)
    aaf8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    aafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aafe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ab02:	0099      	lsls	r1, r3, #2
    ab04:	440a      	add	r2, r1
    ab06:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ab08:	2b01      	cmp	r3, #1
    ab0a:	d949      	bls.n	aba0 <xTaskIncrementTick+0x108>
				xSwitchRequired = pdTRUE;
    ab0c:	2401      	movs	r4, #1
    ab0e:	e047      	b.n	aba0 <xTaskIncrementTick+0x108>
								xSwitchRequired = pdTRUE;
    ab10:	2401      	movs	r4, #1
					if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    ab12:	4b27      	ldr	r3, [pc, #156]	; (abb0 <xTaskIncrementTick+0x118>)
    ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab16:	681b      	ldr	r3, [r3, #0]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d030      	beq.n	ab7e <xTaskIncrementTick+0xe6>
    ab1c:	2300      	movs	r3, #0
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d12f      	bne.n	ab82 <xTaskIncrementTick+0xea>
						pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    ab22:	4b23      	ldr	r3, [pc, #140]	; (abb0 <xTaskIncrementTick+0x118>)
    ab24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab26:	68db      	ldr	r3, [r3, #12]
    ab28:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xGenericListItem));
    ab2a:	686b      	ldr	r3, [r5, #4]
						if (xConstTickCount < xItemValue) {
    ab2c:	429e      	cmp	r6, r3
    ab2e:	d32d      	bcc.n	ab8c <xTaskIncrementTick+0xf4>
						(void)uxListRemove(&(pxTCB->xGenericListItem));
    ab30:	f105 0804 	add.w	r8, r5, #4
    ab34:	4640      	mov	r0, r8
    ab36:	4b20      	ldr	r3, [pc, #128]	; (abb8 <xTaskIncrementTick+0x120>)
    ab38:	4798      	blx	r3
						if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    ab3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ab3c:	b11b      	cbz	r3, ab46 <xTaskIncrementTick+0xae>
							(void)uxListRemove(&(pxTCB->xEventListItem));
    ab3e:	f105 0018 	add.w	r0, r5, #24
    ab42:	4b1d      	ldr	r3, [pc, #116]	; (abb8 <xTaskIncrementTick+0x120>)
    ab44:	4798      	blx	r3
						prvAddTaskToReadyList(pxTCB);
    ab46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    ab48:	4a19      	ldr	r2, [pc, #100]	; (abb0 <xTaskIncrementTick+0x118>)
    ab4a:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    ab4e:	4293      	cmp	r3, r2
    ab50:	d902      	bls.n	ab58 <xTaskIncrementTick+0xc0>
    ab52:	4a17      	ldr	r2, [pc, #92]	; (abb0 <xTaskIncrementTick+0x118>)
    ab54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ab58:	4f15      	ldr	r7, [pc, #84]	; (abb0 <xTaskIncrementTick+0x118>)
    ab5a:	f107 0030 	add.w	r0, r7, #48	; 0x30
    ab5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ab62:	009a      	lsls	r2, r3, #2
    ab64:	4641      	mov	r1, r8
    ab66:	4410      	add	r0, r2
    ab68:	4b14      	ldr	r3, [pc, #80]	; (abbc <xTaskIncrementTick+0x124>)
    ab6a:	4798      	blx	r3
							if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    ab6c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    ab6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ab74:	429a      	cmp	r2, r3
    ab76:	d2cb      	bcs.n	ab10 <xTaskIncrementTick+0x78>
    ab78:	e7cb      	b.n	ab12 <xTaskIncrementTick+0x7a>
    ab7a:	2400      	movs	r4, #0
    ab7c:	e7c9      	b.n	ab12 <xTaskIncrementTick+0x7a>
					if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    ab7e:	2301      	movs	r3, #1
    ab80:	e7cd      	b.n	ab1e <xTaskIncrementTick+0x86>
						xNextTaskUnblockTime = portMAX_DELAY;
    ab82:	f04f 32ff 	mov.w	r2, #4294967295
    ab86:	4b0a      	ldr	r3, [pc, #40]	; (abb0 <xTaskIncrementTick+0x118>)
    ab88:	62da      	str	r2, [r3, #44]	; 0x2c
						break;
    ab8a:	e7b4      	b.n	aaf6 <xTaskIncrementTick+0x5e>
							xNextTaskUnblockTime = xItemValue;
    ab8c:	4a08      	ldr	r2, [pc, #32]	; (abb0 <xTaskIncrementTick+0x118>)
    ab8e:	62d3      	str	r3, [r2, #44]	; 0x2c
							break;
    ab90:	e7b1      	b.n	aaf6 <xTaskIncrementTick+0x5e>
		++uxPendedTicks;
    ab92:	4a07      	ldr	r2, [pc, #28]	; (abb0 <xTaskIncrementTick+0x118>)
    ab94:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ab98:	3301      	adds	r3, #1
    ab9a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	BaseType_t xSwitchRequired = pdFALSE;
    ab9e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    aba0:	4b03      	ldr	r3, [pc, #12]	; (abb0 <xTaskIncrementTick+0x118>)
    aba2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    aba6:	b103      	cbz	r3, abaa <xTaskIncrementTick+0x112>
			xSwitchRequired = pdTRUE;
    aba8:	2401      	movs	r4, #1
}
    abaa:	4620      	mov	r0, r4
    abac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abb0:	20012790 	.word	0x20012790
    abb4:	0000a72d 	.word	0x0000a72d
    abb8:	0000994d 	.word	0x0000994d
    abbc:	00009901 	.word	0x00009901

0000abc0 <xTaskResumeAll>:
{
    abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxSchedulerSuspended);
    abc2:	4b3b      	ldr	r3, [pc, #236]	; (acb0 <xTaskResumeAll+0xf0>)
    abc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    abc8:	b943      	cbnz	r3, abdc <xTaskResumeAll+0x1c>
    abca:	f04f 0380 	mov.w	r3, #128	; 0x80
    abce:	f383 8811 	msr	BASEPRI, r3
    abd2:	f3bf 8f6f 	isb	sy
    abd6:	f3bf 8f4f 	dsb	sy
    abda:	e7fe      	b.n	abda <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
    abdc:	4b35      	ldr	r3, [pc, #212]	; (acb4 <xTaskResumeAll+0xf4>)
    abde:	4798      	blx	r3
		--uxSchedulerSuspended;
    abe0:	4b33      	ldr	r3, [pc, #204]	; (acb0 <xTaskResumeAll+0xf0>)
    abe2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    abe6:	3a01      	subs	r2, #1
    abe8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    abec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    abf0:	2b00      	cmp	r3, #0
    abf2:	d158      	bne.n	aca6 <xTaskResumeAll+0xe6>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    abf4:	4b2e      	ldr	r3, [pc, #184]	; (acb0 <xTaskResumeAll+0xf0>)
    abf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    abfa:	b9a3      	cbnz	r3, ac26 <xTaskResumeAll+0x66>
	BaseType_t xAlreadyYielded = pdFALSE;
    abfc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    abfe:	4b2e      	ldr	r3, [pc, #184]	; (acb8 <xTaskResumeAll+0xf8>)
    ac00:	4798      	blx	r3
}
    ac02:	4620      	mov	r0, r4
    ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList(pxTCB);
    ac06:	4d2a      	ldr	r5, [pc, #168]	; (acb0 <xTaskResumeAll+0xf0>)
    ac08:	f105 0030 	add.w	r0, r5, #48	; 0x30
    ac0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ac10:	009a      	lsls	r2, r3, #2
    ac12:	4631      	mov	r1, r6
    ac14:	4410      	add	r0, r2
    ac16:	4b29      	ldr	r3, [pc, #164]	; (acbc <xTaskResumeAll+0xfc>)
    ac18:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    ac1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    ac1c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ac22:	429a      	cmp	r2, r3
    ac24:	d214      	bcs.n	ac50 <xTaskResumeAll+0x90>
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    ac26:	4b22      	ldr	r3, [pc, #136]	; (acb0 <xTaskResumeAll+0xf0>)
    ac28:	695b      	ldr	r3, [r3, #20]
    ac2a:	b1ab      	cbz	r3, ac58 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    ac2c:	4d20      	ldr	r5, [pc, #128]	; (acb0 <xTaskResumeAll+0xf0>)
    ac2e:	6a2b      	ldr	r3, [r5, #32]
    ac30:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    ac32:	f104 0018 	add.w	r0, r4, #24
    ac36:	4f22      	ldr	r7, [pc, #136]	; (acc0 <xTaskResumeAll+0x100>)
    ac38:	47b8      	blx	r7
					(void)uxListRemove(&(pxTCB->xGenericListItem));
    ac3a:	1d26      	adds	r6, r4, #4
    ac3c:	4630      	mov	r0, r6
    ac3e:	47b8      	blx	r7
					prvAddTaskToReadyList(pxTCB);
    ac40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ac42:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
    ac46:	4293      	cmp	r3, r2
    ac48:	d9dd      	bls.n	ac06 <xTaskResumeAll+0x46>
    ac4a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
    ac4e:	e7da      	b.n	ac06 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
    ac50:	2201      	movs	r2, #1
    ac52:	f8c5 20fc 	str.w	r2, [r5, #252]	; 0xfc
    ac56:	e7e6      	b.n	ac26 <xTaskResumeAll+0x66>
				if (uxPendedTicks > (UBaseType_t)0U) {
    ac58:	4b15      	ldr	r3, [pc, #84]	; (acb0 <xTaskResumeAll+0xf0>)
    ac5a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    ac5e:	b9a3      	cbnz	r3, ac8a <xTaskResumeAll+0xca>
				if (xYieldPending == pdTRUE) {
    ac60:	4b13      	ldr	r3, [pc, #76]	; (acb0 <xTaskResumeAll+0xf0>)
    ac62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    ac66:	2b01      	cmp	r3, #1
    ac68:	d11f      	bne.n	acaa <xTaskResumeAll+0xea>
					taskYIELD_IF_USING_PREEMPTION();
    ac6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ac6e:	4b15      	ldr	r3, [pc, #84]	; (acc4 <xTaskResumeAll+0x104>)
    ac70:	601a      	str	r2, [r3, #0]
    ac72:	f3bf 8f4f 	dsb	sy
    ac76:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    ac7a:	2401      	movs	r4, #1
    ac7c:	e7bf      	b.n	abfe <xTaskResumeAll+0x3e>
						--uxPendedTicks;
    ac7e:	4a0c      	ldr	r2, [pc, #48]	; (acb0 <xTaskResumeAll+0xf0>)
    ac80:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    ac84:	3b01      	subs	r3, #1
    ac86:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
					while (uxPendedTicks > (UBaseType_t)0U) {
    ac8a:	4b09      	ldr	r3, [pc, #36]	; (acb0 <xTaskResumeAll+0xf0>)
    ac8c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    ac90:	2b00      	cmp	r3, #0
    ac92:	d0e5      	beq.n	ac60 <xTaskResumeAll+0xa0>
						if (xTaskIncrementTick() != pdFALSE) {
    ac94:	4b0c      	ldr	r3, [pc, #48]	; (acc8 <xTaskResumeAll+0x108>)
    ac96:	4798      	blx	r3
    ac98:	2800      	cmp	r0, #0
    ac9a:	d0f0      	beq.n	ac7e <xTaskResumeAll+0xbe>
							xYieldPending = pdTRUE;
    ac9c:	2201      	movs	r2, #1
    ac9e:	4b04      	ldr	r3, [pc, #16]	; (acb0 <xTaskResumeAll+0xf0>)
    aca0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    aca4:	e7eb      	b.n	ac7e <xTaskResumeAll+0xbe>
	BaseType_t xAlreadyYielded = pdFALSE;
    aca6:	2400      	movs	r4, #0
    aca8:	e7a9      	b.n	abfe <xTaskResumeAll+0x3e>
    acaa:	2400      	movs	r4, #0
    acac:	e7a7      	b.n	abfe <xTaskResumeAll+0x3e>
    acae:	bf00      	nop
    acb0:	20012790 	.word	0x20012790
    acb4:	00009a25 	.word	0x00009a25
    acb8:	00009a69 	.word	0x00009a69
    acbc:	00009901 	.word	0x00009901
    acc0:	0000994d 	.word	0x0000994d
    acc4:	e000ed04 	.word	0xe000ed04
    acc8:	0000aa99 	.word	0x0000aa99

0000accc <vTaskDelay>:
{
    accc:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    acce:	b1f0      	cbz	r0, ad0e <vTaskDelay+0x42>
    acd0:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    acd2:	4b14      	ldr	r3, [pc, #80]	; (ad24 <vTaskDelay+0x58>)
    acd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    acd8:	b143      	cbz	r3, acec <vTaskDelay+0x20>
    acda:	f04f 0380 	mov.w	r3, #128	; 0x80
    acde:	f383 8811 	msr	BASEPRI, r3
    ace2:	f3bf 8f6f 	isb	sy
    ace6:	f3bf 8f4f 	dsb	sy
    acea:	e7fe      	b.n	acea <vTaskDelay+0x1e>
		vTaskSuspendAll();
    acec:	4b0e      	ldr	r3, [pc, #56]	; (ad28 <vTaskDelay+0x5c>)
    acee:	4798      	blx	r3
			xTimeToWake = xTickCount + xTicksToDelay;
    acf0:	4b0c      	ldr	r3, [pc, #48]	; (ad24 <vTaskDelay+0x58>)
    acf2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    acf6:	4414      	add	r4, r2
			if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    acf8:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    acfc:	3004      	adds	r0, #4
    acfe:	4b0b      	ldr	r3, [pc, #44]	; (ad2c <vTaskDelay+0x60>)
    ad00:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    ad02:	4620      	mov	r0, r4
    ad04:	4b0a      	ldr	r3, [pc, #40]	; (ad30 <vTaskDelay+0x64>)
    ad06:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    ad08:	4b0a      	ldr	r3, [pc, #40]	; (ad34 <vTaskDelay+0x68>)
    ad0a:	4798      	blx	r3
    ad0c:	e000      	b.n	ad10 <vTaskDelay+0x44>
	BaseType_t xAlreadyYielded = pdFALSE;
    ad0e:	2000      	movs	r0, #0
	if (xAlreadyYielded == pdFALSE) {
    ad10:	b938      	cbnz	r0, ad22 <vTaskDelay+0x56>
		portYIELD_WITHIN_API();
    ad12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ad16:	4b08      	ldr	r3, [pc, #32]	; (ad38 <vTaskDelay+0x6c>)
    ad18:	601a      	str	r2, [r3, #0]
    ad1a:	f3bf 8f4f 	dsb	sy
    ad1e:	f3bf 8f6f 	isb	sy
    ad22:	bd10      	pop	{r4, pc}
    ad24:	20012790 	.word	0x20012790
    ad28:	0000aa79 	.word	0x0000aa79
    ad2c:	0000994d 	.word	0x0000994d
    ad30:	0000a859 	.word	0x0000a859
    ad34:	0000abc1 	.word	0x0000abc1
    ad38:	e000ed04 	.word	0xe000ed04

0000ad3c <prvCheckTasksWaitingTermination>:
{
    ad3c:	b538      	push	{r3, r4, r5, lr}
		while (uxTasksDeleted > (UBaseType_t)0U) {
    ad3e:	4b13      	ldr	r3, [pc, #76]	; (ad8c <prvCheckTasksWaitingTermination+0x50>)
    ad40:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
    ad44:	b30b      	cbz	r3, ad8a <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
    ad46:	4b12      	ldr	r3, [pc, #72]	; (ad90 <prvCheckTasksWaitingTermination+0x54>)
    ad48:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY(&xTasksWaitingTermination);
    ad4a:	4b10      	ldr	r3, [pc, #64]	; (ad8c <prvCheckTasksWaitingTermination+0x50>)
    ad4c:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
			(void)xTaskResumeAll();
    ad50:	4b10      	ldr	r3, [pc, #64]	; (ad94 <prvCheckTasksWaitingTermination+0x58>)
    ad52:	4798      	blx	r3
			if (xListIsEmpty == pdFALSE) {
    ad54:	2c00      	cmp	r4, #0
    ad56:	d0f2      	beq.n	ad3e <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
    ad58:	4b0f      	ldr	r3, [pc, #60]	; (ad98 <prvCheckTasksWaitingTermination+0x5c>)
    ad5a:	4798      	blx	r3
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
    ad5c:	4c0b      	ldr	r4, [pc, #44]	; (ad8c <prvCheckTasksWaitingTermination+0x50>)
    ad5e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    ad62:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xGenericListItem));
    ad64:	1d28      	adds	r0, r5, #4
    ad66:	4b0d      	ldr	r3, [pc, #52]	; (ad9c <prvCheckTasksWaitingTermination+0x60>)
    ad68:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    ad6a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    ad6e:	3b01      	subs	r3, #1
    ad70:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
					--uxTasksDeleted;
    ad74:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    ad78:	3b01      	subs	r3, #1
    ad7a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				taskEXIT_CRITICAL();
    ad7e:	4b08      	ldr	r3, [pc, #32]	; (ada0 <prvCheckTasksWaitingTermination+0x64>)
    ad80:	4798      	blx	r3
				prvDeleteTCB(pxTCB);
    ad82:	4628      	mov	r0, r5
    ad84:	4b07      	ldr	r3, [pc, #28]	; (ada4 <prvCheckTasksWaitingTermination+0x68>)
    ad86:	4798      	blx	r3
    ad88:	e7d9      	b.n	ad3e <prvCheckTasksWaitingTermination+0x2>
}
    ad8a:	bd38      	pop	{r3, r4, r5, pc}
    ad8c:	20012790 	.word	0x20012790
    ad90:	0000aa79 	.word	0x0000aa79
    ad94:	0000abc1 	.word	0x0000abc1
    ad98:	00009a25 	.word	0x00009a25
    ad9c:	0000994d 	.word	0x0000994d
    ada0:	00009a69 	.word	0x00009a69
    ada4:	0000a759 	.word	0x0000a759

0000ada8 <prvIdleTask>:
{
    ada8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
    adaa:	4b07      	ldr	r3, [pc, #28]	; (adc8 <prvIdleTask+0x20>)
    adac:	4798      	blx	r3
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    adae:	4b07      	ldr	r3, [pc, #28]	; (adcc <prvIdleTask+0x24>)
    adb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    adb2:	2b01      	cmp	r3, #1
    adb4:	d9f9      	bls.n	adaa <prvIdleTask+0x2>
				taskYIELD();
    adb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    adba:	4b05      	ldr	r3, [pc, #20]	; (add0 <prvIdleTask+0x28>)
    adbc:	601a      	str	r2, [r3, #0]
    adbe:	f3bf 8f4f 	dsb	sy
    adc2:	f3bf 8f6f 	isb	sy
    adc6:	e7f0      	b.n	adaa <prvIdleTask+0x2>
    adc8:	0000ad3d 	.word	0x0000ad3d
    adcc:	20012790 	.word	0x20012790
    add0:	e000ed04 	.word	0xe000ed04

0000add4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    add4:	4b26      	ldr	r3, [pc, #152]	; (ae70 <vTaskSwitchContext+0x9c>)
    add6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    adda:	b9bb      	cbnz	r3, ae0c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
    addc:	2200      	movs	r2, #0
    adde:	4b24      	ldr	r3, [pc, #144]	; (ae70 <vTaskSwitchContext+0x9c>)
    ade0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ade4:	4a22      	ldr	r2, [pc, #136]	; (ae70 <vTaskSwitchContext+0x9c>)
    ade6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    adea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    adee:	0099      	lsls	r1, r3, #2
    adf0:	440a      	add	r2, r1
    adf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    adf4:	b9c3      	cbnz	r3, ae28 <vTaskSwitchContext+0x54>
    adf6:	4b1e      	ldr	r3, [pc, #120]	; (ae70 <vTaskSwitchContext+0x9c>)
    adf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    adfc:	b15b      	cbz	r3, ae16 <vTaskSwitchContext+0x42>
    adfe:	4a1c      	ldr	r2, [pc, #112]	; (ae70 <vTaskSwitchContext+0x9c>)
    ae00:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ae04:	3b01      	subs	r3, #1
    ae06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ae0a:	e7eb      	b.n	ade4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
    ae0c:	2201      	movs	r2, #1
    ae0e:	4b18      	ldr	r3, [pc, #96]	; (ae70 <vTaskSwitchContext+0x9c>)
    ae10:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    ae14:	4770      	bx	lr
    ae16:	f04f 0380 	mov.w	r3, #128	; 0x80
    ae1a:	f383 8811 	msr	BASEPRI, r3
    ae1e:	f3bf 8f6f 	isb	sy
    ae22:	f3bf 8f4f 	dsb	sy
    ae26:	e7fe      	b.n	ae26 <vTaskSwitchContext+0x52>
{
    ae28:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ae2a:	4a11      	ldr	r2, [pc, #68]	; (ae70 <vTaskSwitchContext+0x9c>)
    ae2c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ae30:	0099      	lsls	r1, r3, #2
    ae32:	18cc      	adds	r4, r1, r3
    ae34:	00a0      	lsls	r0, r4, #2
    ae36:	4410      	add	r0, r2
    ae38:	6b44      	ldr	r4, [r0, #52]	; 0x34
    ae3a:	6864      	ldr	r4, [r4, #4]
    ae3c:	6344      	str	r4, [r0, #52]	; 0x34
    ae3e:	3230      	adds	r2, #48	; 0x30
    ae40:	4419      	add	r1, r3
    ae42:	0088      	lsls	r0, r1, #2
    ae44:	4601      	mov	r1, r0
    ae46:	3008      	adds	r0, #8
    ae48:	4402      	add	r2, r0
    ae4a:	4294      	cmp	r4, r2
    ae4c:	d00b      	beq.n	ae66 <vTaskSwitchContext+0x92>
    ae4e:	4908      	ldr	r1, [pc, #32]	; (ae70 <vTaskSwitchContext+0x9c>)
    ae50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ae54:	009a      	lsls	r2, r3, #2
    ae56:	440a      	add	r2, r1
    ae58:	6b53      	ldr	r3, [r2, #52]	; 0x34
    ae5a:	68db      	ldr	r3, [r3, #12]
    ae5c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
    ae60:	f85d 4b04 	ldr.w	r4, [sp], #4
    ae64:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ae66:	6860      	ldr	r0, [r4, #4]
    ae68:	4a01      	ldr	r2, [pc, #4]	; (ae70 <vTaskSwitchContext+0x9c>)
    ae6a:	440a      	add	r2, r1
    ae6c:	6350      	str	r0, [r2, #52]	; 0x34
    ae6e:	e7ee      	b.n	ae4e <vTaskSwitchContext+0x7a>
    ae70:	20012790 	.word	0x20012790

0000ae74 <vTaskPlaceOnEventList>:
{
    ae74:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    ae76:	b1a8      	cbz	r0, aea4 <vTaskPlaceOnEventList+0x30>
    ae78:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    ae7a:	4d12      	ldr	r5, [pc, #72]	; (aec4 <vTaskPlaceOnEventList+0x50>)
    ae7c:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    ae80:	3118      	adds	r1, #24
    ae82:	4b11      	ldr	r3, [pc, #68]	; (aec8 <vTaskPlaceOnEventList+0x54>)
    ae84:	4798      	blx	r3
	if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    ae86:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
    ae8a:	3004      	adds	r0, #4
    ae8c:	4b0f      	ldr	r3, [pc, #60]	; (aecc <vTaskPlaceOnEventList+0x58>)
    ae8e:	4798      	blx	r3
		if (xTicksToWait == portMAX_DELAY) {
    ae90:	f1b4 3fff 	cmp.w	r4, #4294967295
    ae94:	d00f      	beq.n	aeb6 <vTaskPlaceOnEventList+0x42>
			xTimeToWake = xTickCount + xTicksToWait;
    ae96:	4b0b      	ldr	r3, [pc, #44]	; (aec4 <vTaskPlaceOnEventList+0x50>)
    ae98:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    ae9c:	4420      	add	r0, r4
    ae9e:	4b0c      	ldr	r3, [pc, #48]	; (aed0 <vTaskPlaceOnEventList+0x5c>)
    aea0:	4798      	blx	r3
    aea2:	bd38      	pop	{r3, r4, r5, pc}
    aea4:	f04f 0380 	mov.w	r3, #128	; 0x80
    aea8:	f383 8811 	msr	BASEPRI, r3
    aeac:	f3bf 8f6f 	isb	sy
    aeb0:	f3bf 8f4f 	dsb	sy
    aeb4:	e7fe      	b.n	aeb4 <vTaskPlaceOnEventList+0x40>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xGenericListItem));
    aeb6:	4628      	mov	r0, r5
    aeb8:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    aebc:	3104      	adds	r1, #4
    aebe:	4b05      	ldr	r3, [pc, #20]	; (aed4 <vTaskPlaceOnEventList+0x60>)
    aec0:	4798      	blx	r3
    aec2:	bd38      	pop	{r3, r4, r5, pc}
    aec4:	20012790 	.word	0x20012790
    aec8:	00009919 	.word	0x00009919
    aecc:	0000994d 	.word	0x0000994d
    aed0:	0000a859 	.word	0x0000a859
    aed4:	00009901 	.word	0x00009901

0000aed8 <vTaskPlaceOnEventListRestricted>:
	configASSERT(pxEventList);
    aed8:	b1b0      	cbz	r0, af08 <vTaskPlaceOnEventListRestricted+0x30>
{
    aeda:	b570      	push	{r4, r5, r6, lr}
    aedc:	4615      	mov	r5, r2
    aede:	460c      	mov	r4, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    aee0:	4e11      	ldr	r6, [pc, #68]	; (af28 <vTaskPlaceOnEventListRestricted+0x50>)
    aee2:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
    aee6:	3118      	adds	r1, #24
    aee8:	4b10      	ldr	r3, [pc, #64]	; (af2c <vTaskPlaceOnEventListRestricted+0x54>)
    aeea:	4798      	blx	r3
	if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    aeec:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    aef0:	3004      	adds	r0, #4
    aef2:	4b0f      	ldr	r3, [pc, #60]	; (af30 <vTaskPlaceOnEventListRestricted+0x58>)
    aef4:	4798      	blx	r3
		if (xWaitIndefinitely == pdTRUE) {
    aef6:	2d01      	cmp	r5, #1
    aef8:	d00f      	beq.n	af1a <vTaskPlaceOnEventListRestricted+0x42>
			xTimeToWake = xTickCount + xTicksToWait;
    aefa:	4b0b      	ldr	r3, [pc, #44]	; (af28 <vTaskPlaceOnEventListRestricted+0x50>)
    aefc:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    af00:	4420      	add	r0, r4
    af02:	4b0c      	ldr	r3, [pc, #48]	; (af34 <vTaskPlaceOnEventListRestricted+0x5c>)
    af04:	4798      	blx	r3
    af06:	bd70      	pop	{r4, r5, r6, pc}
    af08:	f04f 0380 	mov.w	r3, #128	; 0x80
    af0c:	f383 8811 	msr	BASEPRI, r3
    af10:	f3bf 8f6f 	isb	sy
    af14:	f3bf 8f4f 	dsb	sy
    af18:	e7fe      	b.n	af18 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xGenericListItem));
    af1a:	4630      	mov	r0, r6
    af1c:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
    af20:	3104      	adds	r1, #4
    af22:	4b02      	ldr	r3, [pc, #8]	; (af2c <vTaskPlaceOnEventListRestricted+0x54>)
    af24:	4798      	blx	r3
    af26:	bd70      	pop	{r4, r5, r6, pc}
    af28:	20012790 	.word	0x20012790
    af2c:	00009901 	.word	0x00009901
    af30:	0000994d 	.word	0x0000994d
    af34:	0000a859 	.word	0x0000a859

0000af38 <xTaskRemoveFromEventList>:
{
    af38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    af3a:	68c3      	ldr	r3, [r0, #12]
    af3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    af3e:	b34c      	cbz	r4, af94 <xTaskRemoveFromEventList+0x5c>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    af40:	f104 0518 	add.w	r5, r4, #24
    af44:	4628      	mov	r0, r5
    af46:	4b1b      	ldr	r3, [pc, #108]	; (afb4 <xTaskRemoveFromEventList+0x7c>)
    af48:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    af4a:	4b1b      	ldr	r3, [pc, #108]	; (afb8 <xTaskRemoveFromEventList+0x80>)
    af4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    af50:	bb4b      	cbnz	r3, afa6 <xTaskRemoveFromEventList+0x6e>
		(void)uxListRemove(&(pxUnblockedTCB->xGenericListItem));
    af52:	1d25      	adds	r5, r4, #4
    af54:	4628      	mov	r0, r5
    af56:	4b17      	ldr	r3, [pc, #92]	; (afb4 <xTaskRemoveFromEventList+0x7c>)
    af58:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    af5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    af5c:	4a16      	ldr	r2, [pc, #88]	; (afb8 <xTaskRemoveFromEventList+0x80>)
    af5e:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    af62:	4293      	cmp	r3, r2
    af64:	d902      	bls.n	af6c <xTaskRemoveFromEventList+0x34>
    af66:	4a14      	ldr	r2, [pc, #80]	; (afb8 <xTaskRemoveFromEventList+0x80>)
    af68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    af6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    af70:	009a      	lsls	r2, r3, #2
    af72:	4629      	mov	r1, r5
    af74:	4811      	ldr	r0, [pc, #68]	; (afbc <xTaskRemoveFromEventList+0x84>)
    af76:	4410      	add	r0, r2
    af78:	4b11      	ldr	r3, [pc, #68]	; (afc0 <xTaskRemoveFromEventList+0x88>)
    af7a:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    af7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    af7e:	4b0e      	ldr	r3, [pc, #56]	; (afb8 <xTaskRemoveFromEventList+0x80>)
    af80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af86:	429a      	cmp	r2, r3
    af88:	d912      	bls.n	afb0 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
    af8a:	2001      	movs	r0, #1
    af8c:	4b0a      	ldr	r3, [pc, #40]	; (afb8 <xTaskRemoveFromEventList+0x80>)
    af8e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    af92:	bd38      	pop	{r3, r4, r5, pc}
    af94:	f04f 0380 	mov.w	r3, #128	; 0x80
    af98:	f383 8811 	msr	BASEPRI, r3
    af9c:	f3bf 8f6f 	isb	sy
    afa0:	f3bf 8f4f 	dsb	sy
    afa4:	e7fe      	b.n	afa4 <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    afa6:	4629      	mov	r1, r5
    afa8:	4806      	ldr	r0, [pc, #24]	; (afc4 <xTaskRemoveFromEventList+0x8c>)
    afaa:	4b05      	ldr	r3, [pc, #20]	; (afc0 <xTaskRemoveFromEventList+0x88>)
    afac:	4798      	blx	r3
    afae:	e7e5      	b.n	af7c <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    afb0:	2000      	movs	r0, #0
}
    afb2:	bd38      	pop	{r3, r4, r5, pc}
    afb4:	0000994d 	.word	0x0000994d
    afb8:	20012790 	.word	0x20012790
    afbc:	200127c0 	.word	0x200127c0
    afc0:	00009901 	.word	0x00009901
    afc4:	200127a4 	.word	0x200127a4

0000afc8 <vTaskSetTimeOutState>:
	configASSERT(pxTimeOut);
    afc8:	b138      	cbz	r0, afda <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    afca:	4a08      	ldr	r2, [pc, #32]	; (afec <vTaskSetTimeOutState+0x24>)
    afcc:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    afd0:	6001      	str	r1, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    afd2:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
    afd6:	6042      	str	r2, [r0, #4]
    afd8:	4770      	bx	lr
    afda:	f04f 0380 	mov.w	r3, #128	; 0x80
    afde:	f383 8811 	msr	BASEPRI, r3
    afe2:	f3bf 8f6f 	isb	sy
    afe6:	f3bf 8f4f 	dsb	sy
    afea:	e7fe      	b.n	afea <vTaskSetTimeOutState+0x22>
    afec:	20012790 	.word	0x20012790

0000aff0 <xTaskCheckForTimeOut>:
{
    aff0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxTimeOut);
    aff2:	b1d0      	cbz	r0, b02a <xTaskCheckForTimeOut+0x3a>
    aff4:	4604      	mov	r4, r0
	configASSERT(pxTicksToWait);
    aff6:	b309      	cbz	r1, b03c <xTaskCheckForTimeOut+0x4c>
    aff8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    affa:	4b1c      	ldr	r3, [pc, #112]	; (b06c <xTaskCheckForTimeOut+0x7c>)
    affc:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    affe:	4b1c      	ldr	r3, [pc, #112]	; (b070 <xTaskCheckForTimeOut+0x80>)
    b000:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		if (*pxTicksToWait == portMAX_DELAY) {
    b004:	682b      	ldr	r3, [r5, #0]
    b006:	f1b3 3fff 	cmp.w	r3, #4294967295
    b00a:	d02b      	beq.n	b064 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    b00c:	6820      	ldr	r0, [r4, #0]
    b00e:	4a18      	ldr	r2, [pc, #96]	; (b070 <xTaskCheckForTimeOut+0x80>)
    b010:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
    b014:	4290      	cmp	r0, r2
    b016:	d002      	beq.n	b01e <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    b018:	6862      	ldr	r2, [r4, #4]
    b01a:	4291      	cmp	r1, r2
    b01c:	d224      	bcs.n	b068 <xTaskCheckForTimeOut+0x78>
		} else if ((xConstTickCount - pxTimeOut->xTimeOnEntering) < *pxTicksToWait) {
    b01e:	6862      	ldr	r2, [r4, #4]
    b020:	1a88      	subs	r0, r1, r2
    b022:	4283      	cmp	r3, r0
    b024:	d813      	bhi.n	b04e <xTaskCheckForTimeOut+0x5e>
			xReturn = pdTRUE;
    b026:	2401      	movs	r4, #1
    b028:	e018      	b.n	b05c <xTaskCheckForTimeOut+0x6c>
    b02a:	f04f 0380 	mov.w	r3, #128	; 0x80
    b02e:	f383 8811 	msr	BASEPRI, r3
    b032:	f3bf 8f6f 	isb	sy
    b036:	f3bf 8f4f 	dsb	sy
    b03a:	e7fe      	b.n	b03a <xTaskCheckForTimeOut+0x4a>
    b03c:	f04f 0380 	mov.w	r3, #128	; 0x80
    b040:	f383 8811 	msr	BASEPRI, r3
    b044:	f3bf 8f6f 	isb	sy
    b048:	f3bf 8f4f 	dsb	sy
    b04c:	e7fe      	b.n	b04c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= (xConstTickCount - pxTimeOut->xTimeOnEntering);
    b04e:	1a52      	subs	r2, r2, r1
    b050:	4413      	add	r3, r2
    b052:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState(pxTimeOut);
    b054:	4620      	mov	r0, r4
    b056:	4b07      	ldr	r3, [pc, #28]	; (b074 <xTaskCheckForTimeOut+0x84>)
    b058:	4798      	blx	r3
			xReturn = pdFALSE;
    b05a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    b05c:	4b06      	ldr	r3, [pc, #24]	; (b078 <xTaskCheckForTimeOut+0x88>)
    b05e:	4798      	blx	r3
}
    b060:	4620      	mov	r0, r4
    b062:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdFALSE;
    b064:	2400      	movs	r4, #0
    b066:	e7f9      	b.n	b05c <xTaskCheckForTimeOut+0x6c>
			xReturn = pdTRUE;
    b068:	2401      	movs	r4, #1
    b06a:	e7f7      	b.n	b05c <xTaskCheckForTimeOut+0x6c>
    b06c:	00009a25 	.word	0x00009a25
    b070:	20012790 	.word	0x20012790
    b074:	0000afc9 	.word	0x0000afc9
    b078:	00009a69 	.word	0x00009a69

0000b07c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    b07c:	2201      	movs	r2, #1
    b07e:	4b02      	ldr	r3, [pc, #8]	; (b088 <vTaskMissedYield+0xc>)
    b080:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    b084:	4770      	bx	lr
    b086:	bf00      	nop
    b088:	20012790 	.word	0x20012790

0000b08c <xTaskGetSchedulerState>:

BaseType_t xTaskGetSchedulerState(void)
{
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
    b08c:	4b06      	ldr	r3, [pc, #24]	; (b0a8 <xTaskGetSchedulerState+0x1c>)
    b08e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    b092:	b12b      	cbz	r3, b0a0 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
	} else {
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    b094:	4b04      	ldr	r3, [pc, #16]	; (b0a8 <xTaskGetSchedulerState+0x1c>)
    b096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b09a:	b91b      	cbnz	r3, b0a4 <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    b09c:	2002      	movs	r0, #2
    b09e:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    b0a0:	2001      	movs	r0, #1
    b0a2:	4770      	bx	lr
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
    b0a4:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
    b0a6:	4770      	bx	lr
    b0a8:	20012790 	.word	0x20012790

0000b0ac <vTaskPriorityInherit>:
{
	TCB_t *const pxTCB = (TCB_t *)pxMutexHolder;

	/* If the mutex was given back by an interrupt while the queue was
	locked then the mutex holder might now be NULL. */
	if (pxMutexHolder != NULL) {
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d03d      	beq.n	b12c <vTaskPriorityInherit+0x80>
{
    b0b0:	b538      	push	{r3, r4, r5, lr}
    b0b2:	4605      	mov	r5, r0
		/* If the holder of the mutex has a priority below the priority of
		the task attempting to obtain the mutex then it will temporarily
		inherit the priority of the task attempting to obtain the mutex. */
		if (pxTCB->uxPriority < pxCurrentTCB->uxPriority) {
    b0b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    b0b6:	491e      	ldr	r1, [pc, #120]	; (b130 <vTaskPriorityInherit+0x84>)
    b0b8:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
    b0bc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    b0be:	428b      	cmp	r3, r1
    b0c0:	d218      	bcs.n	b0f4 <vTaskPriorityInherit+0x48>
			/* Adjust the mutex holder state to account for its new
			priority.  Only reset the event list item value if the value is
			not	being used for anything else. */
			if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    b0c2:	6981      	ldr	r1, [r0, #24]
    b0c4:	2900      	cmp	r1, #0
    b0c6:	db06      	blt.n	b0d6 <vTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    b0c8:	4919      	ldr	r1, [pc, #100]	; (b130 <vTaskPriorityInherit+0x84>)
    b0ca:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
    b0ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    b0d0:	f1c1 0105 	rsb	r1, r1, #5
    b0d4:	6181      	str	r1, [r0, #24]
				mtCOVERAGE_TEST_MARKER();
			}

			/* If the task being modified is in the ready state it will need
			to be moved into a new list. */
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxTCB->uxPriority]), &(pxTCB->xGenericListItem))
    b0d6:	6968      	ldr	r0, [r5, #20]
    b0d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b0dc:	0099      	lsls	r1, r3, #2
    b0de:	4b15      	ldr	r3, [pc, #84]	; (b134 <vTaskPriorityInherit+0x88>)
    b0e0:	440b      	add	r3, r1
			    != pdFALSE) {
    b0e2:	4298      	cmp	r0, r3
    b0e4:	d007      	beq.n	b0f6 <vTaskPriorityInherit+0x4a>
    b0e6:	2300      	movs	r3, #0
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxTCB->uxPriority]), &(pxTCB->xGenericListItem))
    b0e8:	b93b      	cbnz	r3, b0fa <vTaskPriorityInherit+0x4e>
				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
				prvAddTaskToReadyList(pxTCB);
			} else {
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    b0ea:	4b11      	ldr	r3, [pc, #68]	; (b130 <vTaskPriorityInherit+0x84>)
    b0ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b0f2:	62eb      	str	r3, [r5, #44]	; 0x2c
    b0f4:	bd38      	pop	{r3, r4, r5, pc}
			    != pdFALSE) {
    b0f6:	2301      	movs	r3, #1
    b0f8:	e7f6      	b.n	b0e8 <vTaskPriorityInherit+0x3c>
				if (uxListRemove(&(pxTCB->xGenericListItem)) == (UBaseType_t)0) {
    b0fa:	1d2c      	adds	r4, r5, #4
    b0fc:	4620      	mov	r0, r4
    b0fe:	4b0e      	ldr	r3, [pc, #56]	; (b138 <vTaskPriorityInherit+0x8c>)
    b100:	4798      	blx	r3
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    b102:	4a0b      	ldr	r2, [pc, #44]	; (b130 <vTaskPriorityInherit+0x84>)
    b104:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b10a:	62eb      	str	r3, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxTCB);
    b10c:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    b110:	4293      	cmp	r3, r2
    b112:	d902      	bls.n	b11a <vTaskPriorityInherit+0x6e>
    b114:	4a06      	ldr	r2, [pc, #24]	; (b130 <vTaskPriorityInherit+0x84>)
    b116:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    b11a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b11e:	009a      	lsls	r2, r3, #2
    b120:	4621      	mov	r1, r4
    b122:	4804      	ldr	r0, [pc, #16]	; (b134 <vTaskPriorityInherit+0x88>)
    b124:	4410      	add	r0, r2
    b126:	4b05      	ldr	r3, [pc, #20]	; (b13c <vTaskPriorityInherit+0x90>)
    b128:	4798      	blx	r3
    b12a:	bd38      	pop	{r3, r4, r5, pc}
    b12c:	4770      	bx	lr
    b12e:	bf00      	nop
    b130:	20012790 	.word	0x20012790
    b134:	200127c0 	.word	0x200127c0
    b138:	0000994d 	.word	0x0000994d
    b13c:	00009901 	.word	0x00009901

0000b140 <xTaskPriorityDisinherit>:
BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder)
{
	TCB_t *const pxTCB   = (TCB_t *)pxMutexHolder;
	BaseType_t   xReturn = pdFALSE;

	if (pxMutexHolder != NULL) {
    b140:	2800      	cmp	r0, #0
    b142:	d03c      	beq.n	b1be <xTaskPriorityDisinherit+0x7e>
{
    b144:	b538      	push	{r3, r4, r5, lr}
    b146:	4604      	mov	r4, r0
		/* A task can only have an inherited priority if it holds the mutex.
		If the mutex is held by a task then it cannot be given from an
		interrupt, and if a mutex is given by the holding task then it must
		be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
    b148:	4a20      	ldr	r2, [pc, #128]	; (b1cc <xTaskPriorityDisinherit+0x8c>)
    b14a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    b14e:	4290      	cmp	r0, r2
    b150:	d008      	beq.n	b164 <xTaskPriorityDisinherit+0x24>
    b152:	f04f 0380 	mov.w	r3, #128	; 0x80
    b156:	f383 8811 	msr	BASEPRI, r3
    b15a:	f3bf 8f6f 	isb	sy
    b15e:	f3bf 8f4f 	dsb	sy
    b162:	e7fe      	b.n	b162 <xTaskPriorityDisinherit+0x22>

		configASSERT(pxTCB->uxMutexesHeld);
    b164:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b166:	b942      	cbnz	r2, b17a <xTaskPriorityDisinherit+0x3a>
    b168:	f04f 0380 	mov.w	r3, #128	; 0x80
    b16c:	f383 8811 	msr	BASEPRI, r3
    b170:	f3bf 8f6f 	isb	sy
    b174:	f3bf 8f4f 	dsb	sy
    b178:	e7fe      	b.n	b178 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    b17a:	3a01      	subs	r2, #1
    b17c:	6482      	str	r2, [r0, #72]	; 0x48

		/* Has the holder of the mutex inherited the priority of another
		task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    b17e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    b180:	6c61      	ldr	r1, [r4, #68]	; 0x44
    b182:	4288      	cmp	r0, r1
    b184:	d01d      	beq.n	b1c2 <xTaskPriorityDisinherit+0x82>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    b186:	b9f2      	cbnz	r2, b1c6 <xTaskPriorityDisinherit+0x86>
				/* A task can only have an inherited priority if it holds
				the mutex.  If the mutex is held by a task then it cannot be
				given from an interrupt, and if a mutex is given by the
				holding	task then it must be the running state task.  Remove
				the	holding task from the ready	list. */
				if (uxListRemove(&(pxTCB->xGenericListItem)) == (UBaseType_t)0) {
    b188:	1d25      	adds	r5, r4, #4
    b18a:	4628      	mov	r0, r5
    b18c:	4b10      	ldr	r3, [pc, #64]	; (b1d0 <xTaskPriorityDisinherit+0x90>)
    b18e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the
				new	ready list. */
				traceTASK_PRIORITY_DISINHERIT(pxTCB, pxTCB->uxBasePriority);
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    b190:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b192:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
				any other purpose if this task is running, and it must be
				running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(
    b194:	f1c3 0205 	rsb	r2, r3, #5
    b198:	61a2      	str	r2, [r4, #24]
				    &(pxTCB->xEventListItem),
				    (TickType_t)configMAX_PRIORITIES - (TickType_t)pxTCB->uxPriority); /*lint !e961 MISRA exception as
				                                                                          the casts are only redundant
				                                                                          for some ports. */
				prvAddTaskToReadyList(pxTCB);
    b19a:	4a0c      	ldr	r2, [pc, #48]	; (b1cc <xTaskPriorityDisinherit+0x8c>)
    b19c:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    b1a0:	4293      	cmp	r3, r2
    b1a2:	d902      	bls.n	b1aa <xTaskPriorityDisinherit+0x6a>
    b1a4:	4a09      	ldr	r2, [pc, #36]	; (b1cc <xTaskPriorityDisinherit+0x8c>)
    b1a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    b1aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b1ae:	009a      	lsls	r2, r3, #2
    b1b0:	4629      	mov	r1, r5
    b1b2:	4808      	ldr	r0, [pc, #32]	; (b1d4 <xTaskPriorityDisinherit+0x94>)
    b1b4:	4410      	add	r0, r2
    b1b6:	4b08      	ldr	r3, [pc, #32]	; (b1d8 <xTaskPriorityDisinherit+0x98>)
    b1b8:	4798      	blx	r3
				in an order different to that in which they were taken.
				If a context switch did not occur when the first mutex was
				returned, even if a task was waiting on it, then a context
				switch should occur when the last mutex is returned whether
				a task is waiting on it or not. */
				xReturn = pdTRUE;
    b1ba:	2001      	movs	r0, #1
    b1bc:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    b1be:	2000      	movs	r0, #0
    b1c0:	4770      	bx	lr
    b1c2:	2000      	movs	r0, #0
    b1c4:	bd38      	pop	{r3, r4, r5, pc}
    b1c6:	2000      	movs	r0, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    b1c8:	bd38      	pop	{r3, r4, r5, pc}
    b1ca:	bf00      	nop
    b1cc:	20012790 	.word	0x20012790
    b1d0:	0000994d 	.word	0x0000994d
    b1d4:	200127c0 	.word	0x200127c0
    b1d8:	00009901 	.word	0x00009901

0000b1dc <pvTaskIncrementMutexHeldCount>:

void *pvTaskIncrementMutexHeldCount(void)
{
	/* If xSemaphoreCreateMutex() is called before any tasks have been created
	then pxCurrentTCB will be NULL. */
	if (pxCurrentTCB != NULL) {
    b1dc:	4b06      	ldr	r3, [pc, #24]	; (b1f8 <pvTaskIncrementMutexHeldCount+0x1c>)
    b1de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    b1e2:	b12b      	cbz	r3, b1f0 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    b1e4:	4b04      	ldr	r3, [pc, #16]	; (b1f8 <pvTaskIncrementMutexHeldCount+0x1c>)
    b1e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    b1ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b1ec:	3301      	adds	r3, #1
    b1ee:	6493      	str	r3, [r2, #72]	; 0x48
	}

	return pxCurrentTCB;
    b1f0:	4b01      	ldr	r3, [pc, #4]	; (b1f8 <pvTaskIncrementMutexHeldCount+0x1c>)
    b1f2:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    b1f6:	4770      	bx	lr
    b1f8:	20012790 	.word	0x20012790

0000b1fc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    b1fc:	4b06      	ldr	r3, [pc, #24]	; (b218 <prvGetNextExpireTime+0x1c>)
    b1fe:	681a      	ldr	r2, [r3, #0]
    b200:	6813      	ldr	r3, [r2, #0]
    b202:	fab3 f383 	clz	r3, r3
    b206:	095b      	lsrs	r3, r3, #5
    b208:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    b20a:	b913      	cbnz	r3, b212 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    b20c:	68d3      	ldr	r3, [r2, #12]
    b20e:	6818      	ldr	r0, [r3, #0]
    b210:	4770      	bx	lr
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
    b212:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
    b214:	4770      	bx	lr
    b216:	bf00      	nop
    b218:	20012890 	.word	0x20012890

0000b21c <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    b21c:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    b21e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    b220:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    b222:	4291      	cmp	r1, r2
    b224:	d80c      	bhi.n	b240 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if ((xTimeNow - xCommandTime) >= pxTimer->xTimerPeriodInTicks) {
    b226:	1ad2      	subs	r2, r2, r3
    b228:	6983      	ldr	r3, [r0, #24]
    b22a:	429a      	cmp	r2, r3
    b22c:	d301      	bcc.n	b232 <prvInsertTimerInActiveList+0x16>
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    b22e:	2001      	movs	r0, #1
    b230:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    b232:	1d01      	adds	r1, r0, #4
    b234:	4b09      	ldr	r3, [pc, #36]	; (b25c <prvInsertTimerInActiveList+0x40>)
    b236:	6858      	ldr	r0, [r3, #4]
    b238:	4b09      	ldr	r3, [pc, #36]	; (b260 <prvInsertTimerInActiveList+0x44>)
    b23a:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    b23c:	2000      	movs	r0, #0
    b23e:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    b240:	429a      	cmp	r2, r3
    b242:	d201      	bcs.n	b248 <prvInsertTimerInActiveList+0x2c>
    b244:	4299      	cmp	r1, r3
    b246:	d206      	bcs.n	b256 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    b248:	1d01      	adds	r1, r0, #4
    b24a:	4b04      	ldr	r3, [pc, #16]	; (b25c <prvInsertTimerInActiveList+0x40>)
    b24c:	6818      	ldr	r0, [r3, #0]
    b24e:	4b04      	ldr	r3, [pc, #16]	; (b260 <prvInsertTimerInActiveList+0x44>)
    b250:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    b252:	2000      	movs	r0, #0
    b254:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    b256:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    b258:	bd08      	pop	{r3, pc}
    b25a:	bf00      	nop
    b25c:	20012890 	.word	0x20012890
    b260:	00009919 	.word	0x00009919

0000b264 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    b266:	4b12      	ldr	r3, [pc, #72]	; (b2b0 <prvCheckForValidListAndQueue+0x4c>)
    b268:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    b26a:	4b12      	ldr	r3, [pc, #72]	; (b2b4 <prvCheckForValidListAndQueue+0x50>)
    b26c:	689b      	ldr	r3, [r3, #8]
    b26e:	b113      	cbz	r3, b276 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b270:	4b11      	ldr	r3, [pc, #68]	; (b2b8 <prvCheckForValidListAndQueue+0x54>)
    b272:	4798      	blx	r3
    b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    b276:	4c0f      	ldr	r4, [pc, #60]	; (b2b4 <prvCheckForValidListAndQueue+0x50>)
    b278:	f104 060c 	add.w	r6, r4, #12
    b27c:	4630      	mov	r0, r6
    b27e:	4f0f      	ldr	r7, [pc, #60]	; (b2bc <prvCheckForValidListAndQueue+0x58>)
    b280:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    b282:	f104 0520 	add.w	r5, r4, #32
    b286:	4628      	mov	r0, r5
    b288:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    b28a:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    b28c:	6065      	str	r5, [r4, #4]
			xTimerQueue         = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    b28e:	2200      	movs	r2, #0
    b290:	210c      	movs	r1, #12
    b292:	2002      	movs	r0, #2
    b294:	4b0a      	ldr	r3, [pc, #40]	; (b2c0 <prvCheckForValidListAndQueue+0x5c>)
    b296:	4798      	blx	r3
    b298:	60a0      	str	r0, [r4, #8]
			configASSERT(xTimerQueue);
    b29a:	2800      	cmp	r0, #0
    b29c:	d1e8      	bne.n	b270 <prvCheckForValidListAndQueue+0xc>
    b29e:	f04f 0380 	mov.w	r3, #128	; 0x80
    b2a2:	f383 8811 	msr	BASEPRI, r3
    b2a6:	f3bf 8f6f 	isb	sy
    b2aa:	f3bf 8f4f 	dsb	sy
    b2ae:	e7fe      	b.n	b2ae <prvCheckForValidListAndQueue+0x4a>
    b2b0:	00009a25 	.word	0x00009a25
    b2b4:	20012890 	.word	0x20012890
    b2b8:	00009a69 	.word	0x00009a69
    b2bc:	000098e5 	.word	0x000098e5
    b2c0:	0000a065 	.word	0x0000a065

0000b2c4 <xTimerCreateTimerTask>:
{
    b2c4:	b510      	push	{r4, lr}
    b2c6:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    b2c8:	4b0f      	ldr	r3, [pc, #60]	; (b308 <xTimerCreateTimerTask+0x44>)
    b2ca:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    b2cc:	4b0f      	ldr	r3, [pc, #60]	; (b30c <xTimerCreateTimerTask+0x48>)
    b2ce:	689b      	ldr	r3, [r3, #8]
    b2d0:	b1ab      	cbz	r3, b2fe <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate(prvTimerTask,
    b2d2:	2300      	movs	r3, #0
    b2d4:	9303      	str	r3, [sp, #12]
    b2d6:	9302      	str	r3, [sp, #8]
    b2d8:	9301      	str	r3, [sp, #4]
    b2da:	2202      	movs	r2, #2
    b2dc:	9200      	str	r2, [sp, #0]
    b2de:	f44f 7280 	mov.w	r2, #256	; 0x100
    b2e2:	490b      	ldr	r1, [pc, #44]	; (b310 <xTimerCreateTimerTask+0x4c>)
    b2e4:	480b      	ldr	r0, [pc, #44]	; (b314 <xTimerCreateTimerTask+0x50>)
    b2e6:	4c0c      	ldr	r4, [pc, #48]	; (b318 <xTimerCreateTimerTask+0x54>)
    b2e8:	47a0      	blx	r4
	configASSERT(xReturn);
    b2ea:	b950      	cbnz	r0, b302 <xTimerCreateTimerTask+0x3e>
    b2ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    b2f0:	f383 8811 	msr	BASEPRI, r3
    b2f4:	f3bf 8f6f 	isb	sy
    b2f8:	f3bf 8f4f 	dsb	sy
    b2fc:	e7fe      	b.n	b2fc <xTimerCreateTimerTask+0x38>
	BaseType_t xReturn = pdFAIL;
    b2fe:	2000      	movs	r0, #0
    b300:	e7f3      	b.n	b2ea <xTimerCreateTimerTask+0x26>
}
    b302:	b004      	add	sp, #16
    b304:	bd10      	pop	{r4, pc}
    b306:	bf00      	nop
    b308:	0000b265 	.word	0x0000b265
    b30c:	20012890 	.word	0x20012890
    b310:	0000d5ec 	.word	0x0000d5ec
    b314:	0000b649 	.word	0x0000b649
    b318:	0000a8a1 	.word	0x0000a8a1

0000b31c <xTimerGenericCommand>:
	configASSERT(xTimer);
    b31c:	b1c0      	cbz	r0, b350 <xTimerGenericCommand+0x34>
{
    b31e:	b530      	push	{r4, r5, lr}
    b320:	b085      	sub	sp, #20
    b322:	4615      	mov	r5, r2
    b324:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    b326:	4a17      	ldr	r2, [pc, #92]	; (b384 <xTimerGenericCommand+0x68>)
    b328:	6890      	ldr	r0, [r2, #8]
    b32a:	b340      	cbz	r0, b37e <xTimerGenericCommand+0x62>
    b32c:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    b32e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    b330:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    b332:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    b334:	2905      	cmp	r1, #5
    b336:	dc1c      	bgt.n	b372 <xTimerGenericCommand+0x56>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    b338:	4b13      	ldr	r3, [pc, #76]	; (b388 <xTimerGenericCommand+0x6c>)
    b33a:	4798      	blx	r3
    b33c:	2802      	cmp	r0, #2
    b33e:	d010      	beq.n	b362 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    b340:	2300      	movs	r3, #0
    b342:	461a      	mov	r2, r3
    b344:	a901      	add	r1, sp, #4
    b346:	480f      	ldr	r0, [pc, #60]	; (b384 <xTimerGenericCommand+0x68>)
    b348:	6880      	ldr	r0, [r0, #8]
    b34a:	4c10      	ldr	r4, [pc, #64]	; (b38c <xTimerGenericCommand+0x70>)
    b34c:	47a0      	blx	r4
    b34e:	e014      	b.n	b37a <xTimerGenericCommand+0x5e>
    b350:	f04f 0380 	mov.w	r3, #128	; 0x80
    b354:	f383 8811 	msr	BASEPRI, r3
    b358:	f3bf 8f6f 	isb	sy
    b35c:	f3bf 8f4f 	dsb	sy
    b360:	e7fe      	b.n	b360 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    b362:	2300      	movs	r3, #0
    b364:	9a08      	ldr	r2, [sp, #32]
    b366:	a901      	add	r1, sp, #4
    b368:	4806      	ldr	r0, [pc, #24]	; (b384 <xTimerGenericCommand+0x68>)
    b36a:	6880      	ldr	r0, [r0, #8]
    b36c:	4c07      	ldr	r4, [pc, #28]	; (b38c <xTimerGenericCommand+0x70>)
    b36e:	47a0      	blx	r4
    b370:	e003      	b.n	b37a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    b372:	2300      	movs	r3, #0
    b374:	a901      	add	r1, sp, #4
    b376:	4c06      	ldr	r4, [pc, #24]	; (b390 <xTimerGenericCommand+0x74>)
    b378:	47a0      	blx	r4
}
    b37a:	b005      	add	sp, #20
    b37c:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    b37e:	2000      	movs	r0, #0
	return xReturn;
    b380:	e7fb      	b.n	b37a <xTimerGenericCommand+0x5e>
    b382:	bf00      	nop
    b384:	20012890 	.word	0x20012890
    b388:	0000b08d 	.word	0x0000b08d
    b38c:	0000a135 	.word	0x0000a135
    b390:	0000a309 	.word	0x0000a309

0000b394 <prvSwitchTimerLists>:
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    b394:	4b20      	ldr	r3, [pc, #128]	; (b418 <prvSwitchTimerLists+0x84>)
    b396:	681b      	ldr	r3, [r3, #0]
    b398:	681a      	ldr	r2, [r3, #0]
    b39a:	2a00      	cmp	r2, #0
    b39c:	d037      	beq.n	b40e <prvSwitchTimerLists+0x7a>
{
    b39e:	b570      	push	{r4, r5, r6, lr}
    b3a0:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    b3a2:	68db      	ldr	r3, [r3, #12]
    b3a4:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    b3a6:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    b3a8:	1d25      	adds	r5, r4, #4
    b3aa:	4628      	mov	r0, r5
    b3ac:	4b1b      	ldr	r3, [pc, #108]	; (b41c <prvSwitchTimerLists+0x88>)
    b3ae:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    b3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b3b2:	4620      	mov	r0, r4
    b3b4:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    b3b6:	69e3      	ldr	r3, [r4, #28]
    b3b8:	2b01      	cmp	r3, #1
    b3ba:	d00a      	beq.n	b3d2 <prvSwitchTimerLists+0x3e>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    b3bc:	4b16      	ldr	r3, [pc, #88]	; (b418 <prvSwitchTimerLists+0x84>)
    b3be:	681b      	ldr	r3, [r3, #0]
    b3c0:	681a      	ldr	r2, [r3, #0]
    b3c2:	2a00      	cmp	r2, #0
    b3c4:	d1ed      	bne.n	b3a2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList  = pxOverflowTimerList;
    b3c6:	4a14      	ldr	r2, [pc, #80]	; (b418 <prvSwitchTimerLists+0x84>)
    b3c8:	6851      	ldr	r1, [r2, #4]
    b3ca:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    b3cc:	6053      	str	r3, [r2, #4]
}
    b3ce:	b002      	add	sp, #8
    b3d0:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    b3d2:	69a3      	ldr	r3, [r4, #24]
    b3d4:	4433      	add	r3, r6
			if (xReloadTime > xNextExpireTime) {
    b3d6:	429e      	cmp	r6, r3
    b3d8:	d207      	bcs.n	b3ea <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    b3da:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    b3dc:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    b3de:	4629      	mov	r1, r5
    b3e0:	4b0d      	ldr	r3, [pc, #52]	; (b418 <prvSwitchTimerLists+0x84>)
    b3e2:	6818      	ldr	r0, [r3, #0]
    b3e4:	4b0e      	ldr	r3, [pc, #56]	; (b420 <prvSwitchTimerLists+0x8c>)
    b3e6:	4798      	blx	r3
    b3e8:	e7e8      	b.n	b3bc <prvSwitchTimerLists+0x28>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    b3ea:	2100      	movs	r1, #0
    b3ec:	9100      	str	r1, [sp, #0]
    b3ee:	460b      	mov	r3, r1
    b3f0:	4632      	mov	r2, r6
    b3f2:	4620      	mov	r0, r4
    b3f4:	4c0b      	ldr	r4, [pc, #44]	; (b424 <prvSwitchTimerLists+0x90>)
    b3f6:	47a0      	blx	r4
				configASSERT(xResult);
    b3f8:	2800      	cmp	r0, #0
    b3fa:	d1df      	bne.n	b3bc <prvSwitchTimerLists+0x28>
    b3fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    b400:	f383 8811 	msr	BASEPRI, r3
    b404:	f3bf 8f6f 	isb	sy
    b408:	f3bf 8f4f 	dsb	sy
    b40c:	e7fe      	b.n	b40c <prvSwitchTimerLists+0x78>
	pxCurrentTimerList  = pxOverflowTimerList;
    b40e:	4a02      	ldr	r2, [pc, #8]	; (b418 <prvSwitchTimerLists+0x84>)
    b410:	6851      	ldr	r1, [r2, #4]
    b412:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    b414:	6053      	str	r3, [r2, #4]
    b416:	4770      	bx	lr
    b418:	20012890 	.word	0x20012890
    b41c:	0000994d 	.word	0x0000994d
    b420:	00009919 	.word	0x00009919
    b424:	0000b31d 	.word	0x0000b31d

0000b428 <prvSampleTimeNow>:
{
    b428:	b538      	push	{r3, r4, r5, lr}
    b42a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
    b42c:	4b08      	ldr	r3, [pc, #32]	; (b450 <prvSampleTimeNow+0x28>)
    b42e:	4798      	blx	r3
    b430:	4604      	mov	r4, r0
	if (xTimeNow < xLastTime) {
    b432:	4b08      	ldr	r3, [pc, #32]	; (b454 <prvSampleTimeNow+0x2c>)
    b434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b436:	4298      	cmp	r0, r3
    b438:	d305      	bcc.n	b446 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    b43a:	2300      	movs	r3, #0
    b43c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    b43e:	4b05      	ldr	r3, [pc, #20]	; (b454 <prvSampleTimeNow+0x2c>)
    b440:	635c      	str	r4, [r3, #52]	; 0x34
}
    b442:	4620      	mov	r0, r4
    b444:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
    b446:	4b04      	ldr	r3, [pc, #16]	; (b458 <prvSampleTimeNow+0x30>)
    b448:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    b44a:	2301      	movs	r3, #1
    b44c:	602b      	str	r3, [r5, #0]
    b44e:	e7f6      	b.n	b43e <prvSampleTimeNow+0x16>
    b450:	0000aa8d 	.word	0x0000aa8d
    b454:	20012890 	.word	0x20012890
    b458:	0000b395 	.word	0x0000b395

0000b45c <prvProcessExpiredTimer>:
{
    b45c:	b570      	push	{r4, r5, r6, lr}
    b45e:	b082      	sub	sp, #8
    b460:	4605      	mov	r5, r0
    b462:	460e      	mov	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    b464:	4b14      	ldr	r3, [pc, #80]	; (b4b8 <prvProcessExpiredTimer+0x5c>)
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	68db      	ldr	r3, [r3, #12]
    b46a:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    b46c:	1d20      	adds	r0, r4, #4
    b46e:	4b13      	ldr	r3, [pc, #76]	; (b4bc <prvProcessExpiredTimer+0x60>)
    b470:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    b472:	69e3      	ldr	r3, [r4, #28]
    b474:	2b01      	cmp	r3, #1
    b476:	d004      	beq.n	b482 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    b478:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b47a:	4620      	mov	r0, r4
    b47c:	4798      	blx	r3
}
    b47e:	b002      	add	sp, #8
    b480:	bd70      	pop	{r4, r5, r6, pc}
		        pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime)
    b482:	69a1      	ldr	r1, [r4, #24]
		if (prvInsertTimerInActiveList(
    b484:	462b      	mov	r3, r5
    b486:	4632      	mov	r2, r6
    b488:	4429      	add	r1, r5
    b48a:	4620      	mov	r0, r4
    b48c:	4e0c      	ldr	r6, [pc, #48]	; (b4c0 <prvProcessExpiredTimer+0x64>)
    b48e:	47b0      	blx	r6
    b490:	2801      	cmp	r0, #1
    b492:	d1f1      	bne.n	b478 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    b494:	2100      	movs	r1, #0
    b496:	9100      	str	r1, [sp, #0]
    b498:	460b      	mov	r3, r1
    b49a:	462a      	mov	r2, r5
    b49c:	4620      	mov	r0, r4
    b49e:	4d09      	ldr	r5, [pc, #36]	; (b4c4 <prvProcessExpiredTimer+0x68>)
    b4a0:	47a8      	blx	r5
			configASSERT(xResult);
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d1e8      	bne.n	b478 <prvProcessExpiredTimer+0x1c>
    b4a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    b4aa:	f383 8811 	msr	BASEPRI, r3
    b4ae:	f3bf 8f6f 	isb	sy
    b4b2:	f3bf 8f4f 	dsb	sy
    b4b6:	e7fe      	b.n	b4b6 <prvProcessExpiredTimer+0x5a>
    b4b8:	20012890 	.word	0x20012890
    b4bc:	0000994d 	.word	0x0000994d
    b4c0:	0000b21d 	.word	0x0000b21d
    b4c4:	0000b31d 	.word	0x0000b31d

0000b4c8 <prvProcessTimerOrBlockTask>:
{
    b4c8:	b570      	push	{r4, r5, r6, lr}
    b4ca:	b082      	sub	sp, #8
    b4cc:	4606      	mov	r6, r0
    b4ce:	460c      	mov	r4, r1
	vTaskSuspendAll();
    b4d0:	4b17      	ldr	r3, [pc, #92]	; (b530 <prvProcessTimerOrBlockTask+0x68>)
    b4d2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    b4d4:	a801      	add	r0, sp, #4
    b4d6:	4b17      	ldr	r3, [pc, #92]	; (b534 <prvProcessTimerOrBlockTask+0x6c>)
    b4d8:	4798      	blx	r3
		if (xTimerListsWereSwitched == pdFALSE) {
    b4da:	9b01      	ldr	r3, [sp, #4]
    b4dc:	bb23      	cbnz	r3, b528 <prvProcessTimerOrBlockTask+0x60>
    b4de:	4605      	mov	r5, r0
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    b4e0:	b90c      	cbnz	r4, b4e6 <prvProcessTimerOrBlockTask+0x1e>
    b4e2:	42b0      	cmp	r0, r6
    b4e4:	d219      	bcs.n	b51a <prvProcessTimerOrBlockTask+0x52>
				if (xListWasEmpty != pdFALSE) {
    b4e6:	b12c      	cbz	r4, b4f4 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    b4e8:	4b13      	ldr	r3, [pc, #76]	; (b538 <prvProcessTimerOrBlockTask+0x70>)
    b4ea:	685b      	ldr	r3, [r3, #4]
    b4ec:	681c      	ldr	r4, [r3, #0]
    b4ee:	fab4 f484 	clz	r4, r4
    b4f2:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    b4f4:	4622      	mov	r2, r4
    b4f6:	1b71      	subs	r1, r6, r5
    b4f8:	4b0f      	ldr	r3, [pc, #60]	; (b538 <prvProcessTimerOrBlockTask+0x70>)
    b4fa:	6898      	ldr	r0, [r3, #8]
    b4fc:	4b0f      	ldr	r3, [pc, #60]	; (b53c <prvProcessTimerOrBlockTask+0x74>)
    b4fe:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    b500:	4b0f      	ldr	r3, [pc, #60]	; (b540 <prvProcessTimerOrBlockTask+0x78>)
    b502:	4798      	blx	r3
    b504:	b938      	cbnz	r0, b516 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
    b506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b50a:	4b0e      	ldr	r3, [pc, #56]	; (b544 <prvProcessTimerOrBlockTask+0x7c>)
    b50c:	601a      	str	r2, [r3, #0]
    b50e:	f3bf 8f4f 	dsb	sy
    b512:	f3bf 8f6f 	isb	sy
}
    b516:	b002      	add	sp, #8
    b518:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    b51a:	4b09      	ldr	r3, [pc, #36]	; (b540 <prvProcessTimerOrBlockTask+0x78>)
    b51c:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    b51e:	4629      	mov	r1, r5
    b520:	4630      	mov	r0, r6
    b522:	4b09      	ldr	r3, [pc, #36]	; (b548 <prvProcessTimerOrBlockTask+0x80>)
    b524:	4798      	blx	r3
    b526:	e7f6      	b.n	b516 <prvProcessTimerOrBlockTask+0x4e>
			(void)xTaskResumeAll();
    b528:	4b05      	ldr	r3, [pc, #20]	; (b540 <prvProcessTimerOrBlockTask+0x78>)
    b52a:	4798      	blx	r3
}
    b52c:	e7f3      	b.n	b516 <prvProcessTimerOrBlockTask+0x4e>
    b52e:	bf00      	nop
    b530:	0000aa79 	.word	0x0000aa79
    b534:	0000b429 	.word	0x0000b429
    b538:	20012890 	.word	0x20012890
    b53c:	0000a6d5 	.word	0x0000a6d5
    b540:	0000abc1 	.word	0x0000abc1
    b544:	e000ed04 	.word	0xe000ed04
    b548:	0000b45d 	.word	0x0000b45d

0000b54c <prvProcessReceivedCommands>:
{
    b54c:	b530      	push	{r4, r5, lr}
    b54e:	b087      	sub	sp, #28
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    b550:	2300      	movs	r3, #0
    b552:	461a      	mov	r2, r3
    b554:	a903      	add	r1, sp, #12
    b556:	4835      	ldr	r0, [pc, #212]	; (b62c <prvProcessReceivedCommands+0xe0>)
    b558:	6880      	ldr	r0, [r0, #8]
    b55a:	4c35      	ldr	r4, [pc, #212]	; (b630 <prvProcessReceivedCommands+0xe4>)
    b55c:	47a0      	blx	r4
    b55e:	2800      	cmp	r0, #0
    b560:	d061      	beq.n	b626 <prvProcessReceivedCommands+0xda>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    b562:	9b03      	ldr	r3, [sp, #12]
    b564:	2b00      	cmp	r3, #0
    b566:	dbf3      	blt.n	b550 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    b568:	9c05      	ldr	r4, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) {
    b56a:	6963      	ldr	r3, [r4, #20]
    b56c:	b113      	cbz	r3, b574 <prvProcessReceivedCommands+0x28>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    b56e:	1d20      	adds	r0, r4, #4
    b570:	4b30      	ldr	r3, [pc, #192]	; (b634 <prvProcessReceivedCommands+0xe8>)
    b572:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    b574:	a802      	add	r0, sp, #8
    b576:	4b30      	ldr	r3, [pc, #192]	; (b638 <prvProcessReceivedCommands+0xec>)
    b578:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    b57a:	9b03      	ldr	r3, [sp, #12]
    b57c:	2b09      	cmp	r3, #9
    b57e:	d8e7      	bhi.n	b550 <prvProcessReceivedCommands+0x4>
    b580:	a201      	add	r2, pc, #4	; (adr r2, b588 <prvProcessReceivedCommands+0x3c>)
    b582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b586:	bf00      	nop
    b588:	0000b5b1 	.word	0x0000b5b1
    b58c:	0000b5b1 	.word	0x0000b5b1
    b590:	0000b5b1 	.word	0x0000b5b1
    b594:	0000b551 	.word	0x0000b551
    b598:	0000b5f9 	.word	0x0000b5f9
    b59c:	0000b61f 	.word	0x0000b61f
    b5a0:	0000b5b1 	.word	0x0000b5b1
    b5a4:	0000b5b1 	.word	0x0000b5b1
    b5a8:	0000b551 	.word	0x0000b551
    b5ac:	0000b5f9 	.word	0x0000b5f9
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    b5b0:	9904      	ldr	r1, [sp, #16]
    b5b2:	69a5      	ldr	r5, [r4, #24]
				if (prvInsertTimerInActiveList(pxTimer,
    b5b4:	460b      	mov	r3, r1
    b5b6:	4602      	mov	r2, r0
    b5b8:	4429      	add	r1, r5
    b5ba:	4620      	mov	r0, r4
    b5bc:	4d1f      	ldr	r5, [pc, #124]	; (b63c <prvProcessReceivedCommands+0xf0>)
    b5be:	47a8      	blx	r5
    b5c0:	2801      	cmp	r0, #1
    b5c2:	d1c5      	bne.n	b550 <prvProcessReceivedCommands+0x4>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    b5c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b5c6:	4620      	mov	r0, r4
    b5c8:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    b5ca:	69e3      	ldr	r3, [r4, #28]
    b5cc:	2b01      	cmp	r3, #1
    b5ce:	d1bf      	bne.n	b550 <prvProcessReceivedCommands+0x4>
						                                   + pxTimer->xTimerPeriodInTicks,
    b5d0:	69a2      	ldr	r2, [r4, #24]
						xResult = xTimerGenericCommand(pxTimer,
    b5d2:	2100      	movs	r1, #0
    b5d4:	9100      	str	r1, [sp, #0]
    b5d6:	460b      	mov	r3, r1
    b5d8:	9804      	ldr	r0, [sp, #16]
    b5da:	4402      	add	r2, r0
    b5dc:	4620      	mov	r0, r4
    b5de:	4c18      	ldr	r4, [pc, #96]	; (b640 <prvProcessReceivedCommands+0xf4>)
    b5e0:	47a0      	blx	r4
						configASSERT(xResult);
    b5e2:	2800      	cmp	r0, #0
    b5e4:	d1b4      	bne.n	b550 <prvProcessReceivedCommands+0x4>
    b5e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    b5ea:	f383 8811 	msr	BASEPRI, r3
    b5ee:	f3bf 8f6f 	isb	sy
    b5f2:	f3bf 8f4f 	dsb	sy
    b5f6:	e7fe      	b.n	b5f6 <prvProcessReceivedCommands+0xaa>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    b5f8:	9904      	ldr	r1, [sp, #16]
    b5fa:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    b5fc:	b131      	cbz	r1, b60c <prvProcessReceivedCommands+0xc0>
				(void)prvInsertTimerInActiveList(
    b5fe:	4603      	mov	r3, r0
    b600:	4602      	mov	r2, r0
    b602:	4401      	add	r1, r0
    b604:	4620      	mov	r0, r4
    b606:	4c0d      	ldr	r4, [pc, #52]	; (b63c <prvProcessReceivedCommands+0xf0>)
    b608:	47a0      	blx	r4
				break;
    b60a:	e7a1      	b.n	b550 <prvProcessReceivedCommands+0x4>
    b60c:	f04f 0380 	mov.w	r3, #128	; 0x80
    b610:	f383 8811 	msr	BASEPRI, r3
    b614:	f3bf 8f6f 	isb	sy
    b618:	f3bf 8f4f 	dsb	sy
    b61c:	e7fe      	b.n	b61c <prvProcessReceivedCommands+0xd0>
				vPortFree(pxTimer);
    b61e:	4620      	mov	r0, r4
    b620:	4b08      	ldr	r3, [pc, #32]	; (b644 <prvProcessReceivedCommands+0xf8>)
    b622:	4798      	blx	r3
				break;
    b624:	e794      	b.n	b550 <prvProcessReceivedCommands+0x4>
}
    b626:	b007      	add	sp, #28
    b628:	bd30      	pop	{r4, r5, pc}
    b62a:	bf00      	nop
    b62c:	20012890 	.word	0x20012890
    b630:	0000a4ed 	.word	0x0000a4ed
    b634:	0000994d 	.word	0x0000994d
    b638:	0000b429 	.word	0x0000b429
    b63c:	0000b21d 	.word	0x0000b21d
    b640:	0000b31d 	.word	0x0000b31d
    b644:	00009d79 	.word	0x00009d79

0000b648 <prvTimerTask>:
{
    b648:	b500      	push	{lr}
    b64a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    b64c:	a801      	add	r0, sp, #4
    b64e:	4b04      	ldr	r3, [pc, #16]	; (b660 <prvTimerTask+0x18>)
    b650:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    b652:	9901      	ldr	r1, [sp, #4]
    b654:	4b03      	ldr	r3, [pc, #12]	; (b664 <prvTimerTask+0x1c>)
    b656:	4798      	blx	r3
		prvProcessReceivedCommands();
    b658:	4b03      	ldr	r3, [pc, #12]	; (b668 <prvTimerTask+0x20>)
    b65a:	4798      	blx	r3
    b65c:	e7f6      	b.n	b64c <prvTimerTask+0x4>
    b65e:	bf00      	nop
    b660:	0000b1fd 	.word	0x0000b1fd
    b664:	0000b4c9 	.word	0x0000b4c9
    b668:	0000b54d 	.word	0x0000b54d

0000b66c <gmac_handler_cb>:
/**
 * \brief Callback for GMAC interrupt.
 * Give semaphore for which gmac_task waits
 */
void gmac_handler_cb(void)
{
    b66c:	b500      	push	{lr}
    b66e:	b083      	sub	sp, #12
	portBASE_TYPE xGMACTaskWoken = pdFALSE;
    b670:	a902      	add	r1, sp, #8
    b672:	2300      	movs	r3, #0
    b674:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(gs_gmac_dev.rx_sem, &xGMACTaskWoken);
    b678:	4b08      	ldr	r3, [pc, #32]	; (b69c <gmac_handler_cb+0x30>)
    b67a:	6858      	ldr	r0, [r3, #4]
    b67c:	4b08      	ldr	r3, [pc, #32]	; (b6a0 <gmac_handler_cb+0x34>)
    b67e:	4798      	blx	r3
	portEND_SWITCHING_ISR(xGMACTaskWoken);
    b680:	9b01      	ldr	r3, [sp, #4]
    b682:	b13b      	cbz	r3, b694 <gmac_handler_cb+0x28>
    b684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b688:	4b06      	ldr	r3, [pc, #24]	; (b6a4 <gmac_handler_cb+0x38>)
    b68a:	601a      	str	r2, [r3, #0]
    b68c:	f3bf 8f4f 	dsb	sy
    b690:	f3bf 8f6f 	isb	sy
}
    b694:	b003      	add	sp, #12
    b696:	f85d fb04 	ldr.w	pc, [sp], #4
    b69a:	bf00      	nop
    b69c:	200161f4 	.word	0x200161f4
    b6a0:	0000a409 	.word	0x0000a409
    b6a4:	e000ed04 	.word	0xe000ed04

0000b6a8 <gmac_task>:
/**
 * \brief Task for GMAC.
 * Waits for GMAC interrupt and begins processing of received packets
 */
void gmac_task(void *pvParameters)
{
    b6a8:	b538      	push	{r3, r4, r5, lr}
    b6aa:	4604      	mov	r4, r0
	gmac_device *ps_gmac_dev = pvParameters;

	while (1) {
		/* Wait for the counting RX notification semaphore. */
		xSemaphoreTake(ps_gmac_dev->rx_sem, portMAX_DELAY);
    b6ac:	2300      	movs	r3, #0
    b6ae:	f04f 32ff 	mov.w	r2, #4294967295
    b6b2:	4619      	mov	r1, r3
    b6b4:	6860      	ldr	r0, [r4, #4]
    b6b6:	4d03      	ldr	r5, [pc, #12]	; (b6c4 <gmac_task+0x1c>)
    b6b8:	47a8      	blx	r5

		/* Process the incoming packet. */
		ethernetif_mac_input(ps_gmac_dev->netif);
    b6ba:	6820      	ldr	r0, [r4, #0]
    b6bc:	4b02      	ldr	r3, [pc, #8]	; (b6c8 <gmac_task+0x20>)
    b6be:	4798      	blx	r3
    b6c0:	e7f4      	b.n	b6ac <gmac_task+0x4>
    b6c2:	bf00      	nop
    b6c4:	0000a4ed 	.word	0x0000a4ed
    b6c8:	000023e1 	.word	0x000023e1

0000b6cc <tcpip_init_done>:
{
    b6cc:	b570      	push	{r4, r5, r6, lr}
    b6ce:	b084      	sub	sp, #16
    b6d0:	4606      	mov	r6, r0
	u8_t mac[6] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x76};
    b6d2:	4b25      	ldr	r3, [pc, #148]	; (b768 <tcpip_init_done+0x9c>)
    b6d4:	e893 0003 	ldmia.w	r3, {r0, r1}
    b6d8:	9002      	str	r0, [sp, #8]
    b6da:	f8ad 100c 	strh.w	r1, [sp, #12]
	mac_async_register_callback(&COMMUNICATION_IO, MAC_ASYNC_RECEIVE_CB, gmac_handler_cb);
    b6de:	4c23      	ldr	r4, [pc, #140]	; (b76c <tcpip_init_done+0xa0>)
    b6e0:	4a23      	ldr	r2, [pc, #140]	; (b770 <tcpip_init_done+0xa4>)
    b6e2:	2100      	movs	r1, #0
    b6e4:	4620      	mov	r0, r4
    b6e6:	4b23      	ldr	r3, [pc, #140]	; (b774 <tcpip_init_done+0xa8>)
    b6e8:	4798      	blx	r3
	hri_gmac_set_IMR_RCOMP_bit(COMMUNICATION_IO.dev.hw);
    b6ea:	6823      	ldr	r3, [r4, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_RCOMP;
    b6ec:	2202      	movs	r2, #2
    b6ee:	629a      	str	r2, [r3, #40]	; 0x28
    b6f0:	e002      	b.n	b6f8 <tcpip_init_done+0x2c>
		os_sleep(20);
    b6f2:	2014      	movs	r0, #20
    b6f4:	4b20      	ldr	r3, [pc, #128]	; (b778 <tcpip_init_done+0xac>)
    b6f6:	4798      	blx	r3
	while ((ethernet_phy_get_link_status(&ETHERNET_PHY_0_desc, &link_up)) != ERR_NONE && !(link_up)) {
    b6f8:	4920      	ldr	r1, [pc, #128]	; (b77c <tcpip_init_done+0xb0>)
    b6fa:	4821      	ldr	r0, [pc, #132]	; (b780 <tcpip_init_done+0xb4>)
    b6fc:	4b21      	ldr	r3, [pc, #132]	; (b784 <tcpip_init_done+0xb8>)
    b6fe:	4798      	blx	r3
    b700:	b118      	cbz	r0, b70a <tcpip_init_done+0x3e>
    b702:	4b21      	ldr	r3, [pc, #132]	; (b788 <tcpip_init_done+0xbc>)
    b704:	785b      	ldrb	r3, [r3, #1]
    b706:	2b00      	cmp	r3, #0
    b708:	d0f3      	beq.n	b6f2 <tcpip_init_done+0x26>
	printf("\r\nEthernet link up\r\n\r\n");
    b70a:	4820      	ldr	r0, [pc, #128]	; (b78c <tcpip_init_done+0xc0>)
    b70c:	4b20      	ldr	r3, [pc, #128]	; (b790 <tcpip_init_done+0xc4>)
    b70e:	4798      	blx	r3
    b710:	4b20      	ldr	r3, [pc, #128]	; (b794 <tcpip_init_done+0xc8>)
    b712:	22a0      	movs	r2, #160	; 0xa0
    b714:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b718:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    b71c:	609a      	str	r2, [r3, #8]
	mac_async_enable(&COMMUNICATION_IO);
    b71e:	4813      	ldr	r0, [pc, #76]	; (b76c <tcpip_init_done+0xa0>)
    b720:	4b1d      	ldr	r3, [pc, #116]	; (b798 <tcpip_init_done+0xcc>)
    b722:	4798      	blx	r3
	TCPIP_STACK_INTERFACE_0_init(mac);
    b724:	a802      	add	r0, sp, #8
    b726:	4b1d      	ldr	r3, [pc, #116]	; (b79c <tcpip_init_done+0xd0>)
    b728:	4798      	blx	r3
	TCPIP_STACK_INTERFACE_0_desc.input = tcpip_input;
    b72a:	4c1d      	ldr	r4, [pc, #116]	; (b7a0 <tcpip_init_done+0xd4>)
    b72c:	4b1d      	ldr	r3, [pc, #116]	; (b7a4 <tcpip_init_done+0xd8>)
    b72e:	6123      	str	r3, [r4, #16]
	gs_gmac_dev.netif = &TCPIP_STACK_INTERFACE_0_desc;
    b730:	4d1d      	ldr	r5, [pc, #116]	; (b7a8 <tcpip_init_done+0xdc>)
    b732:	602c      	str	r4, [r5, #0]
	gs_gmac_dev.rx_sem = xSemaphoreCreateCounting(CONF_GMAC_RXDESCR_NUM, 0);
    b734:	2100      	movs	r1, #0
    b736:	2010      	movs	r0, #16
    b738:	4b1c      	ldr	r3, [pc, #112]	; (b7ac <tcpip_init_done+0xe0>)
    b73a:	4798      	blx	r3
    b73c:	6068      	str	r0, [r5, #4]
	id = sys_thread_new("GMAC", gmac_task, &gs_gmac_dev, netifINTERFACE_TASK_STACK_SIZE, netifINTERFACE_TASK_PRIORITY);
    b73e:	2302      	movs	r3, #2
    b740:	9300      	str	r3, [sp, #0]
    b742:	f44f 7300 	mov.w	r3, #512	; 0x200
    b746:	462a      	mov	r2, r5
    b748:	4919      	ldr	r1, [pc, #100]	; (b7b0 <tcpip_init_done+0xe4>)
    b74a:	481a      	ldr	r0, [pc, #104]	; (b7b4 <tcpip_init_done+0xe8>)
    b74c:	4d1a      	ldr	r5, [pc, #104]	; (b7b8 <tcpip_init_done+0xec>)
    b74e:	47a8      	blx	r5
	netif_set_default(&TCPIP_STACK_INTERFACE_0_desc);
    b750:	4620      	mov	r0, r4
    b752:	4b1a      	ldr	r3, [pc, #104]	; (b7bc <tcpip_init_done+0xf0>)
    b754:	4798      	blx	r3
	netif_set_up(&TCPIP_STACK_INTERFACE_0_desc);
    b756:	4620      	mov	r0, r4
    b758:	4b19      	ldr	r3, [pc, #100]	; (b7c0 <tcpip_init_done+0xf4>)
    b75a:	4798      	blx	r3
	sys_sem_signal(sem); /* Signal the waiting thread that the TCP/IP init is done. */
    b75c:	4630      	mov	r0, r6
    b75e:	4b19      	ldr	r3, [pc, #100]	; (b7c4 <tcpip_init_done+0xf8>)
    b760:	4798      	blx	r3
}
    b762:	b004      	add	sp, #16
    b764:	bd70      	pop	{r4, r5, r6, pc}
    b766:	bf00      	nop
    b768:	0000d5f4 	.word	0x0000d5f4
    b76c:	2001291c 	.word	0x2001291c
    b770:	0000b66d 	.word	0x0000b66d
    b774:	00001241 	.word	0x00001241
    b778:	0000accd 	.word	0x0000accd
    b77c:	200128c9 	.word	0x200128c9
    b780:	20012954 	.word	0x20012954
    b784:	00000e0d 	.word	0x00000e0d
    b788:	200128c8 	.word	0x200128c8
    b78c:	0000d5fc 	.word	0x0000d5fc
    b790:	0000c369 	.word	0x0000c369
    b794:	e000e100 	.word	0xe000e100
    b798:	00001185 	.word	0x00001185
    b79c:	00000ee9 	.word	0x00000ee9
    b7a0:	2001295c 	.word	0x2001295c
    b7a4:	00003d2d 	.word	0x00003d2d
    b7a8:	200161f4 	.word	0x200161f4
    b7ac:	0000a0dd 	.word	0x0000a0dd
    b7b0:	0000b6a9 	.word	0x0000b6a9
    b7b4:	0000d614 	.word	0x0000d614
    b7b8:	000026bd 	.word	0x000026bd
    b7bc:	00005311 	.word	0x00005311
    b7c0:	0000531d 	.word	0x0000531d
    b7c4:	000024c1 	.word	0x000024c1

0000b7c8 <__aeabi_drsub>:
    b7c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b7cc:	e002      	b.n	b7d4 <__adddf3>
    b7ce:	bf00      	nop

0000b7d0 <__aeabi_dsub>:
    b7d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b7d4 <__adddf3>:
    b7d4:	b530      	push	{r4, r5, lr}
    b7d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b7da:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b7de:	ea94 0f05 	teq	r4, r5
    b7e2:	bf08      	it	eq
    b7e4:	ea90 0f02 	teqeq	r0, r2
    b7e8:	bf1f      	itttt	ne
    b7ea:	ea54 0c00 	orrsne.w	ip, r4, r0
    b7ee:	ea55 0c02 	orrsne.w	ip, r5, r2
    b7f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b7f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b7fa:	f000 80e2 	beq.w	b9c2 <__adddf3+0x1ee>
    b7fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b802:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b806:	bfb8      	it	lt
    b808:	426d      	neglt	r5, r5
    b80a:	dd0c      	ble.n	b826 <__adddf3+0x52>
    b80c:	442c      	add	r4, r5
    b80e:	ea80 0202 	eor.w	r2, r0, r2
    b812:	ea81 0303 	eor.w	r3, r1, r3
    b816:	ea82 0000 	eor.w	r0, r2, r0
    b81a:	ea83 0101 	eor.w	r1, r3, r1
    b81e:	ea80 0202 	eor.w	r2, r0, r2
    b822:	ea81 0303 	eor.w	r3, r1, r3
    b826:	2d36      	cmp	r5, #54	; 0x36
    b828:	bf88      	it	hi
    b82a:	bd30      	pophi	{r4, r5, pc}
    b82c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b830:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b834:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b838:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b83c:	d002      	beq.n	b844 <__adddf3+0x70>
    b83e:	4240      	negs	r0, r0
    b840:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b844:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b848:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b84c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b850:	d002      	beq.n	b858 <__adddf3+0x84>
    b852:	4252      	negs	r2, r2
    b854:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b858:	ea94 0f05 	teq	r4, r5
    b85c:	f000 80a7 	beq.w	b9ae <__adddf3+0x1da>
    b860:	f1a4 0401 	sub.w	r4, r4, #1
    b864:	f1d5 0e20 	rsbs	lr, r5, #32
    b868:	db0d      	blt.n	b886 <__adddf3+0xb2>
    b86a:	fa02 fc0e 	lsl.w	ip, r2, lr
    b86e:	fa22 f205 	lsr.w	r2, r2, r5
    b872:	1880      	adds	r0, r0, r2
    b874:	f141 0100 	adc.w	r1, r1, #0
    b878:	fa03 f20e 	lsl.w	r2, r3, lr
    b87c:	1880      	adds	r0, r0, r2
    b87e:	fa43 f305 	asr.w	r3, r3, r5
    b882:	4159      	adcs	r1, r3
    b884:	e00e      	b.n	b8a4 <__adddf3+0xd0>
    b886:	f1a5 0520 	sub.w	r5, r5, #32
    b88a:	f10e 0e20 	add.w	lr, lr, #32
    b88e:	2a01      	cmp	r2, #1
    b890:	fa03 fc0e 	lsl.w	ip, r3, lr
    b894:	bf28      	it	cs
    b896:	f04c 0c02 	orrcs.w	ip, ip, #2
    b89a:	fa43 f305 	asr.w	r3, r3, r5
    b89e:	18c0      	adds	r0, r0, r3
    b8a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b8a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b8a8:	d507      	bpl.n	b8ba <__adddf3+0xe6>
    b8aa:	f04f 0e00 	mov.w	lr, #0
    b8ae:	f1dc 0c00 	rsbs	ip, ip, #0
    b8b2:	eb7e 0000 	sbcs.w	r0, lr, r0
    b8b6:	eb6e 0101 	sbc.w	r1, lr, r1
    b8ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b8be:	d31b      	bcc.n	b8f8 <__adddf3+0x124>
    b8c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b8c4:	d30c      	bcc.n	b8e0 <__adddf3+0x10c>
    b8c6:	0849      	lsrs	r1, r1, #1
    b8c8:	ea5f 0030 	movs.w	r0, r0, rrx
    b8cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b8d0:	f104 0401 	add.w	r4, r4, #1
    b8d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b8d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b8dc:	f080 809a 	bcs.w	ba14 <__adddf3+0x240>
    b8e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b8e4:	bf08      	it	eq
    b8e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b8ea:	f150 0000 	adcs.w	r0, r0, #0
    b8ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b8f2:	ea41 0105 	orr.w	r1, r1, r5
    b8f6:	bd30      	pop	{r4, r5, pc}
    b8f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b8fc:	4140      	adcs	r0, r0
    b8fe:	eb41 0101 	adc.w	r1, r1, r1
    b902:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b906:	f1a4 0401 	sub.w	r4, r4, #1
    b90a:	d1e9      	bne.n	b8e0 <__adddf3+0x10c>
    b90c:	f091 0f00 	teq	r1, #0
    b910:	bf04      	itt	eq
    b912:	4601      	moveq	r1, r0
    b914:	2000      	moveq	r0, #0
    b916:	fab1 f381 	clz	r3, r1
    b91a:	bf08      	it	eq
    b91c:	3320      	addeq	r3, #32
    b91e:	f1a3 030b 	sub.w	r3, r3, #11
    b922:	f1b3 0220 	subs.w	r2, r3, #32
    b926:	da0c      	bge.n	b942 <__adddf3+0x16e>
    b928:	320c      	adds	r2, #12
    b92a:	dd08      	ble.n	b93e <__adddf3+0x16a>
    b92c:	f102 0c14 	add.w	ip, r2, #20
    b930:	f1c2 020c 	rsb	r2, r2, #12
    b934:	fa01 f00c 	lsl.w	r0, r1, ip
    b938:	fa21 f102 	lsr.w	r1, r1, r2
    b93c:	e00c      	b.n	b958 <__adddf3+0x184>
    b93e:	f102 0214 	add.w	r2, r2, #20
    b942:	bfd8      	it	le
    b944:	f1c2 0c20 	rsble	ip, r2, #32
    b948:	fa01 f102 	lsl.w	r1, r1, r2
    b94c:	fa20 fc0c 	lsr.w	ip, r0, ip
    b950:	bfdc      	itt	le
    b952:	ea41 010c 	orrle.w	r1, r1, ip
    b956:	4090      	lslle	r0, r2
    b958:	1ae4      	subs	r4, r4, r3
    b95a:	bfa2      	ittt	ge
    b95c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b960:	4329      	orrge	r1, r5
    b962:	bd30      	popge	{r4, r5, pc}
    b964:	ea6f 0404 	mvn.w	r4, r4
    b968:	3c1f      	subs	r4, #31
    b96a:	da1c      	bge.n	b9a6 <__adddf3+0x1d2>
    b96c:	340c      	adds	r4, #12
    b96e:	dc0e      	bgt.n	b98e <__adddf3+0x1ba>
    b970:	f104 0414 	add.w	r4, r4, #20
    b974:	f1c4 0220 	rsb	r2, r4, #32
    b978:	fa20 f004 	lsr.w	r0, r0, r4
    b97c:	fa01 f302 	lsl.w	r3, r1, r2
    b980:	ea40 0003 	orr.w	r0, r0, r3
    b984:	fa21 f304 	lsr.w	r3, r1, r4
    b988:	ea45 0103 	orr.w	r1, r5, r3
    b98c:	bd30      	pop	{r4, r5, pc}
    b98e:	f1c4 040c 	rsb	r4, r4, #12
    b992:	f1c4 0220 	rsb	r2, r4, #32
    b996:	fa20 f002 	lsr.w	r0, r0, r2
    b99a:	fa01 f304 	lsl.w	r3, r1, r4
    b99e:	ea40 0003 	orr.w	r0, r0, r3
    b9a2:	4629      	mov	r1, r5
    b9a4:	bd30      	pop	{r4, r5, pc}
    b9a6:	fa21 f004 	lsr.w	r0, r1, r4
    b9aa:	4629      	mov	r1, r5
    b9ac:	bd30      	pop	{r4, r5, pc}
    b9ae:	f094 0f00 	teq	r4, #0
    b9b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b9b6:	bf06      	itte	eq
    b9b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b9bc:	3401      	addeq	r4, #1
    b9be:	3d01      	subne	r5, #1
    b9c0:	e74e      	b.n	b860 <__adddf3+0x8c>
    b9c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b9c6:	bf18      	it	ne
    b9c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b9cc:	d029      	beq.n	ba22 <__adddf3+0x24e>
    b9ce:	ea94 0f05 	teq	r4, r5
    b9d2:	bf08      	it	eq
    b9d4:	ea90 0f02 	teqeq	r0, r2
    b9d8:	d005      	beq.n	b9e6 <__adddf3+0x212>
    b9da:	ea54 0c00 	orrs.w	ip, r4, r0
    b9de:	bf04      	itt	eq
    b9e0:	4619      	moveq	r1, r3
    b9e2:	4610      	moveq	r0, r2
    b9e4:	bd30      	pop	{r4, r5, pc}
    b9e6:	ea91 0f03 	teq	r1, r3
    b9ea:	bf1e      	ittt	ne
    b9ec:	2100      	movne	r1, #0
    b9ee:	2000      	movne	r0, #0
    b9f0:	bd30      	popne	{r4, r5, pc}
    b9f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b9f6:	d105      	bne.n	ba04 <__adddf3+0x230>
    b9f8:	0040      	lsls	r0, r0, #1
    b9fa:	4149      	adcs	r1, r1
    b9fc:	bf28      	it	cs
    b9fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ba02:	bd30      	pop	{r4, r5, pc}
    ba04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    ba08:	bf3c      	itt	cc
    ba0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    ba0e:	bd30      	popcc	{r4, r5, pc}
    ba10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ba14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ba18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ba1c:	f04f 0000 	mov.w	r0, #0
    ba20:	bd30      	pop	{r4, r5, pc}
    ba22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ba26:	bf1a      	itte	ne
    ba28:	4619      	movne	r1, r3
    ba2a:	4610      	movne	r0, r2
    ba2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ba30:	bf1c      	itt	ne
    ba32:	460b      	movne	r3, r1
    ba34:	4602      	movne	r2, r0
    ba36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ba3a:	bf06      	itte	eq
    ba3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ba40:	ea91 0f03 	teqeq	r1, r3
    ba44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    ba48:	bd30      	pop	{r4, r5, pc}
    ba4a:	bf00      	nop

0000ba4c <__aeabi_ui2d>:
    ba4c:	f090 0f00 	teq	r0, #0
    ba50:	bf04      	itt	eq
    ba52:	2100      	moveq	r1, #0
    ba54:	4770      	bxeq	lr
    ba56:	b530      	push	{r4, r5, lr}
    ba58:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ba5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ba60:	f04f 0500 	mov.w	r5, #0
    ba64:	f04f 0100 	mov.w	r1, #0
    ba68:	e750      	b.n	b90c <__adddf3+0x138>
    ba6a:	bf00      	nop

0000ba6c <__aeabi_i2d>:
    ba6c:	f090 0f00 	teq	r0, #0
    ba70:	bf04      	itt	eq
    ba72:	2100      	moveq	r1, #0
    ba74:	4770      	bxeq	lr
    ba76:	b530      	push	{r4, r5, lr}
    ba78:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ba7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ba80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ba84:	bf48      	it	mi
    ba86:	4240      	negmi	r0, r0
    ba88:	f04f 0100 	mov.w	r1, #0
    ba8c:	e73e      	b.n	b90c <__adddf3+0x138>
    ba8e:	bf00      	nop

0000ba90 <__aeabi_f2d>:
    ba90:	0042      	lsls	r2, r0, #1
    ba92:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ba96:	ea4f 0131 	mov.w	r1, r1, rrx
    ba9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ba9e:	bf1f      	itttt	ne
    baa0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    baa4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    baa8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    baac:	4770      	bxne	lr
    baae:	f092 0f00 	teq	r2, #0
    bab2:	bf14      	ite	ne
    bab4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bab8:	4770      	bxeq	lr
    baba:	b530      	push	{r4, r5, lr}
    babc:	f44f 7460 	mov.w	r4, #896	; 0x380
    bac0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bac4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bac8:	e720      	b.n	b90c <__adddf3+0x138>
    baca:	bf00      	nop

0000bacc <__aeabi_ul2d>:
    bacc:	ea50 0201 	orrs.w	r2, r0, r1
    bad0:	bf08      	it	eq
    bad2:	4770      	bxeq	lr
    bad4:	b530      	push	{r4, r5, lr}
    bad6:	f04f 0500 	mov.w	r5, #0
    bada:	e00a      	b.n	baf2 <__aeabi_l2d+0x16>

0000badc <__aeabi_l2d>:
    badc:	ea50 0201 	orrs.w	r2, r0, r1
    bae0:	bf08      	it	eq
    bae2:	4770      	bxeq	lr
    bae4:	b530      	push	{r4, r5, lr}
    bae6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    baea:	d502      	bpl.n	baf2 <__aeabi_l2d+0x16>
    baec:	4240      	negs	r0, r0
    baee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    baf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    baf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bafa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    bafe:	f43f aedc 	beq.w	b8ba <__adddf3+0xe6>
    bb02:	f04f 0203 	mov.w	r2, #3
    bb06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bb0a:	bf18      	it	ne
    bb0c:	3203      	addne	r2, #3
    bb0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bb12:	bf18      	it	ne
    bb14:	3203      	addne	r2, #3
    bb16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    bb1a:	f1c2 0320 	rsb	r3, r2, #32
    bb1e:	fa00 fc03 	lsl.w	ip, r0, r3
    bb22:	fa20 f002 	lsr.w	r0, r0, r2
    bb26:	fa01 fe03 	lsl.w	lr, r1, r3
    bb2a:	ea40 000e 	orr.w	r0, r0, lr
    bb2e:	fa21 f102 	lsr.w	r1, r1, r2
    bb32:	4414      	add	r4, r2
    bb34:	e6c1      	b.n	b8ba <__adddf3+0xe6>
    bb36:	bf00      	nop

0000bb38 <__aeabi_dmul>:
    bb38:	b570      	push	{r4, r5, r6, lr}
    bb3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bb3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bb42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bb46:	bf1d      	ittte	ne
    bb48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bb4c:	ea94 0f0c 	teqne	r4, ip
    bb50:	ea95 0f0c 	teqne	r5, ip
    bb54:	f000 f8de 	bleq	bd14 <__aeabi_dmul+0x1dc>
    bb58:	442c      	add	r4, r5
    bb5a:	ea81 0603 	eor.w	r6, r1, r3
    bb5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    bb62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    bb66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    bb6a:	bf18      	it	ne
    bb6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    bb70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bb74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    bb78:	d038      	beq.n	bbec <__aeabi_dmul+0xb4>
    bb7a:	fba0 ce02 	umull	ip, lr, r0, r2
    bb7e:	f04f 0500 	mov.w	r5, #0
    bb82:	fbe1 e502 	umlal	lr, r5, r1, r2
    bb86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    bb8a:	fbe0 e503 	umlal	lr, r5, r0, r3
    bb8e:	f04f 0600 	mov.w	r6, #0
    bb92:	fbe1 5603 	umlal	r5, r6, r1, r3
    bb96:	f09c 0f00 	teq	ip, #0
    bb9a:	bf18      	it	ne
    bb9c:	f04e 0e01 	orrne.w	lr, lr, #1
    bba0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    bba4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    bba8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    bbac:	d204      	bcs.n	bbb8 <__aeabi_dmul+0x80>
    bbae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    bbb2:	416d      	adcs	r5, r5
    bbb4:	eb46 0606 	adc.w	r6, r6, r6
    bbb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    bbbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    bbc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    bbc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    bbc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    bbcc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    bbd0:	bf88      	it	hi
    bbd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bbd6:	d81e      	bhi.n	bc16 <__aeabi_dmul+0xde>
    bbd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    bbdc:	bf08      	it	eq
    bbde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    bbe2:	f150 0000 	adcs.w	r0, r0, #0
    bbe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bbea:	bd70      	pop	{r4, r5, r6, pc}
    bbec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    bbf0:	ea46 0101 	orr.w	r1, r6, r1
    bbf4:	ea40 0002 	orr.w	r0, r0, r2
    bbf8:	ea81 0103 	eor.w	r1, r1, r3
    bbfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    bc00:	bfc2      	ittt	gt
    bc02:	ebd4 050c 	rsbsgt	r5, r4, ip
    bc06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bc0a:	bd70      	popgt	{r4, r5, r6, pc}
    bc0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bc10:	f04f 0e00 	mov.w	lr, #0
    bc14:	3c01      	subs	r4, #1
    bc16:	f300 80ab 	bgt.w	bd70 <__aeabi_dmul+0x238>
    bc1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    bc1e:	bfde      	ittt	le
    bc20:	2000      	movle	r0, #0
    bc22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    bc26:	bd70      	pople	{r4, r5, r6, pc}
    bc28:	f1c4 0400 	rsb	r4, r4, #0
    bc2c:	3c20      	subs	r4, #32
    bc2e:	da35      	bge.n	bc9c <__aeabi_dmul+0x164>
    bc30:	340c      	adds	r4, #12
    bc32:	dc1b      	bgt.n	bc6c <__aeabi_dmul+0x134>
    bc34:	f104 0414 	add.w	r4, r4, #20
    bc38:	f1c4 0520 	rsb	r5, r4, #32
    bc3c:	fa00 f305 	lsl.w	r3, r0, r5
    bc40:	fa20 f004 	lsr.w	r0, r0, r4
    bc44:	fa01 f205 	lsl.w	r2, r1, r5
    bc48:	ea40 0002 	orr.w	r0, r0, r2
    bc4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    bc50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bc54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bc58:	fa21 f604 	lsr.w	r6, r1, r4
    bc5c:	eb42 0106 	adc.w	r1, r2, r6
    bc60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bc64:	bf08      	it	eq
    bc66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bc6a:	bd70      	pop	{r4, r5, r6, pc}
    bc6c:	f1c4 040c 	rsb	r4, r4, #12
    bc70:	f1c4 0520 	rsb	r5, r4, #32
    bc74:	fa00 f304 	lsl.w	r3, r0, r4
    bc78:	fa20 f005 	lsr.w	r0, r0, r5
    bc7c:	fa01 f204 	lsl.w	r2, r1, r4
    bc80:	ea40 0002 	orr.w	r0, r0, r2
    bc84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bc88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    bc8c:	f141 0100 	adc.w	r1, r1, #0
    bc90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bc94:	bf08      	it	eq
    bc96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bc9a:	bd70      	pop	{r4, r5, r6, pc}
    bc9c:	f1c4 0520 	rsb	r5, r4, #32
    bca0:	fa00 f205 	lsl.w	r2, r0, r5
    bca4:	ea4e 0e02 	orr.w	lr, lr, r2
    bca8:	fa20 f304 	lsr.w	r3, r0, r4
    bcac:	fa01 f205 	lsl.w	r2, r1, r5
    bcb0:	ea43 0302 	orr.w	r3, r3, r2
    bcb4:	fa21 f004 	lsr.w	r0, r1, r4
    bcb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bcbc:	fa21 f204 	lsr.w	r2, r1, r4
    bcc0:	ea20 0002 	bic.w	r0, r0, r2
    bcc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    bcc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bccc:	bf08      	it	eq
    bcce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bcd2:	bd70      	pop	{r4, r5, r6, pc}
    bcd4:	f094 0f00 	teq	r4, #0
    bcd8:	d10f      	bne.n	bcfa <__aeabi_dmul+0x1c2>
    bcda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    bcde:	0040      	lsls	r0, r0, #1
    bce0:	eb41 0101 	adc.w	r1, r1, r1
    bce4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bce8:	bf08      	it	eq
    bcea:	3c01      	subeq	r4, #1
    bcec:	d0f7      	beq.n	bcde <__aeabi_dmul+0x1a6>
    bcee:	ea41 0106 	orr.w	r1, r1, r6
    bcf2:	f095 0f00 	teq	r5, #0
    bcf6:	bf18      	it	ne
    bcf8:	4770      	bxne	lr
    bcfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    bcfe:	0052      	lsls	r2, r2, #1
    bd00:	eb43 0303 	adc.w	r3, r3, r3
    bd04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bd08:	bf08      	it	eq
    bd0a:	3d01      	subeq	r5, #1
    bd0c:	d0f7      	beq.n	bcfe <__aeabi_dmul+0x1c6>
    bd0e:	ea43 0306 	orr.w	r3, r3, r6
    bd12:	4770      	bx	lr
    bd14:	ea94 0f0c 	teq	r4, ip
    bd18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bd1c:	bf18      	it	ne
    bd1e:	ea95 0f0c 	teqne	r5, ip
    bd22:	d00c      	beq.n	bd3e <__aeabi_dmul+0x206>
    bd24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bd28:	bf18      	it	ne
    bd2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bd2e:	d1d1      	bne.n	bcd4 <__aeabi_dmul+0x19c>
    bd30:	ea81 0103 	eor.w	r1, r1, r3
    bd34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bd38:	f04f 0000 	mov.w	r0, #0
    bd3c:	bd70      	pop	{r4, r5, r6, pc}
    bd3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bd42:	bf06      	itte	eq
    bd44:	4610      	moveq	r0, r2
    bd46:	4619      	moveq	r1, r3
    bd48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bd4c:	d019      	beq.n	bd82 <__aeabi_dmul+0x24a>
    bd4e:	ea94 0f0c 	teq	r4, ip
    bd52:	d102      	bne.n	bd5a <__aeabi_dmul+0x222>
    bd54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    bd58:	d113      	bne.n	bd82 <__aeabi_dmul+0x24a>
    bd5a:	ea95 0f0c 	teq	r5, ip
    bd5e:	d105      	bne.n	bd6c <__aeabi_dmul+0x234>
    bd60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    bd64:	bf1c      	itt	ne
    bd66:	4610      	movne	r0, r2
    bd68:	4619      	movne	r1, r3
    bd6a:	d10a      	bne.n	bd82 <__aeabi_dmul+0x24a>
    bd6c:	ea81 0103 	eor.w	r1, r1, r3
    bd70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bd74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bd78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bd7c:	f04f 0000 	mov.w	r0, #0
    bd80:	bd70      	pop	{r4, r5, r6, pc}
    bd82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bd86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    bd8a:	bd70      	pop	{r4, r5, r6, pc}

0000bd8c <__aeabi_ddiv>:
    bd8c:	b570      	push	{r4, r5, r6, lr}
    bd8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bd92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bd96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bd9a:	bf1d      	ittte	ne
    bd9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bda0:	ea94 0f0c 	teqne	r4, ip
    bda4:	ea95 0f0c 	teqne	r5, ip
    bda8:	f000 f8a7 	bleq	befa <__aeabi_ddiv+0x16e>
    bdac:	eba4 0405 	sub.w	r4, r4, r5
    bdb0:	ea81 0e03 	eor.w	lr, r1, r3
    bdb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bdb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bdbc:	f000 8088 	beq.w	bed0 <__aeabi_ddiv+0x144>
    bdc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bdc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bdc8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    bdcc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    bdd0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    bdd4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    bdd8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    bddc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    bde0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    bde4:	429d      	cmp	r5, r3
    bde6:	bf08      	it	eq
    bde8:	4296      	cmpeq	r6, r2
    bdea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    bdee:	f504 7440 	add.w	r4, r4, #768	; 0x300
    bdf2:	d202      	bcs.n	bdfa <__aeabi_ddiv+0x6e>
    bdf4:	085b      	lsrs	r3, r3, #1
    bdf6:	ea4f 0232 	mov.w	r2, r2, rrx
    bdfa:	1ab6      	subs	r6, r6, r2
    bdfc:	eb65 0503 	sbc.w	r5, r5, r3
    be00:	085b      	lsrs	r3, r3, #1
    be02:	ea4f 0232 	mov.w	r2, r2, rrx
    be06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    be0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    be0e:	ebb6 0e02 	subs.w	lr, r6, r2
    be12:	eb75 0e03 	sbcs.w	lr, r5, r3
    be16:	bf22      	ittt	cs
    be18:	1ab6      	subcs	r6, r6, r2
    be1a:	4675      	movcs	r5, lr
    be1c:	ea40 000c 	orrcs.w	r0, r0, ip
    be20:	085b      	lsrs	r3, r3, #1
    be22:	ea4f 0232 	mov.w	r2, r2, rrx
    be26:	ebb6 0e02 	subs.w	lr, r6, r2
    be2a:	eb75 0e03 	sbcs.w	lr, r5, r3
    be2e:	bf22      	ittt	cs
    be30:	1ab6      	subcs	r6, r6, r2
    be32:	4675      	movcs	r5, lr
    be34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    be38:	085b      	lsrs	r3, r3, #1
    be3a:	ea4f 0232 	mov.w	r2, r2, rrx
    be3e:	ebb6 0e02 	subs.w	lr, r6, r2
    be42:	eb75 0e03 	sbcs.w	lr, r5, r3
    be46:	bf22      	ittt	cs
    be48:	1ab6      	subcs	r6, r6, r2
    be4a:	4675      	movcs	r5, lr
    be4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    be50:	085b      	lsrs	r3, r3, #1
    be52:	ea4f 0232 	mov.w	r2, r2, rrx
    be56:	ebb6 0e02 	subs.w	lr, r6, r2
    be5a:	eb75 0e03 	sbcs.w	lr, r5, r3
    be5e:	bf22      	ittt	cs
    be60:	1ab6      	subcs	r6, r6, r2
    be62:	4675      	movcs	r5, lr
    be64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    be68:	ea55 0e06 	orrs.w	lr, r5, r6
    be6c:	d018      	beq.n	bea0 <__aeabi_ddiv+0x114>
    be6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    be72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    be76:	ea4f 1606 	mov.w	r6, r6, lsl #4
    be7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    be7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    be82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    be86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    be8a:	d1c0      	bne.n	be0e <__aeabi_ddiv+0x82>
    be8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    be90:	d10b      	bne.n	beaa <__aeabi_ddiv+0x11e>
    be92:	ea41 0100 	orr.w	r1, r1, r0
    be96:	f04f 0000 	mov.w	r0, #0
    be9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    be9e:	e7b6      	b.n	be0e <__aeabi_ddiv+0x82>
    bea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bea4:	bf04      	itt	eq
    bea6:	4301      	orreq	r1, r0
    bea8:	2000      	moveq	r0, #0
    beaa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    beae:	bf88      	it	hi
    beb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    beb4:	f63f aeaf 	bhi.w	bc16 <__aeabi_dmul+0xde>
    beb8:	ebb5 0c03 	subs.w	ip, r5, r3
    bebc:	bf04      	itt	eq
    bebe:	ebb6 0c02 	subseq.w	ip, r6, r2
    bec2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bec6:	f150 0000 	adcs.w	r0, r0, #0
    beca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bece:	bd70      	pop	{r4, r5, r6, pc}
    bed0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    bed4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    bed8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    bedc:	bfc2      	ittt	gt
    bede:	ebd4 050c 	rsbsgt	r5, r4, ip
    bee2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bee6:	bd70      	popgt	{r4, r5, r6, pc}
    bee8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    beec:	f04f 0e00 	mov.w	lr, #0
    bef0:	3c01      	subs	r4, #1
    bef2:	e690      	b.n	bc16 <__aeabi_dmul+0xde>
    bef4:	ea45 0e06 	orr.w	lr, r5, r6
    bef8:	e68d      	b.n	bc16 <__aeabi_dmul+0xde>
    befa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    befe:	ea94 0f0c 	teq	r4, ip
    bf02:	bf08      	it	eq
    bf04:	ea95 0f0c 	teqeq	r5, ip
    bf08:	f43f af3b 	beq.w	bd82 <__aeabi_dmul+0x24a>
    bf0c:	ea94 0f0c 	teq	r4, ip
    bf10:	d10a      	bne.n	bf28 <__aeabi_ddiv+0x19c>
    bf12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bf16:	f47f af34 	bne.w	bd82 <__aeabi_dmul+0x24a>
    bf1a:	ea95 0f0c 	teq	r5, ip
    bf1e:	f47f af25 	bne.w	bd6c <__aeabi_dmul+0x234>
    bf22:	4610      	mov	r0, r2
    bf24:	4619      	mov	r1, r3
    bf26:	e72c      	b.n	bd82 <__aeabi_dmul+0x24a>
    bf28:	ea95 0f0c 	teq	r5, ip
    bf2c:	d106      	bne.n	bf3c <__aeabi_ddiv+0x1b0>
    bf2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bf32:	f43f aefd 	beq.w	bd30 <__aeabi_dmul+0x1f8>
    bf36:	4610      	mov	r0, r2
    bf38:	4619      	mov	r1, r3
    bf3a:	e722      	b.n	bd82 <__aeabi_dmul+0x24a>
    bf3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bf40:	bf18      	it	ne
    bf42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bf46:	f47f aec5 	bne.w	bcd4 <__aeabi_dmul+0x19c>
    bf4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    bf4e:	f47f af0d 	bne.w	bd6c <__aeabi_dmul+0x234>
    bf52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    bf56:	f47f aeeb 	bne.w	bd30 <__aeabi_dmul+0x1f8>
    bf5a:	e712      	b.n	bd82 <__aeabi_dmul+0x24a>

0000bf5c <__aeabi_d2iz>:
    bf5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    bf60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bf64:	d215      	bcs.n	bf92 <__aeabi_d2iz+0x36>
    bf66:	d511      	bpl.n	bf8c <__aeabi_d2iz+0x30>
    bf68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bf6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bf70:	d912      	bls.n	bf98 <__aeabi_d2iz+0x3c>
    bf72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bf76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bf7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bf7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bf82:	fa23 f002 	lsr.w	r0, r3, r2
    bf86:	bf18      	it	ne
    bf88:	4240      	negne	r0, r0
    bf8a:	4770      	bx	lr
    bf8c:	f04f 0000 	mov.w	r0, #0
    bf90:	4770      	bx	lr
    bf92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bf96:	d105      	bne.n	bfa4 <__aeabi_d2iz+0x48>
    bf98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    bf9c:	bf08      	it	eq
    bf9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    bfa2:	4770      	bx	lr
    bfa4:	f04f 0000 	mov.w	r0, #0
    bfa8:	4770      	bx	lr
    bfaa:	bf00      	nop

0000bfac <__aeabi_d2uiz>:
    bfac:	004a      	lsls	r2, r1, #1
    bfae:	d211      	bcs.n	bfd4 <__aeabi_d2uiz+0x28>
    bfb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bfb4:	d211      	bcs.n	bfda <__aeabi_d2uiz+0x2e>
    bfb6:	d50d      	bpl.n	bfd4 <__aeabi_d2uiz+0x28>
    bfb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bfbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bfc0:	d40e      	bmi.n	bfe0 <__aeabi_d2uiz+0x34>
    bfc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bfc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bfca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bfce:	fa23 f002 	lsr.w	r0, r3, r2
    bfd2:	4770      	bx	lr
    bfd4:	f04f 0000 	mov.w	r0, #0
    bfd8:	4770      	bx	lr
    bfda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bfde:	d102      	bne.n	bfe6 <__aeabi_d2uiz+0x3a>
    bfe0:	f04f 30ff 	mov.w	r0, #4294967295
    bfe4:	4770      	bx	lr
    bfe6:	f04f 0000 	mov.w	r0, #0
    bfea:	4770      	bx	lr

0000bfec <__aeabi_d2f>:
    bfec:	ea4f 0241 	mov.w	r2, r1, lsl #1
    bff0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    bff4:	bf24      	itt	cs
    bff6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    bffa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    bffe:	d90d      	bls.n	c01c <__aeabi_d2f+0x30>
    c000:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c004:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c008:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c00c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c010:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c014:	bf08      	it	eq
    c016:	f020 0001 	biceq.w	r0, r0, #1
    c01a:	4770      	bx	lr
    c01c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c020:	d121      	bne.n	c066 <__aeabi_d2f+0x7a>
    c022:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c026:	bfbc      	itt	lt
    c028:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c02c:	4770      	bxlt	lr
    c02e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c032:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c036:	f1c2 0218 	rsb	r2, r2, #24
    c03a:	f1c2 0c20 	rsb	ip, r2, #32
    c03e:	fa10 f30c 	lsls.w	r3, r0, ip
    c042:	fa20 f002 	lsr.w	r0, r0, r2
    c046:	bf18      	it	ne
    c048:	f040 0001 	orrne.w	r0, r0, #1
    c04c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c050:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c054:	fa03 fc0c 	lsl.w	ip, r3, ip
    c058:	ea40 000c 	orr.w	r0, r0, ip
    c05c:	fa23 f302 	lsr.w	r3, r3, r2
    c060:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c064:	e7cc      	b.n	c000 <__aeabi_d2f+0x14>
    c066:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c06a:	d107      	bne.n	c07c <__aeabi_d2f+0x90>
    c06c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c070:	bf1e      	ittt	ne
    c072:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c076:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c07a:	4770      	bxne	lr
    c07c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c080:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c088:	4770      	bx	lr
    c08a:	bf00      	nop

0000c08c <__libc_init_array>:
    c08c:	b570      	push	{r4, r5, r6, lr}
    c08e:	4e0d      	ldr	r6, [pc, #52]	; (c0c4 <__libc_init_array+0x38>)
    c090:	4c0d      	ldr	r4, [pc, #52]	; (c0c8 <__libc_init_array+0x3c>)
    c092:	1ba4      	subs	r4, r4, r6
    c094:	10a4      	asrs	r4, r4, #2
    c096:	2500      	movs	r5, #0
    c098:	42a5      	cmp	r5, r4
    c09a:	d109      	bne.n	c0b0 <__libc_init_array+0x24>
    c09c:	4e0b      	ldr	r6, [pc, #44]	; (c0cc <__libc_init_array+0x40>)
    c09e:	4c0c      	ldr	r4, [pc, #48]	; (c0d0 <__libc_init_array+0x44>)
    c0a0:	f001 fb0a 	bl	d6b8 <_init>
    c0a4:	1ba4      	subs	r4, r4, r6
    c0a6:	10a4      	asrs	r4, r4, #2
    c0a8:	2500      	movs	r5, #0
    c0aa:	42a5      	cmp	r5, r4
    c0ac:	d105      	bne.n	c0ba <__libc_init_array+0x2e>
    c0ae:	bd70      	pop	{r4, r5, r6, pc}
    c0b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c0b4:	4798      	blx	r3
    c0b6:	3501      	adds	r5, #1
    c0b8:	e7ee      	b.n	c098 <__libc_init_array+0xc>
    c0ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c0be:	4798      	blx	r3
    c0c0:	3501      	adds	r5, #1
    c0c2:	e7f2      	b.n	c0aa <__libc_init_array+0x1e>
    c0c4:	0000d6c4 	.word	0x0000d6c4
    c0c8:	0000d6c4 	.word	0x0000d6c4
    c0cc:	0000d6c4 	.word	0x0000d6c4
    c0d0:	0000d6c8 	.word	0x0000d6c8

0000c0d4 <malloc>:
    c0d4:	4b02      	ldr	r3, [pc, #8]	; (c0e0 <malloc+0xc>)
    c0d6:	4601      	mov	r1, r0
    c0d8:	6818      	ldr	r0, [r3, #0]
    c0da:	f000 b873 	b.w	c1c4 <_malloc_r>
    c0de:	bf00      	nop
    c0e0:	20000050 	.word	0x20000050

0000c0e4 <memcmp>:
    c0e4:	b510      	push	{r4, lr}
    c0e6:	3901      	subs	r1, #1
    c0e8:	4402      	add	r2, r0
    c0ea:	4290      	cmp	r0, r2
    c0ec:	d101      	bne.n	c0f2 <memcmp+0xe>
    c0ee:	2000      	movs	r0, #0
    c0f0:	bd10      	pop	{r4, pc}
    c0f2:	f810 3b01 	ldrb.w	r3, [r0], #1
    c0f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    c0fa:	42a3      	cmp	r3, r4
    c0fc:	d0f5      	beq.n	c0ea <memcmp+0x6>
    c0fe:	1b18      	subs	r0, r3, r4
    c100:	bd10      	pop	{r4, pc}

0000c102 <memcpy>:
    c102:	b510      	push	{r4, lr}
    c104:	1e43      	subs	r3, r0, #1
    c106:	440a      	add	r2, r1
    c108:	4291      	cmp	r1, r2
    c10a:	d100      	bne.n	c10e <memcpy+0xc>
    c10c:	bd10      	pop	{r4, pc}
    c10e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c112:	f803 4f01 	strb.w	r4, [r3, #1]!
    c116:	e7f7      	b.n	c108 <memcpy+0x6>

0000c118 <memset>:
    c118:	4402      	add	r2, r0
    c11a:	4603      	mov	r3, r0
    c11c:	4293      	cmp	r3, r2
    c11e:	d100      	bne.n	c122 <memset+0xa>
    c120:	4770      	bx	lr
    c122:	f803 1b01 	strb.w	r1, [r3], #1
    c126:	e7f9      	b.n	c11c <memset+0x4>

0000c128 <_free_r>:
    c128:	b538      	push	{r3, r4, r5, lr}
    c12a:	4605      	mov	r5, r0
    c12c:	2900      	cmp	r1, #0
    c12e:	d045      	beq.n	c1bc <_free_r+0x94>
    c130:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c134:	1f0c      	subs	r4, r1, #4
    c136:	2b00      	cmp	r3, #0
    c138:	bfb8      	it	lt
    c13a:	18e4      	addlt	r4, r4, r3
    c13c:	f000 fc82 	bl	ca44 <__malloc_lock>
    c140:	4a1f      	ldr	r2, [pc, #124]	; (c1c0 <_free_r+0x98>)
    c142:	6813      	ldr	r3, [r2, #0]
    c144:	4610      	mov	r0, r2
    c146:	b933      	cbnz	r3, c156 <_free_r+0x2e>
    c148:	6063      	str	r3, [r4, #4]
    c14a:	6014      	str	r4, [r2, #0]
    c14c:	4628      	mov	r0, r5
    c14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c152:	f000 bc78 	b.w	ca46 <__malloc_unlock>
    c156:	42a3      	cmp	r3, r4
    c158:	d90c      	bls.n	c174 <_free_r+0x4c>
    c15a:	6821      	ldr	r1, [r4, #0]
    c15c:	1862      	adds	r2, r4, r1
    c15e:	4293      	cmp	r3, r2
    c160:	bf04      	itt	eq
    c162:	681a      	ldreq	r2, [r3, #0]
    c164:	685b      	ldreq	r3, [r3, #4]
    c166:	6063      	str	r3, [r4, #4]
    c168:	bf04      	itt	eq
    c16a:	1852      	addeq	r2, r2, r1
    c16c:	6022      	streq	r2, [r4, #0]
    c16e:	6004      	str	r4, [r0, #0]
    c170:	e7ec      	b.n	c14c <_free_r+0x24>
    c172:	4613      	mov	r3, r2
    c174:	685a      	ldr	r2, [r3, #4]
    c176:	b10a      	cbz	r2, c17c <_free_r+0x54>
    c178:	42a2      	cmp	r2, r4
    c17a:	d9fa      	bls.n	c172 <_free_r+0x4a>
    c17c:	6819      	ldr	r1, [r3, #0]
    c17e:	1858      	adds	r0, r3, r1
    c180:	42a0      	cmp	r0, r4
    c182:	d10b      	bne.n	c19c <_free_r+0x74>
    c184:	6820      	ldr	r0, [r4, #0]
    c186:	4401      	add	r1, r0
    c188:	1858      	adds	r0, r3, r1
    c18a:	4282      	cmp	r2, r0
    c18c:	6019      	str	r1, [r3, #0]
    c18e:	d1dd      	bne.n	c14c <_free_r+0x24>
    c190:	6810      	ldr	r0, [r2, #0]
    c192:	6852      	ldr	r2, [r2, #4]
    c194:	605a      	str	r2, [r3, #4]
    c196:	4401      	add	r1, r0
    c198:	6019      	str	r1, [r3, #0]
    c19a:	e7d7      	b.n	c14c <_free_r+0x24>
    c19c:	d902      	bls.n	c1a4 <_free_r+0x7c>
    c19e:	230c      	movs	r3, #12
    c1a0:	602b      	str	r3, [r5, #0]
    c1a2:	e7d3      	b.n	c14c <_free_r+0x24>
    c1a4:	6820      	ldr	r0, [r4, #0]
    c1a6:	1821      	adds	r1, r4, r0
    c1a8:	428a      	cmp	r2, r1
    c1aa:	bf04      	itt	eq
    c1ac:	6811      	ldreq	r1, [r2, #0]
    c1ae:	6852      	ldreq	r2, [r2, #4]
    c1b0:	6062      	str	r2, [r4, #4]
    c1b2:	bf04      	itt	eq
    c1b4:	1809      	addeq	r1, r1, r0
    c1b6:	6021      	streq	r1, [r4, #0]
    c1b8:	605c      	str	r4, [r3, #4]
    c1ba:	e7c7      	b.n	c14c <_free_r+0x24>
    c1bc:	bd38      	pop	{r3, r4, r5, pc}
    c1be:	bf00      	nop
    c1c0:	200128d0 	.word	0x200128d0

0000c1c4 <_malloc_r>:
    c1c4:	b570      	push	{r4, r5, r6, lr}
    c1c6:	1ccd      	adds	r5, r1, #3
    c1c8:	f025 0503 	bic.w	r5, r5, #3
    c1cc:	3508      	adds	r5, #8
    c1ce:	2d0c      	cmp	r5, #12
    c1d0:	bf38      	it	cc
    c1d2:	250c      	movcc	r5, #12
    c1d4:	2d00      	cmp	r5, #0
    c1d6:	4606      	mov	r6, r0
    c1d8:	db01      	blt.n	c1de <_malloc_r+0x1a>
    c1da:	42a9      	cmp	r1, r5
    c1dc:	d903      	bls.n	c1e6 <_malloc_r+0x22>
    c1de:	230c      	movs	r3, #12
    c1e0:	6033      	str	r3, [r6, #0]
    c1e2:	2000      	movs	r0, #0
    c1e4:	bd70      	pop	{r4, r5, r6, pc}
    c1e6:	f000 fc2d 	bl	ca44 <__malloc_lock>
    c1ea:	4a23      	ldr	r2, [pc, #140]	; (c278 <_malloc_r+0xb4>)
    c1ec:	6814      	ldr	r4, [r2, #0]
    c1ee:	4621      	mov	r1, r4
    c1f0:	b991      	cbnz	r1, c218 <_malloc_r+0x54>
    c1f2:	4c22      	ldr	r4, [pc, #136]	; (c27c <_malloc_r+0xb8>)
    c1f4:	6823      	ldr	r3, [r4, #0]
    c1f6:	b91b      	cbnz	r3, c200 <_malloc_r+0x3c>
    c1f8:	4630      	mov	r0, r6
    c1fa:	f000 f8bd 	bl	c378 <_sbrk_r>
    c1fe:	6020      	str	r0, [r4, #0]
    c200:	4629      	mov	r1, r5
    c202:	4630      	mov	r0, r6
    c204:	f000 f8b8 	bl	c378 <_sbrk_r>
    c208:	1c43      	adds	r3, r0, #1
    c20a:	d126      	bne.n	c25a <_malloc_r+0x96>
    c20c:	230c      	movs	r3, #12
    c20e:	6033      	str	r3, [r6, #0]
    c210:	4630      	mov	r0, r6
    c212:	f000 fc18 	bl	ca46 <__malloc_unlock>
    c216:	e7e4      	b.n	c1e2 <_malloc_r+0x1e>
    c218:	680b      	ldr	r3, [r1, #0]
    c21a:	1b5b      	subs	r3, r3, r5
    c21c:	d41a      	bmi.n	c254 <_malloc_r+0x90>
    c21e:	2b0b      	cmp	r3, #11
    c220:	d90f      	bls.n	c242 <_malloc_r+0x7e>
    c222:	600b      	str	r3, [r1, #0]
    c224:	50cd      	str	r5, [r1, r3]
    c226:	18cc      	adds	r4, r1, r3
    c228:	4630      	mov	r0, r6
    c22a:	f000 fc0c 	bl	ca46 <__malloc_unlock>
    c22e:	f104 000b 	add.w	r0, r4, #11
    c232:	1d23      	adds	r3, r4, #4
    c234:	f020 0007 	bic.w	r0, r0, #7
    c238:	1ac3      	subs	r3, r0, r3
    c23a:	d01b      	beq.n	c274 <_malloc_r+0xb0>
    c23c:	425a      	negs	r2, r3
    c23e:	50e2      	str	r2, [r4, r3]
    c240:	bd70      	pop	{r4, r5, r6, pc}
    c242:	428c      	cmp	r4, r1
    c244:	bf0d      	iteet	eq
    c246:	6863      	ldreq	r3, [r4, #4]
    c248:	684b      	ldrne	r3, [r1, #4]
    c24a:	6063      	strne	r3, [r4, #4]
    c24c:	6013      	streq	r3, [r2, #0]
    c24e:	bf18      	it	ne
    c250:	460c      	movne	r4, r1
    c252:	e7e9      	b.n	c228 <_malloc_r+0x64>
    c254:	460c      	mov	r4, r1
    c256:	6849      	ldr	r1, [r1, #4]
    c258:	e7ca      	b.n	c1f0 <_malloc_r+0x2c>
    c25a:	1cc4      	adds	r4, r0, #3
    c25c:	f024 0403 	bic.w	r4, r4, #3
    c260:	42a0      	cmp	r0, r4
    c262:	d005      	beq.n	c270 <_malloc_r+0xac>
    c264:	1a21      	subs	r1, r4, r0
    c266:	4630      	mov	r0, r6
    c268:	f000 f886 	bl	c378 <_sbrk_r>
    c26c:	3001      	adds	r0, #1
    c26e:	d0cd      	beq.n	c20c <_malloc_r+0x48>
    c270:	6025      	str	r5, [r4, #0]
    c272:	e7d9      	b.n	c228 <_malloc_r+0x64>
    c274:	bd70      	pop	{r4, r5, r6, pc}
    c276:	bf00      	nop
    c278:	200128d0 	.word	0x200128d0
    c27c:	200128d4 	.word	0x200128d4

0000c280 <iprintf>:
    c280:	b40f      	push	{r0, r1, r2, r3}
    c282:	4b0a      	ldr	r3, [pc, #40]	; (c2ac <iprintf+0x2c>)
    c284:	b513      	push	{r0, r1, r4, lr}
    c286:	681c      	ldr	r4, [r3, #0]
    c288:	b124      	cbz	r4, c294 <iprintf+0x14>
    c28a:	69a3      	ldr	r3, [r4, #24]
    c28c:	b913      	cbnz	r3, c294 <iprintf+0x14>
    c28e:	4620      	mov	r0, r4
    c290:	f000 faea 	bl	c868 <__sinit>
    c294:	ab05      	add	r3, sp, #20
    c296:	9a04      	ldr	r2, [sp, #16]
    c298:	68a1      	ldr	r1, [r4, #8]
    c29a:	9301      	str	r3, [sp, #4]
    c29c:	4620      	mov	r0, r4
    c29e:	f000 fbfb 	bl	ca98 <_vfiprintf_r>
    c2a2:	b002      	add	sp, #8
    c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2a8:	b004      	add	sp, #16
    c2aa:	4770      	bx	lr
    c2ac:	20000050 	.word	0x20000050

0000c2b0 <_puts_r>:
    c2b0:	b570      	push	{r4, r5, r6, lr}
    c2b2:	460e      	mov	r6, r1
    c2b4:	4605      	mov	r5, r0
    c2b6:	b118      	cbz	r0, c2c0 <_puts_r+0x10>
    c2b8:	6983      	ldr	r3, [r0, #24]
    c2ba:	b90b      	cbnz	r3, c2c0 <_puts_r+0x10>
    c2bc:	f000 fad4 	bl	c868 <__sinit>
    c2c0:	69ab      	ldr	r3, [r5, #24]
    c2c2:	68ac      	ldr	r4, [r5, #8]
    c2c4:	b913      	cbnz	r3, c2cc <_puts_r+0x1c>
    c2c6:	4628      	mov	r0, r5
    c2c8:	f000 face 	bl	c868 <__sinit>
    c2cc:	4b23      	ldr	r3, [pc, #140]	; (c35c <_puts_r+0xac>)
    c2ce:	429c      	cmp	r4, r3
    c2d0:	d117      	bne.n	c302 <_puts_r+0x52>
    c2d2:	686c      	ldr	r4, [r5, #4]
    c2d4:	89a3      	ldrh	r3, [r4, #12]
    c2d6:	071b      	lsls	r3, r3, #28
    c2d8:	d51d      	bpl.n	c316 <_puts_r+0x66>
    c2da:	6923      	ldr	r3, [r4, #16]
    c2dc:	b1db      	cbz	r3, c316 <_puts_r+0x66>
    c2de:	3e01      	subs	r6, #1
    c2e0:	68a3      	ldr	r3, [r4, #8]
    c2e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    c2e6:	3b01      	subs	r3, #1
    c2e8:	60a3      	str	r3, [r4, #8]
    c2ea:	b9e9      	cbnz	r1, c328 <_puts_r+0x78>
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	da2e      	bge.n	c34e <_puts_r+0x9e>
    c2f0:	4622      	mov	r2, r4
    c2f2:	210a      	movs	r1, #10
    c2f4:	4628      	mov	r0, r5
    c2f6:	f000 f905 	bl	c504 <__swbuf_r>
    c2fa:	3001      	adds	r0, #1
    c2fc:	d011      	beq.n	c322 <_puts_r+0x72>
    c2fe:	200a      	movs	r0, #10
    c300:	bd70      	pop	{r4, r5, r6, pc}
    c302:	4b17      	ldr	r3, [pc, #92]	; (c360 <_puts_r+0xb0>)
    c304:	429c      	cmp	r4, r3
    c306:	d101      	bne.n	c30c <_puts_r+0x5c>
    c308:	68ac      	ldr	r4, [r5, #8]
    c30a:	e7e3      	b.n	c2d4 <_puts_r+0x24>
    c30c:	4b15      	ldr	r3, [pc, #84]	; (c364 <_puts_r+0xb4>)
    c30e:	429c      	cmp	r4, r3
    c310:	bf08      	it	eq
    c312:	68ec      	ldreq	r4, [r5, #12]
    c314:	e7de      	b.n	c2d4 <_puts_r+0x24>
    c316:	4621      	mov	r1, r4
    c318:	4628      	mov	r0, r5
    c31a:	f000 f945 	bl	c5a8 <__swsetup_r>
    c31e:	2800      	cmp	r0, #0
    c320:	d0dd      	beq.n	c2de <_puts_r+0x2e>
    c322:	f04f 30ff 	mov.w	r0, #4294967295
    c326:	bd70      	pop	{r4, r5, r6, pc}
    c328:	2b00      	cmp	r3, #0
    c32a:	da04      	bge.n	c336 <_puts_r+0x86>
    c32c:	69a2      	ldr	r2, [r4, #24]
    c32e:	4293      	cmp	r3, r2
    c330:	db06      	blt.n	c340 <_puts_r+0x90>
    c332:	290a      	cmp	r1, #10
    c334:	d004      	beq.n	c340 <_puts_r+0x90>
    c336:	6823      	ldr	r3, [r4, #0]
    c338:	1c5a      	adds	r2, r3, #1
    c33a:	6022      	str	r2, [r4, #0]
    c33c:	7019      	strb	r1, [r3, #0]
    c33e:	e7cf      	b.n	c2e0 <_puts_r+0x30>
    c340:	4622      	mov	r2, r4
    c342:	4628      	mov	r0, r5
    c344:	f000 f8de 	bl	c504 <__swbuf_r>
    c348:	3001      	adds	r0, #1
    c34a:	d1c9      	bne.n	c2e0 <_puts_r+0x30>
    c34c:	e7e9      	b.n	c322 <_puts_r+0x72>
    c34e:	6823      	ldr	r3, [r4, #0]
    c350:	200a      	movs	r0, #10
    c352:	1c5a      	adds	r2, r3, #1
    c354:	6022      	str	r2, [r4, #0]
    c356:	7018      	strb	r0, [r3, #0]
    c358:	bd70      	pop	{r4, r5, r6, pc}
    c35a:	bf00      	nop
    c35c:	0000d644 	.word	0x0000d644
    c360:	0000d664 	.word	0x0000d664
    c364:	0000d624 	.word	0x0000d624

0000c368 <puts>:
    c368:	4b02      	ldr	r3, [pc, #8]	; (c374 <puts+0xc>)
    c36a:	4601      	mov	r1, r0
    c36c:	6818      	ldr	r0, [r3, #0]
    c36e:	f7ff bf9f 	b.w	c2b0 <_puts_r>
    c372:	bf00      	nop
    c374:	20000050 	.word	0x20000050

0000c378 <_sbrk_r>:
    c378:	b538      	push	{r3, r4, r5, lr}
    c37a:	4c06      	ldr	r4, [pc, #24]	; (c394 <_sbrk_r+0x1c>)
    c37c:	2300      	movs	r3, #0
    c37e:	4605      	mov	r5, r0
    c380:	4608      	mov	r0, r1
    c382:	6023      	str	r3, [r4, #0]
    c384:	f7f5 f8ce 	bl	1524 <_sbrk>
    c388:	1c43      	adds	r3, r0, #1
    c38a:	d102      	bne.n	c392 <_sbrk_r+0x1a>
    c38c:	6823      	ldr	r3, [r4, #0]
    c38e:	b103      	cbz	r3, c392 <_sbrk_r+0x1a>
    c390:	602b      	str	r3, [r5, #0]
    c392:	bd38      	pop	{r3, r4, r5, pc}
    c394:	200161fc 	.word	0x200161fc

0000c398 <setbuf>:
    c398:	2900      	cmp	r1, #0
    c39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c39e:	bf0c      	ite	eq
    c3a0:	2202      	moveq	r2, #2
    c3a2:	2200      	movne	r2, #0
    c3a4:	f000 b800 	b.w	c3a8 <setvbuf>

0000c3a8 <setvbuf>:
    c3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c3ac:	461d      	mov	r5, r3
    c3ae:	4b51      	ldr	r3, [pc, #324]	; (c4f4 <setvbuf+0x14c>)
    c3b0:	681e      	ldr	r6, [r3, #0]
    c3b2:	4604      	mov	r4, r0
    c3b4:	460f      	mov	r7, r1
    c3b6:	4690      	mov	r8, r2
    c3b8:	b126      	cbz	r6, c3c4 <setvbuf+0x1c>
    c3ba:	69b3      	ldr	r3, [r6, #24]
    c3bc:	b913      	cbnz	r3, c3c4 <setvbuf+0x1c>
    c3be:	4630      	mov	r0, r6
    c3c0:	f000 fa52 	bl	c868 <__sinit>
    c3c4:	4b4c      	ldr	r3, [pc, #304]	; (c4f8 <setvbuf+0x150>)
    c3c6:	429c      	cmp	r4, r3
    c3c8:	d152      	bne.n	c470 <setvbuf+0xc8>
    c3ca:	6874      	ldr	r4, [r6, #4]
    c3cc:	f1b8 0f02 	cmp.w	r8, #2
    c3d0:	d006      	beq.n	c3e0 <setvbuf+0x38>
    c3d2:	f1b8 0f01 	cmp.w	r8, #1
    c3d6:	f200 8089 	bhi.w	c4ec <setvbuf+0x144>
    c3da:	2d00      	cmp	r5, #0
    c3dc:	f2c0 8086 	blt.w	c4ec <setvbuf+0x144>
    c3e0:	4621      	mov	r1, r4
    c3e2:	4630      	mov	r0, r6
    c3e4:	f000 f9d6 	bl	c794 <_fflush_r>
    c3e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c3ea:	b141      	cbz	r1, c3fe <setvbuf+0x56>
    c3ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c3f0:	4299      	cmp	r1, r3
    c3f2:	d002      	beq.n	c3fa <setvbuf+0x52>
    c3f4:	4630      	mov	r0, r6
    c3f6:	f7ff fe97 	bl	c128 <_free_r>
    c3fa:	2300      	movs	r3, #0
    c3fc:	6363      	str	r3, [r4, #52]	; 0x34
    c3fe:	2300      	movs	r3, #0
    c400:	61a3      	str	r3, [r4, #24]
    c402:	6063      	str	r3, [r4, #4]
    c404:	89a3      	ldrh	r3, [r4, #12]
    c406:	061b      	lsls	r3, r3, #24
    c408:	d503      	bpl.n	c412 <setvbuf+0x6a>
    c40a:	6921      	ldr	r1, [r4, #16]
    c40c:	4630      	mov	r0, r6
    c40e:	f7ff fe8b 	bl	c128 <_free_r>
    c412:	89a3      	ldrh	r3, [r4, #12]
    c414:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    c418:	f023 0303 	bic.w	r3, r3, #3
    c41c:	f1b8 0f02 	cmp.w	r8, #2
    c420:	81a3      	strh	r3, [r4, #12]
    c422:	d05d      	beq.n	c4e0 <setvbuf+0x138>
    c424:	ab01      	add	r3, sp, #4
    c426:	466a      	mov	r2, sp
    c428:	4621      	mov	r1, r4
    c42a:	4630      	mov	r0, r6
    c42c:	f000 faa6 	bl	c97c <__swhatbuf_r>
    c430:	89a3      	ldrh	r3, [r4, #12]
    c432:	4318      	orrs	r0, r3
    c434:	81a0      	strh	r0, [r4, #12]
    c436:	bb2d      	cbnz	r5, c484 <setvbuf+0xdc>
    c438:	9d00      	ldr	r5, [sp, #0]
    c43a:	4628      	mov	r0, r5
    c43c:	f7ff fe4a 	bl	c0d4 <malloc>
    c440:	4607      	mov	r7, r0
    c442:	2800      	cmp	r0, #0
    c444:	d14e      	bne.n	c4e4 <setvbuf+0x13c>
    c446:	f8dd 9000 	ldr.w	r9, [sp]
    c44a:	45a9      	cmp	r9, r5
    c44c:	d13c      	bne.n	c4c8 <setvbuf+0x120>
    c44e:	f04f 30ff 	mov.w	r0, #4294967295
    c452:	89a3      	ldrh	r3, [r4, #12]
    c454:	f043 0302 	orr.w	r3, r3, #2
    c458:	81a3      	strh	r3, [r4, #12]
    c45a:	2300      	movs	r3, #0
    c45c:	60a3      	str	r3, [r4, #8]
    c45e:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c462:	6023      	str	r3, [r4, #0]
    c464:	6123      	str	r3, [r4, #16]
    c466:	2301      	movs	r3, #1
    c468:	6163      	str	r3, [r4, #20]
    c46a:	b003      	add	sp, #12
    c46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c470:	4b22      	ldr	r3, [pc, #136]	; (c4fc <setvbuf+0x154>)
    c472:	429c      	cmp	r4, r3
    c474:	d101      	bne.n	c47a <setvbuf+0xd2>
    c476:	68b4      	ldr	r4, [r6, #8]
    c478:	e7a8      	b.n	c3cc <setvbuf+0x24>
    c47a:	4b21      	ldr	r3, [pc, #132]	; (c500 <setvbuf+0x158>)
    c47c:	429c      	cmp	r4, r3
    c47e:	bf08      	it	eq
    c480:	68f4      	ldreq	r4, [r6, #12]
    c482:	e7a3      	b.n	c3cc <setvbuf+0x24>
    c484:	2f00      	cmp	r7, #0
    c486:	d0d8      	beq.n	c43a <setvbuf+0x92>
    c488:	69b3      	ldr	r3, [r6, #24]
    c48a:	b913      	cbnz	r3, c492 <setvbuf+0xea>
    c48c:	4630      	mov	r0, r6
    c48e:	f000 f9eb 	bl	c868 <__sinit>
    c492:	f1b8 0f01 	cmp.w	r8, #1
    c496:	bf08      	it	eq
    c498:	89a3      	ldrheq	r3, [r4, #12]
    c49a:	6027      	str	r7, [r4, #0]
    c49c:	bf04      	itt	eq
    c49e:	f043 0301 	orreq.w	r3, r3, #1
    c4a2:	81a3      	strheq	r3, [r4, #12]
    c4a4:	89a3      	ldrh	r3, [r4, #12]
    c4a6:	6127      	str	r7, [r4, #16]
    c4a8:	f013 0008 	ands.w	r0, r3, #8
    c4ac:	6165      	str	r5, [r4, #20]
    c4ae:	d01b      	beq.n	c4e8 <setvbuf+0x140>
    c4b0:	f013 0001 	ands.w	r0, r3, #1
    c4b4:	bf18      	it	ne
    c4b6:	426d      	negne	r5, r5
    c4b8:	f04f 0300 	mov.w	r3, #0
    c4bc:	bf1d      	ittte	ne
    c4be:	60a3      	strne	r3, [r4, #8]
    c4c0:	61a5      	strne	r5, [r4, #24]
    c4c2:	4618      	movne	r0, r3
    c4c4:	60a5      	streq	r5, [r4, #8]
    c4c6:	e7d0      	b.n	c46a <setvbuf+0xc2>
    c4c8:	4648      	mov	r0, r9
    c4ca:	f7ff fe03 	bl	c0d4 <malloc>
    c4ce:	4607      	mov	r7, r0
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d0bc      	beq.n	c44e <setvbuf+0xa6>
    c4d4:	89a3      	ldrh	r3, [r4, #12]
    c4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c4da:	81a3      	strh	r3, [r4, #12]
    c4dc:	464d      	mov	r5, r9
    c4de:	e7d3      	b.n	c488 <setvbuf+0xe0>
    c4e0:	2000      	movs	r0, #0
    c4e2:	e7b6      	b.n	c452 <setvbuf+0xaa>
    c4e4:	46a9      	mov	r9, r5
    c4e6:	e7f5      	b.n	c4d4 <setvbuf+0x12c>
    c4e8:	60a0      	str	r0, [r4, #8]
    c4ea:	e7be      	b.n	c46a <setvbuf+0xc2>
    c4ec:	f04f 30ff 	mov.w	r0, #4294967295
    c4f0:	e7bb      	b.n	c46a <setvbuf+0xc2>
    c4f2:	bf00      	nop
    c4f4:	20000050 	.word	0x20000050
    c4f8:	0000d644 	.word	0x0000d644
    c4fc:	0000d664 	.word	0x0000d664
    c500:	0000d624 	.word	0x0000d624

0000c504 <__swbuf_r>:
    c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c506:	460e      	mov	r6, r1
    c508:	4614      	mov	r4, r2
    c50a:	4605      	mov	r5, r0
    c50c:	b118      	cbz	r0, c516 <__swbuf_r+0x12>
    c50e:	6983      	ldr	r3, [r0, #24]
    c510:	b90b      	cbnz	r3, c516 <__swbuf_r+0x12>
    c512:	f000 f9a9 	bl	c868 <__sinit>
    c516:	4b21      	ldr	r3, [pc, #132]	; (c59c <__swbuf_r+0x98>)
    c518:	429c      	cmp	r4, r3
    c51a:	d12a      	bne.n	c572 <__swbuf_r+0x6e>
    c51c:	686c      	ldr	r4, [r5, #4]
    c51e:	69a3      	ldr	r3, [r4, #24]
    c520:	60a3      	str	r3, [r4, #8]
    c522:	89a3      	ldrh	r3, [r4, #12]
    c524:	071a      	lsls	r2, r3, #28
    c526:	d52e      	bpl.n	c586 <__swbuf_r+0x82>
    c528:	6923      	ldr	r3, [r4, #16]
    c52a:	b363      	cbz	r3, c586 <__swbuf_r+0x82>
    c52c:	6923      	ldr	r3, [r4, #16]
    c52e:	6820      	ldr	r0, [r4, #0]
    c530:	1ac0      	subs	r0, r0, r3
    c532:	6963      	ldr	r3, [r4, #20]
    c534:	b2f6      	uxtb	r6, r6
    c536:	4298      	cmp	r0, r3
    c538:	4637      	mov	r7, r6
    c53a:	db04      	blt.n	c546 <__swbuf_r+0x42>
    c53c:	4621      	mov	r1, r4
    c53e:	4628      	mov	r0, r5
    c540:	f000 f928 	bl	c794 <_fflush_r>
    c544:	bb28      	cbnz	r0, c592 <__swbuf_r+0x8e>
    c546:	68a3      	ldr	r3, [r4, #8]
    c548:	3b01      	subs	r3, #1
    c54a:	60a3      	str	r3, [r4, #8]
    c54c:	6823      	ldr	r3, [r4, #0]
    c54e:	1c5a      	adds	r2, r3, #1
    c550:	6022      	str	r2, [r4, #0]
    c552:	701e      	strb	r6, [r3, #0]
    c554:	6963      	ldr	r3, [r4, #20]
    c556:	3001      	adds	r0, #1
    c558:	4298      	cmp	r0, r3
    c55a:	d004      	beq.n	c566 <__swbuf_r+0x62>
    c55c:	89a3      	ldrh	r3, [r4, #12]
    c55e:	07db      	lsls	r3, r3, #31
    c560:	d519      	bpl.n	c596 <__swbuf_r+0x92>
    c562:	2e0a      	cmp	r6, #10
    c564:	d117      	bne.n	c596 <__swbuf_r+0x92>
    c566:	4621      	mov	r1, r4
    c568:	4628      	mov	r0, r5
    c56a:	f000 f913 	bl	c794 <_fflush_r>
    c56e:	b190      	cbz	r0, c596 <__swbuf_r+0x92>
    c570:	e00f      	b.n	c592 <__swbuf_r+0x8e>
    c572:	4b0b      	ldr	r3, [pc, #44]	; (c5a0 <__swbuf_r+0x9c>)
    c574:	429c      	cmp	r4, r3
    c576:	d101      	bne.n	c57c <__swbuf_r+0x78>
    c578:	68ac      	ldr	r4, [r5, #8]
    c57a:	e7d0      	b.n	c51e <__swbuf_r+0x1a>
    c57c:	4b09      	ldr	r3, [pc, #36]	; (c5a4 <__swbuf_r+0xa0>)
    c57e:	429c      	cmp	r4, r3
    c580:	bf08      	it	eq
    c582:	68ec      	ldreq	r4, [r5, #12]
    c584:	e7cb      	b.n	c51e <__swbuf_r+0x1a>
    c586:	4621      	mov	r1, r4
    c588:	4628      	mov	r0, r5
    c58a:	f000 f80d 	bl	c5a8 <__swsetup_r>
    c58e:	2800      	cmp	r0, #0
    c590:	d0cc      	beq.n	c52c <__swbuf_r+0x28>
    c592:	f04f 37ff 	mov.w	r7, #4294967295
    c596:	4638      	mov	r0, r7
    c598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c59a:	bf00      	nop
    c59c:	0000d644 	.word	0x0000d644
    c5a0:	0000d664 	.word	0x0000d664
    c5a4:	0000d624 	.word	0x0000d624

0000c5a8 <__swsetup_r>:
    c5a8:	4b32      	ldr	r3, [pc, #200]	; (c674 <__swsetup_r+0xcc>)
    c5aa:	b570      	push	{r4, r5, r6, lr}
    c5ac:	681d      	ldr	r5, [r3, #0]
    c5ae:	4606      	mov	r6, r0
    c5b0:	460c      	mov	r4, r1
    c5b2:	b125      	cbz	r5, c5be <__swsetup_r+0x16>
    c5b4:	69ab      	ldr	r3, [r5, #24]
    c5b6:	b913      	cbnz	r3, c5be <__swsetup_r+0x16>
    c5b8:	4628      	mov	r0, r5
    c5ba:	f000 f955 	bl	c868 <__sinit>
    c5be:	4b2e      	ldr	r3, [pc, #184]	; (c678 <__swsetup_r+0xd0>)
    c5c0:	429c      	cmp	r4, r3
    c5c2:	d10f      	bne.n	c5e4 <__swsetup_r+0x3c>
    c5c4:	686c      	ldr	r4, [r5, #4]
    c5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c5ca:	b29a      	uxth	r2, r3
    c5cc:	0715      	lsls	r5, r2, #28
    c5ce:	d42c      	bmi.n	c62a <__swsetup_r+0x82>
    c5d0:	06d0      	lsls	r0, r2, #27
    c5d2:	d411      	bmi.n	c5f8 <__swsetup_r+0x50>
    c5d4:	2209      	movs	r2, #9
    c5d6:	6032      	str	r2, [r6, #0]
    c5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c5dc:	81a3      	strh	r3, [r4, #12]
    c5de:	f04f 30ff 	mov.w	r0, #4294967295
    c5e2:	bd70      	pop	{r4, r5, r6, pc}
    c5e4:	4b25      	ldr	r3, [pc, #148]	; (c67c <__swsetup_r+0xd4>)
    c5e6:	429c      	cmp	r4, r3
    c5e8:	d101      	bne.n	c5ee <__swsetup_r+0x46>
    c5ea:	68ac      	ldr	r4, [r5, #8]
    c5ec:	e7eb      	b.n	c5c6 <__swsetup_r+0x1e>
    c5ee:	4b24      	ldr	r3, [pc, #144]	; (c680 <__swsetup_r+0xd8>)
    c5f0:	429c      	cmp	r4, r3
    c5f2:	bf08      	it	eq
    c5f4:	68ec      	ldreq	r4, [r5, #12]
    c5f6:	e7e6      	b.n	c5c6 <__swsetup_r+0x1e>
    c5f8:	0751      	lsls	r1, r2, #29
    c5fa:	d512      	bpl.n	c622 <__swsetup_r+0x7a>
    c5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c5fe:	b141      	cbz	r1, c612 <__swsetup_r+0x6a>
    c600:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c604:	4299      	cmp	r1, r3
    c606:	d002      	beq.n	c60e <__swsetup_r+0x66>
    c608:	4630      	mov	r0, r6
    c60a:	f7ff fd8d 	bl	c128 <_free_r>
    c60e:	2300      	movs	r3, #0
    c610:	6363      	str	r3, [r4, #52]	; 0x34
    c612:	89a3      	ldrh	r3, [r4, #12]
    c614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c618:	81a3      	strh	r3, [r4, #12]
    c61a:	2300      	movs	r3, #0
    c61c:	6063      	str	r3, [r4, #4]
    c61e:	6923      	ldr	r3, [r4, #16]
    c620:	6023      	str	r3, [r4, #0]
    c622:	89a3      	ldrh	r3, [r4, #12]
    c624:	f043 0308 	orr.w	r3, r3, #8
    c628:	81a3      	strh	r3, [r4, #12]
    c62a:	6923      	ldr	r3, [r4, #16]
    c62c:	b94b      	cbnz	r3, c642 <__swsetup_r+0x9a>
    c62e:	89a3      	ldrh	r3, [r4, #12]
    c630:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c638:	d003      	beq.n	c642 <__swsetup_r+0x9a>
    c63a:	4621      	mov	r1, r4
    c63c:	4630      	mov	r0, r6
    c63e:	f000 f9c1 	bl	c9c4 <__smakebuf_r>
    c642:	89a2      	ldrh	r2, [r4, #12]
    c644:	f012 0301 	ands.w	r3, r2, #1
    c648:	d00c      	beq.n	c664 <__swsetup_r+0xbc>
    c64a:	2300      	movs	r3, #0
    c64c:	60a3      	str	r3, [r4, #8]
    c64e:	6963      	ldr	r3, [r4, #20]
    c650:	425b      	negs	r3, r3
    c652:	61a3      	str	r3, [r4, #24]
    c654:	6923      	ldr	r3, [r4, #16]
    c656:	b953      	cbnz	r3, c66e <__swsetup_r+0xc6>
    c658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c65c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    c660:	d1ba      	bne.n	c5d8 <__swsetup_r+0x30>
    c662:	bd70      	pop	{r4, r5, r6, pc}
    c664:	0792      	lsls	r2, r2, #30
    c666:	bf58      	it	pl
    c668:	6963      	ldrpl	r3, [r4, #20]
    c66a:	60a3      	str	r3, [r4, #8]
    c66c:	e7f2      	b.n	c654 <__swsetup_r+0xac>
    c66e:	2000      	movs	r0, #0
    c670:	e7f7      	b.n	c662 <__swsetup_r+0xba>
    c672:	bf00      	nop
    c674:	20000050 	.word	0x20000050
    c678:	0000d644 	.word	0x0000d644
    c67c:	0000d664 	.word	0x0000d664
    c680:	0000d624 	.word	0x0000d624

0000c684 <__sflush_r>:
    c684:	898a      	ldrh	r2, [r1, #12]
    c686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c68a:	4605      	mov	r5, r0
    c68c:	0710      	lsls	r0, r2, #28
    c68e:	460c      	mov	r4, r1
    c690:	d45a      	bmi.n	c748 <__sflush_r+0xc4>
    c692:	684b      	ldr	r3, [r1, #4]
    c694:	2b00      	cmp	r3, #0
    c696:	dc05      	bgt.n	c6a4 <__sflush_r+0x20>
    c698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c69a:	2b00      	cmp	r3, #0
    c69c:	dc02      	bgt.n	c6a4 <__sflush_r+0x20>
    c69e:	2000      	movs	r0, #0
    c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c6a6:	2e00      	cmp	r6, #0
    c6a8:	d0f9      	beq.n	c69e <__sflush_r+0x1a>
    c6aa:	2300      	movs	r3, #0
    c6ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    c6b0:	682f      	ldr	r7, [r5, #0]
    c6b2:	602b      	str	r3, [r5, #0]
    c6b4:	d033      	beq.n	c71e <__sflush_r+0x9a>
    c6b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c6b8:	89a3      	ldrh	r3, [r4, #12]
    c6ba:	075a      	lsls	r2, r3, #29
    c6bc:	d505      	bpl.n	c6ca <__sflush_r+0x46>
    c6be:	6863      	ldr	r3, [r4, #4]
    c6c0:	1ac0      	subs	r0, r0, r3
    c6c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c6c4:	b10b      	cbz	r3, c6ca <__sflush_r+0x46>
    c6c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c6c8:	1ac0      	subs	r0, r0, r3
    c6ca:	2300      	movs	r3, #0
    c6cc:	4602      	mov	r2, r0
    c6ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c6d0:	6a21      	ldr	r1, [r4, #32]
    c6d2:	4628      	mov	r0, r5
    c6d4:	47b0      	blx	r6
    c6d6:	1c43      	adds	r3, r0, #1
    c6d8:	89a3      	ldrh	r3, [r4, #12]
    c6da:	d106      	bne.n	c6ea <__sflush_r+0x66>
    c6dc:	6829      	ldr	r1, [r5, #0]
    c6de:	291d      	cmp	r1, #29
    c6e0:	d84b      	bhi.n	c77a <__sflush_r+0xf6>
    c6e2:	4a2b      	ldr	r2, [pc, #172]	; (c790 <__sflush_r+0x10c>)
    c6e4:	40ca      	lsrs	r2, r1
    c6e6:	07d6      	lsls	r6, r2, #31
    c6e8:	d547      	bpl.n	c77a <__sflush_r+0xf6>
    c6ea:	2200      	movs	r2, #0
    c6ec:	6062      	str	r2, [r4, #4]
    c6ee:	04d9      	lsls	r1, r3, #19
    c6f0:	6922      	ldr	r2, [r4, #16]
    c6f2:	6022      	str	r2, [r4, #0]
    c6f4:	d504      	bpl.n	c700 <__sflush_r+0x7c>
    c6f6:	1c42      	adds	r2, r0, #1
    c6f8:	d101      	bne.n	c6fe <__sflush_r+0x7a>
    c6fa:	682b      	ldr	r3, [r5, #0]
    c6fc:	b903      	cbnz	r3, c700 <__sflush_r+0x7c>
    c6fe:	6560      	str	r0, [r4, #84]	; 0x54
    c700:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c702:	602f      	str	r7, [r5, #0]
    c704:	2900      	cmp	r1, #0
    c706:	d0ca      	beq.n	c69e <__sflush_r+0x1a>
    c708:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c70c:	4299      	cmp	r1, r3
    c70e:	d002      	beq.n	c716 <__sflush_r+0x92>
    c710:	4628      	mov	r0, r5
    c712:	f7ff fd09 	bl	c128 <_free_r>
    c716:	2000      	movs	r0, #0
    c718:	6360      	str	r0, [r4, #52]	; 0x34
    c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c71e:	6a21      	ldr	r1, [r4, #32]
    c720:	2301      	movs	r3, #1
    c722:	4628      	mov	r0, r5
    c724:	47b0      	blx	r6
    c726:	1c41      	adds	r1, r0, #1
    c728:	d1c6      	bne.n	c6b8 <__sflush_r+0x34>
    c72a:	682b      	ldr	r3, [r5, #0]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d0c3      	beq.n	c6b8 <__sflush_r+0x34>
    c730:	2b1d      	cmp	r3, #29
    c732:	d001      	beq.n	c738 <__sflush_r+0xb4>
    c734:	2b16      	cmp	r3, #22
    c736:	d101      	bne.n	c73c <__sflush_r+0xb8>
    c738:	602f      	str	r7, [r5, #0]
    c73a:	e7b0      	b.n	c69e <__sflush_r+0x1a>
    c73c:	89a3      	ldrh	r3, [r4, #12]
    c73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c742:	81a3      	strh	r3, [r4, #12]
    c744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c748:	690f      	ldr	r7, [r1, #16]
    c74a:	2f00      	cmp	r7, #0
    c74c:	d0a7      	beq.n	c69e <__sflush_r+0x1a>
    c74e:	0793      	lsls	r3, r2, #30
    c750:	680e      	ldr	r6, [r1, #0]
    c752:	bf08      	it	eq
    c754:	694b      	ldreq	r3, [r1, #20]
    c756:	600f      	str	r7, [r1, #0]
    c758:	bf18      	it	ne
    c75a:	2300      	movne	r3, #0
    c75c:	eba6 0807 	sub.w	r8, r6, r7
    c760:	608b      	str	r3, [r1, #8]
    c762:	f1b8 0f00 	cmp.w	r8, #0
    c766:	dd9a      	ble.n	c69e <__sflush_r+0x1a>
    c768:	4643      	mov	r3, r8
    c76a:	463a      	mov	r2, r7
    c76c:	6a21      	ldr	r1, [r4, #32]
    c76e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c770:	4628      	mov	r0, r5
    c772:	47b0      	blx	r6
    c774:	2800      	cmp	r0, #0
    c776:	dc07      	bgt.n	c788 <__sflush_r+0x104>
    c778:	89a3      	ldrh	r3, [r4, #12]
    c77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c77e:	81a3      	strh	r3, [r4, #12]
    c780:	f04f 30ff 	mov.w	r0, #4294967295
    c784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c788:	4407      	add	r7, r0
    c78a:	eba8 0800 	sub.w	r8, r8, r0
    c78e:	e7e8      	b.n	c762 <__sflush_r+0xde>
    c790:	20400001 	.word	0x20400001

0000c794 <_fflush_r>:
    c794:	b538      	push	{r3, r4, r5, lr}
    c796:	690b      	ldr	r3, [r1, #16]
    c798:	4605      	mov	r5, r0
    c79a:	460c      	mov	r4, r1
    c79c:	b1db      	cbz	r3, c7d6 <_fflush_r+0x42>
    c79e:	b118      	cbz	r0, c7a8 <_fflush_r+0x14>
    c7a0:	6983      	ldr	r3, [r0, #24]
    c7a2:	b90b      	cbnz	r3, c7a8 <_fflush_r+0x14>
    c7a4:	f000 f860 	bl	c868 <__sinit>
    c7a8:	4b0c      	ldr	r3, [pc, #48]	; (c7dc <_fflush_r+0x48>)
    c7aa:	429c      	cmp	r4, r3
    c7ac:	d109      	bne.n	c7c2 <_fflush_r+0x2e>
    c7ae:	686c      	ldr	r4, [r5, #4]
    c7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c7b4:	b17b      	cbz	r3, c7d6 <_fflush_r+0x42>
    c7b6:	4621      	mov	r1, r4
    c7b8:	4628      	mov	r0, r5
    c7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c7be:	f7ff bf61 	b.w	c684 <__sflush_r>
    c7c2:	4b07      	ldr	r3, [pc, #28]	; (c7e0 <_fflush_r+0x4c>)
    c7c4:	429c      	cmp	r4, r3
    c7c6:	d101      	bne.n	c7cc <_fflush_r+0x38>
    c7c8:	68ac      	ldr	r4, [r5, #8]
    c7ca:	e7f1      	b.n	c7b0 <_fflush_r+0x1c>
    c7cc:	4b05      	ldr	r3, [pc, #20]	; (c7e4 <_fflush_r+0x50>)
    c7ce:	429c      	cmp	r4, r3
    c7d0:	bf08      	it	eq
    c7d2:	68ec      	ldreq	r4, [r5, #12]
    c7d4:	e7ec      	b.n	c7b0 <_fflush_r+0x1c>
    c7d6:	2000      	movs	r0, #0
    c7d8:	bd38      	pop	{r3, r4, r5, pc}
    c7da:	bf00      	nop
    c7dc:	0000d644 	.word	0x0000d644
    c7e0:	0000d664 	.word	0x0000d664
    c7e4:	0000d624 	.word	0x0000d624

0000c7e8 <_cleanup_r>:
    c7e8:	4901      	ldr	r1, [pc, #4]	; (c7f0 <_cleanup_r+0x8>)
    c7ea:	f000 b8a9 	b.w	c940 <_fwalk_reent>
    c7ee:	bf00      	nop
    c7f0:	0000c795 	.word	0x0000c795

0000c7f4 <std.isra.0>:
    c7f4:	2300      	movs	r3, #0
    c7f6:	b510      	push	{r4, lr}
    c7f8:	4604      	mov	r4, r0
    c7fa:	6003      	str	r3, [r0, #0]
    c7fc:	6043      	str	r3, [r0, #4]
    c7fe:	6083      	str	r3, [r0, #8]
    c800:	8181      	strh	r1, [r0, #12]
    c802:	6643      	str	r3, [r0, #100]	; 0x64
    c804:	81c2      	strh	r2, [r0, #14]
    c806:	6103      	str	r3, [r0, #16]
    c808:	6143      	str	r3, [r0, #20]
    c80a:	6183      	str	r3, [r0, #24]
    c80c:	4619      	mov	r1, r3
    c80e:	2208      	movs	r2, #8
    c810:	305c      	adds	r0, #92	; 0x5c
    c812:	f7ff fc81 	bl	c118 <memset>
    c816:	4b05      	ldr	r3, [pc, #20]	; (c82c <std.isra.0+0x38>)
    c818:	6263      	str	r3, [r4, #36]	; 0x24
    c81a:	4b05      	ldr	r3, [pc, #20]	; (c830 <std.isra.0+0x3c>)
    c81c:	62a3      	str	r3, [r4, #40]	; 0x28
    c81e:	4b05      	ldr	r3, [pc, #20]	; (c834 <std.isra.0+0x40>)
    c820:	62e3      	str	r3, [r4, #44]	; 0x2c
    c822:	4b05      	ldr	r3, [pc, #20]	; (c838 <std.isra.0+0x44>)
    c824:	6224      	str	r4, [r4, #32]
    c826:	6323      	str	r3, [r4, #48]	; 0x30
    c828:	bd10      	pop	{r4, pc}
    c82a:	bf00      	nop
    c82c:	0000cff1 	.word	0x0000cff1
    c830:	0000d013 	.word	0x0000d013
    c834:	0000d04b 	.word	0x0000d04b
    c838:	0000d06f 	.word	0x0000d06f

0000c83c <__sfmoreglue>:
    c83c:	b570      	push	{r4, r5, r6, lr}
    c83e:	1e4a      	subs	r2, r1, #1
    c840:	2568      	movs	r5, #104	; 0x68
    c842:	4355      	muls	r5, r2
    c844:	460e      	mov	r6, r1
    c846:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c84a:	f7ff fcbb 	bl	c1c4 <_malloc_r>
    c84e:	4604      	mov	r4, r0
    c850:	b140      	cbz	r0, c864 <__sfmoreglue+0x28>
    c852:	2100      	movs	r1, #0
    c854:	e880 0042 	stmia.w	r0, {r1, r6}
    c858:	300c      	adds	r0, #12
    c85a:	60a0      	str	r0, [r4, #8]
    c85c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c860:	f7ff fc5a 	bl	c118 <memset>
    c864:	4620      	mov	r0, r4
    c866:	bd70      	pop	{r4, r5, r6, pc}

0000c868 <__sinit>:
    c868:	6983      	ldr	r3, [r0, #24]
    c86a:	b510      	push	{r4, lr}
    c86c:	4604      	mov	r4, r0
    c86e:	bb33      	cbnz	r3, c8be <__sinit+0x56>
    c870:	6483      	str	r3, [r0, #72]	; 0x48
    c872:	64c3      	str	r3, [r0, #76]	; 0x4c
    c874:	6503      	str	r3, [r0, #80]	; 0x50
    c876:	4b12      	ldr	r3, [pc, #72]	; (c8c0 <__sinit+0x58>)
    c878:	4a12      	ldr	r2, [pc, #72]	; (c8c4 <__sinit+0x5c>)
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	6282      	str	r2, [r0, #40]	; 0x28
    c87e:	4298      	cmp	r0, r3
    c880:	bf04      	itt	eq
    c882:	2301      	moveq	r3, #1
    c884:	6183      	streq	r3, [r0, #24]
    c886:	f000 f81f 	bl	c8c8 <__sfp>
    c88a:	6060      	str	r0, [r4, #4]
    c88c:	4620      	mov	r0, r4
    c88e:	f000 f81b 	bl	c8c8 <__sfp>
    c892:	60a0      	str	r0, [r4, #8]
    c894:	4620      	mov	r0, r4
    c896:	f000 f817 	bl	c8c8 <__sfp>
    c89a:	2200      	movs	r2, #0
    c89c:	60e0      	str	r0, [r4, #12]
    c89e:	2104      	movs	r1, #4
    c8a0:	6860      	ldr	r0, [r4, #4]
    c8a2:	f7ff ffa7 	bl	c7f4 <std.isra.0>
    c8a6:	2201      	movs	r2, #1
    c8a8:	2109      	movs	r1, #9
    c8aa:	68a0      	ldr	r0, [r4, #8]
    c8ac:	f7ff ffa2 	bl	c7f4 <std.isra.0>
    c8b0:	2202      	movs	r2, #2
    c8b2:	2112      	movs	r1, #18
    c8b4:	68e0      	ldr	r0, [r4, #12]
    c8b6:	f7ff ff9d 	bl	c7f4 <std.isra.0>
    c8ba:	2301      	movs	r3, #1
    c8bc:	61a3      	str	r3, [r4, #24]
    c8be:	bd10      	pop	{r4, pc}
    c8c0:	0000d620 	.word	0x0000d620
    c8c4:	0000c7e9 	.word	0x0000c7e9

0000c8c8 <__sfp>:
    c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8ca:	4b1c      	ldr	r3, [pc, #112]	; (c93c <__sfp+0x74>)
    c8cc:	681e      	ldr	r6, [r3, #0]
    c8ce:	69b3      	ldr	r3, [r6, #24]
    c8d0:	4607      	mov	r7, r0
    c8d2:	b913      	cbnz	r3, c8da <__sfp+0x12>
    c8d4:	4630      	mov	r0, r6
    c8d6:	f7ff ffc7 	bl	c868 <__sinit>
    c8da:	3648      	adds	r6, #72	; 0x48
    c8dc:	68b4      	ldr	r4, [r6, #8]
    c8de:	6873      	ldr	r3, [r6, #4]
    c8e0:	3b01      	subs	r3, #1
    c8e2:	d503      	bpl.n	c8ec <__sfp+0x24>
    c8e4:	6833      	ldr	r3, [r6, #0]
    c8e6:	b133      	cbz	r3, c8f6 <__sfp+0x2e>
    c8e8:	6836      	ldr	r6, [r6, #0]
    c8ea:	e7f7      	b.n	c8dc <__sfp+0x14>
    c8ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c8f0:	b16d      	cbz	r5, c90e <__sfp+0x46>
    c8f2:	3468      	adds	r4, #104	; 0x68
    c8f4:	e7f4      	b.n	c8e0 <__sfp+0x18>
    c8f6:	2104      	movs	r1, #4
    c8f8:	4638      	mov	r0, r7
    c8fa:	f7ff ff9f 	bl	c83c <__sfmoreglue>
    c8fe:	6030      	str	r0, [r6, #0]
    c900:	2800      	cmp	r0, #0
    c902:	d1f1      	bne.n	c8e8 <__sfp+0x20>
    c904:	230c      	movs	r3, #12
    c906:	603b      	str	r3, [r7, #0]
    c908:	4604      	mov	r4, r0
    c90a:	4620      	mov	r0, r4
    c90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c912:	81e3      	strh	r3, [r4, #14]
    c914:	2301      	movs	r3, #1
    c916:	81a3      	strh	r3, [r4, #12]
    c918:	6665      	str	r5, [r4, #100]	; 0x64
    c91a:	6025      	str	r5, [r4, #0]
    c91c:	60a5      	str	r5, [r4, #8]
    c91e:	6065      	str	r5, [r4, #4]
    c920:	6125      	str	r5, [r4, #16]
    c922:	6165      	str	r5, [r4, #20]
    c924:	61a5      	str	r5, [r4, #24]
    c926:	2208      	movs	r2, #8
    c928:	4629      	mov	r1, r5
    c92a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c92e:	f7ff fbf3 	bl	c118 <memset>
    c932:	6365      	str	r5, [r4, #52]	; 0x34
    c934:	63a5      	str	r5, [r4, #56]	; 0x38
    c936:	64a5      	str	r5, [r4, #72]	; 0x48
    c938:	64e5      	str	r5, [r4, #76]	; 0x4c
    c93a:	e7e6      	b.n	c90a <__sfp+0x42>
    c93c:	0000d620 	.word	0x0000d620

0000c940 <_fwalk_reent>:
    c940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c944:	4680      	mov	r8, r0
    c946:	4689      	mov	r9, r1
    c948:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c94c:	2600      	movs	r6, #0
    c94e:	b914      	cbnz	r4, c956 <_fwalk_reent+0x16>
    c950:	4630      	mov	r0, r6
    c952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c956:	68a5      	ldr	r5, [r4, #8]
    c958:	6867      	ldr	r7, [r4, #4]
    c95a:	3f01      	subs	r7, #1
    c95c:	d501      	bpl.n	c962 <_fwalk_reent+0x22>
    c95e:	6824      	ldr	r4, [r4, #0]
    c960:	e7f5      	b.n	c94e <_fwalk_reent+0xe>
    c962:	89ab      	ldrh	r3, [r5, #12]
    c964:	2b01      	cmp	r3, #1
    c966:	d907      	bls.n	c978 <_fwalk_reent+0x38>
    c968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c96c:	3301      	adds	r3, #1
    c96e:	d003      	beq.n	c978 <_fwalk_reent+0x38>
    c970:	4629      	mov	r1, r5
    c972:	4640      	mov	r0, r8
    c974:	47c8      	blx	r9
    c976:	4306      	orrs	r6, r0
    c978:	3568      	adds	r5, #104	; 0x68
    c97a:	e7ee      	b.n	c95a <_fwalk_reent+0x1a>

0000c97c <__swhatbuf_r>:
    c97c:	b570      	push	{r4, r5, r6, lr}
    c97e:	460e      	mov	r6, r1
    c980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c984:	2900      	cmp	r1, #0
    c986:	b090      	sub	sp, #64	; 0x40
    c988:	4614      	mov	r4, r2
    c98a:	461d      	mov	r5, r3
    c98c:	da07      	bge.n	c99e <__swhatbuf_r+0x22>
    c98e:	2300      	movs	r3, #0
    c990:	602b      	str	r3, [r5, #0]
    c992:	89b3      	ldrh	r3, [r6, #12]
    c994:	061a      	lsls	r2, r3, #24
    c996:	d410      	bmi.n	c9ba <__swhatbuf_r+0x3e>
    c998:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c99c:	e00e      	b.n	c9bc <__swhatbuf_r+0x40>
    c99e:	aa01      	add	r2, sp, #4
    c9a0:	f000 fb8c 	bl	d0bc <_fstat_r>
    c9a4:	2800      	cmp	r0, #0
    c9a6:	dbf2      	blt.n	c98e <__swhatbuf_r+0x12>
    c9a8:	9a02      	ldr	r2, [sp, #8]
    c9aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    c9ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    c9b2:	425a      	negs	r2, r3
    c9b4:	415a      	adcs	r2, r3
    c9b6:	602a      	str	r2, [r5, #0]
    c9b8:	e7ee      	b.n	c998 <__swhatbuf_r+0x1c>
    c9ba:	2340      	movs	r3, #64	; 0x40
    c9bc:	2000      	movs	r0, #0
    c9be:	6023      	str	r3, [r4, #0]
    c9c0:	b010      	add	sp, #64	; 0x40
    c9c2:	bd70      	pop	{r4, r5, r6, pc}

0000c9c4 <__smakebuf_r>:
    c9c4:	898b      	ldrh	r3, [r1, #12]
    c9c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c9c8:	079d      	lsls	r5, r3, #30
    c9ca:	4606      	mov	r6, r0
    c9cc:	460c      	mov	r4, r1
    c9ce:	d507      	bpl.n	c9e0 <__smakebuf_r+0x1c>
    c9d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c9d4:	6023      	str	r3, [r4, #0]
    c9d6:	6123      	str	r3, [r4, #16]
    c9d8:	2301      	movs	r3, #1
    c9da:	6163      	str	r3, [r4, #20]
    c9dc:	b002      	add	sp, #8
    c9de:	bd70      	pop	{r4, r5, r6, pc}
    c9e0:	ab01      	add	r3, sp, #4
    c9e2:	466a      	mov	r2, sp
    c9e4:	f7ff ffca 	bl	c97c <__swhatbuf_r>
    c9e8:	9900      	ldr	r1, [sp, #0]
    c9ea:	4605      	mov	r5, r0
    c9ec:	4630      	mov	r0, r6
    c9ee:	f7ff fbe9 	bl	c1c4 <_malloc_r>
    c9f2:	b948      	cbnz	r0, ca08 <__smakebuf_r+0x44>
    c9f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c9f8:	059a      	lsls	r2, r3, #22
    c9fa:	d4ef      	bmi.n	c9dc <__smakebuf_r+0x18>
    c9fc:	f023 0303 	bic.w	r3, r3, #3
    ca00:	f043 0302 	orr.w	r3, r3, #2
    ca04:	81a3      	strh	r3, [r4, #12]
    ca06:	e7e3      	b.n	c9d0 <__smakebuf_r+0xc>
    ca08:	4b0d      	ldr	r3, [pc, #52]	; (ca40 <__smakebuf_r+0x7c>)
    ca0a:	62b3      	str	r3, [r6, #40]	; 0x28
    ca0c:	89a3      	ldrh	r3, [r4, #12]
    ca0e:	6020      	str	r0, [r4, #0]
    ca10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ca14:	81a3      	strh	r3, [r4, #12]
    ca16:	9b00      	ldr	r3, [sp, #0]
    ca18:	6163      	str	r3, [r4, #20]
    ca1a:	9b01      	ldr	r3, [sp, #4]
    ca1c:	6120      	str	r0, [r4, #16]
    ca1e:	b15b      	cbz	r3, ca38 <__smakebuf_r+0x74>
    ca20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ca24:	4630      	mov	r0, r6
    ca26:	f000 fb5b 	bl	d0e0 <_isatty_r>
    ca2a:	b128      	cbz	r0, ca38 <__smakebuf_r+0x74>
    ca2c:	89a3      	ldrh	r3, [r4, #12]
    ca2e:	f023 0303 	bic.w	r3, r3, #3
    ca32:	f043 0301 	orr.w	r3, r3, #1
    ca36:	81a3      	strh	r3, [r4, #12]
    ca38:	89a3      	ldrh	r3, [r4, #12]
    ca3a:	431d      	orrs	r5, r3
    ca3c:	81a5      	strh	r5, [r4, #12]
    ca3e:	e7cd      	b.n	c9dc <__smakebuf_r+0x18>
    ca40:	0000c7e9 	.word	0x0000c7e9

0000ca44 <__malloc_lock>:
    ca44:	4770      	bx	lr

0000ca46 <__malloc_unlock>:
    ca46:	4770      	bx	lr

0000ca48 <__sfputc_r>:
    ca48:	6893      	ldr	r3, [r2, #8]
    ca4a:	3b01      	subs	r3, #1
    ca4c:	2b00      	cmp	r3, #0
    ca4e:	b410      	push	{r4}
    ca50:	6093      	str	r3, [r2, #8]
    ca52:	da08      	bge.n	ca66 <__sfputc_r+0x1e>
    ca54:	6994      	ldr	r4, [r2, #24]
    ca56:	42a3      	cmp	r3, r4
    ca58:	db02      	blt.n	ca60 <__sfputc_r+0x18>
    ca5a:	b2cb      	uxtb	r3, r1
    ca5c:	2b0a      	cmp	r3, #10
    ca5e:	d102      	bne.n	ca66 <__sfputc_r+0x1e>
    ca60:	bc10      	pop	{r4}
    ca62:	f7ff bd4f 	b.w	c504 <__swbuf_r>
    ca66:	6813      	ldr	r3, [r2, #0]
    ca68:	1c58      	adds	r0, r3, #1
    ca6a:	6010      	str	r0, [r2, #0]
    ca6c:	7019      	strb	r1, [r3, #0]
    ca6e:	b2c8      	uxtb	r0, r1
    ca70:	bc10      	pop	{r4}
    ca72:	4770      	bx	lr

0000ca74 <__sfputs_r>:
    ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca76:	4606      	mov	r6, r0
    ca78:	460f      	mov	r7, r1
    ca7a:	4614      	mov	r4, r2
    ca7c:	18d5      	adds	r5, r2, r3
    ca7e:	42ac      	cmp	r4, r5
    ca80:	d101      	bne.n	ca86 <__sfputs_r+0x12>
    ca82:	2000      	movs	r0, #0
    ca84:	e007      	b.n	ca96 <__sfputs_r+0x22>
    ca86:	463a      	mov	r2, r7
    ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
    ca8c:	4630      	mov	r0, r6
    ca8e:	f7ff ffdb 	bl	ca48 <__sfputc_r>
    ca92:	1c43      	adds	r3, r0, #1
    ca94:	d1f3      	bne.n	ca7e <__sfputs_r+0xa>
    ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ca98 <_vfiprintf_r>:
    ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca9c:	b09d      	sub	sp, #116	; 0x74
    ca9e:	460c      	mov	r4, r1
    caa0:	4617      	mov	r7, r2
    caa2:	9303      	str	r3, [sp, #12]
    caa4:	4606      	mov	r6, r0
    caa6:	b118      	cbz	r0, cab0 <_vfiprintf_r+0x18>
    caa8:	6983      	ldr	r3, [r0, #24]
    caaa:	b90b      	cbnz	r3, cab0 <_vfiprintf_r+0x18>
    caac:	f7ff fedc 	bl	c868 <__sinit>
    cab0:	4b7c      	ldr	r3, [pc, #496]	; (cca4 <_vfiprintf_r+0x20c>)
    cab2:	429c      	cmp	r4, r3
    cab4:	d157      	bne.n	cb66 <_vfiprintf_r+0xce>
    cab6:	6874      	ldr	r4, [r6, #4]
    cab8:	89a3      	ldrh	r3, [r4, #12]
    caba:	0718      	lsls	r0, r3, #28
    cabc:	d55d      	bpl.n	cb7a <_vfiprintf_r+0xe2>
    cabe:	6923      	ldr	r3, [r4, #16]
    cac0:	2b00      	cmp	r3, #0
    cac2:	d05a      	beq.n	cb7a <_vfiprintf_r+0xe2>
    cac4:	2300      	movs	r3, #0
    cac6:	9309      	str	r3, [sp, #36]	; 0x24
    cac8:	2320      	movs	r3, #32
    caca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cace:	2330      	movs	r3, #48	; 0x30
    cad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cad4:	f04f 0b01 	mov.w	fp, #1
    cad8:	46b8      	mov	r8, r7
    cada:	4645      	mov	r5, r8
    cadc:	f815 3b01 	ldrb.w	r3, [r5], #1
    cae0:	2b00      	cmp	r3, #0
    cae2:	d155      	bne.n	cb90 <_vfiprintf_r+0xf8>
    cae4:	ebb8 0a07 	subs.w	sl, r8, r7
    cae8:	d00b      	beq.n	cb02 <_vfiprintf_r+0x6a>
    caea:	4653      	mov	r3, sl
    caec:	463a      	mov	r2, r7
    caee:	4621      	mov	r1, r4
    caf0:	4630      	mov	r0, r6
    caf2:	f7ff ffbf 	bl	ca74 <__sfputs_r>
    caf6:	3001      	adds	r0, #1
    caf8:	f000 80c4 	beq.w	cc84 <_vfiprintf_r+0x1ec>
    cafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cafe:	4453      	add	r3, sl
    cb00:	9309      	str	r3, [sp, #36]	; 0x24
    cb02:	f898 3000 	ldrb.w	r3, [r8]
    cb06:	2b00      	cmp	r3, #0
    cb08:	f000 80bc 	beq.w	cc84 <_vfiprintf_r+0x1ec>
    cb0c:	2300      	movs	r3, #0
    cb0e:	f04f 32ff 	mov.w	r2, #4294967295
    cb12:	9304      	str	r3, [sp, #16]
    cb14:	9307      	str	r3, [sp, #28]
    cb16:	9205      	str	r2, [sp, #20]
    cb18:	9306      	str	r3, [sp, #24]
    cb1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cb1e:	931a      	str	r3, [sp, #104]	; 0x68
    cb20:	2205      	movs	r2, #5
    cb22:	7829      	ldrb	r1, [r5, #0]
    cb24:	4860      	ldr	r0, [pc, #384]	; (cca8 <_vfiprintf_r+0x210>)
    cb26:	f000 fb03 	bl	d130 <memchr>
    cb2a:	f105 0801 	add.w	r8, r5, #1
    cb2e:	9b04      	ldr	r3, [sp, #16]
    cb30:	2800      	cmp	r0, #0
    cb32:	d131      	bne.n	cb98 <_vfiprintf_r+0x100>
    cb34:	06d9      	lsls	r1, r3, #27
    cb36:	bf44      	itt	mi
    cb38:	2220      	movmi	r2, #32
    cb3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cb3e:	071a      	lsls	r2, r3, #28
    cb40:	bf44      	itt	mi
    cb42:	222b      	movmi	r2, #43	; 0x2b
    cb44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cb48:	782a      	ldrb	r2, [r5, #0]
    cb4a:	2a2a      	cmp	r2, #42	; 0x2a
    cb4c:	d02c      	beq.n	cba8 <_vfiprintf_r+0x110>
    cb4e:	9a07      	ldr	r2, [sp, #28]
    cb50:	2100      	movs	r1, #0
    cb52:	200a      	movs	r0, #10
    cb54:	46a8      	mov	r8, r5
    cb56:	3501      	adds	r5, #1
    cb58:	f898 3000 	ldrb.w	r3, [r8]
    cb5c:	3b30      	subs	r3, #48	; 0x30
    cb5e:	2b09      	cmp	r3, #9
    cb60:	d96d      	bls.n	cc3e <_vfiprintf_r+0x1a6>
    cb62:	b371      	cbz	r1, cbc2 <_vfiprintf_r+0x12a>
    cb64:	e026      	b.n	cbb4 <_vfiprintf_r+0x11c>
    cb66:	4b51      	ldr	r3, [pc, #324]	; (ccac <_vfiprintf_r+0x214>)
    cb68:	429c      	cmp	r4, r3
    cb6a:	d101      	bne.n	cb70 <_vfiprintf_r+0xd8>
    cb6c:	68b4      	ldr	r4, [r6, #8]
    cb6e:	e7a3      	b.n	cab8 <_vfiprintf_r+0x20>
    cb70:	4b4f      	ldr	r3, [pc, #316]	; (ccb0 <_vfiprintf_r+0x218>)
    cb72:	429c      	cmp	r4, r3
    cb74:	bf08      	it	eq
    cb76:	68f4      	ldreq	r4, [r6, #12]
    cb78:	e79e      	b.n	cab8 <_vfiprintf_r+0x20>
    cb7a:	4621      	mov	r1, r4
    cb7c:	4630      	mov	r0, r6
    cb7e:	f7ff fd13 	bl	c5a8 <__swsetup_r>
    cb82:	2800      	cmp	r0, #0
    cb84:	d09e      	beq.n	cac4 <_vfiprintf_r+0x2c>
    cb86:	f04f 30ff 	mov.w	r0, #4294967295
    cb8a:	b01d      	add	sp, #116	; 0x74
    cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb90:	2b25      	cmp	r3, #37	; 0x25
    cb92:	d0a7      	beq.n	cae4 <_vfiprintf_r+0x4c>
    cb94:	46a8      	mov	r8, r5
    cb96:	e7a0      	b.n	cada <_vfiprintf_r+0x42>
    cb98:	4a43      	ldr	r2, [pc, #268]	; (cca8 <_vfiprintf_r+0x210>)
    cb9a:	1a80      	subs	r0, r0, r2
    cb9c:	fa0b f000 	lsl.w	r0, fp, r0
    cba0:	4318      	orrs	r0, r3
    cba2:	9004      	str	r0, [sp, #16]
    cba4:	4645      	mov	r5, r8
    cba6:	e7bb      	b.n	cb20 <_vfiprintf_r+0x88>
    cba8:	9a03      	ldr	r2, [sp, #12]
    cbaa:	1d11      	adds	r1, r2, #4
    cbac:	6812      	ldr	r2, [r2, #0]
    cbae:	9103      	str	r1, [sp, #12]
    cbb0:	2a00      	cmp	r2, #0
    cbb2:	db01      	blt.n	cbb8 <_vfiprintf_r+0x120>
    cbb4:	9207      	str	r2, [sp, #28]
    cbb6:	e004      	b.n	cbc2 <_vfiprintf_r+0x12a>
    cbb8:	4252      	negs	r2, r2
    cbba:	f043 0302 	orr.w	r3, r3, #2
    cbbe:	9207      	str	r2, [sp, #28]
    cbc0:	9304      	str	r3, [sp, #16]
    cbc2:	f898 3000 	ldrb.w	r3, [r8]
    cbc6:	2b2e      	cmp	r3, #46	; 0x2e
    cbc8:	d110      	bne.n	cbec <_vfiprintf_r+0x154>
    cbca:	f898 3001 	ldrb.w	r3, [r8, #1]
    cbce:	2b2a      	cmp	r3, #42	; 0x2a
    cbd0:	f108 0101 	add.w	r1, r8, #1
    cbd4:	d137      	bne.n	cc46 <_vfiprintf_r+0x1ae>
    cbd6:	9b03      	ldr	r3, [sp, #12]
    cbd8:	1d1a      	adds	r2, r3, #4
    cbda:	681b      	ldr	r3, [r3, #0]
    cbdc:	9203      	str	r2, [sp, #12]
    cbde:	2b00      	cmp	r3, #0
    cbe0:	bfb8      	it	lt
    cbe2:	f04f 33ff 	movlt.w	r3, #4294967295
    cbe6:	f108 0802 	add.w	r8, r8, #2
    cbea:	9305      	str	r3, [sp, #20]
    cbec:	4d31      	ldr	r5, [pc, #196]	; (ccb4 <_vfiprintf_r+0x21c>)
    cbee:	f898 1000 	ldrb.w	r1, [r8]
    cbf2:	2203      	movs	r2, #3
    cbf4:	4628      	mov	r0, r5
    cbf6:	f000 fa9b 	bl	d130 <memchr>
    cbfa:	b140      	cbz	r0, cc0e <_vfiprintf_r+0x176>
    cbfc:	2340      	movs	r3, #64	; 0x40
    cbfe:	1b40      	subs	r0, r0, r5
    cc00:	fa03 f000 	lsl.w	r0, r3, r0
    cc04:	9b04      	ldr	r3, [sp, #16]
    cc06:	4303      	orrs	r3, r0
    cc08:	9304      	str	r3, [sp, #16]
    cc0a:	f108 0801 	add.w	r8, r8, #1
    cc0e:	f898 1000 	ldrb.w	r1, [r8]
    cc12:	4829      	ldr	r0, [pc, #164]	; (ccb8 <_vfiprintf_r+0x220>)
    cc14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cc18:	2206      	movs	r2, #6
    cc1a:	f108 0701 	add.w	r7, r8, #1
    cc1e:	f000 fa87 	bl	d130 <memchr>
    cc22:	2800      	cmp	r0, #0
    cc24:	d034      	beq.n	cc90 <_vfiprintf_r+0x1f8>
    cc26:	4b25      	ldr	r3, [pc, #148]	; (ccbc <_vfiprintf_r+0x224>)
    cc28:	bb03      	cbnz	r3, cc6c <_vfiprintf_r+0x1d4>
    cc2a:	9b03      	ldr	r3, [sp, #12]
    cc2c:	3307      	adds	r3, #7
    cc2e:	f023 0307 	bic.w	r3, r3, #7
    cc32:	3308      	adds	r3, #8
    cc34:	9303      	str	r3, [sp, #12]
    cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc38:	444b      	add	r3, r9
    cc3a:	9309      	str	r3, [sp, #36]	; 0x24
    cc3c:	e74c      	b.n	cad8 <_vfiprintf_r+0x40>
    cc3e:	fb00 3202 	mla	r2, r0, r2, r3
    cc42:	2101      	movs	r1, #1
    cc44:	e786      	b.n	cb54 <_vfiprintf_r+0xbc>
    cc46:	2300      	movs	r3, #0
    cc48:	9305      	str	r3, [sp, #20]
    cc4a:	4618      	mov	r0, r3
    cc4c:	250a      	movs	r5, #10
    cc4e:	4688      	mov	r8, r1
    cc50:	3101      	adds	r1, #1
    cc52:	f898 2000 	ldrb.w	r2, [r8]
    cc56:	3a30      	subs	r2, #48	; 0x30
    cc58:	2a09      	cmp	r2, #9
    cc5a:	d903      	bls.n	cc64 <_vfiprintf_r+0x1cc>
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d0c5      	beq.n	cbec <_vfiprintf_r+0x154>
    cc60:	9005      	str	r0, [sp, #20]
    cc62:	e7c3      	b.n	cbec <_vfiprintf_r+0x154>
    cc64:	fb05 2000 	mla	r0, r5, r0, r2
    cc68:	2301      	movs	r3, #1
    cc6a:	e7f0      	b.n	cc4e <_vfiprintf_r+0x1b6>
    cc6c:	ab03      	add	r3, sp, #12
    cc6e:	9300      	str	r3, [sp, #0]
    cc70:	4622      	mov	r2, r4
    cc72:	4b13      	ldr	r3, [pc, #76]	; (ccc0 <_vfiprintf_r+0x228>)
    cc74:	a904      	add	r1, sp, #16
    cc76:	4630      	mov	r0, r6
    cc78:	f3af 8000 	nop.w
    cc7c:	f1b0 3fff 	cmp.w	r0, #4294967295
    cc80:	4681      	mov	r9, r0
    cc82:	d1d8      	bne.n	cc36 <_vfiprintf_r+0x19e>
    cc84:	89a3      	ldrh	r3, [r4, #12]
    cc86:	065b      	lsls	r3, r3, #25
    cc88:	f53f af7d 	bmi.w	cb86 <_vfiprintf_r+0xee>
    cc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc8e:	e77c      	b.n	cb8a <_vfiprintf_r+0xf2>
    cc90:	ab03      	add	r3, sp, #12
    cc92:	9300      	str	r3, [sp, #0]
    cc94:	4622      	mov	r2, r4
    cc96:	4b0a      	ldr	r3, [pc, #40]	; (ccc0 <_vfiprintf_r+0x228>)
    cc98:	a904      	add	r1, sp, #16
    cc9a:	4630      	mov	r0, r6
    cc9c:	f000 f888 	bl	cdb0 <_printf_i>
    cca0:	e7ec      	b.n	cc7c <_vfiprintf_r+0x1e4>
    cca2:	bf00      	nop
    cca4:	0000d644 	.word	0x0000d644
    cca8:	0000d684 	.word	0x0000d684
    ccac:	0000d664 	.word	0x0000d664
    ccb0:	0000d624 	.word	0x0000d624
    ccb4:	0000d68a 	.word	0x0000d68a
    ccb8:	0000d68e 	.word	0x0000d68e
    ccbc:	00000000 	.word	0x00000000
    ccc0:	0000ca75 	.word	0x0000ca75

0000ccc4 <_printf_common>:
    ccc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccc8:	4691      	mov	r9, r2
    ccca:	461f      	mov	r7, r3
    cccc:	688a      	ldr	r2, [r1, #8]
    ccce:	690b      	ldr	r3, [r1, #16]
    ccd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ccd4:	4293      	cmp	r3, r2
    ccd6:	bfb8      	it	lt
    ccd8:	4613      	movlt	r3, r2
    ccda:	f8c9 3000 	str.w	r3, [r9]
    ccde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    cce2:	4606      	mov	r6, r0
    cce4:	460c      	mov	r4, r1
    cce6:	b112      	cbz	r2, ccee <_printf_common+0x2a>
    cce8:	3301      	adds	r3, #1
    ccea:	f8c9 3000 	str.w	r3, [r9]
    ccee:	6823      	ldr	r3, [r4, #0]
    ccf0:	0699      	lsls	r1, r3, #26
    ccf2:	bf42      	ittt	mi
    ccf4:	f8d9 3000 	ldrmi.w	r3, [r9]
    ccf8:	3302      	addmi	r3, #2
    ccfa:	f8c9 3000 	strmi.w	r3, [r9]
    ccfe:	6825      	ldr	r5, [r4, #0]
    cd00:	f015 0506 	ands.w	r5, r5, #6
    cd04:	d107      	bne.n	cd16 <_printf_common+0x52>
    cd06:	f104 0a19 	add.w	sl, r4, #25
    cd0a:	68e3      	ldr	r3, [r4, #12]
    cd0c:	f8d9 2000 	ldr.w	r2, [r9]
    cd10:	1a9b      	subs	r3, r3, r2
    cd12:	429d      	cmp	r5, r3
    cd14:	db29      	blt.n	cd6a <_printf_common+0xa6>
    cd16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    cd1a:	6822      	ldr	r2, [r4, #0]
    cd1c:	3300      	adds	r3, #0
    cd1e:	bf18      	it	ne
    cd20:	2301      	movne	r3, #1
    cd22:	0692      	lsls	r2, r2, #26
    cd24:	d42e      	bmi.n	cd84 <_printf_common+0xc0>
    cd26:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cd2a:	4639      	mov	r1, r7
    cd2c:	4630      	mov	r0, r6
    cd2e:	47c0      	blx	r8
    cd30:	3001      	adds	r0, #1
    cd32:	d021      	beq.n	cd78 <_printf_common+0xb4>
    cd34:	6823      	ldr	r3, [r4, #0]
    cd36:	68e5      	ldr	r5, [r4, #12]
    cd38:	f8d9 2000 	ldr.w	r2, [r9]
    cd3c:	f003 0306 	and.w	r3, r3, #6
    cd40:	2b04      	cmp	r3, #4
    cd42:	bf08      	it	eq
    cd44:	1aad      	subeq	r5, r5, r2
    cd46:	68a3      	ldr	r3, [r4, #8]
    cd48:	6922      	ldr	r2, [r4, #16]
    cd4a:	bf0c      	ite	eq
    cd4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    cd50:	2500      	movne	r5, #0
    cd52:	4293      	cmp	r3, r2
    cd54:	bfc4      	itt	gt
    cd56:	1a9b      	subgt	r3, r3, r2
    cd58:	18ed      	addgt	r5, r5, r3
    cd5a:	f04f 0900 	mov.w	r9, #0
    cd5e:	341a      	adds	r4, #26
    cd60:	454d      	cmp	r5, r9
    cd62:	d11b      	bne.n	cd9c <_printf_common+0xd8>
    cd64:	2000      	movs	r0, #0
    cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd6a:	2301      	movs	r3, #1
    cd6c:	4652      	mov	r2, sl
    cd6e:	4639      	mov	r1, r7
    cd70:	4630      	mov	r0, r6
    cd72:	47c0      	blx	r8
    cd74:	3001      	adds	r0, #1
    cd76:	d103      	bne.n	cd80 <_printf_common+0xbc>
    cd78:	f04f 30ff 	mov.w	r0, #4294967295
    cd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd80:	3501      	adds	r5, #1
    cd82:	e7c2      	b.n	cd0a <_printf_common+0x46>
    cd84:	18e1      	adds	r1, r4, r3
    cd86:	1c5a      	adds	r2, r3, #1
    cd88:	2030      	movs	r0, #48	; 0x30
    cd8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    cd8e:	4422      	add	r2, r4
    cd90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    cd94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    cd98:	3302      	adds	r3, #2
    cd9a:	e7c4      	b.n	cd26 <_printf_common+0x62>
    cd9c:	2301      	movs	r3, #1
    cd9e:	4622      	mov	r2, r4
    cda0:	4639      	mov	r1, r7
    cda2:	4630      	mov	r0, r6
    cda4:	47c0      	blx	r8
    cda6:	3001      	adds	r0, #1
    cda8:	d0e6      	beq.n	cd78 <_printf_common+0xb4>
    cdaa:	f109 0901 	add.w	r9, r9, #1
    cdae:	e7d7      	b.n	cd60 <_printf_common+0x9c>

0000cdb0 <_printf_i>:
    cdb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cdb4:	4617      	mov	r7, r2
    cdb6:	7e0a      	ldrb	r2, [r1, #24]
    cdb8:	b085      	sub	sp, #20
    cdba:	2a6e      	cmp	r2, #110	; 0x6e
    cdbc:	4698      	mov	r8, r3
    cdbe:	4606      	mov	r6, r0
    cdc0:	460c      	mov	r4, r1
    cdc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cdc4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    cdc8:	f000 80bc 	beq.w	cf44 <_printf_i+0x194>
    cdcc:	d81a      	bhi.n	ce04 <_printf_i+0x54>
    cdce:	2a63      	cmp	r2, #99	; 0x63
    cdd0:	d02e      	beq.n	ce30 <_printf_i+0x80>
    cdd2:	d80a      	bhi.n	cdea <_printf_i+0x3a>
    cdd4:	2a00      	cmp	r2, #0
    cdd6:	f000 80c8 	beq.w	cf6a <_printf_i+0x1ba>
    cdda:	2a58      	cmp	r2, #88	; 0x58
    cddc:	f000 808a 	beq.w	cef4 <_printf_i+0x144>
    cde0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cde4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    cde8:	e02a      	b.n	ce40 <_printf_i+0x90>
    cdea:	2a64      	cmp	r2, #100	; 0x64
    cdec:	d001      	beq.n	cdf2 <_printf_i+0x42>
    cdee:	2a69      	cmp	r2, #105	; 0x69
    cdf0:	d1f6      	bne.n	cde0 <_printf_i+0x30>
    cdf2:	6821      	ldr	r1, [r4, #0]
    cdf4:	681a      	ldr	r2, [r3, #0]
    cdf6:	f011 0f80 	tst.w	r1, #128	; 0x80
    cdfa:	d023      	beq.n	ce44 <_printf_i+0x94>
    cdfc:	1d11      	adds	r1, r2, #4
    cdfe:	6019      	str	r1, [r3, #0]
    ce00:	6813      	ldr	r3, [r2, #0]
    ce02:	e027      	b.n	ce54 <_printf_i+0xa4>
    ce04:	2a73      	cmp	r2, #115	; 0x73
    ce06:	f000 80b4 	beq.w	cf72 <_printf_i+0x1c2>
    ce0a:	d808      	bhi.n	ce1e <_printf_i+0x6e>
    ce0c:	2a6f      	cmp	r2, #111	; 0x6f
    ce0e:	d02a      	beq.n	ce66 <_printf_i+0xb6>
    ce10:	2a70      	cmp	r2, #112	; 0x70
    ce12:	d1e5      	bne.n	cde0 <_printf_i+0x30>
    ce14:	680a      	ldr	r2, [r1, #0]
    ce16:	f042 0220 	orr.w	r2, r2, #32
    ce1a:	600a      	str	r2, [r1, #0]
    ce1c:	e003      	b.n	ce26 <_printf_i+0x76>
    ce1e:	2a75      	cmp	r2, #117	; 0x75
    ce20:	d021      	beq.n	ce66 <_printf_i+0xb6>
    ce22:	2a78      	cmp	r2, #120	; 0x78
    ce24:	d1dc      	bne.n	cde0 <_printf_i+0x30>
    ce26:	2278      	movs	r2, #120	; 0x78
    ce28:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    ce2c:	496e      	ldr	r1, [pc, #440]	; (cfe8 <_printf_i+0x238>)
    ce2e:	e064      	b.n	cefa <_printf_i+0x14a>
    ce30:	681a      	ldr	r2, [r3, #0]
    ce32:	f101 0542 	add.w	r5, r1, #66	; 0x42
    ce36:	1d11      	adds	r1, r2, #4
    ce38:	6019      	str	r1, [r3, #0]
    ce3a:	6813      	ldr	r3, [r2, #0]
    ce3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    ce40:	2301      	movs	r3, #1
    ce42:	e0a3      	b.n	cf8c <_printf_i+0x1dc>
    ce44:	f011 0f40 	tst.w	r1, #64	; 0x40
    ce48:	f102 0104 	add.w	r1, r2, #4
    ce4c:	6019      	str	r1, [r3, #0]
    ce4e:	d0d7      	beq.n	ce00 <_printf_i+0x50>
    ce50:	f9b2 3000 	ldrsh.w	r3, [r2]
    ce54:	2b00      	cmp	r3, #0
    ce56:	da03      	bge.n	ce60 <_printf_i+0xb0>
    ce58:	222d      	movs	r2, #45	; 0x2d
    ce5a:	425b      	negs	r3, r3
    ce5c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    ce60:	4962      	ldr	r1, [pc, #392]	; (cfec <_printf_i+0x23c>)
    ce62:	220a      	movs	r2, #10
    ce64:	e017      	b.n	ce96 <_printf_i+0xe6>
    ce66:	6820      	ldr	r0, [r4, #0]
    ce68:	6819      	ldr	r1, [r3, #0]
    ce6a:	f010 0f80 	tst.w	r0, #128	; 0x80
    ce6e:	d003      	beq.n	ce78 <_printf_i+0xc8>
    ce70:	1d08      	adds	r0, r1, #4
    ce72:	6018      	str	r0, [r3, #0]
    ce74:	680b      	ldr	r3, [r1, #0]
    ce76:	e006      	b.n	ce86 <_printf_i+0xd6>
    ce78:	f010 0f40 	tst.w	r0, #64	; 0x40
    ce7c:	f101 0004 	add.w	r0, r1, #4
    ce80:	6018      	str	r0, [r3, #0]
    ce82:	d0f7      	beq.n	ce74 <_printf_i+0xc4>
    ce84:	880b      	ldrh	r3, [r1, #0]
    ce86:	4959      	ldr	r1, [pc, #356]	; (cfec <_printf_i+0x23c>)
    ce88:	2a6f      	cmp	r2, #111	; 0x6f
    ce8a:	bf14      	ite	ne
    ce8c:	220a      	movne	r2, #10
    ce8e:	2208      	moveq	r2, #8
    ce90:	2000      	movs	r0, #0
    ce92:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    ce96:	6865      	ldr	r5, [r4, #4]
    ce98:	60a5      	str	r5, [r4, #8]
    ce9a:	2d00      	cmp	r5, #0
    ce9c:	f2c0 809c 	blt.w	cfd8 <_printf_i+0x228>
    cea0:	6820      	ldr	r0, [r4, #0]
    cea2:	f020 0004 	bic.w	r0, r0, #4
    cea6:	6020      	str	r0, [r4, #0]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d13f      	bne.n	cf2c <_printf_i+0x17c>
    ceac:	2d00      	cmp	r5, #0
    ceae:	f040 8095 	bne.w	cfdc <_printf_i+0x22c>
    ceb2:	4675      	mov	r5, lr
    ceb4:	2a08      	cmp	r2, #8
    ceb6:	d10b      	bne.n	ced0 <_printf_i+0x120>
    ceb8:	6823      	ldr	r3, [r4, #0]
    ceba:	07da      	lsls	r2, r3, #31
    cebc:	d508      	bpl.n	ced0 <_printf_i+0x120>
    cebe:	6923      	ldr	r3, [r4, #16]
    cec0:	6862      	ldr	r2, [r4, #4]
    cec2:	429a      	cmp	r2, r3
    cec4:	bfde      	ittt	le
    cec6:	2330      	movle	r3, #48	; 0x30
    cec8:	f805 3c01 	strble.w	r3, [r5, #-1]
    cecc:	f105 35ff 	addle.w	r5, r5, #4294967295
    ced0:	ebae 0305 	sub.w	r3, lr, r5
    ced4:	6123      	str	r3, [r4, #16]
    ced6:	f8cd 8000 	str.w	r8, [sp]
    ceda:	463b      	mov	r3, r7
    cedc:	aa03      	add	r2, sp, #12
    cede:	4621      	mov	r1, r4
    cee0:	4630      	mov	r0, r6
    cee2:	f7ff feef 	bl	ccc4 <_printf_common>
    cee6:	3001      	adds	r0, #1
    cee8:	d155      	bne.n	cf96 <_printf_i+0x1e6>
    ceea:	f04f 30ff 	mov.w	r0, #4294967295
    ceee:	b005      	add	sp, #20
    cef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cef4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    cef8:	493c      	ldr	r1, [pc, #240]	; (cfec <_printf_i+0x23c>)
    cefa:	6822      	ldr	r2, [r4, #0]
    cefc:	6818      	ldr	r0, [r3, #0]
    cefe:	f012 0f80 	tst.w	r2, #128	; 0x80
    cf02:	f100 0504 	add.w	r5, r0, #4
    cf06:	601d      	str	r5, [r3, #0]
    cf08:	d001      	beq.n	cf0e <_printf_i+0x15e>
    cf0a:	6803      	ldr	r3, [r0, #0]
    cf0c:	e002      	b.n	cf14 <_printf_i+0x164>
    cf0e:	0655      	lsls	r5, r2, #25
    cf10:	d5fb      	bpl.n	cf0a <_printf_i+0x15a>
    cf12:	8803      	ldrh	r3, [r0, #0]
    cf14:	07d0      	lsls	r0, r2, #31
    cf16:	bf44      	itt	mi
    cf18:	f042 0220 	orrmi.w	r2, r2, #32
    cf1c:	6022      	strmi	r2, [r4, #0]
    cf1e:	b91b      	cbnz	r3, cf28 <_printf_i+0x178>
    cf20:	6822      	ldr	r2, [r4, #0]
    cf22:	f022 0220 	bic.w	r2, r2, #32
    cf26:	6022      	str	r2, [r4, #0]
    cf28:	2210      	movs	r2, #16
    cf2a:	e7b1      	b.n	ce90 <_printf_i+0xe0>
    cf2c:	4675      	mov	r5, lr
    cf2e:	fbb3 f0f2 	udiv	r0, r3, r2
    cf32:	fb02 3310 	mls	r3, r2, r0, r3
    cf36:	5ccb      	ldrb	r3, [r1, r3]
    cf38:	f805 3d01 	strb.w	r3, [r5, #-1]!
    cf3c:	4603      	mov	r3, r0
    cf3e:	2800      	cmp	r0, #0
    cf40:	d1f5      	bne.n	cf2e <_printf_i+0x17e>
    cf42:	e7b7      	b.n	ceb4 <_printf_i+0x104>
    cf44:	6808      	ldr	r0, [r1, #0]
    cf46:	681a      	ldr	r2, [r3, #0]
    cf48:	6949      	ldr	r1, [r1, #20]
    cf4a:	f010 0f80 	tst.w	r0, #128	; 0x80
    cf4e:	d004      	beq.n	cf5a <_printf_i+0x1aa>
    cf50:	1d10      	adds	r0, r2, #4
    cf52:	6018      	str	r0, [r3, #0]
    cf54:	6813      	ldr	r3, [r2, #0]
    cf56:	6019      	str	r1, [r3, #0]
    cf58:	e007      	b.n	cf6a <_printf_i+0x1ba>
    cf5a:	f010 0f40 	tst.w	r0, #64	; 0x40
    cf5e:	f102 0004 	add.w	r0, r2, #4
    cf62:	6018      	str	r0, [r3, #0]
    cf64:	6813      	ldr	r3, [r2, #0]
    cf66:	d0f6      	beq.n	cf56 <_printf_i+0x1a6>
    cf68:	8019      	strh	r1, [r3, #0]
    cf6a:	2300      	movs	r3, #0
    cf6c:	6123      	str	r3, [r4, #16]
    cf6e:	4675      	mov	r5, lr
    cf70:	e7b1      	b.n	ced6 <_printf_i+0x126>
    cf72:	681a      	ldr	r2, [r3, #0]
    cf74:	1d11      	adds	r1, r2, #4
    cf76:	6019      	str	r1, [r3, #0]
    cf78:	6815      	ldr	r5, [r2, #0]
    cf7a:	6862      	ldr	r2, [r4, #4]
    cf7c:	2100      	movs	r1, #0
    cf7e:	4628      	mov	r0, r5
    cf80:	f000 f8d6 	bl	d130 <memchr>
    cf84:	b108      	cbz	r0, cf8a <_printf_i+0x1da>
    cf86:	1b40      	subs	r0, r0, r5
    cf88:	6060      	str	r0, [r4, #4]
    cf8a:	6863      	ldr	r3, [r4, #4]
    cf8c:	6123      	str	r3, [r4, #16]
    cf8e:	2300      	movs	r3, #0
    cf90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    cf94:	e79f      	b.n	ced6 <_printf_i+0x126>
    cf96:	6923      	ldr	r3, [r4, #16]
    cf98:	462a      	mov	r2, r5
    cf9a:	4639      	mov	r1, r7
    cf9c:	4630      	mov	r0, r6
    cf9e:	47c0      	blx	r8
    cfa0:	3001      	adds	r0, #1
    cfa2:	d0a2      	beq.n	ceea <_printf_i+0x13a>
    cfa4:	6823      	ldr	r3, [r4, #0]
    cfa6:	079b      	lsls	r3, r3, #30
    cfa8:	d507      	bpl.n	cfba <_printf_i+0x20a>
    cfaa:	2500      	movs	r5, #0
    cfac:	f104 0919 	add.w	r9, r4, #25
    cfb0:	68e3      	ldr	r3, [r4, #12]
    cfb2:	9a03      	ldr	r2, [sp, #12]
    cfb4:	1a9b      	subs	r3, r3, r2
    cfb6:	429d      	cmp	r5, r3
    cfb8:	db05      	blt.n	cfc6 <_printf_i+0x216>
    cfba:	68e0      	ldr	r0, [r4, #12]
    cfbc:	9b03      	ldr	r3, [sp, #12]
    cfbe:	4298      	cmp	r0, r3
    cfc0:	bfb8      	it	lt
    cfc2:	4618      	movlt	r0, r3
    cfc4:	e793      	b.n	ceee <_printf_i+0x13e>
    cfc6:	2301      	movs	r3, #1
    cfc8:	464a      	mov	r2, r9
    cfca:	4639      	mov	r1, r7
    cfcc:	4630      	mov	r0, r6
    cfce:	47c0      	blx	r8
    cfd0:	3001      	adds	r0, #1
    cfd2:	d08a      	beq.n	ceea <_printf_i+0x13a>
    cfd4:	3501      	adds	r5, #1
    cfd6:	e7eb      	b.n	cfb0 <_printf_i+0x200>
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d1a7      	bne.n	cf2c <_printf_i+0x17c>
    cfdc:	780b      	ldrb	r3, [r1, #0]
    cfde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cfe2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cfe6:	e765      	b.n	ceb4 <_printf_i+0x104>
    cfe8:	0000d6a6 	.word	0x0000d6a6
    cfec:	0000d695 	.word	0x0000d695

0000cff0 <__sread>:
    cff0:	b510      	push	{r4, lr}
    cff2:	460c      	mov	r4, r1
    cff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cff8:	f000 f8ea 	bl	d1d0 <_read_r>
    cffc:	2800      	cmp	r0, #0
    cffe:	bfab      	itete	ge
    d000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    d002:	89a3      	ldrhlt	r3, [r4, #12]
    d004:	181b      	addge	r3, r3, r0
    d006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    d00a:	bfac      	ite	ge
    d00c:	6563      	strge	r3, [r4, #84]	; 0x54
    d00e:	81a3      	strhlt	r3, [r4, #12]
    d010:	bd10      	pop	{r4, pc}

0000d012 <__swrite>:
    d012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d016:	461f      	mov	r7, r3
    d018:	898b      	ldrh	r3, [r1, #12]
    d01a:	05db      	lsls	r3, r3, #23
    d01c:	4605      	mov	r5, r0
    d01e:	460c      	mov	r4, r1
    d020:	4616      	mov	r6, r2
    d022:	d505      	bpl.n	d030 <__swrite+0x1e>
    d024:	2302      	movs	r3, #2
    d026:	2200      	movs	r2, #0
    d028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d02c:	f000 f868 	bl	d100 <_lseek_r>
    d030:	89a3      	ldrh	r3, [r4, #12]
    d032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d03a:	81a3      	strh	r3, [r4, #12]
    d03c:	4632      	mov	r2, r6
    d03e:	463b      	mov	r3, r7
    d040:	4628      	mov	r0, r5
    d042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d046:	f000 b817 	b.w	d078 <_write_r>

0000d04a <__sseek>:
    d04a:	b510      	push	{r4, lr}
    d04c:	460c      	mov	r4, r1
    d04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d052:	f000 f855 	bl	d100 <_lseek_r>
    d056:	1c43      	adds	r3, r0, #1
    d058:	89a3      	ldrh	r3, [r4, #12]
    d05a:	bf15      	itete	ne
    d05c:	6560      	strne	r0, [r4, #84]	; 0x54
    d05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d066:	81a3      	strheq	r3, [r4, #12]
    d068:	bf18      	it	ne
    d06a:	81a3      	strhne	r3, [r4, #12]
    d06c:	bd10      	pop	{r4, pc}

0000d06e <__sclose>:
    d06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d072:	f000 b813 	b.w	d09c <_close_r>
	...

0000d078 <_write_r>:
    d078:	b538      	push	{r3, r4, r5, lr}
    d07a:	4c07      	ldr	r4, [pc, #28]	; (d098 <_write_r+0x20>)
    d07c:	4605      	mov	r5, r0
    d07e:	4608      	mov	r0, r1
    d080:	4611      	mov	r1, r2
    d082:	2200      	movs	r2, #0
    d084:	6022      	str	r2, [r4, #0]
    d086:	461a      	mov	r2, r3
    d088:	f7fc fbce 	bl	9828 <_write>
    d08c:	1c43      	adds	r3, r0, #1
    d08e:	d102      	bne.n	d096 <_write_r+0x1e>
    d090:	6823      	ldr	r3, [r4, #0]
    d092:	b103      	cbz	r3, d096 <_write_r+0x1e>
    d094:	602b      	str	r3, [r5, #0]
    d096:	bd38      	pop	{r3, r4, r5, pc}
    d098:	200161fc 	.word	0x200161fc

0000d09c <_close_r>:
    d09c:	b538      	push	{r3, r4, r5, lr}
    d09e:	4c06      	ldr	r4, [pc, #24]	; (d0b8 <_close_r+0x1c>)
    d0a0:	2300      	movs	r3, #0
    d0a2:	4605      	mov	r5, r0
    d0a4:	4608      	mov	r0, r1
    d0a6:	6023      	str	r3, [r4, #0]
    d0a8:	f7f4 fa4e 	bl	1548 <_close>
    d0ac:	1c43      	adds	r3, r0, #1
    d0ae:	d102      	bne.n	d0b6 <_close_r+0x1a>
    d0b0:	6823      	ldr	r3, [r4, #0]
    d0b2:	b103      	cbz	r3, d0b6 <_close_r+0x1a>
    d0b4:	602b      	str	r3, [r5, #0]
    d0b6:	bd38      	pop	{r3, r4, r5, pc}
    d0b8:	200161fc 	.word	0x200161fc

0000d0bc <_fstat_r>:
    d0bc:	b538      	push	{r3, r4, r5, lr}
    d0be:	4c07      	ldr	r4, [pc, #28]	; (d0dc <_fstat_r+0x20>)
    d0c0:	2300      	movs	r3, #0
    d0c2:	4605      	mov	r5, r0
    d0c4:	4608      	mov	r0, r1
    d0c6:	4611      	mov	r1, r2
    d0c8:	6023      	str	r3, [r4, #0]
    d0ca:	f7f4 fa40 	bl	154e <_fstat>
    d0ce:	1c43      	adds	r3, r0, #1
    d0d0:	d102      	bne.n	d0d8 <_fstat_r+0x1c>
    d0d2:	6823      	ldr	r3, [r4, #0]
    d0d4:	b103      	cbz	r3, d0d8 <_fstat_r+0x1c>
    d0d6:	602b      	str	r3, [r5, #0]
    d0d8:	bd38      	pop	{r3, r4, r5, pc}
    d0da:	bf00      	nop
    d0dc:	200161fc 	.word	0x200161fc

0000d0e0 <_isatty_r>:
    d0e0:	b538      	push	{r3, r4, r5, lr}
    d0e2:	4c06      	ldr	r4, [pc, #24]	; (d0fc <_isatty_r+0x1c>)
    d0e4:	2300      	movs	r3, #0
    d0e6:	4605      	mov	r5, r0
    d0e8:	4608      	mov	r0, r1
    d0ea:	6023      	str	r3, [r4, #0]
    d0ec:	f7f4 fa34 	bl	1558 <_isatty>
    d0f0:	1c43      	adds	r3, r0, #1
    d0f2:	d102      	bne.n	d0fa <_isatty_r+0x1a>
    d0f4:	6823      	ldr	r3, [r4, #0]
    d0f6:	b103      	cbz	r3, d0fa <_isatty_r+0x1a>
    d0f8:	602b      	str	r3, [r5, #0]
    d0fa:	bd38      	pop	{r3, r4, r5, pc}
    d0fc:	200161fc 	.word	0x200161fc

0000d100 <_lseek_r>:
    d100:	b538      	push	{r3, r4, r5, lr}
    d102:	4c07      	ldr	r4, [pc, #28]	; (d120 <_lseek_r+0x20>)
    d104:	4605      	mov	r5, r0
    d106:	4608      	mov	r0, r1
    d108:	4611      	mov	r1, r2
    d10a:	2200      	movs	r2, #0
    d10c:	6022      	str	r2, [r4, #0]
    d10e:	461a      	mov	r2, r3
    d110:	f7f4 fa24 	bl	155c <_lseek>
    d114:	1c43      	adds	r3, r0, #1
    d116:	d102      	bne.n	d11e <_lseek_r+0x1e>
    d118:	6823      	ldr	r3, [r4, #0]
    d11a:	b103      	cbz	r3, d11e <_lseek_r+0x1e>
    d11c:	602b      	str	r3, [r5, #0]
    d11e:	bd38      	pop	{r3, r4, r5, pc}
    d120:	200161fc 	.word	0x200161fc
	...

0000d130 <memchr>:
    d130:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d134:	2a10      	cmp	r2, #16
    d136:	db2b      	blt.n	d190 <memchr+0x60>
    d138:	f010 0f07 	tst.w	r0, #7
    d13c:	d008      	beq.n	d150 <memchr+0x20>
    d13e:	f810 3b01 	ldrb.w	r3, [r0], #1
    d142:	3a01      	subs	r2, #1
    d144:	428b      	cmp	r3, r1
    d146:	d02d      	beq.n	d1a4 <memchr+0x74>
    d148:	f010 0f07 	tst.w	r0, #7
    d14c:	b342      	cbz	r2, d1a0 <memchr+0x70>
    d14e:	d1f6      	bne.n	d13e <memchr+0xe>
    d150:	b4f0      	push	{r4, r5, r6, r7}
    d152:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d156:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d15a:	f022 0407 	bic.w	r4, r2, #7
    d15e:	f07f 0700 	mvns.w	r7, #0
    d162:	2300      	movs	r3, #0
    d164:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    d168:	3c08      	subs	r4, #8
    d16a:	ea85 0501 	eor.w	r5, r5, r1
    d16e:	ea86 0601 	eor.w	r6, r6, r1
    d172:	fa85 f547 	uadd8	r5, r5, r7
    d176:	faa3 f587 	sel	r5, r3, r7
    d17a:	fa86 f647 	uadd8	r6, r6, r7
    d17e:	faa5 f687 	sel	r6, r5, r7
    d182:	b98e      	cbnz	r6, d1a8 <memchr+0x78>
    d184:	d1ee      	bne.n	d164 <memchr+0x34>
    d186:	bcf0      	pop	{r4, r5, r6, r7}
    d188:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d18c:	f002 0207 	and.w	r2, r2, #7
    d190:	b132      	cbz	r2, d1a0 <memchr+0x70>
    d192:	f810 3b01 	ldrb.w	r3, [r0], #1
    d196:	3a01      	subs	r2, #1
    d198:	ea83 0301 	eor.w	r3, r3, r1
    d19c:	b113      	cbz	r3, d1a4 <memchr+0x74>
    d19e:	d1f8      	bne.n	d192 <memchr+0x62>
    d1a0:	2000      	movs	r0, #0
    d1a2:	4770      	bx	lr
    d1a4:	3801      	subs	r0, #1
    d1a6:	4770      	bx	lr
    d1a8:	2d00      	cmp	r5, #0
    d1aa:	bf06      	itte	eq
    d1ac:	4635      	moveq	r5, r6
    d1ae:	3803      	subeq	r0, #3
    d1b0:	3807      	subne	r0, #7
    d1b2:	f015 0f01 	tst.w	r5, #1
    d1b6:	d107      	bne.n	d1c8 <memchr+0x98>
    d1b8:	3001      	adds	r0, #1
    d1ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    d1be:	bf02      	ittt	eq
    d1c0:	3001      	addeq	r0, #1
    d1c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    d1c6:	3001      	addeq	r0, #1
    d1c8:	bcf0      	pop	{r4, r5, r6, r7}
    d1ca:	3801      	subs	r0, #1
    d1cc:	4770      	bx	lr
    d1ce:	bf00      	nop

0000d1d0 <_read_r>:
    d1d0:	b538      	push	{r3, r4, r5, lr}
    d1d2:	4c07      	ldr	r4, [pc, #28]	; (d1f0 <_read_r+0x20>)
    d1d4:	4605      	mov	r5, r0
    d1d6:	4608      	mov	r0, r1
    d1d8:	4611      	mov	r1, r2
    d1da:	2200      	movs	r2, #0
    d1dc:	6022      	str	r2, [r4, #0]
    d1de:	461a      	mov	r2, r3
    d1e0:	f7fc fb10 	bl	9804 <_read>
    d1e4:	1c43      	adds	r3, r0, #1
    d1e6:	d102      	bne.n	d1ee <_read_r+0x1e>
    d1e8:	6823      	ldr	r3, [r4, #0]
    d1ea:	b103      	cbz	r3, d1ee <_read_r+0x1e>
    d1ec:	602b      	str	r3, [r5, #0]
    d1ee:	bd38      	pop	{r3, r4, r5, pc}
    d1f0:	200161fc 	.word	0x200161fc
    d1f4:	652f2e2e 	.word	0x652f2e2e
    d1f8:	72656874 	.word	0x72656874
    d1fc:	5f74656e 	.word	0x5f74656e
    d200:	2f796870 	.word	0x2f796870
    d204:	65687465 	.word	0x65687465
    d208:	74656e72 	.word	0x74656e72
    d20c:	7968705f 	.word	0x7968705f
    d210:	0000632e 	.word	0x0000632e
    d214:	2e323931 	.word	0x2e323931
    d218:	2e383631 	.word	0x2e383631
    d21c:	30312e31 	.word	0x30312e31
    d220:	00000030 	.word	0x00000030
    d224:	2e353532 	.word	0x2e353532
    d228:	2e353532 	.word	0x2e353532
    d22c:	2e353532 	.word	0x2e353532
    d230:	00000030 	.word	0x00000030
    d234:	2e323931 	.word	0x2e323931
    d238:	2e383631 	.word	0x2e383631
    d23c:	00312e31 	.word	0x00312e31
    d240:	682f2e2e 	.word	0x682f2e2e
    d244:	732f6c61 	.word	0x732f6c61
    d248:	682f6372 	.word	0x682f6372
    d24c:	695f6c61 	.word	0x695f6c61
    d250:	00632e6f 	.word	0x00632e6f
    d254:	682f2e2e 	.word	0x682f2e2e
    d258:	732f6c61 	.word	0x732f6c61
    d25c:	682f6372 	.word	0x682f6372
    d260:	6d5f6c61 	.word	0x6d5f6c61
    d264:	615f6361 	.word	0x615f6361
    d268:	636e7973 	.word	0x636e7973
    d26c:	0000632e 	.word	0x0000632e
    d270:	682f2e2e 	.word	0x682f2e2e
    d274:	732f6c61 	.word	0x732f6c61
    d278:	682f6372 	.word	0x682f6372
    d27c:	705f6c61 	.word	0x705f6c61
    d280:	632e6d77 	.word	0x632e6d77
    d284:	00000000 	.word	0x00000000
    d288:	682f2e2e 	.word	0x682f2e2e
    d28c:	732f6c61 	.word	0x732f6c61
    d290:	682f6372 	.word	0x682f6372
    d294:	755f6c61 	.word	0x755f6c61
    d298:	74726173 	.word	0x74726173
    d29c:	6e79735f 	.word	0x6e79735f
    d2a0:	00632e63 	.word	0x00632e63

0000d2a4 <_map>:
    d2a4:	00000000 00000060 00000007 00000027     ....`.......'...
    d2b4:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    d2c4:	632e6369 00000000 682f2e2e 672f6c70     ic.c....../hpl/g
    d2d4:	2f63616d 5f6c7068 63616d67 0000632e     mac/hpl_gmac.c..
    d2e4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    d2f4:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000d304 <_usarts>:
    d304:	00000002 40100004 00030000 00700002     .......@......p.
    d314:	0000fcb9 00000000                       ........

0000d31c <_i2cms>:
	...

0000d334 <_i2css>:
	...

0000d344 <sercomspi_regs>:
	...
    d358:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    d368:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    d378:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    d388:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    d398:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

0000d3a8 <err_to_errno_table>:
    d3a8:	00000000 0000000c 00000069 0000000b     ........i.......
    d3b8:	00000071 00000073 00000016 0000000b     q...s...........
    d3c8:	00000062 00000072 00000067 00000068     b...r...g...h...
    d3d8:	0000006b 0000006b 00000005 ffffffff     k...k...........
    d3e8:	69706374 68745f70 64616572 00000000     tcpip_thread....

0000d3f8 <memp_sizes>:
    d3f8:	00980020 0010001c 00180020 002c0010      ....... .....,.
    d408:	00140014 00100010 000005fc              ............

0000d414 <memp_num>:
    d414:	00050004 00100008 000f0005 00040002     ................
    d424:	00080008 00100003 00000010              ............

0000d430 <tcp_pcb_lists>:
    d430:	200161dc 200161e4 200161d4 200161e8     .a. .a. .a. .a. 

0000d440 <tcp_persist_backoff>:
    d440:	180c0603 00786030                       ....0`x.

0000d448 <tcp_backoff>:
    d448:	04030201 07070605 07070707 00000007     ................

0000d458 <tcp_state_str>:
    d458:	0000d484 0000d48c 0000d494 0000d4a0     ................
    d468:	0000d4ac 0000d4b8 0000d4c4 0000d4d0     ................
    d478:	0000d4dc 0000d4e4 0000d4f0 534f4c43     ............CLOS
    d488:	00004445 5453494c 00004e45 5f4e5953     ED..LISTEN..SYN_
    d498:	544e4553 00000000 5f4e5953 44564352     SENT....SYN_RCVD
    d4a8:	00000000 41545345 53494c42 00444548     ....ESTABLISHED.
    d4b8:	5f4e4946 54494157 0000315f 5f4e4946     FIN_WAIT_1..FIN_
    d4c8:	54494157 0000325f 534f4c43 41575f45     WAIT_2..CLOSE_WA
    d4d8:	00005449 534f4c43 00474e49 5453414c     IT..CLOSING.LAST
    d4e8:	4b43415f 00000000 454d4954 4941575f     _ACK....TIME_WAI
    d4f8:	00000054                                T...

0000d4fc <ethbroadcast>:
    d4fc:	ffffffff 0000ffff                       ........

0000d504 <ethzero>:
	...
    d50c:	00206425 415f5049 20524444 3a202020     %d .IP_ADDR    :
    d51c:	0d732520 0000000a 5f54454e 4b53414d      %s.....NET_MASK
    d52c:	3a202020 0d732520 0000000a 45544147        : %s.....GATE
    d53c:	5f594157 3a205049 0d732520 0000000a     WAY_IP : %s.....
    d54c:	6c696146 74206465 6174206f 4920656b     Failed to take I
    d55c:	6573204f 6870616d 2165726f 00000000     O semaphore!....
    d56c:	65687445 74656e72 7361545f 0000006b     Ethernet_Task...
    d57c:	6e69614d 7361545f 0000006b 75736e49     Main_Task...Insu
    d58c:	63696666 746e6569 4f545220 65682053     fficient RTOS he
    d59c:	61207061 6c696176 656c6261 206f7420     ap available to 
    d5ac:	61657263 74206574 69206568 20656c64     create the idle 
    d5bc:	7420726f 72656d69 65616420 206e6f6d     or timer daemon 
    d5cc:	6b736174 00000073 454c4449 00000000     tasks...IDLE....
    d5dc:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    d5ec:	20726d54 00637653 00000000 00007620     Tmr Svc..... v..
    d5fc:	74450a0d 6e726568 6c207465 206b6e69     ..Ethernet link 
    d60c:	0a0d7075 0000000d 43414d47 00000000     up......GMAC....
    d61c:	0064654c                                Led.

0000d620 <_global_impure_ptr>:
    d620:	20000054                                T.. 

0000d624 <__sf_fake_stderr>:
	...

0000d644 <__sf_fake_stdin>:
	...

0000d664 <__sf_fake_stdout>:
	...
    d684:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d694:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d6a4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d6b4:	00006665                                ef..

0000d6b8 <_init>:
    d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6ba:	bf00      	nop
    d6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d6be:	bc08      	pop	{r3}
    d6c0:	469e      	mov	lr, r3
    d6c2:	4770      	bx	lr

0000d6c4 <__init_array_start>:
    d6c4:	00000289 	.word	0x00000289

0000d6c8 <_fini>:
    d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6ca:	bf00      	nop
    d6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d6ce:	bc08      	pop	{r3}
    d6d0:	469e      	mov	lr, r3
    d6d2:	4770      	bx	lr

0000d6d4 <__fini_array_start>:
    d6d4:	00000265 	.word	0x00000265
