
DBW_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000edb0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b8  20000000  0000edb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200b8  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200b8  2**0
                  CONTENTS
  4 .bss          0001616c  200000c0  0000ee80  000200c0  2**5
                  ALLOC
  5 .stack        00010004  2001622c  00024fec  000200c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00071c33  00000000  00000000  0002013f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b0e4  00000000  00000000  00091d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00025f7f  00000000  00000000  0009ce56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ff8  00000000  00000000  000c2dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002278  00000000  00000000  000c4dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000447ee  00000000  00000000  000c7045  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e6f1  00000000  00000000  0010b833  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00132ea1  00000000  00000000  00139f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000065e4  00000000  00000000  0026cdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 62 02 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     0b. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	25 a6 00 00 ed 02 00 00 00 00 00 00 b5 a6 00 00     %...............
      3c:	15 a7 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 c1 17 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	cd 17 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      bc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      cc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	85 1d 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     104:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     114:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     144:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     154:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     164:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     174:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     184:	ed 02 00 00 ed 02 00 00 ed 02 00 00 95 18 00 00     ................
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 c5 22 00 00 ed 02 00 00     ........."......
     1f4:	ed 02 00 00 ed 02 00 00 d9 22 00 00 ed 22 00 00     ........."..."..
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     224:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000c0 	.word	0x200000c0
     280:	00000000 	.word	0x00000000
     284:	0000edb0 	.word	0x0000edb0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000edb0 	.word	0x0000edb0
     2c4:	200000c4 	.word	0x200000c4
     2c8:	0000edb0 	.word	0x0000edb0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	ethernet_phys_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000905 	.word	0x00000905
     2e4:	00000eb9 	.word	0x00000eb9
     2e8:	0000a4e5 	.word	0x0000a4e5

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b15      	ldr	r3, [pc, #84]	; (348 <Reset_Handler+0x58>)
     2f4:	4a15      	ldr	r2, [pc, #84]	; (34c <Reset_Handler+0x5c>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d009      	beq.n	30e <Reset_Handler+0x1e>
     2fa:	4b13      	ldr	r3, [pc, #76]	; (348 <Reset_Handler+0x58>)
     2fc:	4a13      	ldr	r2, [pc, #76]	; (34c <Reset_Handler+0x5c>)
     2fe:	e003      	b.n	308 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     300:	6811      	ldr	r1, [r2, #0]
     302:	6019      	str	r1, [r3, #0]
     304:	3304      	adds	r3, #4
     306:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     308:	4911      	ldr	r1, [pc, #68]	; (350 <Reset_Handler+0x60>)
     30a:	428b      	cmp	r3, r1
     30c:	d3f8      	bcc.n	300 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <Reset_Handler+0x64>)
     310:	e002      	b.n	318 <Reset_Handler+0x28>
                *pDest++ = 0;
     312:	2200      	movs	r2, #0
     314:	601a      	str	r2, [r3, #0]
     316:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     318:	4a0f      	ldr	r2, [pc, #60]	; (358 <Reset_Handler+0x68>)
     31a:	4293      	cmp	r3, r2
     31c:	d3f9      	bcc.n	312 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <Reset_Handler+0x6c>)
     320:	4a0f      	ldr	r2, [pc, #60]	; (360 <Reset_Handler+0x70>)
     322:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     326:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     328:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     32c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     334:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     338:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     33c:	4b09      	ldr	r3, [pc, #36]	; (364 <Reset_Handler+0x74>)
     33e:	4798      	blx	r3
        main();
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <Reset_Handler+0x78>)
     342:	4798      	blx	r3
     344:	e7fe      	b.n	344 <Reset_Handler+0x54>
     346:	bf00      	nop
     348:	20000000 	.word	0x20000000
     34c:	0000edb0 	.word	0x0000edb0
     350:	200000b8 	.word	0x200000b8
     354:	200000c0 	.word	0x200000c0
     358:	2001622c 	.word	0x2001622c
     35c:	e000ed00 	.word	0xe000ed00
     360:	00000000 	.word	0x00000000
     364:	0000ccdd 	.word	0x0000ccdd
     368:	0000a239 	.word	0x0000a239

0000036c <SetSafetyLight1On>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
     36c:	b920      	cbnz	r0, 378 <SetSafetyLight1On+0xc>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     36e:	2201      	movs	r2, #1
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <SetSafetyLight1On+0x18>)
     372:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     376:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     378:	2201      	movs	r2, #1
     37a:	4b02      	ldr	r3, [pc, #8]	; (384 <SetSafetyLight1On+0x18>)
     37c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     380:	4770      	bx	lr
     382:	bf00      	nop
     384:	41008000 	.word	0x41008000

00000388 <SetSteerDirection>:
     388:	b918      	cbnz	r0, 392 <SetSteerDirection+0xa>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	4b03      	ldr	r3, [pc, #12]	; (39c <SetSteerDirection+0x14>)
     38e:	615a      	str	r2, [r3, #20]
     390:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     392:	2280      	movs	r2, #128	; 0x80
     394:	4b01      	ldr	r3, [pc, #4]	; (39c <SetSteerDirection+0x14>)
     396:	619a      	str	r2, [r3, #24]
     398:	4770      	bx	lr
     39a:	bf00      	nop
     39c:	41008000 	.word	0x41008000

000003a0 <SetSteeringTorque>:
	SetSafetyLight2On(reverse);
}

//Applies power to the steering motor as duty cycle percentage
void SetSteeringTorque(float duty_cycle)
{
     3a0:	b510      	push	{r4, lr}
     3a2:	ed2d 8b02 	vpush	{d8}
     3a6:	ee07 0a90 	vmov	s15, r0
	if(duty_cycle < 0)
     3aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     3b2:	d435      	bmi.n	420 <SetSteeringTorque+0x80>
		duty_cycle = 0;
	else if (duty_cycle > 1.0)
     3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     3b8:	eef4 7ac7 	vcmpe.f32	s15, s14
     3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     3c0:	dd01      	ble.n	3c6 <SetSteeringTorque+0x26>
		duty_cycle = 1;
     3c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	
	duty_cycle = 1 - duty_cycle;
	
	duty_cycle = duty_cycle * 0.6;
     3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     3ca:	ee77 7a67 	vsub.f32	s15, s14, s15
     3ce:	ee17 0a90 	vmov	r0, s15
     3d2:	4b19      	ldr	r3, [pc, #100]	; (438 <SetSteeringTorque+0x98>)
     3d4:	4798      	blx	r3
     3d6:	a316      	add	r3, pc, #88	; (adr r3, 430 <SetSteeringTorque+0x90>)
     3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
     3dc:	4c17      	ldr	r4, [pc, #92]	; (43c <SetSteeringTorque+0x9c>)
     3de:	47a0      	blx	r4
     3e0:	4b17      	ldr	r3, [pc, #92]	; (440 <SetSteeringTorque+0xa0>)
     3e2:	4798      	blx	r3
     3e4:	ee08 0a10 	vmov	s16, r0
		
	const static int STEERING_TORQUE_FREQ_TICKS = PWM_TICKS_PER_SECOND / STEERING_TORQUE_FREQ;
	pwm_set_parameters(&PWM_SteeringTorque, STEERING_TORQUE_FREQ_TICKS, duty_cycle * STEERING_TORQUE_FREQ_TICKS);
     3e8:	eddf 7a16 	vldr	s15, [pc, #88]	; 444 <SetSteeringTorque+0xa4>
     3ec:	ee68 7a27 	vmul.f32	s15, s16, s15
     3f0:	4c15      	ldr	r4, [pc, #84]	; (448 <SetSteeringTorque+0xa8>)
     3f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     3f6:	ee17 2a90 	vmov	r2, s15
     3fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
     3fe:	4620      	mov	r0, r4
     400:	4b12      	ldr	r3, [pc, #72]	; (44c <SetSteeringTorque+0xac>)
     402:	4798      	blx	r3
	pwm_enable(&PWM_SteeringTorque);
     404:	4620      	mov	r0, r4
     406:	4b12      	ldr	r3, [pc, #72]	; (450 <SetSteeringTorque+0xb0>)
     408:	4798      	blx	r3
     40a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     412:	dd08      	ble.n	426 <SetSteeringTorque+0x86>
     414:	2240      	movs	r2, #64	; 0x40
     416:	4b0f      	ldr	r3, [pc, #60]	; (454 <SetSteeringTorque+0xb4>)
     418:	619a      	str	r2, [r3, #24]

	gpio_set_pin_level(SteeringEnable, duty_cycle > 0.0);
}
     41a:	ecbd 8b02 	vpop	{d8}
     41e:	bd10      	pop	{r4, pc}
		duty_cycle = 0;
     420:	eddf 7a0d 	vldr	s15, [pc, #52]	; 458 <SetSteeringTorque+0xb8>
     424:	e7cf      	b.n	3c6 <SetSteeringTorque+0x26>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     426:	2240      	movs	r2, #64	; 0x40
     428:	4b0a      	ldr	r3, [pc, #40]	; (454 <SetSteeringTorque+0xb4>)
     42a:	615a      	str	r2, [r3, #20]
}
     42c:	e7f5      	b.n	41a <SetSteeringTorque+0x7a>
     42e:	bf00      	nop
     430:	33333333 	.word	0x33333333
     434:	3fe33333 	.word	0x3fe33333
     438:	0000c6b1 	.word	0x0000c6b1
     43c:	0000c759 	.word	0x0000c759
     440:	0000cc0d 	.word	0x0000cc0d
     444:	43c80000 	.word	0x43c80000
     448:	20012950 	.word	0x20012950
     44c:	000013d9 	.word	0x000013d9
     450:	0000139d 	.word	0x0000139d
     454:	41008000 	.word	0x41008000
     458:	00000000 	.word	0x00000000

0000045c <SetAcceleration>:
	pwm_enable(&PWM_FrontBrake);
 }

//Sets the acceleration value to the specified duty cycle
void SetAcceleration(float duty_cycle)
{	
     45c:	b510      	push	{r4, lr}
     45e:	ed2d 8b02 	vpush	{d8}
     462:	ee08 0a10 	vmov	s16, r0
	const static int ACCELERATION_FREQ_TICKS = PWM_TICKS_PER_SECOND / ACCELERATION_FREQ;
	pwm_set_parameters(&PWM_Acceleration, ACCELERATION_FREQ_TICKS, duty_cycle * ACCELERATION_FREQ_TICKS);
     466:	eddf 7a11 	vldr	s15, [pc, #68]	; 4ac <SetAcceleration+0x50>
     46a:	ee68 7a27 	vmul.f32	s15, s16, s15
     46e:	4c10      	ldr	r4, [pc, #64]	; (4b0 <SetAcceleration+0x54>)
     470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     474:	ee17 2a90 	vmov	r2, s15
     478:	f642 61e0 	movw	r1, #12000	; 0x2ee0
     47c:	4620      	mov	r0, r4
     47e:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <SetAcceleration+0x58>)
     480:	4798      	blx	r3
	pwm_enable(&PWM_Acceleration);
     482:	4620      	mov	r0, r4
     484:	4b0c      	ldr	r3, [pc, #48]	; (4b8 <SetAcceleration+0x5c>)
     486:	4798      	blx	r3

	if(duty_cycle > 0)
     488:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     490:	dd06      	ble.n	4a0 <SetAcceleration+0x44>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     492:	2202      	movs	r2, #2
     494:	4b09      	ldr	r3, [pc, #36]	; (4bc <SetAcceleration+0x60>)
     496:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	else
	{
		gpio_set_pin_level(AccelerationEnable, 0);
	}
}
     49a:	ecbd 8b02 	vpop	{d8}
     49e:	bd10      	pop	{r4, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a0:	2202      	movs	r2, #2
     4a2:	4b06      	ldr	r3, [pc, #24]	; (4bc <SetAcceleration+0x60>)
     4a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     4a8:	e7f7      	b.n	49a <SetAcceleration+0x3e>
     4aa:	bf00      	nop
     4ac:	463b8000 	.word	0x463b8000
     4b0:	20012918 	.word	0x20012918
     4b4:	000013d9 	.word	0x000013d9
     4b8:	0000139d 	.word	0x0000139d
     4bc:	41008000 	.word	0x41008000

000004c0 <SteeringEncoder_IRQ_init>:
struct pwm_descriptor BRAKE;

struct mac_async_descriptor COMMUNICATION_IO;

void SteeringEncoder_IRQ_init(void)
{
     4c0:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     4c2:	2240      	movs	r2, #64	; 0x40
     4c4:	4b26      	ldr	r3, [pc, #152]	; (560 <SteeringEncoder_IRQ_init+0xa0>)
     4c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     4ca:	4a26      	ldr	r2, [pc, #152]	; (564 <SteeringEncoder_IRQ_init+0xa4>)
     4cc:	6953      	ldr	r3, [r2, #20]
     4ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     4d2:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4d4:	4b24      	ldr	r3, [pc, #144]	; (568 <SteeringEncoder_IRQ_init+0xa8>)
     4d6:	2201      	movs	r2, #1
     4d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4dc:	4923      	ldr	r1, [pc, #140]	; (56c <SteeringEncoder_IRQ_init+0xac>)
     4de:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
     4e2:	4823      	ldr	r0, [pc, #140]	; (570 <SteeringEncoder_IRQ_init+0xb0>)
     4e4:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ec:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
     4f0:	f041 0104 	orr.w	r1, r1, #4
     4f4:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4f8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fc:	f893 21c0 	ldrb.w	r2, [r3, #448]	; 0x1c0
	tmp &= ~PORT_PINCFG_PMUXEN;
     500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     504:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     508:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     50c:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     510:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     514:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     518:	2280      	movs	r2, #128	; 0x80
     51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     51e:	4915      	ldr	r1, [pc, #84]	; (574 <SteeringEncoder_IRQ_init+0xb4>)
     520:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     524:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     52c:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     530:	f041 0104 	orr.w	r1, r1, #4
     534:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     538:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     53c:	f893 20c7 	ldrb.w	r2, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     540:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     544:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     548:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     54c:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     550:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     554:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(encoder_B, PINMUX_PB07A_EIC_EXTINT7);

	ext_irq_init();
     558:	4b07      	ldr	r3, [pc, #28]	; (578 <SteeringEncoder_IRQ_init+0xb8>)
     55a:	4798      	blx	r3
     55c:	bd08      	pop	{r3, pc}
     55e:	bf00      	nop
     560:	40001c00 	.word	0x40001c00
     564:	40000800 	.word	0x40000800
     568:	41008000 	.word	0x41008000
     56c:	40020001 	.word	0x40020001
     570:	c0020000 	.word	0xc0020000
     574:	40020080 	.word	0x40020080
     578:	00000fe1 	.word	0x00000fe1

0000057c <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     57c:	4b10      	ldr	r3, [pc, #64]	; (5c0 <TARGET_IO_PORT_init+0x44>)
     57e:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     582:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     586:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     58a:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     58e:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     592:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     596:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     59a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59e:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5aa:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ae:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5b6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ba:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     5be:	4770      	bx	lr
     5c0:	41008000 	.word	0x41008000

000005c4 <TARGET_IO_CLOCK_init>:
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <TARGET_IO_CLOCK_init+0x1c>)
     5c6:	2240      	movs	r2, #64	; 0x40
     5c8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     5cc:	2243      	movs	r2, #67	; 0x43
     5ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     5d2:	4a04      	ldr	r2, [pc, #16]	; (5e4 <TARGET_IO_CLOCK_init+0x20>)
     5d4:	6993      	ldr	r3, [r2, #24]
     5d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     5da:	6193      	str	r3, [r2, #24]
     5dc:	4770      	bx	lr
     5de:	bf00      	nop
     5e0:	40001c00 	.word	0x40001c00
     5e4:	40000800 	.word	0x40000800

000005e8 <TARGET_IO_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void TARGET_IO_init(void)
{
     5e8:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     5ea:	4b05      	ldr	r3, [pc, #20]	; (600 <TARGET_IO_init+0x18>)
     5ec:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM2, (void *)NULL);
     5ee:	2200      	movs	r2, #0
     5f0:	4904      	ldr	r1, [pc, #16]	; (604 <TARGET_IO_init+0x1c>)
     5f2:	4805      	ldr	r0, [pc, #20]	; (608 <TARGET_IO_init+0x20>)
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <TARGET_IO_init+0x24>)
     5f6:	4798      	blx	r3
	TARGET_IO_PORT_init();
     5f8:	4b05      	ldr	r3, [pc, #20]	; (610 <TARGET_IO_init+0x28>)
     5fa:	4798      	blx	r3
     5fc:	bd08      	pop	{r3, pc}
     5fe:	bf00      	nop
     600:	000005c5 	.word	0x000005c5
     604:	41012000 	.word	0x41012000
     608:	2001290c 	.word	0x2001290c
     60c:	000014d5 	.word	0x000014d5
     610:	0000057d 	.word	0x0000057d

00000614 <ACCELERATION_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     614:	4a08      	ldr	r2, [pc, #32]	; (638 <ACCELERATION_PORT_init+0x24>)
     616:	f892 3045 	ldrb.w	r3, [r2, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
     636:	4770      	bx	lr
     638:	41008000 	.word	0x41008000

0000063c <ACCELERATION_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     63c:	4a04      	ldr	r2, [pc, #16]	; (650 <ACCELERATION_CLOCK_init+0x14>)
     63e:	6953      	ldr	r3, [r2, #20]
     640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     644:	6153      	str	r3, [r2, #20]
     646:	2240      	movs	r2, #64	; 0x40
     648:	4b02      	ldr	r3, [pc, #8]	; (654 <ACCELERATION_CLOCK_init+0x18>)
     64a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     64e:	4770      	bx	lr
     650:	40000800 	.word	0x40000800
     654:	40001c00 	.word	0x40001c00

00000658 <ACCELERATION_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ACCELERATION_init(void)
{
     658:	b508      	push	{r3, lr}
	ACCELERATION_CLOCK_init();
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <ACCELERATION_init+0x1c>)
     65c:	4798      	blx	r3
	ACCELERATION_PORT_init();
     65e:	4b06      	ldr	r3, [pc, #24]	; (678 <ACCELERATION_init+0x20>)
     660:	4798      	blx	r3
	pwm_init(&ACCELERATION, TC0, _tc_get_pwm());
     662:	4b06      	ldr	r3, [pc, #24]	; (67c <ACCELERATION_init+0x24>)
     664:	4798      	blx	r3
     666:	4602      	mov	r2, r0
     668:	4905      	ldr	r1, [pc, #20]	; (680 <ACCELERATION_init+0x28>)
     66a:	4806      	ldr	r0, [pc, #24]	; (684 <ACCELERATION_init+0x2c>)
     66c:	4b06      	ldr	r3, [pc, #24]	; (688 <ACCELERATION_init+0x30>)
     66e:	4798      	blx	r3
     670:	bd08      	pop	{r3, pc}
     672:	bf00      	nop
     674:	0000063d 	.word	0x0000063d
     678:	00000615 	.word	0x00000615
     67c:	000022bf 	.word	0x000022bf
     680:	40003800 	.word	0x40003800
     684:	20012918 	.word	0x20012918
     688:	00001359 	.word	0x00001359

0000068c <STEERINGPOWER_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68c:	4a08      	ldr	r2, [pc, #32]	; (6b0 <STEERINGPOWER_PORT_init+0x24>)
     68e:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     692:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     696:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     69a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69e:	f892 30b4 	ldrb.w	r3, [r2, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6a2:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6aa:	f882 30b4 	strb.w	r3, [r2, #180]	; 0xb4
     6ae:	4770      	bx	lr
     6b0:	41008000 	.word	0x41008000

000006b4 <STEERINGPOWER_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     6b4:	4a04      	ldr	r2, [pc, #16]	; (6c8 <STEERINGPOWER_CLOCK_init+0x14>)
     6b6:	69d3      	ldr	r3, [r2, #28]
     6b8:	f043 0320 	orr.w	r3, r3, #32
     6bc:	61d3      	str	r3, [r2, #28]
     6be:	2240      	movs	r2, #64	; 0x40
     6c0:	4b02      	ldr	r3, [pc, #8]	; (6cc <STEERINGPOWER_CLOCK_init+0x18>)
     6c2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     6c6:	4770      	bx	lr
     6c8:	40000800 	.word	0x40000800
     6cc:	40001c00 	.word	0x40001c00

000006d0 <STEERINGPOWER_init>:
	hri_mclk_set_APBCMASK_TC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC4_GCLK_ID, CONF_GCLK_TC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void STEERINGPOWER_init(void)
{
     6d0:	b508      	push	{r3, lr}
	STEERINGPOWER_CLOCK_init();
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <STEERINGPOWER_init+0x1c>)
     6d4:	4798      	blx	r3
	STEERINGPOWER_PORT_init();
     6d6:	4b06      	ldr	r3, [pc, #24]	; (6f0 <STEERINGPOWER_init+0x20>)
     6d8:	4798      	blx	r3
	pwm_init(&STEERINGPOWER, TC4, _tc_get_pwm());
     6da:	4b06      	ldr	r3, [pc, #24]	; (6f4 <STEERINGPOWER_init+0x24>)
     6dc:	4798      	blx	r3
     6de:	4602      	mov	r2, r0
     6e0:	4905      	ldr	r1, [pc, #20]	; (6f8 <STEERINGPOWER_init+0x28>)
     6e2:	4806      	ldr	r0, [pc, #24]	; (6fc <STEERINGPOWER_init+0x2c>)
     6e4:	4b06      	ldr	r3, [pc, #24]	; (700 <STEERINGPOWER_init+0x30>)
     6e6:	4798      	blx	r3
     6e8:	bd08      	pop	{r3, pc}
     6ea:	bf00      	nop
     6ec:	000006b5 	.word	0x000006b5
     6f0:	0000068d 	.word	0x0000068d
     6f4:	000022bf 	.word	0x000022bf
     6f8:	42001400 	.word	0x42001400
     6fc:	20012950 	.word	0x20012950
     700:	00001359 	.word	0x00001359

00000704 <BRAKE_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     704:	4a08      	ldr	r2, [pc, #32]	; (728 <BRAKE_PORT_init+0x24>)
     706:	f892 30cf 	ldrb.w	r3, [r2, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     70a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     70e:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     712:	f882 30cf 	strb.w	r3, [r2, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     716:	f892 30b7 	ldrb.w	r3, [r2, #183]	; 0xb7
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     71a:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     722:	f882 30b7 	strb.w	r3, [r2, #183]	; 0xb7
     726:	4770      	bx	lr
     728:	41008000 	.word	0x41008000

0000072c <BRAKE_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TC5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     72c:	4a04      	ldr	r2, [pc, #16]	; (740 <BRAKE_CLOCK_init+0x14>)
     72e:	69d3      	ldr	r3, [r2, #28]
     730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     734:	61d3      	str	r3, [r2, #28]
     736:	2240      	movs	r2, #64	; 0x40
     738:	4b02      	ldr	r3, [pc, #8]	; (744 <BRAKE_CLOCK_init+0x18>)
     73a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
     73e:	4770      	bx	lr
     740:	40000800 	.word	0x40000800
     744:	40001c00 	.word	0x40001c00

00000748 <BRAKE_init>:
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void BRAKE_init(void)
{
     748:	b508      	push	{r3, lr}
	BRAKE_CLOCK_init();
     74a:	4b06      	ldr	r3, [pc, #24]	; (764 <BRAKE_init+0x1c>)
     74c:	4798      	blx	r3
	BRAKE_PORT_init();
     74e:	4b06      	ldr	r3, [pc, #24]	; (768 <BRAKE_init+0x20>)
     750:	4798      	blx	r3
	pwm_init(&BRAKE, TC5, _tc_get_pwm());
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <BRAKE_init+0x24>)
     754:	4798      	blx	r3
     756:	4602      	mov	r2, r0
     758:	4905      	ldr	r1, [pc, #20]	; (770 <BRAKE_init+0x28>)
     75a:	4806      	ldr	r0, [pc, #24]	; (774 <BRAKE_init+0x2c>)
     75c:	4b06      	ldr	r3, [pc, #24]	; (778 <BRAKE_init+0x30>)
     75e:	4798      	blx	r3
     760:	bd08      	pop	{r3, pc}
     762:	bf00      	nop
     764:	0000072d 	.word	0x0000072d
     768:	00000705 	.word	0x00000705
     76c:	000022bf 	.word	0x000022bf
     770:	42001800 	.word	0x42001800
     774:	200128f0 	.word	0x200128f0
     778:	00001359 	.word	0x00001359

0000077c <COMMUNICATION_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     77c:	4b50      	ldr	r3, [pc, #320]	; (8c0 <COMMUNICATION_IO_PORT_init+0x144>)
     77e:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     782:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     786:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     78a:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     78e:	f893 2135 	ldrb.w	r2, [r3, #309]	; 0x135
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     792:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     796:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     79a:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79e:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ae:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7b6:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ba:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7be:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     7c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ce:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7d2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7d6:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7de:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     7e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ee:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7f6:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7fa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7fe:	f893 2154 	ldrb.w	r2, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     802:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     806:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     80a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     80e:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     812:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     816:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     81a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     81e:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
	tmp &= ~PORT_PINCFG_PMUXEN;
     822:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     826:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82a:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     82e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     832:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     836:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     83a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     83e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     842:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     846:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     84a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     84e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     852:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     856:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     85a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     862:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     866:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     86e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     872:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     876:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     87a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     87e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     882:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     886:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     88a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     88e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     892:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     896:	f042 020b 	orr.w	r2, r2, #11
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     89a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     89e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     8a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8a6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8b2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8b6:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     8be:	4770      	bx	lr
     8c0:	41008000 	.word	0x41008000

000008c4 <COMMUNICATION_IO_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_GMAC;
     8c4:	4b04      	ldr	r3, [pc, #16]	; (8d8 <COMMUNICATION_IO_CLOCK_init+0x14>)
     8c6:	691a      	ldr	r2, [r3, #16]
     8c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     8cc:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_GMAC;
     8ce:	69da      	ldr	r2, [r3, #28]
     8d0:	f042 0204 	orr.w	r2, r2, #4
     8d4:	61da      	str	r2, [r3, #28]
     8d6:	4770      	bx	lr
     8d8:	40000800 	.word	0x40000800

000008dc <COMMUNICATION_IO_init>:
	hri_mclk_set_AHBMASK_GMAC_bit(MCLK);
	hri_mclk_set_APBCMASK_GMAC_bit(MCLK);
}

void COMMUNICATION_IO_init(void)
{
     8dc:	b508      	push	{r3, lr}
	COMMUNICATION_IO_CLOCK_init();
     8de:	4b04      	ldr	r3, [pc, #16]	; (8f0 <COMMUNICATION_IO_init+0x14>)
     8e0:	4798      	blx	r3
	mac_async_init(&COMMUNICATION_IO, GMAC);
     8e2:	4904      	ldr	r1, [pc, #16]	; (8f4 <COMMUNICATION_IO_init+0x18>)
     8e4:	4804      	ldr	r0, [pc, #16]	; (8f8 <COMMUNICATION_IO_init+0x1c>)
     8e6:	4b05      	ldr	r3, [pc, #20]	; (8fc <COMMUNICATION_IO_init+0x20>)
     8e8:	4798      	blx	r3
	COMMUNICATION_IO_PORT_init();
     8ea:	4b05      	ldr	r3, [pc, #20]	; (900 <COMMUNICATION_IO_init+0x24>)
     8ec:	4798      	blx	r3
     8ee:	bd08      	pop	{r3, pc}
     8f0:	000008c5 	.word	0x000008c5
     8f4:	42000800 	.word	0x42000800
     8f8:	20012934 	.word	0x20012934
     8fc:	00001181 	.word	0x00001181
     900:	0000077d 	.word	0x0000077d

00000904 <system_init>:
	mac_async_enable(&COMMUNICATION_IO);
	mac_async_write(&COMMUNICATION_IO, (uint8_t *)"Hello World!", 12);
}

void system_init(void)
{
     904:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     906:	4b4b      	ldr	r3, [pc, #300]	; (a34 <system_init+0x130>)
     908:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     90a:	4b4b      	ldr	r3, [pc, #300]	; (a38 <system_init+0x134>)
     90c:	2240      	movs	r2, #64	; 0x40
     90e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     910:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     912:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     916:	629a      	str	r2, [r3, #40]	; 0x28
     918:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     91c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     922:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     926:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     92a:	2180      	movs	r1, #128	; 0x80
     92c:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     92e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     930:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     934:	6299      	str	r1, [r3, #40]	; 0x28
     936:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     938:	f893 1047 	ldrb.w	r1, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     93c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     940:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     944:	2102      	movs	r1, #2
     946:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     94a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     94e:	4c3b      	ldr	r4, [pc, #236]	; (a3c <system_init+0x138>)
     950:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     954:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     958:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
	tmp &= ~PORT_PINCFG_PMUXEN;
     95c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     960:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     964:	2001      	movs	r0, #1
     966:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     96a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     96e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     972:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     976:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     97a:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
     97e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     982:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     986:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     98a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     98e:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
     992:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     996:	f893 1141 	ldrb.w	r1, [r3, #321]	; 0x141
	tmp &= ~PORT_PINCFG_PMUXEN;
     99a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     99e:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9a2:	2108      	movs	r1, #8
     9a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9a8:	4825      	ldr	r0, [pc, #148]	; (a40 <system_init+0x13c>)
     9aa:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
     9ae:	4825      	ldr	r0, [pc, #148]	; (a44 <system_init+0x140>)
     9b0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9b4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     9b8:	f893 0143 	ldrb.w	r0, [r3, #323]	; 0x143
     9bc:	f040 0004 	orr.w	r0, r0, #4
     9c0:	f883 0143 	strb.w	r0, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9c4:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c8:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
	tmp &= ~PORT_PINCFG_PMUXEN;
     9cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d0:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
     9d8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9dc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9e4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     9e8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ec:	f893 214a 	ldrb.w	r2, [r3, #330]	; 0x14a
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9f4:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     9fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a04:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     a08:	4a0f      	ldr	r2, [pc, #60]	; (a48 <system_init+0x144>)
     a0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a0e:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
	tmp &= ~PORT_PINCFG_PMUXEN;
     a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a16:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	// Set pin direction to output
	gpio_set_pin_direction(Reverse, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(Reverse, GPIO_PIN_FUNCTION_OFF);

	SteeringEncoder_IRQ_init();
     a1a:	4b0c      	ldr	r3, [pc, #48]	; (a4c <system_init+0x148>)
     a1c:	4798      	blx	r3

	TARGET_IO_init();
     a1e:	4b0c      	ldr	r3, [pc, #48]	; (a50 <system_init+0x14c>)
     a20:	4798      	blx	r3

	ACCELERATION_init();
     a22:	4b0c      	ldr	r3, [pc, #48]	; (a54 <system_init+0x150>)
     a24:	4798      	blx	r3

	STEERINGPOWER_init();
     a26:	4b0c      	ldr	r3, [pc, #48]	; (a58 <system_init+0x154>)
     a28:	4798      	blx	r3

	BRAKE_init();
     a2a:	4b0c      	ldr	r3, [pc, #48]	; (a5c <system_init+0x158>)
     a2c:	4798      	blx	r3

	COMMUNICATION_IO_init();
     a2e:	4b0c      	ldr	r3, [pc, #48]	; (a60 <system_init+0x15c>)
     a30:	4798      	blx	r3
     a32:	bd10      	pop	{r4, pc}
     a34:	00001591 	.word	0x00001591
     a38:	41008000 	.word	0x41008000
     a3c:	40000002 	.word	0x40000002
     a40:	40020008 	.word	0x40020008
     a44:	c0020000 	.word	0xc0020000
     a48:	c0004000 	.word	0xc0004000
     a4c:	000004c1 	.word	0x000004c1
     a50:	000005e9 	.word	0x000005e9
     a54:	00000659 	.word	0x00000659
     a58:	000006d1 	.word	0x000006d1
     a5c:	00000749 	.word	0x00000749
     a60:	000008dd 	.word	0x000008dd

00000a64 <InitializeLWIP>:
struct sockaddr_in ecu_addr, pc_addr;
static int lwip_initialized = 0;

int InitializeLWIP()
{
	if(lwip_initialized)
     a64:	4b0f      	ldr	r3, [pc, #60]	; (aa4 <InitializeLWIP+0x40>)
     a66:	681b      	ldr	r3, [r3, #0]
     a68:	b10b      	cbz	r3, a6e <InitializeLWIP+0xa>
	sys_sem_wait(&sem); /* Block until the lwIP stack is initialized. */
	sys_sem_free(&sem); /* Free the semaphore. */
	print_ipaddress();
	lwip_initialized = 1;
	return 0; 
}
     a6a:	2000      	movs	r0, #0
     a6c:	4770      	bx	lr
{
     a6e:	b500      	push	{lr}
     a70:	b083      	sub	sp, #12
	err_sem = sys_sem_new(&sem, 0); /* Create a new semaphore. */
     a72:	2100      	movs	r1, #0
     a74:	a801      	add	r0, sp, #4
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <InitializeLWIP+0x44>)
     a78:	4798      	blx	r3
	tcpip_init(tcpip_init_done, &sem);
     a7a:	a901      	add	r1, sp, #4
     a7c:	480b      	ldr	r0, [pc, #44]	; (aac <InitializeLWIP+0x48>)
     a7e:	4b0c      	ldr	r3, [pc, #48]	; (ab0 <InitializeLWIP+0x4c>)
     a80:	4798      	blx	r3
	sys_sem_wait(&sem); /* Block until the lwIP stack is initialized. */
     a82:	2100      	movs	r1, #0
     a84:	a801      	add	r0, sp, #4
     a86:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <InitializeLWIP+0x50>)
     a88:	4798      	blx	r3
	sys_sem_free(&sem); /* Free the semaphore. */
     a8a:	a801      	add	r0, sp, #4
     a8c:	4b0a      	ldr	r3, [pc, #40]	; (ab8 <InitializeLWIP+0x54>)
     a8e:	4798      	blx	r3
	print_ipaddress();
     a90:	4b0a      	ldr	r3, [pc, #40]	; (abc <InitializeLWIP+0x58>)
     a92:	4798      	blx	r3
	lwip_initialized = 1;
     a94:	2201      	movs	r2, #1
     a96:	4b03      	ldr	r3, [pc, #12]	; (aa4 <InitializeLWIP+0x40>)
     a98:	601a      	str	r2, [r3, #0]
}
     a9a:	2000      	movs	r0, #0
     a9c:	b003      	add	sp, #12
     a9e:	f85d fb04 	ldr.w	pc, [sp], #4
     aa2:	bf00      	nop
     aa4:	200000dc 	.word	0x200000dc
     aa8:	00002479 	.word	0x00002479
     aac:	0000c2ed 	.word	0x0000c2ed
     ab0:	00003e79 	.word	0x00003e79
     ab4:	00002509 	.word	0x00002509
     ab8:	000024dd 	.word	0x000024dd
     abc:	0000a01d 	.word	0x0000a01d

00000ac0 <decode_ethernet_inputs>:

void decode_ethernet_inputs(EthernetInputs* inputs, main_context_t* ctx)
{
     ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ac4:	4605      	mov	r5, r0
     ac6:	460c      	mov	r4, r1
	ctx->steering_angle_commanded = (((float)inputs->steering_angle_commanded - (float)0x7FFF) /  (float)0x7FFF);
     ac8:	8883      	ldrh	r3, [r0, #4]
     aca:	ee07 3a90 	vmov	s15, r3
     ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
     ad2:	ed9f 7a45 	vldr	s14, [pc, #276]	; be8 <decode_ethernet_inputs+0x128>
     ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
     ada:	eec7 6a87 	vdiv.f32	s13, s15, s14
     ade:	edc1 6a04 	vstr	s13, [r1, #16]
	ctx->vehicle_speed_commanded = (float)inputs->vehicle_speed_commanded / (float)0xFFFF;
     ae2:	8843      	ldrh	r3, [r0, #2]
     ae4:	ee07 3a90 	vmov	s15, r3
     ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
     aec:	eddf 6a3f 	vldr	s13, [pc, #252]	; bec <decode_ethernet_inputs+0x12c>
     af0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
     af4:	ed81 7a03 	vstr	s14, [r1, #12]
	ctx->park_brake_commanded = (inputs->boolean_commands & 0x1) != 0;
     af8:	8803      	ldrh	r3, [r0, #0]
     afa:	f003 0301 	and.w	r3, r3, #1
     afe:	750b      	strb	r3, [r1, #20]
	ctx->reverse_commanded = (inputs->boolean_commands & 0x2) != 0;
     b00:	8803      	ldrh	r3, [r0, #0]
     b02:	f3c3 0340 	ubfx	r3, r3, #1, #1
     b06:	754b      	strb	r3, [r1, #21]
	ctx->autonomous_mode = (inputs->boolean_commands & 0x4) != 0;
     b08:	8803      	ldrh	r3, [r0, #0]
     b0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
     b0e:	758b      	strb	r3, [r1, #22]
	ctx->override_pid = (inputs->boolean_commands & 0x8) != 0;
     b10:	8803      	ldrh	r3, [r0, #0]
     b12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     b16:	f881 3168 	strb.w	r3, [r1, #360]	; 0x168
	ctx->tele_operation_enabled = (inputs->boolean_commands & 0x10) != 0;
     b1a:	8803      	ldrh	r3, [r0, #0]
     b1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
     b20:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	ctx->speed_p_gain_override = (float)inputs->speed_p_gain * 0.000001;
     b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; bf8 <decode_ethernet_inputs+0x138>
     b28:	edd0 7a02 	vldr	s15, [r0, #8]
     b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b30:	ee17 0a90 	vmov	r0, s15
     b34:	47c0      	blx	r8
     b36:	4f2e      	ldr	r7, [pc, #184]	; (bf0 <decode_ethernet_inputs+0x130>)
     b38:	a329      	add	r3, pc, #164	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
     b3e:	47b8      	blx	r7
     b40:	4e2c      	ldr	r6, [pc, #176]	; (bf4 <decode_ethernet_inputs+0x134>)
     b42:	47b0      	blx	r6
     b44:	f8c4 0178 	str.w	r0, [r4, #376]	; 0x178
	ctx->speed_i_gain_override = (float)inputs->speed_i_gain * 0.000001;
     b48:	edd5 7a03 	vldr	s15, [r5, #12]
     b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b50:	ee17 0a90 	vmov	r0, s15
     b54:	47c0      	blx	r8
     b56:	a322      	add	r3, pc, #136	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b58:	e9d3 2300 	ldrd	r2, r3, [r3]
     b5c:	47b8      	blx	r7
     b5e:	47b0      	blx	r6
     b60:	f8c4 017c 	str.w	r0, [r4, #380]	; 0x17c
	ctx->speed_d_gain_override = (float)inputs->speed_d_gain * 0.000001;
     b64:	edd5 7a04 	vldr	s15, [r5, #16]
     b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b6c:	ee17 0a90 	vmov	r0, s15
     b70:	47c0      	blx	r8
     b72:	a31b      	add	r3, pc, #108	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b74:	e9d3 2300 	ldrd	r2, r3, [r3]
     b78:	47b8      	blx	r7
     b7a:	47b0      	blx	r6
     b7c:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
	ctx->steer_p_gain_override = (float)inputs->steering_p_gain * 0.000001;
     b80:	edd5 7a05 	vldr	s15, [r5, #20]
     b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
     b88:	ee17 0a90 	vmov	r0, s15
     b8c:	47c0      	blx	r8
     b8e:	a314      	add	r3, pc, #80	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     b90:	e9d3 2300 	ldrd	r2, r3, [r3]
     b94:	47b8      	blx	r7
     b96:	47b0      	blx	r6
     b98:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
	ctx->steer_i_gain_override = (float)inputs->steering_i_gain * 0.000001;
     b9c:	edd5 7a06 	vldr	s15, [r5, #24]
     ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
     ba4:	ee17 0a90 	vmov	r0, s15
     ba8:	47c0      	blx	r8
     baa:	a30d      	add	r3, pc, #52	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     bac:	e9d3 2300 	ldrd	r2, r3, [r3]
     bb0:	47b8      	blx	r7
     bb2:	47b0      	blx	r6
     bb4:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
	ctx->steer_d_gain_override = (float)inputs->steering_d_gain * 0.000001;
     bb8:	69e8      	ldr	r0, [r5, #28]
     bba:	ee07 0a90 	vmov	s15, r0
     bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
     bc2:	ee17 0a90 	vmov	r0, s15
     bc6:	47c0      	blx	r8
     bc8:	a305      	add	r3, pc, #20	; (adr r3, be0 <decode_ethernet_inputs+0x120>)
     bca:	e9d3 2300 	ldrd	r2, r3, [r3]
     bce:	47b8      	blx	r7
     bd0:	47b0      	blx	r6
     bd2:	f8c4 0174 	str.w	r0, [r4, #372]	; 0x174
     bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     bda:	bf00      	nop
     bdc:	f3af 8000 	nop.w
     be0:	a0b5ed8d 	.word	0xa0b5ed8d
     be4:	3eb0c6f7 	.word	0x3eb0c6f7
     be8:	46fffe00 	.word	0x46fffe00
     bec:	477fff00 	.word	0x477fff00
     bf0:	0000c759 	.word	0x0000c759
     bf4:	0000cc0d 	.word	0x0000cc0d
     bf8:	0000c6b1 	.word	0x0000c6b1

00000bfc <encode_ethernet_outputs>:

}
void encode_ethernet_outputs(EthernetOutputs* outputs, main_context_t* ctx)
{	
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	4604      	mov	r4, r0
     c00:	460d      	mov	r5, r1
	outputs->steering_angle = 10;
     c02:	230a      	movs	r3, #10
     c04:	8043      	strh	r3, [r0, #2]
	outputs->vehicle_speed = ctx->vehicle_speed * 100;
     c06:	edd1 7a06 	vldr	s15, [r1, #24]
     c0a:	ed9f 7a15 	vldr	s14, [pc, #84]	; c60 <encode_ethernet_outputs+0x64>
     c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
     c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     c16:	ee17 3a90 	vmov	r3, s15
     c1a:	8003      	strh	r3, [r0, #0]
	outputs->boolean_states = 0;
     c1c:	2300      	movs	r3, #0
     c1e:	7103      	strb	r3, [r0, #4]
	outputs->boolean_states |= ctx->estop_in > 0;
     c20:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
     c24:	3300      	adds	r3, #0
     c26:	bf18      	it	ne
     c28:	2301      	movne	r3, #1
     c2a:	7103      	strb	r3, [r0, #4]
	outputs->speed_p_term = ctx->speed_controller.lastPTerm;
     c2c:	4e0d      	ldr	r6, [pc, #52]	; (c64 <encode_ethernet_outputs+0x68>)
     c2e:	e9d1 0144 	ldrd	r0, r1, [r1, #272]	; 0x110
     c32:	47b0      	blx	r6
     c34:	60a0      	str	r0, [r4, #8]
	outputs->speed_i_term = ctx->speed_controller.lastITerm;
     c36:	e9d5 0146 	ldrd	r0, r1, [r5, #280]	; 0x118
     c3a:	47b0      	blx	r6
     c3c:	60e0      	str	r0, [r4, #12]
	outputs->speed_d_term = ctx->speed_controller.lastDTerm;
     c3e:	e9d5 0148 	ldrd	r0, r1, [r5, #288]	; 0x120
     c42:	47b0      	blx	r6
     c44:	6120      	str	r0, [r4, #16]
	outputs->steering_p_term = ctx->steering_controller.lastPTerm;
     c46:	e9d5 011e 	ldrd	r0, r1, [r5, #120]	; 0x78
     c4a:	47b0      	blx	r6
     c4c:	6160      	str	r0, [r4, #20]
	outputs->steering_i_term = ctx->steering_controller.lastITerm;
     c4e:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
     c52:	47b0      	blx	r6
     c54:	61a0      	str	r0, [r4, #24]
	outputs->steering_d_term = ctx->steering_controller.lastDTerm;
     c56:	e9d5 0122 	ldrd	r0, r1, [r5, #136]	; 0x88
     c5a:	47b0      	blx	r6
     c5c:	61e0      	str	r0, [r4, #28]
     c5e:	bd70      	pop	{r4, r5, r6, pc}
     c60:	42c80000 	.word	0x42c80000
     c64:	0000cbcd 	.word	0x0000cbcd

00000c68 <ethernet_thread>:
}


void ethernet_thread(void *p)
{
     c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c6c:	b0ac      	sub	sp, #176	; 0xb0
     c6e:	4605      	mov	r5, r0
	main_context_t* ctx = (main_context_t*)p;
	EthernetInputs eth_inputs;
	EthernetOutputs eth_outputs;

	memset(&eth_inputs, 0, sizeof(eth_inputs));
     c70:	2620      	movs	r6, #32
     c72:	4632      	mov	r2, r6
     c74:	2100      	movs	r1, #0
     c76:	a824      	add	r0, sp, #144	; 0x90
     c78:	4c4d      	ldr	r4, [pc, #308]	; (db0 <ethernet_thread+0x148>)
     c7a:	47a0      	blx	r4
	memset(&eth_outputs, 0, sizeof(eth_outputs));
     c7c:	4632      	mov	r2, r6
     c7e:	2100      	movs	r1, #0
     c80:	a81c      	add	r0, sp, #112	; 0x70
     c82:	47a0      	blx	r4

	InitializeLWIP();
     c84:	4b4b      	ldr	r3, [pc, #300]	; (db4 <ethernet_thread+0x14c>)
     c86:	4798      	blx	r3

	struct sockaddr_in sa, ra;
	int s_create, new_socket;
	int socket_check;
	int opt = 1;
     c88:	ac2c      	add	r4, sp, #176	; 0xb0
     c8a:	2301      	movs	r3, #1
     c8c:	f844 3d64 	str.w	r3, [r4, #-100]!
	Specifies the communications domain in which a socket is to be created.
	type
	Specifies the type of socket to be created.
	protocol
	Specifies a particular protocol to be used with the socket. Specifying a protocol of 0 causes socket() to use an unspecified default protocol appropriate for the requested socket type. */
	s_create = socket(AF_INET, SOCK_DGRAM, 0);
     c90:	2200      	movs	r2, #0
     c92:	2102      	movs	r1, #2
     c94:	4608      	mov	r0, r1
     c96:	4b48      	ldr	r3, [pc, #288]	; (db8 <ethernet_thread+0x150>)
     c98:	4798      	blx	r3
     c9a:	4606      	mov	r6, r0

	//The setsockopt() function provides an application program with the means to control socket behavior.
	setsockopt(s_create, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt));
     c9c:	2304      	movs	r3, #4
     c9e:	9300      	str	r3, [sp, #0]
     ca0:	4623      	mov	r3, r4
     ca2:	f44f 7201 	mov.w	r2, #516	; 0x204
     ca6:	f640 71ff 	movw	r1, #4095	; 0xfff
     caa:	4c44      	ldr	r4, [pc, #272]	; (dbc <ethernet_thread+0x154>)
     cac:	47a0      	blx	r4

	//Destination
	memset(&ra, 0, sizeof(ra));
     cae:	2400      	movs	r4, #0
     cb0:	9414      	str	r4, [sp, #80]	; 0x50
     cb2:	9415      	str	r4, [sp, #84]	; 0x54
     cb4:	9416      	str	r4, [sp, #88]	; 0x58
     cb6:	9417      	str	r4, [sp, #92]	; 0x5c
	ra.sin_family 		= AF_INET;
     cb8:	f04f 0a02 	mov.w	sl, #2
     cbc:	f88d a051 	strb.w	sl, [sp, #81]	; 0x51
	ra.sin_addr.s_addr	= htonl(INADDR_BROADCAST);
     cc0:	f04f 30ff 	mov.w	r0, #4294967295
     cc4:	f8df 9134 	ldr.w	r9, [pc, #308]	; dfc <ethernet_thread+0x194>
     cc8:	47c8      	blx	r9
     cca:	9015      	str	r0, [sp, #84]	; 0x54
	ra.sin_port        	= htons(12090);
     ccc:	f642 703a 	movw	r0, #12090	; 0x2f3a
     cd0:	f8df 812c 	ldr.w	r8, [pc, #300]	; e00 <ethernet_thread+0x198>
     cd4:	47c0      	blx	r8
     cd6:	f8ad 0052 	strh.w	r0, [sp, #82]	; 0x52
	ra.sin_len			= sizeof(ra);
     cda:	2710      	movs	r7, #16
     cdc:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50

	//Source
	memset(&sa, 0, sizeof(sa));
     ce0:	9418      	str	r4, [sp, #96]	; 0x60
     ce2:	9419      	str	r4, [sp, #100]	; 0x64
     ce4:	941a      	str	r4, [sp, #104]	; 0x68
     ce6:	941b      	str	r4, [sp, #108]	; 0x6c
	sa.sin_family		= AF_INET;
     ce8:	f88d a061 	strb.w	sl, [sp, #97]	; 0x61
	sa.sin_addr.s_addr	= htonl(INADDR_ANY);
     cec:	4620      	mov	r0, r4
     cee:	47c8      	blx	r9
     cf0:	9019      	str	r0, [sp, #100]	; 0x64
	sa.sin_port			= htons(12089);
     cf2:	f642 7039 	movw	r0, #12089	; 0x2f39
     cf6:	47c0      	blx	r8
     cf8:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
	sa.sin_len			= sizeof(sa);
     cfc:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60

	/* bind the connection to port */
	socket_check = bind(s_create, (struct sockaddr *)&sa, sizeof(sa));
     d00:	463a      	mov	r2, r7
     d02:	a918      	add	r1, sp, #96	; 0x60
     d04:	4630      	mov	r0, r6
     d06:	4b2e      	ldr	r3, [pc, #184]	; (dc0 <ethernet_thread+0x158>)
     d08:	4798      	blx	r3
	if (socket_check < 0) {
     d0a:	42a0      	cmp	r0, r4
     d0c:	da31      	bge.n	d72 <ethernet_thread+0x10a>
		

		xSemaphoreGive(ctx->sem);
		vTaskDelay(TRANSMIT_INTERVAL);
	}
     d0e:	b02c      	add	sp, #176	; 0xb0
     d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		encode_ethernet_outputs(&eth_outputs, ctx);
     d14:	4629      	mov	r1, r5
     d16:	a81c      	add	r0, sp, #112	; 0x70
     d18:	4b2a      	ldr	r3, [pc, #168]	; (dc4 <ethernet_thread+0x15c>)
     d1a:	4798      	blx	r3
		sendto(s_create, &eth_outputs, sizeof(eth_outputs), 0, (struct sockaddr*)&ra, sizeof(ra));
     d1c:	2310      	movs	r3, #16
     d1e:	9301      	str	r3, [sp, #4]
     d20:	ab14      	add	r3, sp, #80	; 0x50
     d22:	9300      	str	r3, [sp, #0]
     d24:	2300      	movs	r3, #0
     d26:	2220      	movs	r2, #32
     d28:	a91c      	add	r1, sp, #112	; 0x70
     d2a:	4630      	mov	r0, r6
     d2c:	4c26      	ldr	r4, [pc, #152]	; (dc8 <ethernet_thread+0x160>)
     d2e:	47a0      	blx	r4
		num_bytes_received = recv(s_create, &buffer, sizeof(buffer), MSG_DONTWAIT);
     d30:	2308      	movs	r3, #8
     d32:	2240      	movs	r2, #64	; 0x40
     d34:	a903      	add	r1, sp, #12
     d36:	4630      	mov	r0, r6
     d38:	4c24      	ldr	r4, [pc, #144]	; (dcc <ethernet_thread+0x164>)
     d3a:	47a0      	blx	r4
     d3c:	4604      	mov	r4, r0
		if (num_bytes_received == -1)
     d3e:	f1b0 3fff 	cmp.w	r0, #4294967295
     d42:	d022      	beq.n	d8a <ethernet_thread+0x122>
		if(num_bytes_received > 0)
     d44:	2c00      	cmp	r4, #0
     d46:	dd0b      	ble.n	d60 <ethernet_thread+0xf8>
			memcpy(&eth_inputs.boolean_commands, buffer, num_bytes_received);
     d48:	4622      	mov	r2, r4
     d4a:	a903      	add	r1, sp, #12
     d4c:	a824      	add	r0, sp, #144	; 0x90
     d4e:	4b20      	ldr	r3, [pc, #128]	; (dd0 <ethernet_thread+0x168>)
     d50:	4798      	blx	r3
			ctx->last_eth_input_rx_time = xTaskGetTickCount();
     d52:	4b20      	ldr	r3, [pc, #128]	; (dd4 <ethernet_thread+0x16c>)
     d54:	4798      	blx	r3
     d56:	6068      	str	r0, [r5, #4]
			decode_ethernet_inputs(&eth_inputs, ctx);
     d58:	4629      	mov	r1, r5
     d5a:	a824      	add	r0, sp, #144	; 0x90
     d5c:	4b1e      	ldr	r3, [pc, #120]	; (dd8 <ethernet_thread+0x170>)
     d5e:	4798      	blx	r3
		xSemaphoreGive(ctx->sem);
     d60:	2300      	movs	r3, #0
     d62:	461a      	mov	r2, r3
     d64:	4619      	mov	r1, r3
     d66:	6828      	ldr	r0, [r5, #0]
     d68:	4c1c      	ldr	r4, [pc, #112]	; (ddc <ethernet_thread+0x174>)
     d6a:	47a0      	blx	r4
		vTaskDelay(TRANSMIT_INTERVAL);
     d6c:	200a      	movs	r0, #10
     d6e:	4b1c      	ldr	r3, [pc, #112]	; (de0 <ethernet_thread+0x178>)
     d70:	4798      	blx	r3
		if( xSemaphoreTake(ctx->sem, 100) != pdTRUE)
     d72:	2300      	movs	r3, #0
     d74:	2264      	movs	r2, #100	; 0x64
     d76:	4619      	mov	r1, r3
     d78:	6828      	ldr	r0, [r5, #0]
     d7a:	4c1a      	ldr	r4, [pc, #104]	; (de4 <ethernet_thread+0x17c>)
     d7c:	47a0      	blx	r4
     d7e:	2801      	cmp	r0, #1
     d80:	d0c8      	beq.n	d14 <ethernet_thread+0xac>
			vTaskDelay(1);
     d82:	2001      	movs	r0, #1
     d84:	4b16      	ldr	r3, [pc, #88]	; (de0 <ethernet_thread+0x178>)
     d86:	4798      	blx	r3
			continue;
     d88:	e7f3      	b.n	d72 <ethernet_thread+0x10a>
			fprintf(stderr, "recv: %s (%d)\n, Number of bytes received: %d\n", strerror(errno), errno, num_bytes_received);
     d8a:	4b17      	ldr	r3, [pc, #92]	; (de8 <ethernet_thread+0x180>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	f8d3 800c 	ldr.w	r8, [r3, #12]
     d92:	4f16      	ldr	r7, [pc, #88]	; (dec <ethernet_thread+0x184>)
     d94:	47b8      	blx	r7
     d96:	6800      	ldr	r0, [r0, #0]
     d98:	4b15      	ldr	r3, [pc, #84]	; (df0 <ethernet_thread+0x188>)
     d9a:	4798      	blx	r3
     d9c:	4681      	mov	r9, r0
     d9e:	47b8      	blx	r7
     da0:	6803      	ldr	r3, [r0, #0]
     da2:	9400      	str	r4, [sp, #0]
     da4:	464a      	mov	r2, r9
     da6:	4913      	ldr	r1, [pc, #76]	; (df4 <ethernet_thread+0x18c>)
     da8:	4640      	mov	r0, r8
     daa:	4f13      	ldr	r7, [pc, #76]	; (df8 <ethernet_thread+0x190>)
     dac:	47b8      	blx	r7
     dae:	e7c9      	b.n	d44 <ethernet_thread+0xdc>
     db0:	0000cd69 	.word	0x0000cd69
     db4:	00000a65 	.word	0x00000a65
     db8:	00003af5 	.word	0x00003af5
     dbc:	00003b7d 	.word	0x00003b7d
     dc0:	000036b5 	.word	0x000036b5
     dc4:	00000bfd 	.word	0x00000bfd
     dc8:	00003985 	.word	0x00003985
     dcc:	0000396d 	.word	0x0000396d
     dd0:	0000cd53 	.word	0x0000cd53
     dd4:	0000b6ad 	.word	0x0000b6ad
     dd8:	00000ac1 	.word	0x00000ac1
     ddc:	0000ad55 	.word	0x0000ad55
     de0:	0000b8ed 	.word	0x0000b8ed
     de4:	0000b10d 	.word	0x0000b10d
     de8:	20000054 	.word	0x20000054
     dec:	0000ccad 	.word	0x0000ccad
     df0:	0000dac9 	.word	0x0000dac9
     df4:	0000e21c 	.word	0x0000e21c
     df8:	0000ccb9 	.word	0x0000ccb9
     dfc:	00003ed9 	.word	0x00003ed9
     e00:	00003ec1 	.word	0x00003ec1

00000e04 <ethernet_phy_init>:
/**
 * \brief Perform a HW initialization to the PHY
 */
int32_t ethernet_phy_init(struct ethernet_phy_descriptor *const descr, struct mac_async_descriptor *const mac,
                          uint16_t addr)
{
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	460d      	mov	r5, r1
     e08:	4616      	mov	r6, r2
	ASSERT(descr && mac && (addr <= 0x1F));
     e0a:	4604      	mov	r4, r0
     e0c:	b158      	cbz	r0, e26 <ethernet_phy_init+0x22>
     e0e:	b161      	cbz	r1, e2a <ethernet_phy_init+0x26>
     e10:	2a1f      	cmp	r2, #31
     e12:	d90c      	bls.n	e2e <ethernet_phy_init+0x2a>
     e14:	2000      	movs	r0, #0
     e16:	222a      	movs	r2, #42	; 0x2a
     e18:	4906      	ldr	r1, [pc, #24]	; (e34 <ethernet_phy_init+0x30>)
     e1a:	4b07      	ldr	r3, [pc, #28]	; (e38 <ethernet_phy_init+0x34>)
     e1c:	4798      	blx	r3

	descr->mac  = mac;
     e1e:	6025      	str	r5, [r4, #0]
	descr->addr = addr;
     e20:	80a6      	strh	r6, [r4, #4]
	return ERR_NONE;
}
     e22:	2000      	movs	r0, #0
     e24:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && mac && (addr <= 0x1F));
     e26:	2000      	movs	r0, #0
     e28:	e7f5      	b.n	e16 <ethernet_phy_init+0x12>
     e2a:	2000      	movs	r0, #0
     e2c:	e7f3      	b.n	e16 <ethernet_phy_init+0x12>
     e2e:	2001      	movs	r0, #1
     e30:	e7f1      	b.n	e16 <ethernet_phy_init+0x12>
     e32:	bf00      	nop
     e34:	0000e24c 	.word	0x0000e24c
     e38:	0000154d 	.word	0x0000154d

00000e3c <ethernet_phy_get_link_status>:

/**
 * \brief Get PHY link status
 */
int32_t ethernet_phy_get_link_status(struct ethernet_phy_descriptor *const descr, bool *status)
{
     e3c:	b530      	push	{r4, r5, lr}
     e3e:	b083      	sub	sp, #12
     e40:	460d      	mov	r5, r1
	int32_t  rst;
	uint16_t val;

	ASSERT(descr && descr->mac && status);
     e42:	4604      	mov	r4, r0
     e44:	b1d0      	cbz	r0, e7c <ethernet_phy_get_link_status+0x40>
     e46:	6803      	ldr	r3, [r0, #0]
     e48:	b1d3      	cbz	r3, e80 <ethernet_phy_get_link_status+0x44>
     e4a:	b1a9      	cbz	r1, e78 <ethernet_phy_get_link_status+0x3c>
     e4c:	2001      	movs	r0, #1
     e4e:	22a9      	movs	r2, #169	; 0xa9
     e50:	490c      	ldr	r1, [pc, #48]	; (e84 <ethernet_phy_get_link_status+0x48>)
     e52:	4b0d      	ldr	r3, [pc, #52]	; (e88 <ethernet_phy_get_link_status+0x4c>)
     e54:	4798      	blx	r3
	rst = mac_async_read_phy_reg(descr->mac, descr->addr, MDIO_REG1_BMSR, &val);
     e56:	f10d 0306 	add.w	r3, sp, #6
     e5a:	2201      	movs	r2, #1
     e5c:	88a1      	ldrh	r1, [r4, #4]
     e5e:	6820      	ldr	r0, [r4, #0]
     e60:	4c0a      	ldr	r4, [pc, #40]	; (e8c <ethernet_phy_get_link_status+0x50>)
     e62:	47a0      	blx	r4
	if (rst == ERR_NONE) {
     e64:	4602      	mov	r2, r0
     e66:	b920      	cbnz	r0, e72 <ethernet_phy_get_link_status+0x36>
		*status = (val & MDIO_REG1_BIT_LINK_STATUS) ? true : false;
     e68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     e6c:	f3c3 0380 	ubfx	r3, r3, #2, #1
     e70:	702b      	strb	r3, [r5, #0]
	}
	return rst;
}
     e72:	4610      	mov	r0, r2
     e74:	b003      	add	sp, #12
     e76:	bd30      	pop	{r4, r5, pc}
	ASSERT(descr && descr->mac && status);
     e78:	2000      	movs	r0, #0
     e7a:	e7e8      	b.n	e4e <ethernet_phy_get_link_status+0x12>
     e7c:	2000      	movs	r0, #0
     e7e:	e7e6      	b.n	e4e <ethernet_phy_get_link_status+0x12>
     e80:	2000      	movs	r0, #0
     e82:	e7e4      	b.n	e4e <ethernet_phy_get_link_status+0x12>
     e84:	0000e24c 	.word	0x0000e24c
     e88:	0000154d 	.word	0x0000154d
     e8c:	00001309 	.word	0x00001309

00000e90 <ETHERNET_PHY_0_init>:
#include <ethernet_phy_main.h>

struct ethernet_phy_descriptor ETHERNET_PHY_0_desc;

void ETHERNET_PHY_0_init(void)
{
     e90:	b510      	push	{r4, lr}
	mac_async_enable(&COMMUNICATION_IO);
     e92:	4c05      	ldr	r4, [pc, #20]	; (ea8 <ETHERNET_PHY_0_init+0x18>)
     e94:	4620      	mov	r0, r4
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <ETHERNET_PHY_0_init+0x1c>)
     e98:	4798      	blx	r3
	ethernet_phy_init(&ETHERNET_PHY_0_desc, &COMMUNICATION_IO, CONF_ETHERNET_PHY_0_IEEE8023_MII_PHY_ADDRESS);
     e9a:	2200      	movs	r2, #0
     e9c:	4621      	mov	r1, r4
     e9e:	4804      	ldr	r0, [pc, #16]	; (eb0 <ETHERNET_PHY_0_init+0x20>)
     ea0:	4b04      	ldr	r3, [pc, #16]	; (eb4 <ETHERNET_PHY_0_init+0x24>)
     ea2:	4798      	blx	r3
     ea4:	bd10      	pop	{r4, pc}
     ea6:	bf00      	nop
     ea8:	20012934 	.word	0x20012934
     eac:	000011b5 	.word	0x000011b5
     eb0:	2001296c 	.word	0x2001296c
     eb4:	00000e05 	.word	0x00000e05

00000eb8 <ethernet_phys_init>:
		rst = ethernet_phy_get_link_status(&ETHERNET_PHY_0_desc, &link_state);
	} while (rst == ERR_NONE && link_state == true);
}

void ethernet_phys_init(void)
{
     eb8:	b508      	push	{r3, lr}

	ETHERNET_PHY_0_init();
     eba:	4b01      	ldr	r3, [pc, #4]	; (ec0 <ethernet_phys_init+0x8>)
     ebc:	4798      	blx	r3
     ebe:	bd08      	pop	{r3, pc}
     ec0:	00000e91 	.word	0x00000e91

00000ec4 <TCPIP_STACK_INTERFACE_0_stack_init>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK  if the loopif is initialized
 */
err_t TCPIP_STACK_INTERFACE_0_stack_init(struct netif *netif)
{
     ec4:	b508      	push	{r3, lr}
     ec6:	4602      	mov	r2, r0
	LWIP_ASSERT("netif != NULL", (netif != NULL));
	LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));

	netif->output     = etharp_output;
     ec8:	4b0e      	ldr	r3, [pc, #56]	; (f04 <TCPIP_STACK_INTERFACE_0_stack_init+0x40>)
     eca:	6143      	str	r3, [r0, #20]
	netif->linkoutput = mac_low_level_output;
     ecc:	4b0e      	ldr	r3, [pc, #56]	; (f08 <TCPIP_STACK_INTERFACE_0_stack_init+0x44>)
     ece:	6183      	str	r3, [r0, #24]

	/* device capabilities */
	TCPIP_STACK_INTERFACE_0_desc.flags = CONF_TCPIP_STACK_INTERFACE_0_FLAG;
     ed0:	4b0e      	ldr	r3, [pc, #56]	; (f0c <TCPIP_STACK_INTERFACE_0_stack_init+0x48>)
     ed2:	2162      	movs	r1, #98	; 0x62
     ed4:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	TCPIP_STACK_INTERFACE_0_desc.mtu   = CONF_TCPIP_STACK_INTERFACE_0_MTU;
     ed8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
     edc:	8519      	strh	r1, [r3, #40]	; 0x28

	/* set MAC hardware address length */
	memcpy(TCPIP_STACK_INTERFACE_0_desc.hwaddr, TCPIP_STACK_INTERFACE_0_hwaddr, NETIF_MAX_HWADDR_LEN);
     ede:	490c      	ldr	r1, [pc, #48]	; (f10 <TCPIP_STACK_INTERFACE_0_stack_init+0x4c>)
     ee0:	6808      	ldr	r0, [r1, #0]
     ee2:	f8c3 002b 	str.w	r0, [r3, #43]	; 0x2b
     ee6:	8889      	ldrh	r1, [r1, #4]
     ee8:	f8a3 102f 	strh.w	r1, [r3, #47]	; 0x2f
	TCPIP_STACK_INTERFACE_0_desc.hwaddr_len = ETHARP_HWADDR_LEN;
     eec:	2106      	movs	r1, #6
     eee:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a

#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	LWIP_MACIF_desc.hostname = CONF_TCPIP_STACK_INTERFACE_0_HOSTNAME;
#endif
	memcpy(TCPIP_STACK_INTERFACE_0_desc.name, CONF_TCPIP_STACK_INTERFACE_0_HOSTNAME_ABBR, 2);
     ef2:	f646 6165 	movw	r1, #28261	; 0x6e65
     ef6:	8659      	strh	r1, [r3, #50]	; 0x32

	/* initialize the mac hardware */
	mac_low_level_init(netif);
     ef8:	4610      	mov	r0, r2
     efa:	4b06      	ldr	r3, [pc, #24]	; (f14 <TCPIP_STACK_INTERFACE_0_stack_init+0x50>)
     efc:	4798      	blx	r3

	return ERR_OK;
}
     efe:	2000      	movs	r0, #0
     f00:	bd08      	pop	{r3, pc}
     f02:	bf00      	nop
     f04:	00009c95 	.word	0x00009c95
     f08:	00002389 	.word	0x00002389
     f0c:	20012974 	.word	0x20012974
     f10:	200000e0 	.word	0x200000e0
     f14:	0000235d 	.word	0x0000235d

00000f18 <TCPIP_STACK_INTERFACE_0_init>:
void TCPIP_STACK_INTERFACE_0_init(u8_t hwaddr[6])
{
     f18:	b530      	push	{r4, r5, lr}
     f1a:	b089      	sub	sp, #36	; 0x24
     f1c:	4605      	mov	r5, r0
#if CONF_TCPIP_STACK_INTERFACE_0_DHCP
	ip_addr_set_zero(&ip);
	ip_addr_set_zero(&nm);
	ip_addr_set_zero(&gw);
#else
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_IP, &ip);
     f1e:	a907      	add	r1, sp, #28
     f20:	480d      	ldr	r0, [pc, #52]	; (f58 <TCPIP_STACK_INTERFACE_0_init+0x40>)
     f22:	4c0e      	ldr	r4, [pc, #56]	; (f5c <TCPIP_STACK_INTERFACE_0_init+0x44>)
     f24:	47a0      	blx	r4
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_NETMASK, &nm);
     f26:	a906      	add	r1, sp, #24
     f28:	480d      	ldr	r0, [pc, #52]	; (f60 <TCPIP_STACK_INTERFACE_0_init+0x48>)
     f2a:	47a0      	blx	r4
	ipaddr_aton(CONF_TCPIP_STACK_INTERFACE_0_GATEWAY, &gw);
     f2c:	a905      	add	r1, sp, #20
     f2e:	480d      	ldr	r0, [pc, #52]	; (f64 <TCPIP_STACK_INTERFACE_0_init+0x4c>)
     f30:	47a0      	blx	r4
#endif
	memcpy(TCPIP_STACK_INTERFACE_0_hwaddr, hwaddr, 6);
     f32:	4b0d      	ldr	r3, [pc, #52]	; (f68 <TCPIP_STACK_INTERFACE_0_init+0x50>)
     f34:	6828      	ldr	r0, [r5, #0]
     f36:	6018      	str	r0, [r3, #0]
     f38:	88aa      	ldrh	r2, [r5, #4]
     f3a:	809a      	strh	r2, [r3, #4]

	netif_add(&TCPIP_STACK_INTERFACE_0_desc,
     f3c:	4b0b      	ldr	r3, [pc, #44]	; (f6c <TCPIP_STACK_INTERFACE_0_init+0x54>)
     f3e:	9302      	str	r3, [sp, #8]
     f40:	4b0b      	ldr	r3, [pc, #44]	; (f70 <TCPIP_STACK_INTERFACE_0_init+0x58>)
     f42:	9301      	str	r3, [sp, #4]
     f44:	4b0b      	ldr	r3, [pc, #44]	; (f74 <TCPIP_STACK_INTERFACE_0_init+0x5c>)
     f46:	9300      	str	r3, [sp, #0]
     f48:	ab05      	add	r3, sp, #20
     f4a:	aa06      	add	r2, sp, #24
     f4c:	a907      	add	r1, sp, #28
     f4e:	480a      	ldr	r0, [pc, #40]	; (f78 <TCPIP_STACK_INTERFACE_0_init+0x60>)
     f50:	4c0a      	ldr	r4, [pc, #40]	; (f7c <TCPIP_STACK_INTERFACE_0_init+0x64>)
     f52:	47a0      	blx	r4
	          &nm,
	          &gw,
	          (void *)&COMMUNICATION_IO,
	          TCPIP_STACK_INTERFACE_0_stack_init,
	          ethernet_input);
}
     f54:	b009      	add	sp, #36	; 0x24
     f56:	bd30      	pop	{r4, r5, pc}
     f58:	0000e26c 	.word	0x0000e26c
     f5c:	00005161 	.word	0x00005161
     f60:	0000e27c 	.word	0x0000e27c
     f64:	0000e28c 	.word	0x0000e28c
     f68:	200000e0 	.word	0x200000e0
     f6c:	00009dc1 	.word	0x00009dc1
     f70:	00000ec5 	.word	0x00000ec5
     f74:	20012934 	.word	0x20012934
     f78:	20012974 	.word	0x20012974
     f7c:	00005df5 	.word	0x00005df5

00000f80 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     f80:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     f84:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f86:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f88:	f3bf 8f5f 	dmb	sy
     f8c:	4770      	bx	lr

00000f8e <atomic_leave_critical>:
     f8e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     f92:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f94:	f383 8810 	msr	PRIMASK, r3
     f98:	4770      	bx	lr
	...

00000f9c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     f9c:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     f9e:	2502      	movs	r5, #2
     fa0:	2400      	movs	r4, #0

	while (upper >= lower) {
     fa2:	e007      	b.n	fb4 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     fa4:	4a0d      	ldr	r2, [pc, #52]	; (fdc <process_ext_irq+0x40>)
     fa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     faa:	b1b3      	cbz	r3, fda <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     fac:	4798      	blx	r3
     fae:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     fb0:	3a01      	subs	r2, #1
     fb2:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     fb4:	42ac      	cmp	r4, r5
     fb6:	d810      	bhi.n	fda <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     fb8:	192b      	adds	r3, r5, r4
     fba:	105b      	asrs	r3, r3, #1
     fbc:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     fbe:	2a01      	cmp	r2, #1
     fc0:	d80b      	bhi.n	fda <process_ext_irq+0x3e>
     fc2:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     fc4:	4905      	ldr	r1, [pc, #20]	; (fdc <process_ext_irq+0x40>)
     fc6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     fca:	6849      	ldr	r1, [r1, #4]
     fcc:	4281      	cmp	r1, r0
     fce:	d0e9      	beq.n	fa4 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     fd0:	4281      	cmp	r1, r0
     fd2:	d2ed      	bcs.n	fb0 <process_ext_irq+0x14>
			lower = middle + 1;
     fd4:	3201      	adds	r2, #1
     fd6:	b2d4      	uxtb	r4, r2
     fd8:	e7ec      	b.n	fb4 <process_ext_irq+0x18>
     fda:	bd38      	pop	{r3, r4, r5, pc}
     fdc:	200000e8 	.word	0x200000e8

00000fe0 <ext_irq_init>:
{
     fe0:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     fe2:	2300      	movs	r3, #0
     fe4:	e00a      	b.n	ffc <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     fe6:	4a08      	ldr	r2, [pc, #32]	; (1008 <ext_irq_init+0x28>)
     fe8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     fec:	f04f 30ff 	mov.w	r0, #4294967295
     ff0:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     ff2:	2100      	movs	r1, #0
     ff4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     ff8:	3301      	adds	r3, #1
     ffa:	b29b      	uxth	r3, r3
     ffc:	2b01      	cmp	r3, #1
     ffe:	d9f2      	bls.n	fe6 <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
    1000:	4802      	ldr	r0, [pc, #8]	; (100c <ext_irq_init+0x2c>)
    1002:	4b03      	ldr	r3, [pc, #12]	; (1010 <ext_irq_init+0x30>)
    1004:	4798      	blx	r3
}
    1006:	bd08      	pop	{r3, pc}
    1008:	200000e8 	.word	0x200000e8
    100c:	00000f9d 	.word	0x00000f9d
    1010:	00001691 	.word	0x00001691

00001014 <ext_irq_register>:
{
    1014:	b5f0      	push	{r4, r5, r6, r7, lr}
    1016:	b083      	sub	sp, #12
    1018:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
    101a:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
    101c:	2b01      	cmp	r3, #1
    101e:	d80e      	bhi.n	103e <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
    1020:	4618      	mov	r0, r3
    1022:	4a2e      	ldr	r2, [pc, #184]	; (10dc <ext_irq_register+0xc8>)
    1024:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1028:	6852      	ldr	r2, [r2, #4]
    102a:	42a2      	cmp	r2, r4
    102c:	d002      	beq.n	1034 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
    102e:	3301      	adds	r3, #1
    1030:	b2db      	uxtb	r3, r3
    1032:	e7f3      	b.n	101c <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
    1034:	4b29      	ldr	r3, [pc, #164]	; (10dc <ext_irq_register+0xc8>)
    1036:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
    103a:	2501      	movs	r5, #1
			break;
    103c:	e000      	b.n	1040 <ext_irq_register+0x2c>
	bool    found = false;
    103e:	2500      	movs	r5, #0
	if (NULL == cb) {
    1040:	b159      	cbz	r1, 105a <ext_irq_register+0x46>
	if (!found) {
    1042:	2d00      	cmp	r5, #0
    1044:	d13d      	bne.n	10c2 <ext_irq_register+0xae>
    1046:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1048:	2b01      	cmp	r3, #1
    104a:	d813      	bhi.n	1074 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
    104c:	4a23      	ldr	r2, [pc, #140]	; (10dc <ext_irq_register+0xc8>)
    104e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    1052:	b142      	cbz	r2, 1066 <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    1054:	3301      	adds	r3, #1
    1056:	b2db      	uxtb	r3, r3
    1058:	e7f6      	b.n	1048 <ext_irq_register+0x34>
		if (!found) {
    105a:	2d00      	cmp	r5, #0
    105c:	d038      	beq.n	10d0 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
    105e:	4620      	mov	r0, r4
    1060:	4b1f      	ldr	r3, [pc, #124]	; (10e0 <ext_irq_register+0xcc>)
    1062:	4798      	blx	r3
    1064:	e032      	b.n	10cc <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
    1066:	4a1d      	ldr	r2, [pc, #116]	; (10dc <ext_irq_register+0xc8>)
    1068:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
    106c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1070:	6054      	str	r4, [r2, #4]
				found           = true;
    1072:	2501      	movs	r5, #1
    1074:	2200      	movs	r2, #0
    1076:	e001      	b.n	107c <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1078:	3201      	adds	r2, #1
    107a:	b2d2      	uxtb	r2, r2
    107c:	2a01      	cmp	r2, #1
    107e:	d820      	bhi.n	10c2 <ext_irq_register+0xae>
    1080:	2b01      	cmp	r3, #1
    1082:	d81e      	bhi.n	10c2 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1084:	469e      	mov	lr, r3
    1086:	4915      	ldr	r1, [pc, #84]	; (10dc <ext_irq_register+0xc8>)
    1088:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    108c:	6840      	ldr	r0, [r0, #4]
    108e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1092:	6849      	ldr	r1, [r1, #4]
    1094:	4288      	cmp	r0, r1
    1096:	d2ef      	bcs.n	1078 <ext_irq_register+0x64>
    1098:	f1b1 3fff 	cmp.w	r1, #4294967295
    109c:	d0ec      	beq.n	1078 <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
    109e:	4f0f      	ldr	r7, [pc, #60]	; (10dc <ext_irq_register+0xc8>)
    10a0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    10a4:	e896 0003 	ldmia.w	r6, {r0, r1}
    10a8:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
    10ac:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    10b0:	e897 0003 	ldmia.w	r7, {r0, r1}
    10b4:	e886 0003 	stmia.w	r6, {r0, r1}
				ext_irqs[i] = tmp;
    10b8:	e89d 0003 	ldmia.w	sp, {r0, r1}
    10bc:	e887 0003 	stmia.w	r7, {r0, r1}
    10c0:	e7da      	b.n	1078 <ext_irq_register+0x64>
	if (!found) {
    10c2:	b145      	cbz	r5, 10d6 <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
    10c4:	2101      	movs	r1, #1
    10c6:	4620      	mov	r0, r4
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <ext_irq_register+0xcc>)
    10ca:	4798      	blx	r3
}
    10cc:	b003      	add	sp, #12
    10ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
    10d0:	f06f 000c 	mvn.w	r0, #12
    10d4:	e7fa      	b.n	10cc <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
    10d6:	f06f 000c 	mvn.w	r0, #12
    10da:	e7f7      	b.n	10cc <ext_irq_register+0xb8>
    10dc:	200000e8 	.word	0x200000e8
    10e0:	00001769 	.word	0x00001769

000010e4 <ext_irq_enable>:
{
    10e4:	b508      	push	{r3, lr}
	return _ext_irq_enable(pin, true);
    10e6:	2101      	movs	r1, #1
    10e8:	4b01      	ldr	r3, [pc, #4]	; (10f0 <ext_irq_enable+0xc>)
    10ea:	4798      	blx	r3
}
    10ec:	bd08      	pop	{r3, pc}
    10ee:	bf00      	nop
    10f0:	00001769 	.word	0x00001769

000010f4 <ext_irq_disable>:
{
    10f4:	b508      	push	{r3, lr}
	return _ext_irq_enable(pin, false);
    10f6:	2100      	movs	r1, #0
    10f8:	4b01      	ldr	r3, [pc, #4]	; (1100 <ext_irq_disable+0xc>)
    10fa:	4798      	blx	r3
}
    10fc:	bd08      	pop	{r3, pc}
    10fe:	bf00      	nop
    1100:	00001769 	.word	0x00001769

00001104 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1104:	b570      	push	{r4, r5, r6, lr}
    1106:	460d      	mov	r5, r1
    1108:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    110a:	4604      	mov	r4, r0
    110c:	b168      	cbz	r0, 112a <io_write+0x26>
    110e:	b151      	cbz	r1, 1126 <io_write+0x22>
    1110:	2001      	movs	r0, #1
    1112:	2234      	movs	r2, #52	; 0x34
    1114:	4906      	ldr	r1, [pc, #24]	; (1130 <io_write+0x2c>)
    1116:	4b07      	ldr	r3, [pc, #28]	; (1134 <io_write+0x30>)
    1118:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    111a:	6823      	ldr	r3, [r4, #0]
    111c:	4632      	mov	r2, r6
    111e:	4629      	mov	r1, r5
    1120:	4620      	mov	r0, r4
    1122:	4798      	blx	r3
}
    1124:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    1126:	2000      	movs	r0, #0
    1128:	e7f3      	b.n	1112 <io_write+0xe>
    112a:	2000      	movs	r0, #0
    112c:	e7f1      	b.n	1112 <io_write+0xe>
    112e:	bf00      	nop
    1130:	0000e298 	.word	0x0000e298
    1134:	0000154d 	.word	0x0000154d

00001138 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1138:	b570      	push	{r4, r5, r6, lr}
    113a:	460d      	mov	r5, r1
    113c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    113e:	4604      	mov	r4, r0
    1140:	b168      	cbz	r0, 115e <io_read+0x26>
    1142:	b151      	cbz	r1, 115a <io_read+0x22>
    1144:	2001      	movs	r0, #1
    1146:	223d      	movs	r2, #61	; 0x3d
    1148:	4906      	ldr	r1, [pc, #24]	; (1164 <io_read+0x2c>)
    114a:	4b07      	ldr	r3, [pc, #28]	; (1168 <io_read+0x30>)
    114c:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    114e:	6863      	ldr	r3, [r4, #4]
    1150:	4632      	mov	r2, r6
    1152:	4629      	mov	r1, r5
    1154:	4620      	mov	r0, r4
    1156:	4798      	blx	r3
}
    1158:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
    115a:	2000      	movs	r0, #0
    115c:	e7f3      	b.n	1146 <io_read+0xe>
    115e:	2000      	movs	r0, #0
    1160:	e7f1      	b.n	1146 <io_read+0xe>
    1162:	bf00      	nop
    1164:	0000e298 	.word	0x0000e298
    1168:	0000154d 	.word	0x0000154d

0000116c <mac_read_cb>:
 * \internal data receivced handler
 *
 * \param[in] dev The pointer to MAC device structure
 */
static void mac_read_cb(struct _mac_async_device *dev)
{
    116c:	b508      	push	{r3, lr}
	struct mac_async_descriptor *const descr = CONTAINER_OF(dev, struct mac_async_descriptor, dev);

	if (descr->cb.receive) {
    116e:	6943      	ldr	r3, [r0, #20]
    1170:	b103      	cbz	r3, 1174 <mac_read_cb+0x8>
		descr->cb.receive(descr);
    1172:	4798      	blx	r3
    1174:	bd08      	pop	{r3, pc}

00001176 <mac_write_cb>:
 * \internal data transmit handler
 *
 * \param[in] dev The pointer to MAC device structure
 */
static void mac_write_cb(struct _mac_async_device *dev)
{
    1176:	b508      	push	{r3, lr}
	struct mac_async_descriptor *const descr = CONTAINER_OF(dev, struct mac_async_descriptor, dev);

	if (descr->cb.transmit) {
    1178:	6983      	ldr	r3, [r0, #24]
    117a:	b103      	cbz	r3, 117e <mac_write_cb+0x8>
		descr->cb.transmit(descr);
    117c:	4798      	blx	r3
    117e:	bd08      	pop	{r3, pc}

00001180 <mac_async_init>:
{
    1180:	b538      	push	{r3, r4, r5, lr}
    1182:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1184:	4605      	mov	r5, r0
    1186:	b160      	cbz	r0, 11a2 <mac_async_init+0x22>
    1188:	b149      	cbz	r1, 119e <mac_async_init+0x1e>
    118a:	2001      	movs	r0, #1
    118c:	2231      	movs	r2, #49	; 0x31
    118e:	4906      	ldr	r1, [pc, #24]	; (11a8 <mac_async_init+0x28>)
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <mac_async_init+0x2c>)
    1192:	4798      	blx	r3
	return _mac_async_init(&descr->dev, hw);
    1194:	4621      	mov	r1, r4
    1196:	4628      	mov	r0, r5
    1198:	4b05      	ldr	r3, [pc, #20]	; (11b0 <mac_async_init+0x30>)
    119a:	4798      	blx	r3
}
    119c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    119e:	2000      	movs	r0, #0
    11a0:	e7f4      	b.n	118c <mac_async_init+0xc>
    11a2:	2000      	movs	r0, #0
    11a4:	e7f2      	b.n	118c <mac_async_init+0xc>
    11a6:	bf00      	nop
    11a8:	0000e2ac 	.word	0x0000e2ac
    11ac:	0000154d 	.word	0x0000154d
    11b0:	000018fd 	.word	0x000018fd

000011b4 <mac_async_enable>:
{
    11b4:	b510      	push	{r4, lr}
	ASSERT(descr);
    11b6:	4604      	mov	r4, r0
    11b8:	2245      	movs	r2, #69	; 0x45
    11ba:	4905      	ldr	r1, [pc, #20]	; (11d0 <mac_async_enable+0x1c>)
    11bc:	3000      	adds	r0, #0
    11be:	bf18      	it	ne
    11c0:	2001      	movne	r0, #1
    11c2:	4b04      	ldr	r3, [pc, #16]	; (11d4 <mac_async_enable+0x20>)
    11c4:	4798      	blx	r3
	return _mac_async_enable(&descr->dev);
    11c6:	4620      	mov	r0, r4
    11c8:	4b03      	ldr	r3, [pc, #12]	; (11d8 <mac_async_enable+0x24>)
    11ca:	4798      	blx	r3
}
    11cc:	bd10      	pop	{r4, pc}
    11ce:	bf00      	nop
    11d0:	0000e2ac 	.word	0x0000e2ac
    11d4:	0000154d 	.word	0x0000154d
    11d8:	00001965 	.word	0x00001965

000011dc <mac_async_write>:
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	460c      	mov	r4, r1
    11e0:	4615      	mov	r5, r2
	ASSERT(descr && buf && len);
    11e2:	4606      	mov	r6, r0
    11e4:	b160      	cbz	r0, 1200 <mac_async_write+0x24>
    11e6:	b169      	cbz	r1, 1204 <mac_async_write+0x28>
    11e8:	b972      	cbnz	r2, 1208 <mac_async_write+0x2c>
    11ea:	2000      	movs	r0, #0
    11ec:	2257      	movs	r2, #87	; 0x57
    11ee:	4907      	ldr	r1, [pc, #28]	; (120c <mac_async_write+0x30>)
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <mac_async_write+0x34>)
    11f2:	4798      	blx	r3
	return _mac_async_write(&descr->dev, buf, len);
    11f4:	462a      	mov	r2, r5
    11f6:	4621      	mov	r1, r4
    11f8:	4630      	mov	r0, r6
    11fa:	4b06      	ldr	r3, [pc, #24]	; (1214 <mac_async_write+0x38>)
    11fc:	4798      	blx	r3
}
    11fe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && len);
    1200:	2000      	movs	r0, #0
    1202:	e7f3      	b.n	11ec <mac_async_write+0x10>
    1204:	2000      	movs	r0, #0
    1206:	e7f1      	b.n	11ec <mac_async_write+0x10>
    1208:	2001      	movs	r0, #1
    120a:	e7ef      	b.n	11ec <mac_async_write+0x10>
    120c:	0000e2ac 	.word	0x0000e2ac
    1210:	0000154d 	.word	0x0000154d
    1214:	00001975 	.word	0x00001975

00001218 <mac_async_read>:
{
    1218:	b570      	push	{r4, r5, r6, lr}
    121a:	460d      	mov	r5, r1
    121c:	4616      	mov	r6, r2
	ASSERT(descr);
    121e:	4604      	mov	r4, r0
    1220:	2261      	movs	r2, #97	; 0x61
    1222:	4906      	ldr	r1, [pc, #24]	; (123c <mac_async_read+0x24>)
    1224:	3000      	adds	r0, #0
    1226:	bf18      	it	ne
    1228:	2001      	movne	r0, #1
    122a:	4b05      	ldr	r3, [pc, #20]	; (1240 <mac_async_read+0x28>)
    122c:	4798      	blx	r3
	return _mac_async_read(&descr->dev, buf, len);
    122e:	4632      	mov	r2, r6
    1230:	4629      	mov	r1, r5
    1232:	4620      	mov	r0, r4
    1234:	4b03      	ldr	r3, [pc, #12]	; (1244 <mac_async_read+0x2c>)
    1236:	4798      	blx	r3
}
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	bf00      	nop
    123c:	0000e2ac 	.word	0x0000e2ac
    1240:	0000154d 	.word	0x0000154d
    1244:	00001aed 	.word	0x00001aed

00001248 <mac_async_read_len>:
{
    1248:	b510      	push	{r4, lr}
	ASSERT(descr);
    124a:	4604      	mov	r4, r0
    124c:	226b      	movs	r2, #107	; 0x6b
    124e:	4905      	ldr	r1, [pc, #20]	; (1264 <mac_async_read_len+0x1c>)
    1250:	3000      	adds	r0, #0
    1252:	bf18      	it	ne
    1254:	2001      	movne	r0, #1
    1256:	4b04      	ldr	r3, [pc, #16]	; (1268 <mac_async_read_len+0x20>)
    1258:	4798      	blx	r3
	return _mac_async_read_len(&descr->dev);
    125a:	4620      	mov	r0, r4
    125c:	4b03      	ldr	r3, [pc, #12]	; (126c <mac_async_read_len+0x24>)
    125e:	4798      	blx	r3
}
    1260:	bd10      	pop	{r4, pc}
    1262:	bf00      	nop
    1264:	0000e2ac 	.word	0x0000e2ac
    1268:	0000154d 	.word	0x0000154d
    126c:	00001c0d 	.word	0x00001c0d

00001270 <mac_async_register_callback>:
{
    1270:	b570      	push	{r4, r5, r6, lr}
    1272:	460c      	mov	r4, r1
    1274:	4616      	mov	r6, r2
	ASSERT(descr);
    1276:	4605      	mov	r5, r0
    1278:	2289      	movs	r2, #137	; 0x89
    127a:	4910      	ldr	r1, [pc, #64]	; (12bc <mac_async_register_callback+0x4c>)
    127c:	3000      	adds	r0, #0
    127e:	bf18      	it	ne
    1280:	2001      	movne	r0, #1
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <mac_async_register_callback+0x50>)
    1284:	4798      	blx	r3
	switch (type) {
    1286:	b124      	cbz	r4, 1292 <mac_async_register_callback+0x22>
    1288:	2c01      	cmp	r4, #1
    128a:	d00c      	beq.n	12a6 <mac_async_register_callback+0x36>
		return ERR_INVALID_ARG;
    128c:	f06f 000c 	mvn.w	r0, #12
}
    1290:	bd70      	pop	{r4, r5, r6, pc}
		descr->cb.receive = (mac_async_cb_t)func;
    1292:	616e      	str	r6, [r5, #20]
		return _mac_async_register_callback(&descr->dev, type, (func == NULL) ? NULL : (FUNC_PTR)mac_read_cb);
    1294:	b12e      	cbz	r6, 12a2 <mac_async_register_callback+0x32>
    1296:	4a0b      	ldr	r2, [pc, #44]	; (12c4 <mac_async_register_callback+0x54>)
    1298:	4621      	mov	r1, r4
    129a:	4628      	mov	r0, r5
    129c:	4b0a      	ldr	r3, [pc, #40]	; (12c8 <mac_async_register_callback+0x58>)
    129e:	4798      	blx	r3
    12a0:	bd70      	pop	{r4, r5, r6, pc}
    12a2:	2200      	movs	r2, #0
    12a4:	e7f8      	b.n	1298 <mac_async_register_callback+0x28>
		descr->cb.transmit = (mac_async_cb_t)func;
    12a6:	61ae      	str	r6, [r5, #24]
		return _mac_async_register_callback(&descr->dev, type, (func == NULL) ? NULL : (FUNC_PTR)mac_write_cb);
    12a8:	b12e      	cbz	r6, 12b6 <mac_async_register_callback+0x46>
    12aa:	4a08      	ldr	r2, [pc, #32]	; (12cc <mac_async_register_callback+0x5c>)
    12ac:	4621      	mov	r1, r4
    12ae:	4628      	mov	r0, r5
    12b0:	4b05      	ldr	r3, [pc, #20]	; (12c8 <mac_async_register_callback+0x58>)
    12b2:	4798      	blx	r3
    12b4:	bd70      	pop	{r4, r5, r6, pc}
    12b6:	2200      	movs	r2, #0
    12b8:	e7f8      	b.n	12ac <mac_async_register_callback+0x3c>
    12ba:	bf00      	nop
    12bc:	0000e2ac 	.word	0x0000e2ac
    12c0:	0000154d 	.word	0x0000154d
    12c4:	0000116d 	.word	0x0000116d
    12c8:	00001c7d 	.word	0x00001c7d
    12cc:	00001177 	.word	0x00001177

000012d0 <mac_async_set_filter>:
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	460e      	mov	r6, r1
    12d4:	4614      	mov	r4, r2
	ASSERT(descr && filter);
    12d6:	4605      	mov	r5, r0
    12d8:	b168      	cbz	r0, 12f6 <mac_async_set_filter+0x26>
    12da:	b152      	cbz	r2, 12f2 <mac_async_set_filter+0x22>
    12dc:	2001      	movs	r0, #1
    12de:	229b      	movs	r2, #155	; 0x9b
    12e0:	4906      	ldr	r1, [pc, #24]	; (12fc <mac_async_set_filter+0x2c>)
    12e2:	4b07      	ldr	r3, [pc, #28]	; (1300 <mac_async_set_filter+0x30>)
    12e4:	4798      	blx	r3
	return _mac_async_set_filter(&descr->dev, index, filter);
    12e6:	4622      	mov	r2, r4
    12e8:	4631      	mov	r1, r6
    12ea:	4628      	mov	r0, r5
    12ec:	4b05      	ldr	r3, [pc, #20]	; (1304 <mac_async_set_filter+0x34>)
    12ee:	4798      	blx	r3
}
    12f0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && filter);
    12f2:	2000      	movs	r0, #0
    12f4:	e7f3      	b.n	12de <mac_async_set_filter+0xe>
    12f6:	2000      	movs	r0, #0
    12f8:	e7f1      	b.n	12de <mac_async_set_filter+0xe>
    12fa:	bf00      	nop
    12fc:	0000e2ac 	.word	0x0000e2ac
    1300:	0000154d 	.word	0x0000154d
    1304:	00001cb9 	.word	0x00001cb9

00001308 <mac_async_read_phy_reg>:
{
    1308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130a:	460e      	mov	r6, r1
    130c:	4617      	mov	r7, r2
    130e:	461c      	mov	r4, r3
	ASSERT(descr && val);
    1310:	4605      	mov	r5, r0
    1312:	b170      	cbz	r0, 1332 <mac_async_read_phy_reg+0x2a>
    1314:	b15b      	cbz	r3, 132e <mac_async_read_phy_reg+0x26>
    1316:	2001      	movs	r0, #1
    1318:	22b8      	movs	r2, #184	; 0xb8
    131a:	4907      	ldr	r1, [pc, #28]	; (1338 <mac_async_read_phy_reg+0x30>)
    131c:	4b07      	ldr	r3, [pc, #28]	; (133c <mac_async_read_phy_reg+0x34>)
    131e:	4798      	blx	r3
	return _mac_async_read_phy_reg(&descr->dev, addr, reg, val);
    1320:	4623      	mov	r3, r4
    1322:	463a      	mov	r2, r7
    1324:	4631      	mov	r1, r6
    1326:	4628      	mov	r0, r5
    1328:	4c05      	ldr	r4, [pc, #20]	; (1340 <mac_async_read_phy_reg+0x38>)
    132a:	47a0      	blx	r4
}
    132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && val);
    132e:	2000      	movs	r0, #0
    1330:	e7f2      	b.n	1318 <mac_async_read_phy_reg+0x10>
    1332:	2000      	movs	r0, #0
    1334:	e7f0      	b.n	1318 <mac_async_read_phy_reg+0x10>
    1336:	bf00      	nop
    1338:	0000e2ac 	.word	0x0000e2ac
    133c:	0000154d 	.word	0x0000154d
    1340:	00001d01 	.word	0x00001d01

00001344 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1344:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1346:	6943      	ldr	r3, [r0, #20]
    1348:	b103      	cbz	r3, 134c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    134a:	4798      	blx	r3
    134c:	bd08      	pop	{r3, pc}

0000134e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    134e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1350:	6983      	ldr	r3, [r0, #24]
    1352:	b103      	cbz	r3, 1356 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1354:	4798      	blx	r3
    1356:	bd08      	pop	{r3, pc}

00001358 <pwm_init>:
{
    1358:	b538      	push	{r3, r4, r5, lr}
    135a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    135c:	4604      	mov	r4, r0
    135e:	b188      	cbz	r0, 1384 <pwm_init+0x2c>
    1360:	b171      	cbz	r1, 1380 <pwm_init+0x28>
    1362:	2001      	movs	r0, #1
    1364:	2233      	movs	r2, #51	; 0x33
    1366:	4908      	ldr	r1, [pc, #32]	; (1388 <pwm_init+0x30>)
    1368:	4b08      	ldr	r3, [pc, #32]	; (138c <pwm_init+0x34>)
    136a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    136c:	4629      	mov	r1, r5
    136e:	4620      	mov	r0, r4
    1370:	4b07      	ldr	r3, [pc, #28]	; (1390 <pwm_init+0x38>)
    1372:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1374:	4b07      	ldr	r3, [pc, #28]	; (1394 <pwm_init+0x3c>)
    1376:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1378:	4b07      	ldr	r3, [pc, #28]	; (1398 <pwm_init+0x40>)
    137a:	6063      	str	r3, [r4, #4]
}
    137c:	2000      	movs	r0, #0
    137e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1380:	2000      	movs	r0, #0
    1382:	e7ef      	b.n	1364 <pwm_init+0xc>
    1384:	2000      	movs	r0, #0
    1386:	e7ed      	b.n	1364 <pwm_init+0xc>
    1388:	0000e2c8 	.word	0x0000e2c8
    138c:	0000154d 	.word	0x0000154d
    1390:	00002099 	.word	0x00002099
    1394:	00001345 	.word	0x00001345
    1398:	0000134f 	.word	0x0000134f

0000139c <pwm_enable>:
{
    139c:	b510      	push	{r4, lr}
	ASSERT(descr);
    139e:	4604      	mov	r4, r0
    13a0:	224a      	movs	r2, #74	; 0x4a
    13a2:	4909      	ldr	r1, [pc, #36]	; (13c8 <pwm_enable+0x2c>)
    13a4:	3000      	adds	r0, #0
    13a6:	bf18      	it	ne
    13a8:	2001      	movne	r0, #1
    13aa:	4b08      	ldr	r3, [pc, #32]	; (13cc <pwm_enable+0x30>)
    13ac:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    13ae:	4620      	mov	r0, r4
    13b0:	4b07      	ldr	r3, [pc, #28]	; (13d0 <pwm_enable+0x34>)
    13b2:	4798      	blx	r3
    13b4:	b920      	cbnz	r0, 13c0 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
    13b6:	4620      	mov	r0, r4
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <pwm_enable+0x38>)
    13ba:	4798      	blx	r3
	return ERR_NONE;
    13bc:	2000      	movs	r0, #0
    13be:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    13c0:	f06f 0010 	mvn.w	r0, #16
}
    13c4:	bd10      	pop	{r4, pc}
    13c6:	bf00      	nop
    13c8:	0000e2c8 	.word	0x0000e2c8
    13cc:	0000154d 	.word	0x0000154d
    13d0:	000022ad 	.word	0x000022ad
    13d4:	00002219 	.word	0x00002219

000013d8 <pwm_set_parameters>:
{
    13d8:	b570      	push	{r4, r5, r6, lr}
    13da:	460d      	mov	r5, r1
    13dc:	4616      	mov	r6, r2
	ASSERT(descr);
    13de:	4604      	mov	r4, r0
    13e0:	227c      	movs	r2, #124	; 0x7c
    13e2:	4906      	ldr	r1, [pc, #24]	; (13fc <pwm_set_parameters+0x24>)
    13e4:	3000      	adds	r0, #0
    13e6:	bf18      	it	ne
    13e8:	2001      	movne	r0, #1
    13ea:	4b05      	ldr	r3, [pc, #20]	; (1400 <pwm_set_parameters+0x28>)
    13ec:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    13ee:	4632      	mov	r2, r6
    13f0:	4629      	mov	r1, r5
    13f2:	4620      	mov	r0, r4
    13f4:	4b03      	ldr	r3, [pc, #12]	; (1404 <pwm_set_parameters+0x2c>)
    13f6:	4798      	blx	r3
}
    13f8:	2000      	movs	r0, #0
    13fa:	bd70      	pop	{r4, r5, r6, pc}
    13fc:	0000e2c8 	.word	0x0000e2c8
    1400:	0000154d 	.word	0x0000154d
    1404:	0000222d 	.word	0x0000222d

00001408 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    140a:	460e      	mov	r6, r1
    140c:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    140e:	4605      	mov	r5, r0
    1410:	b308      	cbz	r0, 1456 <usart_sync_write+0x4e>
    1412:	b311      	cbz	r1, 145a <usart_sync_write+0x52>
    1414:	bb1a      	cbnz	r2, 145e <usart_sync_write+0x56>
    1416:	2000      	movs	r0, #0
    1418:	22f1      	movs	r2, #241	; 0xf1
    141a:	4912      	ldr	r1, [pc, #72]	; (1464 <usart_sync_write+0x5c>)
    141c:	4b12      	ldr	r3, [pc, #72]	; (1468 <usart_sync_write+0x60>)
    141e:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1420:	f105 0408 	add.w	r4, r5, #8
    1424:	4620      	mov	r0, r4
    1426:	4b11      	ldr	r3, [pc, #68]	; (146c <usart_sync_write+0x64>)
    1428:	4798      	blx	r3
    142a:	2800      	cmp	r0, #0
    142c:	d0f8      	beq.n	1420 <usart_sync_write+0x18>
    142e:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1430:	5d71      	ldrb	r1, [r6, r5]
    1432:	4620      	mov	r0, r4
    1434:	4b0e      	ldr	r3, [pc, #56]	; (1470 <usart_sync_write+0x68>)
    1436:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1438:	4620      	mov	r0, r4
    143a:	4b0c      	ldr	r3, [pc, #48]	; (146c <usart_sync_write+0x64>)
    143c:	4798      	blx	r3
    143e:	2800      	cmp	r0, #0
    1440:	d0fa      	beq.n	1438 <usart_sync_write+0x30>
			;
	} while (++offset < length);
    1442:	3501      	adds	r5, #1
    1444:	42bd      	cmp	r5, r7
    1446:	d3f3      	bcc.n	1430 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1448:	4620      	mov	r0, r4
    144a:	4b0a      	ldr	r3, [pc, #40]	; (1474 <usart_sync_write+0x6c>)
    144c:	4798      	blx	r3
    144e:	2800      	cmp	r0, #0
    1450:	d0fa      	beq.n	1448 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
    1452:	4628      	mov	r0, r5
    1454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
    1456:	2000      	movs	r0, #0
    1458:	e7de      	b.n	1418 <usart_sync_write+0x10>
    145a:	2000      	movs	r0, #0
    145c:	e7dc      	b.n	1418 <usart_sync_write+0x10>
    145e:	2001      	movs	r0, #1
    1460:	e7da      	b.n	1418 <usart_sync_write+0x10>
    1462:	bf00      	nop
    1464:	0000e2e0 	.word	0x0000e2e0
    1468:	0000154d 	.word	0x0000154d
    146c:	00001f9b 	.word	0x00001f9b
    1470:	00001f8d 	.word	0x00001f8d
    1474:	00001fa5 	.word	0x00001fa5

00001478 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    147c:	460f      	mov	r7, r1
    147e:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1480:	4605      	mov	r5, r0
    1482:	b1c8      	cbz	r0, 14b8 <usart_sync_read+0x40>
    1484:	b1d1      	cbz	r1, 14bc <usart_sync_read+0x44>
    1486:	b9da      	cbnz	r2, 14c0 <usart_sync_read+0x48>
    1488:	2000      	movs	r0, #0
    148a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    148e:	490d      	ldr	r1, [pc, #52]	; (14c4 <usart_sync_read+0x4c>)
    1490:	4b0d      	ldr	r3, [pc, #52]	; (14c8 <usart_sync_read+0x50>)
    1492:	4798      	blx	r3
	uint32_t                      offset = 0;
    1494:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1496:	f105 0408 	add.w	r4, r5, #8
    149a:	4620      	mov	r0, r4
    149c:	4b0b      	ldr	r3, [pc, #44]	; (14cc <usart_sync_read+0x54>)
    149e:	4798      	blx	r3
    14a0:	2800      	cmp	r0, #0
    14a2:	d0f8      	beq.n	1496 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    14a4:	4620      	mov	r0, r4
    14a6:	4b0a      	ldr	r3, [pc, #40]	; (14d0 <usart_sync_read+0x58>)
    14a8:	4798      	blx	r3
    14aa:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
    14ac:	3601      	adds	r6, #1
    14ae:	4546      	cmp	r6, r8
    14b0:	d3f1      	bcc.n	1496 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
    14b2:	4630      	mov	r0, r6
    14b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
    14b8:	2000      	movs	r0, #0
    14ba:	e7e6      	b.n	148a <usart_sync_read+0x12>
    14bc:	2000      	movs	r0, #0
    14be:	e7e4      	b.n	148a <usart_sync_read+0x12>
    14c0:	2001      	movs	r0, #1
    14c2:	e7e2      	b.n	148a <usart_sync_read+0x12>
    14c4:	0000e2e0 	.word	0x0000e2e0
    14c8:	0000154d 	.word	0x0000154d
    14cc:	00001faf 	.word	0x00001faf
    14d0:	00001f93 	.word	0x00001f93

000014d4 <usart_sync_init>:
{
    14d4:	b538      	push	{r3, r4, r5, lr}
    14d6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    14d8:	4604      	mov	r4, r0
    14da:	b1a0      	cbz	r0, 1506 <usart_sync_init+0x32>
    14dc:	b189      	cbz	r1, 1502 <usart_sync_init+0x2e>
    14de:	2001      	movs	r0, #1
    14e0:	2234      	movs	r2, #52	; 0x34
    14e2:	490a      	ldr	r1, [pc, #40]	; (150c <usart_sync_init+0x38>)
    14e4:	4b0a      	ldr	r3, [pc, #40]	; (1510 <usart_sync_init+0x3c>)
    14e6:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    14e8:	4629      	mov	r1, r5
    14ea:	f104 0008 	add.w	r0, r4, #8
    14ee:	4b09      	ldr	r3, [pc, #36]	; (1514 <usart_sync_init+0x40>)
    14f0:	4798      	blx	r3
	if (init_status) {
    14f2:	4603      	mov	r3, r0
    14f4:	b918      	cbnz	r0, 14fe <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    14f6:	4a08      	ldr	r2, [pc, #32]	; (1518 <usart_sync_init+0x44>)
    14f8:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    14fa:	4a08      	ldr	r2, [pc, #32]	; (151c <usart_sync_init+0x48>)
    14fc:	6022      	str	r2, [r4, #0]
}
    14fe:	4618      	mov	r0, r3
    1500:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
    1502:	2000      	movs	r0, #0
    1504:	e7ec      	b.n	14e0 <usart_sync_init+0xc>
    1506:	2000      	movs	r0, #0
    1508:	e7ea      	b.n	14e0 <usart_sync_init+0xc>
    150a:	bf00      	nop
    150c:	0000e2e0 	.word	0x0000e2e0
    1510:	0000154d 	.word	0x0000154d
    1514:	00001f4d 	.word	0x00001f4d
    1518:	00001479 	.word	0x00001479
    151c:	00001409 	.word	0x00001409

00001520 <usart_sync_enable>:
{
    1520:	b510      	push	{r4, lr}
	ASSERT(descr);
    1522:	4604      	mov	r4, r0
    1524:	2253      	movs	r2, #83	; 0x53
    1526:	4906      	ldr	r1, [pc, #24]	; (1540 <usart_sync_enable+0x20>)
    1528:	3000      	adds	r0, #0
    152a:	bf18      	it	ne
    152c:	2001      	movne	r0, #1
    152e:	4b05      	ldr	r3, [pc, #20]	; (1544 <usart_sync_enable+0x24>)
    1530:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1532:	f104 0008 	add.w	r0, r4, #8
    1536:	4b04      	ldr	r3, [pc, #16]	; (1548 <usart_sync_enable+0x28>)
    1538:	4798      	blx	r3
}
    153a:	2000      	movs	r0, #0
    153c:	bd10      	pop	{r4, pc}
    153e:	bf00      	nop
    1540:	0000e2e0 	.word	0x0000e2e0
    1544:	0000154d 	.word	0x0000154d
    1548:	00001f79 	.word	0x00001f79

0000154c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    154c:	b900      	cbnz	r0, 1550 <assert+0x4>
		__asm("BKPT #0");
    154e:	be00      	bkpt	0x0000
    1550:	4770      	bx	lr
	...

00001554 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1554:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1556:	4a06      	ldr	r2, [pc, #24]	; (1570 <_sbrk+0x1c>)
    1558:	6812      	ldr	r2, [r2, #0]
    155a:	b122      	cbz	r2, 1566 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    155c:	4a04      	ldr	r2, [pc, #16]	; (1570 <_sbrk+0x1c>)
    155e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1560:	4403      	add	r3, r0
    1562:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1564:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1566:	4903      	ldr	r1, [pc, #12]	; (1574 <_sbrk+0x20>)
    1568:	4a01      	ldr	r2, [pc, #4]	; (1570 <_sbrk+0x1c>)
    156a:	6011      	str	r1, [r2, #0]
    156c:	e7f6      	b.n	155c <_sbrk+0x8>
    156e:	bf00      	nop
    1570:	200000f8 	.word	0x200000f8
    1574:	20026230 	.word	0x20026230

00001578 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    1578:	f04f 30ff 	mov.w	r0, #4294967295
    157c:	4770      	bx	lr

0000157e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    157e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1582:	604b      	str	r3, [r1, #4]

	return 0;
}
    1584:	2000      	movs	r0, #0
    1586:	4770      	bx	lr

00001588 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    1588:	2001      	movs	r0, #1
    158a:	4770      	bx	lr

0000158c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    158c:	2000      	movs	r0, #0
    158e:	4770      	bx	lr

00001590 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1590:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1592:	4a08      	ldr	r2, [pc, #32]	; (15b4 <_init_chip+0x24>)
    1594:	8813      	ldrh	r3, [r2, #0]
    1596:	b29b      	uxth	r3, r3
    1598:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    159a:	4b07      	ldr	r3, [pc, #28]	; (15b8 <_init_chip+0x28>)
    159c:	4798      	blx	r3
	_oscctrl_init_sources();
    159e:	4b07      	ldr	r3, [pc, #28]	; (15bc <_init_chip+0x2c>)
    15a0:	4798      	blx	r3
	_mclk_init();
    15a2:	4b07      	ldr	r3, [pc, #28]	; (15c0 <_init_chip+0x30>)
    15a4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    15a6:	4b07      	ldr	r3, [pc, #28]	; (15c4 <_init_chip+0x34>)
    15a8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    15aa:	f640 70ff 	movw	r0, #4095	; 0xfff
    15ae:	4b06      	ldr	r3, [pc, #24]	; (15c8 <_init_chip+0x38>)
    15b0:	4798      	blx	r3
    15b2:	bd08      	pop	{r3, pc}
    15b4:	41004000 	.word	0x41004000
    15b8:	00001d51 	.word	0x00001d51
    15bc:	00001d65 	.word	0x00001d65
    15c0:	00001d45 	.word	0x00001d45
    15c4:	00001d81 	.word	0x00001d81
    15c8:	000017d9 	.word	0x000017d9

000015cc <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    15d0:	4b2a      	ldr	r3, [pc, #168]	; (167c <_ext_irq_handler+0xb0>)
    15d2:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    15d4:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    15d6:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    15d8:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    15da:	4b29      	ldr	r3, [pc, #164]	; (1680 <_ext_irq_handler+0xb4>)
    15dc:	6818      	ldr	r0, [r3, #0]
    15de:	22ec      	movs	r2, #236	; 0xec
    15e0:	4928      	ldr	r1, [pc, #160]	; (1684 <_ext_irq_handler+0xb8>)
    15e2:	3000      	adds	r0, #0
    15e4:	bf18      	it	ne
    15e6:	2001      	movne	r0, #1
    15e8:	4b27      	ldr	r3, [pc, #156]	; (1688 <_ext_irq_handler+0xbc>)
    15ea:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    15ec:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    15f0:	e035      	b.n	165e <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    15f2:	4b26      	ldr	r3, [pc, #152]	; (168c <_ext_irq_handler+0xc0>)
    15f4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    15f8:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    15fa:	f1b5 3fff 	cmp.w	r5, #4294967295
    15fe:	d003      	beq.n	1608 <_ext_irq_handler+0x3c>
				callback(pin);
    1600:	4b1f      	ldr	r3, [pc, #124]	; (1680 <_ext_irq_handler+0xb4>)
    1602:	681b      	ldr	r3, [r3, #0]
    1604:	4628      	mov	r0, r5
    1606:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1608:	2301      	movs	r3, #1
    160a:	40a3      	lsls	r3, r4
    160c:	9c01      	ldr	r4, [sp, #4]
    160e:	ea24 0403 	bic.w	r4, r4, r3
    1612:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    1614:	9b01      	ldr	r3, [sp, #4]
    1616:	fa93 f4a3 	rbit	r4, r3
    161a:	fab4 f484 	clz	r4, r4
    161e:	b90b      	cbnz	r3, 1624 <_ext_irq_handler+0x58>
    1620:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1624:	f1b4 3fff 	cmp.w	r4, #4294967295
    1628:	d014      	beq.n	1654 <_ext_irq_handler+0x88>
    162a:	2002      	movs	r0, #2
    162c:	2100      	movs	r1, #0
    162e:	e001      	b.n	1634 <_ext_irq_handler+0x68>
					upper = middle - 1;
    1630:	3b01      	subs	r3, #1
    1632:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    1634:	4281      	cmp	r1, r0
    1636:	d8e0      	bhi.n	15fa <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1638:	1843      	adds	r3, r0, r1
    163a:	f3c3 0347 	ubfx	r3, r3, #1, #8
    163e:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1640:	4a12      	ldr	r2, [pc, #72]	; (168c <_ext_irq_handler+0xc0>)
    1642:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    1646:	42a2      	cmp	r2, r4
    1648:	d0d3      	beq.n	15f2 <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    164a:	42a2      	cmp	r2, r4
    164c:	daf0      	bge.n	1630 <_ext_irq_handler+0x64>
					lower = middle + 1;
    164e:	3301      	adds	r3, #1
    1650:	b2d9      	uxtb	r1, r3
    1652:	e7ef      	b.n	1634 <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    1654:	4b09      	ldr	r3, [pc, #36]	; (167c <_ext_irq_handler+0xb0>)
    1656:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1658:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    165a:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    165c:	615a      	str	r2, [r3, #20]
	while (flags) {
    165e:	9b01      	ldr	r3, [sp, #4]
    1660:	b14b      	cbz	r3, 1676 <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    1662:	9b01      	ldr	r3, [sp, #4]
    1664:	fa93 f4a3 	rbit	r4, r3
    1668:	fab4 f484 	clz	r4, r4
    166c:	2b00      	cmp	r3, #0
    166e:	d1d9      	bne.n	1624 <_ext_irq_handler+0x58>
    1670:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    1674:	e7d6      	b.n	1624 <_ext_irq_handler+0x58>
	}
}
    1676:	b002      	add	sp, #8
    1678:	bd70      	pop	{r4, r5, r6, pc}
    167a:	bf00      	nop
    167c:	40002800 	.word	0x40002800
    1680:	200000fc 	.word	0x200000fc
    1684:	0000e30c 	.word	0x0000e30c
    1688:	0000154d 	.word	0x0000154d
    168c:	0000e2fc 	.word	0x0000e2fc

00001690 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1690:	4b31      	ldr	r3, [pc, #196]	; (1758 <_ext_irq_init+0xc8>)
    1692:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    1694:	f013 0f01 	tst.w	r3, #1
    1698:	d120      	bne.n	16dc <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    169a:	4b2f      	ldr	r3, [pc, #188]	; (1758 <_ext_irq_init+0xc8>)
    169c:	685b      	ldr	r3, [r3, #4]
    169e:	f013 0f03 	tst.w	r3, #3
    16a2:	d1fa      	bne.n	169a <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    16a4:	4b2c      	ldr	r3, [pc, #176]	; (1758 <_ext_irq_init+0xc8>)
    16a6:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    16a8:	f013 0f02 	tst.w	r3, #2
    16ac:	d00e      	beq.n	16cc <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    16ae:	4a2a      	ldr	r2, [pc, #168]	; (1758 <_ext_irq_init+0xc8>)
    16b0:	7813      	ldrb	r3, [r2, #0]
    16b2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    16b6:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16b8:	4b27      	ldr	r3, [pc, #156]	; (1758 <_ext_irq_init+0xc8>)
    16ba:	685b      	ldr	r3, [r3, #4]
    16bc:	f013 0f03 	tst.w	r3, #3
    16c0:	d1fa      	bne.n	16b8 <_ext_irq_init+0x28>
    16c2:	4b25      	ldr	r3, [pc, #148]	; (1758 <_ext_irq_init+0xc8>)
    16c4:	685b      	ldr	r3, [r3, #4]
    16c6:	f013 0f02 	tst.w	r3, #2
    16ca:	d1fa      	bne.n	16c2 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    16cc:	2201      	movs	r2, #1
    16ce:	4b22      	ldr	r3, [pc, #136]	; (1758 <_ext_irq_init+0xc8>)
    16d0:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16d2:	4b21      	ldr	r3, [pc, #132]	; (1758 <_ext_irq_init+0xc8>)
    16d4:	685b      	ldr	r3, [r3, #4]
    16d6:	f013 0f03 	tst.w	r3, #3
    16da:	d1fa      	bne.n	16d2 <_ext_irq_init+0x42>
    16dc:	4b1e      	ldr	r3, [pc, #120]	; (1758 <_ext_irq_init+0xc8>)
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	f013 0f01 	tst.w	r3, #1
    16e4:	d1fa      	bne.n	16dc <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    16e6:	4a1c      	ldr	r2, [pc, #112]	; (1758 <_ext_irq_init+0xc8>)
    16e8:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    16ea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    16ee:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    16f0:	4b19      	ldr	r3, [pc, #100]	; (1758 <_ext_irq_init+0xc8>)
    16f2:	685b      	ldr	r3, [r3, #4]
    16f4:	f013 0f03 	tst.w	r3, #3
    16f8:	d1fa      	bne.n	16f0 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    16fa:	4b17      	ldr	r3, [pc, #92]	; (1758 <_ext_irq_init+0xc8>)
    16fc:	2200      	movs	r2, #0
    16fe:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1700:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1702:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1704:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1706:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1708:	4914      	ldr	r1, [pc, #80]	; (175c <_ext_irq_init+0xcc>)
    170a:	61d9      	str	r1, [r3, #28]
    170c:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    170e:	781a      	ldrb	r2, [r3, #0]
    1710:	f042 0202 	orr.w	r2, r2, #2
    1714:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1716:	4b10      	ldr	r3, [pc, #64]	; (1758 <_ext_irq_init+0xc8>)
    1718:	685b      	ldr	r3, [r3, #4]
    171a:	f013 0f03 	tst.w	r3, #3
    171e:	d1fa      	bne.n	1716 <_ext_irq_init+0x86>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1720:	4b0f      	ldr	r3, [pc, #60]	; (1760 <_ext_irq_init+0xd0>)
    1722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    172a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    172e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1732:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1736:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1738:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    173c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1740:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1744:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1748:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    174c:	601a      	str	r2, [r3, #0]
	callback = cb;
    174e:	4b05      	ldr	r3, [pc, #20]	; (1764 <_ext_irq_init+0xd4>)
    1750:	6018      	str	r0, [r3, #0]
}
    1752:	2000      	movs	r0, #0
    1754:	4770      	bx	lr
    1756:	bf00      	nop
    1758:	40002800 	.word	0x40002800
    175c:	10000001 	.word	0x10000001
    1760:	e000e100 	.word	0xe000e100
    1764:	200000fc 	.word	0x200000fc

00001768 <_ext_irq_enable>:
{
    1768:	b410      	push	{r4}
	uint8_t i      = 0;
    176a:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    176c:	2b01      	cmp	r3, #1
    176e:	d80d      	bhi.n	178c <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1770:	461c      	mov	r4, r3
    1772:	4a11      	ldr	r2, [pc, #68]	; (17b8 <_ext_irq_enable+0x50>)
    1774:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1778:	6852      	ldr	r2, [r2, #4]
    177a:	4282      	cmp	r2, r0
    177c:	d002      	beq.n	1784 <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    177e:	3301      	adds	r3, #1
    1780:	b2db      	uxtb	r3, r3
    1782:	e7f3      	b.n	176c <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    1784:	4b0c      	ldr	r3, [pc, #48]	; (17b8 <_ext_irq_enable+0x50>)
    1786:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    178a:	e000      	b.n	178e <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    178c:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    178e:	2aff      	cmp	r2, #255	; 0xff
    1790:	d00f      	beq.n	17b2 <_ext_irq_enable+0x4a>
	if (enable) {
    1792:	b941      	cbnz	r1, 17a6 <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    1794:	2301      	movs	r3, #1
    1796:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1798:	4a08      	ldr	r2, [pc, #32]	; (17bc <_ext_irq_enable+0x54>)
    179a:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    179c:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    179e:	2000      	movs	r0, #0
}
    17a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    17a4:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    17a6:	2301      	movs	r3, #1
    17a8:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    17aa:	4a04      	ldr	r2, [pc, #16]	; (17bc <_ext_irq_enable+0x54>)
    17ac:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    17ae:	2000      	movs	r0, #0
    17b0:	e7f6      	b.n	17a0 <_ext_irq_enable+0x38>
		return -1;
    17b2:	f04f 30ff 	mov.w	r0, #4294967295
    17b6:	e7f3      	b.n	17a0 <_ext_irq_enable+0x38>
    17b8:	0000e2fc 	.word	0x0000e2fc
    17bc:	40002800 	.word	0x40002800

000017c0 <EIC_0_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_0_Handler(void)
{
    17c0:	b508      	push	{r3, lr}
	_ext_irq_handler();
    17c2:	4b01      	ldr	r3, [pc, #4]	; (17c8 <EIC_0_Handler+0x8>)
    17c4:	4798      	blx	r3
    17c6:	bd08      	pop	{r3, pc}
    17c8:	000015cd 	.word	0x000015cd

000017cc <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
    17cc:	b508      	push	{r3, lr}
	_ext_irq_handler();
    17ce:	4b01      	ldr	r3, [pc, #4]	; (17d4 <EIC_7_Handler+0x8>)
    17d0:	4798      	blx	r3
    17d2:	bd08      	pop	{r3, pc}
    17d4:	000015cd 	.word	0x000015cd

000017d8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    17d8:	f010 0f01 	tst.w	r0, #1
    17dc:	d008      	beq.n	17f0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    17de:	4a05      	ldr	r2, [pc, #20]	; (17f4 <_gclk_init_generators_by_fref+0x1c>)
    17e0:	4b05      	ldr	r3, [pc, #20]	; (17f8 <_gclk_init_generators_by_fref+0x20>)
    17e2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <_gclk_init_generators_by_fref+0x20>)
    17e6:	685a      	ldr	r2, [r3, #4]
    17e8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    17ec:	421a      	tst	r2, r3
    17ee:	d1f9      	bne.n	17e4 <_gclk_init_generators_by_fref+0xc>
    17f0:	4770      	bx	lr
    17f2:	bf00      	nop
    17f4:	00010101 	.word	0x00010101
    17f8:	40001c00 	.word	0x40001c00

000017fc <_mac_init_bufdescr>:
static void _mac_init_bufdescr(struct _mac_async_device *const dev)
{
	uint32_t i;

	/* TX buffer descriptor */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    17fc:	2200      	movs	r2, #0
    17fe:	e012      	b.n	1826 <_mac_init_bufdescr+0x2a>
		_txbuf_descrs[i].address        = (uint32_t)_txbuf[i];
    1800:	4b20      	ldr	r3, [pc, #128]	; (1884 <_mac_init_bufdescr+0x88>)
    1802:	f240 51dc 	movw	r1, #1500	; 0x5dc
    1806:	fb01 3102 	mla	r1, r1, r2, r3
    180a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    180e:	f8c3 1bb8 	str.w	r1, [r3, #3000]	; 0xbb8
		_txbuf_descrs[i].status.val     = 0;
    1812:	2100      	movs	r1, #0
    1814:	f8c3 1bbc 	str.w	r1, [r3, #3004]	; 0xbbc
		_txbuf_descrs[i].status.bm.used = 1;
    1818:	f893 1bbf 	ldrb.w	r1, [r3, #3007]	; 0xbbf
    181c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    1820:	f883 1bbf 	strb.w	r1, [r3, #3007]	; 0xbbf
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1824:	3201      	adds	r2, #1
    1826:	2a01      	cmp	r2, #1
    1828:	d9ea      	bls.n	1800 <_mac_init_bufdescr+0x4>
	}

	_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    182a:	4a16      	ldr	r2, [pc, #88]	; (1884 <_mac_init_bufdescr+0x88>)
    182c:	f892 3bc7 	ldrb.w	r3, [r2, #3015]	; 0xbc7
    1830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1834:	f882 3bc7 	strb.w	r3, [r2, #3015]	; 0xbc7
	_txbuf_index                                            = 0;
    1838:	2300      	movs	r3, #0
    183a:	f8c2 3bc8 	str.w	r3, [r2, #3016]	; 0xbc8
	_last_txbuf_index                                       = 0;
    183e:	f8c2 3bcc 	str.w	r3, [r2, #3020]	; 0xbcc

	/* RX buffer descriptor */
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1842:	e00b      	b.n	185c <_mac_init_bufdescr+0x60>
		_rxbuf_descrs[i].address.val = (uint32_t)_rxbuf[i];
    1844:	4910      	ldr	r1, [pc, #64]	; (1888 <_mac_init_bufdescr+0x8c>)
    1846:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    184a:	4a10      	ldr	r2, [pc, #64]	; (188c <_mac_init_bufdescr+0x90>)
    184c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1850:	f8c2 12e8 	str.w	r1, [r2, #744]	; 0x2e8
		_rxbuf_descrs[i].status.val  = 0;
    1854:	2100      	movs	r1, #0
    1856:	f8c2 12ec 	str.w	r1, [r2, #748]	; 0x2ec
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    185a:	3301      	adds	r3, #1
    185c:	2b0f      	cmp	r3, #15
    185e:	d9f1      	bls.n	1844 <_mac_init_bufdescr+0x48>
	}

	_rxbuf_descrs[CONF_GMAC_RXDESCR_NUM - 1].address.bm.wrap = 1;
    1860:	4b0a      	ldr	r3, [pc, #40]	; (188c <_mac_init_bufdescr+0x90>)
    1862:	f893 2360 	ldrb.w	r2, [r3, #864]	; 0x360
    1866:	f042 0202 	orr.w	r2, r2, #2
    186a:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
	_rxbuf_index                                             = 0;
    186e:	2200      	movs	r2, #0
    1870:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

	hri_gmac_write_TBQB_reg(dev->hw, (uint32_t)_txbuf_descrs);
    1874:	6802      	ldr	r2, [r0, #0]
    1876:	4906      	ldr	r1, [pc, #24]	; (1890 <_mac_init_bufdescr+0x94>)
}

static inline void hri_gmac_write_TBQB_reg(const void *const hw, hri_gmac_tbqb_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->TBQB.reg = data;
    1878:	61d1      	str	r1, [r2, #28]
	hri_gmac_write_RBQB_reg(dev->hw, (uint32_t)_rxbuf_descrs);
    187a:	6802      	ldr	r2, [r0, #0]
    187c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
	((Gmac *)hw)->RBQB.reg = data;
    1880:	6193      	str	r3, [r2, #24]
    1882:	4770      	bx	lr
    1884:	20000100 	.word	0x20000100
    1888:	20000ce0 	.word	0x20000ce0
    188c:	200011f8 	.word	0x200011f8
    1890:	20000cb8 	.word	0x20000cb8

00001894 <GMAC_Handler>:

/*
 * \internal GMAC interrupt handler
 */
void GMAC_Handler(void)
{
    1894:	b500      	push	{lr}
    1896:	b083      	sub	sp, #12
	volatile uint32_t tsr;
	volatile uint32_t rsr;

	tsr = hri_gmac_read_TSR_reg(_gmac_dev->hw);
    1898:	4b16      	ldr	r3, [pc, #88]	; (18f4 <GMAC_Handler+0x60>)
    189a:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
    189e:	6803      	ldr	r3, [r0, #0]
	return ((Gmac *)hw)->TSR.reg;
    18a0:	695a      	ldr	r2, [r3, #20]
    18a2:	9201      	str	r2, [sp, #4]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_rsr_reg_t hri_gmac_read_RSR_reg(const void *const hw)
{
	return ((Gmac *)hw)->RSR.reg;
    18a4:	6a1a      	ldr	r2, [r3, #32]
	rsr = hri_gmac_read_RSR_reg(_gmac_dev->hw);
    18a6:	9200      	str	r2, [sp, #0]
	GMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_gmac_isr_reg_t hri_gmac_read_ISR_reg(const void *const hw)
{
	return ((Gmac *)hw)->ISR.reg;
    18a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	/* Must be Clear ISR (Clear on read) */
	hri_gmac_read_ISR_reg(_gmac_dev->hw);

	/* Frame transmited */
	if (tsr & GMAC_TSR_TXCOMP) {
    18aa:	9a01      	ldr	r2, [sp, #4]
    18ac:	f012 0f20 	tst.w	r2, #32
    18b0:	d00d      	beq.n	18ce <GMAC_Handler+0x3a>
		hri_gmac_write_TSR_reg(_gmac_dev->hw, tsr);
    18b2:	9a01      	ldr	r2, [sp, #4]
	((Gmac *)hw)->TSR.reg = data;
    18b4:	615a      	str	r2, [r3, #20]
		if ((_txbuf_descrs[_txbuf_index].status.bm.used) && (_gmac_dev->cb.transmited != NULL)) {
    18b6:	4b10      	ldr	r3, [pc, #64]	; (18f8 <GMAC_Handler+0x64>)
    18b8:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    18bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    18c0:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    18c4:	09db      	lsrs	r3, r3, #7
    18c6:	d002      	beq.n	18ce <GMAC_Handler+0x3a>
    18c8:	6843      	ldr	r3, [r0, #4]
    18ca:	b103      	cbz	r3, 18ce <GMAC_Handler+0x3a>
			_gmac_dev->cb.transmited(_gmac_dev);
    18cc:	4798      	blx	r3
		}
	}

	/* Frame received */
	if (rsr & GMAC_RSR_REC) {
    18ce:	9b00      	ldr	r3, [sp, #0]
    18d0:	f013 0f02 	tst.w	r3, #2
    18d4:	d005      	beq.n	18e2 <GMAC_Handler+0x4e>
		if (_gmac_dev->cb.received != NULL) {
    18d6:	4b07      	ldr	r3, [pc, #28]	; (18f4 <GMAC_Handler+0x60>)
    18d8:	f8d3 036c 	ldr.w	r0, [r3, #876]	; 0x36c
    18dc:	6883      	ldr	r3, [r0, #8]
    18de:	b103      	cbz	r3, 18e2 <GMAC_Handler+0x4e>
			_gmac_dev->cb.received(_gmac_dev);
    18e0:	4798      	blx	r3
		}
	}
	hri_gmac_write_RSR_reg(_gmac_dev->hw, rsr);
    18e2:	4b04      	ldr	r3, [pc, #16]	; (18f4 <GMAC_Handler+0x60>)
    18e4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	9a00      	ldr	r2, [sp, #0]
	((Gmac *)hw)->RSR.reg = data;
    18ec:	621a      	str	r2, [r3, #32]
}
    18ee:	b003      	add	sp, #12
    18f0:	f85d fb04 	ldr.w	pc, [sp], #4
    18f4:	200011f8 	.word	0x200011f8
    18f8:	20000100 	.word	0x20000100

000018fc <_mac_async_init>:

int32_t _mac_async_init(struct _mac_async_device *const dev, void *const hw)
{
    18fc:	b538      	push	{r3, r4, r5, lr}
    18fe:	4604      	mov	r4, r0
	dev->hw = hw;
    1900:	6001      	str	r1, [r0, #0]
	((Gmac *)hw)->NCR.reg = data;
    1902:	2310      	movs	r3, #16
    1904:	600b      	str	r3, [r1, #0]
	                       (CONF_GMAC_NCR_LBL ? GMAC_NCR_LBL : 0) | (CONF_GMAC_NCR_MPE ? GMAC_NCR_MPE : 0)
	                           | (CONF_GMAC_NCR_WESTAT ? GMAC_NCR_WESTAT : 0) | (CONF_GMAC_NCR_BP ? GMAC_NCR_BP : 0)
	                           | (CONF_GMAC_NCR_ENPBPR ? GMAC_NCR_ENPBPR : 0)
	                           | (CONF_GMAC_NCR_TXPBPF ? GMAC_NCR_TXPBPF : 0));
	hri_gmac_write_NCFGR_reg(
	    dev->hw,
    1906:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->NCFGR.reg = data;
    1908:	4a11      	ldr	r2, [pc, #68]	; (1950 <_mac_async_init+0x54>)
    190a:	605a      	str	r2, [r3, #4]
	        | (CONF_GMAC_NCFGR_LFERD ? GMAC_NCFGR_LFERD : 0) | (CONF_GMAC_NCFGR_RFCS ? GMAC_NCFGR_RFCS : 0)
	        | GMAC_NCFGR_CLK(CONF_GMAC_NCFGR_CLK) | (CONF_GMAC_NCFGR_DCPF ? GMAC_NCFGR_DCPF : 0)
	        | (CONF_GMAC_NCFGR_RXCOEN ? GMAC_NCFGR_RXCOEN : 0) | (CONF_GMAC_NCFGR_EFRHD ? GMAC_NCFGR_EFRHD : 0)
	        | (CONF_GMAC_NCFGR_IRXFCS ? GMAC_NCFGR_IRXFCS : 0) | (CONF_GMAC_NCFGR_IPGSEN ? GMAC_NCFGR_IPGSEN : 0)
	        | (CONF_GMAC_NCFGR_RXBP ? GMAC_NCFGR_RXBP : 0) | (CONF_GMAC_NCFGR_IRXER ? GMAC_NCFGR_IRXER : 0));
	hri_gmac_write_UR_reg(dev->hw, (CONF_GMAC_UR_MII ? GMAC_UR_MII : 0));
    190c:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->UR.reg = data;
    190e:	2500      	movs	r5, #0
    1910:	60dd      	str	r5, [r3, #12]
	hri_gmac_write_DCFGR_reg(
	    dev->hw,
    1912:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->DCFGR.reg = data;
    1914:	4a0f      	ldr	r2, [pc, #60]	; (1954 <_mac_async_init+0x58>)
    1916:	611a      	str	r2, [r3, #16]
	    GMAC_DCFGR_FBLDO(CONF_GMAC_DCFGR_FBLDO) | (CONF_GMAC_DCFGR_ESMA ? GMAC_DCFGR_ESMA : 0)
	        | (CONF_GMAC_DCFGR_ESPA ? GMAC_DCFGR_ESPA : 0) | GMAC_DCFGR_RXBMS(CONF_GMAC_DCFGR_RXBMS)
	        | (CONF_GMAC_DCFGR_TXPBMS ? GMAC_DCFGR_TXPBMS : 0) | (CONF_GMAC_DCFGR_TXCOEN ? GMAC_DCFGR_TXCOEN : 0)
	        | GMAC_DCFGR_DRBS(CONF_GMAC_DCFGR_DRBS) | (CONF_GMAC_DCFGR_DDRP ? GMAC_DCFGR_DDRP : 0));
	hri_gmac_write_WOL_reg(dev->hw, 0);
    1918:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_gmac_write_WOL_reg(const void *const hw, hri_gmac_wol_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->WOL.reg = data;
    191a:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
	hri_gmac_write_IPGS_reg(dev->hw, GMAC_IPGS_FL((CONF_GMAC_IPGS_FL_MUL << 8) | CONF_GMAC_IPGS_FL_DIV));
    191e:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_gmac_write_IPGS_reg(const void *const hw, hri_gmac_ipgs_reg_t data)
{
	GMAC_CRITICAL_SECTION_ENTER();
	((Gmac *)hw)->IPGS.reg = data;
    1920:	f240 1201 	movw	r2, #257	; 0x101
    1924:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	_mac_init_bufdescr(dev);
    1928:	4b0b      	ldr	r3, [pc, #44]	; (1958 <_mac_async_init+0x5c>)
    192a:	4798      	blx	r3

	_gmac_dev = dev;
    192c:	4b0b      	ldr	r3, [pc, #44]	; (195c <_mac_async_init+0x60>)
    192e:	f8c3 436c 	str.w	r4, [r3, #876]	; 0x36c
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1932:	4b0b      	ldr	r3, [pc, #44]	; (1960 <_mac_async_init+0x64>)
    1934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    193c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1940:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1944:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1948:	609a      	str	r2, [r3, #8]
	NVIC_DisableIRQ(GMAC_IRQn);
	NVIC_ClearPendingIRQ(GMAC_IRQn);
	NVIC_EnableIRQ(GMAC_IRQn);

	return ERR_NONE;
}
    194a:	4628      	mov	r0, r5
    194c:	bd38      	pop	{r3, r4, r5, pc}
    194e:	bf00      	nop
    1950:	00100103 	.word	0x00100103
    1954:	00020704 	.word	0x00020704
    1958:	000017fd 	.word	0x000017fd
    195c:	200011f8 	.word	0x200011f8
    1960:	e000e100 	.word	0xe000e100

00001964 <_mac_async_enable>:
	return ERR_NONE;
}

int32_t _mac_async_enable(struct _mac_async_device *const dev)
{
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
    1964:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    1966:	6813      	ldr	r3, [r2, #0]
    1968:	f043 030c 	orr.w	r3, r3, #12
    196c:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
}
    196e:	2000      	movs	r0, #0
    1970:	4770      	bx	lr
	...

00001974 <_mac_async_write>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_RXEN | GMAC_NCR_TXEN);
	return ERR_NONE;
}

int32_t _mac_async_write(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    1974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1978:	4680      	mov	r8, r0
    197a:	460f      	mov	r7, r1
    197c:	4614      	mov	r4, r2
	uint32_t pos;
	uint32_t blen;
	uint32_t i;

	if (_txbuf_descrs[_last_txbuf_index].status.bm.used && !_txbuf_descrs[_last_txbuf_index].status.bm.last_buf) {
    197e:	4b59      	ldr	r3, [pc, #356]	; (1ae4 <_mac_async_write+0x170>)
    1980:	f8d3 2bcc 	ldr.w	r2, [r3, #3020]	; 0xbcc
    1984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1988:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    198c:	09db      	lsrs	r3, r3, #7
    198e:	d00b      	beq.n	19a8 <_mac_async_write+0x34>
    1990:	4b54      	ldr	r3, [pc, #336]	; (1ae4 <_mac_async_write+0x170>)
    1992:	f8d3 2bcc 	ldr.w	r2, [r3, #3020]	; 0xbcc
    1996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    199a:	f893 3bbd 	ldrb.w	r3, [r3, #3005]	; 0xbbd
    199e:	09db      	lsrs	r3, r3, #7
    19a0:	d102      	bne.n	19a8 <_mac_async_write+0x34>
    19a2:	2101      	movs	r1, #1
		/* Set used flag from first descriptor to last descriptor,
		 * as DMA olny set the first used flag */
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    19a4:	2901      	cmp	r1, #1
    19a6:	d914      	bls.n	19d2 <_mac_async_write+0x5e>
				break;
			}
		}
	}

	if (!_txbuf_descrs[_txbuf_index].status.bm.used) {
    19a8:	4b4e      	ldr	r3, [pc, #312]	; (1ae4 <_mac_async_write+0x170>)
    19aa:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    19ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    19b2:	f893 3bbf 	ldrb.w	r3, [r3, #3007]	; 0xbbf
    19b6:	09db      	lsrs	r3, r3, #7
    19b8:	f000 808b 	beq.w	1ad2 <_mac_async_write+0x15e>
		return ERR_NO_RESOURCE;
	}

	/* Check if have enough buffers, the first buffer already checked */
	if (len > CONF_GMAC_TXBUF_SIZE) {
    19bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
    19c0:	429c      	cmp	r4, r3
    19c2:	d81c      	bhi.n	19fe <_mac_async_write+0x8a>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
				break;
			}
		}
	}
	_last_txbuf_index = _txbuf_index;
    19c4:	4b47      	ldr	r3, [pc, #284]	; (1ae4 <_mac_async_write+0x170>)
    19c6:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    19ca:	f8c3 2bcc 	str.w	r2, [r3, #3020]	; 0xbcc

	/* Write data to transmit buffer */
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    19ce:	2600      	movs	r6, #0
    19d0:	e04d      	b.n	1a6e <_mac_async_write+0xfa>
			pos = _last_txbuf_index + i;
    19d2:	4b44      	ldr	r3, [pc, #272]	; (1ae4 <_mac_async_write+0x170>)
    19d4:	f8d3 3bcc 	ldr.w	r3, [r3, #3020]	; 0xbcc
    19d8:	440b      	add	r3, r1
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    19da:	2b01      	cmp	r3, #1
    19dc:	d900      	bls.n	19e0 <_mac_async_write+0x6c>
				pos -= CONF_GMAC_TXDESCR_NUM;
    19de:	3b02      	subs	r3, #2
			_txbuf_descrs[pos].status.bm.used = 1;
    19e0:	4a40      	ldr	r2, [pc, #256]	; (1ae4 <_mac_async_write+0x170>)
    19e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    19e6:	f893 2bbf 	ldrb.w	r2, [r3, #3007]	; 0xbbf
    19ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    19ee:	f883 2bbf 	strb.w	r2, [r3, #3007]	; 0xbbf
			if (_txbuf_descrs[pos].status.bm.last_buf) {
    19f2:	f893 3bbd 	ldrb.w	r3, [r3, #3005]	; 0xbbd
    19f6:	09db      	lsrs	r3, r3, #7
    19f8:	d1d6      	bne.n	19a8 <_mac_async_write+0x34>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    19fa:	3101      	adds	r1, #1
    19fc:	e7d2      	b.n	19a4 <_mac_async_write+0x30>
    19fe:	2301      	movs	r3, #1
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1a00:	2b01      	cmp	r3, #1
    1a02:	d8df      	bhi.n	19c4 <_mac_async_write+0x50>
			pos = _txbuf_index + i;
    1a04:	4a37      	ldr	r2, [pc, #220]	; (1ae4 <_mac_async_write+0x170>)
    1a06:	f8d2 2bc8 	ldr.w	r2, [r2, #3016]	; 0xbc8
    1a0a:	441a      	add	r2, r3
			if (pos >= CONF_GMAC_TXDESCR_NUM) {
    1a0c:	2a01      	cmp	r2, #1
    1a0e:	d900      	bls.n	1a12 <_mac_async_write+0x9e>
				pos -= CONF_GMAC_TXDESCR_NUM;
    1a10:	3a02      	subs	r2, #2
			if (!_txbuf_descrs[pos].status.bm.used) {
    1a12:	4934      	ldr	r1, [pc, #208]	; (1ae4 <_mac_async_write+0x170>)
    1a14:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    1a18:	f892 2bbf 	ldrb.w	r2, [r2, #3007]	; 0xbbf
    1a1c:	09d2      	lsrs	r2, r2, #7
    1a1e:	d05c      	beq.n	1ada <_mac_async_write+0x166>
			if ((len - (CONF_GMAC_TXBUF_SIZE * i)) < CONF_GMAC_TXBUF_SIZE) {
    1a20:	f240 52dc 	movw	r2, #1500	; 0x5dc
    1a24:	fb02 4213 	mls	r2, r2, r3, r4
    1a28:	f240 51db 	movw	r1, #1499	; 0x5db
    1a2c:	428a      	cmp	r2, r1
    1a2e:	d9c9      	bls.n	19c4 <_mac_async_write+0x50>
		for (i = 1; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1a30:	3301      	adds	r3, #1
    1a32:	e7e5      	b.n	1a00 <_mac_async_write+0x8c>

		if (len > 0) {
			/* Here the Used flag be set to zero */
			_txbuf_descrs[_txbuf_index].status.val = blen;
		} else {
			_txbuf_descrs[_txbuf_index].status.val         = blen;
    1a34:	4b2b      	ldr	r3, [pc, #172]	; (1ae4 <_mac_async_write+0x170>)
    1a36:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1a3e:	f8c2 5bbc 	str.w	r5, [r2, #3004]	; 0xbbc
			_txbuf_descrs[_txbuf_index].status.bm.last_buf = 1;
    1a42:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1a4a:	f893 2bbd 	ldrb.w	r2, [r3, #3005]	; 0xbbd
    1a4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1a52:	f883 2bbd 	strb.w	r2, [r3, #3005]	; 0xbbd
		}
		_txbuf_index++;
    1a56:	4b23      	ldr	r3, [pc, #140]	; (1ae4 <_mac_async_write+0x170>)
    1a58:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a5c:	3201      	adds	r2, #1
    1a5e:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
		if (_txbuf_index == CONF_GMAC_TXDESCR_NUM) {
    1a62:	f8d3 3bc8 	ldr.w	r3, [r3, #3016]	; 0xbc8
    1a66:	2b02      	cmp	r3, #2
    1a68:	d01d      	beq.n	1aa6 <_mac_async_write+0x132>
			_txbuf_index                                            = 0;
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
		}
		if (len == 0) {
    1a6a:	b33c      	cbz	r4, 1abc <_mac_async_write+0x148>
	for (i = 0; i < CONF_GMAC_TXDESCR_NUM; i++) {
    1a6c:	3601      	adds	r6, #1
    1a6e:	2e01      	cmp	r6, #1
    1a70:	d824      	bhi.n	1abc <_mac_async_write+0x148>
		blen = min(len, CONF_GMAC_TXBUF_SIZE);
    1a72:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1a76:	4625      	mov	r5, r4
    1a78:	429c      	cmp	r4, r3
    1a7a:	bf28      	it	cs
    1a7c:	461d      	movcs	r5, r3
		memcpy(_txbuf[_txbuf_index], buf + (i * CONF_GMAC_TXBUF_SIZE), blen);
    1a7e:	4819      	ldr	r0, [pc, #100]	; (1ae4 <_mac_async_write+0x170>)
    1a80:	f8d0 ebc8 	ldr.w	lr, [r0, #3016]	; 0xbc8
    1a84:	462a      	mov	r2, r5
    1a86:	fb03 7106 	mla	r1, r3, r6, r7
    1a8a:	fb03 000e 	mla	r0, r3, lr, r0
    1a8e:	4b16      	ldr	r3, [pc, #88]	; (1ae8 <_mac_async_write+0x174>)
    1a90:	4798      	blx	r3
		if (len > 0) {
    1a92:	1b64      	subs	r4, r4, r5
    1a94:	d0ce      	beq.n	1a34 <_mac_async_write+0xc0>
			_txbuf_descrs[_txbuf_index].status.val = blen;
    1a96:	4b13      	ldr	r3, [pc, #76]	; (1ae4 <_mac_async_write+0x170>)
    1a98:	f8d3 2bc8 	ldr.w	r2, [r3, #3016]	; 0xbc8
    1a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1aa0:	f8c3 5bbc 	str.w	r5, [r3, #3004]	; 0xbbc
    1aa4:	e7d7      	b.n	1a56 <_mac_async_write+0xe2>
			_txbuf_index                                            = 0;
    1aa6:	4b0f      	ldr	r3, [pc, #60]	; (1ae4 <_mac_async_write+0x170>)
    1aa8:	2200      	movs	r2, #0
    1aaa:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
			_txbuf_descrs[CONF_GMAC_TXDESCR_NUM - 1].status.bm.wrap = 1;
    1aae:	f893 2bc7 	ldrb.w	r2, [r3, #3015]	; 0xbc7
    1ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1ab6:	f883 2bc7 	strb.w	r2, [r3, #3015]	; 0xbc7
    1aba:	e7d6      	b.n	1a6a <_mac_async_write+0xf6>
  __ASM volatile ("dsb 0xF":::"memory");
    1abc:	f3bf 8f4f 	dsb	sy

	/* Data synchronization barrier */
	__DSB();

	/* Active Transmit */
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_TSTART);
    1ac0:	f8d8 2000 	ldr.w	r2, [r8]
    1ac4:	6813      	ldr	r3, [r2, #0]
    1ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1aca:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    1acc:	2000      	movs	r0, #0
    1ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_NO_RESOURCE;
    1ad2:	f06f 001b 	mvn.w	r0, #27
    1ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return ERR_NO_RESOURCE;
    1ada:	f06f 001b 	mvn.w	r0, #27
}
    1ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ae2:	bf00      	nop
    1ae4:	20000100 	.word	0x20000100
    1ae8:	0000cd53 	.word	0x0000cd53

00001aec <_mac_async_read>:

uint32_t _mac_async_read(struct _mac_async_device *const dev, uint8_t *buf, uint32_t len)
{
    1aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1af0:	4689      	mov	r9, r1
    1af2:	4690      	mov	r8, r2
	uint32_t i;
	uint32_t j;
	uint32_t pos;
	uint32_t n;
	uint32_t sof       = 0xFFFFFFFF; /* Start of Frame index */
    1af4:	f04f 36ff 	mov.w	r6, #4294967295
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
	uint32_t total_len = 0;          /* Total length of received package */

	(void)dev;
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1af8:	2400      	movs	r4, #0
    1afa:	e000      	b.n	1afe <_mac_async_read+0x12>
    1afc:	3401      	adds	r4, #1
    1afe:	2c0f      	cmp	r4, #15
    1b00:	d82d      	bhi.n	1b5e <_mac_async_read+0x72>
		pos = _rxbuf_index + i;
    1b02:	4b3f      	ldr	r3, [pc, #252]	; (1c00 <_mac_async_read+0x114>)
    1b04:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1b08:	4423      	add	r3, r4

		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    1b0a:	2b0f      	cmp	r3, #15
    1b0c:	d900      	bls.n	1b10 <_mac_async_read+0x24>
			pos -= CONF_GMAC_RXDESCR_NUM;
    1b0e:	3b10      	subs	r3, #16
		}

		/* No more data for Ethernet package */
		if (!_rxbuf_descrs[pos].address.bm.ownership) {
    1b10:	4a3b      	ldr	r2, [pc, #236]	; (1c00 <_mac_async_read+0x114>)
    1b12:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b16:	f892 22e8 	ldrb.w	r2, [r2, #744]	; 0x2e8
    1b1a:	f012 0f01 	tst.w	r2, #1
    1b1e:	d028      	beq.n	1b72 <_mac_async_read+0x86>
			break;
		}

		if (_rxbuf_descrs[pos].status.bm.sof) {
    1b20:	4a37      	ldr	r2, [pc, #220]	; (1c00 <_mac_async_read+0x114>)
    1b22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b26:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1b2a:	f012 0f40 	tst.w	r2, #64	; 0x40
    1b2e:	d000      	beq.n	1b32 <_mac_async_read+0x46>
			sof = i;
    1b30:	4626      	mov	r6, r4
		}

		if ((_rxbuf_descrs[pos].status.bm.eof) && (sof != 0xFFFFFFFF)) {
    1b32:	4a33      	ldr	r2, [pc, #204]	; (1c00 <_mac_async_read+0x114>)
    1b34:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1b38:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1b3c:	09d2      	lsrs	r2, r2, #7
    1b3e:	d0dd      	beq.n	1afc <_mac_async_read+0x10>
    1b40:	f1b6 3fff 	cmp.w	r6, #4294967295
    1b44:	d0da      	beq.n	1afc <_mac_async_read+0x10>
			/* eof now indicate the number of bufs the frame used */
			eof = i;
			n   = _rxbuf_descrs[pos].status.bm.len;
    1b46:	4a2e      	ldr	r2, [pc, #184]	; (1c00 <_mac_async_read+0x114>)
    1b48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1b4c:	f8b3 32ec 	ldrh.w	r3, [r3, #748]	; 0x2ec
    1b50:	f3c3 030c 	ubfx	r3, r3, #0, #13
			len = min(n, len);
    1b54:	4598      	cmp	r8, r3
    1b56:	bf28      	it	cs
    1b58:	4698      	movcs	r8, r3
			eof = i;
    1b5a:	4627      	mov	r7, r4
			/* Break process since the last data has been found */
			break;
    1b5c:	e001      	b.n	1b62 <_mac_async_read+0x76>
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
    1b5e:	f04f 37ff 	mov.w	r7, #4294967295
		}
	}

	if (eof != 0xFFFFFFFF) {
    1b62:	f1b7 3fff 	cmp.w	r7, #4294967295
    1b66:	d007      	beq.n	1b78 <_mac_async_read+0x8c>
		j = eof + 1;
    1b68:	1c7c      	adds	r4, r7, #1
	uint32_t total_len = 0;          /* Total length of received package */
    1b6a:	f04f 0a00 	mov.w	sl, #0
	} else {
		j = i;
	}

	/* Copy data to user buffer */
	for (i = 0; i < j; i++) {
    1b6e:	4655      	mov	r5, sl
    1b70:	e01c      	b.n	1bac <_mac_async_read+0xc0>
	uint32_t eof       = 0xFFFFFFFF; /* End of Frame index */
    1b72:	f04f 37ff 	mov.w	r7, #4294967295
    1b76:	e7f4      	b.n	1b62 <_mac_async_read+0x76>
	} else if (sof != 0xFFFFFFFF) {
    1b78:	f1b6 3fff 	cmp.w	r6, #4294967295
    1b7c:	d0f5      	beq.n	1b6a <_mac_async_read+0x7e>
		j = sof;
    1b7e:	4634      	mov	r4, r6
    1b80:	e7f3      	b.n	1b6a <_mac_async_read+0x7e>
			buf += n;
			total_len += n;
			len -= n;
		}

		_rxbuf_descrs[_rxbuf_index].address.bm.ownership = 0;
    1b82:	4b1f      	ldr	r3, [pc, #124]	; (1c00 <_mac_async_read+0x114>)
    1b84:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
    1b88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1b8c:	f892 12e8 	ldrb.w	r1, [r2, #744]	; 0x2e8
    1b90:	f36f 0100 	bfc	r1, #0, #1
    1b94:	f882 12e8 	strb.w	r1, [r2, #744]	; 0x2e8
		_rxbuf_index++;
    1b98:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
    1b9c:	3201      	adds	r2, #1
    1b9e:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368

		if (_rxbuf_index == CONF_GMAC_RXDESCR_NUM) {
    1ba2:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1ba6:	2b10      	cmp	r3, #16
    1ba8:	d021      	beq.n	1bee <_mac_async_read+0x102>
	for (i = 0; i < j; i++) {
    1baa:	3501      	adds	r5, #1
    1bac:	42a5      	cmp	r5, r4
    1bae:	d223      	bcs.n	1bf8 <_mac_async_read+0x10c>
		if (eof != 0xFFFFFFFF && i >= sof && i <= eof && len > 0) {
    1bb0:	f1b7 3fff 	cmp.w	r7, #4294967295
    1bb4:	d0e5      	beq.n	1b82 <_mac_async_read+0x96>
    1bb6:	42b5      	cmp	r5, r6
    1bb8:	d3e3      	bcc.n	1b82 <_mac_async_read+0x96>
    1bba:	42bd      	cmp	r5, r7
    1bbc:	d8e1      	bhi.n	1b82 <_mac_async_read+0x96>
    1bbe:	f1b8 0f00 	cmp.w	r8, #0
    1bc2:	d0de      	beq.n	1b82 <_mac_async_read+0x96>
			n = min(len, CONF_GMAC_RXBUF_SIZE);
    1bc4:	46c3      	mov	fp, r8
    1bc6:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    1bca:	bf28      	it	cs
    1bcc:	f04f 0b80 	movcs.w	fp, #128	; 0x80
			memcpy(buf, _rxbuf[_rxbuf_index], n);
    1bd0:	4b0b      	ldr	r3, [pc, #44]	; (1c00 <_mac_async_read+0x114>)
    1bd2:	f8d3 1368 	ldr.w	r1, [r3, #872]	; 0x368
    1bd6:	465a      	mov	r2, fp
    1bd8:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <_mac_async_read+0x118>)
    1bda:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
    1bde:	4648      	mov	r0, r9
    1be0:	4b09      	ldr	r3, [pc, #36]	; (1c08 <_mac_async_read+0x11c>)
    1be2:	4798      	blx	r3
			buf += n;
    1be4:	44d9      	add	r9, fp
			total_len += n;
    1be6:	44da      	add	sl, fp
			len -= n;
    1be8:	eba8 080b 	sub.w	r8, r8, fp
    1bec:	e7c9      	b.n	1b82 <_mac_async_read+0x96>
			_rxbuf_index = 0;
    1bee:	2200      	movs	r2, #0
    1bf0:	4b03      	ldr	r3, [pc, #12]	; (1c00 <_mac_async_read+0x114>)
    1bf2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    1bf6:	e7d8      	b.n	1baa <_mac_async_read+0xbe>
		}
	}

	return total_len;
}
    1bf8:	4650      	mov	r0, sl
    1bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bfe:	bf00      	nop
    1c00:	200011f8 	.word	0x200011f8
    1c04:	20000ce0 	.word	0x20000ce0
    1c08:	0000cd53 	.word	0x0000cd53

00001c0c <_mac_async_read_len>:

uint32_t _mac_async_read_len(struct _mac_async_device *const dev)
{
    1c0c:	b410      	push	{r4}
	uint32_t i;
	uint32_t pos;
	bool     sof       = false; /* Start of Frame */
	uint32_t total_len = 0;     /* Total length of received package */
    1c0e:	2000      	movs	r0, #0
	bool     sof       = false; /* Start of Frame */
    1c10:	4604      	mov	r4, r0

	(void)dev;

	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1c12:	4601      	mov	r1, r0
    1c14:	e007      	b.n	1c26 <_mac_async_read_len+0x1a>
		}
		if (sof == true) {
			total_len += _rxbuf_descrs[pos].status.bm.len;
		}

		if (_rxbuf_descrs[pos].status.bm.eof) {
    1c16:	4a18      	ldr	r2, [pc, #96]	; (1c78 <_mac_async_read_len+0x6c>)
    1c18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1c1c:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
    1c20:	09db      	lsrs	r3, r3, #7
    1c22:	d125      	bne.n	1c70 <_mac_async_read_len+0x64>
	for (i = 0; i < CONF_GMAC_RXDESCR_NUM; i++) {
    1c24:	3101      	adds	r1, #1
    1c26:	290f      	cmp	r1, #15
    1c28:	d822      	bhi.n	1c70 <_mac_async_read_len+0x64>
		pos = _rxbuf_index + i;
    1c2a:	4b13      	ldr	r3, [pc, #76]	; (1c78 <_mac_async_read_len+0x6c>)
    1c2c:	f8d3 3368 	ldr.w	r3, [r3, #872]	; 0x368
    1c30:	440b      	add	r3, r1
		if (pos >= CONF_GMAC_RXDESCR_NUM) {
    1c32:	2b0f      	cmp	r3, #15
    1c34:	d900      	bls.n	1c38 <_mac_async_read_len+0x2c>
			pos -= CONF_GMAC_RXDESCR_NUM;
    1c36:	3b10      	subs	r3, #16
		if (!(_rxbuf_descrs[pos].address.bm.ownership)) {
    1c38:	4a0f      	ldr	r2, [pc, #60]	; (1c78 <_mac_async_read_len+0x6c>)
    1c3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c3e:	f892 22e8 	ldrb.w	r2, [r2, #744]	; 0x2e8
    1c42:	f012 0f01 	tst.w	r2, #1
    1c46:	d013      	beq.n	1c70 <_mac_async_read_len+0x64>
		if (_rxbuf_descrs[pos].status.bm.sof) {
    1c48:	4a0b      	ldr	r2, [pc, #44]	; (1c78 <_mac_async_read_len+0x6c>)
    1c4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c4e:	f892 22ed 	ldrb.w	r2, [r2, #749]	; 0x2ed
    1c52:	f012 0f40 	tst.w	r2, #64	; 0x40
    1c56:	d000      	beq.n	1c5a <_mac_async_read_len+0x4e>
			sof = true;
    1c58:	2401      	movs	r4, #1
		if (sof == true) {
    1c5a:	2c00      	cmp	r4, #0
    1c5c:	d0db      	beq.n	1c16 <_mac_async_read_len+0xa>
			total_len += _rxbuf_descrs[pos].status.bm.len;
    1c5e:	4a06      	ldr	r2, [pc, #24]	; (1c78 <_mac_async_read_len+0x6c>)
    1c60:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1c64:	f8b2 22ec 	ldrh.w	r2, [r2, #748]	; 0x2ec
    1c68:	f3c2 020c 	ubfx	r2, r2, #0, #13
    1c6c:	4410      	add	r0, r2
    1c6e:	e7d2      	b.n	1c16 <_mac_async_read_len+0xa>
			break;
		}
	}

	return total_len;
}
    1c70:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c74:	4770      	bx	lr
    1c76:	bf00      	nop
    1c78:	200011f8 	.word	0x200011f8

00001c7c <_mac_async_register_callback>:
}

int32_t _mac_async_register_callback(struct _mac_async_device *const dev, const enum mac_async_cb_type type,
                                     const FUNC_PTR func)
{
	switch (type) {
    1c7c:	b169      	cbz	r1, 1c9a <_mac_async_register_callback+0x1e>
    1c7e:	2901      	cmp	r1, #1
    1c80:	d117      	bne.n	1cb2 <_mac_async_register_callback+0x36>
	case MAC_ASYNC_TRANSMIT_CB:
		dev->cb.transmited = (_mac_async_cb_t)func;
    1c82:	6042      	str	r2, [r0, #4]
		if (func) {
    1c84:	b122      	cbz	r2, 1c90 <_mac_async_register_callback+0x14>
			hri_gmac_set_IMR_TCOMP_bit(dev->hw);
    1c86:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_TCOMP;
    1c88:	2280      	movs	r2, #128	; 0x80
    1c8a:	629a      	str	r2, [r3, #40]	; 0x28
		}
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    1c8c:	2000      	movs	r0, #0
    1c8e:	4770      	bx	lr
			hri_gmac_clear_IMR_TCOMP_bit(dev->hw);
    1c90:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IDR.reg = GMAC_IMR_TCOMP;
    1c92:	2280      	movs	r2, #128	; 0x80
    1c94:	62da      	str	r2, [r3, #44]	; 0x2c
	return ERR_NONE;
    1c96:	2000      	movs	r0, #0
    1c98:	4770      	bx	lr
		dev->cb.received = (_mac_async_cb_t)func;
    1c9a:	6082      	str	r2, [r0, #8]
		if (func) {
    1c9c:	b122      	cbz	r2, 1ca8 <_mac_async_register_callback+0x2c>
			hri_gmac_set_IMR_RCOMP_bit(dev->hw);
    1c9e:	6803      	ldr	r3, [r0, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_RCOMP;
    1ca0:	2202      	movs	r2, #2
    1ca2:	629a      	str	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    1ca4:	2000      	movs	r0, #0
    1ca6:	4770      	bx	lr
			hri_gmac_set_IMR_RCOMP_bit(dev->hw);
    1ca8:	6803      	ldr	r3, [r0, #0]
    1caa:	2202      	movs	r2, #2
    1cac:	629a      	str	r2, [r3, #40]	; 0x28
	return ERR_NONE;
    1cae:	2000      	movs	r0, #0
    1cb0:	4770      	bx	lr
		return ERR_INVALID_ARG;
    1cb2:	f06f 000c 	mvn.w	r0, #12
}
    1cb6:	4770      	bx	lr

00001cb8 <_mac_async_set_filter>:

int32_t _mac_async_set_filter(struct _mac_async_device *const dev, uint8_t index, struct mac_async_filter *filter)
{
    1cb8:	b570      	push	{r4, r5, r6, lr}
    1cba:	4606      	mov	r6, r0
    1cbc:	460c      	mov	r4, r1
    1cbe:	4615      	mov	r5, r2
	ASSERT(index < 4);
    1cc0:	f240 12cf 	movw	r2, #463	; 0x1cf
    1cc4:	490c      	ldr	r1, [pc, #48]	; (1cf8 <_mac_async_set_filter+0x40>)
    1cc6:	2c03      	cmp	r4, #3
    1cc8:	bf8c      	ite	hi
    1cca:	2000      	movhi	r0, #0
    1ccc:	2001      	movls	r0, #1
    1cce:	4b0b      	ldr	r3, [pc, #44]	; (1cfc <_mac_async_set_filter+0x44>)
    1cd0:	4798      	blx	r3

	hri_gmac_write_SAB_reg(dev->hw, index, *((uint32_t *)(filter->mac)));
    1cd2:	6833      	ldr	r3, [r6, #0]
    1cd4:	6829      	ldr	r1, [r5, #0]
	((Gmac *)hw)->Sa[submodule_index].SAB.reg = data;
    1cd6:	f104 0211 	add.w	r2, r4, #17
    1cda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	hri_gmac_write_SAT_reg(dev->hw, index, *((uint16_t *)(filter->mac + 4)));
    1cde:	6833      	ldr	r3, [r6, #0]
    1ce0:	88a9      	ldrh	r1, [r5, #4]
	((Gmac *)hw)->Sa[submodule_index].SAT.reg = data;
    1ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1ce6:	6059      	str	r1, [r3, #4]

	hri_gmac_write_TIDM_reg(dev->hw, index, GMAC_TIDM_TID(*((uint16_t *)(filter->tid)) | filter->tid_enable << 31));
    1ce8:	6833      	ldr	r3, [r6, #0]
    1cea:	88ea      	ldrh	r2, [r5, #6]
	((Gmac *)hw)->TIDM[index].reg = data;
    1cec:	342a      	adds	r4, #42	; 0x2a
    1cee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	return ERR_NONE;
}
    1cf2:	2000      	movs	r0, #0
    1cf4:	bd70      	pop	{r4, r5, r6, pc}
    1cf6:	bf00      	nop
    1cf8:	0000e324 	.word	0x0000e324
    1cfc:	0000154d 	.word	0x0000154d

00001d00 <_mac_async_read_phy_reg>:
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_MPE);
	return ERR_NONE;
}

int32_t _mac_async_read_phy_reg(struct _mac_async_device *const dev, uint16_t addr, uint16_t reg, uint16_t *data)
{
    1d00:	b430      	push	{r4, r5}
	hri_gmac_set_NCR_reg(dev->hw, GMAC_NCR_MPE);
    1d02:	6805      	ldr	r5, [r0, #0]
	((Gmac *)hw)->NCR.reg |= mask;
    1d04:	682c      	ldr	r4, [r5, #0]
    1d06:	f044 0410 	orr.w	r4, r4, #16
    1d0a:	602c      	str	r4, [r5, #0]
	hri_gmac_write_MAN_reg(dev->hw,
    1d0c:	6804      	ldr	r4, [r0, #0]
	                       GMAC_MAN_OP(2) |            /* 0x02 read operation */
	                           CONF_GMAC_CLTTO << 30 | /* Clause 22/45 operation */
	                           GMAC_MAN_WTN(0x2) |     /* Must be written to 0x2 */
	                           GMAC_MAN_PHYA(addr) | GMAC_MAN_REGA(reg));
    1d0e:	05c9      	lsls	r1, r1, #23
    1d10:	f001 6178 	and.w	r1, r1, #260046848	; 0xf800000
    1d14:	0492      	lsls	r2, r2, #18
    1d16:	f402 02f8 	and.w	r2, r2, #8126464	; 0x7c0000
    1d1a:	430a      	orrs	r2, r1
    1d1c:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
    1d20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Gmac *)hw)->MAN.reg = data;
    1d24:	6362      	str	r2, [r4, #52]	; 0x34

	/* Wait for the read operation complete */
	while (!hri_gmac_get_NSR_IDLE_bit(dev->hw)) {
    1d26:	6802      	ldr	r2, [r0, #0]
	return (((Gmac *)hw)->NSR.reg & GMAC_NSR_IDLE) >> GMAC_NSR_IDLE_Pos;
    1d28:	6891      	ldr	r1, [r2, #8]
    1d2a:	f011 0f04 	tst.w	r1, #4
    1d2e:	d0fa      	beq.n	1d26 <_mac_async_read_phy_reg+0x26>
	return ((Gmac *)hw)->MAN.reg;
    1d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
	}

	*data = GMAC_MAN_DATA(hri_gmac_read_MAN_reg(dev->hw));
    1d32:	801a      	strh	r2, [r3, #0]
	hri_gmac_clear_NCR_reg(dev->hw, GMAC_NCR_MPE);
    1d34:	6802      	ldr	r2, [r0, #0]
	((Gmac *)hw)->NCR.reg &= ~mask;
    1d36:	6813      	ldr	r3, [r2, #0]
    1d38:	f023 0310 	bic.w	r3, r3, #16
    1d3c:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
}
    1d3e:	2000      	movs	r0, #0
    1d40:	bc30      	pop	{r4, r5}
    1d42:	4770      	bx	lr

00001d44 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1d44:	2201      	movs	r2, #1
    1d46:	4b01      	ldr	r3, [pc, #4]	; (1d4c <_mclk_init+0x8>)
    1d48:	715a      	strb	r2, [r3, #5]
    1d4a:	4770      	bx	lr
    1d4c:	40000800 	.word	0x40000800

00001d50 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1d50:	4b03      	ldr	r3, [pc, #12]	; (1d60 <_osc32kctrl_init_sources+0x10>)
    1d52:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1d54:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1d58:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1d5a:	2201      	movs	r2, #1
    1d5c:	741a      	strb	r2, [r3, #16]
    1d5e:	4770      	bx	lr
    1d60:	40001400 	.word	0x40001400

00001d64 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1d64:	4a04      	ldr	r2, [pc, #16]	; (1d78 <_oscctrl_init_sources+0x14>)
    1d66:	4b05      	ldr	r3, [pc, #20]	; (1d7c <_oscctrl_init_sources+0x18>)
    1d68:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1d6a:	4b04      	ldr	r3, [pc, #16]	; (1d7c <_oscctrl_init_sources+0x18>)
    1d6c:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1d6e:	f013 0f02 	tst.w	r3, #2
    1d72:	d0fa      	beq.n	1d6a <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop
    1d78:	03002606 	.word	0x03002606
    1d7c:	40001000 	.word	0x40001000

00001d80 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1d80:	4770      	bx	lr
	...

00001d84 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1d84:	b500      	push	{lr}
    1d86:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1d88:	4b0d      	ldr	r3, [pc, #52]	; (1dc0 <RAMECC_Handler+0x3c>)
    1d8a:	789b      	ldrb	r3, [r3, #2]
    1d8c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1d8e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1d90:	9b01      	ldr	r3, [sp, #4]
    1d92:	f013 0f02 	tst.w	r3, #2
    1d96:	d006      	beq.n	1da6 <RAMECC_Handler+0x22>
    1d98:	4b0a      	ldr	r3, [pc, #40]	; (1dc4 <RAMECC_Handler+0x40>)
    1d9a:	681b      	ldr	r3, [r3, #0]
    1d9c:	b11b      	cbz	r3, 1da6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1d9e:	4a08      	ldr	r2, [pc, #32]	; (1dc0 <RAMECC_Handler+0x3c>)
    1da0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1da2:	4798      	blx	r3
    1da4:	e009      	b.n	1dba <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1da6:	9b01      	ldr	r3, [sp, #4]
    1da8:	f013 0f01 	tst.w	r3, #1
    1dac:	d005      	beq.n	1dba <RAMECC_Handler+0x36>
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <RAMECC_Handler+0x40>)
    1db0:	685b      	ldr	r3, [r3, #4]
    1db2:	b113      	cbz	r3, 1dba <RAMECC_Handler+0x36>
    1db4:	4a02      	ldr	r2, [pc, #8]	; (1dc0 <RAMECC_Handler+0x3c>)
    1db6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1db8:	4798      	blx	r3
	} else {
		return;
	}
}
    1dba:	b003      	add	sp, #12
    1dbc:	f85d fb04 	ldr.w	pc, [sp], #4
    1dc0:	41020000 	.word	0x41020000
    1dc4:	200129ac 	.word	0x200129ac

00001dc8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1dc8:	b470      	push	{r4, r5, r6}
    1dca:	b089      	sub	sp, #36	; 0x24
    1dcc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1dce:	466c      	mov	r4, sp
    1dd0:	4d0c      	ldr	r5, [pc, #48]	; (1e04 <_sercom_get_hardware_index+0x3c>)
    1dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1dd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1dde:	2000      	movs	r0, #0
    1de0:	2807      	cmp	r0, #7
    1de2:	d80a      	bhi.n	1dfa <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1de4:	ab08      	add	r3, sp, #32
    1de6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1dea:	f853 3c20 	ldr.w	r3, [r3, #-32]
    1dee:	42b3      	cmp	r3, r6
    1df0:	d001      	beq.n	1df6 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1df2:	3001      	adds	r0, #1
    1df4:	e7f4      	b.n	1de0 <_sercom_get_hardware_index+0x18>
			return i;
    1df6:	b2c0      	uxtb	r0, r0
    1df8:	e000      	b.n	1dfc <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    1dfa:	2000      	movs	r0, #0
}
    1dfc:	b009      	add	sp, #36	; 0x24
    1dfe:	bc70      	pop	{r4, r5, r6}
    1e00:	4770      	bx	lr
    1e02:	bf00      	nop
    1e04:	0000e33c 	.word	0x0000e33c

00001e08 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    1e08:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e0a:	4b0c      	ldr	r3, [pc, #48]	; (1e3c <_get_sercom_index+0x34>)
    1e0c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e0e:	2300      	movs	r3, #0
    1e10:	b143      	cbz	r3, 1e24 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
    1e12:	f240 2247 	movw	r2, #583	; 0x247
    1e16:	490a      	ldr	r1, [pc, #40]	; (1e40 <_get_sercom_index+0x38>)
    1e18:	2000      	movs	r0, #0
    1e1a:	4b0a      	ldr	r3, [pc, #40]	; (1e44 <_get_sercom_index+0x3c>)
    1e1c:	4798      	blx	r3
	return 0;
    1e1e:	2300      	movs	r3, #0
}
    1e20:	4618      	mov	r0, r3
    1e22:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1e24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    1e28:	00d1      	lsls	r1, r2, #3
    1e2a:	4a07      	ldr	r2, [pc, #28]	; (1e48 <_get_sercom_index+0x40>)
    1e2c:	440a      	add	r2, r1
    1e2e:	f892 2020 	ldrb.w	r2, [r2, #32]
    1e32:	4290      	cmp	r0, r2
    1e34:	d0f4      	beq.n	1e20 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e36:	3301      	adds	r3, #1
    1e38:	b2db      	uxtb	r3, r3
    1e3a:	e7e9      	b.n	1e10 <_get_sercom_index+0x8>
    1e3c:	00001dc9 	.word	0x00001dc9
    1e40:	0000e3b0 	.word	0x0000e3b0
    1e44:	0000154d 	.word	0x0000154d
    1e48:	0000e33c 	.word	0x0000e33c

00001e4c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    1e4c:	b538      	push	{r3, r4, r5, lr}
    1e4e:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1e50:	4b3c      	ldr	r3, [pc, #240]	; (1f44 <_usart_init+0xf8>)
    1e52:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1e54:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1e56:	f013 0f01 	tst.w	r3, #1
    1e5a:	d122      	bne.n	1ea2 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1e5c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1e60:	00da      	lsls	r2, r3, #3
    1e62:	4b39      	ldr	r3, [pc, #228]	; (1f48 <_usart_init+0xfc>)
    1e64:	4413      	add	r3, r2
    1e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1e68:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e6c:	69e3      	ldr	r3, [r4, #28]
    1e6e:	f013 0f03 	tst.w	r3, #3
    1e72:	d1fb      	bne.n	1e6c <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e74:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    1e76:	f013 0f02 	tst.w	r3, #2
    1e7a:	d00b      	beq.n	1e94 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1e7c:	6823      	ldr	r3, [r4, #0]
    1e7e:	f023 0302 	bic.w	r3, r3, #2
    1e82:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e84:	69e3      	ldr	r3, [r4, #28]
    1e86:	f013 0f03 	tst.w	r3, #3
    1e8a:	d1fb      	bne.n	1e84 <_usart_init+0x38>
    1e8c:	69e3      	ldr	r3, [r4, #28]
    1e8e:	f013 0f02 	tst.w	r3, #2
    1e92:	d1fb      	bne.n	1e8c <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1e94:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e98:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e9a:	69e3      	ldr	r3, [r4, #28]
    1e9c:	f013 0f03 	tst.w	r3, #3
    1ea0:	d1fb      	bne.n	1e9a <_usart_init+0x4e>
    1ea2:	69e3      	ldr	r3, [r4, #28]
    1ea4:	f013 0f01 	tst.w	r3, #1
    1ea8:	d1fb      	bne.n	1ea2 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1eaa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1eae:	00da      	lsls	r2, r3, #3
    1eb0:	4b25      	ldr	r3, [pc, #148]	; (1f48 <_usart_init+0xfc>)
    1eb2:	4413      	add	r3, r2
    1eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1eb6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1eb8:	69e3      	ldr	r3, [r4, #28]
    1eba:	f013 0f03 	tst.w	r3, #3
    1ebe:	d1fb      	bne.n	1eb8 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1ec0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ec4:	00da      	lsls	r2, r3, #3
    1ec6:	4b20      	ldr	r3, [pc, #128]	; (1f48 <_usart_init+0xfc>)
    1ec8:	4413      	add	r3, r2
    1eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1ecc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1ece:	69e3      	ldr	r3, [r4, #28]
    1ed0:	f013 0f1f 	tst.w	r3, #31
    1ed4:	d1fb      	bne.n	1ece <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1ed6:	0042      	lsls	r2, r0, #1
    1ed8:	4402      	add	r2, r0
    1eda:	00d1      	lsls	r1, r2, #3
    1edc:	4b1a      	ldr	r3, [pc, #104]	; (1f48 <_usart_init+0xfc>)
    1ede:	440b      	add	r3, r1
    1ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1ee2:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ee6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1eea:	d10a      	bne.n	1f02 <_usart_init+0xb6>
    1eec:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1ef0:	d107      	bne.n	1f02 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1ef2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ef6:	00da      	lsls	r2, r3, #3
    1ef8:	4b13      	ldr	r3, [pc, #76]	; (1f48 <_usart_init+0xfc>)
    1efa:	4413      	add	r3, r2
    1efc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1efe:	81a3      	strh	r3, [r4, #12]
    1f00:	e00f      	b.n	1f22 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1f02:	0042      	lsls	r2, r0, #1
    1f04:	4402      	add	r2, r0
    1f06:	00d1      	lsls	r1, r2, #3
    1f08:	4b0f      	ldr	r3, [pc, #60]	; (1f48 <_usart_init+0xfc>)
    1f0a:	440b      	add	r3, r1
    1f0c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    1f0e:	89a2      	ldrh	r2, [r4, #12]
    1f10:	f361 020c 	bfi	r2, r1, #0, #13
    1f14:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1f16:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    1f1a:	89a3      	ldrh	r3, [r4, #12]
    1f1c:	f362 334f 	bfi	r3, r2, #13, #3
    1f20:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1f22:	4a09      	ldr	r2, [pc, #36]	; (1f48 <_usart_init+0xfc>)
    1f24:	0043      	lsls	r3, r0, #1
    1f26:	181d      	adds	r5, r3, r0
    1f28:	00e9      	lsls	r1, r5, #3
    1f2a:	460d      	mov	r5, r1
    1f2c:	4411      	add	r1, r2
    1f2e:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1f32:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1f34:	442a      	add	r2, r5
    1f36:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1f3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    1f3e:	2000      	movs	r0, #0
    1f40:	bd38      	pop	{r3, r4, r5, pc}
    1f42:	bf00      	nop
    1f44:	00001e09 	.word	0x00001e09
    1f48:	0000e33c 	.word	0x0000e33c

00001f4c <_usart_sync_init>:
{
    1f4c:	b538      	push	{r3, r4, r5, lr}
    1f4e:	460c      	mov	r4, r1
	ASSERT(device);
    1f50:	4605      	mov	r5, r0
    1f52:	22bb      	movs	r2, #187	; 0xbb
    1f54:	4905      	ldr	r1, [pc, #20]	; (1f6c <_usart_sync_init+0x20>)
    1f56:	3000      	adds	r0, #0
    1f58:	bf18      	it	ne
    1f5a:	2001      	movne	r0, #1
    1f5c:	4b04      	ldr	r3, [pc, #16]	; (1f70 <_usart_sync_init+0x24>)
    1f5e:	4798      	blx	r3
	device->hw = hw;
    1f60:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1f62:	4620      	mov	r0, r4
    1f64:	4b03      	ldr	r3, [pc, #12]	; (1f74 <_usart_sync_init+0x28>)
    1f66:	4798      	blx	r3
}
    1f68:	bd38      	pop	{r3, r4, r5, pc}
    1f6a:	bf00      	nop
    1f6c:	0000e3b0 	.word	0x0000e3b0
    1f70:	0000154d 	.word	0x0000154d
    1f74:	00001e4d 	.word	0x00001e4d

00001f78 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1f78:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f7a:	6813      	ldr	r3, [r2, #0]
    1f7c:	f043 0302 	orr.w	r3, r3, #2
    1f80:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f82:	69d3      	ldr	r3, [r2, #28]
    1f84:	f013 0f03 	tst.w	r3, #3
    1f88:	d1fb      	bne.n	1f82 <_usart_sync_enable+0xa>
}
    1f8a:	4770      	bx	lr

00001f8c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1f8c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    1f8e:	6299      	str	r1, [r3, #40]	; 0x28
    1f90:	4770      	bx	lr

00001f92 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1f92:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1f94:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1f96:	b2c0      	uxtb	r0, r0
    1f98:	4770      	bx	lr

00001f9a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1f9a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1f9c:	7e18      	ldrb	r0, [r3, #24]
}
    1f9e:	f000 0001 	and.w	r0, r0, #1
    1fa2:	4770      	bx	lr

00001fa4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1fa4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1fa6:	7e18      	ldrb	r0, [r3, #24]
}
    1fa8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1fac:	4770      	bx	lr

00001fae <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1fae:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1fb0:	7e18      	ldrb	r0, [r3, #24]
}
    1fb2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1fb6:	4770      	bx	lr

00001fb8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1fb8:	b538      	push	{r3, r4, r5, lr}
    1fba:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1fbc:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1fbe:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1fc0:	f013 0f01 	tst.w	r3, #1
    1fc4:	d004      	beq.n	1fd0 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1fc6:	2301      	movs	r3, #1
    1fc8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1fca:	6803      	ldr	r3, [r0, #0]
    1fcc:	b103      	cbz	r3, 1fd0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1fce:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1fd0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1fd2:	f013 0f02 	tst.w	r3, #2
    1fd6:	d005      	beq.n	1fe4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1fd8:	2302      	movs	r3, #2
    1fda:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1fdc:	686b      	ldr	r3, [r5, #4]
    1fde:	b10b      	cbz	r3, 1fe4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1fe0:	4628      	mov	r0, r5
    1fe2:	4798      	blx	r3
    1fe4:	bd38      	pop	{r3, r4, r5, pc}
	...

00001fe8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    1fe8:	4b09      	ldr	r3, [pc, #36]	; (2010 <_tc_init_irq_param+0x28>)
    1fea:	4298      	cmp	r0, r3
    1fec:	d006      	beq.n	1ffc <_tc_init_irq_param+0x14>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC4) {
    1fee:	4b09      	ldr	r3, [pc, #36]	; (2014 <_tc_init_irq_param+0x2c>)
    1ff0:	4298      	cmp	r0, r3
    1ff2:	d006      	beq.n	2002 <_tc_init_irq_param+0x1a>
		_tc4_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC5) {
    1ff4:	4b08      	ldr	r3, [pc, #32]	; (2018 <_tc_init_irq_param+0x30>)
    1ff6:	4298      	cmp	r0, r3
    1ff8:	d006      	beq.n	2008 <_tc_init_irq_param+0x20>
    1ffa:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    1ffc:	4b07      	ldr	r3, [pc, #28]	; (201c <_tc_init_irq_param+0x34>)
    1ffe:	6019      	str	r1, [r3, #0]
    2000:	e7f5      	b.n	1fee <_tc_init_irq_param+0x6>
		_tc4_dev = (struct _pwm_device *)dev;
    2002:	4b06      	ldr	r3, [pc, #24]	; (201c <_tc_init_irq_param+0x34>)
    2004:	6059      	str	r1, [r3, #4]
    2006:	e7f5      	b.n	1ff4 <_tc_init_irq_param+0xc>
		_tc5_dev = (struct _pwm_device *)dev;
    2008:	4b04      	ldr	r3, [pc, #16]	; (201c <_tc_init_irq_param+0x34>)
    200a:	6099      	str	r1, [r3, #8]
	}
}
    200c:	e7f5      	b.n	1ffa <_tc_init_irq_param+0x12>
    200e:	bf00      	nop
    2010:	40003800 	.word	0x40003800
    2014:	42001400 	.word	0x42001400
    2018:	42001800 	.word	0x42001800
    201c:	20001568 	.word	0x20001568

00002020 <get_tc_index>:
{
    2020:	b570      	push	{r4, r5, r6, lr}
    2022:	b088      	sub	sp, #32
    2024:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2026:	466c      	mov	r4, sp
    2028:	4d17      	ldr	r5, [pc, #92]	; (2088 <get_tc_index+0x68>)
    202a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    202c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    202e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2036:	2300      	movs	r3, #0
    2038:	2b07      	cmp	r3, #7
    203a:	d80a      	bhi.n	2052 <get_tc_index+0x32>
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    203c:	aa08      	add	r2, sp, #32
    203e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2042:	f852 2c20 	ldr.w	r2, [r2, #-32]
    2046:	42b2      	cmp	r2, r6
    2048:	d001      	beq.n	204e <get_tc_index+0x2e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    204a:	3301      	adds	r3, #1
    204c:	e7f4      	b.n	2038 <get_tc_index+0x18>
			return i;
    204e:	b2db      	uxtb	r3, r3
    2050:	e000      	b.n	2054 <get_tc_index+0x34>
		}
	}
	return 0;
    2052:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2054:	2000      	movs	r0, #0
    2056:	2802      	cmp	r0, #2
    2058:	d80b      	bhi.n	2072 <get_tc_index+0x52>
		if (_tcs[i].number == index) {
    205a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    205e:	008a      	lsls	r2, r1, #2
    2060:	490a      	ldr	r1, [pc, #40]	; (208c <get_tc_index+0x6c>)
    2062:	5c8a      	ldrb	r2, [r1, r2]
    2064:	429a      	cmp	r2, r3
    2066:	d002      	beq.n	206e <get_tc_index+0x4e>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2068:	3001      	adds	r0, #1
    206a:	b2c0      	uxtb	r0, r0
    206c:	e7f3      	b.n	2056 <get_tc_index+0x36>
			return i;
    206e:	b240      	sxtb	r0, r0
    2070:	e007      	b.n	2082 <get_tc_index+0x62>
	ASSERT(false);
    2072:	f44f 72b3 	mov.w	r2, #358	; 0x166
    2076:	4906      	ldr	r1, [pc, #24]	; (2090 <get_tc_index+0x70>)
    2078:	2000      	movs	r0, #0
    207a:	4b06      	ldr	r3, [pc, #24]	; (2094 <get_tc_index+0x74>)
    207c:	4798      	blx	r3
	return -1;
    207e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2082:	b008      	add	sp, #32
    2084:	bd70      	pop	{r4, r5, r6, pc}
    2086:	bf00      	nop
    2088:	0000e3cc 	.word	0x0000e3cc
    208c:	20000000 	.word	0x20000000
    2090:	0000e3ec 	.word	0x0000e3ec
    2094:	0000154d 	.word	0x0000154d

00002098 <_pwm_init>:
{
    2098:	b570      	push	{r4, r5, r6, lr}
    209a:	4606      	mov	r6, r0
    209c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    209e:	4608      	mov	r0, r1
    20a0:	4b59      	ldr	r3, [pc, #356]	; (2208 <_pwm_init+0x170>)
    20a2:	4798      	blx	r3
    20a4:	4605      	mov	r5, r0
	device->hw = hw;
    20a6:	6134      	str	r4, [r6, #16]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    20a8:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    20aa:	f013 0f01 	tst.w	r3, #1
    20ae:	d119      	bne.n	20e4 <_pwm_init+0x4c>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20b0:	6923      	ldr	r3, [r4, #16]
    20b2:	f013 0f03 	tst.w	r3, #3
    20b6:	d1fb      	bne.n	20b0 <_pwm_init+0x18>

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    20b8:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    20ba:	f013 0f02 	tst.w	r3, #2
    20be:	d00b      	beq.n	20d8 <_pwm_init+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    20c0:	6823      	ldr	r3, [r4, #0]
    20c2:	f023 0302 	bic.w	r3, r3, #2
    20c6:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20c8:	6923      	ldr	r3, [r4, #16]
    20ca:	f013 0f03 	tst.w	r3, #3
    20ce:	d1fb      	bne.n	20c8 <_pwm_init+0x30>
    20d0:	6923      	ldr	r3, [r4, #16]
    20d2:	f013 0f02 	tst.w	r3, #2
    20d6:	d1fb      	bne.n	20d0 <_pwm_init+0x38>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20d8:	2301      	movs	r3, #1
    20da:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20dc:	6923      	ldr	r3, [r4, #16]
    20de:	f013 0f03 	tst.w	r3, #3
    20e2:	d1fb      	bne.n	20dc <_pwm_init+0x44>
    20e4:	6923      	ldr	r3, [r4, #16]
    20e6:	f013 0f01 	tst.w	r3, #1
    20ea:	d1fb      	bne.n	20e4 <_pwm_init+0x4c>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    20ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    20f0:	009a      	lsls	r2, r3, #2
    20f2:	4b46      	ldr	r3, [pc, #280]	; (220c <_pwm_init+0x174>)
    20f4:	4413      	add	r3, r2
    20f6:	685b      	ldr	r3, [r3, #4]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    20f8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    20fa:	6923      	ldr	r3, [r4, #16]
    20fc:	f013 0f03 	tst.w	r3, #3
    2100:	d1fb      	bne.n	20fa <_pwm_init+0x62>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2102:	00aa      	lsls	r2, r5, #2
    2104:	442a      	add	r2, r5
    2106:	0091      	lsls	r1, r2, #2
    2108:	4b40      	ldr	r3, [pc, #256]	; (220c <_pwm_init+0x174>)
    210a:	440b      	add	r3, r1
    210c:	7a9a      	ldrb	r2, [r3, #10]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    210e:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2110:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    2112:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2114:	2203      	movs	r2, #3
    2116:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2118:	685b      	ldr	r3, [r3, #4]
    211a:	f003 030c 	and.w	r3, r3, #12
    211e:	2b08      	cmp	r3, #8
    2120:	d059      	beq.n	21d6 <_pwm_init+0x13e>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2122:	2b00      	cmp	r3, #0
    2124:	d16b      	bne.n	21fe <_pwm_init+0x166>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2126:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    212a:	009a      	lsls	r2, r3, #2
    212c:	4b37      	ldr	r3, [pc, #220]	; (220c <_pwm_init+0x174>)
    212e:	4413      	add	r3, r2
    2130:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2132:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2134:	6923      	ldr	r3, [r4, #16]
    2136:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    213a:	d1fb      	bne.n	2134 <_pwm_init+0x9c>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    213c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2140:	009a      	lsls	r2, r3, #2
    2142:	4b32      	ldr	r3, [pc, #200]	; (220c <_pwm_init+0x174>)
    2144:	4413      	add	r3, r2
    2146:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2148:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    214a:	6923      	ldr	r3, [r4, #16]
    214c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2150:	d1fb      	bne.n	214a <_pwm_init+0xb2>
	_tc_init_irq_param(hw, (void *)device);
    2152:	4631      	mov	r1, r6
    2154:	4620      	mov	r0, r4
    2156:	4b2e      	ldr	r3, [pc, #184]	; (2210 <_pwm_init+0x178>)
    2158:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    215a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    215e:	009a      	lsls	r2, r3, #2
    2160:	4b2a      	ldr	r3, [pc, #168]	; (220c <_pwm_init+0x174>)
    2162:	4413      	add	r3, r2
    2164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2168:	2b00      	cmp	r3, #0
    216a:	db0d      	blt.n	2188 <_pwm_init+0xf0>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    216c:	095a      	lsrs	r2, r3, #5
    216e:	f003 031f 	and.w	r3, r3, #31
    2172:	2101      	movs	r1, #1
    2174:	fa01 f303 	lsl.w	r3, r1, r3
    2178:	3220      	adds	r2, #32
    217a:	4926      	ldr	r1, [pc, #152]	; (2214 <_pwm_init+0x17c>)
    217c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    2180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2184:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2188:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    218c:	009a      	lsls	r2, r3, #2
    218e:	4b1f      	ldr	r3, [pc, #124]	; (220c <_pwm_init+0x174>)
    2190:	4413      	add	r3, r2
    2192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2196:	2b00      	cmp	r3, #0
    2198:	db09      	blt.n	21ae <_pwm_init+0x116>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    219a:	095a      	lsrs	r2, r3, #5
    219c:	f003 031f 	and.w	r3, r3, #31
    21a0:	2101      	movs	r1, #1
    21a2:	fa01 f303 	lsl.w	r3, r1, r3
    21a6:	3260      	adds	r2, #96	; 0x60
    21a8:	491a      	ldr	r1, [pc, #104]	; (2214 <_pwm_init+0x17c>)
    21aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(_tcs[i].irq);
    21ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    21b2:	00aa      	lsls	r2, r5, #2
    21b4:	4b15      	ldr	r3, [pc, #84]	; (220c <_pwm_init+0x174>)
    21b6:	4413      	add	r3, r2
    21b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    21bc:	2b00      	cmp	r3, #0
    21be:	db21      	blt.n	2204 <_pwm_init+0x16c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21c0:	0959      	lsrs	r1, r3, #5
    21c2:	f003 031f 	and.w	r3, r3, #31
    21c6:	2201      	movs	r2, #1
    21c8:	fa02 f303 	lsl.w	r3, r2, r3
    21cc:	4a11      	ldr	r2, [pc, #68]	; (2214 <_pwm_init+0x17c>)
    21ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    21d2:	2000      	movs	r0, #0
    21d4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    21d6:	4b0d      	ldr	r3, [pc, #52]	; (220c <_pwm_init+0x174>)
    21d8:	440b      	add	r3, r1
    21da:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21dc:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21de:	6923      	ldr	r3, [r4, #16]
    21e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21e4:	d1fb      	bne.n	21de <_pwm_init+0x146>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    21e6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21ea:	009a      	lsls	r2, r3, #2
    21ec:	4b07      	ldr	r3, [pc, #28]	; (220c <_pwm_init+0x174>)
    21ee:	4413      	add	r3, r2
    21f0:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21f2:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    21f4:	6923      	ldr	r3, [r4, #16]
    21f6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21fa:	d1fb      	bne.n	21f4 <_pwm_init+0x15c>
    21fc:	e7a9      	b.n	2152 <_pwm_init+0xba>
		return -1;
    21fe:	f04f 30ff 	mov.w	r0, #4294967295
    2202:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2204:	2000      	movs	r0, #0
}
    2206:	bd70      	pop	{r4, r5, r6, pc}
    2208:	00002021 	.word	0x00002021
    220c:	20000000 	.word	0x20000000
    2210:	00001fe9 	.word	0x00001fe9
    2214:	e000e100 	.word	0xe000e100

00002218 <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2218:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    221a:	6813      	ldr	r3, [r2, #0]
    221c:	f043 0302 	orr.w	r3, r3, #2
    2220:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2222:	6913      	ldr	r3, [r2, #16]
    2224:	f013 0f03 	tst.w	r3, #3
    2228:	d1fb      	bne.n	2222 <_pwm_enable+0xa>
}
    222a:	4770      	bx	lr

0000222c <_pwm_set_param>:
{
    222c:	b570      	push	{r4, r5, r6, lr}
    222e:	460e      	mov	r6, r1
    2230:	4615      	mov	r5, r2
	void *const hw = device->hw;
    2232:	6904      	ldr	r4, [r0, #16]
	int8_t      i  = get_tc_index(hw);
    2234:	4620      	mov	r0, r4
    2236:	4b1b      	ldr	r3, [pc, #108]	; (22a4 <_pwm_set_param+0x78>)
    2238:	4798      	blx	r3
	_tcs[i].cc0 = period;
    223a:	0082      	lsls	r2, r0, #2
    223c:	4402      	add	r2, r0
    223e:	0091      	lsls	r1, r2, #2
    2240:	4b19      	ldr	r3, [pc, #100]	; (22a8 <_pwm_set_param+0x7c>)
    2242:	440b      	add	r3, r1
    2244:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1 = duty_cycle;
    2246:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2248:	685b      	ldr	r3, [r3, #4]
    224a:	f003 030c 	and.w	r3, r3, #12
    224e:	2b08      	cmp	r3, #8
    2250:	d016      	beq.n	2280 <_pwm_set_param+0x54>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    2252:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    2256:	009a      	lsls	r2, r3, #2
    2258:	4b13      	ldr	r3, [pc, #76]	; (22a8 <_pwm_set_param+0x7c>)
    225a:	4413      	add	r3, r2
    225c:	899b      	ldrh	r3, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    225e:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2260:	6923      	ldr	r3, [r4, #16]
    2262:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2266:	d1fb      	bne.n	2260 <_pwm_set_param+0x34>
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    2268:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    226c:	0082      	lsls	r2, r0, #2
    226e:	4b0e      	ldr	r3, [pc, #56]	; (22a8 <_pwm_set_param+0x7c>)
    2270:	4413      	add	r3, r2
    2272:	8a1b      	ldrh	r3, [r3, #16]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2274:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2276:	6923      	ldr	r3, [r4, #16]
    2278:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    227c:	d1fb      	bne.n	2276 <_pwm_set_param+0x4a>
    227e:	bd70      	pop	{r4, r5, r6, pc}
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2280:	61e6      	str	r6, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2282:	6923      	ldr	r3, [r4, #16]
    2284:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    2288:	d1fb      	bne.n	2282 <_pwm_set_param+0x56>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    228a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    228e:	0082      	lsls	r2, r0, #2
    2290:	4b05      	ldr	r3, [pc, #20]	; (22a8 <_pwm_set_param+0x7c>)
    2292:	4413      	add	r3, r2
    2294:	691b      	ldr	r3, [r3, #16]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2296:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2298:	6923      	ldr	r3, [r4, #16]
    229a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    229e:	d1fb      	bne.n	2298 <_pwm_set_param+0x6c>
    22a0:	bd70      	pop	{r4, r5, r6, pc}
    22a2:	bf00      	nop
    22a4:	00002021 	.word	0x00002021
    22a8:	20000000 	.word	0x20000000

000022ac <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    22ac:	6902      	ldr	r2, [r0, #16]
    22ae:	6913      	ldr	r3, [r2, #16]
    22b0:	f013 0f03 	tst.w	r3, #3
    22b4:	d1fb      	bne.n	22ae <_pwm_is_enabled+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22b6:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    22b8:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    22bc:	4770      	bx	lr

000022be <_tc_get_pwm>:
}
    22be:	2000      	movs	r0, #0
    22c0:	4770      	bx	lr
	...

000022c4 <TC0_Handler>:
{
    22c4:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    22c6:	4b02      	ldr	r3, [pc, #8]	; (22d0 <TC0_Handler+0xc>)
    22c8:	6818      	ldr	r0, [r3, #0]
    22ca:	4b02      	ldr	r3, [pc, #8]	; (22d4 <TC0_Handler+0x10>)
    22cc:	4798      	blx	r3
    22ce:	bd08      	pop	{r3, pc}
    22d0:	20001568 	.word	0x20001568
    22d4:	00001fb9 	.word	0x00001fb9

000022d8 <TC4_Handler>:
{
    22d8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc4_dev);
    22da:	4b02      	ldr	r3, [pc, #8]	; (22e4 <TC4_Handler+0xc>)
    22dc:	6858      	ldr	r0, [r3, #4]
    22de:	4b02      	ldr	r3, [pc, #8]	; (22e8 <TC4_Handler+0x10>)
    22e0:	4798      	blx	r3
    22e2:	bd08      	pop	{r3, pc}
    22e4:	20001568 	.word	0x20001568
    22e8:	00001fb9 	.word	0x00001fb9

000022ec <TC5_Handler>:
{
    22ec:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc5_dev);
    22ee:	4b02      	ldr	r3, [pc, #8]	; (22f8 <TC5_Handler+0xc>)
    22f0:	6898      	ldr	r0, [r3, #8]
    22f2:	4b02      	ldr	r3, [pc, #8]	; (22fc <TC5_Handler+0x10>)
    22f4:	4798      	blx	r3
    22f6:	bd08      	pop	{r3, pc}
    22f8:	20001568 	.word	0x20001568
    22fc:	00001fb9 	.word	0x00001fb9

00002300 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf *low_level_input(struct netif *netif)
{
    2300:	b570      	push	{r4, r5, r6, lr}
	struct mac_async_descriptor *mac;
	struct pbuf *                p;
	u16_t                        len;

	mac = (struct mac_async_descriptor *)(netif->state);
    2302:	6a05      	ldr	r5, [r0, #32]
	len = mac_async_read_len(mac); /* Obtain the size of the packet */
    2304:	4628      	mov	r0, r5
    2306:	4b11      	ldr	r3, [pc, #68]	; (234c <low_level_input+0x4c>)
    2308:	4798      	blx	r3
    230a:	b280      	uxth	r0, r0
	if (len == 0) {
    230c:	b1d8      	cbz	r0, 2346 <low_level_input+0x46>
		return NULL;
	}

#if ETH_PAD_SIZE
	len += ETH_PAD_SIZE; /* allow room for Ethernet padding */
    230e:	1c81      	adds	r1, r0, #2
#endif

	/* Allocate a pbuf as one large chunk, This include protocol header */
	p = pbuf_alloc(PBUF_RAW, len, PBUF_RAM);
    2310:	2200      	movs	r2, #0
    2312:	b289      	uxth	r1, r1
    2314:	2003      	movs	r0, #3
    2316:	4b0e      	ldr	r3, [pc, #56]	; (2350 <low_level_input+0x50>)
    2318:	4798      	blx	r3

	if (p != NULL) {
    231a:	4604      	mov	r4, r0
    231c:	b168      	cbz	r0, 233a <low_level_input+0x3a>
#if ETH_PAD_SIZE
		pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
    231e:	f06f 0101 	mvn.w	r1, #1
    2322:	4e0c      	ldr	r6, [pc, #48]	; (2354 <low_level_input+0x54>)
    2324:	47b0      	blx	r6
#endif

		/* Read the entire packet into the pbuf. */
		mac_async_read(mac, p->payload, p->len);
    2326:	8962      	ldrh	r2, [r4, #10]
    2328:	6861      	ldr	r1, [r4, #4]
    232a:	4628      	mov	r0, r5
    232c:	4b0a      	ldr	r3, [pc, #40]	; (2358 <low_level_input+0x58>)
    232e:	4798      	blx	r3

#if ETH_PAD_SIZE
		pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
    2330:	2102      	movs	r1, #2
    2332:	4620      	mov	r0, r4
    2334:	47b0      	blx	r6
		LINK_STATS_INC(link.memerr);
		LINK_STATS_INC(link.drop);
	}

	return p;
}
    2336:	4620      	mov	r0, r4
    2338:	bd70      	pop	{r4, r5, r6, pc}
		mac_async_read(mac, NULL, 0);
    233a:	2200      	movs	r2, #0
    233c:	4611      	mov	r1, r2
    233e:	4628      	mov	r0, r5
    2340:	4b05      	ldr	r3, [pc, #20]	; (2358 <low_level_input+0x58>)
    2342:	4798      	blx	r3
    2344:	e7f7      	b.n	2336 <low_level_input+0x36>
		return NULL;
    2346:	2400      	movs	r4, #0
    2348:	e7f5      	b.n	2336 <low_level_input+0x36>
    234a:	bf00      	nop
    234c:	00001249 	.word	0x00001249
    2350:	0000606d 	.word	0x0000606d
    2354:	00005f8f 	.word	0x00005f8f
    2358:	00001219 	.word	0x00001219

0000235c <mac_low_level_init>:
{
    235c:	b510      	push	{r4, lr}
    235e:	b084      	sub	sp, #16
	mac = (struct mac_async_descriptor *)(netif->state);
    2360:	6a04      	ldr	r4, [r0, #32]
	memcpy(filter.mac, netif->hwaddr, NETIF_MAX_HWADDR_LEN);
    2362:	4603      	mov	r3, r0
    2364:	f853 0f2b 	ldr.w	r0, [r3, #43]!
    2368:	9001      	str	r0, [sp, #4]
    236a:	889b      	ldrh	r3, [r3, #4]
    236c:	f8ad 3008 	strh.w	r3, [sp, #8]
	filter.tid_enable = false;
    2370:	2100      	movs	r1, #0
    2372:	f88d 100c 	strb.w	r1, [sp, #12]
	mac_async_set_filter(mac, 0, &filter);
    2376:	aa01      	add	r2, sp, #4
    2378:	4620      	mov	r0, r4
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <mac_low_level_init+0x28>)
    237c:	4798      	blx	r3
}
    237e:	b004      	add	sp, #16
    2380:	bd10      	pop	{r4, pc}
    2382:	bf00      	nop
    2384:	000012d1 	.word	0x000012d1

00002388 <mac_low_level_output>:
{
    2388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    238c:	460e      	mov	r6, r1
	mac = (struct mac_async_descriptor *)(netif->state);
    238e:	6a07      	ldr	r7, [r0, #32]
	pbuf_header(p, -ETH_PAD_SIZE); /* drop the padding word */
    2390:	f06f 0101 	mvn.w	r1, #1
    2394:	4630      	mov	r0, r6
    2396:	4b19      	ldr	r3, [pc, #100]	; (23fc <mac_low_level_output+0x74>)
    2398:	4798      	blx	r3
	if (p->tot_len == p->len) {
    239a:	8932      	ldrh	r2, [r6, #8]
    239c:	8973      	ldrh	r3, [r6, #10]
    239e:	429a      	cmp	r2, r3
    23a0:	d00a      	beq.n	23b8 <mac_low_level_output+0x30>
		tbuf = mem_malloc(LWIP_MEM_ALIGN_SIZE(p->tot_len));
    23a2:	1cd0      	adds	r0, r2, #3
    23a4:	b280      	uxth	r0, r0
    23a6:	f020 0003 	bic.w	r0, r0, #3
    23aa:	4b15      	ldr	r3, [pc, #84]	; (2400 <mac_low_level_output+0x78>)
    23ac:	4798      	blx	r3
		if (tbuf == NULL) {
    23ae:	4680      	mov	r8, r0
    23b0:	b300      	cbz	r0, 23f4 <mac_low_level_output+0x6c>
    23b2:	4605      	mov	r5, r0
    23b4:	4634      	mov	r4, r6
    23b6:	e00c      	b.n	23d2 <mac_low_level_output+0x4a>
		mac_async_write(mac, p->payload, p->tot_len);
    23b8:	6871      	ldr	r1, [r6, #4]
    23ba:	4638      	mov	r0, r7
    23bc:	4b11      	ldr	r3, [pc, #68]	; (2404 <mac_low_level_output+0x7c>)
    23be:	4798      	blx	r3
    23c0:	e011      	b.n	23e6 <mac_low_level_output+0x5e>
			memcpy(pos, q->payload, q->len);
    23c2:	8962      	ldrh	r2, [r4, #10]
    23c4:	6861      	ldr	r1, [r4, #4]
    23c6:	4628      	mov	r0, r5
    23c8:	4b0f      	ldr	r3, [pc, #60]	; (2408 <mac_low_level_output+0x80>)
    23ca:	4798      	blx	r3
			pos += q->len;
    23cc:	8963      	ldrh	r3, [r4, #10]
    23ce:	441d      	add	r5, r3
		for (q = p; q != NULL; q = q->next) {
    23d0:	6824      	ldr	r4, [r4, #0]
    23d2:	2c00      	cmp	r4, #0
    23d4:	d1f5      	bne.n	23c2 <mac_low_level_output+0x3a>
		mac_async_write(mac, tbuf, p->tot_len);
    23d6:	8932      	ldrh	r2, [r6, #8]
    23d8:	4641      	mov	r1, r8
    23da:	4638      	mov	r0, r7
    23dc:	4b09      	ldr	r3, [pc, #36]	; (2404 <mac_low_level_output+0x7c>)
    23de:	4798      	blx	r3
		mem_free(tbuf);
    23e0:	4640      	mov	r0, r8
    23e2:	4b0a      	ldr	r3, [pc, #40]	; (240c <mac_low_level_output+0x84>)
    23e4:	4798      	blx	r3
	pbuf_header(p, ETH_PAD_SIZE); /* reclaim the padding word */
    23e6:	2102      	movs	r1, #2
    23e8:	4630      	mov	r0, r6
    23ea:	4b04      	ldr	r3, [pc, #16]	; (23fc <mac_low_level_output+0x74>)
    23ec:	4798      	blx	r3
	return ERR_OK;
    23ee:	2000      	movs	r0, #0
    23f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ERR_MEM;
    23f4:	f04f 30ff 	mov.w	r0, #4294967295
}
    23f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23fc:	00005f8f 	.word	0x00005f8f
    2400:	00005bcd 	.word	0x00005bcd
    2404:	000011dd 	.word	0x000011dd
    2408:	0000cd53 	.word	0x0000cd53
    240c:	00005a7d 	.word	0x00005a7d

00002410 <ethernetif_mac_input>:

/**
 * \brief Process incoming ethernet packet.
 */
void ethernetif_mac_input(struct netif *netif)
{
    2410:	b538      	push	{r3, r4, r5, lr}
    2412:	4605      	mov	r5, r0
    2414:	e004      	b.n	2420 <ethernetif_mac_input+0x10>
			/* PPPoE packet? */
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* full packet send to tcpip_thread to process */
			if (netif->input(p, netif) != ERR_OK) {
    2416:	692b      	ldr	r3, [r5, #16]
    2418:	4629      	mov	r1, r5
    241a:	4620      	mov	r0, r4
    241c:	4798      	blx	r3
    241e:	b998      	cbnz	r0, 2448 <ethernetif_mac_input+0x38>
		p = low_level_input(netif);
    2420:	4628      	mov	r0, r5
    2422:	4b0c      	ldr	r3, [pc, #48]	; (2454 <ethernetif_mac_input+0x44>)
    2424:	4798      	blx	r3
		if (p == NULL) {
    2426:	4604      	mov	r4, r0
    2428:	b190      	cbz	r0, 2450 <ethernetif_mac_input+0x40>
		ethhdr = p->payload;
    242a:	6843      	ldr	r3, [r0, #4]
		switch (htons(ethhdr->type)) {
    242c:	89d8      	ldrh	r0, [r3, #14]
    242e:	4b0a      	ldr	r3, [pc, #40]	; (2458 <ethernetif_mac_input+0x48>)
    2430:	4798      	blx	r3
    2432:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2436:	d0ee      	beq.n	2416 <ethernetif_mac_input+0x6>
    2438:	f640 0306 	movw	r3, #2054	; 0x806
    243c:	4298      	cmp	r0, r3
    243e:	d0ea      	beq.n	2416 <ethernetif_mac_input+0x6>
				p = NULL;
			}
			break;

		default:
			pbuf_free(p);
    2440:	4620      	mov	r0, r4
    2442:	4b06      	ldr	r3, [pc, #24]	; (245c <ethernetif_mac_input+0x4c>)
    2444:	4798      	blx	r3
			p = NULL;
			break;
    2446:	e7eb      	b.n	2420 <ethernetif_mac_input+0x10>
				pbuf_free(p);
    2448:	4620      	mov	r0, r4
    244a:	4b04      	ldr	r3, [pc, #16]	; (245c <ethernetif_mac_input+0x4c>)
    244c:	4798      	blx	r3
    244e:	e7e7      	b.n	2420 <ethernetif_mac_input+0x10>
    2450:	bd38      	pop	{r3, r4, r5, pc}
    2452:	bf00      	nop
    2454:	00002301 	.word	0x00002301
    2458:	00003ec1 	.word	0x00003ec1
    245c:	00006009 	.word	0x00006009

00002460 <sys_init>:
{
	int i;

	/* Initialize the the per-thread sys_timeouts structures
	   make sure there are no valid pids in the list */
	for (i = 0; i < SYS_THREAD_MAX; i++) {
    2460:	2300      	movs	r3, #0
    2462:	e000      	b.n	2466 <sys_init+0x6>
    2464:	3301      	adds	r3, #1
    2466:	2b07      	cmp	r3, #7
    2468:	ddfc      	ble.n	2464 <sys_init+0x4>
		Threads_TimeoutsList[i].pid = 0;
	}
	NbActiveThreads = 0;
    246a:	2200      	movs	r2, #0
    246c:	4b01      	ldr	r3, [pc, #4]	; (2474 <sys_init+0x14>)
    246e:	801a      	strh	r2, [r3, #0]
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	20001574 	.word	0x20001574

00002478 <sys_sem_new>:
 * \param count Initial state of the semaphore.
 *
 * \return ERR_OK for OK, other value indicates error.
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
    2478:	b570      	push	{r4, r5, r6, lr}
	err_t err_sem = ERR_MEM;

	/* Sanity check */
	if (sem != NULL) {
    247a:	b308      	cbz	r0, 24c0 <sys_sem_new+0x48>
    247c:	4604      	mov	r4, r0
    247e:	460d      	mov	r5, r1
		portENTER_CRITICAL();
    2480:	4b11      	ldr	r3, [pc, #68]	; (24c8 <sys_sem_new+0x50>)
    2482:	4798      	blx	r3

		vSemaphoreCreateBinary( *sem );
    2484:	2203      	movs	r2, #3
    2486:	2100      	movs	r1, #0
    2488:	2001      	movs	r0, #1
    248a:	4b10      	ldr	r3, [pc, #64]	; (24cc <sys_sem_new+0x54>)
    248c:	4798      	blx	r3
    248e:	6020      	str	r0, [r4, #0]
    2490:	b120      	cbz	r0, 249c <sys_sem_new+0x24>
    2492:	2300      	movs	r3, #0
    2494:	461a      	mov	r2, r3
    2496:	4619      	mov	r1, r3
    2498:	4e0d      	ldr	r6, [pc, #52]	; (24d0 <sys_sem_new+0x58>)
    249a:	47b0      	blx	r6
		if (*sem != SYS_SEM_NULL) {
    249c:	6820      	ldr	r0, [r4, #0]
    249e:	b160      	cbz	r0, 24ba <sys_sem_new+0x42>
				lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
			}

  #endif /* SYS_STATS */

			if (0 == count) { /* Means we want the sem to be
    24a0:	b125      	cbz	r5, 24ac <sys_sem_new+0x34>
			                     unavailable at init state. */
				xSemaphoreTake( *sem, 1);
			}

			err_sem = ERR_OK;
    24a2:	2400      	movs	r4, #0
		}

		portEXIT_CRITICAL();
    24a4:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <sys_sem_new+0x5c>)
    24a6:	4798      	blx	r3
	}

	return err_sem;
}
    24a8:	4620      	mov	r0, r4
    24aa:	bd70      	pop	{r4, r5, r6, pc}
				xSemaphoreTake( *sem, 1);
    24ac:	2300      	movs	r3, #0
    24ae:	2201      	movs	r2, #1
    24b0:	4619      	mov	r1, r3
    24b2:	4c09      	ldr	r4, [pc, #36]	; (24d8 <sys_sem_new+0x60>)
    24b4:	47a0      	blx	r4
			err_sem = ERR_OK;
    24b6:	2400      	movs	r4, #0
    24b8:	e7f4      	b.n	24a4 <sys_sem_new+0x2c>
	err_t err_sem = ERR_MEM;
    24ba:	f04f 34ff 	mov.w	r4, #4294967295
    24be:	e7f1      	b.n	24a4 <sys_sem_new+0x2c>
    24c0:	f04f 34ff 	mov.w	r4, #4294967295
    24c4:	e7f0      	b.n	24a8 <sys_sem_new+0x30>
    24c6:	bf00      	nop
    24c8:	0000a645 	.word	0x0000a645
    24cc:	0000ac85 	.word	0x0000ac85
    24d0:	0000ad55 	.word	0x0000ad55
    24d4:	0000a689 	.word	0x0000a689
    24d8:	0000b10d 	.word	0x0000b10d

000024dc <sys_sem_free>:
 * \param sem Pointer to the semaphore.
 */
void sys_sem_free(sys_sem_t *sem)
{
	/* Sanity check */
	if (sem != NULL) {
    24dc:	b128      	cbz	r0, 24ea <sys_sem_free+0xe>
{
    24de:	b508      	push	{r3, lr}
		if (SYS_SEM_NULL != *sem) {
    24e0:	6800      	ldr	r0, [r0, #0]
    24e2:	b108      	cbz	r0, 24e8 <sys_sem_free+0xc>
  #if SYS_STATS 
			lwip_stats.sys.sem.used--;
  #endif /* SYS_STATS */
			vQueueDelete( *sem );
    24e4:	4b01      	ldr	r3, [pc, #4]	; (24ec <sys_sem_free+0x10>)
    24e6:	4798      	blx	r3
    24e8:	bd08      	pop	{r3, pc}
    24ea:	4770      	bx	lr
    24ec:	0000b2d5 	.word	0x0000b2d5

000024f0 <sys_sem_signal>:
 * \param sem Pointer to the semaphore.
 */
void sys_sem_signal(sys_sem_t *sem)
{
	/* Sanity check */
	if (sem != NULL) {
    24f0:	b138      	cbz	r0, 2502 <sys_sem_signal+0x12>
{
    24f2:	b510      	push	{r4, lr}
		xSemaphoreGive( *sem );
    24f4:	2300      	movs	r3, #0
    24f6:	461a      	mov	r2, r3
    24f8:	4619      	mov	r1, r3
    24fa:	6800      	ldr	r0, [r0, #0]
    24fc:	4c01      	ldr	r4, [pc, #4]	; (2504 <sys_sem_signal+0x14>)
    24fe:	47a0      	blx	r4
    2500:	bd10      	pop	{r4, pc}
    2502:	4770      	bx	lr
    2504:	0000ad55 	.word	0x0000ad55

00002508 <sys_arch_sem_wait>:
	portTickType TickStop;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (sem != NULL) {
    2508:	b330      	cbz	r0, 2558 <sys_arch_sem_wait+0x50>
{
    250a:	b570      	push	{r4, r5, r6, lr}
    250c:	4605      	mov	r5, r0
    250e:	460c      	mov	r4, r1
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (0 == TickElapsed) {
    2510:	b991      	cbnz	r1, 2538 <sys_arch_sem_wait+0x30>
			TickStart = xTaskGetTickCount();
    2512:	4b13      	ldr	r3, [pc, #76]	; (2560 <sys_arch_sem_wait+0x58>)
    2514:	4798      	blx	r3
    2516:	4606      	mov	r6, r0
			/* If timeout=0, then the function should block indefinitely */
			while (pdFALSE == xSemaphoreTake( *sem,	SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
    2518:	2300      	movs	r3, #0
    251a:	f242 7210 	movw	r2, #10000	; 0x2710
    251e:	4619      	mov	r1, r3
    2520:	6828      	ldr	r0, [r5, #0]
    2522:	4c10      	ldr	r4, [pc, #64]	; (2564 <sys_arch_sem_wait+0x5c>)
    2524:	47a0      	blx	r4
    2526:	2800      	cmp	r0, #0
    2528:	d0f6      	beq.n	2518 <sys_arch_sem_wait+0x10>
			}
		}

		/* If the function acquires the semaphore, it should return how
		  many milliseconds expired while waiting for the semaphore */
		TickStop = xTaskGetTickCount();
    252a:	4b0d      	ldr	r3, [pc, #52]	; (2560 <sys_arch_sem_wait+0x58>)
    252c:	4798      	blx	r3
		/* Take care of wrap-around */
		if (TickStop >= TickStart) {
    252e:	4286      	cmp	r6, r0
    2530:	d910      	bls.n	2554 <sys_arch_sem_wait+0x4c>
			TickElapsed = TickStop - TickStart;
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
    2532:	1b80      	subs	r0, r0, r6
    2534:	3801      	subs	r0, #1
    2536:	bd70      	pop	{r4, r5, r6, pc}
			TickStart = xTaskGetTickCount();
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <sys_arch_sem_wait+0x58>)
    253a:	4798      	blx	r3
    253c:	4606      	mov	r6, r0
			if (pdFALSE == xSemaphoreTake( *sem, TickElapsed )) {
    253e:	2300      	movs	r3, #0
    2540:	4622      	mov	r2, r4
    2542:	4619      	mov	r1, r3
    2544:	6828      	ldr	r0, [r5, #0]
    2546:	4c07      	ldr	r4, [pc, #28]	; (2564 <sys_arch_sem_wait+0x5c>)
    2548:	47a0      	blx	r4
    254a:	2800      	cmp	r0, #0
    254c:	d1ed      	bne.n	252a <sys_arch_sem_wait+0x22>
				return(SYS_ARCH_TIMEOUT);
    254e:	f04f 30ff 	mov.w	r0, #4294967295

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
	}
}
    2552:	bd70      	pop	{r4, r5, r6, pc}
			TickElapsed = TickStop - TickStart;
    2554:	1b80      	subs	r0, r0, r6
    2556:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
    2558:	f04f 30ff 	mov.w	r0, #4294967295
    255c:	4770      	bx	lr
    255e:	bf00      	nop
    2560:	0000b6ad 	.word	0x0000b6ad
    2564:	0000b10d 	.word	0x0000b10d

00002568 <sys_sem_valid>:
 * \return Semaphore number on valid, 0 for invalid.
 */
int sys_sem_valid(sys_sem_t *sem)
{
	return ((int)(*sem));
}
    2568:	6800      	ldr	r0, [r0, #0]
    256a:	4770      	bx	lr

0000256c <sys_sem_set_invalid>:
 *
 * \param sem Pointer to the semaphore.
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
	*sem = NULL;
    256c:	2300      	movs	r3, #0
    256e:	6003      	str	r3, [r0, #0]
    2570:	4770      	bx	lr
	...

00002574 <sys_mbox_new>:
err_t sys_mbox_new(sys_mbox_t *mBoxNew, int size )
{
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mBoxNew != NULL) {
    2574:	b148      	cbz	r0, 258a <sys_mbox_new+0x16>
{
    2576:	b510      	push	{r4, lr}
    2578:	4604      	mov	r4, r0
    257a:	4608      	mov	r0, r1
		*mBoxNew = xQueueCreate( size, sizeof(void *));
    257c:	2200      	movs	r2, #0
    257e:	2104      	movs	r1, #4
    2580:	4b03      	ldr	r3, [pc, #12]	; (2590 <sys_mbox_new+0x1c>)
    2582:	4798      	blx	r3
    2584:	6020      	str	r0, [r4, #0]
				lwip_stats.sys.mbox.max	= lwip_stats.sys.mbox.used;
			}
		}

  #endif /* SYS_STATS */
		err_mbox = ERR_OK;
    2586:	2000      	movs	r0, #0
    2588:	bd10      	pop	{r4, pc}
	err_t err_mbox = ERR_MEM;
    258a:	f04f 30ff 	mov.w	r0, #4294967295
    258e:	4770      	bx	lr
    2590:	0000ac85 	.word	0x0000ac85

00002594 <sys_mbox_free>:
 * \param mbox Pointer to the new mailbox.
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
	/* Sanity check */
	if (mbox != NULL) {
    2594:	b128      	cbz	r0, 25a2 <sys_mbox_free+0xe>
{
    2596:	b508      	push	{r3, lr}
		if (SYS_MBOX_NULL != *mbox) {
    2598:	6800      	ldr	r0, [r0, #0]
    259a:	b108      	cbz	r0, 25a0 <sys_mbox_free+0xc>
  #if SYS_STATS
			lwip_stats.sys.mbox.used--;
  #endif /* SYS_STATS */
			vQueueDelete( *mbox );
    259c:	4b01      	ldr	r3, [pc, #4]	; (25a4 <sys_mbox_free+0x10>)
    259e:	4798      	blx	r3
    25a0:	bd08      	pop	{r3, pc}
    25a2:	4770      	bx	lr
    25a4:	0000b2d5 	.word	0x0000b2d5

000025a8 <sys_mbox_post>:
 *
 * \param mbox Pointer to the mailbox.
 * \param msg Pointer to the message to be post.
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
    25a8:	b530      	push	{r4, r5, lr}
    25aa:	b083      	sub	sp, #12
    25ac:	9101      	str	r1, [sp, #4]
	/* Sanit check */
	if (mbox != NULL) {
    25ae:	4605      	mov	r5, r0
    25b0:	b140      	cbz	r0, 25c4 <sys_mbox_post+0x1c>
		while (pdTRUE != xQueueSend( *mbox, &msg, SYS_ARCH_BLOCKING_TICKTIMEOUT )) {
    25b2:	2300      	movs	r3, #0
    25b4:	f242 7210 	movw	r2, #10000	; 0x2710
    25b8:	a901      	add	r1, sp, #4
    25ba:	6828      	ldr	r0, [r5, #0]
    25bc:	4c02      	ldr	r4, [pc, #8]	; (25c8 <sys_mbox_post+0x20>)
    25be:	47a0      	blx	r4
    25c0:	2801      	cmp	r0, #1
    25c2:	d1f6      	bne.n	25b2 <sys_mbox_post+0xa>
		}
	}
}
    25c4:	b003      	add	sp, #12
    25c6:	bd30      	pop	{r4, r5, pc}
    25c8:	0000ad55 	.word	0x0000ad55

000025cc <sys_mbox_trypost>:
 * \param msg Pointer to the message to be post.
 *
 * \return ERR_MEM if the mailbox is full otherwise ERR_OK if the "msg" is posted.
 */
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
    25cc:	b510      	push	{r4, lr}
    25ce:	b084      	sub	sp, #16
    25d0:	9101      	str	r1, [sp, #4]
	err_t err_mbox = ERR_MEM;

	/* Sanity check */
	if (mbox != NULL) {
    25d2:	b348      	cbz	r0, 2628 <sys_mbox_trypost+0x5c>
		if (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) {
    25d4:	4b16      	ldr	r3, [pc, #88]	; (2630 <sys_mbox_trypost+0x64>)
    25d6:	685b      	ldr	r3, [r3, #4]
    25d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    25dc:	b1bb      	cbz	r3, 260e <sys_mbox_trypost+0x42>
			portBASE_TYPE task_woken = 0;
    25de:	2300      	movs	r3, #0
    25e0:	aa04      	add	r2, sp, #16
    25e2:	f842 3d04 	str.w	r3, [r2, #-4]!
			if (errQUEUE_FULL != xQueueSendFromISR( *mbox, &msg, &task_woken )) {
    25e6:	a901      	add	r1, sp, #4
    25e8:	6800      	ldr	r0, [r0, #0]
    25ea:	4c12      	ldr	r4, [pc, #72]	; (2634 <sys_mbox_trypost+0x68>)
    25ec:	47a0      	blx	r4
    25ee:	b960      	cbnz	r0, 260a <sys_mbox_trypost+0x3e>
	err_t err_mbox = ERR_MEM;
    25f0:	f04f 30ff 	mov.w	r0, #4294967295
				err_mbox = ERR_OK;
			}
			portEND_SWITCHING_ISR(task_woken);
    25f4:	9b03      	ldr	r3, [sp, #12]
    25f6:	b193      	cbz	r3, 261e <sys_mbox_trypost+0x52>
    25f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    25fc:	4b0e      	ldr	r3, [pc, #56]	; (2638 <sys_mbox_trypost+0x6c>)
    25fe:	601a      	str	r2, [r3, #0]
    2600:	f3bf 8f4f 	dsb	sy
    2604:	f3bf 8f6f 	isb	sy
    2608:	e009      	b.n	261e <sys_mbox_trypost+0x52>
				err_mbox = ERR_OK;
    260a:	2000      	movs	r0, #0
    260c:	e7f2      	b.n	25f4 <sys_mbox_trypost+0x28>
		} else {
			if (errQUEUE_FULL != xQueueSend( *mbox, &msg, 0 )) {
    260e:	2300      	movs	r3, #0
    2610:	461a      	mov	r2, r3
    2612:	a901      	add	r1, sp, #4
    2614:	6800      	ldr	r0, [r0, #0]
    2616:	4c09      	ldr	r4, [pc, #36]	; (263c <sys_mbox_trypost+0x70>)
    2618:	47a0      	blx	r4
    261a:	b110      	cbz	r0, 2622 <sys_mbox_trypost+0x56>
				err_mbox = ERR_OK;
    261c:	2000      	movs	r0, #0
			}
		}
	}
	return (err_mbox);
}
    261e:	b004      	add	sp, #16
    2620:	bd10      	pop	{r4, pc}
	err_t err_mbox = ERR_MEM;
    2622:	f04f 30ff 	mov.w	r0, #4294967295
    2626:	e7fa      	b.n	261e <sys_mbox_trypost+0x52>
    2628:	f04f 30ff 	mov.w	r0, #4294967295
    262c:	e7f7      	b.n	261e <sys_mbox_trypost+0x52>
    262e:	bf00      	nop
    2630:	e000ed00 	.word	0xe000ed00
    2634:	0000af29 	.word	0x0000af29
    2638:	e000ed04 	.word	0xe000ed04
    263c:	0000ad55 	.word	0x0000ad55

00002640 <sys_arch_mbox_fetch>:
	void *tempoptr;
	/* Express the timeout in OS tick. */
	portTickType TickElapsed = (portTickType)(timeout / portTICK_RATE_MS);

	/* Sanity check */
	if (mbox != NULL) {
    2640:	2800      	cmp	r0, #0
    2642:	d02e      	beq.n	26a2 <sys_arch_mbox_fetch+0x62>
{
    2644:	b5f0      	push	{r4, r5, r6, r7, lr}
    2646:	b083      	sub	sp, #12
    2648:	460d      	mov	r5, r1
    264a:	4614      	mov	r4, r2
    264c:	4606      	mov	r6, r0
		if (timeout && !TickElapsed) {
			TickElapsed = 1; /* Wait at least one tick */
		}

		if (msg == NULL) {
    264e:	b1a1      	cbz	r1, 267a <sys_arch_mbox_fetch+0x3a>
			msg = &tempoptr;
		}

		/* NOTE: INCLUDE_xTaskGetSchedulerState must be set to 1 in
		 * FreeRTOSConfig.h for xTaskGetTickCount() to be available */
		if (0 == TickElapsed) {
    2650:	b9ac      	cbnz	r4, 267e <sys_arch_mbox_fetch+0x3e>
			TickStart = xTaskGetTickCount();
    2652:	4b15      	ldr	r3, [pc, #84]	; (26a8 <sys_arch_mbox_fetch+0x68>)
    2654:	4798      	blx	r3
    2656:	4607      	mov	r7, r0
			/* If "timeout" is 0, the thread should be blocked until
			 * a message arrives */
			while (pdFALSE == xQueueReceive( *mbox, &(*msg),
    2658:	2300      	movs	r3, #0
    265a:	f242 7210 	movw	r2, #10000	; 0x2710
    265e:	4629      	mov	r1, r5
    2660:	6830      	ldr	r0, [r6, #0]
    2662:	4c12      	ldr	r4, [pc, #72]	; (26ac <sys_arch_mbox_fetch+0x6c>)
    2664:	47a0      	blx	r4
    2666:	2800      	cmp	r0, #0
    2668:	d0f6      	beq.n	2658 <sys_arch_mbox_fetch+0x18>
			}
		}

		/* If the function gets a msg, it should return the number of ms
		 * spent waiting. */
		TickStop = xTaskGetTickCount();
    266a:	4b0f      	ldr	r3, [pc, #60]	; (26a8 <sys_arch_mbox_fetch+0x68>)
    266c:	4798      	blx	r3
		/* Take care of wrap-around. */
		if (TickStop >= TickStart) {
    266e:	4287      	cmp	r7, r0
    2670:	d915      	bls.n	269e <sys_arch_mbox_fetch+0x5e>
			TickElapsed = TickStop - TickStart;
		} else {
			TickElapsed = portMAX_DELAY - TickStart + TickStop;
    2672:	1bc0      	subs	r0, r0, r7
    2674:	3801      	subs	r0, #1

		return(TickElapsed * portTICK_RATE_MS);
	} else {
		return ERR_MEM;
	}
}
    2676:	b003      	add	sp, #12
    2678:	bdf0      	pop	{r4, r5, r6, r7, pc}
			msg = &tempoptr;
    267a:	ad01      	add	r5, sp, #4
    267c:	e7e8      	b.n	2650 <sys_arch_mbox_fetch+0x10>
			TickStart = xTaskGetTickCount();
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <sys_arch_mbox_fetch+0x68>)
    2680:	4798      	blx	r3
    2682:	4607      	mov	r7, r0
			if (pdFALSE == xQueueReceive( *mbox, &(*msg), TickElapsed )) {
    2684:	2300      	movs	r3, #0
    2686:	4622      	mov	r2, r4
    2688:	4629      	mov	r1, r5
    268a:	6830      	ldr	r0, [r6, #0]
    268c:	4c07      	ldr	r4, [pc, #28]	; (26ac <sys_arch_mbox_fetch+0x6c>)
    268e:	47a0      	blx	r4
    2690:	2800      	cmp	r0, #0
    2692:	d1ea      	bne.n	266a <sys_arch_mbox_fetch+0x2a>
				*msg = NULL;
    2694:	2300      	movs	r3, #0
    2696:	602b      	str	r3, [r5, #0]
				return(SYS_ARCH_TIMEOUT);
    2698:	f04f 30ff 	mov.w	r0, #4294967295
    269c:	e7eb      	b.n	2676 <sys_arch_mbox_fetch+0x36>
			TickElapsed = TickStop - TickStart;
    269e:	1bc0      	subs	r0, r0, r7
    26a0:	e7e9      	b.n	2676 <sys_arch_mbox_fetch+0x36>
		return ERR_MEM;
    26a2:	f04f 30ff 	mov.w	r0, #4294967295
    26a6:	4770      	bx	lr
    26a8:	0000b6ad 	.word	0x0000b6ad
    26ac:	0000b10d 	.word	0x0000b10d

000026b0 <sys_arch_mbox_tryfetch>:
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
	void *tempoptr;

	/* Sanity check */
	if (mbox != NULL) {
    26b0:	b178      	cbz	r0, 26d2 <sys_arch_mbox_tryfetch+0x22>
{
    26b2:	b510      	push	{r4, lr}
    26b4:	b082      	sub	sp, #8
    26b6:	4604      	mov	r4, r0
		if (msg == NULL) {
    26b8:	b149      	cbz	r1, 26ce <sys_arch_mbox_tryfetch+0x1e>
			msg = &tempoptr;
		}

		if (pdFALSE == xQueueReceive( *mbox, &(*msg), 0 )) {
    26ba:	2300      	movs	r3, #0
    26bc:	461a      	mov	r2, r3
    26be:	6820      	ldr	r0, [r4, #0]
    26c0:	4c06      	ldr	r4, [pc, #24]	; (26dc <sys_arch_mbox_tryfetch+0x2c>)
    26c2:	47a0      	blx	r4
    26c4:	b940      	cbnz	r0, 26d8 <sys_arch_mbox_tryfetch+0x28>
			/* if a message is not present in the mailbox, it
			 * immediately returns with */
			/* the code SYS_MBOX_EMPTY. */
			return(SYS_MBOX_EMPTY);
    26c6:	f04f 30ff 	mov.w	r0, #4294967295
		/* On success 0 is returned. */
		return(0);
	} else {
		return(SYS_MBOX_EMPTY);
	}
}
    26ca:	b002      	add	sp, #8
    26cc:	bd10      	pop	{r4, pc}
			msg = &tempoptr;
    26ce:	a901      	add	r1, sp, #4
    26d0:	e7f3      	b.n	26ba <sys_arch_mbox_tryfetch+0xa>
		return(SYS_MBOX_EMPTY);
    26d2:	f04f 30ff 	mov.w	r0, #4294967295
    26d6:	4770      	bx	lr
		return(0);
    26d8:	2000      	movs	r0, #0
    26da:	e7f6      	b.n	26ca <sys_arch_mbox_tryfetch+0x1a>
    26dc:	0000b10d 	.word	0x0000b10d

000026e0 <sys_mbox_valid>:
 * \return Mailbox for valid, 0 for invalid.
 */
int sys_mbox_valid(sys_mbox_t *mbox)
{
	return ((int)(*mbox));
}
    26e0:	6800      	ldr	r0, [r0, #0]
    26e2:	4770      	bx	lr

000026e4 <sys_mbox_set_invalid>:
 *
 * \param mbox Pointer to the mailbox.
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
	*mbox = NULL;
    26e4:	2300      	movs	r3, #0
    26e6:	6003      	str	r3, [r0, #0]
    26e8:	4770      	bx	lr
	...

000026ec <sys_thread_new>:
 *
 * \return The id of the new thread.
 */
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread, void *arg,
		int stacksize, int prio)
{
    26ec:	b510      	push	{r4, lr}
    26ee:	b086      	sub	sp, #24
    26f0:	460c      	mov	r4, r1
	sys_thread_t newthread;
	portBASE_TYPE result;
	SYS_ARCH_DECL_PROTECT(protectionLevel);

	result = xTaskCreate( thread, (signed portCHAR *)name, stacksize, arg,
    26f2:	b299      	uxth	r1, r3
    26f4:	2300      	movs	r3, #0
    26f6:	9303      	str	r3, [sp, #12]
    26f8:	9302      	str	r3, [sp, #8]
    26fa:	ab05      	add	r3, sp, #20
    26fc:	9301      	str	r3, [sp, #4]
    26fe:	9b08      	ldr	r3, [sp, #32]
    2700:	9300      	str	r3, [sp, #0]
    2702:	4613      	mov	r3, r2
    2704:	460a      	mov	r2, r1
    2706:	4601      	mov	r1, r0
    2708:	4620      	mov	r0, r4
    270a:	4c07      	ldr	r4, [pc, #28]	; (2728 <sys_thread_new+0x3c>)
    270c:	47a0      	blx	r4
			prio, &newthread );

	/* Need to protect this -- preemption here could be a problem! */
	SYS_ARCH_PROTECT(protectionLevel);
	if (pdPASS == result) {
    270e:	2801      	cmp	r0, #1
    2710:	d004      	beq.n	271c <sys_thread_new+0x30>
		Threads_TimeoutsList[NbActiveThreads++].pid = newthread;
	} else {
		newthread = NULL;
    2712:	2300      	movs	r3, #0
    2714:	9305      	str	r3, [sp, #20]
	}

	SYS_ARCH_UNPROTECT(protectionLevel);

	return(newthread);
}
    2716:	9805      	ldr	r0, [sp, #20]
    2718:	b006      	add	sp, #24
    271a:	bd10      	pop	{r4, pc}
		Threads_TimeoutsList[NbActiveThreads++].pid = newthread;
    271c:	4a03      	ldr	r2, [pc, #12]	; (272c <sys_thread_new+0x40>)
    271e:	8813      	ldrh	r3, [r2, #0]
    2720:	3301      	adds	r3, #1
    2722:	8013      	strh	r3, [r2, #0]
    2724:	e7f7      	b.n	2716 <sys_thread_new+0x2a>
    2726:	bf00      	nop
    2728:	0000b4c1 	.word	0x0000b4c1
    272c:	20001574 	.word	0x20001574

00002730 <netconn_recv_data>:
 * @param new_buf pointer where a new pbuf/netbuf is stored when received data
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t netconn_recv_data(struct netconn *conn, void **new_buf)
{
    2730:	b570      	push	{r4, r5, r6, lr}
    2732:	b088      	sub	sp, #32
	void *buf = NULL;
    2734:	2300      	movs	r3, #0
    2736:	9307      	str	r3, [sp, #28]
	err_t err;
#if LWIP_TCP
	struct api_msg msg;
#endif /* LWIP_TCP */

	LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
    2738:	b159      	cbz	r1, 2752 <netconn_recv_data+0x22>
    273a:	460d      	mov	r5, r1
	*new_buf = NULL;
    273c:	2300      	movs	r3, #0
    273e:	600b      	str	r3, [r1, #0]
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL), return ERR_ARG;);
    2740:	b140      	cbz	r0, 2754 <netconn_recv_data+0x24>
    2742:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
    2744:	f100 0610 	add.w	r6, r0, #16
    2748:	4630      	mov	r0, r6
    274a:	4b25      	ldr	r3, [pc, #148]	; (27e0 <netconn_recv_data+0xb0>)
    274c:	4798      	blx	r3
    274e:	b910      	cbnz	r0, 2756 <netconn_recv_data+0x26>
    2750:	e7fe      	b.n	2750 <netconn_recv_data+0x20>
    2752:	e7fe      	b.n	2752 <netconn_recv_data+0x22>
    2754:	e7fe      	b.n	2754 <netconn_recv_data+0x24>

	err = conn->last_err;
    2756:	f994 0008 	ldrsb.w	r0, [r4, #8]
	if (ERR_IS_FATAL(err)) {
    275a:	f110 0f09 	cmn.w	r0, #9
    275e:	da01      	bge.n	2764 <netconn_recv_data+0x34>
	LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%" U16_F "\n", buf, len));

	*new_buf = buf;
	/* don't set conn->last_err: it's only ERR_OK, anyway */
	return ERR_OK;
}
    2760:	b008      	add	sp, #32
    2762:	bd70      	pop	{r4, r5, r6, pc}
	sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
    2764:	2200      	movs	r2, #0
    2766:	a907      	add	r1, sp, #28
    2768:	4630      	mov	r0, r6
    276a:	4b1e      	ldr	r3, [pc, #120]	; (27e4 <netconn_recv_data+0xb4>)
    276c:	4798      	blx	r3
	if (conn->type == NETCONN_TCP)
    276e:	7823      	ldrb	r3, [r4, #0]
    2770:	2b10      	cmp	r3, #16
    2772:	d12e      	bne.n	27d2 <netconn_recv_data+0xa2>
		if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
    2774:	7f23      	ldrb	r3, [r4, #28]
    2776:	f013 0f08 	tst.w	r3, #8
    277a:	d001      	beq.n	2780 <netconn_recv_data+0x50>
    277c:	9b07      	ldr	r3, [sp, #28]
    277e:	b94b      	cbnz	r3, 2794 <netconn_recv_data+0x64>
			msg.function = do_recv;
    2780:	4b19      	ldr	r3, [pc, #100]	; (27e8 <netconn_recv_data+0xb8>)
    2782:	9301      	str	r3, [sp, #4]
			msg.msg.conn = conn;
    2784:	9402      	str	r4, [sp, #8]
			if (buf != NULL) {
    2786:	9b07      	ldr	r3, [sp, #28]
    2788:	b1b3      	cbz	r3, 27b8 <netconn_recv_data+0x88>
				msg.msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
    278a:	891b      	ldrh	r3, [r3, #8]
    278c:	9304      	str	r3, [sp, #16]
			TCPIP_APIMSG(&msg);
    278e:	a801      	add	r0, sp, #4
    2790:	4b16      	ldr	r3, [pc, #88]	; (27ec <netconn_recv_data+0xbc>)
    2792:	4798      	blx	r3
		if (buf == NULL) {
    2794:	9b07      	ldr	r3, [sp, #28]
    2796:	b993      	cbnz	r3, 27be <netconn_recv_data+0x8e>
			API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
    2798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    279a:	b11b      	cbz	r3, 27a4 <netconn_recv_data+0x74>
    279c:	2200      	movs	r2, #0
    279e:	2101      	movs	r1, #1
    27a0:	4620      	mov	r0, r4
    27a2:	4798      	blx	r3
			NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
    27a4:	f994 3008 	ldrsb.w	r3, [r4, #8]
    27a8:	f113 0f09 	cmn.w	r3, #9
    27ac:	db15      	blt.n	27da <netconn_recv_data+0xaa>
    27ae:	23f4      	movs	r3, #244	; 0xf4
    27b0:	7223      	strb	r3, [r4, #8]
			return ERR_CLSD;
    27b2:	f06f 000b 	mvn.w	r0, #11
    27b6:	e7d3      	b.n	2760 <netconn_recv_data+0x30>
				msg.msg.msg.r.len = 1;
    27b8:	2301      	movs	r3, #1
    27ba:	9304      	str	r3, [sp, #16]
    27bc:	e7e7      	b.n	278e <netconn_recv_data+0x5e>
		len = ((struct pbuf *)buf)->tot_len;
    27be:	891a      	ldrh	r2, [r3, #8]
	API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
    27c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    27c2:	b113      	cbz	r3, 27ca <netconn_recv_data+0x9a>
    27c4:	2101      	movs	r1, #1
    27c6:	4620      	mov	r0, r4
    27c8:	4798      	blx	r3
	*new_buf = buf;
    27ca:	9b07      	ldr	r3, [sp, #28]
    27cc:	602b      	str	r3, [r5, #0]
	return ERR_OK;
    27ce:	2000      	movs	r0, #0
    27d0:	e7c6      	b.n	2760 <netconn_recv_data+0x30>
		len = netbuf_len((struct netbuf *)buf);
    27d2:	9b07      	ldr	r3, [sp, #28]
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	891a      	ldrh	r2, [r3, #8]
    27d8:	e7f2      	b.n	27c0 <netconn_recv_data+0x90>
			return ERR_CLSD;
    27da:	f06f 000b 	mvn.w	r0, #11
    27de:	e7bf      	b.n	2760 <netconn_recv_data+0x30>
    27e0:	000026e1 	.word	0x000026e1
    27e4:	00002641 	.word	0x00002641
    27e8:	000032b1 	.word	0x000032b1
    27ec:	00003e31 	.word	0x00003e31

000027f0 <netconn_new_with_proto_and_callback>:
{
    27f0:	b530      	push	{r4, r5, lr}
    27f2:	b087      	sub	sp, #28
    27f4:	460d      	mov	r5, r1
	conn = netconn_alloc(t, callback);
    27f6:	4611      	mov	r1, r2
    27f8:	4b0e      	ldr	r3, [pc, #56]	; (2834 <netconn_new_with_proto_and_callback+0x44>)
    27fa:	4798      	blx	r3
	if (conn != NULL) {
    27fc:	4604      	mov	r4, r0
    27fe:	b140      	cbz	r0, 2812 <netconn_new_with_proto_and_callback+0x22>
		msg.function        = do_newconn;
    2800:	4b0d      	ldr	r3, [pc, #52]	; (2838 <netconn_new_with_proto_and_callback+0x48>)
    2802:	9300      	str	r3, [sp, #0]
		msg.msg.msg.n.proto = proto;
    2804:	f88d 500c 	strb.w	r5, [sp, #12]
		msg.msg.conn        = conn;
    2808:	9001      	str	r0, [sp, #4]
		if (TCPIP_APIMSG(&msg) != ERR_OK) {
    280a:	4668      	mov	r0, sp
    280c:	4b0b      	ldr	r3, [pc, #44]	; (283c <netconn_new_with_proto_and_callback+0x4c>)
    280e:	4798      	blx	r3
    2810:	b910      	cbnz	r0, 2818 <netconn_new_with_proto_and_callback+0x28>
}
    2812:	4620      	mov	r0, r4
    2814:	b007      	add	sp, #28
    2816:	bd30      	pop	{r4, r5, pc}
			sys_sem_free(&conn->op_completed);
    2818:	f104 000c 	add.w	r0, r4, #12
    281c:	4b08      	ldr	r3, [pc, #32]	; (2840 <netconn_new_with_proto_and_callback+0x50>)
    281e:	4798      	blx	r3
			sys_mbox_free(&conn->recvmbox);
    2820:	f104 0010 	add.w	r0, r4, #16
    2824:	4b07      	ldr	r3, [pc, #28]	; (2844 <netconn_new_with_proto_and_callback+0x54>)
    2826:	4798      	blx	r3
			memp_free(MEMP_NETCONN, conn);
    2828:	4621      	mov	r1, r4
    282a:	2007      	movs	r0, #7
    282c:	4b06      	ldr	r3, [pc, #24]	; (2848 <netconn_new_with_proto_and_callback+0x58>)
    282e:	4798      	blx	r3
			return NULL;
    2830:	2400      	movs	r4, #0
    2832:	e7ee      	b.n	2812 <netconn_new_with_proto_and_callback+0x22>
    2834:	00002ffd 	.word	0x00002ffd
    2838:	00002fd5 	.word	0x00002fd5
    283c:	00003e31 	.word	0x00003e31
    2840:	000024dd 	.word	0x000024dd
    2844:	00002595 	.word	0x00002595
    2848:	00005d31 	.word	0x00005d31

0000284c <netconn_delete>:
	if (conn == NULL) {
    284c:	b170      	cbz	r0, 286c <netconn_delete+0x20>
{
    284e:	b510      	push	{r4, lr}
    2850:	b086      	sub	sp, #24
    2852:	4604      	mov	r4, r0
	msg.function = do_delconn;
    2854:	4b06      	ldr	r3, [pc, #24]	; (2870 <netconn_delete+0x24>)
    2856:	9300      	str	r3, [sp, #0]
	msg.msg.conn = conn;
    2858:	9001      	str	r0, [sp, #4]
	tcpip_apimsg(&msg);
    285a:	4668      	mov	r0, sp
    285c:	4b05      	ldr	r3, [pc, #20]	; (2874 <netconn_delete+0x28>)
    285e:	4798      	blx	r3
	netconn_free(conn);
    2860:	4620      	mov	r0, r4
    2862:	4b05      	ldr	r3, [pc, #20]	; (2878 <netconn_delete+0x2c>)
    2864:	4798      	blx	r3
}
    2866:	2000      	movs	r0, #0
    2868:	b006      	add	sp, #24
    286a:	bd10      	pop	{r4, pc}
    286c:	2000      	movs	r0, #0
    286e:	4770      	bx	lr
    2870:	00003161 	.word	0x00003161
    2874:	00003e31 	.word	0x00003e31
    2878:	00003075 	.word	0x00003075

0000287c <netconn_getaddr>:
	LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
    287c:	b1b0      	cbz	r0, 28ac <netconn_getaddr+0x30>
{
    287e:	b510      	push	{r4, lr}
    2880:	b086      	sub	sp, #24
    2882:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
    2884:	b199      	cbz	r1, 28ae <netconn_getaddr+0x32>
	LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
    2886:	b19a      	cbz	r2, 28b0 <netconn_getaddr+0x34>
	msg.function          = do_getaddr;
    2888:	480a      	ldr	r0, [pc, #40]	; (28b4 <netconn_getaddr+0x38>)
    288a:	9000      	str	r0, [sp, #0]
	msg.msg.conn          = conn;
    288c:	9401      	str	r4, [sp, #4]
	msg.msg.msg.ad.ipaddr = addr;
    288e:	9103      	str	r1, [sp, #12]
	msg.msg.msg.ad.port   = port;
    2890:	9204      	str	r2, [sp, #16]
	msg.msg.msg.ad.local  = local;
    2892:	f88d 3014 	strb.w	r3, [sp, #20]
	err                   = TCPIP_APIMSG(&msg);
    2896:	4668      	mov	r0, sp
    2898:	4b07      	ldr	r3, [pc, #28]	; (28b8 <netconn_getaddr+0x3c>)
    289a:	4798      	blx	r3
	NETCONN_SET_SAFE_ERR(conn, err);
    289c:	f994 3008 	ldrsb.w	r3, [r4, #8]
    28a0:	f113 0f09 	cmn.w	r3, #9
    28a4:	db00      	blt.n	28a8 <netconn_getaddr+0x2c>
    28a6:	7220      	strb	r0, [r4, #8]
}
    28a8:	b006      	add	sp, #24
    28aa:	bd10      	pop	{r4, pc}
    28ac:	e7fe      	b.n	28ac <netconn_getaddr+0x30>
    28ae:	e7fe      	b.n	28ae <netconn_getaddr+0x32>
    28b0:	e7fe      	b.n	28b0 <netconn_getaddr+0x34>
    28b2:	bf00      	nop
    28b4:	00003351 	.word	0x00003351
    28b8:	00003e31 	.word	0x00003e31

000028bc <netconn_bind>:
	LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
    28bc:	b198      	cbz	r0, 28e6 <netconn_bind+0x2a>
{
    28be:	b510      	push	{r4, lr}
    28c0:	b086      	sub	sp, #24
    28c2:	4604      	mov	r4, r0
	msg.function          = do_bind;
    28c4:	4b08      	ldr	r3, [pc, #32]	; (28e8 <netconn_bind+0x2c>)
    28c6:	9300      	str	r3, [sp, #0]
	msg.msg.conn          = conn;
    28c8:	9001      	str	r0, [sp, #4]
	msg.msg.msg.bc.ipaddr = addr;
    28ca:	9103      	str	r1, [sp, #12]
	msg.msg.msg.bc.port   = port;
    28cc:	f8ad 2010 	strh.w	r2, [sp, #16]
	err                   = TCPIP_APIMSG(&msg);
    28d0:	4668      	mov	r0, sp
    28d2:	4b06      	ldr	r3, [pc, #24]	; (28ec <netconn_bind+0x30>)
    28d4:	4798      	blx	r3
	NETCONN_SET_SAFE_ERR(conn, err);
    28d6:	f994 3008 	ldrsb.w	r3, [r4, #8]
    28da:	f113 0f09 	cmn.w	r3, #9
    28de:	db00      	blt.n	28e2 <netconn_bind+0x26>
    28e0:	7220      	strb	r0, [r4, #8]
}
    28e2:	b006      	add	sp, #24
    28e4:	bd10      	pop	{r4, pc}
    28e6:	e7fe      	b.n	28e6 <netconn_bind+0x2a>
    28e8:	000031fd 	.word	0x000031fd
    28ec:	00003e31 	.word	0x00003e31

000028f0 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) && netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
    28f0:	b138      	cbz	r0, 2902 <netconn_recv_tcp_pbuf+0x12>
{
    28f2:	b508      	push	{r3, lr}
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) && netconn_type(conn) == NETCONN_TCP, return ERR_ARG;);
    28f4:	7802      	ldrb	r2, [r0, #0]
    28f6:	2a10      	cmp	r2, #16
    28f8:	d000      	beq.n	28fc <netconn_recv_tcp_pbuf+0xc>
    28fa:	e7fe      	b.n	28fa <netconn_recv_tcp_pbuf+0xa>

	return netconn_recv_data(conn, (void **)new_buf);
    28fc:	4b01      	ldr	r3, [pc, #4]	; (2904 <netconn_recv_tcp_pbuf+0x14>)
    28fe:	4798      	blx	r3
}
    2900:	bd08      	pop	{r3, pc}
    2902:	e7fe      	b.n	2902 <netconn_recv_tcp_pbuf+0x12>
    2904:	00002731 	.word	0x00002731

00002908 <netconn_recv>:
#if LWIP_TCP
	struct netbuf *buf = NULL;
	err_t          err;
#endif /* LWIP_TCP */

	LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
    2908:	b159      	cbz	r1, 2922 <netconn_recv+0x1a>
{
    290a:	b570      	push	{r4, r5, r6, lr}
    290c:	b082      	sub	sp, #8
    290e:	460e      	mov	r6, r1
	*new_buf = NULL;
    2910:	2300      	movs	r3, #0
    2912:	600b      	str	r3, [r1, #0]
	LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL), return ERR_ARG;);
    2914:	b130      	cbz	r0, 2924 <netconn_recv+0x1c>
    2916:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_accept: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
    2918:	3010      	adds	r0, #16
    291a:	4b1c      	ldr	r3, [pc, #112]	; (298c <netconn_recv+0x84>)
    291c:	4798      	blx	r3
    291e:	b910      	cbnz	r0, 2926 <netconn_recv+0x1e>
    2920:	e7fe      	b.n	2920 <netconn_recv+0x18>
    2922:	e7fe      	b.n	2922 <netconn_recv+0x1a>
    2924:	e7fe      	b.n	2924 <netconn_recv+0x1c>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
	if (conn->type == NETCONN_TCP)
    2926:	7823      	ldrb	r3, [r4, #0]
    2928:	2b10      	cmp	r3, #16
    292a:	d007      	beq.n	293c <netconn_recv+0x34>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
	else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
	{
#if (LWIP_UDP || LWIP_RAW)
		return netconn_recv_data(conn, (void **)new_buf);
    292c:	4631      	mov	r1, r6
    292e:	4620      	mov	r0, r4
    2930:	4b17      	ldr	r3, [pc, #92]	; (2990 <netconn_recv+0x88>)
    2932:	4798      	blx	r3
    2934:	4604      	mov	r4, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
	}
}
    2936:	4620      	mov	r0, r4
    2938:	b002      	add	sp, #8
    293a:	bd70      	pop	{r4, r5, r6, pc}
		struct pbuf *p = NULL;
    293c:	2300      	movs	r3, #0
    293e:	9301      	str	r3, [sp, #4]
		buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    2940:	2006      	movs	r0, #6
    2942:	4b14      	ldr	r3, [pc, #80]	; (2994 <netconn_recv+0x8c>)
    2944:	4798      	blx	r3
		if (buf == NULL) {
    2946:	4605      	mov	r5, r0
    2948:	b948      	cbnz	r0, 295e <netconn_recv+0x56>
			NETCONN_SET_SAFE_ERR(conn, ERR_MEM);
    294a:	f994 3008 	ldrsb.w	r3, [r4, #8]
    294e:	f113 0f09 	cmn.w	r3, #9
    2952:	db18      	blt.n	2986 <netconn_recv+0x7e>
    2954:	23ff      	movs	r3, #255	; 0xff
    2956:	7223      	strb	r3, [r4, #8]
			return ERR_MEM;
    2958:	f04f 34ff 	mov.w	r4, #4294967295
    295c:	e7eb      	b.n	2936 <netconn_recv+0x2e>
		err = netconn_recv_data(conn, (void **)&p);
    295e:	a901      	add	r1, sp, #4
    2960:	4620      	mov	r0, r4
    2962:	4b0b      	ldr	r3, [pc, #44]	; (2990 <netconn_recv+0x88>)
    2964:	4798      	blx	r3
		if (err != ERR_OK) {
    2966:	4604      	mov	r4, r0
    2968:	b120      	cbz	r0, 2974 <netconn_recv+0x6c>
			memp_free(MEMP_NETBUF, buf);
    296a:	4629      	mov	r1, r5
    296c:	2006      	movs	r0, #6
    296e:	4b0a      	ldr	r3, [pc, #40]	; (2998 <netconn_recv+0x90>)
    2970:	4798      	blx	r3
			return err;
    2972:	e7e0      	b.n	2936 <netconn_recv+0x2e>
		buf->p    = p;
    2974:	9b01      	ldr	r3, [sp, #4]
    2976:	602b      	str	r3, [r5, #0]
		buf->ptr  = p;
    2978:	9b01      	ldr	r3, [sp, #4]
    297a:	606b      	str	r3, [r5, #4]
		buf->port = 0;
    297c:	2300      	movs	r3, #0
    297e:	81ab      	strh	r3, [r5, #12]
		ip_addr_set_any(&buf->addr);
    2980:	60ab      	str	r3, [r5, #8]
		*new_buf = buf;
    2982:	6035      	str	r5, [r6, #0]
		return ERR_OK;
    2984:	e7d7      	b.n	2936 <netconn_recv+0x2e>
			return ERR_MEM;
    2986:	f04f 34ff 	mov.w	r4, #4294967295
    298a:	e7d4      	b.n	2936 <netconn_recv+0x2e>
    298c:	000026e1 	.word	0x000026e1
    2990:	00002731 	.word	0x00002731
    2994:	00005d09 	.word	0x00005d09
    2998:	00005d31 	.word	0x00005d31

0000299c <netconn_recved>:
 * @param length amount of data processed (ATTENTION: this must be accurate!)
 */
void netconn_recved(struct netconn *conn, u32_t length)
{
#if LWIP_TCP
	if ((conn != NULL) && (conn->type == NETCONN_TCP) && (netconn_get_noautorecved(conn))) {
    299c:	b110      	cbz	r0, 29a4 <netconn_recved+0x8>
    299e:	7802      	ldrb	r2, [r0, #0]
    29a0:	2a10      	cmp	r2, #16
    29a2:	d000      	beq.n	29a6 <netconn_recved+0xa>
    29a4:	4770      	bx	lr
    29a6:	7f02      	ldrb	r2, [r0, #28]
    29a8:	f012 0f08 	tst.w	r2, #8
    29ac:	d0fa      	beq.n	29a4 <netconn_recved+0x8>
{
    29ae:	b500      	push	{lr}
    29b0:	b087      	sub	sp, #28
		struct api_msg msg;
		/* Let the stack know that we have taken the data. */
		/* TODO: Speedup: Don't block and wait for the answer here
		   (to prevent multiple thread-switches). */
		msg.function      = do_recv;
    29b2:	4a05      	ldr	r2, [pc, #20]	; (29c8 <netconn_recved+0x2c>)
    29b4:	9200      	str	r2, [sp, #0]
		msg.msg.conn      = conn;
    29b6:	9001      	str	r0, [sp, #4]
		msg.msg.msg.r.len = length;
    29b8:	9103      	str	r1, [sp, #12]
		/* don't care for the return value of do_recv */
		TCPIP_APIMSG(&msg);
    29ba:	4668      	mov	r0, sp
    29bc:	4b03      	ldr	r3, [pc, #12]	; (29cc <netconn_recved+0x30>)
    29be:	4798      	blx	r3
	}
#else  /* LWIP_TCP */
	LWIP_UNUSED_ARG(conn);
	LWIP_UNUSED_ARG(length);
#endif /* LWIP_TCP */
}
    29c0:	b007      	add	sp, #28
    29c2:	f85d fb04 	ldr.w	pc, [sp], #4
    29c6:	bf00      	nop
    29c8:	000032b1 	.word	0x000032b1
    29cc:	00003e31 	.word	0x00003e31

000029d0 <netconn_send>:
err_t netconn_send(struct netconn *conn, struct netbuf *buf)
{
	struct api_msg msg;
	err_t          err;

	LWIP_ERROR("netconn_send: invalid conn", (conn != NULL), return ERR_ARG;);
    29d0:	b188      	cbz	r0, 29f6 <netconn_send+0x26>
{
    29d2:	b510      	push	{r4, lr}
    29d4:	b086      	sub	sp, #24
    29d6:	4604      	mov	r4, r0

	LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %" U16_F " bytes\n", buf->p->tot_len));
	msg.function  = do_send;
    29d8:	4b07      	ldr	r3, [pc, #28]	; (29f8 <netconn_send+0x28>)
    29da:	9300      	str	r3, [sp, #0]
	msg.msg.conn  = conn;
    29dc:	9001      	str	r0, [sp, #4]
	msg.msg.msg.b = buf;
    29de:	9103      	str	r1, [sp, #12]
	err           = TCPIP_APIMSG(&msg);
    29e0:	4668      	mov	r0, sp
    29e2:	4b06      	ldr	r3, [pc, #24]	; (29fc <netconn_send+0x2c>)
    29e4:	4798      	blx	r3

	NETCONN_SET_SAFE_ERR(conn, err);
    29e6:	f994 3008 	ldrsb.w	r3, [r4, #8]
    29ea:	f113 0f09 	cmn.w	r3, #9
    29ee:	db00      	blt.n	29f2 <netconn_send+0x22>
    29f0:	7220      	strb	r0, [r4, #8]
	return err;
}
    29f2:	b006      	add	sp, #24
    29f4:	bd10      	pop	{r4, pc}
    29f6:	e7fe      	b.n	29f6 <netconn_send+0x26>
    29f8:	00003255 	.word	0x00003255
    29fc:	00003e31 	.word	0x00003e31

00002a00 <netconn_write_partly>:
 * - NETCONN_DONTBLOCK: only write the data if all dat can be written at once
 * @param bytes_written pointer to a location that receives the number of written bytes
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size, u8_t apiflags, size_t *bytes_written)
{
    2a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a02:	b087      	sub	sp, #28
    2a04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	struct api_msg msg;
	err_t          err;
	u8_t           dontblock;

	LWIP_ERROR("netconn_write: invalid conn", (conn != NULL), return ERR_ARG;);
    2a06:	b120      	cbz	r0, 2a12 <netconn_write_partly+0x12>
    2a08:	4604      	mov	r4, r0
	LWIP_ERROR("netconn_write: invalid conn->type", (conn->type == NETCONN_TCP), return ERR_VAL;);
    2a0a:	7800      	ldrb	r0, [r0, #0]
    2a0c:	2810      	cmp	r0, #16
    2a0e:	d001      	beq.n	2a14 <netconn_write_partly+0x14>
    2a10:	e7fe      	b.n	2a10 <netconn_write_partly+0x10>
    2a12:	e7fe      	b.n	2a12 <netconn_write_partly+0x12>
	if (size == 0) {
    2a14:	b35a      	cbz	r2, 2a6e <netconn_write_partly+0x6e>
		return ERR_OK;
	}
	dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
    2a16:	7f20      	ldrb	r0, [r4, #28]
    2a18:	f010 0f02 	tst.w	r0, #2
    2a1c:	d121      	bne.n	2a62 <netconn_write_partly+0x62>
    2a1e:	f013 0f04 	tst.w	r3, #4
    2a22:	d020      	beq.n	2a66 <netconn_write_partly+0x66>
    2a24:	2001      	movs	r0, #1
	if (dontblock && !bytes_written) {
    2a26:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    2a2a:	b100      	cbz	r0, 2a2e <netconn_write_partly+0x2e>
    2a2c:	b30e      	cbz	r6, 2a72 <netconn_write_partly+0x72>
    2a2e:	4615      	mov	r5, r2
		   it has no way to return the number of bytes written. */
		return ERR_VAL;
	}

	/* non-blocking write sends as much  */
	msg.function           = do_write;
    2a30:	4a11      	ldr	r2, [pc, #68]	; (2a78 <netconn_write_partly+0x78>)
    2a32:	9200      	str	r2, [sp, #0]
	msg.msg.conn           = conn;
    2a34:	9401      	str	r4, [sp, #4]
	msg.msg.msg.w.dataptr  = dataptr;
    2a36:	9103      	str	r1, [sp, #12]
	msg.msg.msg.w.apiflags = apiflags;
    2a38:	f88d 3014 	strb.w	r3, [sp, #20]
	msg.msg.msg.w.len      = size;
    2a3c:	9504      	str	r5, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

	/* For locking the core: this _can_ be delayed on low memory/low send buffer,
	   but if it is, this is done inside api_msg.c:do_write(), so we can use the
	   non-blocking version here. */
	err = TCPIP_APIMSG(&msg);
    2a3e:	4668      	mov	r0, sp
    2a40:	4b0e      	ldr	r3, [pc, #56]	; (2a7c <netconn_write_partly+0x7c>)
    2a42:	4798      	blx	r3
	if ((err == ERR_OK) && (bytes_written != NULL)) {
    2a44:	4603      	mov	r3, r0
    2a46:	b918      	cbnz	r0, 2a50 <netconn_write_partly+0x50>
    2a48:	b116      	cbz	r6, 2a50 <netconn_write_partly+0x50>
		if (dontblock
    2a4a:	b177      	cbz	r7, 2a6a <netconn_write_partly+0x6a>
#if LWIP_SO_SNDTIMEO
		    || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
		) {
			/* nonblocking write: maybe the data has been sent partly */
			*bytes_written = msg.msg.msg.w.len;
    2a4c:	9a04      	ldr	r2, [sp, #16]
    2a4e:	6032      	str	r2, [r6, #0]
			/* blocking call succeeded: all data has been sent if it */
			*bytes_written = size;
		}
	}

	NETCONN_SET_SAFE_ERR(conn, err);
    2a50:	f994 2008 	ldrsb.w	r2, [r4, #8]
    2a54:	f112 0f09 	cmn.w	r2, #9
    2a58:	db00      	blt.n	2a5c <netconn_write_partly+0x5c>
    2a5a:	7223      	strb	r3, [r4, #8]
	return err;
}
    2a5c:	4618      	mov	r0, r3
    2a5e:	b007      	add	sp, #28
    2a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
    2a62:	2001      	movs	r0, #1
    2a64:	e7df      	b.n	2a26 <netconn_write_partly+0x26>
    2a66:	2000      	movs	r0, #0
    2a68:	e7dd      	b.n	2a26 <netconn_write_partly+0x26>
			*bytes_written = size;
    2a6a:	6035      	str	r5, [r6, #0]
    2a6c:	e7f0      	b.n	2a50 <netconn_write_partly+0x50>
		return ERR_OK;
    2a6e:	2300      	movs	r3, #0
    2a70:	e7f4      	b.n	2a5c <netconn_write_partly+0x5c>
		return ERR_VAL;
    2a72:	f06f 0305 	mvn.w	r3, #5
    2a76:	e7f1      	b.n	2a5c <netconn_write_partly+0x5c>
    2a78:	000032f9 	.word	0x000032f9
    2a7c:	00003e31 	.word	0x00003e31

00002a80 <err_tcp>:
 * The application thread has then to decide what to do.
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void err_tcp(void *arg, err_t err)
{
    2a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a82:	4604      	mov	r4, r0
    2a84:	460f      	mov	r7, r1
	SYS_ARCH_DECL_PROTECT(lev);

	conn = (struct netconn *)arg;
	LWIP_ASSERT("conn != NULL", (conn != NULL));

	conn->pcb.tcp = NULL;
    2a86:	2300      	movs	r3, #0
    2a88:	6043      	str	r3, [r0, #4]

	/* no check since this is always fatal! */
	SYS_ARCH_PROTECT(lev);
	conn->last_err = err;
    2a8a:	7201      	strb	r1, [r0, #8]
	SYS_ARCH_UNPROTECT(lev);

	/* reset conn->state now before waking up other threads */
	old_state   = conn->state;
    2a8c:	7845      	ldrb	r5, [r0, #1]
	conn->state = NETCONN_NONE;
    2a8e:	7043      	strb	r3, [r0, #1]

	/* Notify the user layer about a connection error. Used to signal
	   select. */
	API_EVENT(conn, NETCONN_EVT_ERROR, 0);
    2a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2a92:	b113      	cbz	r3, 2a9a <err_tcp+0x1a>
    2a94:	2200      	movs	r2, #0
    2a96:	2104      	movs	r1, #4
    2a98:	4798      	blx	r3
	/* Try to release selects pending on 'read' or 'write', too.
	   They will get an error if they actually try to read or write. */
	API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
    2a9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a9c:	b11b      	cbz	r3, 2aa6 <err_tcp+0x26>
    2a9e:	2200      	movs	r2, #0
    2aa0:	4611      	mov	r1, r2
    2aa2:	4620      	mov	r0, r4
    2aa4:	4798      	blx	r3
	API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2aa8:	b11b      	cbz	r3, 2ab2 <err_tcp+0x32>
    2aaa:	2200      	movs	r2, #0
    2aac:	2102      	movs	r1, #2
    2aae:	4620      	mov	r0, r4
    2ab0:	4798      	blx	r3

	/* pass NULL-message to recvmbox to wake up pending recv */
	if (sys_mbox_valid(&conn->recvmbox)) {
    2ab2:	f104 0610 	add.w	r6, r4, #16
    2ab6:	4630      	mov	r0, r6
    2ab8:	4b14      	ldr	r3, [pc, #80]	; (2b0c <err_tcp+0x8c>)
    2aba:	4798      	blx	r3
    2abc:	b998      	cbnz	r0, 2ae6 <err_tcp+0x66>
		/* use trypost to prevent deadlock */
		sys_mbox_trypost(&conn->recvmbox, NULL);
	}
	/* pass NULL-message to acceptmbox to wake up pending accept */
	if (sys_mbox_valid(&conn->acceptmbox)) {
    2abe:	f104 0614 	add.w	r6, r4, #20
    2ac2:	4630      	mov	r0, r6
    2ac4:	4b11      	ldr	r3, [pc, #68]	; (2b0c <err_tcp+0x8c>)
    2ac6:	4798      	blx	r3
    2ac8:	b990      	cbnz	r0, 2af0 <err_tcp+0x70>
		/* use trypost to preven deadlock */
		sys_mbox_trypost(&conn->acceptmbox, NULL);
	}

	if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) || (old_state == NETCONN_CONNECT)) {
    2aca:	2d01      	cmp	r5, #1
    2acc:	d003      	beq.n	2ad6 <err_tcp+0x56>
    2ace:	2d04      	cmp	r5, #4
    2ad0:	d001      	beq.n	2ad6 <err_tcp+0x56>
    2ad2:	2d03      	cmp	r5, #3
    2ad4:	d106      	bne.n	2ae4 <err_tcp+0x64>
		/* calling do_writemore/do_close_internal is not necessary
		   since the pcb has already been deleted! */
		int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
    2ad6:	7f23      	ldrb	r3, [r4, #28]
		SET_NONBLOCKING_CONNECT(conn, 0);
    2ad8:	f023 0204 	bic.w	r2, r3, #4
    2adc:	7722      	strb	r2, [r4, #28]

		if (!was_nonblocking_connect) {
    2ade:	f013 0f04 	tst.w	r3, #4
    2ae2:	d00a      	beq.n	2afa <err_tcp+0x7a>
    2ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_mbox_trypost(&conn->recvmbox, NULL);
    2ae6:	2100      	movs	r1, #0
    2ae8:	4630      	mov	r0, r6
    2aea:	4b09      	ldr	r3, [pc, #36]	; (2b10 <err_tcp+0x90>)
    2aec:	4798      	blx	r3
    2aee:	e7e6      	b.n	2abe <err_tcp+0x3e>
		sys_mbox_trypost(&conn->acceptmbox, NULL);
    2af0:	2100      	movs	r1, #0
    2af2:	4630      	mov	r0, r6
    2af4:	4b06      	ldr	r3, [pc, #24]	; (2b10 <err_tcp+0x90>)
    2af6:	4798      	blx	r3
    2af8:	e7e7      	b.n	2aca <err_tcp+0x4a>
			/* set error return code */
			LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
			conn->current_msg->err = err;
    2afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2afc:	711f      	strb	r7, [r3, #4]
			conn->current_msg      = NULL;
    2afe:	2300      	movs	r3, #0
    2b00:	6263      	str	r3, [r4, #36]	; 0x24
			/* wake up the waiting task */
			sys_sem_signal(&conn->op_completed);
    2b02:	f104 000c 	add.w	r0, r4, #12
    2b06:	4b03      	ldr	r3, [pc, #12]	; (2b14 <err_tcp+0x94>)
    2b08:	4798      	blx	r3
		}
	} else {
		LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
	}
}
    2b0a:	e7eb      	b.n	2ae4 <err_tcp+0x64>
    2b0c:	000026e1 	.word	0x000026e1
    2b10:	000025cd 	.word	0x000025cd
    2b14:	000024f1 	.word	0x000024f1

00002b18 <recv_udp>:
{
    2b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b1c:	4614      	mov	r4, r2
	if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
    2b1e:	b138      	cbz	r0, 2b30 <recv_udp+0x18>
    2b20:	4698      	mov	r8, r3
    2b22:	4605      	mov	r5, r0
    2b24:	f100 0610 	add.w	r6, r0, #16
    2b28:	4630      	mov	r0, r6
    2b2a:	4b19      	ldr	r3, [pc, #100]	; (2b90 <recv_udp+0x78>)
    2b2c:	4798      	blx	r3
    2b2e:	b920      	cbnz	r0, 2b3a <recv_udp+0x22>
		pbuf_free(p);
    2b30:	4620      	mov	r0, r4
    2b32:	4b18      	ldr	r3, [pc, #96]	; (2b94 <recv_udp+0x7c>)
    2b34:	4798      	blx	r3
		return;
    2b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    2b3a:	2006      	movs	r0, #6
    2b3c:	4b16      	ldr	r3, [pc, #88]	; (2b98 <recv_udp+0x80>)
    2b3e:	4798      	blx	r3
	if (buf == NULL) {
    2b40:	4607      	mov	r7, r0
    2b42:	b1c0      	cbz	r0, 2b76 <recv_udp+0x5e>
		buf->p   = p;
    2b44:	6004      	str	r4, [r0, #0]
		buf->ptr = p;
    2b46:	6044      	str	r4, [r0, #4]
		ip_addr_set(&buf->addr, addr);
    2b48:	f1b8 0f00 	cmp.w	r8, #0
    2b4c:	d018      	beq.n	2b80 <recv_udp+0x68>
    2b4e:	f8d8 3000 	ldr.w	r3, [r8]
    2b52:	60bb      	str	r3, [r7, #8]
		buf->port = port;
    2b54:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2b58:	81bb      	strh	r3, [r7, #12]
	len = p->tot_len;
    2b5a:	8924      	ldrh	r4, [r4, #8]
	if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
    2b5c:	4639      	mov	r1, r7
    2b5e:	4630      	mov	r0, r6
    2b60:	4b0e      	ldr	r3, [pc, #56]	; (2b9c <recv_udp+0x84>)
    2b62:	4798      	blx	r3
    2b64:	b970      	cbnz	r0, 2b84 <recv_udp+0x6c>
		API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
    2b66:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b68:	b11b      	cbz	r3, 2b72 <recv_udp+0x5a>
    2b6a:	4622      	mov	r2, r4
    2b6c:	2100      	movs	r1, #0
    2b6e:	4628      	mov	r0, r5
    2b70:	4798      	blx	r3
    2b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pbuf_free(p);
    2b76:	4620      	mov	r0, r4
    2b78:	4b06      	ldr	r3, [pc, #24]	; (2b94 <recv_udp+0x7c>)
    2b7a:	4798      	blx	r3
		return;
    2b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ip_addr_set(&buf->addr, addr);
    2b80:	2300      	movs	r3, #0
    2b82:	e7e6      	b.n	2b52 <recv_udp+0x3a>
		netbuf_delete(buf);
    2b84:	4638      	mov	r0, r7
    2b86:	4b06      	ldr	r3, [pc, #24]	; (2ba0 <recv_udp+0x88>)
    2b88:	4798      	blx	r3
		return;
    2b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b8e:	bf00      	nop
    2b90:	000026e1 	.word	0x000026e1
    2b94:	00006009 	.word	0x00006009
    2b98:	00005d09 	.word	0x00005d09
    2b9c:	000025cd 	.word	0x000025cd
    2ba0:	000033cd 	.word	0x000033cd

00002ba4 <setup_tcp>:
 * and their arguments.
 *
 * @param conn the TCP netconn to setup
 */
static void setup_tcp(struct netconn *conn)
{
    2ba4:	b510      	push	{r4, lr}
    2ba6:	4601      	mov	r1, r0
	struct tcp_pcb *pcb;

	pcb = conn->pcb.tcp;
    2ba8:	6844      	ldr	r4, [r0, #4]
	tcp_arg(pcb, conn);
    2baa:	4620      	mov	r0, r4
    2bac:	4b09      	ldr	r3, [pc, #36]	; (2bd4 <setup_tcp+0x30>)
    2bae:	4798      	blx	r3
	tcp_recv(pcb, recv_tcp);
    2bb0:	4909      	ldr	r1, [pc, #36]	; (2bd8 <setup_tcp+0x34>)
    2bb2:	4620      	mov	r0, r4
    2bb4:	4b09      	ldr	r3, [pc, #36]	; (2bdc <setup_tcp+0x38>)
    2bb6:	4798      	blx	r3
	tcp_sent(pcb, sent_tcp);
    2bb8:	4909      	ldr	r1, [pc, #36]	; (2be0 <setup_tcp+0x3c>)
    2bba:	4620      	mov	r0, r4
    2bbc:	4b09      	ldr	r3, [pc, #36]	; (2be4 <setup_tcp+0x40>)
    2bbe:	4798      	blx	r3
	tcp_poll(pcb, poll_tcp, 4);
    2bc0:	2204      	movs	r2, #4
    2bc2:	4909      	ldr	r1, [pc, #36]	; (2be8 <setup_tcp+0x44>)
    2bc4:	4620      	mov	r0, r4
    2bc6:	4b09      	ldr	r3, [pc, #36]	; (2bec <setup_tcp+0x48>)
    2bc8:	4798      	blx	r3
	tcp_err(pcb, err_tcp);
    2bca:	4909      	ldr	r1, [pc, #36]	; (2bf0 <setup_tcp+0x4c>)
    2bcc:	4620      	mov	r0, r4
    2bce:	4b09      	ldr	r3, [pc, #36]	; (2bf4 <setup_tcp+0x50>)
    2bd0:	4798      	blx	r3
    2bd2:	bd10      	pop	{r4, pc}
    2bd4:	00006531 	.word	0x00006531
    2bd8:	00002f51 	.word	0x00002f51
    2bdc:	00006535 	.word	0x00006535
    2be0:	00002ef9 	.word	0x00002ef9
    2be4:	0000653b 	.word	0x0000653b
    2be8:	00002ea1 	.word	0x00002ea1
    2bec:	00006549 	.word	0x00006549
    2bf0:	00002a81 	.word	0x00002a81
    2bf4:	0000653f 	.word	0x0000653f

00002bf8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 * @return msg->conn->err, but the return value is currently ignored
 */
static void pcb_new(struct api_msg_msg *msg)
{
    2bf8:	b538      	push	{r3, r4, r5, lr}
    2bfa:	4604      	mov	r4, r0
	LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

	/* Allocate a PCB for this connection */
	switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    2bfc:	6805      	ldr	r5, [r0, #0]
    2bfe:	782b      	ldrb	r3, [r5, #0]
    2c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2c04:	2b10      	cmp	r3, #16
    2c06:	d017      	beq.n	2c38 <pcb_new+0x40>
    2c08:	2b20      	cmp	r3, #32
    2c0a:	d121      	bne.n	2c50 <pcb_new+0x58>
		raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
		break;
#endif /* LWIP_RAW */
#if LWIP_UDP
	case NETCONN_UDP:
		msg->conn->pcb.udp = udp_new();
    2c0c:	4b12      	ldr	r3, [pc, #72]	; (2c58 <pcb_new+0x60>)
    2c0e:	4798      	blx	r3
    2c10:	6068      	str	r0, [r5, #4]
		if (msg->conn->pcb.udp == NULL) {
    2c12:	6823      	ldr	r3, [r4, #0]
    2c14:	685a      	ldr	r2, [r3, #4]
    2c16:	b14a      	cbz	r2, 2c2c <pcb_new+0x34>
#if LWIP_UDPLITE
		if (msg->conn->type == NETCONN_UDPLITE) {
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
		}
#endif /* LWIP_UDPLITE */
		if (msg->conn->type == NETCONN_UDPNOCHKSUM) {
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	2b22      	cmp	r3, #34	; 0x22
    2c1c:	d009      	beq.n	2c32 <pcb_new+0x3a>
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
		}
		udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
    2c1e:	6823      	ldr	r3, [r4, #0]
    2c20:	461a      	mov	r2, r3
    2c22:	490e      	ldr	r1, [pc, #56]	; (2c5c <pcb_new+0x64>)
    2c24:	6858      	ldr	r0, [r3, #4]
    2c26:	4b0e      	ldr	r3, [pc, #56]	; (2c60 <pcb_new+0x68>)
    2c28:	4798      	blx	r3
		break;
    2c2a:	bd38      	pop	{r3, r4, r5, pc}
			msg->err = ERR_MEM;
    2c2c:	23ff      	movs	r3, #255	; 0xff
    2c2e:	7123      	strb	r3, [r4, #4]
			break;
    2c30:	bd38      	pop	{r3, r4, r5, pc}
			udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
    2c32:	2301      	movs	r3, #1
    2c34:	7413      	strb	r3, [r2, #16]
    2c36:	e7f2      	b.n	2c1e <pcb_new+0x26>
#endif /* LWIP_UDP */
#if LWIP_TCP
	case NETCONN_TCP:
		msg->conn->pcb.tcp = tcp_new();
    2c38:	4b0a      	ldr	r3, [pc, #40]	; (2c64 <pcb_new+0x6c>)
    2c3a:	4798      	blx	r3
    2c3c:	6068      	str	r0, [r5, #4]
		if (msg->conn->pcb.tcp == NULL) {
    2c3e:	6820      	ldr	r0, [r4, #0]
    2c40:	6843      	ldr	r3, [r0, #4]
    2c42:	b113      	cbz	r3, 2c4a <pcb_new+0x52>
			msg->err = ERR_MEM;
			break;
		}
		setup_tcp(msg->conn);
    2c44:	4b08      	ldr	r3, [pc, #32]	; (2c68 <pcb_new+0x70>)
    2c46:	4798      	blx	r3
		break;
    2c48:	bd38      	pop	{r3, r4, r5, pc}
			msg->err = ERR_MEM;
    2c4a:	23ff      	movs	r3, #255	; 0xff
    2c4c:	7123      	strb	r3, [r4, #4]
			break;
    2c4e:	bd38      	pop	{r3, r4, r5, pc}
#endif /* LWIP_TCP */
	default:
		/* Unsupported netconn type, e.g. protocol disabled */
		msg->err = ERR_VAL;
    2c50:	23fa      	movs	r3, #250	; 0xfa
    2c52:	7103      	strb	r3, [r0, #4]
    2c54:	bd38      	pop	{r3, r4, r5, pc}
    2c56:	bf00      	nop
    2c58:	000095d5 	.word	0x000095d5
    2c5c:	00002b19 	.word	0x00002b19
    2c60:	00009595 	.word	0x00009595
    2c64:	00006e9d 	.word	0x00006e9d
    2c68:	00002ba5 	.word	0x00002ba5

00002c6c <do_writemore>:
 * @param conn netconn (that is currently in state NETCONN_WRITE) to process
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t do_writemore(struct netconn *conn)
{
    2c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c6e:	4604      	mov	r4, r0
	err_t  err;
	void * dataptr;
	u16_t  len, available;
	u8_t   write_finished = 0;
	size_t diff;
	u8_t   dontblock = netconn_is_nonblocking(conn) || (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
    2c70:	7f03      	ldrb	r3, [r0, #28]
    2c72:	f013 0f02 	tst.w	r3, #2
    2c76:	d106      	bne.n	2c86 <do_writemore+0x1a>
    2c78:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2c7a:	7c1b      	ldrb	r3, [r3, #16]
    2c7c:	f013 0f04 	tst.w	r3, #4
    2c80:	d02b      	beq.n	2cda <do_writemore+0x6e>
    2c82:	2501      	movs	r5, #1
    2c84:	e000      	b.n	2c88 <do_writemore+0x1c>
    2c86:	2501      	movs	r5, #1
    2c88:	b2ed      	uxtb	r5, r5
	u8_t   apiflags  = conn->current_msg->msg.w.apiflags;
    2c8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2c8c:	7c03      	ldrb	r3, [r0, #16]
			conn->current_msg->msg.w.len = conn->write_offset;
		}
	} else
#endif /* LWIP_SO_SNDTIMEO */
	{
		dataptr = (u8_t *)conn->current_msg->msg.w.dataptr + conn->write_offset;
    2c8e:	6881      	ldr	r1, [r0, #8]
    2c90:	6a26      	ldr	r6, [r4, #32]
    2c92:	4431      	add	r1, r6
		diff    = conn->current_msg->msg.w.len - conn->write_offset;
    2c94:	68c2      	ldr	r2, [r0, #12]
    2c96:	1b92      	subs	r2, r2, r6
		if (diff > 0xffffUL) { /* max_u16_t */
    2c98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    2c9c:	d31f      	bcc.n	2cde <do_writemore+0x72>
			len = 0xffff;
#if LWIP_TCPIP_CORE_LOCKING
			conn->flags |= NETCONN_FLAG_WRITE_DELAYED;
#endif
			apiflags |= TCP_WRITE_FLAG_MORE;
    2c9e:	f043 0302 	orr.w	r3, r3, #2
			len = 0xffff;
    2ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
		} else {
			len = (u16_t)diff;
		}
		available = tcp_sndbuf(conn->pcb.tcp);
    2ca6:	6860      	ldr	r0, [r4, #4]
    2ca8:	f8b0 6066 	ldrh.w	r6, [r0, #102]	; 0x66
		if (available < len) {
    2cac:	42b2      	cmp	r2, r6
    2cae:	d935      	bls.n	2d1c <do_writemore+0xb0>
			/* don't try to write more than sendbuf */
			len = available;
			if (dontblock) {
    2cb0:	b1bd      	cbz	r5, 2ce2 <do_writemore+0x76>
				if (!len) {
    2cb2:	b9c6      	cbnz	r6, 2ce6 <do_writemore+0x7a>
					err = ERR_WOULDBLOCK;
    2cb4:	f06f 0706 	mvn.w	r7, #6
		LWIP_ASSERT("do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
		err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
		/* if OK or memory error, check available space */
		if ((err == ERR_OK) || (err == ERR_MEM)) {
		err_mem:
			if (dontblock && (len < conn->current_msg->msg.w.len)) {
    2cb8:	2d00      	cmp	r5, #0
    2cba:	d031      	beq.n	2d20 <do_writemore+0xb4>
    2cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2cbe:	68db      	ldr	r3, [r3, #12]
    2cc0:	429e      	cmp	r6, r3
    2cc2:	d22d      	bcs.n	2d20 <do_writemore+0xb4>
				/* non-blocking write did not write everything: mark the pcb non-writable
				   and let poll_tcp check writable space to mark the pcb writable again */
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
    2cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cc6:	b11b      	cbz	r3, 2cd0 <do_writemore+0x64>
    2cc8:	4632      	mov	r2, r6
    2cca:	2103      	movs	r1, #3
    2ccc:	4620      	mov	r0, r4
    2cce:	4798      	blx	r3
				conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
    2cd0:	7f23      	ldrb	r3, [r4, #28]
    2cd2:	f043 0310 	orr.w	r3, r3, #16
    2cd6:	7723      	strb	r3, [r4, #28]
    2cd8:	e00d      	b.n	2cf6 <do_writemore+0x8a>
	u8_t   dontblock = netconn_is_nonblocking(conn) || (conn->current_msg->msg.w.apiflags & NETCONN_DONTBLOCK);
    2cda:	2500      	movs	r5, #0
    2cdc:	e7d4      	b.n	2c88 <do_writemore+0x1c>
			len = (u16_t)diff;
    2cde:	b292      	uxth	r2, r2
    2ce0:	e7e1      	b.n	2ca6 <do_writemore+0x3a>
				apiflags |= TCP_WRITE_FLAG_MORE;
    2ce2:	f043 0302 	orr.w	r3, r3, #2
		err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    2ce6:	4632      	mov	r2, r6
    2ce8:	4f23      	ldr	r7, [pc, #140]	; (2d78 <do_writemore+0x10c>)
    2cea:	47b8      	blx	r7
    2cec:	4607      	mov	r7, r0
		if ((err == ERR_OK) || (err == ERR_MEM)) {
    2cee:	1c43      	adds	r3, r0, #1
    2cf0:	b2db      	uxtb	r3, r3
    2cf2:	2b01      	cmp	r3, #1
    2cf4:	d9e0      	bls.n	2cb8 <do_writemore+0x4c>
				   let select mark this pcb as non-writable. */
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
			}
		}

		if (err == ERR_OK) {
    2cf6:	bb37      	cbnz	r7, 2d46 <do_writemore+0xda>
			conn->write_offset += len;
    2cf8:	6a23      	ldr	r3, [r4, #32]
    2cfa:	441e      	add	r6, r3
    2cfc:	6226      	str	r6, [r4, #32]
			if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
    2cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d00:	68da      	ldr	r2, [r3, #12]
    2d02:	4296      	cmp	r6, r2
    2d04:	d000      	beq.n	2d08 <do_writemore+0x9c>
    2d06:	b11d      	cbz	r5, 2d10 <do_writemore+0xa4>
				/* return sent length */
				conn->current_msg->msg.w.len = conn->write_offset;
    2d08:	60de      	str	r6, [r3, #12]
				/* everything was written */
				write_finished     = 1;
				conn->write_offset = 0;
    2d0a:	2300      	movs	r3, #0
    2d0c:	6223      	str	r3, [r4, #32]
				write_finished     = 1;
    2d0e:	2501      	movs	r5, #1
			}
			tcp_output(conn->pcb.tcp);
    2d10:	6860      	ldr	r0, [r4, #4]
    2d12:	4b1a      	ldr	r3, [pc, #104]	; (2d7c <do_writemore+0x110>)
    2d14:	4798      	blx	r3
			   the error to the application thread. */
			write_finished               = 1;
			conn->current_msg->msg.w.len = 0;
		}
	}
	if (write_finished) {
    2d16:	bb25      	cbnz	r5, 2d62 <do_writemore+0xf6>
#if LWIP_TCPIP_CORE_LOCKING
	else
		return ERR_MEM;
#endif
	return ERR_OK;
}
    2d18:	2000      	movs	r0, #0
    2d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d1c:	4616      	mov	r6, r2
    2d1e:	e7e2      	b.n	2ce6 <do_writemore+0x7a>
			} else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT)
    2d20:	6863      	ldr	r3, [r4, #4]
    2d22:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
    2d26:	f640 3267 	movw	r2, #2919	; 0xb67
    2d2a:	4291      	cmp	r1, r2
    2d2c:	d903      	bls.n	2d36 <do_writemore+0xca>
			           || (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
    2d2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    2d32:	2b04      	cmp	r3, #4
    2d34:	d9df      	bls.n	2cf6 <do_writemore+0x8a>
				API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
    2d36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d0dc      	beq.n	2cf6 <do_writemore+0x8a>
    2d3c:	4632      	mov	r2, r6
    2d3e:	2103      	movs	r1, #3
    2d40:	4620      	mov	r0, r4
    2d42:	4798      	blx	r3
    2d44:	e7d7      	b.n	2cf6 <do_writemore+0x8a>
		} else if ((err == ERR_MEM) && !dontblock) {
    2d46:	f1b7 3fff 	cmp.w	r7, #4294967295
    2d4a:	d004      	beq.n	2d56 <do_writemore+0xea>
			conn->current_msg->msg.w.len = 0;
    2d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d4e:	2200      	movs	r2, #0
    2d50:	60da      	str	r2, [r3, #12]
			write_finished               = 1;
    2d52:	2501      	movs	r5, #1
    2d54:	e7df      	b.n	2d16 <do_writemore+0xaa>
		} else if ((err == ERR_MEM) && !dontblock) {
    2d56:	2d00      	cmp	r5, #0
    2d58:	d1f8      	bne.n	2d4c <do_writemore+0xe0>
			tcp_output(conn->pcb.tcp);
    2d5a:	6860      	ldr	r0, [r4, #4]
    2d5c:	4b07      	ldr	r3, [pc, #28]	; (2d7c <do_writemore+0x110>)
    2d5e:	4798      	blx	r3
    2d60:	e7d9      	b.n	2d16 <do_writemore+0xaa>
		conn->current_msg->err = err;
    2d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d64:	711f      	strb	r7, [r3, #4]
		conn->current_msg      = NULL;
    2d66:	2300      	movs	r3, #0
    2d68:	6263      	str	r3, [r4, #36]	; 0x24
		conn->state            = NETCONN_NONE;
    2d6a:	7063      	strb	r3, [r4, #1]
			sys_sem_signal(&conn->op_completed);
    2d6c:	f104 000c 	add.w	r0, r4, #12
    2d70:	4b03      	ldr	r3, [pc, #12]	; (2d80 <do_writemore+0x114>)
    2d72:	4798      	blx	r3
    2d74:	e7d0      	b.n	2d18 <do_writemore+0xac>
    2d76:	bf00      	nop
    2d78:	00008595 	.word	0x00008595
    2d7c:	00008a51 	.word	0x00008a51
    2d80:	000024f1 	.word	0x000024f1

00002d84 <do_close_internal>:
{
    2d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d86:	4604      	mov	r4, r0
	shut    = conn->current_msg->msg.sd.shut;
    2d88:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2d8a:	7a1d      	ldrb	r5, [r3, #8]
	shut_rx = shut & NETCONN_SHUT_RD;
    2d8c:	f005 0701 	and.w	r7, r5, #1
	shut_tx = shut & NETCONN_SHUT_WR;
    2d90:	f005 0602 	and.w	r6, r5, #2
	if (close) {
    2d94:	2d03      	cmp	r5, #3
    2d96:	d02c      	beq.n	2df2 <do_close_internal+0x6e>
	if (conn->pcb.tcp->state == LISTEN) {
    2d98:	6860      	ldr	r0, [r4, #4]
    2d9a:	7e03      	ldrb	r3, [r0, #24]
    2d9c:	2b01      	cmp	r3, #1
    2d9e:	d02d      	beq.n	2dfc <do_close_internal+0x78>
		if (shut_rx) {
    2da0:	2f00      	cmp	r7, #0
    2da2:	d12f      	bne.n	2e04 <do_close_internal+0x80>
		if (shut_tx) {
    2da4:	2e00      	cmp	r6, #0
    2da6:	d135      	bne.n	2e14 <do_close_internal+0x90>
		if (close) {
    2da8:	2d03      	cmp	r5, #3
    2daa:	d038      	beq.n	2e1e <do_close_internal+0x9a>
	if (close) {
    2dac:	2d03      	cmp	r5, #3
    2dae:	d040      	beq.n	2e32 <do_close_internal+0xae>
		err = tcp_shutdown(conn->pcb.tcp, shut_rx, shut_tx);
    2db0:	4632      	mov	r2, r6
    2db2:	4639      	mov	r1, r7
    2db4:	6860      	ldr	r0, [r4, #4]
    2db6:	4b2e      	ldr	r3, [pc, #184]	; (2e70 <do_close_internal+0xec>)
    2db8:	4798      	blx	r3
	if (err == ERR_OK) {
    2dba:	2800      	cmp	r0, #0
    2dbc:	d146      	bne.n	2e4c <do_close_internal+0xc8>
		conn->current_msg->err = ERR_OK;
    2dbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2dc0:	2300      	movs	r3, #0
    2dc2:	7113      	strb	r3, [r2, #4]
		conn->current_msg      = NULL;
    2dc4:	6263      	str	r3, [r4, #36]	; 0x24
		conn->state            = NETCONN_NONE;
    2dc6:	7063      	strb	r3, [r4, #1]
		if (close) {
    2dc8:	2d03      	cmp	r5, #3
    2dca:	d036      	beq.n	2e3a <do_close_internal+0xb6>
		if (shut_rx) {
    2dcc:	b12f      	cbz	r7, 2dda <do_close_internal+0x56>
			API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
    2dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2dd0:	b11b      	cbz	r3, 2dda <do_close_internal+0x56>
    2dd2:	2200      	movs	r2, #0
    2dd4:	4611      	mov	r1, r2
    2dd6:	4620      	mov	r0, r4
    2dd8:	4798      	blx	r3
		if (shut_tx) {
    2dda:	b12e      	cbz	r6, 2de8 <do_close_internal+0x64>
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2ddc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2dde:	b11b      	cbz	r3, 2de8 <do_close_internal+0x64>
    2de0:	2200      	movs	r2, #0
    2de2:	2102      	movs	r1, #2
    2de4:	4620      	mov	r0, r4
    2de6:	4798      	blx	r3
		sys_sem_signal(&conn->op_completed);
    2de8:	f104 000c 	add.w	r0, r4, #12
    2dec:	4b21      	ldr	r3, [pc, #132]	; (2e74 <do_close_internal+0xf0>)
    2dee:	4798      	blx	r3
    2df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tcp_arg(conn->pcb.tcp, NULL);
    2df2:	2100      	movs	r1, #0
    2df4:	6840      	ldr	r0, [r0, #4]
    2df6:	4b20      	ldr	r3, [pc, #128]	; (2e78 <do_close_internal+0xf4>)
    2df8:	4798      	blx	r3
    2dfa:	e7cd      	b.n	2d98 <do_close_internal+0x14>
		tcp_accept(conn->pcb.tcp, NULL);
    2dfc:	2100      	movs	r1, #0
    2dfe:	4b1f      	ldr	r3, [pc, #124]	; (2e7c <do_close_internal+0xf8>)
    2e00:	4798      	blx	r3
    2e02:	e7d3      	b.n	2dac <do_close_internal+0x28>
			tcp_recv(conn->pcb.tcp, NULL);
    2e04:	2100      	movs	r1, #0
    2e06:	4b1e      	ldr	r3, [pc, #120]	; (2e80 <do_close_internal+0xfc>)
    2e08:	4798      	blx	r3
			tcp_accept(conn->pcb.tcp, NULL);
    2e0a:	2100      	movs	r1, #0
    2e0c:	6860      	ldr	r0, [r4, #4]
    2e0e:	4b1b      	ldr	r3, [pc, #108]	; (2e7c <do_close_internal+0xf8>)
    2e10:	4798      	blx	r3
    2e12:	e7c7      	b.n	2da4 <do_close_internal+0x20>
			tcp_sent(conn->pcb.tcp, NULL);
    2e14:	2100      	movs	r1, #0
    2e16:	6860      	ldr	r0, [r4, #4]
    2e18:	4b1a      	ldr	r3, [pc, #104]	; (2e84 <do_close_internal+0x100>)
    2e1a:	4798      	blx	r3
    2e1c:	e7c4      	b.n	2da8 <do_close_internal+0x24>
			tcp_poll(conn->pcb.tcp, NULL, 4);
    2e1e:	2204      	movs	r2, #4
    2e20:	2100      	movs	r1, #0
    2e22:	6860      	ldr	r0, [r4, #4]
    2e24:	4b18      	ldr	r3, [pc, #96]	; (2e88 <do_close_internal+0x104>)
    2e26:	4798      	blx	r3
			tcp_err(conn->pcb.tcp, NULL);
    2e28:	2100      	movs	r1, #0
    2e2a:	6860      	ldr	r0, [r4, #4]
    2e2c:	4b17      	ldr	r3, [pc, #92]	; (2e8c <do_close_internal+0x108>)
    2e2e:	4798      	blx	r3
    2e30:	e7bc      	b.n	2dac <do_close_internal+0x28>
		err = tcp_close(conn->pcb.tcp);
    2e32:	6860      	ldr	r0, [r4, #4]
    2e34:	4b16      	ldr	r3, [pc, #88]	; (2e90 <do_close_internal+0x10c>)
    2e36:	4798      	blx	r3
    2e38:	e7bf      	b.n	2dba <do_close_internal+0x36>
			conn->pcb.tcp = NULL;
    2e3a:	6063      	str	r3, [r4, #4]
			API_EVENT(conn, NETCONN_EVT_ERROR, 0);
    2e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d0c4      	beq.n	2dcc <do_close_internal+0x48>
    2e42:	2200      	movs	r2, #0
    2e44:	2104      	movs	r1, #4
    2e46:	4620      	mov	r0, r4
    2e48:	4798      	blx	r3
    2e4a:	e7bf      	b.n	2dcc <do_close_internal+0x48>
		tcp_sent(conn->pcb.tcp, sent_tcp);
    2e4c:	4911      	ldr	r1, [pc, #68]	; (2e94 <do_close_internal+0x110>)
    2e4e:	6860      	ldr	r0, [r4, #4]
    2e50:	4b0c      	ldr	r3, [pc, #48]	; (2e84 <do_close_internal+0x100>)
    2e52:	4798      	blx	r3
		tcp_poll(conn->pcb.tcp, poll_tcp, 4);
    2e54:	2204      	movs	r2, #4
    2e56:	4910      	ldr	r1, [pc, #64]	; (2e98 <do_close_internal+0x114>)
    2e58:	6860      	ldr	r0, [r4, #4]
    2e5a:	4b0b      	ldr	r3, [pc, #44]	; (2e88 <do_close_internal+0x104>)
    2e5c:	4798      	blx	r3
		tcp_err(conn->pcb.tcp, err_tcp);
    2e5e:	490f      	ldr	r1, [pc, #60]	; (2e9c <do_close_internal+0x118>)
    2e60:	6860      	ldr	r0, [r4, #4]
    2e62:	4b0a      	ldr	r3, [pc, #40]	; (2e8c <do_close_internal+0x108>)
    2e64:	4798      	blx	r3
		tcp_arg(conn->pcb.tcp, conn);
    2e66:	4621      	mov	r1, r4
    2e68:	6860      	ldr	r0, [r4, #4]
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <do_close_internal+0xf4>)
    2e6c:	4798      	blx	r3
    2e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e70:	00006c21 	.word	0x00006c21
    2e74:	000024f1 	.word	0x000024f1
    2e78:	00006531 	.word	0x00006531
    2e7c:	00006545 	.word	0x00006545
    2e80:	00006535 	.word	0x00006535
    2e84:	0000653b 	.word	0x0000653b
    2e88:	00006549 	.word	0x00006549
    2e8c:	0000653f 	.word	0x0000653f
    2e90:	00006ac5 	.word	0x00006ac5
    2e94:	00002ef9 	.word	0x00002ef9
    2e98:	00002ea1 	.word	0x00002ea1
    2e9c:	00002a81 	.word	0x00002a81

00002ea0 <poll_tcp>:
{
    2ea0:	b510      	push	{r4, lr}
    2ea2:	4604      	mov	r4, r0
	if (conn->state == NETCONN_WRITE) {
    2ea4:	7843      	ldrb	r3, [r0, #1]
    2ea6:	2b01      	cmp	r3, #1
    2ea8:	d01c      	beq.n	2ee4 <poll_tcp+0x44>
	} else if (conn->state == NETCONN_CLOSE) {
    2eaa:	2b04      	cmp	r3, #4
    2eac:	d01d      	beq.n	2eea <poll_tcp+0x4a>
	if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
    2eae:	7f23      	ldrb	r3, [r4, #28]
    2eb0:	f013 0f10 	tst.w	r3, #16
    2eb4:	d014      	beq.n	2ee0 <poll_tcp+0x40>
		if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)
    2eb6:	6862      	ldr	r2, [r4, #4]
    2eb8:	b192      	cbz	r2, 2ee0 <poll_tcp+0x40>
    2eba:	f8b2 0066 	ldrh.w	r0, [r2, #102]	; 0x66
    2ebe:	f640 3167 	movw	r1, #2919	; 0xb67
    2ec2:	4288      	cmp	r0, r1
    2ec4:	d90c      	bls.n	2ee0 <poll_tcp+0x40>
		    && (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
    2ec6:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
    2eca:	2a04      	cmp	r2, #4
    2ecc:	d808      	bhi.n	2ee0 <poll_tcp+0x40>
			conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
    2ece:	f023 0310 	bic.w	r3, r3, #16
    2ed2:	7723      	strb	r3, [r4, #28]
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
    2ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ed6:	b11b      	cbz	r3, 2ee0 <poll_tcp+0x40>
    2ed8:	2200      	movs	r2, #0
    2eda:	2102      	movs	r1, #2
    2edc:	4620      	mov	r0, r4
    2ede:	4798      	blx	r3
}
    2ee0:	2000      	movs	r0, #0
    2ee2:	bd10      	pop	{r4, pc}
		do_writemore(conn);
    2ee4:	4b02      	ldr	r3, [pc, #8]	; (2ef0 <poll_tcp+0x50>)
    2ee6:	4798      	blx	r3
    2ee8:	e7e1      	b.n	2eae <poll_tcp+0xe>
		do_close_internal(conn);
    2eea:	4b02      	ldr	r3, [pc, #8]	; (2ef4 <poll_tcp+0x54>)
    2eec:	4798      	blx	r3
    2eee:	e7de      	b.n	2eae <poll_tcp+0xe>
    2ef0:	00002c6d 	.word	0x00002c6d
    2ef4:	00002d85 	.word	0x00002d85

00002ef8 <sent_tcp>:
{
    2ef8:	b538      	push	{r3, r4, r5, lr}
    2efa:	4604      	mov	r4, r0
    2efc:	4615      	mov	r5, r2
	if (conn->state == NETCONN_WRITE) {
    2efe:	7843      	ldrb	r3, [r0, #1]
    2f00:	2b01      	cmp	r3, #1
    2f02:	d01a      	beq.n	2f3a <sent_tcp+0x42>
	} else if (conn->state == NETCONN_CLOSE) {
    2f04:	2b04      	cmp	r3, #4
    2f06:	d01b      	beq.n	2f40 <sent_tcp+0x48>
	if (conn) {
    2f08:	b1ac      	cbz	r4, 2f36 <sent_tcp+0x3e>
		if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT)
    2f0a:	6863      	ldr	r3, [r4, #4]
    2f0c:	b19b      	cbz	r3, 2f36 <sent_tcp+0x3e>
    2f0e:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
    2f12:	f640 3267 	movw	r2, #2919	; 0xb67
    2f16:	4291      	cmp	r1, r2
    2f18:	d90d      	bls.n	2f36 <sent_tcp+0x3e>
		    && (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
    2f1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
    2f1e:	2b04      	cmp	r3, #4
    2f20:	d809      	bhi.n	2f36 <sent_tcp+0x3e>
			conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
    2f22:	7f23      	ldrb	r3, [r4, #28]
    2f24:	f023 0310 	bic.w	r3, r3, #16
    2f28:	7723      	strb	r3, [r4, #28]
			API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
    2f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f2c:	b11b      	cbz	r3, 2f36 <sent_tcp+0x3e>
    2f2e:	462a      	mov	r2, r5
    2f30:	2102      	movs	r1, #2
    2f32:	4620      	mov	r0, r4
    2f34:	4798      	blx	r3
}
    2f36:	2000      	movs	r0, #0
    2f38:	bd38      	pop	{r3, r4, r5, pc}
		do_writemore(conn);
    2f3a:	4b03      	ldr	r3, [pc, #12]	; (2f48 <sent_tcp+0x50>)
    2f3c:	4798      	blx	r3
    2f3e:	e7e3      	b.n	2f08 <sent_tcp+0x10>
		do_close_internal(conn);
    2f40:	4b02      	ldr	r3, [pc, #8]	; (2f4c <sent_tcp+0x54>)
    2f42:	4798      	blx	r3
    2f44:	e7e0      	b.n	2f08 <sent_tcp+0x10>
    2f46:	bf00      	nop
    2f48:	00002c6d 	.word	0x00002c6d
    2f4c:	00002d85 	.word	0x00002d85

00002f50 <recv_tcp>:
{
    2f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn == NULL) {
    2f54:	b368      	cbz	r0, 2fb2 <recv_tcp+0x62>
    2f56:	4607      	mov	r7, r0
    2f58:	4698      	mov	r8, r3
    2f5a:	4614      	mov	r4, r2
    2f5c:	460d      	mov	r5, r1
	if (!sys_mbox_valid(&conn->recvmbox)) {
    2f5e:	f100 0610 	add.w	r6, r0, #16
    2f62:	4630      	mov	r0, r6
    2f64:	4b17      	ldr	r3, [pc, #92]	; (2fc4 <recv_tcp+0x74>)
    2f66:	4798      	blx	r3
    2f68:	b948      	cbnz	r0, 2f7e <recv_tcp+0x2e>
		if (p != NULL) {
    2f6a:	b32c      	cbz	r4, 2fb8 <recv_tcp+0x68>
			tcp_recved(pcb, p->tot_len);
    2f6c:	8921      	ldrh	r1, [r4, #8]
    2f6e:	4628      	mov	r0, r5
    2f70:	4b15      	ldr	r3, [pc, #84]	; (2fc8 <recv_tcp+0x78>)
    2f72:	4798      	blx	r3
			pbuf_free(p);
    2f74:	4620      	mov	r0, r4
    2f76:	4b15      	ldr	r3, [pc, #84]	; (2fcc <recv_tcp+0x7c>)
    2f78:	4798      	blx	r3
		return ERR_OK;
    2f7a:	2400      	movs	r4, #0
    2f7c:	e014      	b.n	2fa8 <recv_tcp+0x58>
	NETCONN_SET_SAFE_ERR(conn, err);
    2f7e:	f997 3008 	ldrsb.w	r3, [r7, #8]
    2f82:	f113 0f09 	cmn.w	r3, #9
    2f86:	db01      	blt.n	2f8c <recv_tcp+0x3c>
    2f88:	f887 8008 	strb.w	r8, [r7, #8]
	if (p != NULL) {
    2f8c:	b17c      	cbz	r4, 2fae <recv_tcp+0x5e>
		len = p->tot_len;
    2f8e:	8925      	ldrh	r5, [r4, #8]
	if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    2f90:	4621      	mov	r1, r4
    2f92:	4630      	mov	r0, r6
    2f94:	4b0e      	ldr	r3, [pc, #56]	; (2fd0 <recv_tcp+0x80>)
    2f96:	4798      	blx	r3
    2f98:	4604      	mov	r4, r0
    2f9a:	b978      	cbnz	r0, 2fbc <recv_tcp+0x6c>
		API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
    2f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f9e:	b11b      	cbz	r3, 2fa8 <recv_tcp+0x58>
    2fa0:	462a      	mov	r2, r5
    2fa2:	2100      	movs	r1, #0
    2fa4:	4638      	mov	r0, r7
    2fa6:	4798      	blx	r3
}
    2fa8:	4620      	mov	r0, r4
    2faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2fae:	2500      	movs	r5, #0
    2fb0:	e7ee      	b.n	2f90 <recv_tcp+0x40>
		return ERR_VAL;
    2fb2:	f06f 0405 	mvn.w	r4, #5
    2fb6:	e7f7      	b.n	2fa8 <recv_tcp+0x58>
		return ERR_OK;
    2fb8:	2400      	movs	r4, #0
    2fba:	e7f5      	b.n	2fa8 <recv_tcp+0x58>
		return ERR_MEM;
    2fbc:	f04f 34ff 	mov.w	r4, #4294967295
    2fc0:	e7f2      	b.n	2fa8 <recv_tcp+0x58>
    2fc2:	bf00      	nop
    2fc4:	000026e1 	.word	0x000026e1
    2fc8:	00006485 	.word	0x00006485
    2fcc:	00006009 	.word	0x00006009
    2fd0:	000025cd 	.word	0x000025cd

00002fd4 <do_newconn>:
{
    2fd4:	b510      	push	{r4, lr}
    2fd6:	4604      	mov	r4, r0
	msg->err = ERR_OK;
    2fd8:	2300      	movs	r3, #0
    2fda:	7103      	strb	r3, [r0, #4]
	if (msg->conn->pcb.tcp == NULL) {
    2fdc:	6803      	ldr	r3, [r0, #0]
    2fde:	685b      	ldr	r3, [r3, #4]
    2fe0:	b123      	cbz	r3, 2fec <do_newconn+0x18>
	TCPIP_APIMSG_ACK(msg);
    2fe2:	6820      	ldr	r0, [r4, #0]
    2fe4:	300c      	adds	r0, #12
    2fe6:	4b03      	ldr	r3, [pc, #12]	; (2ff4 <do_newconn+0x20>)
    2fe8:	4798      	blx	r3
    2fea:	bd10      	pop	{r4, pc}
		pcb_new(msg);
    2fec:	4b02      	ldr	r3, [pc, #8]	; (2ff8 <do_newconn+0x24>)
    2fee:	4798      	blx	r3
    2ff0:	e7f7      	b.n	2fe2 <do_newconn+0xe>
    2ff2:	bf00      	nop
    2ff4:	000024f1 	.word	0x000024f1
    2ff8:	00002bf9 	.word	0x00002bf9

00002ffc <netconn_alloc>:
{
    2ffc:	b570      	push	{r4, r5, r6, lr}
    2ffe:	4605      	mov	r5, r0
    3000:	460e      	mov	r6, r1
	conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
    3002:	2007      	movs	r0, #7
    3004:	4b15      	ldr	r3, [pc, #84]	; (305c <netconn_alloc+0x60>)
    3006:	4798      	blx	r3
	if (conn == NULL) {
    3008:	4604      	mov	r4, r0
    300a:	b1d8      	cbz	r0, 3044 <netconn_alloc+0x48>
	conn->last_err = ERR_OK;
    300c:	2100      	movs	r1, #0
    300e:	7201      	strb	r1, [r0, #8]
	conn->type     = t;
    3010:	7005      	strb	r5, [r0, #0]
	conn->pcb.tcp  = NULL;
    3012:	6041      	str	r1, [r0, #4]
	if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
    3014:	f100 050c 	add.w	r5, r0, #12
    3018:	4628      	mov	r0, r5
    301a:	4b11      	ldr	r3, [pc, #68]	; (3060 <netconn_alloc+0x64>)
    301c:	4798      	blx	r3
    301e:	b9b0      	cbnz	r0, 304e <netconn_alloc+0x52>
	if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
    3020:	2110      	movs	r1, #16
    3022:	1860      	adds	r0, r4, r1
    3024:	4b0f      	ldr	r3, [pc, #60]	; (3064 <netconn_alloc+0x68>)
    3026:	4798      	blx	r3
    3028:	b970      	cbnz	r0, 3048 <netconn_alloc+0x4c>
	sys_mbox_set_invalid(&conn->acceptmbox);
    302a:	f104 0014 	add.w	r0, r4, #20
    302e:	4b0e      	ldr	r3, [pc, #56]	; (3068 <netconn_alloc+0x6c>)
    3030:	4798      	blx	r3
	conn->state = NETCONN_NONE;
    3032:	2300      	movs	r3, #0
    3034:	7063      	strb	r3, [r4, #1]
	conn->socket = -1;
    3036:	f04f 32ff 	mov.w	r2, #4294967295
    303a:	61a2      	str	r2, [r4, #24]
	conn->callback = callback;
    303c:	62a6      	str	r6, [r4, #40]	; 0x28
	conn->current_msg  = NULL;
    303e:	6263      	str	r3, [r4, #36]	; 0x24
	conn->write_offset = 0;
    3040:	6223      	str	r3, [r4, #32]
	conn->flags = 0;
    3042:	7723      	strb	r3, [r4, #28]
}
    3044:	4620      	mov	r0, r4
    3046:	bd70      	pop	{r4, r5, r6, pc}
		sys_sem_free(&conn->op_completed);
    3048:	4628      	mov	r0, r5
    304a:	4b08      	ldr	r3, [pc, #32]	; (306c <netconn_alloc+0x70>)
    304c:	4798      	blx	r3
	memp_free(MEMP_NETCONN, conn);
    304e:	4621      	mov	r1, r4
    3050:	2007      	movs	r0, #7
    3052:	4b07      	ldr	r3, [pc, #28]	; (3070 <netconn_alloc+0x74>)
    3054:	4798      	blx	r3
	return NULL;
    3056:	2400      	movs	r4, #0
    3058:	e7f4      	b.n	3044 <netconn_alloc+0x48>
    305a:	bf00      	nop
    305c:	00005d09 	.word	0x00005d09
    3060:	00002479 	.word	0x00002479
    3064:	00002575 	.word	0x00002575
    3068:	000026e5 	.word	0x000026e5
    306c:	000024dd 	.word	0x000024dd
    3070:	00005d31 	.word	0x00005d31

00003074 <netconn_free>:
{
    3074:	b538      	push	{r3, r4, r5, lr}
    3076:	4604      	mov	r4, r0
	sys_sem_free(&conn->op_completed);
    3078:	f100 050c 	add.w	r5, r0, #12
    307c:	4628      	mov	r0, r5
    307e:	4b05      	ldr	r3, [pc, #20]	; (3094 <netconn_free+0x20>)
    3080:	4798      	blx	r3
	sys_sem_set_invalid(&conn->op_completed);
    3082:	4628      	mov	r0, r5
    3084:	4b04      	ldr	r3, [pc, #16]	; (3098 <netconn_free+0x24>)
    3086:	4798      	blx	r3
	memp_free(MEMP_NETCONN, conn);
    3088:	4621      	mov	r1, r4
    308a:	2007      	movs	r0, #7
    308c:	4b03      	ldr	r3, [pc, #12]	; (309c <netconn_free+0x28>)
    308e:	4798      	blx	r3
    3090:	bd38      	pop	{r3, r4, r5, pc}
    3092:	bf00      	nop
    3094:	000024dd 	.word	0x000024dd
    3098:	0000256d 	.word	0x0000256d
    309c:	00005d31 	.word	0x00005d31

000030a0 <netconn_drain>:
{
    30a0:	b570      	push	{r4, r5, r6, lr}
    30a2:	b082      	sub	sp, #8
    30a4:	4604      	mov	r4, r0
	if (sys_mbox_valid(&conn->recvmbox)) {
    30a6:	f100 0510 	add.w	r5, r0, #16
    30aa:	4628      	mov	r0, r5
    30ac:	4b23      	ldr	r3, [pc, #140]	; (313c <netconn_drain+0x9c>)
    30ae:	4798      	blx	r3
    30b0:	b980      	cbnz	r0, 30d4 <netconn_drain+0x34>
	if (sys_mbox_valid(&conn->acceptmbox)) {
    30b2:	f104 0514 	add.w	r5, r4, #20
    30b6:	4628      	mov	r0, r5
    30b8:	4b20      	ldr	r3, [pc, #128]	; (313c <netconn_drain+0x9c>)
    30ba:	4798      	blx	r3
    30bc:	bb10      	cbnz	r0, 3104 <netconn_drain+0x64>
    30be:	e03a      	b.n	3136 <netconn_drain+0x96>
				if (mem != NULL) {
    30c0:	9e01      	ldr	r6, [sp, #4]
    30c2:	b13e      	cbz	r6, 30d4 <netconn_drain+0x34>
					if (conn->pcb.tcp != NULL) {
    30c4:	6860      	ldr	r0, [r4, #4]
    30c6:	b110      	cbz	r0, 30ce <netconn_drain+0x2e>
						tcp_recved(conn->pcb.tcp, p->tot_len);
    30c8:	8931      	ldrh	r1, [r6, #8]
    30ca:	4b1d      	ldr	r3, [pc, #116]	; (3140 <netconn_drain+0xa0>)
    30cc:	4798      	blx	r3
					pbuf_free(p);
    30ce:	4630      	mov	r0, r6
    30d0:	4b1c      	ldr	r3, [pc, #112]	; (3144 <netconn_drain+0xa4>)
    30d2:	4798      	blx	r3
		while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
    30d4:	a901      	add	r1, sp, #4
    30d6:	4628      	mov	r0, r5
    30d8:	4b1b      	ldr	r3, [pc, #108]	; (3148 <netconn_drain+0xa8>)
    30da:	4798      	blx	r3
    30dc:	f1b0 3fff 	cmp.w	r0, #4294967295
    30e0:	d006      	beq.n	30f0 <netconn_drain+0x50>
			if (conn->type == NETCONN_TCP) {
    30e2:	7823      	ldrb	r3, [r4, #0]
    30e4:	2b10      	cmp	r3, #16
    30e6:	d0eb      	beq.n	30c0 <netconn_drain+0x20>
				netbuf_delete((struct netbuf *)mem);
    30e8:	9801      	ldr	r0, [sp, #4]
    30ea:	4b18      	ldr	r3, [pc, #96]	; (314c <netconn_drain+0xac>)
    30ec:	4798      	blx	r3
    30ee:	e7f1      	b.n	30d4 <netconn_drain+0x34>
		sys_mbox_free(&conn->recvmbox);
    30f0:	4628      	mov	r0, r5
    30f2:	4b17      	ldr	r3, [pc, #92]	; (3150 <netconn_drain+0xb0>)
    30f4:	4798      	blx	r3
		sys_mbox_set_invalid(&conn->recvmbox);
    30f6:	4628      	mov	r0, r5
    30f8:	4b16      	ldr	r3, [pc, #88]	; (3154 <netconn_drain+0xb4>)
    30fa:	4798      	blx	r3
    30fc:	e7d9      	b.n	30b2 <netconn_drain+0x12>
			netconn_free(newconn);
    30fe:	4620      	mov	r0, r4
    3100:	4b15      	ldr	r3, [pc, #84]	; (3158 <netconn_drain+0xb8>)
    3102:	4798      	blx	r3
		while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
    3104:	a901      	add	r1, sp, #4
    3106:	4628      	mov	r0, r5
    3108:	4b0f      	ldr	r3, [pc, #60]	; (3148 <netconn_drain+0xa8>)
    310a:	4798      	blx	r3
    310c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3110:	d00b      	beq.n	312a <netconn_drain+0x8a>
			struct netconn *newconn = (struct netconn *)mem;
    3112:	9c01      	ldr	r4, [sp, #4]
			netconn_drain(newconn);
    3114:	4620      	mov	r0, r4
    3116:	f7ff ffc3 	bl	30a0 <netconn_drain>
			if (newconn->pcb.tcp != NULL) {
    311a:	6860      	ldr	r0, [r4, #4]
    311c:	2800      	cmp	r0, #0
    311e:	d0ee      	beq.n	30fe <netconn_drain+0x5e>
				tcp_abort(newconn->pcb.tcp);
    3120:	4b0e      	ldr	r3, [pc, #56]	; (315c <netconn_drain+0xbc>)
    3122:	4798      	blx	r3
				newconn->pcb.tcp = NULL;
    3124:	2300      	movs	r3, #0
    3126:	6063      	str	r3, [r4, #4]
    3128:	e7e9      	b.n	30fe <netconn_drain+0x5e>
		sys_mbox_free(&conn->acceptmbox);
    312a:	4628      	mov	r0, r5
    312c:	4b08      	ldr	r3, [pc, #32]	; (3150 <netconn_drain+0xb0>)
    312e:	4798      	blx	r3
		sys_mbox_set_invalid(&conn->acceptmbox);
    3130:	4628      	mov	r0, r5
    3132:	4b08      	ldr	r3, [pc, #32]	; (3154 <netconn_drain+0xb4>)
    3134:	4798      	blx	r3
}
    3136:	b002      	add	sp, #8
    3138:	bd70      	pop	{r4, r5, r6, pc}
    313a:	bf00      	nop
    313c:	000026e1 	.word	0x000026e1
    3140:	00006485 	.word	0x00006485
    3144:	00006009 	.word	0x00006009
    3148:	000026b1 	.word	0x000026b1
    314c:	000033cd 	.word	0x000033cd
    3150:	00002595 	.word	0x00002595
    3154:	000026e5 	.word	0x000026e5
    3158:	00003075 	.word	0x00003075
    315c:	00006d25 	.word	0x00006d25

00003160 <do_delconn>:
{
    3160:	b510      	push	{r4, lr}
    3162:	4604      	mov	r4, r0
	if ((msg->conn->state != NETCONN_NONE) && (msg->conn->state != NETCONN_LISTEN)
    3164:	6800      	ldr	r0, [r0, #0]
    3166:	7843      	ldrb	r3, [r0, #1]
    3168:	b163      	cbz	r3, 3184 <do_delconn+0x24>
    316a:	2b02      	cmp	r3, #2
    316c:	d00a      	beq.n	3184 <do_delconn+0x24>
	    && (msg->conn->state != NETCONN_CONNECT)) {
    316e:	2b03      	cmp	r3, #3
    3170:	d008      	beq.n	3184 <do_delconn+0x24>
		msg->err = ERR_INPROGRESS;
    3172:	23fb      	movs	r3, #251	; 0xfb
    3174:	7123      	strb	r3, [r4, #4]
	if (sys_sem_valid(&msg->conn->op_completed)) {
    3176:	6820      	ldr	r0, [r4, #0]
    3178:	300c      	adds	r0, #12
    317a:	4b1b      	ldr	r3, [pc, #108]	; (31e8 <do_delconn+0x88>)
    317c:	4798      	blx	r3
    317e:	2800      	cmp	r0, #0
    3180:	d12d      	bne.n	31de <do_delconn+0x7e>
    3182:	bd10      	pop	{r4, pc}
		netconn_drain(msg->conn);
    3184:	4b19      	ldr	r3, [pc, #100]	; (31ec <do_delconn+0x8c>)
    3186:	4798      	blx	r3
		if (msg->conn->pcb.tcp != NULL) {
    3188:	6822      	ldr	r2, [r4, #0]
    318a:	6851      	ldr	r1, [r2, #4]
    318c:	b179      	cbz	r1, 31ae <do_delconn+0x4e>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    318e:	7813      	ldrb	r3, [r2, #0]
    3190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3194:	2b10      	cmp	r3, #16
    3196:	d018      	beq.n	31ca <do_delconn+0x6a>
    3198:	2b20      	cmp	r3, #32
    319a:	d105      	bne.n	31a8 <do_delconn+0x48>
				msg->conn->pcb.udp->recv_arg = NULL;
    319c:	2300      	movs	r3, #0
    319e:	61cb      	str	r3, [r1, #28]
				udp_remove(msg->conn->pcb.udp);
    31a0:	6823      	ldr	r3, [r4, #0]
    31a2:	6858      	ldr	r0, [r3, #4]
    31a4:	4b12      	ldr	r3, [pc, #72]	; (31f0 <do_delconn+0x90>)
    31a6:	4798      	blx	r3
			msg->conn->pcb.tcp = NULL;
    31a8:	6823      	ldr	r3, [r4, #0]
    31aa:	2200      	movs	r2, #0
    31ac:	605a      	str	r2, [r3, #4]
		API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
    31ae:	6820      	ldr	r0, [r4, #0]
    31b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    31b2:	b113      	cbz	r3, 31ba <do_delconn+0x5a>
    31b4:	2200      	movs	r2, #0
    31b6:	4611      	mov	r1, r2
    31b8:	4798      	blx	r3
		API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
    31ba:	6820      	ldr	r0, [r4, #0]
    31bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    31be:	2b00      	cmp	r3, #0
    31c0:	d0d9      	beq.n	3176 <do_delconn+0x16>
    31c2:	2200      	movs	r2, #0
    31c4:	2102      	movs	r1, #2
    31c6:	4798      	blx	r3
    31c8:	e7d5      	b.n	3176 <do_delconn+0x16>
				msg->conn->state       = NETCONN_CLOSE;
    31ca:	2304      	movs	r3, #4
    31cc:	7053      	strb	r3, [r2, #1]
				msg->msg.sd.shut       = NETCONN_SHUT_RDWR;
    31ce:	2303      	movs	r3, #3
    31d0:	7223      	strb	r3, [r4, #8]
				msg->conn->current_msg = msg;
    31d2:	6823      	ldr	r3, [r4, #0]
    31d4:	625c      	str	r4, [r3, #36]	; 0x24
				do_close_internal(msg->conn);
    31d6:	6820      	ldr	r0, [r4, #0]
    31d8:	4b06      	ldr	r3, [pc, #24]	; (31f4 <do_delconn+0x94>)
    31da:	4798      	blx	r3
				return;
    31dc:	bd10      	pop	{r4, pc}
		sys_sem_signal(&msg->conn->op_completed);
    31de:	6820      	ldr	r0, [r4, #0]
    31e0:	300c      	adds	r0, #12
    31e2:	4b05      	ldr	r3, [pc, #20]	; (31f8 <do_delconn+0x98>)
    31e4:	4798      	blx	r3
    31e6:	e7cc      	b.n	3182 <do_delconn+0x22>
    31e8:	00002569 	.word	0x00002569
    31ec:	000030a1 	.word	0x000030a1
    31f0:	0000959d 	.word	0x0000959d
    31f4:	00002d85 	.word	0x00002d85
    31f8:	000024f1 	.word	0x000024f1

000031fc <do_bind>:
{
    31fc:	b510      	push	{r4, lr}
    31fe:	4604      	mov	r4, r0
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    3200:	6803      	ldr	r3, [r0, #0]
    3202:	f993 2008 	ldrsb.w	r2, [r3, #8]
    3206:	f112 0f09 	cmn.w	r2, #9
    320a:	db10      	blt.n	322e <do_bind+0x32>
		msg->err = ERR_VAL;
    320c:	22fa      	movs	r2, #250	; 0xfa
    320e:	7102      	strb	r2, [r0, #4]
		if (msg->conn->pcb.tcp != NULL) {
    3210:	6858      	ldr	r0, [r3, #4]
    3212:	b168      	cbz	r0, 3230 <do_bind+0x34>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    3214:	781b      	ldrb	r3, [r3, #0]
    3216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    321a:	2b10      	cmp	r3, #16
    321c:	d00d      	beq.n	323a <do_bind+0x3e>
    321e:	2b20      	cmp	r3, #32
    3220:	d106      	bne.n	3230 <do_bind+0x34>
				msg->err = udp_bind(msg->conn->pcb.udp, msg->msg.bc.ipaddr, msg->msg.bc.port);
    3222:	89a2      	ldrh	r2, [r4, #12]
    3224:	68a1      	ldr	r1, [r4, #8]
    3226:	4b08      	ldr	r3, [pc, #32]	; (3248 <do_bind+0x4c>)
    3228:	4798      	blx	r3
    322a:	7120      	strb	r0, [r4, #4]
				break;
    322c:	e000      	b.n	3230 <do_bind+0x34>
		msg->err = msg->conn->last_err;
    322e:	7102      	strb	r2, [r0, #4]
	TCPIP_APIMSG_ACK(msg);
    3230:	6820      	ldr	r0, [r4, #0]
    3232:	300c      	adds	r0, #12
    3234:	4b05      	ldr	r3, [pc, #20]	; (324c <do_bind+0x50>)
    3236:	4798      	blx	r3
    3238:	bd10      	pop	{r4, pc}
				msg->err = tcp_bind(msg->conn->pcb.tcp, msg->msg.bc.ipaddr, msg->msg.bc.port);
    323a:	89a2      	ldrh	r2, [r4, #12]
    323c:	68a1      	ldr	r1, [r4, #8]
    323e:	4b04      	ldr	r3, [pc, #16]	; (3250 <do_bind+0x54>)
    3240:	4798      	blx	r3
    3242:	7120      	strb	r0, [r4, #4]
				break;
    3244:	e7f4      	b.n	3230 <do_bind+0x34>
    3246:	bf00      	nop
    3248:	000093bd 	.word	0x000093bd
    324c:	000024f1 	.word	0x000024f1
    3250:	000063b5 	.word	0x000063b5

00003254 <do_send>:
{
    3254:	b538      	push	{r3, r4, r5, lr}
    3256:	4604      	mov	r4, r0
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    3258:	6803      	ldr	r3, [r0, #0]
    325a:	f993 2008 	ldrsb.w	r2, [r3, #8]
    325e:	f112 0f09 	cmn.w	r2, #9
    3262:	db13      	blt.n	328c <do_send+0x38>
		msg->err = ERR_CONN;
    3264:	22f3      	movs	r2, #243	; 0xf3
    3266:	7102      	strb	r2, [r0, #4]
		if (msg->conn->pcb.tcp != NULL) {
    3268:	6858      	ldr	r0, [r3, #4]
    326a:	b180      	cbz	r0, 328e <do_send+0x3a>
			switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    326c:	781b      	ldrb	r3, [r3, #0]
    326e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3272:	2b20      	cmp	r3, #32
    3274:	d10b      	bne.n	328e <do_send+0x3a>
				if (ip_addr_isany(&msg->msg.b->addr)) {
    3276:	68a1      	ldr	r1, [r4, #8]
    3278:	f111 0208 	adds.w	r2, r1, #8
    327c:	d001      	beq.n	3282 <do_send+0x2e>
    327e:	688b      	ldr	r3, [r1, #8]
    3280:	b953      	cbnz	r3, 3298 <do_send+0x44>
					msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
    3282:	6809      	ldr	r1, [r1, #0]
    3284:	4b07      	ldr	r3, [pc, #28]	; (32a4 <do_send+0x50>)
    3286:	4798      	blx	r3
    3288:	7120      	strb	r0, [r4, #4]
    328a:	e000      	b.n	328e <do_send+0x3a>
		msg->err = msg->conn->last_err;
    328c:	7102      	strb	r2, [r0, #4]
	TCPIP_APIMSG_ACK(msg);
    328e:	6820      	ldr	r0, [r4, #0]
    3290:	300c      	adds	r0, #12
    3292:	4b05      	ldr	r3, [pc, #20]	; (32a8 <do_send+0x54>)
    3294:	4798      	blx	r3
    3296:	bd38      	pop	{r3, r4, r5, pc}
					msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
    3298:	898b      	ldrh	r3, [r1, #12]
    329a:	6809      	ldr	r1, [r1, #0]
    329c:	4d03      	ldr	r5, [pc, #12]	; (32ac <do_send+0x58>)
    329e:	47a8      	blx	r5
    32a0:	7120      	strb	r0, [r4, #4]
    32a2:	e7f4      	b.n	328e <do_send+0x3a>
    32a4:	00009581 	.word	0x00009581
    32a8:	000024f1 	.word	0x000024f1
    32ac:	0000954d 	.word	0x0000954d

000032b0 <do_recv>:
{
    32b0:	b570      	push	{r4, r5, r6, lr}
    32b2:	4606      	mov	r6, r0
	msg->err = ERR_OK;
    32b4:	2300      	movs	r3, #0
    32b6:	7103      	strb	r3, [r0, #4]
	if (msg->conn->pcb.tcp != NULL) {
    32b8:	6803      	ldr	r3, [r0, #0]
    32ba:	685a      	ldr	r2, [r3, #4]
    32bc:	b112      	cbz	r2, 32c4 <do_recv+0x14>
		if (msg->conn->type == NETCONN_TCP) {
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	2b10      	cmp	r3, #16
    32c2:	d004      	beq.n	32ce <do_recv+0x1e>
	TCPIP_APIMSG_ACK(msg);
    32c4:	6830      	ldr	r0, [r6, #0]
    32c6:	300c      	adds	r0, #12
    32c8:	4b09      	ldr	r3, [pc, #36]	; (32f0 <do_recv+0x40>)
    32ca:	4798      	blx	r3
    32cc:	bd70      	pop	{r4, r5, r6, pc}
				u32_t remaining = msg->msg.r.len;
    32ce:	6884      	ldr	r4, [r0, #8]
    32d0:	e008      	b.n	32e4 <do_recv+0x34>
					u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
    32d2:	f64f 75ff 	movw	r5, #65535	; 0xffff
					tcp_recved(msg->conn->pcb.tcp, recved);
    32d6:	6833      	ldr	r3, [r6, #0]
    32d8:	4629      	mov	r1, r5
    32da:	6858      	ldr	r0, [r3, #4]
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <do_recv+0x44>)
    32de:	4798      	blx	r3
				} while (remaining != 0);
    32e0:	1b64      	subs	r4, r4, r5
    32e2:	d0ef      	beq.n	32c4 <do_recv+0x14>
					u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
    32e4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    32e8:	d2f3      	bcs.n	32d2 <do_recv+0x22>
    32ea:	b2a5      	uxth	r5, r4
    32ec:	e7f3      	b.n	32d6 <do_recv+0x26>
    32ee:	bf00      	nop
    32f0:	000024f1 	.word	0x000024f1
    32f4:	00006485 	.word	0x00006485

000032f8 <do_write>:
 * Called from netconn_write
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void do_write(struct api_msg_msg *msg)
{
    32f8:	b508      	push	{r3, lr}
	if (ERR_IS_FATAL(msg->conn->last_err)) {
    32fa:	6803      	ldr	r3, [r0, #0]
    32fc:	f993 2008 	ldrsb.w	r2, [r3, #8]
    3300:	f112 0f09 	cmn.w	r2, #9
    3304:	da05      	bge.n	3312 <do_write+0x1a>
		msg->err = msg->conn->last_err;
    3306:	7102      	strb	r2, [r0, #4]
		} else {
			msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
		}
	}
	TCPIP_APIMSG_ACK(msg);
    3308:	f103 000c 	add.w	r0, r3, #12
    330c:	4b0e      	ldr	r3, [pc, #56]	; (3348 <do_write+0x50>)
    330e:	4798      	blx	r3
    3310:	bd08      	pop	{r3, pc}
		if (msg->conn->type == NETCONN_TCP) {
    3312:	781a      	ldrb	r2, [r3, #0]
    3314:	2a10      	cmp	r2, #16
    3316:	d002      	beq.n	331e <do_write+0x26>
			msg->err = ERR_VAL;
    3318:	22fa      	movs	r2, #250	; 0xfa
    331a:	7102      	strb	r2, [r0, #4]
    331c:	e7f4      	b.n	3308 <do_write+0x10>
			if (msg->conn->state != NETCONN_NONE) {
    331e:	785a      	ldrb	r2, [r3, #1]
    3320:	b112      	cbz	r2, 3328 <do_write+0x30>
				msg->err = ERR_INPROGRESS;
    3322:	22fb      	movs	r2, #251	; 0xfb
    3324:	7102      	strb	r2, [r0, #4]
    3326:	e7ef      	b.n	3308 <do_write+0x10>
			} else if (msg->conn->pcb.tcp != NULL) {
    3328:	685a      	ldr	r2, [r3, #4]
    332a:	b152      	cbz	r2, 3342 <do_write+0x4a>
				msg->conn->state = NETCONN_WRITE;
    332c:	2201      	movs	r2, #1
    332e:	705a      	strb	r2, [r3, #1]
				msg->conn->current_msg  = msg;
    3330:	6803      	ldr	r3, [r0, #0]
    3332:	6258      	str	r0, [r3, #36]	; 0x24
				msg->conn->write_offset = 0;
    3334:	6803      	ldr	r3, [r0, #0]
    3336:	2200      	movs	r2, #0
    3338:	621a      	str	r2, [r3, #32]
				do_writemore(msg->conn);
    333a:	6800      	ldr	r0, [r0, #0]
    333c:	4b03      	ldr	r3, [pc, #12]	; (334c <do_write+0x54>)
    333e:	4798      	blx	r3
				return;
    3340:	bd08      	pop	{r3, pc}
				msg->err = ERR_CONN;
    3342:	22f3      	movs	r2, #243	; 0xf3
    3344:	7102      	strb	r2, [r0, #4]
    3346:	e7df      	b.n	3308 <do_write+0x10>
    3348:	000024f1 	.word	0x000024f1
    334c:	00002c6d 	.word	0x00002c6d

00003350 <do_getaddr>:
 * Called from netconn_getaddr
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void do_getaddr(struct api_msg_msg *msg)
{
    3350:	b508      	push	{r3, lr}
	if (msg->conn->pcb.ip != NULL) {
    3352:	6803      	ldr	r3, [r0, #0]
    3354:	685b      	ldr	r3, [r3, #4]
    3356:	2b00      	cmp	r3, #0
    3358:	d032      	beq.n	33c0 <do_getaddr+0x70>
		*(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip : msg->conn->pcb.ip->remote_ip);
    335a:	6882      	ldr	r2, [r0, #8]
    335c:	7c01      	ldrb	r1, [r0, #16]
    335e:	b1a9      	cbz	r1, 338c <do_getaddr+0x3c>
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	6013      	str	r3, [r2, #0]

		msg->err = ERR_OK;
    3364:	2300      	movs	r3, #0
    3366:	7103      	strb	r3, [r0, #4]
		switch (NETCONNTYPE_GROUP(msg->conn->type)) {
    3368:	6802      	ldr	r2, [r0, #0]
    336a:	7813      	ldrb	r3, [r2, #0]
    336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3370:	2b10      	cmp	r3, #16
    3372:	d017      	beq.n	33a4 <do_getaddr+0x54>
    3374:	2b20      	cmp	r3, #32
    3376:	d11b      	bne.n	33b0 <do_getaddr+0x60>
			}
			break;
#endif /* LWIP_RAW */
#if LWIP_UDP
		case NETCONN_UDP:
			if (msg->msg.ad.local) {
    3378:	7c03      	ldrb	r3, [r0, #16]
    337a:	b953      	cbnz	r3, 3392 <do_getaddr+0x42>
				*(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
			} else {
				if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
    337c:	6853      	ldr	r3, [r2, #4]
    337e:	7c1a      	ldrb	r2, [r3, #16]
    3380:	f012 0f04 	tst.w	r2, #4
    3384:	d10a      	bne.n	339c <do_getaddr+0x4c>
					msg->err = ERR_CONN;
    3386:	23f3      	movs	r3, #243	; 0xf3
    3388:	7103      	strb	r3, [r0, #4]
    338a:	e011      	b.n	33b0 <do_getaddr+0x60>
		*(msg->msg.ad.ipaddr) = (msg->msg.ad.local ? msg->conn->pcb.ip->local_ip : msg->conn->pcb.ip->remote_ip);
    338c:	685b      	ldr	r3, [r3, #4]
    338e:	6013      	str	r3, [r2, #0]
    3390:	e7e8      	b.n	3364 <do_getaddr+0x14>
				*(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
    3392:	68c3      	ldr	r3, [r0, #12]
    3394:	6852      	ldr	r2, [r2, #4]
    3396:	8a52      	ldrh	r2, [r2, #18]
    3398:	801a      	strh	r2, [r3, #0]
    339a:	e009      	b.n	33b0 <do_getaddr+0x60>
				} else {
					*(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
    339c:	68c2      	ldr	r2, [r0, #12]
    339e:	8a9b      	ldrh	r3, [r3, #20]
    33a0:	8013      	strh	r3, [r2, #0]
    33a2:	e005      	b.n	33b0 <do_getaddr+0x60>
			}
			break;
#endif /* LWIP_UDP */
#if LWIP_TCP
		case NETCONN_TCP:
			*(msg->msg.ad.port)
    33a4:	68c3      	ldr	r3, [r0, #12]
			    = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
    33a6:	7c01      	ldrb	r1, [r0, #16]
    33a8:	b139      	cbz	r1, 33ba <do_getaddr+0x6a>
    33aa:	6852      	ldr	r2, [r2, #4]
    33ac:	8b52      	ldrh	r2, [r2, #26]
    33ae:	801a      	strh	r2, [r3, #0]
			break;
		}
	} else {
		msg->err = ERR_CONN;
	}
	TCPIP_APIMSG_ACK(msg);
    33b0:	6800      	ldr	r0, [r0, #0]
    33b2:	300c      	adds	r0, #12
    33b4:	4b04      	ldr	r3, [pc, #16]	; (33c8 <do_getaddr+0x78>)
    33b6:	4798      	blx	r3
    33b8:	bd08      	pop	{r3, pc}
			    = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
    33ba:	6852      	ldr	r2, [r2, #4]
    33bc:	8b92      	ldrh	r2, [r2, #28]
    33be:	e7f6      	b.n	33ae <do_getaddr+0x5e>
		msg->err = ERR_CONN;
    33c0:	23f3      	movs	r3, #243	; 0xf3
    33c2:	7103      	strb	r3, [r0, #4]
    33c4:	e7f4      	b.n	33b0 <do_getaddr+0x60>
    33c6:	bf00      	nop
    33c8:	000024f1 	.word	0x000024f1

000033cc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void netbuf_delete(struct netbuf *buf)
{
	if (buf != NULL) {
    33cc:	b168      	cbz	r0, 33ea <netbuf_delete+0x1e>
{
    33ce:	b510      	push	{r4, lr}
    33d0:	4604      	mov	r4, r0
		if (buf->p != NULL) {
    33d2:	6800      	ldr	r0, [r0, #0]
    33d4:	b120      	cbz	r0, 33e0 <netbuf_delete+0x14>
			pbuf_free(buf->p);
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <netbuf_delete+0x20>)
    33d8:	4798      	blx	r3
			buf->p = buf->ptr = NULL;
    33da:	2300      	movs	r3, #0
    33dc:	6063      	str	r3, [r4, #4]
    33de:	6023      	str	r3, [r4, #0]
		}
		memp_free(MEMP_NETBUF, buf);
    33e0:	4621      	mov	r1, r4
    33e2:	2006      	movs	r0, #6
    33e4:	4b02      	ldr	r3, [pc, #8]	; (33f0 <netbuf_delete+0x24>)
    33e6:	4798      	blx	r3
    33e8:	bd10      	pop	{r4, pc}
    33ea:	4770      	bx	lr
    33ec:	00006009 	.word	0x00006009
    33f0:	00005d31 	.word	0x00005d31

000033f4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void netbuf_free(struct netbuf *buf)
{
	LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
    33f4:	b148      	cbz	r0, 340a <netbuf_free+0x16>
{
    33f6:	b510      	push	{r4, lr}
    33f8:	4604      	mov	r4, r0
	if (buf->p != NULL) {
    33fa:	6800      	ldr	r0, [r0, #0]
    33fc:	b108      	cbz	r0, 3402 <netbuf_free+0xe>
		pbuf_free(buf->p);
    33fe:	4b03      	ldr	r3, [pc, #12]	; (340c <netbuf_free+0x18>)
    3400:	4798      	blx	r3
	}
	buf->p = buf->ptr = NULL;
    3402:	2300      	movs	r3, #0
    3404:	6063      	str	r3, [r4, #4]
    3406:	6023      	str	r3, [r4, #0]
    3408:	bd10      	pop	{r4, pc}
    340a:	e7fe      	b.n	340a <netbuf_free+0x16>
    340c:	00006009 	.word	0x00006009

00003410 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
	LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
    3410:	b1b0      	cbz	r0, 3440 <netbuf_ref+0x30>
{
    3412:	b570      	push	{r4, r5, r6, lr}
    3414:	4604      	mov	r4, r0
    3416:	4615      	mov	r5, r2
    3418:	460e      	mov	r6, r1
	if (buf->p != NULL) {
    341a:	6800      	ldr	r0, [r0, #0]
    341c:	b108      	cbz	r0, 3422 <netbuf_ref+0x12>
		pbuf_free(buf->p);
    341e:	4b0b      	ldr	r3, [pc, #44]	; (344c <netbuf_ref+0x3c>)
    3420:	4798      	blx	r3
	}
	buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
    3422:	2202      	movs	r2, #2
    3424:	2100      	movs	r1, #0
    3426:	4608      	mov	r0, r1
    3428:	4b09      	ldr	r3, [pc, #36]	; (3450 <netbuf_ref+0x40>)
    342a:	4798      	blx	r3
    342c:	6020      	str	r0, [r4, #0]
	if (buf->p == NULL) {
    342e:	b140      	cbz	r0, 3442 <netbuf_ref+0x32>
		buf->ptr = NULL;
		return ERR_MEM;
	}
	buf->p->payload = (void *)dataptr;
    3430:	6046      	str	r6, [r0, #4]
	buf->p->len = buf->p->tot_len = size;
    3432:	6823      	ldr	r3, [r4, #0]
    3434:	811d      	strh	r5, [r3, #8]
    3436:	815d      	strh	r5, [r3, #10]
	buf->ptr                      = buf->p;
    3438:	6823      	ldr	r3, [r4, #0]
    343a:	6063      	str	r3, [r4, #4]
	return ERR_OK;
    343c:	2000      	movs	r0, #0
}
    343e:	bd70      	pop	{r4, r5, r6, pc}
    3440:	e7fe      	b.n	3440 <netbuf_ref+0x30>
		buf->ptr = NULL;
    3442:	2300      	movs	r3, #0
    3444:	6063      	str	r3, [r4, #4]
		return ERR_MEM;
    3446:	f04f 30ff 	mov.w	r0, #4294967295
    344a:	bd70      	pop	{r4, r5, r6, pc}
    344c:	00006009 	.word	0x00006009
    3450:	0000606d 	.word	0x0000606d

00003454 <get_socket>:
 */
static struct lwip_sock *get_socket(int s)
{
	struct lwip_sock *sock;

	if ((s < 0) || (s >= NUM_SOCKETS)) {
    3454:	2803      	cmp	r0, #3
    3456:	d80e      	bhi.n	3476 <get_socket+0x22>
{
    3458:	b410      	push	{r4}
		LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
		set_errno(EBADF);
		return NULL;
	}

	sock = &sockets[s];
    345a:	4c08      	ldr	r4, [pc, #32]	; (347c <get_socket+0x28>)
    345c:	0043      	lsls	r3, r0, #1
    345e:	1819      	adds	r1, r3, r0
    3460:	00ca      	lsls	r2, r1, #3
    3462:	4611      	mov	r1, r2
    3464:	4422      	add	r2, r4

	if (!sock->conn) {
    3466:	5863      	ldr	r3, [r4, r1]
    3468:	b11b      	cbz	r3, 3472 <get_socket+0x1e>
		set_errno(EBADF);
		return NULL;
	}

	return sock;
}
    346a:	4610      	mov	r0, r2
    346c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3470:	4770      	bx	lr
		return NULL;
    3472:	2200      	movs	r2, #0
    3474:	e7f9      	b.n	346a <get_socket+0x16>
		return NULL;
    3476:	2200      	movs	r2, #0
}
    3478:	4610      	mov	r0, r2
    347a:	4770      	bx	lr
    347c:	20001578 	.word	0x20001578

00003480 <alloc_socket>:
{
	int i;
	SYS_ARCH_DECL_PROTECT(lev);

	/* allocate a new socket identifier */
	for (i = 0; i < NUM_SOCKETS; ++i) {
    3480:	2300      	movs	r3, #0
    3482:	2b03      	cmp	r3, #3
    3484:	dc2b      	bgt.n	34de <alloc_socket+0x5e>
{
    3486:	b430      	push	{r4, r5}
		/* Protect socket array */
		SYS_ARCH_PROTECT(lev);
		if (!sockets[i].conn) {
    3488:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    348c:	00e2      	lsls	r2, r4, #3
    348e:	4c16      	ldr	r4, [pc, #88]	; (34e8 <alloc_socket+0x68>)
    3490:	58a2      	ldr	r2, [r4, r2]
    3492:	b13a      	cbz	r2, 34a4 <alloc_socket+0x24>
	for (i = 0; i < NUM_SOCKETS; ++i) {
    3494:	3301      	adds	r3, #1
    3496:	2b03      	cmp	r3, #3
    3498:	ddf6      	ble.n	3488 <alloc_socket+0x8>
			sockets[i].select_waiting = 0;
			return i;
		}
		SYS_ARCH_UNPROTECT(lev);
	}
	return -1;
    349a:	f04f 33ff 	mov.w	r3, #4294967295
}
    349e:	4618      	mov	r0, r3
    34a0:	bc30      	pop	{r4, r5}
    34a2:	4770      	bx	lr
			sockets[i].conn = newconn;
    34a4:	4625      	mov	r5, r4
    34a6:	005a      	lsls	r2, r3, #1
    34a8:	441a      	add	r2, r3
    34aa:	00d4      	lsls	r4, r2, #3
    34ac:	192a      	adds	r2, r5, r4
    34ae:	5128      	str	r0, [r5, r4]
			sockets[i].lastdata   = NULL;
    34b0:	2400      	movs	r4, #0
    34b2:	6054      	str	r4, [r2, #4]
			sockets[i].lastoffset = 0;
    34b4:	8114      	strh	r4, [r2, #8]
			sockets[i].rcvevent   = 0;
    34b6:	8154      	strh	r4, [r2, #10]
			sockets[i].sendevent      = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
    34b8:	7802      	ldrb	r2, [r0, #0]
    34ba:	2a10      	cmp	r2, #16
    34bc:	d00b      	beq.n	34d6 <alloc_socket+0x56>
    34be:	2101      	movs	r1, #1
    34c0:	0058      	lsls	r0, r3, #1
    34c2:	4418      	add	r0, r3
    34c4:	00c4      	lsls	r4, r0, #3
    34c6:	4a08      	ldr	r2, [pc, #32]	; (34e8 <alloc_socket+0x68>)
    34c8:	4422      	add	r2, r4
    34ca:	8191      	strh	r1, [r2, #12]
			sockets[i].errevent       = 0;
    34cc:	2100      	movs	r1, #0
    34ce:	81d1      	strh	r1, [r2, #14]
			sockets[i].err            = 0;
    34d0:	6111      	str	r1, [r2, #16]
			sockets[i].select_waiting = 0;
    34d2:	6151      	str	r1, [r2, #20]
			return i;
    34d4:	e7e3      	b.n	349e <alloc_socket+0x1e>
			sockets[i].sendevent      = (newconn->type == NETCONN_TCP ? (accepted != 0) : 1);
    34d6:	2900      	cmp	r1, #0
    34d8:	d0f2      	beq.n	34c0 <alloc_socket+0x40>
    34da:	2101      	movs	r1, #1
    34dc:	e7f0      	b.n	34c0 <alloc_socket+0x40>
	return -1;
    34de:	f04f 33ff 	mov.w	r3, #4294967295
}
    34e2:	4618      	mov	r0, r3
    34e4:	4770      	bx	lr
    34e6:	bf00      	nop
    34e8:	20001578 	.word	0x20001578

000034ec <event_callback>:
	SYS_ARCH_DECL_PROTECT(lev);

	LWIP_UNUSED_ARG(len);

	/* Get socket */
	if (conn) {
    34ec:	2800      	cmp	r0, #0
    34ee:	d075      	beq.n	35dc <event_callback+0xf0>
{
    34f0:	b570      	push	{r4, r5, r6, lr}
		s = conn->socket;
    34f2:	6986      	ldr	r6, [r0, #24]
		if (s < 0) {
    34f4:	2e00      	cmp	r6, #0
    34f6:	db0d      	blt.n	3514 <event_callback+0x28>
    34f8:	460c      	mov	r4, r1
			}
			s = conn->socket;
			SYS_ARCH_UNPROTECT(lev);
		}

		sock = get_socket(s);
    34fa:	4630      	mov	r0, r6
    34fc:	4b38      	ldr	r3, [pc, #224]	; (35e0 <event_callback+0xf4>)
    34fe:	4798      	blx	r3
		if (!sock) {
    3500:	4605      	mov	r5, r0
    3502:	2800      	cmp	r0, #0
    3504:	d069      	beq.n	35da <event_callback+0xee>
		return;
	}

	SYS_ARCH_PROTECT(lev);
	/* Set event as required */
	switch (evt) {
    3506:	2c04      	cmp	r4, #4
    3508:	d80d      	bhi.n	3526 <event_callback+0x3a>
    350a:	e8df f004 	tbb	[pc, r4]
    350e:	1208      	.short	0x1208
    3510:	1a17      	.short	0x1a17
    3512:	1d          	.byte	0x1d
    3513:	00          	.byte	0x00
				if (evt == NETCONN_EVT_RCVPLUS) {
    3514:	2900      	cmp	r1, #0
    3516:	d160      	bne.n	35da <event_callback+0xee>
					conn->socket--;
    3518:	3e01      	subs	r6, #1
    351a:	6186      	str	r6, [r0, #24]
    351c:	bd70      	pop	{r4, r5, r6, pc}
	case NETCONN_EVT_RCVPLUS:
		sock->rcvevent++;
    351e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    3522:	3301      	adds	r3, #1
    3524:	8143      	strh	r3, [r0, #10]
	default:
		LWIP_ASSERT("unknown event", 0);
		break;
	}

	if (sock->select_waiting == 0) {
    3526:	696b      	ldr	r3, [r5, #20]
    3528:	2b00      	cmp	r3, #0
    352a:	d056      	beq.n	35da <event_callback+0xee>
	   ONLY IF a select was actually waiting. We go through the list the number
	   of waiting select calls + 1. This list is expected to be small. */

	/* At this point, SYS_ARCH is still protected! */
again:
	for (scb = select_cb_list; scb != NULL; scb = scb->next) {
    352c:	4b2d      	ldr	r3, [pc, #180]	; (35e4 <event_callback+0xf8>)
    352e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
    3530:	e015      	b.n	355e <event_callback+0x72>
		sock->rcvevent--;
    3532:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    3536:	3b01      	subs	r3, #1
    3538:	8143      	strh	r3, [r0, #10]
		break;
    353a:	e7f4      	b.n	3526 <event_callback+0x3a>
		sock->sendevent = 1;
    353c:	2301      	movs	r3, #1
    353e:	8183      	strh	r3, [r0, #12]
		break;
    3540:	e7f1      	b.n	3526 <event_callback+0x3a>
		sock->sendevent = 0;
    3542:	2300      	movs	r3, #0
    3544:	8183      	strh	r3, [r0, #12]
		break;
    3546:	e7ee      	b.n	3526 <event_callback+0x3a>
		sock->errevent = 1;
    3548:	2301      	movs	r3, #1
    354a:	81c3      	strh	r3, [r0, #14]
		break;
    354c:	e7eb      	b.n	3526 <event_callback+0x3a>
			if (sock->errevent != 0) {
				if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
					do_signal = 1;
				}
			}
			if (do_signal) {
    354e:	2b00      	cmp	r3, #0
    3550:	d13c      	bne.n	35cc <event_callback+0xe0>
				   lead to the select thread taking itself off the list, invalidagin the semaphore. */
				sys_sem_signal(&scb->sem);
			}
		}
		/* unlock interrupts with each step */
		last_select_cb_ctr = select_cb_ctr;
    3552:	4b24      	ldr	r3, [pc, #144]	; (35e4 <event_callback+0xf8>)
    3554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		SYS_ARCH_UNPROTECT(lev);
		/* this makes sure interrupt protection time is short */
		SYS_ARCH_PROTECT(lev);
		if (last_select_cb_ctr != select_cb_ctr) {
    3556:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    3558:	429a      	cmp	r2, r3
    355a:	d1e7      	bne.n	352c <event_callback+0x40>
	for (scb = select_cb_list; scb != NULL; scb = scb->next) {
    355c:	6824      	ldr	r4, [r4, #0]
    355e:	2c00      	cmp	r4, #0
    3560:	d03b      	beq.n	35da <event_callback+0xee>
		if (scb->sem_signalled == 0) {
    3562:	6963      	ldr	r3, [r4, #20]
    3564:	2b00      	cmp	r3, #0
    3566:	d1f4      	bne.n	3552 <event_callback+0x66>
			if (sock->rcvevent > 0) {
    3568:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
    356c:	2a00      	cmp	r2, #0
    356e:	dd0b      	ble.n	3588 <event_callback+0x9c>
				if (scb->readset && FD_ISSET(s, scb->readset)) {
    3570:	68a2      	ldr	r2, [r4, #8]
    3572:	b14a      	cbz	r2, 3588 <event_callback+0x9c>
    3574:	0971      	lsrs	r1, r6, #5
    3576:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    357a:	f006 001f 	and.w	r0, r6, #31
    357e:	2201      	movs	r2, #1
    3580:	4082      	lsls	r2, r0
    3582:	4211      	tst	r1, r2
    3584:	d000      	beq.n	3588 <event_callback+0x9c>
					do_signal = 1;
    3586:	2301      	movs	r3, #1
			if (sock->sendevent != 0) {
    3588:	89aa      	ldrh	r2, [r5, #12]
    358a:	b162      	cbz	r2, 35a6 <event_callback+0xba>
				if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
    358c:	b95b      	cbnz	r3, 35a6 <event_callback+0xba>
    358e:	68e2      	ldr	r2, [r4, #12]
    3590:	b14a      	cbz	r2, 35a6 <event_callback+0xba>
    3592:	0971      	lsrs	r1, r6, #5
    3594:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    3598:	f006 001f 	and.w	r0, r6, #31
    359c:	2201      	movs	r2, #1
    359e:	4082      	lsls	r2, r0
    35a0:	4211      	tst	r1, r2
    35a2:	d000      	beq.n	35a6 <event_callback+0xba>
					do_signal = 1;
    35a4:	2301      	movs	r3, #1
			if (sock->errevent != 0) {
    35a6:	89ea      	ldrh	r2, [r5, #14]
    35a8:	2a00      	cmp	r2, #0
    35aa:	d0d0      	beq.n	354e <event_callback+0x62>
				if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
    35ac:	2b00      	cmp	r3, #0
    35ae:	d1ce      	bne.n	354e <event_callback+0x62>
    35b0:	6922      	ldr	r2, [r4, #16]
    35b2:	2a00      	cmp	r2, #0
    35b4:	d0cb      	beq.n	354e <event_callback+0x62>
    35b6:	0971      	lsrs	r1, r6, #5
    35b8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    35bc:	f006 001f 	and.w	r0, r6, #31
    35c0:	2201      	movs	r2, #1
    35c2:	4082      	lsls	r2, r0
    35c4:	4211      	tst	r1, r2
    35c6:	d0c2      	beq.n	354e <event_callback+0x62>
					do_signal = 1;
    35c8:	2301      	movs	r3, #1
    35ca:	e7c0      	b.n	354e <event_callback+0x62>
				scb->sem_signalled = 1;
    35cc:	2301      	movs	r3, #1
    35ce:	6163      	str	r3, [r4, #20]
				sys_sem_signal(&scb->sem);
    35d0:	f104 0018 	add.w	r0, r4, #24
    35d4:	4b04      	ldr	r3, [pc, #16]	; (35e8 <event_callback+0xfc>)
    35d6:	4798      	blx	r3
    35d8:	e7bb      	b.n	3552 <event_callback+0x66>
    35da:	bd70      	pop	{r4, r5, r6, pc}
    35dc:	4770      	bx	lr
    35de:	bf00      	nop
    35e0:	00003455 	.word	0x00003455
    35e4:	20001578 	.word	0x20001578
    35e8:	000024f1 	.word	0x000024f1

000035ec <lwip_setsockopt_internal>:
	sock_set_errno(sock, err);
	return err ? -1 : 0;
}

static void lwip_setsockopt_internal(void *arg)
{
    35ec:	b510      	push	{r4, lr}
	struct lwip_setgetsockopt_data *data;

	LWIP_ASSERT("arg != NULL", arg != NULL);

	data = (struct lwip_setgetsockopt_data *)arg;
	sock = data->sock;
    35ee:	6801      	ldr	r1, [r0, #0]
#ifdef LWIP_DEBUG
	s = data->s;
#endif /* LWIP_DEBUG */
	level   = data->level;
    35f0:	6843      	ldr	r3, [r0, #4]
	optname = data->optname;
    35f2:	6882      	ldr	r2, [r0, #8]
	optval  = data->optval;
    35f4:	68c4      	ldr	r4, [r0, #12]

	switch (level) {
    35f6:	2b06      	cmp	r3, #6
    35f8:	d03e      	beq.n	3678 <lwip_setsockopt_internal+0x8c>
    35fa:	f640 70ff 	movw	r0, #4095	; 0xfff
    35fe:	4283      	cmp	r3, r0
    3600:	d005      	beq.n	360e <lwip_setsockopt_internal+0x22>
    3602:	b35b      	cbz	r3, 365c <lwip_setsockopt_internal+0x70>
#endif /* LWIP_UDP */
	default:
		LWIP_ASSERT("unhandled level", 0);
		break;
	} /* switch (level) */
	sys_sem_signal(&sock->conn->op_completed);
    3604:	6808      	ldr	r0, [r1, #0]
    3606:	300c      	adds	r0, #12
    3608:	4b28      	ldr	r3, [pc, #160]	; (36ac <lwip_setsockopt_internal+0xc0>)
    360a:	4798      	blx	r3
    360c:	bd10      	pop	{r4, pc}
		switch (optname) {
    360e:	2a20      	cmp	r2, #32
    3610:	d005      	beq.n	361e <lwip_setsockopt_internal+0x32>
    3612:	f241 030a 	movw	r3, #4106	; 0x100a
    3616:	429a      	cmp	r2, r3
    3618:	d010      	beq.n	363c <lwip_setsockopt_internal+0x50>
    361a:	2a08      	cmp	r2, #8
    361c:	d1f2      	bne.n	3604 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    361e:	6823      	ldr	r3, [r4, #0]
    3620:	b12b      	cbz	r3, 362e <lwip_setsockopt_internal+0x42>
				ip_set_option(sock->conn->pcb.ip, optname);
    3622:	680b      	ldr	r3, [r1, #0]
    3624:	6858      	ldr	r0, [r3, #4]
    3626:	7a03      	ldrb	r3, [r0, #8]
    3628:	431a      	orrs	r2, r3
    362a:	7202      	strb	r2, [r0, #8]
    362c:	e7ea      	b.n	3604 <lwip_setsockopt_internal+0x18>
				ip_reset_option(sock->conn->pcb.ip, optname);
    362e:	680b      	ldr	r3, [r1, #0]
    3630:	6858      	ldr	r0, [r3, #4]
    3632:	7a03      	ldrb	r3, [r0, #8]
    3634:	ea23 0202 	bic.w	r2, r3, r2
    3638:	7202      	strb	r2, [r0, #8]
    363a:	e7e3      	b.n	3604 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    363c:	6823      	ldr	r3, [r4, #0]
    363e:	b133      	cbz	r3, 364e <lwip_setsockopt_internal+0x62>
				udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
    3640:	680b      	ldr	r3, [r1, #0]
    3642:	685a      	ldr	r2, [r3, #4]
    3644:	7c13      	ldrb	r3, [r2, #16]
    3646:	f043 0301 	orr.w	r3, r3, #1
    364a:	7413      	strb	r3, [r2, #16]
    364c:	e7da      	b.n	3604 <lwip_setsockopt_internal+0x18>
				udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
    364e:	680b      	ldr	r3, [r1, #0]
    3650:	685a      	ldr	r2, [r3, #4]
    3652:	7c13      	ldrb	r3, [r2, #16]
    3654:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3658:	7413      	strb	r3, [r2, #16]
    365a:	e7d3      	b.n	3604 <lwip_setsockopt_internal+0x18>
		switch (optname) {
    365c:	2a01      	cmp	r2, #1
    365e:	d006      	beq.n	366e <lwip_setsockopt_internal+0x82>
    3660:	2a02      	cmp	r2, #2
    3662:	d1cf      	bne.n	3604 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.ip->ttl = (u8_t)(*(int *)optval);
    3664:	680b      	ldr	r3, [r1, #0]
    3666:	685b      	ldr	r3, [r3, #4]
    3668:	7822      	ldrb	r2, [r4, #0]
    366a:	729a      	strb	r2, [r3, #10]
			break;
    366c:	e7ca      	b.n	3604 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.ip->tos = (u8_t)(*(int *)optval);
    366e:	680b      	ldr	r3, [r1, #0]
    3670:	685b      	ldr	r3, [r3, #4]
    3672:	7822      	ldrb	r2, [r4, #0]
    3674:	725a      	strb	r2, [r3, #9]
			break;
    3676:	e7c5      	b.n	3604 <lwip_setsockopt_internal+0x18>
		switch (optname) {
    3678:	2a01      	cmp	r2, #1
    367a:	d007      	beq.n	368c <lwip_setsockopt_internal+0xa0>
    367c:	2a02      	cmp	r2, #2
    367e:	d1c1      	bne.n	3604 <lwip_setsockopt_internal+0x18>
			sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int *)optval);
    3680:	680b      	ldr	r3, [r1, #0]
    3682:	685b      	ldr	r3, [r3, #4]
    3684:	6822      	ldr	r2, [r4, #0]
    3686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			break;
    368a:	e7bb      	b.n	3604 <lwip_setsockopt_internal+0x18>
			if (*(int *)optval) {
    368c:	6823      	ldr	r3, [r4, #0]
    368e:	b133      	cbz	r3, 369e <lwip_setsockopt_internal+0xb2>
				tcp_nagle_disable(sock->conn->pcb.tcp);
    3690:	680b      	ldr	r3, [r1, #0]
    3692:	685a      	ldr	r2, [r3, #4]
    3694:	7f93      	ldrb	r3, [r2, #30]
    3696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    369a:	7793      	strb	r3, [r2, #30]
    369c:	e7b2      	b.n	3604 <lwip_setsockopt_internal+0x18>
				tcp_nagle_enable(sock->conn->pcb.tcp);
    369e:	680b      	ldr	r3, [r1, #0]
    36a0:	685a      	ldr	r2, [r3, #4]
    36a2:	7f93      	ldrb	r3, [r2, #30]
    36a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    36a8:	7793      	strb	r3, [r2, #30]
    36aa:	e7ab      	b.n	3604 <lwip_setsockopt_internal+0x18>
    36ac:	000024f1 	.word	0x000024f1

000036b0 <lwip_socket_init>:
{
    36b0:	4770      	bx	lr
	...

000036b4 <lwip_bind>:
{
    36b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36b6:	b083      	sub	sp, #12
    36b8:	460c      	mov	r4, r1
    36ba:	4616      	mov	r6, r2
	sock = get_socket(s);
    36bc:	4b16      	ldr	r3, [pc, #88]	; (3718 <lwip_bind+0x64>)
    36be:	4798      	blx	r3
	if (!sock) {
    36c0:	b338      	cbz	r0, 3712 <lwip_bind+0x5e>
    36c2:	4605      	mov	r5, r0
	LWIP_ERROR(
    36c4:	2e10      	cmp	r6, #16
    36c6:	d000      	beq.n	36ca <lwip_bind+0x16>
    36c8:	e7fe      	b.n	36c8 <lwip_bind+0x14>
    36ca:	7863      	ldrb	r3, [r4, #1]
    36cc:	2b02      	cmp	r3, #2
    36ce:	d1fb      	bne.n	36c8 <lwip_bind+0x14>
    36d0:	f014 0f03 	tst.w	r4, #3
    36d4:	d1f8      	bne.n	36c8 <lwip_bind+0x14>
	inet_addr_to_ipaddr(&local_addr, &name_in->sin_addr);
    36d6:	6863      	ldr	r3, [r4, #4]
    36d8:	ae02      	add	r6, sp, #8
    36da:	f846 3d04 	str.w	r3, [r6, #-4]!
	err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));
    36de:	6807      	ldr	r7, [r0, #0]
    36e0:	8860      	ldrh	r0, [r4, #2]
    36e2:	4b0e      	ldr	r3, [pc, #56]	; (371c <lwip_bind+0x68>)
    36e4:	4798      	blx	r3
    36e6:	4602      	mov	r2, r0
    36e8:	4631      	mov	r1, r6
    36ea:	4638      	mov	r0, r7
    36ec:	4b0c      	ldr	r3, [pc, #48]	; (3720 <lwip_bind+0x6c>)
    36ee:	4798      	blx	r3
	if (err != ERR_OK) {
    36f0:	b160      	cbz	r0, 370c <lwip_bind+0x58>
		sock_set_errno(sock, err_to_errno(err));
    36f2:	4243      	negs	r3, r0
    36f4:	2b0f      	cmp	r3, #15
    36f6:	d807      	bhi.n	3708 <lwip_bind+0x54>
    36f8:	4a0a      	ldr	r2, [pc, #40]	; (3724 <lwip_bind+0x70>)
    36fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    36fe:	612b      	str	r3, [r5, #16]
		return -1;
    3700:	f04f 30ff 	mov.w	r0, #4294967295
}
    3704:	b003      	add	sp, #12
    3706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sock_set_errno(sock, err_to_errno(err));
    3708:	2305      	movs	r3, #5
    370a:	e7f8      	b.n	36fe <lwip_bind+0x4a>
	sock_set_errno(sock, 0);
    370c:	2000      	movs	r0, #0
    370e:	6128      	str	r0, [r5, #16]
	return 0;
    3710:	e7f8      	b.n	3704 <lwip_bind+0x50>
		return -1;
    3712:	f04f 30ff 	mov.w	r0, #4294967295
    3716:	e7f5      	b.n	3704 <lwip_bind+0x50>
    3718:	00003455 	.word	0x00003455
    371c:	00003ecd 	.word	0x00003ecd
    3720:	000028bd 	.word	0x000028bd
    3724:	0000e400 	.word	0x0000e400

00003728 <lwip_recvfrom>:
{
    3728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    372c:	b08b      	sub	sp, #44	; 0x2c
    372e:	9101      	str	r1, [sp, #4]
    3730:	4617      	mov	r7, r2
    3732:	4698      	mov	r8, r3
	void *            buf = NULL;
    3734:	2300      	movs	r3, #0
    3736:	9309      	str	r3, [sp, #36]	; 0x24
	sock = get_socket(s);
    3738:	4b81      	ldr	r3, [pc, #516]	; (3940 <lwip_recvfrom+0x218>)
    373a:	4798      	blx	r3
	if (!sock) {
    373c:	2800      	cmp	r0, #0
    373e:	f000 80f9 	beq.w	3934 <lwip_recvfrom+0x20c>
    3742:	4605      	mov	r5, r0
    3744:	f04f 0b00 	mov.w	fp, #0
    3748:	46da      	mov	sl, fp
    374a:	9700      	str	r7, [sp, #0]
    374c:	46c1      	mov	r9, r8
    374e:	e07a      	b.n	3846 <lwip_recvfrom+0x11e>
			if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) && (sock->rcvevent <= 0)) {
    3750:	f019 0f08 	tst.w	r9, #8
    3754:	d104      	bne.n	3760 <lwip_recvfrom+0x38>
    3756:	682b      	ldr	r3, [r5, #0]
    3758:	7f1b      	ldrb	r3, [r3, #28]
    375a:	f013 0f02 	tst.w	r3, #2
    375e:	d003      	beq.n	3768 <lwip_recvfrom+0x40>
    3760:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
    3764:	2b00      	cmp	r3, #0
    3766:	dd0a      	ble.n	377e <lwip_recvfrom+0x56>
			if (netconn_type(sock->conn) == NETCONN_TCP) {
    3768:	6828      	ldr	r0, [r5, #0]
    376a:	7803      	ldrb	r3, [r0, #0]
    376c:	2b10      	cmp	r3, #16
    376e:	d015      	beq.n	379c <lwip_recvfrom+0x74>
				err = netconn_recv(sock->conn, (struct netbuf **)&buf);
    3770:	a909      	add	r1, sp, #36	; 0x24
    3772:	4b74      	ldr	r3, [pc, #464]	; (3944 <lwip_recvfrom+0x21c>)
    3774:	4798      	blx	r3
			if (err != ERR_OK) {
    3776:	b9a8      	cbnz	r0, 37a4 <lwip_recvfrom+0x7c>
			sock->lastdata = buf;
    3778:	9b09      	ldr	r3, [sp, #36]	; 0x24
    377a:	606b      	str	r3, [r5, #4]
    377c:	e067      	b.n	384e <lwip_recvfrom+0x126>
				if (off > 0) {
    377e:	f1ba 0f00 	cmp.w	sl, #0
    3782:	dd06      	ble.n	3792 <lwip_recvfrom+0x6a>
					netconn_recved(sock->conn, (u32_t)off);
    3784:	4651      	mov	r1, sl
    3786:	6828      	ldr	r0, [r5, #0]
    3788:	4b6f      	ldr	r3, [pc, #444]	; (3948 <lwip_recvfrom+0x220>)
    378a:	4798      	blx	r3
					sock_set_errno(sock, 0);
    378c:	2300      	movs	r3, #0
    378e:	612b      	str	r3, [r5, #16]
					return off;
    3790:	e0cc      	b.n	392c <lwip_recvfrom+0x204>
				sock_set_errno(sock, EWOULDBLOCK);
    3792:	230b      	movs	r3, #11
    3794:	612b      	str	r3, [r5, #16]
				return -1;
    3796:	f04f 3aff 	mov.w	sl, #4294967295
    379a:	e0c7      	b.n	392c <lwip_recvfrom+0x204>
				err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
    379c:	a909      	add	r1, sp, #36	; 0x24
    379e:	4b6b      	ldr	r3, [pc, #428]	; (394c <lwip_recvfrom+0x224>)
    37a0:	4798      	blx	r3
    37a2:	e7e8      	b.n	3776 <lwip_recvfrom+0x4e>
				if (off > 0) {
    37a4:	f1ba 0f00 	cmp.w	sl, #0
    37a8:	dc0d      	bgt.n	37c6 <lwip_recvfrom+0x9e>
				sock_set_errno(sock, err_to_errno(err));
    37aa:	4243      	negs	r3, r0
    37ac:	2b0f      	cmp	r3, #15
    37ae:	d811      	bhi.n	37d4 <lwip_recvfrom+0xac>
    37b0:	4a67      	ldr	r2, [pc, #412]	; (3950 <lwip_recvfrom+0x228>)
    37b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37b6:	612b      	str	r3, [r5, #16]
				if (err == ERR_CLSD) {
    37b8:	f110 0f0c 	cmn.w	r0, #12
    37bc:	f040 80bd 	bne.w	393a <lwip_recvfrom+0x212>
					return 0;
    37c0:	f04f 0a00 	mov.w	sl, #0
    37c4:	e0b2      	b.n	392c <lwip_recvfrom+0x204>
					netconn_recved(sock->conn, (u32_t)off);
    37c6:	4651      	mov	r1, sl
    37c8:	6828      	ldr	r0, [r5, #0]
    37ca:	4b5f      	ldr	r3, [pc, #380]	; (3948 <lwip_recvfrom+0x220>)
    37cc:	4798      	blx	r3
					sock_set_errno(sock, 0);
    37ce:	2300      	movs	r3, #0
    37d0:	612b      	str	r3, [r5, #16]
					return off;
    37d2:	e0ab      	b.n	392c <lwip_recvfrom+0x204>
				sock_set_errno(sock, err_to_errno(err));
    37d4:	2305      	movs	r3, #5
    37d6:	e7ee      	b.n	37b6 <lwip_recvfrom+0x8e>
			p = (struct pbuf *)buf;
    37d8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    37dc:	e03e      	b.n	385c <lwip_recvfrom+0x134>
			copylen = buflen;
    37de:	4626      	mov	r6, r4
    37e0:	e045      	b.n	386e <lwip_recvfrom+0x146>
			done = 1;
    37e2:	f04f 0b01 	mov.w	fp, #1
    37e6:	e05e      	b.n	38a6 <lwip_recvfrom+0x17e>
				done = 1;
    37e8:	f04f 0b01 	mov.w	fp, #1
    37ec:	e05b      	b.n	38a6 <lwip_recvfrom+0x17e>
    37ee:	f04f 0b01 	mov.w	fp, #1
    37f2:	e058      	b.n	38a6 <lwip_recvfrom+0x17e>
    37f4:	f04f 0b01 	mov.w	fp, #1
    37f8:	e055      	b.n	38a6 <lwip_recvfrom+0x17e>
    37fa:	f04f 0b01 	mov.w	fp, #1
    37fe:	e052      	b.n	38a6 <lwip_recvfrom+0x17e>
					netconn_getaddr(sock->conn, addr, &port, 0);
    3800:	2300      	movs	r3, #0
    3802:	f10d 0222 	add.w	r2, sp, #34	; 0x22
    3806:	a903      	add	r1, sp, #12
    3808:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3968 <lwip_recvfrom+0x240>
    380c:	47c0      	blx	r8
					addr = &fromaddr;
    380e:	f10d 080c 	add.w	r8, sp, #12
    3812:	e059      	b.n	38c8 <lwip_recvfrom+0x1a0>
				MEMCPY(from, &sin, *fromlen);
    3814:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3816:	681a      	ldr	r2, [r3, #0]
    3818:	a904      	add	r1, sp, #16
    381a:	9814      	ldr	r0, [sp, #80]	; 0x50
    381c:	4b4d      	ldr	r3, [pc, #308]	; (3954 <lwip_recvfrom+0x22c>)
    381e:	4798      	blx	r3
		if ((flags & MSG_PEEK) == 0) {
    3820:	f019 0f01 	tst.w	r9, #1
    3824:	d10c      	bne.n	3840 <lwip_recvfrom+0x118>
			if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
    3826:	682b      	ldr	r3, [r5, #0]
    3828:	781a      	ldrb	r2, [r3, #0]
    382a:	2a10      	cmp	r2, #16
    382c:	d068      	beq.n	3900 <lwip_recvfrom+0x1d8>
				sock->lastdata   = NULL;
    382e:	2200      	movs	r2, #0
    3830:	606a      	str	r2, [r5, #4]
				sock->lastoffset = 0;
    3832:	812a      	strh	r2, [r5, #8]
				if (netconn_type(sock->conn) == NETCONN_TCP) {
    3834:	781b      	ldrb	r3, [r3, #0]
    3836:	2b10      	cmp	r3, #16
    3838:	d06b      	beq.n	3912 <lwip_recvfrom+0x1ea>
					netbuf_delete((struct netbuf *)buf);
    383a:	9809      	ldr	r0, [sp, #36]	; 0x24
    383c:	4b46      	ldr	r3, [pc, #280]	; (3958 <lwip_recvfrom+0x230>)
    383e:	4798      	blx	r3
	} while (!done);
    3840:	f1bb 0f00 	cmp.w	fp, #0
    3844:	d169      	bne.n	391a <lwip_recvfrom+0x1f2>
		if (sock->lastdata) {
    3846:	686b      	ldr	r3, [r5, #4]
    3848:	2b00      	cmp	r3, #0
    384a:	d081      	beq.n	3750 <lwip_recvfrom+0x28>
			buf = sock->lastdata;
    384c:	9309      	str	r3, [sp, #36]	; 0x24
		if (netconn_type(sock->conn) == NETCONN_TCP) {
    384e:	682b      	ldr	r3, [r5, #0]
    3850:	781b      	ldrb	r3, [r3, #0]
    3852:	2b10      	cmp	r3, #16
    3854:	d0c0      	beq.n	37d8 <lwip_recvfrom+0xb0>
			p = ((struct netbuf *)buf)->p;
    3856:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3858:	f8d3 8000 	ldr.w	r8, [r3]
		buflen = p->tot_len;
    385c:	f8b8 4008 	ldrh.w	r4, [r8, #8]
		buflen -= sock->lastoffset;
    3860:	892b      	ldrh	r3, [r5, #8]
    3862:	1ae4      	subs	r4, r4, r3
    3864:	b2a4      	uxth	r4, r4
		if (len > buflen) {
    3866:	9900      	ldr	r1, [sp, #0]
    3868:	42a1      	cmp	r1, r4
    386a:	d8b8      	bhi.n	37de <lwip_recvfrom+0xb6>
			copylen = (u16_t)len;
    386c:	b28e      	uxth	r6, r1
		pbuf_copy_partial(p, (u8_t *)mem + off, copylen, sock->lastoffset);
    386e:	4632      	mov	r2, r6
    3870:	9901      	ldr	r1, [sp, #4]
    3872:	4451      	add	r1, sl
    3874:	4640      	mov	r0, r8
    3876:	4f39      	ldr	r7, [pc, #228]	; (395c <lwip_recvfrom+0x234>)
    3878:	47b8      	blx	r7
		off += copylen;
    387a:	4637      	mov	r7, r6
    387c:	44b2      	add	sl, r6
		if (netconn_type(sock->conn) == NETCONN_TCP) {
    387e:	6828      	ldr	r0, [r5, #0]
    3880:	7803      	ldrb	r3, [r0, #0]
    3882:	2b10      	cmp	r3, #16
    3884:	d1ad      	bne.n	37e2 <lwip_recvfrom+0xba>
			if ((len <= 0) || (p->flags & PBUF_FLAG_PUSH) || (sock->rcvevent <= 0) || ((flags & MSG_PEEK) != 0)) {
    3886:	9a00      	ldr	r2, [sp, #0]
    3888:	1b92      	subs	r2, r2, r6
    388a:	9200      	str	r2, [sp, #0]
    388c:	d0ac      	beq.n	37e8 <lwip_recvfrom+0xc0>
    388e:	f898 200d 	ldrb.w	r2, [r8, #13]
    3892:	f012 0f01 	tst.w	r2, #1
    3896:	d1aa      	bne.n	37ee <lwip_recvfrom+0xc6>
    3898:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
    389c:	2a00      	cmp	r2, #0
    389e:	dda9      	ble.n	37f4 <lwip_recvfrom+0xcc>
    38a0:	f019 0f01 	tst.w	r9, #1
    38a4:	d1a9      	bne.n	37fa <lwip_recvfrom+0xd2>
		if (done) {
    38a6:	f1bb 0f00 	cmp.w	fp, #0
    38aa:	d0b9      	beq.n	3820 <lwip_recvfrom+0xf8>
			if (from && fromlen) {
    38ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    38ae:	2a00      	cmp	r2, #0
    38b0:	d0b6      	beq.n	3820 <lwip_recvfrom+0xf8>
    38b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    38b4:	2a00      	cmp	r2, #0
    38b6:	d0b3      	beq.n	3820 <lwip_recvfrom+0xf8>
				if (netconn_type(sock->conn) == NETCONN_TCP) {
    38b8:	2b10      	cmp	r3, #16
    38ba:	d0a1      	beq.n	3800 <lwip_recvfrom+0xd8>
					addr = netbuf_fromaddr((struct netbuf *)buf);
    38bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38be:	f103 0808 	add.w	r8, r3, #8
					port = netbuf_fromport((struct netbuf *)buf);
    38c2:	899b      	ldrh	r3, [r3, #12]
    38c4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
				memset(&sin, 0, sizeof(sin));
    38c8:	2300      	movs	r3, #0
    38ca:	9304      	str	r3, [sp, #16]
    38cc:	9305      	str	r3, [sp, #20]
    38ce:	9306      	str	r3, [sp, #24]
    38d0:	9307      	str	r3, [sp, #28]
				sin.sin_len    = sizeof(sin);
    38d2:	2310      	movs	r3, #16
    38d4:	f88d 3010 	strb.w	r3, [sp, #16]
				sin.sin_family = AF_INET;
    38d8:	2302      	movs	r3, #2
    38da:	f88d 3011 	strb.w	r3, [sp, #17]
				sin.sin_port   = htons(port);
    38de:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
    38e2:	4b1f      	ldr	r3, [pc, #124]	; (3960 <lwip_recvfrom+0x238>)
    38e4:	4798      	blx	r3
    38e6:	f8ad 0012 	strh.w	r0, [sp, #18]
				inet_addr_from_ipaddr(&sin.sin_addr, addr);
    38ea:	f8d8 3000 	ldr.w	r3, [r8]
    38ee:	9305      	str	r3, [sp, #20]
				if (*fromlen > sizeof(sin)) {
    38f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	2b10      	cmp	r3, #16
    38f6:	d98d      	bls.n	3814 <lwip_recvfrom+0xec>
					*fromlen = sizeof(sin);
    38f8:	2310      	movs	r3, #16
    38fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
    38fc:	6013      	str	r3, [r2, #0]
    38fe:	e789      	b.n	3814 <lwip_recvfrom+0xec>
			if ((netconn_type(sock->conn) == NETCONN_TCP) && (buflen - copylen > 0)) {
    3900:	1be4      	subs	r4, r4, r7
    3902:	2c00      	cmp	r4, #0
    3904:	dd93      	ble.n	382e <lwip_recvfrom+0x106>
				sock->lastdata = buf;
    3906:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3908:	606b      	str	r3, [r5, #4]
				sock->lastoffset += copylen;
    390a:	892b      	ldrh	r3, [r5, #8]
    390c:	441e      	add	r6, r3
    390e:	812e      	strh	r6, [r5, #8]
    3910:	e796      	b.n	3840 <lwip_recvfrom+0x118>
					pbuf_free((struct pbuf *)buf);
    3912:	9809      	ldr	r0, [sp, #36]	; 0x24
    3914:	4b13      	ldr	r3, [pc, #76]	; (3964 <lwip_recvfrom+0x23c>)
    3916:	4798      	blx	r3
    3918:	e792      	b.n	3840 <lwip_recvfrom+0x118>
	if (off > 0) {
    391a:	f1ba 0f00 	cmp.w	sl, #0
    391e:	dd03      	ble.n	3928 <lwip_recvfrom+0x200>
		netconn_recved(sock->conn, (u32_t)off);
    3920:	4651      	mov	r1, sl
    3922:	6828      	ldr	r0, [r5, #0]
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <lwip_recvfrom+0x220>)
    3926:	4798      	blx	r3
	sock_set_errno(sock, 0);
    3928:	2300      	movs	r3, #0
    392a:	612b      	str	r3, [r5, #16]
}
    392c:	4650      	mov	r0, sl
    392e:	b00b      	add	sp, #44	; 0x2c
    3930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
    3934:	f04f 3aff 	mov.w	sl, #4294967295
    3938:	e7f8      	b.n	392c <lwip_recvfrom+0x204>
					return -1;
    393a:	f04f 3aff 	mov.w	sl, #4294967295
    393e:	e7f5      	b.n	392c <lwip_recvfrom+0x204>
    3940:	00003455 	.word	0x00003455
    3944:	00002909 	.word	0x00002909
    3948:	0000299d 	.word	0x0000299d
    394c:	000028f1 	.word	0x000028f1
    3950:	0000e400 	.word	0x0000e400
    3954:	0000cd53 	.word	0x0000cd53
    3958:	000033cd 	.word	0x000033cd
    395c:	000062f1 	.word	0x000062f1
    3960:	00003ec1 	.word	0x00003ec1
    3964:	00006009 	.word	0x00006009
    3968:	0000287d 	.word	0x0000287d

0000396c <lwip_recv>:
{
    396c:	b510      	push	{r4, lr}
    396e:	b082      	sub	sp, #8
	return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
    3970:	2400      	movs	r4, #0
    3972:	9401      	str	r4, [sp, #4]
    3974:	9400      	str	r4, [sp, #0]
    3976:	4c02      	ldr	r4, [pc, #8]	; (3980 <lwip_recv+0x14>)
    3978:	47a0      	blx	r4
}
    397a:	b002      	add	sp, #8
    397c:	bd10      	pop	{r4, pc}
    397e:	bf00      	nop
    3980:	00003729 	.word	0x00003729

00003984 <lwip_sendto>:
{
    3984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3988:	b084      	sub	sp, #16
    398a:	4681      	mov	r9, r0
    398c:	4688      	mov	r8, r1
    398e:	4614      	mov	r4, r2
    3990:	469a      	mov	sl, r3
    3992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3994:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	sock = get_socket(s);
    3996:	4b29      	ldr	r3, [pc, #164]	; (3a3c <lwip_sendto+0xb8>)
    3998:	4798      	blx	r3
	if (!sock) {
    399a:	2800      	cmp	r0, #0
    399c:	d047      	beq.n	3a2e <lwip_sendto+0xaa>
    399e:	4606      	mov	r6, r0
	if (sock->conn->type == NETCONN_TCP) {
    39a0:	6803      	ldr	r3, [r0, #0]
    39a2:	781b      	ldrb	r3, [r3, #0]
    39a4:	2b10      	cmp	r3, #16
    39a6:	d005      	beq.n	39b4 <lwip_sendto+0x30>
	short_size = (u16_t)size;
    39a8:	fa1f f984 	uxth.w	r9, r4
	LWIP_ERROR(
    39ac:	b15d      	cbz	r5, 39c6 <lwip_sendto+0x42>
    39ae:	2f10      	cmp	r7, #16
    39b0:	d02f      	beq.n	3a12 <lwip_sendto+0x8e>
    39b2:	e7fe      	b.n	39b2 <lwip_sendto+0x2e>
		return lwip_send(s, data, size, flags);
    39b4:	4653      	mov	r3, sl
    39b6:	4622      	mov	r2, r4
    39b8:	4641      	mov	r1, r8
    39ba:	4648      	mov	r0, r9
    39bc:	4c20      	ldr	r4, [pc, #128]	; (3a40 <lwip_sendto+0xbc>)
    39be:	47a0      	blx	r4
}
    39c0:	b004      	add	sp, #16
    39c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LWIP_ERROR(
    39c6:	2f00      	cmp	r7, #0
    39c8:	d1f1      	bne.n	39ae <lwip_sendto+0x2a>
	buf.p = buf.ptr = NULL;
    39ca:	2300      	movs	r3, #0
    39cc:	9301      	str	r3, [sp, #4]
    39ce:	9300      	str	r3, [sp, #0]
	if (to) {
    39d0:	b335      	cbz	r5, 3a20 <lwip_sendto+0x9c>
		inet_addr_to_ipaddr(&buf.addr, &to_in->sin_addr);
    39d2:	686b      	ldr	r3, [r5, #4]
    39d4:	9302      	str	r3, [sp, #8]
		remote_port = ntohs(to_in->sin_port);
    39d6:	8868      	ldrh	r0, [r5, #2]
    39d8:	4b1a      	ldr	r3, [pc, #104]	; (3a44 <lwip_sendto+0xc0>)
    39da:	4798      	blx	r3
		netbuf_fromport(&buf) = remote_port;
    39dc:	f8ad 000c 	strh.w	r0, [sp, #12]
	err = netbuf_ref(&buf, data, short_size);
    39e0:	464a      	mov	r2, r9
    39e2:	4641      	mov	r1, r8
    39e4:	4668      	mov	r0, sp
    39e6:	4b18      	ldr	r3, [pc, #96]	; (3a48 <lwip_sendto+0xc4>)
    39e8:	4798      	blx	r3
	if (err == ERR_OK) {
    39ea:	4605      	mov	r5, r0
    39ec:	b920      	cbnz	r0, 39f8 <lwip_sendto+0x74>
		err = netconn_send(sock->conn, &buf);
    39ee:	4669      	mov	r1, sp
    39f0:	6830      	ldr	r0, [r6, #0]
    39f2:	4b16      	ldr	r3, [pc, #88]	; (3a4c <lwip_sendto+0xc8>)
    39f4:	4798      	blx	r3
    39f6:	4605      	mov	r5, r0
	netbuf_free(&buf);
    39f8:	4668      	mov	r0, sp
    39fa:	4b15      	ldr	r3, [pc, #84]	; (3a50 <lwip_sendto+0xcc>)
    39fc:	4798      	blx	r3
	sock_set_errno(sock, err_to_errno(err));
    39fe:	426b      	negs	r3, r5
    3a00:	2b0f      	cmp	r3, #15
    3a02:	d812      	bhi.n	3a2a <lwip_sendto+0xa6>
    3a04:	4a13      	ldr	r2, [pc, #76]	; (3a54 <lwip_sendto+0xd0>)
    3a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a0a:	6133      	str	r3, [r6, #16]
	return (err == ERR_OK ? short_size : -1);
    3a0c:	b995      	cbnz	r5, 3a34 <lwip_sendto+0xb0>
    3a0e:	b2a0      	uxth	r0, r4
    3a10:	e7d6      	b.n	39c0 <lwip_sendto+0x3c>
	LWIP_ERROR(
    3a12:	786b      	ldrb	r3, [r5, #1]
    3a14:	2b02      	cmp	r3, #2
    3a16:	d1cc      	bne.n	39b2 <lwip_sendto+0x2e>
    3a18:	f015 0f03 	tst.w	r5, #3
    3a1c:	d0d5      	beq.n	39ca <lwip_sendto+0x46>
    3a1e:	e7c8      	b.n	39b2 <lwip_sendto+0x2e>
		ip_addr_set_any(&buf.addr);
    3a20:	2300      	movs	r3, #0
    3a22:	9302      	str	r3, [sp, #8]
		netbuf_fromport(&buf) = 0;
    3a24:	f8ad 300c 	strh.w	r3, [sp, #12]
    3a28:	e7da      	b.n	39e0 <lwip_sendto+0x5c>
	sock_set_errno(sock, err_to_errno(err));
    3a2a:	2305      	movs	r3, #5
    3a2c:	e7ed      	b.n	3a0a <lwip_sendto+0x86>
		return -1;
    3a2e:	f04f 30ff 	mov.w	r0, #4294967295
    3a32:	e7c5      	b.n	39c0 <lwip_sendto+0x3c>
	return (err == ERR_OK ? short_size : -1);
    3a34:	f04f 30ff 	mov.w	r0, #4294967295
    3a38:	e7c2      	b.n	39c0 <lwip_sendto+0x3c>
    3a3a:	bf00      	nop
    3a3c:	00003455 	.word	0x00003455
    3a40:	00003a59 	.word	0x00003a59
    3a44:	00003ecd 	.word	0x00003ecd
    3a48:	00003411 	.word	0x00003411
    3a4c:	000029d1 	.word	0x000029d1
    3a50:	000033f5 	.word	0x000033f5
    3a54:	0000e400 	.word	0x0000e400

00003a58 <lwip_send>:
{
    3a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a5c:	b084      	sub	sp, #16
    3a5e:	4680      	mov	r8, r0
    3a60:	460e      	mov	r6, r1
    3a62:	4617      	mov	r7, r2
    3a64:	461d      	mov	r5, r3
	sock = get_socket(s);
    3a66:	4b1f      	ldr	r3, [pc, #124]	; (3ae4 <lwip_send+0x8c>)
    3a68:	4798      	blx	r3
	if (!sock) {
    3a6a:	2800      	cmp	r0, #0
    3a6c:	d033      	beq.n	3ad6 <lwip_send+0x7e>
    3a6e:	4604      	mov	r4, r0
	if (sock->conn->type != NETCONN_TCP) {
    3a70:	6803      	ldr	r3, [r0, #0]
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	2b10      	cmp	r3, #16
    3a76:	d11e      	bne.n	3ab6 <lwip_send+0x5e>
	    = NETCONN_COPY | ((flags & MSG_MORE) ? NETCONN_MORE : 0) | ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
    3a78:	f015 0f10 	tst.w	r5, #16
    3a7c:	d025      	beq.n	3aca <lwip_send+0x72>
    3a7e:	2103      	movs	r1, #3
    3a80:	f015 0f08 	tst.w	r5, #8
    3a84:	d023      	beq.n	3ace <lwip_send+0x76>
    3a86:	2304      	movs	r3, #4
	written = 0;
    3a88:	aa04      	add	r2, sp, #16
    3a8a:	2000      	movs	r0, #0
    3a8c:	f842 0d04 	str.w	r0, [r2, #-4]!
	err     = netconn_write_partly(sock->conn, data, size, write_flags, &written);
    3a90:	6820      	ldr	r0, [r4, #0]
    3a92:	9200      	str	r2, [sp, #0]
    3a94:	430b      	orrs	r3, r1
    3a96:	463a      	mov	r2, r7
    3a98:	4631      	mov	r1, r6
    3a9a:	4d13      	ldr	r5, [pc, #76]	; (3ae8 <lwip_send+0x90>)
    3a9c:	47a8      	blx	r5
	sock_set_errno(sock, err_to_errno(err));
    3a9e:	4243      	negs	r3, r0
    3aa0:	2b0f      	cmp	r3, #15
    3aa2:	d816      	bhi.n	3ad2 <lwip_send+0x7a>
    3aa4:	4a11      	ldr	r2, [pc, #68]	; (3aec <lwip_send+0x94>)
    3aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3aaa:	6123      	str	r3, [r4, #16]
	return (err == ERR_OK ? (int)written : -1);
    3aac:	b9b0      	cbnz	r0, 3adc <lwip_send+0x84>
    3aae:	9803      	ldr	r0, [sp, #12]
}
    3ab0:	b004      	add	sp, #16
    3ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return lwip_sendto(s, data, size, flags, NULL, 0);
    3ab6:	2300      	movs	r3, #0
    3ab8:	9301      	str	r3, [sp, #4]
    3aba:	9300      	str	r3, [sp, #0]
    3abc:	462b      	mov	r3, r5
    3abe:	463a      	mov	r2, r7
    3ac0:	4631      	mov	r1, r6
    3ac2:	4640      	mov	r0, r8
    3ac4:	4c0a      	ldr	r4, [pc, #40]	; (3af0 <lwip_send+0x98>)
    3ac6:	47a0      	blx	r4
    3ac8:	e7f2      	b.n	3ab0 <lwip_send+0x58>
	    = NETCONN_COPY | ((flags & MSG_MORE) ? NETCONN_MORE : 0) | ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
    3aca:	2101      	movs	r1, #1
    3acc:	e7d8      	b.n	3a80 <lwip_send+0x28>
    3ace:	2300      	movs	r3, #0
    3ad0:	e7da      	b.n	3a88 <lwip_send+0x30>
	sock_set_errno(sock, err_to_errno(err));
    3ad2:	2305      	movs	r3, #5
    3ad4:	e7e9      	b.n	3aaa <lwip_send+0x52>
		return -1;
    3ad6:	f04f 30ff 	mov.w	r0, #4294967295
    3ada:	e7e9      	b.n	3ab0 <lwip_send+0x58>
	return (err == ERR_OK ? (int)written : -1);
    3adc:	f04f 30ff 	mov.w	r0, #4294967295
    3ae0:	e7e6      	b.n	3ab0 <lwip_send+0x58>
    3ae2:	bf00      	nop
    3ae4:	00003455 	.word	0x00003455
    3ae8:	00002a01 	.word	0x00002a01
    3aec:	0000e400 	.word	0x0000e400
    3af0:	00003985 	.word	0x00003985

00003af4 <lwip_socket>:
{
    3af4:	b538      	push	{r3, r4, r5, lr}
    3af6:	4613      	mov	r3, r2
	switch (type) {
    3af8:	2902      	cmp	r1, #2
    3afa:	d018      	beq.n	3b2e <lwip_socket+0x3a>
    3afc:	2903      	cmp	r1, #3
    3afe:	d004      	beq.n	3b0a <lwip_socket+0x16>
    3b00:	2901      	cmp	r1, #1
    3b02:	d01f      	beq.n	3b44 <lwip_socket+0x50>
		return -1;
    3b04:	f04f 34ff 	mov.w	r4, #4294967295
    3b08:	e00f      	b.n	3b2a <lwip_socket+0x36>
		conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
    3b0a:	4a18      	ldr	r2, [pc, #96]	; (3b6c <lwip_socket+0x78>)
    3b0c:	b2d9      	uxtb	r1, r3
    3b0e:	2040      	movs	r0, #64	; 0x40
    3b10:	4b17      	ldr	r3, [pc, #92]	; (3b70 <lwip_socket+0x7c>)
    3b12:	4798      	blx	r3
    3b14:	4605      	mov	r5, r0
	if (!conn) {
    3b16:	b335      	cbz	r5, 3b66 <lwip_socket+0x72>
	i = alloc_socket(conn, 0);
    3b18:	2100      	movs	r1, #0
    3b1a:	4628      	mov	r0, r5
    3b1c:	4b15      	ldr	r3, [pc, #84]	; (3b74 <lwip_socket+0x80>)
    3b1e:	4798      	blx	r3
    3b20:	4604      	mov	r4, r0
	if (i == -1) {
    3b22:	f1b0 3fff 	cmp.w	r0, #4294967295
    3b26:	d01a      	beq.n	3b5e <lwip_socket+0x6a>
	conn->socket = i;
    3b28:	61a8      	str	r0, [r5, #24]
}
    3b2a:	4620      	mov	r0, r4
    3b2c:	bd38      	pop	{r3, r4, r5, pc}
		conn = netconn_new_with_callback((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    3b2e:	2a88      	cmp	r2, #136	; 0x88
    3b30:	d006      	beq.n	3b40 <lwip_socket+0x4c>
    3b32:	2020      	movs	r0, #32
    3b34:	4a0d      	ldr	r2, [pc, #52]	; (3b6c <lwip_socket+0x78>)
    3b36:	2100      	movs	r1, #0
    3b38:	4b0d      	ldr	r3, [pc, #52]	; (3b70 <lwip_socket+0x7c>)
    3b3a:	4798      	blx	r3
    3b3c:	4605      	mov	r5, r0
		break;
    3b3e:	e7ea      	b.n	3b16 <lwip_socket+0x22>
		conn = netconn_new_with_callback((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    3b40:	2021      	movs	r0, #33	; 0x21
    3b42:	e7f7      	b.n	3b34 <lwip_socket+0x40>
		conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
    3b44:	4a09      	ldr	r2, [pc, #36]	; (3b6c <lwip_socket+0x78>)
    3b46:	2100      	movs	r1, #0
    3b48:	2010      	movs	r0, #16
    3b4a:	4b09      	ldr	r3, [pc, #36]	; (3b70 <lwip_socket+0x7c>)
    3b4c:	4798      	blx	r3
		if (conn != NULL) {
    3b4e:	4605      	mov	r5, r0
    3b50:	2800      	cmp	r0, #0
    3b52:	d0e0      	beq.n	3b16 <lwip_socket+0x22>
			netconn_set_noautorecved(conn, 1);
    3b54:	7f03      	ldrb	r3, [r0, #28]
    3b56:	f043 0308 	orr.w	r3, r3, #8
    3b5a:	7703      	strb	r3, [r0, #28]
    3b5c:	e7db      	b.n	3b16 <lwip_socket+0x22>
		netconn_delete(conn);
    3b5e:	4628      	mov	r0, r5
    3b60:	4b05      	ldr	r3, [pc, #20]	; (3b78 <lwip_socket+0x84>)
    3b62:	4798      	blx	r3
		return -1;
    3b64:	e7e1      	b.n	3b2a <lwip_socket+0x36>
		return -1;
    3b66:	f04f 34ff 	mov.w	r4, #4294967295
    3b6a:	e7de      	b.n	3b2a <lwip_socket+0x36>
    3b6c:	000034ed 	.word	0x000034ed
    3b70:	000027f1 	.word	0x000027f1
    3b74:	00003481 	.word	0x00003481
    3b78:	0000284d 	.word	0x0000284d

00003b7c <lwip_setsockopt>:
{
    3b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7e:	b087      	sub	sp, #28
    3b80:	460c      	mov	r4, r1
    3b82:	4617      	mov	r7, r2
    3b84:	461e      	mov	r6, r3
	struct lwip_sock *             sock = get_socket(s);
    3b86:	4b3e      	ldr	r3, [pc, #248]	; (3c80 <lwip_setsockopt+0x104>)
    3b88:	4798      	blx	r3
	if (!sock) {
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d074      	beq.n	3c78 <lwip_setsockopt+0xfc>
    3b8e:	4605      	mov	r5, r0
	if (NULL == optval) {
    3b90:	b326      	cbz	r6, 3bdc <lwip_setsockopt+0x60>
	switch (level) {
    3b92:	2c06      	cmp	r4, #6
    3b94:	d051      	beq.n	3c3a <lwip_setsockopt+0xbe>
    3b96:	f640 73ff 	movw	r3, #4095	; 0xfff
    3b9a:	429c      	cmp	r4, r3
    3b9c:	d023      	beq.n	3be6 <lwip_setsockopt+0x6a>
    3b9e:	2c00      	cmp	r4, #0
    3ba0:	d043      	beq.n	3c2a <lwip_setsockopt+0xae>
		err = ENOPROTOOPT;
    3ba2:	235c      	movs	r3, #92	; 0x5c
	if (err != ERR_OK) {
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d160      	bne.n	3c6a <lwip_setsockopt+0xee>
	data.sock = sock;
    3ba8:	9500      	str	r5, [sp, #0]
	data.level   = level;
    3baa:	9401      	str	r4, [sp, #4]
	data.optname = optname;
    3bac:	9702      	str	r7, [sp, #8]
	data.optval  = (void *)optval;
    3bae:	9603      	str	r6, [sp, #12]
	data.optlen  = &optlen;
    3bb0:	aa0c      	add	r2, sp, #48	; 0x30
    3bb2:	9204      	str	r2, [sp, #16]
	data.err     = err;
    3bb4:	f88d 3014 	strb.w	r3, [sp, #20]
	tcpip_callback(lwip_setsockopt_internal, &data);
    3bb8:	2201      	movs	r2, #1
    3bba:	4669      	mov	r1, sp
    3bbc:	4831      	ldr	r0, [pc, #196]	; (3c84 <lwip_setsockopt+0x108>)
    3bbe:	4b32      	ldr	r3, [pc, #200]	; (3c88 <lwip_setsockopt+0x10c>)
    3bc0:	4798      	blx	r3
	sys_arch_sem_wait(&sock->conn->op_completed, 0);
    3bc2:	6828      	ldr	r0, [r5, #0]
    3bc4:	2100      	movs	r1, #0
    3bc6:	300c      	adds	r0, #12
    3bc8:	4b30      	ldr	r3, [pc, #192]	; (3c8c <lwip_setsockopt+0x110>)
    3bca:	4798      	blx	r3
	err = data.err;
    3bcc:	f99d 3014 	ldrsb.w	r3, [sp, #20]
	sock_set_errno(sock, err);
    3bd0:	612b      	str	r3, [r5, #16]
	return err ? -1 : 0;
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d14d      	bne.n	3c72 <lwip_setsockopt+0xf6>
    3bd6:	2000      	movs	r0, #0
}
    3bd8:	b007      	add	sp, #28
    3bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sock_set_errno(sock, EFAULT);
    3bdc:	230e      	movs	r3, #14
    3bde:	6103      	str	r3, [r0, #16]
		return -1;
    3be0:	f04f 30ff 	mov.w	r0, #4294967295
    3be4:	e7f8      	b.n	3bd8 <lwip_setsockopt+0x5c>
		switch (optname) {
    3be6:	2f20      	cmp	r7, #32
    3be8:	d007      	beq.n	3bfa <lwip_setsockopt+0x7e>
    3bea:	f241 030a 	movw	r3, #4106	; 0x100a
    3bee:	429f      	cmp	r7, r3
    3bf0:	d008      	beq.n	3c04 <lwip_setsockopt+0x88>
    3bf2:	2f08      	cmp	r7, #8
    3bf4:	d001      	beq.n	3bfa <lwip_setsockopt+0x7e>
			err = ENOPROTOOPT;
    3bf6:	235c      	movs	r3, #92	; 0x5c
    3bf8:	e7d4      	b.n	3ba4 <lwip_setsockopt+0x28>
			if (optlen < sizeof(int)) {
    3bfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3bfc:	2b03      	cmp	r3, #3
    3bfe:	d92a      	bls.n	3c56 <lwip_setsockopt+0xda>
	err_t                          err  = ERR_OK;
    3c00:	2300      	movs	r3, #0
    3c02:	e7cf      	b.n	3ba4 <lwip_setsockopt+0x28>
			if (optlen < sizeof(int)) {
    3c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c06:	2b03      	cmp	r3, #3
    3c08:	d906      	bls.n	3c18 <lwip_setsockopt+0x9c>
	err_t                          err  = ERR_OK;
    3c0a:	2300      	movs	r3, #0
			if ((sock->conn->type != NETCONN_UDP) || ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
    3c0c:	682a      	ldr	r2, [r5, #0]
    3c0e:	7811      	ldrb	r1, [r2, #0]
    3c10:	2920      	cmp	r1, #32
    3c12:	d003      	beq.n	3c1c <lwip_setsockopt+0xa0>
				err = EAFNOSUPPORT;
    3c14:	2361      	movs	r3, #97	; 0x61
    3c16:	e7c5      	b.n	3ba4 <lwip_setsockopt+0x28>
				err = EINVAL;
    3c18:	2316      	movs	r3, #22
    3c1a:	e7f7      	b.n	3c0c <lwip_setsockopt+0x90>
			if ((sock->conn->type != NETCONN_UDP) || ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
    3c1c:	6852      	ldr	r2, [r2, #4]
    3c1e:	7c12      	ldrb	r2, [r2, #16]
    3c20:	f012 0f02 	tst.w	r2, #2
    3c24:	d0be      	beq.n	3ba4 <lwip_setsockopt+0x28>
				err = EAFNOSUPPORT;
    3c26:	2361      	movs	r3, #97	; 0x61
    3c28:	e7bc      	b.n	3ba4 <lwip_setsockopt+0x28>
		switch (optname) {
    3c2a:	1e7b      	subs	r3, r7, #1
    3c2c:	2b01      	cmp	r3, #1
    3c2e:	d814      	bhi.n	3c5a <lwip_setsockopt+0xde>
			if (optlen < sizeof(int)) {
    3c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c32:	2b03      	cmp	r3, #3
    3c34:	d913      	bls.n	3c5e <lwip_setsockopt+0xe2>
	err_t                          err  = ERR_OK;
    3c36:	2300      	movs	r3, #0
    3c38:	e7b4      	b.n	3ba4 <lwip_setsockopt+0x28>
		if (optlen < sizeof(int)) {
    3c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c3c:	2b03      	cmp	r3, #3
    3c3e:	d910      	bls.n	3c62 <lwip_setsockopt+0xe6>
		if (sock->conn->type != NETCONN_TCP)
    3c40:	6803      	ldr	r3, [r0, #0]
    3c42:	781b      	ldrb	r3, [r3, #0]
    3c44:	2b10      	cmp	r3, #16
    3c46:	d001      	beq.n	3c4c <lwip_setsockopt+0xd0>
			return 0;
    3c48:	2000      	movs	r0, #0
    3c4a:	e7c5      	b.n	3bd8 <lwip_setsockopt+0x5c>
		switch (optname) {
    3c4c:	1e7b      	subs	r3, r7, #1
    3c4e:	2b01      	cmp	r3, #1
    3c50:	d809      	bhi.n	3c66 <lwip_setsockopt+0xea>
	err_t                          err  = ERR_OK;
    3c52:	2300      	movs	r3, #0
    3c54:	e7a6      	b.n	3ba4 <lwip_setsockopt+0x28>
				err = EINVAL;
    3c56:	2316      	movs	r3, #22
    3c58:	e7a4      	b.n	3ba4 <lwip_setsockopt+0x28>
			err = ENOPROTOOPT;
    3c5a:	235c      	movs	r3, #92	; 0x5c
    3c5c:	e7a2      	b.n	3ba4 <lwip_setsockopt+0x28>
				err = EINVAL;
    3c5e:	2316      	movs	r3, #22
    3c60:	e7a0      	b.n	3ba4 <lwip_setsockopt+0x28>
			err = EINVAL;
    3c62:	2316      	movs	r3, #22
    3c64:	e79e      	b.n	3ba4 <lwip_setsockopt+0x28>
			err = ENOPROTOOPT;
    3c66:	235c      	movs	r3, #92	; 0x5c
    3c68:	e79c      	b.n	3ba4 <lwip_setsockopt+0x28>
		sock_set_errno(sock, err);
    3c6a:	612b      	str	r3, [r5, #16]
		return -1;
    3c6c:	f04f 30ff 	mov.w	r0, #4294967295
    3c70:	e7b2      	b.n	3bd8 <lwip_setsockopt+0x5c>
	return err ? -1 : 0;
    3c72:	f04f 30ff 	mov.w	r0, #4294967295
    3c76:	e7af      	b.n	3bd8 <lwip_setsockopt+0x5c>
		return -1;
    3c78:	f04f 30ff 	mov.w	r0, #4294967295
    3c7c:	e7ac      	b.n	3bd8 <lwip_setsockopt+0x5c>
    3c7e:	bf00      	nop
    3c80:	00003455 	.word	0x00003455
    3c84:	000035ed 	.word	0x000035ed
    3c88:	00003dbd 	.word	0x00003dbd
    3c8c:	00002509 	.word	0x00002509

00003c90 <tcpip_thread>:
 * thread context.
 *
 * @param arg unused argument
 */
static void tcpip_thread(void *arg)
{
    3c90:	b500      	push	{lr}
    3c92:	b083      	sub	sp, #12
	struct tcpip_msg *msg;
	LWIP_UNUSED_ARG(arg);

	if (tcpip_init_done != NULL) {
    3c94:	4b29      	ldr	r3, [pc, #164]	; (3d3c <tcpip_thread+0xac>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	b13b      	cbz	r3, 3caa <tcpip_thread+0x1a>
		tcpip_init_done(tcpip_init_done_arg);
    3c9a:	4a28      	ldr	r2, [pc, #160]	; (3d3c <tcpip_thread+0xac>)
    3c9c:	6850      	ldr	r0, [r2, #4]
    3c9e:	4798      	blx	r3
    3ca0:	e003      	b.n	3caa <tcpip_thread+0x1a>
		LOCK_TCPIP_CORE();
		switch (msg->type) {
#if LWIP_NETCONN
		case TCPIP_MSG_API:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
			msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
    3ca2:	6898      	ldr	r0, [r3, #8]
    3ca4:	f850 3b04 	ldr.w	r3, [r0], #4
    3ca8:	4798      	blx	r3
		sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
    3caa:	a901      	add	r1, sp, #4
    3cac:	4824      	ldr	r0, [pc, #144]	; (3d40 <tcpip_thread+0xb0>)
    3cae:	4b25      	ldr	r3, [pc, #148]	; (3d44 <tcpip_thread+0xb4>)
    3cb0:	4798      	blx	r3
		switch (msg->type) {
    3cb2:	9b01      	ldr	r3, [sp, #4]
    3cb4:	781a      	ldrb	r2, [r3, #0]
    3cb6:	2a05      	cmp	r2, #5
    3cb8:	d8f7      	bhi.n	3caa <tcpip_thread+0x1a>
    3cba:	a101      	add	r1, pc, #4	; (adr r1, 3cc0 <tcpip_thread+0x30>)
    3cbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3cc0:	00003ca3 	.word	0x00003ca3
    3cc4:	00003cd9 	.word	0x00003cd9
    3cc8:	00003cfd 	.word	0x00003cfd
    3ccc:	00003d11 	.word	0x00003d11
    3cd0:	00003d23 	.word	0x00003d23
    3cd4:	00003d33 	.word	0x00003d33

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
		case TCPIP_MSG_INPKT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
			if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
    3cd8:	68d9      	ldr	r1, [r3, #12]
    3cda:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    3cde:	f012 0f60 	tst.w	r2, #96	; 0x60
    3ce2:	d007      	beq.n	3cf4 <tcpip_thread+0x64>
				ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
    3ce4:	6898      	ldr	r0, [r3, #8]
    3ce6:	4b18      	ldr	r3, [pc, #96]	; (3d48 <tcpip_thread+0xb8>)
    3ce8:	4798      	blx	r3
			} else
#endif /* LWIP_ETHERNET */
			{
				ip_input(msg->msg.inp.p, msg->msg.inp.netif);
			}
			memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    3cea:	9901      	ldr	r1, [sp, #4]
    3cec:	2009      	movs	r0, #9
    3cee:	4b17      	ldr	r3, [pc, #92]	; (3d4c <tcpip_thread+0xbc>)
    3cf0:	4798      	blx	r3
			break;
    3cf2:	e7da      	b.n	3caa <tcpip_thread+0x1a>
				ip_input(msg->msg.inp.p, msg->msg.inp.netif);
    3cf4:	6898      	ldr	r0, [r3, #8]
    3cf6:	4b16      	ldr	r3, [pc, #88]	; (3d50 <tcpip_thread+0xc0>)
    3cf8:	4798      	blx	r3
    3cfa:	e7f6      	b.n	3cea <tcpip_thread+0x5a>
#endif /* LWIP_NETIF_API */

#if LWIP_TCPIP_TIMEOUT
		case TCPIP_MSG_TIMEOUT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
			sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
    3cfc:	691a      	ldr	r2, [r3, #16]
    3cfe:	68d9      	ldr	r1, [r3, #12]
    3d00:	6898      	ldr	r0, [r3, #8]
    3d02:	4b14      	ldr	r3, [pc, #80]	; (3d54 <tcpip_thread+0xc4>)
    3d04:	4798      	blx	r3
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3d06:	9901      	ldr	r1, [sp, #4]
    3d08:	2008      	movs	r0, #8
    3d0a:	4b10      	ldr	r3, [pc, #64]	; (3d4c <tcpip_thread+0xbc>)
    3d0c:	4798      	blx	r3
			break;
    3d0e:	e7cc      	b.n	3caa <tcpip_thread+0x1a>
		case TCPIP_MSG_UNTIMEOUT:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
			sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
    3d10:	6919      	ldr	r1, [r3, #16]
    3d12:	68d8      	ldr	r0, [r3, #12]
    3d14:	4b10      	ldr	r3, [pc, #64]	; (3d58 <tcpip_thread+0xc8>)
    3d16:	4798      	blx	r3
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3d18:	9901      	ldr	r1, [sp, #4]
    3d1a:	2008      	movs	r0, #8
    3d1c:	4b0b      	ldr	r3, [pc, #44]	; (3d4c <tcpip_thread+0xbc>)
    3d1e:	4798      	blx	r3
			break;
    3d20:	e7c3      	b.n	3caa <tcpip_thread+0x1a>
#endif /* LWIP_TCPIP_TIMEOUT */

		case TCPIP_MSG_CALLBACK:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
			msg->msg.cb.function(msg->msg.cb.ctx);
    3d22:	689a      	ldr	r2, [r3, #8]
    3d24:	68d8      	ldr	r0, [r3, #12]
    3d26:	4790      	blx	r2
			memp_free(MEMP_TCPIP_MSG_API, msg);
    3d28:	9901      	ldr	r1, [sp, #4]
    3d2a:	2008      	movs	r0, #8
    3d2c:	4b07      	ldr	r3, [pc, #28]	; (3d4c <tcpip_thread+0xbc>)
    3d2e:	4798      	blx	r3
			break;
    3d30:	e7bb      	b.n	3caa <tcpip_thread+0x1a>

		case TCPIP_MSG_CALLBACK_STATIC:
			LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
			msg->msg.cb.function(msg->msg.cb.ctx);
    3d32:	689a      	ldr	r2, [r3, #8]
    3d34:	68d8      	ldr	r0, [r3, #12]
    3d36:	4790      	blx	r2
			break;
    3d38:	e7b7      	b.n	3caa <tcpip_thread+0x1a>
    3d3a:	bf00      	nop
    3d3c:	200015e0 	.word	0x200015e0
    3d40:	200015e8 	.word	0x200015e8
    3d44:	000090f9 	.word	0x000090f9
    3d48:	00009dc1 	.word	0x00009dc1
    3d4c:	00005d31 	.word	0x00005d31
    3d50:	00004e05 	.word	0x00004e05
    3d54:	00008ef9 	.word	0x00008ef9
    3d58:	000090a9 	.word	0x000090a9

00003d5c <tcpip_input>:
 *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t tcpip_input(struct pbuf *p, struct netif *inp)
{
    3d5c:	b570      	push	{r4, r5, r6, lr}
    3d5e:	4606      	mov	r6, r0
    3d60:	460d      	mov	r5, r1
	UNLOCK_TCPIP_CORE();
	return ret;
#else  /* LWIP_TCPIP_CORE_LOCKING_INPUT */
	struct tcpip_msg *msg;

	if (!sys_mbox_valid(&mbox)) {
    3d62:	4811      	ldr	r0, [pc, #68]	; (3da8 <tcpip_input+0x4c>)
    3d64:	4b11      	ldr	r3, [pc, #68]	; (3dac <tcpip_input+0x50>)
    3d66:	4798      	blx	r3
    3d68:	b1b8      	cbz	r0, 3d9a <tcpip_input+0x3e>
		return ERR_VAL;
	}
	msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
    3d6a:	2009      	movs	r0, #9
    3d6c:	4b10      	ldr	r3, [pc, #64]	; (3db0 <tcpip_input+0x54>)
    3d6e:	4798      	blx	r3
	if (msg == NULL) {
    3d70:	4604      	mov	r4, r0
    3d72:	b1a8      	cbz	r0, 3da0 <tcpip_input+0x44>
		return ERR_MEM;
	}

	msg->type          = TCPIP_MSG_INPKT;
    3d74:	2301      	movs	r3, #1
    3d76:	7003      	strb	r3, [r0, #0]
	msg->msg.inp.p     = p;
    3d78:	6086      	str	r6, [r0, #8]
	msg->msg.inp.netif = inp;
    3d7a:	60c5      	str	r5, [r0, #12]
	if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
    3d7c:	4601      	mov	r1, r0
    3d7e:	480a      	ldr	r0, [pc, #40]	; (3da8 <tcpip_input+0x4c>)
    3d80:	4b0c      	ldr	r3, [pc, #48]	; (3db4 <tcpip_input+0x58>)
    3d82:	4798      	blx	r3
    3d84:	4603      	mov	r3, r0
    3d86:	b908      	cbnz	r0, 3d8c <tcpip_input+0x30>
		memp_free(MEMP_TCPIP_MSG_INPKT, msg);
		return ERR_MEM;
	}
	return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
    3d88:	4618      	mov	r0, r3
    3d8a:	bd70      	pop	{r4, r5, r6, pc}
		memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    3d8c:	4621      	mov	r1, r4
    3d8e:	2009      	movs	r0, #9
    3d90:	4b09      	ldr	r3, [pc, #36]	; (3db8 <tcpip_input+0x5c>)
    3d92:	4798      	blx	r3
		return ERR_MEM;
    3d94:	f04f 33ff 	mov.w	r3, #4294967295
    3d98:	e7f6      	b.n	3d88 <tcpip_input+0x2c>
		return ERR_VAL;
    3d9a:	f06f 0305 	mvn.w	r3, #5
    3d9e:	e7f3      	b.n	3d88 <tcpip_input+0x2c>
		return ERR_MEM;
    3da0:	f04f 33ff 	mov.w	r3, #4294967295
    3da4:	e7f0      	b.n	3d88 <tcpip_input+0x2c>
    3da6:	bf00      	nop
    3da8:	200015e8 	.word	0x200015e8
    3dac:	000026e1 	.word	0x000026e1
    3db0:	00005d09 	.word	0x00005d09
    3db4:	000025cd 	.word	0x000025cd
    3db8:	00005d31 	.word	0x00005d31

00003dbc <tcpip_callback_with_block>:
 * @param ctx parameter passed to f
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
    3dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dbe:	4607      	mov	r7, r0
    3dc0:	460e      	mov	r6, r1
    3dc2:	4615      	mov	r5, r2
	struct tcpip_msg *msg;

	if (sys_mbox_valid(&mbox)) {
    3dc4:	4814      	ldr	r0, [pc, #80]	; (3e18 <tcpip_callback_with_block+0x5c>)
    3dc6:	4b15      	ldr	r3, [pc, #84]	; (3e1c <tcpip_callback_with_block+0x60>)
    3dc8:	4798      	blx	r3
    3dca:	b1f0      	cbz	r0, 3e0a <tcpip_callback_with_block+0x4e>
		msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
    3dcc:	2008      	movs	r0, #8
    3dce:	4b14      	ldr	r3, [pc, #80]	; (3e20 <tcpip_callback_with_block+0x64>)
    3dd0:	4798      	blx	r3
		if (msg == NULL) {
    3dd2:	4604      	mov	r4, r0
    3dd4:	b1e0      	cbz	r0, 3e10 <tcpip_callback_with_block+0x54>
			return ERR_MEM;
		}

		msg->type            = TCPIP_MSG_CALLBACK;
    3dd6:	2304      	movs	r3, #4
    3dd8:	7003      	strb	r3, [r0, #0]
		msg->msg.cb.function = function;
    3dda:	6087      	str	r7, [r0, #8]
		msg->msg.cb.ctx      = ctx;
    3ddc:	60c6      	str	r6, [r0, #12]
		if (block) {
    3dde:	b93d      	cbnz	r5, 3df0 <tcpip_callback_with_block+0x34>
			sys_mbox_post(&mbox, msg);
		} else {
			if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
    3de0:	4601      	mov	r1, r0
    3de2:	480d      	ldr	r0, [pc, #52]	; (3e18 <tcpip_callback_with_block+0x5c>)
    3de4:	4b0f      	ldr	r3, [pc, #60]	; (3e24 <tcpip_callback_with_block+0x68>)
    3de6:	4798      	blx	r3
    3de8:	4603      	mov	r3, r0
    3dea:	b938      	cbnz	r0, 3dfc <tcpip_callback_with_block+0x40>
			}
		}
		return ERR_OK;
	}
	return ERR_VAL;
}
    3dec:	4618      	mov	r0, r3
    3dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sys_mbox_post(&mbox, msg);
    3df0:	4601      	mov	r1, r0
    3df2:	4809      	ldr	r0, [pc, #36]	; (3e18 <tcpip_callback_with_block+0x5c>)
    3df4:	4b0c      	ldr	r3, [pc, #48]	; (3e28 <tcpip_callback_with_block+0x6c>)
    3df6:	4798      	blx	r3
		return ERR_OK;
    3df8:	2300      	movs	r3, #0
    3dfa:	e7f7      	b.n	3dec <tcpip_callback_with_block+0x30>
				memp_free(MEMP_TCPIP_MSG_API, msg);
    3dfc:	4621      	mov	r1, r4
    3dfe:	2008      	movs	r0, #8
    3e00:	4b0a      	ldr	r3, [pc, #40]	; (3e2c <tcpip_callback_with_block+0x70>)
    3e02:	4798      	blx	r3
				return ERR_MEM;
    3e04:	f04f 33ff 	mov.w	r3, #4294967295
    3e08:	e7f0      	b.n	3dec <tcpip_callback_with_block+0x30>
	return ERR_VAL;
    3e0a:	f06f 0305 	mvn.w	r3, #5
    3e0e:	e7ed      	b.n	3dec <tcpip_callback_with_block+0x30>
			return ERR_MEM;
    3e10:	f04f 33ff 	mov.w	r3, #4294967295
    3e14:	e7ea      	b.n	3dec <tcpip_callback_with_block+0x30>
    3e16:	bf00      	nop
    3e18:	200015e8 	.word	0x200015e8
    3e1c:	000026e1 	.word	0x000026e1
    3e20:	00005d09 	.word	0x00005d09
    3e24:	000025cd 	.word	0x000025cd
    3e28:	000025a9 	.word	0x000025a9
    3e2c:	00005d31 	.word	0x00005d31

00003e30 <tcpip_apimsg>:
 *
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t tcpip_apimsg(struct api_msg *apimsg)
{
    3e30:	b530      	push	{r4, r5, lr}
    3e32:	b087      	sub	sp, #28
    3e34:	4604      	mov	r4, r0
#ifdef LWIP_DEBUG
	/* catch functions that don't set err */
	apimsg->msg.err = ERR_VAL;
#endif

	if (sys_mbox_valid(&mbox)) {
    3e36:	480c      	ldr	r0, [pc, #48]	; (3e68 <tcpip_apimsg+0x38>)
    3e38:	4b0c      	ldr	r3, [pc, #48]	; (3e6c <tcpip_apimsg+0x3c>)
    3e3a:	4798      	blx	r3
    3e3c:	b180      	cbz	r0, 3e60 <tcpip_apimsg+0x30>
		msg.type       = TCPIP_MSG_API;
    3e3e:	2500      	movs	r5, #0
    3e40:	f88d 5004 	strb.w	r5, [sp, #4]
		msg.msg.apimsg = apimsg;
    3e44:	9403      	str	r4, [sp, #12]
		sys_mbox_post(&mbox, &msg);
    3e46:	a901      	add	r1, sp, #4
    3e48:	4807      	ldr	r0, [pc, #28]	; (3e68 <tcpip_apimsg+0x38>)
    3e4a:	4b09      	ldr	r3, [pc, #36]	; (3e70 <tcpip_apimsg+0x40>)
    3e4c:	4798      	blx	r3
		sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
    3e4e:	6860      	ldr	r0, [r4, #4]
    3e50:	4629      	mov	r1, r5
    3e52:	300c      	adds	r0, #12
    3e54:	4b07      	ldr	r3, [pc, #28]	; (3e74 <tcpip_apimsg+0x44>)
    3e56:	4798      	blx	r3
		return apimsg->msg.err;
    3e58:	f994 0008 	ldrsb.w	r0, [r4, #8]
	}
	return ERR_VAL;
}
    3e5c:	b007      	add	sp, #28
    3e5e:	bd30      	pop	{r4, r5, pc}
	return ERR_VAL;
    3e60:	f06f 0005 	mvn.w	r0, #5
    3e64:	e7fa      	b.n	3e5c <tcpip_apimsg+0x2c>
    3e66:	bf00      	nop
    3e68:	200015e8 	.word	0x200015e8
    3e6c:	000026e1 	.word	0x000026e1
    3e70:	000025a9 	.word	0x000025a9
    3e74:	00002509 	.word	0x00002509

00003e78 <tcpip_init>:
 *
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
    3e78:	b530      	push	{r4, r5, lr}
    3e7a:	b083      	sub	sp, #12
    3e7c:	4605      	mov	r5, r0
    3e7e:	460c      	mov	r4, r1
	lwip_init();
    3e80:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <tcpip_init+0x30>)
    3e82:	4798      	blx	r3

	tcpip_init_done     = initfunc;
    3e84:	4809      	ldr	r0, [pc, #36]	; (3eac <tcpip_init+0x34>)
    3e86:	6005      	str	r5, [r0, #0]
	tcpip_init_done_arg = arg;
    3e88:	6044      	str	r4, [r0, #4]
	if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
    3e8a:	2110      	movs	r1, #16
    3e8c:	3008      	adds	r0, #8
    3e8e:	4b08      	ldr	r3, [pc, #32]	; (3eb0 <tcpip_init+0x38>)
    3e90:	4798      	blx	r3
	if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
		LWIP_ASSERT("failed to create lock_tcpip_core", 0);
	}
#endif /* LWIP_TCPIP_CORE_LOCKING */

	sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
    3e92:	2301      	movs	r3, #1
    3e94:	9300      	str	r3, [sp, #0]
    3e96:	f44f 6383 	mov.w	r3, #1048	; 0x418
    3e9a:	2200      	movs	r2, #0
    3e9c:	4905      	ldr	r1, [pc, #20]	; (3eb4 <tcpip_init+0x3c>)
    3e9e:	4806      	ldr	r0, [pc, #24]	; (3eb8 <tcpip_init+0x40>)
    3ea0:	4c06      	ldr	r4, [pc, #24]	; (3ebc <tcpip_init+0x44>)
    3ea2:	47a0      	blx	r4
}
    3ea4:	b003      	add	sp, #12
    3ea6:	bd30      	pop	{r4, r5, pc}
    3ea8:	000049c1 	.word	0x000049c1
    3eac:	200015e0 	.word	0x200015e0
    3eb0:	00002575 	.word	0x00002575
    3eb4:	00003c91 	.word	0x00003c91
    3eb8:	0000e440 	.word	0x0000e440
    3ebc:	000026ed 	.word	0x000026ed

00003ec0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t lwip_htons(u16_t n)
{
	return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
    3ec0:	0a03      	lsrs	r3, r0, #8
    3ec2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
    3ec6:	b280      	uxth	r0, r0
    3ec8:	4770      	bx	lr
	...

00003ecc <lwip_ntohs>:
 *
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t lwip_ntohs(u16_t n)
{
    3ecc:	b508      	push	{r3, lr}
	return lwip_htons(n);
    3ece:	4b01      	ldr	r3, [pc, #4]	; (3ed4 <lwip_ntohs+0x8>)
    3ed0:	4798      	blx	r3
}
    3ed2:	bd08      	pop	{r3, pc}
    3ed4:	00003ec1 	.word	0x00003ec1

00003ed8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t lwip_htonl(u32_t n)
{
	return ((n & 0xff) << 24) | ((n & 0xff00) << 8) | ((n & 0xff0000UL) >> 8) | ((n & 0xff000000UL) >> 24);
    3ed8:	0203      	lsls	r3, r0, #8
    3eda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3ede:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    3ee2:	0a02      	lsrs	r2, r0, #8
    3ee4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    3ee8:	4313      	orrs	r3, r2
}
    3eea:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
    3eee:	4770      	bx	lr

00003ef0 <lwip_ntohl>:
 *
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t lwip_ntohl(u32_t n)
{
    3ef0:	b508      	push	{r3, lr}
	return lwip_htonl(n);
    3ef2:	4b01      	ldr	r3, [pc, #4]	; (3ef8 <lwip_ntohl+0x8>)
    3ef4:	4798      	blx	r3
}
    3ef6:	bd08      	pop	{r3, pc}
    3ef8:	00003ed9 	.word	0x00003ed9

00003efc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
	if (new_state != dhcp->state) {
    3efc:	7b03      	ldrb	r3, [r0, #12]
    3efe:	428b      	cmp	r3, r1
    3f00:	d003      	beq.n	3f0a <dhcp_set_state+0xe>
		dhcp->state           = new_state;
    3f02:	7301      	strb	r1, [r0, #12]
		dhcp->tries           = 0;
    3f04:	2300      	movs	r3, #0
    3f06:	7343      	strb	r3, [r0, #13]
		dhcp->request_timeout = 0;
    3f08:	8343      	strh	r3, [r0, #26]
    3f0a:	4770      	bx	lr

00003f0c <dhcp_option>:
 * Concatenate an option type and length field to the outgoing
 * DHCP message.
 *
 */
static void dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
    3f0c:	b430      	push	{r4, r5}
	LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN",
	            dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
	dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
    3f0e:	6943      	ldr	r3, [r0, #20]
    3f10:	8b04      	ldrh	r4, [r0, #24]
    3f12:	1c65      	adds	r5, r4, #1
    3f14:	8305      	strh	r5, [r0, #24]
    3f16:	4423      	add	r3, r4
    3f18:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
	dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
    3f1c:	6943      	ldr	r3, [r0, #20]
    3f1e:	8b01      	ldrh	r1, [r0, #24]
    3f20:	1c4c      	adds	r4, r1, #1
    3f22:	8304      	strh	r4, [r0, #24]
    3f24:	440b      	add	r3, r1
    3f26:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
    3f2a:	bc30      	pop	{r4, r5}
    3f2c:	4770      	bx	lr

00003f2e <dhcp_option_byte>:
/*
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
    3f2e:	b410      	push	{r4}
	LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
	dhcp->msg_out->options[dhcp->options_out_len++] = value;
    3f30:	6943      	ldr	r3, [r0, #20]
    3f32:	8b02      	ldrh	r2, [r0, #24]
    3f34:	1c54      	adds	r4, r2, #1
    3f36:	8304      	strh	r4, [r0, #24]
    3f38:	4413      	add	r3, r2
    3f3a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
    3f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3f42:	4770      	bx	lr

00003f44 <dhcp_option_short>:

static void dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
    3f44:	b410      	push	{r4}
	LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN",
	            dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
    3f46:	6943      	ldr	r3, [r0, #20]
    3f48:	8b02      	ldrh	r2, [r0, #24]
    3f4a:	1c54      	adds	r4, r2, #1
    3f4c:	8304      	strh	r4, [r0, #24]
    3f4e:	0a0c      	lsrs	r4, r1, #8
    3f50:	4413      	add	r3, r2
    3f52:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)(value & 0x00ffU);
    3f56:	6943      	ldr	r3, [r0, #20]
    3f58:	8b02      	ldrh	r2, [r0, #24]
    3f5a:	1c54      	adds	r4, r2, #1
    3f5c:	8304      	strh	r4, [r0, #24]
    3f5e:	4413      	add	r3, r2
    3f60:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
    3f64:	f85d 4b04 	ldr.w	r4, [sp], #4
    3f68:	4770      	bx	lr

00003f6a <dhcp_option_long>:

static void dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
    3f6a:	b410      	push	{r4}
	LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN",
	            dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
    3f6c:	6943      	ldr	r3, [r0, #20]
    3f6e:	8b02      	ldrh	r2, [r0, #24]
    3f70:	1c54      	adds	r4, r2, #1
    3f72:	8304      	strh	r4, [r0, #24]
    3f74:	0e0c      	lsrs	r4, r1, #24
    3f76:	4413      	add	r3, r2
    3f78:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
    3f7c:	6943      	ldr	r3, [r0, #20]
    3f7e:	8b02      	ldrh	r2, [r0, #24]
    3f80:	1c54      	adds	r4, r2, #1
    3f82:	8304      	strh	r4, [r0, #24]
    3f84:	f3c1 4407 	ubfx	r4, r1, #16, #8
    3f88:	4413      	add	r3, r2
    3f8a:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
    3f8e:	6943      	ldr	r3, [r0, #20]
    3f90:	8b02      	ldrh	r2, [r0, #24]
    3f92:	1c54      	adds	r4, r2, #1
    3f94:	8304      	strh	r4, [r0, #24]
    3f96:	f3c1 2407 	ubfx	r4, r1, #8, #8
    3f9a:	4413      	add	r3, r2
    3f9c:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
	dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
    3fa0:	6943      	ldr	r3, [r0, #20]
    3fa2:	8b02      	ldrh	r2, [r0, #24]
    3fa4:	1c54      	adds	r4, r2, #1
    3fa6:	8304      	strh	r4, [r0, #24]
    3fa8:	4413      	add	r3, r2
    3faa:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
}
    3fae:	f85d 4b04 	ldr.w	r4, [sp], #4
    3fb2:	4770      	bx	lr

00003fb4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void dhcp_option_trailer(struct dhcp *dhcp)
{
	LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
    3fb4:	4601      	mov	r1, r0
    3fb6:	b140      	cbz	r0, 3fca <dhcp_option_trailer+0x16>
	LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
	LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n",
	            dhcp->options_out_len < DHCP_OPTIONS_LEN);
	dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
    3fb8:	6943      	ldr	r3, [r0, #20]
    3fba:	8b02      	ldrh	r2, [r0, #24]
    3fbc:	1c50      	adds	r0, r2, #1
    3fbe:	8308      	strh	r0, [r1, #24]
    3fc0:	4413      	add	r3, r2
    3fc2:	22ff      	movs	r2, #255	; 0xff
    3fc4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	/* packet is too small, or not 4 byte aligned? */
	while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3))
    3fc8:	e009      	b.n	3fde <dhcp_option_trailer+0x2a>
    3fca:	e7fe      	b.n	3fca <dhcp_option_trailer+0x16>
	       && (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    3fcc:	2b43      	cmp	r3, #67	; 0x43
    3fce:	d80c      	bhi.n	3fea <dhcp_option_trailer+0x36>
		/* add a fill/padding byte */
		dhcp->msg_out->options[dhcp->options_out_len++] = 0;
    3fd0:	694a      	ldr	r2, [r1, #20]
    3fd2:	1c58      	adds	r0, r3, #1
    3fd4:	8308      	strh	r0, [r1, #24]
    3fd6:	4413      	add	r3, r2
    3fd8:	2200      	movs	r2, #0
    3fda:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3))
    3fde:	8b0b      	ldrh	r3, [r1, #24]
    3fe0:	2b43      	cmp	r3, #67	; 0x43
    3fe2:	d9f3      	bls.n	3fcc <dhcp_option_trailer+0x18>
    3fe4:	f013 0f03 	tst.w	r3, #3
    3fe8:	d1f0      	bne.n	3fcc <dhcp_option_trailer+0x18>
    3fea:	4770      	bx	lr

00003fec <dhcp_create_msg>:
	LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
    3fec:	2800      	cmp	r0, #0
    3fee:	d04f      	beq.n	4090 <dhcp_create_msg+0xa4>
{
    3ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff4:	4606      	mov	r6, r0
	LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
    3ff6:	2900      	cmp	r1, #0
    3ff8:	d04b      	beq.n	4092 <dhcp_create_msg+0xa6>
    3ffa:	4615      	mov	r5, r2
    3ffc:	460c      	mov	r4, r1
	dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
    3ffe:	2200      	movs	r2, #0
    4000:	f44f 719a 	mov.w	r1, #308	; 0x134
    4004:	4610      	mov	r0, r2
    4006:	4b4f      	ldr	r3, [pc, #316]	; (4144 <dhcp_create_msg+0x158>)
    4008:	4798      	blx	r3
    400a:	6120      	str	r0, [r4, #16]
	if (dhcp->p_out == NULL) {
    400c:	2800      	cmp	r0, #0
    400e:	f000 8095 	beq.w	413c <dhcp_create_msg+0x150>
	if (dhcp->tries == 0) {
    4012:	7b63      	ldrb	r3, [r4, #13]
    4014:	b91b      	cbnz	r3, 401e <dhcp_create_msg+0x32>
		xid++;
    4016:	4a4c      	ldr	r2, [pc, #304]	; (4148 <dhcp_create_msg+0x15c>)
    4018:	6813      	ldr	r3, [r2, #0]
    401a:	3301      	adds	r3, #1
    401c:	6013      	str	r3, [r2, #0]
	dhcp->xid = xid;
    401e:	4b4a      	ldr	r3, [pc, #296]	; (4148 <dhcp_create_msg+0x15c>)
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	6023      	str	r3, [r4, #0]
	dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
    4024:	6842      	ldr	r2, [r0, #4]
    4026:	6162      	str	r2, [r4, #20]
	dhcp->msg_out->op = DHCP_BOOTREQUEST;
    4028:	2301      	movs	r3, #1
    402a:	7013      	strb	r3, [r2, #0]
	dhcp->msg_out->htype = DHCP_HTYPE_ETH;
    402c:	6962      	ldr	r2, [r4, #20]
    402e:	7053      	strb	r3, [r2, #1]
	dhcp->msg_out->hlen  = netif->hwaddr_len;
    4030:	6963      	ldr	r3, [r4, #20]
    4032:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    4036:	709a      	strb	r2, [r3, #2]
	dhcp->msg_out->hops  = 0;
    4038:	6963      	ldr	r3, [r4, #20]
    403a:	2700      	movs	r7, #0
    403c:	70df      	strb	r7, [r3, #3]
	dhcp->msg_out->xid   = htonl(dhcp->xid);
    403e:	f8d4 8014 	ldr.w	r8, [r4, #20]
    4042:	6820      	ldr	r0, [r4, #0]
    4044:	4b41      	ldr	r3, [pc, #260]	; (414c <dhcp_create_msg+0x160>)
    4046:	4798      	blx	r3
    4048:	f8c8 0004 	str.w	r0, [r8, #4]
	dhcp->msg_out->secs  = 0;
    404c:	6963      	ldr	r3, [r4, #20]
    404e:	721f      	strb	r7, [r3, #8]
    4050:	725f      	strb	r7, [r3, #9]
	dhcp->msg_out->flags = 0;
    4052:	6963      	ldr	r3, [r4, #20]
    4054:	729f      	strb	r7, [r3, #10]
    4056:	72df      	strb	r7, [r3, #11]
	ip_addr_set_zero(&dhcp->msg_out->ciaddr);
    4058:	6963      	ldr	r3, [r4, #20]
    405a:	731f      	strb	r7, [r3, #12]
    405c:	735f      	strb	r7, [r3, #13]
    405e:	739f      	strb	r7, [r3, #14]
    4060:	73df      	strb	r7, [r3, #15]
	if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE)
    4062:	2d08      	cmp	r5, #8
    4064:	d01b      	beq.n	409e <dhcp_create_msg+0xb2>
    4066:	2d04      	cmp	r5, #4
    4068:	d019      	beq.n	409e <dhcp_create_msg+0xb2>
	    || ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
    406a:	2d03      	cmp	r5, #3
    406c:	d012      	beq.n	4094 <dhcp_create_msg+0xa8>
	ip_addr_set_zero(&dhcp->msg_out->yiaddr);
    406e:	6962      	ldr	r2, [r4, #20]
    4070:	2300      	movs	r3, #0
    4072:	7413      	strb	r3, [r2, #16]
    4074:	7453      	strb	r3, [r2, #17]
    4076:	7493      	strb	r3, [r2, #18]
    4078:	74d3      	strb	r3, [r2, #19]
	ip_addr_set_zero(&dhcp->msg_out->siaddr);
    407a:	6962      	ldr	r2, [r4, #20]
    407c:	7513      	strb	r3, [r2, #20]
    407e:	7553      	strb	r3, [r2, #21]
    4080:	7593      	strb	r3, [r2, #22]
    4082:	75d3      	strb	r3, [r2, #23]
	ip_addr_set_zero(&dhcp->msg_out->giaddr);
    4084:	6962      	ldr	r2, [r4, #20]
    4086:	7613      	strb	r3, [r2, #24]
    4088:	7653      	strb	r3, [r2, #25]
    408a:	7693      	strb	r3, [r2, #26]
    408c:	76d3      	strb	r3, [r2, #27]
	for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    408e:	e00f      	b.n	40b0 <dhcp_create_msg+0xc4>
    4090:	e7fe      	b.n	4090 <dhcp_create_msg+0xa4>
    4092:	e7fe      	b.n	4092 <dhcp_create_msg+0xa6>
	        ((dhcp->state == DHCP_RENEWING) || dhcp->state == DHCP_REBINDING))) {
    4094:	7b23      	ldrb	r3, [r4, #12]
    4096:	3b04      	subs	r3, #4
    4098:	b2db      	uxtb	r3, r3
	    || ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
    409a:	2b01      	cmp	r3, #1
    409c:	d8e7      	bhi.n	406e <dhcp_create_msg+0x82>
		ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
    409e:	6963      	ldr	r3, [r4, #20]
    40a0:	6872      	ldr	r2, [r6, #4]
    40a2:	60da      	str	r2, [r3, #12]
    40a4:	e7e3      	b.n	406e <dhcp_create_msg+0x82>
		dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0 /* pad byte*/;
    40a6:	2000      	movs	r0, #0
    40a8:	440a      	add	r2, r1
    40aa:	7710      	strb	r0, [r2, #28]
	for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    40ac:	3301      	adds	r3, #1
    40ae:	b29b      	uxth	r3, r3
    40b0:	2b0f      	cmp	r3, #15
    40b2:	d809      	bhi.n	40c8 <dhcp_create_msg+0xdc>
		dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0 /* pad byte*/;
    40b4:	6962      	ldr	r2, [r4, #20]
    40b6:	4619      	mov	r1, r3
    40b8:	f896 002a 	ldrb.w	r0, [r6, #42]	; 0x2a
    40bc:	4283      	cmp	r3, r0
    40be:	d2f2      	bcs.n	40a6 <dhcp_create_msg+0xba>
    40c0:	18f0      	adds	r0, r6, r3
    40c2:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    40c6:	e7ef      	b.n	40a8 <dhcp_create_msg+0xbc>
    40c8:	2300      	movs	r3, #0
    40ca:	e006      	b.n	40da <dhcp_create_msg+0xee>
		dhcp->msg_out->sname[i] = 0;
    40cc:	6962      	ldr	r2, [r4, #20]
    40ce:	441a      	add	r2, r3
    40d0:	2100      	movs	r1, #0
    40d2:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	for (i = 0; i < DHCP_SNAME_LEN; i++) {
    40d6:	3301      	adds	r3, #1
    40d8:	b29b      	uxth	r3, r3
    40da:	2b3f      	cmp	r3, #63	; 0x3f
    40dc:	d9f6      	bls.n	40cc <dhcp_create_msg+0xe0>
    40de:	2300      	movs	r3, #0
	for (i = 0; i < DHCP_FILE_LEN; i++) {
    40e0:	2b7f      	cmp	r3, #127	; 0x7f
    40e2:	d807      	bhi.n	40f4 <dhcp_create_msg+0x108>
		dhcp->msg_out->file[i] = 0;
    40e4:	6962      	ldr	r2, [r4, #20]
    40e6:	441a      	add	r2, r3
    40e8:	2100      	movs	r1, #0
    40ea:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
	for (i = 0; i < DHCP_FILE_LEN; i++) {
    40ee:	3301      	adds	r3, #1
    40f0:	b29b      	uxth	r3, r3
    40f2:	e7f5      	b.n	40e0 <dhcp_create_msg+0xf4>
	dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
    40f4:	6962      	ldr	r2, [r4, #20]
    40f6:	2300      	movs	r3, #0
    40f8:	2163      	movs	r1, #99	; 0x63
    40fa:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
    40fe:	f06f 007d 	mvn.w	r0, #125	; 0x7d
    4102:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
    4106:	2053      	movs	r0, #83	; 0x53
    4108:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
    410c:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
	dhcp->options_out_len = 0;
    4110:	8323      	strh	r3, [r4, #24]
	for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    4112:	e005      	b.n	4120 <dhcp_create_msg+0x134>
		dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
    4114:	6962      	ldr	r2, [r4, #20]
    4116:	441a      	add	r2, r3
    4118:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
	for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    411c:	3301      	adds	r3, #1
    411e:	b29b      	uxth	r3, r3
    4120:	2b43      	cmp	r3, #67	; 0x43
    4122:	d9f7      	bls.n	4114 <dhcp_create_msg+0x128>
	dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
    4124:	2201      	movs	r2, #1
    4126:	2135      	movs	r1, #53	; 0x35
    4128:	4620      	mov	r0, r4
    412a:	4b09      	ldr	r3, [pc, #36]	; (4150 <dhcp_create_msg+0x164>)
    412c:	4798      	blx	r3
	dhcp_option_byte(dhcp, message_type);
    412e:	4629      	mov	r1, r5
    4130:	4620      	mov	r0, r4
    4132:	4b08      	ldr	r3, [pc, #32]	; (4154 <dhcp_create_msg+0x168>)
    4134:	4798      	blx	r3
	return ERR_OK;
    4136:	2000      	movs	r0, #0
    4138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_MEM;
    413c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4144:	0000606d 	.word	0x0000606d
    4148:	2000003c 	.word	0x2000003c
    414c:	00003ed9 	.word	0x00003ed9
    4150:	00003f0d 	.word	0x00003f0d
    4154:	00003f2f 	.word	0x00003f2f

00004158 <dhcp_delete_msg>:
	LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
    4158:	b148      	cbz	r0, 416e <dhcp_delete_msg+0x16>
{
    415a:	b510      	push	{r4, lr}
    415c:	4604      	mov	r4, r0
	if (dhcp->p_out != NULL) {
    415e:	6900      	ldr	r0, [r0, #16]
    4160:	b108      	cbz	r0, 4166 <dhcp_delete_msg+0xe>
		pbuf_free(dhcp->p_out);
    4162:	4b03      	ldr	r3, [pc, #12]	; (4170 <dhcp_delete_msg+0x18>)
    4164:	4798      	blx	r3
	dhcp->p_out   = NULL;
    4166:	2300      	movs	r3, #0
    4168:	6123      	str	r3, [r4, #16]
	dhcp->msg_out = NULL;
    416a:	6163      	str	r3, [r4, #20]
    416c:	bd10      	pop	{r4, pc}
    416e:	e7fe      	b.n	416e <dhcp_delete_msg+0x16>
    4170:	00006009 	.word	0x00006009

00004174 <dhcp_rebind>:
{
    4174:	b570      	push	{r4, r5, r6, lr}
    4176:	b082      	sub	sp, #8
    4178:	4606      	mov	r6, r0
	struct dhcp *dhcp = netif->dhcp;
    417a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_REBINDING);
    417c:	2104      	movs	r1, #4
    417e:	4620      	mov	r0, r4
    4180:	4b20      	ldr	r3, [pc, #128]	; (4204 <dhcp_rebind+0x90>)
    4182:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    4184:	2203      	movs	r2, #3
    4186:	4621      	mov	r1, r4
    4188:	4630      	mov	r0, r6
    418a:	4b1f      	ldr	r3, [pc, #124]	; (4208 <dhcp_rebind+0x94>)
    418c:	4798      	blx	r3
	if (result == ERR_OK) {
    418e:	4605      	mov	r5, r0
    4190:	b1c0      	cbz	r0, 41c4 <dhcp_rebind+0x50>
	dhcp->tries++;
    4192:	7b63      	ldrb	r3, [r4, #13]
    4194:	3301      	adds	r3, #1
    4196:	b2db      	uxtb	r3, r3
    4198:	7363      	strb	r3, [r4, #13]
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    419a:	2b09      	cmp	r3, #9
    419c:	d82f      	bhi.n	41fe <dhcp_rebind+0x8a>
    419e:	b29b      	uxth	r3, r3
    41a0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    41a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    41a8:	00da      	lsls	r2, r3, #3
    41aa:	b293      	uxth	r3, r2
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    41ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    41b0:	4a16      	ldr	r2, [pc, #88]	; (420c <dhcp_rebind+0x98>)
    41b2:	fb82 1203 	smull	r1, r2, r2, r3
    41b6:	17db      	asrs	r3, r3, #31
    41b8:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    41bc:	8363      	strh	r3, [r4, #26]
}
    41be:	4628      	mov	r0, r5
    41c0:	b002      	add	sp, #8
    41c2:	bd70      	pop	{r4, r5, r6, pc}
		dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    41c4:	2202      	movs	r2, #2
    41c6:	2139      	movs	r1, #57	; 0x39
    41c8:	4620      	mov	r0, r4
    41ca:	4b11      	ldr	r3, [pc, #68]	; (4210 <dhcp_rebind+0x9c>)
    41cc:	4798      	blx	r3
		dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    41ce:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    41d0:	4620      	mov	r0, r4
    41d2:	4b10      	ldr	r3, [pc, #64]	; (4214 <dhcp_rebind+0xa0>)
    41d4:	4798      	blx	r3
		dhcp_option_trailer(dhcp);
    41d6:	4620      	mov	r0, r4
    41d8:	4b0f      	ldr	r3, [pc, #60]	; (4218 <dhcp_rebind+0xa4>)
    41da:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    41dc:	8b21      	ldrh	r1, [r4, #24]
    41de:	31f0      	adds	r1, #240	; 0xf0
    41e0:	b289      	uxth	r1, r1
    41e2:	6920      	ldr	r0, [r4, #16]
    41e4:	4b0d      	ldr	r3, [pc, #52]	; (421c <dhcp_rebind+0xa8>)
    41e6:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    41e8:	6921      	ldr	r1, [r4, #16]
    41ea:	6860      	ldr	r0, [r4, #4]
    41ec:	9600      	str	r6, [sp, #0]
    41ee:	2343      	movs	r3, #67	; 0x43
    41f0:	4a0b      	ldr	r2, [pc, #44]	; (4220 <dhcp_rebind+0xac>)
    41f2:	4e0c      	ldr	r6, [pc, #48]	; (4224 <dhcp_rebind+0xb0>)
    41f4:	47b0      	blx	r6
		dhcp_delete_msg(dhcp);
    41f6:	4620      	mov	r0, r4
    41f8:	4b0b      	ldr	r3, [pc, #44]	; (4228 <dhcp_rebind+0xb4>)
    41fa:	4798      	blx	r3
    41fc:	e7c9      	b.n	4192 <dhcp_rebind+0x1e>
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    41fe:	f242 7310 	movw	r3, #10000	; 0x2710
    4202:	e7d3      	b.n	41ac <dhcp_rebind+0x38>
    4204:	00003efd 	.word	0x00003efd
    4208:	00003fed 	.word	0x00003fed
    420c:	10624dd3 	.word	0x10624dd3
    4210:	00003f0d 	.word	0x00003f0d
    4214:	00003f45 	.word	0x00003f45
    4218:	00003fb5 	.word	0x00003fb5
    421c:	00006195 	.word	0x00006195
    4220:	0000e450 	.word	0x0000e450
    4224:	00009441 	.word	0x00009441
    4228:	00004159 	.word	0x00004159

0000422c <dhcp_t2_timeout>:
{
    422c:	b508      	push	{r3, lr}
	struct dhcp *dhcp = netif->dhcp;
    422e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
    4230:	7b1b      	ldrb	r3, [r3, #12]
    4232:	2b01      	cmp	r3, #1
    4234:	d003      	beq.n	423e <dhcp_t2_timeout+0x12>
    4236:	2b0a      	cmp	r3, #10
    4238:	d001      	beq.n	423e <dhcp_t2_timeout+0x12>
    423a:	2b05      	cmp	r3, #5
    423c:	d101      	bne.n	4242 <dhcp_t2_timeout+0x16>
		dhcp_rebind(netif);
    423e:	4b01      	ldr	r3, [pc, #4]	; (4244 <dhcp_t2_timeout+0x18>)
    4240:	4798      	blx	r3
    4242:	bd08      	pop	{r3, pc}
    4244:	00004175 	.word	0x00004175

00004248 <dhcp_discover>:
{
    4248:	b5f0      	push	{r4, r5, r6, r7, lr}
    424a:	b083      	sub	sp, #12
    424c:	4606      	mov	r6, r0
	struct dhcp *dhcp   = netif->dhcp;
    424e:	6a44      	ldr	r4, [r0, #36]	; 0x24
	ip_addr_set_any(&dhcp->offered_ip_addr);
    4250:	2300      	movs	r3, #0
    4252:	6263      	str	r3, [r4, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_SELECTING);
    4254:	2106      	movs	r1, #6
    4256:	4620      	mov	r0, r4
    4258:	4b27      	ldr	r3, [pc, #156]	; (42f8 <dhcp_discover+0xb0>)
    425a:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
    425c:	2201      	movs	r2, #1
    425e:	4621      	mov	r1, r4
    4260:	4630      	mov	r0, r6
    4262:	4b26      	ldr	r3, [pc, #152]	; (42fc <dhcp_discover+0xb4>)
    4264:	4798      	blx	r3
	if (result == ERR_OK) {
    4266:	4605      	mov	r5, r0
    4268:	b1a8      	cbz	r0, 4296 <dhcp_discover+0x4e>
	dhcp->tries++;
    426a:	7b63      	ldrb	r3, [r4, #13]
    426c:	3301      	adds	r3, #1
    426e:	b2da      	uxtb	r2, r3
    4270:	7362      	strb	r2, [r4, #13]
	msecs                 = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    4272:	2a05      	cmp	r2, #5
    4274:	d83d      	bhi.n	42f2 <dhcp_discover+0xaa>
    4276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    427a:	4093      	lsls	r3, r2
    427c:	b29b      	uxth	r3, r3
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    427e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    4282:	4a1f      	ldr	r2, [pc, #124]	; (4300 <dhcp_discover+0xb8>)
    4284:	fb82 1203 	smull	r1, r2, r2, r3
    4288:	17db      	asrs	r3, r3, #31
    428a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    428e:	8363      	strh	r3, [r4, #26]
}
    4290:	4628      	mov	r0, r5
    4292:	b003      	add	sp, #12
    4294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    4296:	2202      	movs	r2, #2
    4298:	2139      	movs	r1, #57	; 0x39
    429a:	4620      	mov	r0, r4
    429c:	4f19      	ldr	r7, [pc, #100]	; (4304 <dhcp_discover+0xbc>)
    429e:	47b8      	blx	r7
		dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    42a0:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    42a2:	4620      	mov	r0, r4
    42a4:	4b18      	ldr	r3, [pc, #96]	; (4308 <dhcp_discover+0xc0>)
    42a6:	4798      	blx	r3
		dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4 /*num options*/);
    42a8:	2204      	movs	r2, #4
    42aa:	2137      	movs	r1, #55	; 0x37
    42ac:	4620      	mov	r0, r4
    42ae:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
    42b0:	2101      	movs	r1, #1
    42b2:	4620      	mov	r0, r4
    42b4:	4f15      	ldr	r7, [pc, #84]	; (430c <dhcp_discover+0xc4>)
    42b6:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
    42b8:	2103      	movs	r1, #3
    42ba:	4620      	mov	r0, r4
    42bc:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
    42be:	211c      	movs	r1, #28
    42c0:	4620      	mov	r0, r4
    42c2:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
    42c4:	2106      	movs	r1, #6
    42c6:	4620      	mov	r0, r4
    42c8:	47b8      	blx	r7
		dhcp_option_trailer(dhcp);
    42ca:	4620      	mov	r0, r4
    42cc:	4b10      	ldr	r3, [pc, #64]	; (4310 <dhcp_discover+0xc8>)
    42ce:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    42d0:	8b21      	ldrh	r1, [r4, #24]
    42d2:	31f0      	adds	r1, #240	; 0xf0
    42d4:	b289      	uxth	r1, r1
    42d6:	6920      	ldr	r0, [r4, #16]
    42d8:	4b0e      	ldr	r3, [pc, #56]	; (4314 <dhcp_discover+0xcc>)
    42da:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    42dc:	6921      	ldr	r1, [r4, #16]
    42de:	6860      	ldr	r0, [r4, #4]
    42e0:	9600      	str	r6, [sp, #0]
    42e2:	2343      	movs	r3, #67	; 0x43
    42e4:	4a0c      	ldr	r2, [pc, #48]	; (4318 <dhcp_discover+0xd0>)
    42e6:	4e0d      	ldr	r6, [pc, #52]	; (431c <dhcp_discover+0xd4>)
    42e8:	47b0      	blx	r6
		dhcp_delete_msg(dhcp);
    42ea:	4620      	mov	r0, r4
    42ec:	4b0c      	ldr	r3, [pc, #48]	; (4320 <dhcp_discover+0xd8>)
    42ee:	4798      	blx	r3
    42f0:	e7bb      	b.n	426a <dhcp_discover+0x22>
	msecs                 = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    42f2:	f64e 2360 	movw	r3, #60000	; 0xea60
    42f6:	e7c2      	b.n	427e <dhcp_discover+0x36>
    42f8:	00003efd 	.word	0x00003efd
    42fc:	00003fed 	.word	0x00003fed
    4300:	10624dd3 	.word	0x10624dd3
    4304:	00003f0d 	.word	0x00003f0d
    4308:	00003f45 	.word	0x00003f45
    430c:	00003f2f 	.word	0x00003f2f
    4310:	00003fb5 	.word	0x00003fb5
    4314:	00006195 	.word	0x00006195
    4318:	0000e450 	.word	0x0000e450
    431c:	00009441 	.word	0x00009441
    4320:	00004159 	.word	0x00004159

00004324 <dhcp_select>:
{
    4324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4328:	b083      	sub	sp, #12
    432a:	4606      	mov	r6, r0
	struct dhcp *dhcp = netif->dhcp;
    432c:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_REQUESTING);
    432e:	2101      	movs	r1, #1
    4330:	4620      	mov	r0, r4
    4332:	4b33      	ldr	r3, [pc, #204]	; (4400 <dhcp_select+0xdc>)
    4334:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    4336:	2203      	movs	r2, #3
    4338:	4621      	mov	r1, r4
    433a:	4630      	mov	r0, r6
    433c:	4b31      	ldr	r3, [pc, #196]	; (4404 <dhcp_select+0xe0>)
    433e:	4798      	blx	r3
	if (result == ERR_OK) {
    4340:	4605      	mov	r5, r0
    4342:	b1b0      	cbz	r0, 4372 <dhcp_select+0x4e>
	dhcp->tries++;
    4344:	7b63      	ldrb	r3, [r4, #13]
    4346:	3301      	adds	r3, #1
    4348:	b2da      	uxtb	r2, r3
    434a:	7362      	strb	r2, [r4, #13]
	msecs                 = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    434c:	2a05      	cmp	r2, #5
    434e:	d854      	bhi.n	43fa <dhcp_select+0xd6>
    4350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4354:	4093      	lsls	r3, r2
    4356:	b29b      	uxth	r3, r3
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    4358:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    435c:	4a2a      	ldr	r2, [pc, #168]	; (4408 <dhcp_select+0xe4>)
    435e:	fb82 1203 	smull	r1, r2, r2, r3
    4362:	17db      	asrs	r3, r3, #31
    4364:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    4368:	8363      	strh	r3, [r4, #26]
}
    436a:	4628      	mov	r0, r5
    436c:	b003      	add	sp, #12
    436e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    4372:	2202      	movs	r2, #2
    4374:	2139      	movs	r1, #57	; 0x39
    4376:	4620      	mov	r0, r4
    4378:	4f24      	ldr	r7, [pc, #144]	; (440c <dhcp_select+0xe8>)
    437a:	47b8      	blx	r7
		dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    437c:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    437e:	4620      	mov	r0, r4
    4380:	4b23      	ldr	r3, [pc, #140]	; (4410 <dhcp_select+0xec>)
    4382:	4798      	blx	r3
		dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    4384:	2204      	movs	r2, #4
    4386:	2132      	movs	r1, #50	; 0x32
    4388:	4620      	mov	r0, r4
    438a:	47b8      	blx	r7
		dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    438c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    438e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 442c <dhcp_select+0x108>
    4392:	47c8      	blx	r9
    4394:	4601      	mov	r1, r0
    4396:	4620      	mov	r0, r4
    4398:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4430 <dhcp_select+0x10c>
    439c:	47c0      	blx	r8
		dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    439e:	2204      	movs	r2, #4
    43a0:	2136      	movs	r1, #54	; 0x36
    43a2:	4620      	mov	r0, r4
    43a4:	47b8      	blx	r7
		dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
    43a6:	6a20      	ldr	r0, [r4, #32]
    43a8:	47c8      	blx	r9
    43aa:	4601      	mov	r1, r0
    43ac:	4620      	mov	r0, r4
    43ae:	47c0      	blx	r8
		dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4 /*num options*/);
    43b0:	2204      	movs	r2, #4
    43b2:	2137      	movs	r1, #55	; 0x37
    43b4:	4620      	mov	r0, r4
    43b6:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
    43b8:	2101      	movs	r1, #1
    43ba:	4620      	mov	r0, r4
    43bc:	4f15      	ldr	r7, [pc, #84]	; (4414 <dhcp_select+0xf0>)
    43be:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
    43c0:	2103      	movs	r1, #3
    43c2:	4620      	mov	r0, r4
    43c4:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
    43c6:	211c      	movs	r1, #28
    43c8:	4620      	mov	r0, r4
    43ca:	47b8      	blx	r7
		dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
    43cc:	2106      	movs	r1, #6
    43ce:	4620      	mov	r0, r4
    43d0:	47b8      	blx	r7
		dhcp_option_trailer(dhcp);
    43d2:	4620      	mov	r0, r4
    43d4:	4b10      	ldr	r3, [pc, #64]	; (4418 <dhcp_select+0xf4>)
    43d6:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    43d8:	8b21      	ldrh	r1, [r4, #24]
    43da:	31f0      	adds	r1, #240	; 0xf0
    43dc:	b289      	uxth	r1, r1
    43de:	6920      	ldr	r0, [r4, #16]
    43e0:	4b0e      	ldr	r3, [pc, #56]	; (441c <dhcp_select+0xf8>)
    43e2:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    43e4:	6921      	ldr	r1, [r4, #16]
    43e6:	6860      	ldr	r0, [r4, #4]
    43e8:	9600      	str	r6, [sp, #0]
    43ea:	2343      	movs	r3, #67	; 0x43
    43ec:	4a0c      	ldr	r2, [pc, #48]	; (4420 <dhcp_select+0xfc>)
    43ee:	4e0d      	ldr	r6, [pc, #52]	; (4424 <dhcp_select+0x100>)
    43f0:	47b0      	blx	r6
		dhcp_delete_msg(dhcp);
    43f2:	4620      	mov	r0, r4
    43f4:	4b0c      	ldr	r3, [pc, #48]	; (4428 <dhcp_select+0x104>)
    43f6:	4798      	blx	r3
    43f8:	e7a4      	b.n	4344 <dhcp_select+0x20>
	msecs                 = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
    43fa:	f64e 2360 	movw	r3, #60000	; 0xea60
    43fe:	e7ab      	b.n	4358 <dhcp_select+0x34>
    4400:	00003efd 	.word	0x00003efd
    4404:	00003fed 	.word	0x00003fed
    4408:	10624dd3 	.word	0x10624dd3
    440c:	00003f0d 	.word	0x00003f0d
    4410:	00003f45 	.word	0x00003f45
    4414:	00003f2f 	.word	0x00003f2f
    4418:	00003fb5 	.word	0x00003fb5
    441c:	00006195 	.word	0x00006195
    4420:	0000e450 	.word	0x0000e450
    4424:	00009441 	.word	0x00009441
    4428:	00004159 	.word	0x00004159
    442c:	00003ef1 	.word	0x00003ef1
    4430:	00003f6b 	.word	0x00003f6b

00004434 <dhcp_reboot>:
{
    4434:	b5f0      	push	{r4, r5, r6, r7, lr}
    4436:	b083      	sub	sp, #12
    4438:	4606      	mov	r6, r0
	struct dhcp *dhcp = netif->dhcp;
    443a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_REBOOTING);
    443c:	2103      	movs	r1, #3
    443e:	4620      	mov	r0, r4
    4440:	4b26      	ldr	r3, [pc, #152]	; (44dc <dhcp_reboot+0xa8>)
    4442:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    4444:	2203      	movs	r2, #3
    4446:	4621      	mov	r1, r4
    4448:	4630      	mov	r0, r6
    444a:	4b25      	ldr	r3, [pc, #148]	; (44e0 <dhcp_reboot+0xac>)
    444c:	4798      	blx	r3
	if (result == ERR_OK) {
    444e:	4605      	mov	r5, r0
    4450:	b1c0      	cbz	r0, 4484 <dhcp_reboot+0x50>
	dhcp->tries++;
    4452:	7b63      	ldrb	r3, [r4, #13]
    4454:	3301      	adds	r3, #1
    4456:	b2db      	uxtb	r3, r3
    4458:	7363      	strb	r3, [r4, #13]
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    445a:	2b09      	cmp	r3, #9
    445c:	d83b      	bhi.n	44d6 <dhcp_reboot+0xa2>
    445e:	b29b      	uxth	r3, r3
    4460:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    4464:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4468:	00da      	lsls	r2, r3, #3
    446a:	b293      	uxth	r3, r2
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    446c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    4470:	4a1c      	ldr	r2, [pc, #112]	; (44e4 <dhcp_reboot+0xb0>)
    4472:	fb82 1203 	smull	r1, r2, r2, r3
    4476:	17db      	asrs	r3, r3, #31
    4478:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    447c:	8363      	strh	r3, [r4, #26]
}
    447e:	4628      	mov	r0, r5
    4480:	b003      	add	sp, #12
    4482:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    4484:	2202      	movs	r2, #2
    4486:	2139      	movs	r1, #57	; 0x39
    4488:	4620      	mov	r0, r4
    448a:	4f17      	ldr	r7, [pc, #92]	; (44e8 <dhcp_reboot+0xb4>)
    448c:	47b8      	blx	r7
		dhcp_option_short(dhcp, 576);
    448e:	f44f 7110 	mov.w	r1, #576	; 0x240
    4492:	4620      	mov	r0, r4
    4494:	4b15      	ldr	r3, [pc, #84]	; (44ec <dhcp_reboot+0xb8>)
    4496:	4798      	blx	r3
		dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    4498:	2204      	movs	r2, #4
    449a:	2132      	movs	r1, #50	; 0x32
    449c:	4620      	mov	r0, r4
    449e:	47b8      	blx	r7
		dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    44a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    44a2:	4b13      	ldr	r3, [pc, #76]	; (44f0 <dhcp_reboot+0xbc>)
    44a4:	4798      	blx	r3
    44a6:	4601      	mov	r1, r0
    44a8:	4620      	mov	r0, r4
    44aa:	4b12      	ldr	r3, [pc, #72]	; (44f4 <dhcp_reboot+0xc0>)
    44ac:	4798      	blx	r3
		dhcp_option_trailer(dhcp);
    44ae:	4620      	mov	r0, r4
    44b0:	4b11      	ldr	r3, [pc, #68]	; (44f8 <dhcp_reboot+0xc4>)
    44b2:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    44b4:	8b21      	ldrh	r1, [r4, #24]
    44b6:	31f0      	adds	r1, #240	; 0xf0
    44b8:	b289      	uxth	r1, r1
    44ba:	6920      	ldr	r0, [r4, #16]
    44bc:	4b0f      	ldr	r3, [pc, #60]	; (44fc <dhcp_reboot+0xc8>)
    44be:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    44c0:	6921      	ldr	r1, [r4, #16]
    44c2:	6860      	ldr	r0, [r4, #4]
    44c4:	9600      	str	r6, [sp, #0]
    44c6:	2343      	movs	r3, #67	; 0x43
    44c8:	4a0d      	ldr	r2, [pc, #52]	; (4500 <dhcp_reboot+0xcc>)
    44ca:	4e0e      	ldr	r6, [pc, #56]	; (4504 <dhcp_reboot+0xd0>)
    44cc:	47b0      	blx	r6
		dhcp_delete_msg(dhcp);
    44ce:	4620      	mov	r0, r4
    44d0:	4b0d      	ldr	r3, [pc, #52]	; (4508 <dhcp_reboot+0xd4>)
    44d2:	4798      	blx	r3
    44d4:	e7bd      	b.n	4452 <dhcp_reboot+0x1e>
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    44d6:	f242 7310 	movw	r3, #10000	; 0x2710
    44da:	e7c7      	b.n	446c <dhcp_reboot+0x38>
    44dc:	00003efd 	.word	0x00003efd
    44e0:	00003fed 	.word	0x00003fed
    44e4:	10624dd3 	.word	0x10624dd3
    44e8:	00003f0d 	.word	0x00003f0d
    44ec:	00003f45 	.word	0x00003f45
    44f0:	00003ef1 	.word	0x00003ef1
    44f4:	00003f6b 	.word	0x00003f6b
    44f8:	00003fb5 	.word	0x00003fb5
    44fc:	00006195 	.word	0x00006195
    4500:	0000e450 	.word	0x0000e450
    4504:	00009441 	.word	0x00009441
    4508:	00004159 	.word	0x00004159

0000450c <dhcp_decline>:
{
    450c:	b570      	push	{r4, r5, r6, lr}
    450e:	b082      	sub	sp, #8
    4510:	4605      	mov	r5, r0
	struct dhcp *dhcp   = netif->dhcp;
    4512:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_BACKING_OFF);
    4514:	210c      	movs	r1, #12
    4516:	4620      	mov	r0, r4
    4518:	4b17      	ldr	r3, [pc, #92]	; (4578 <dhcp_decline+0x6c>)
    451a:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
    451c:	2204      	movs	r2, #4
    451e:	4621      	mov	r1, r4
    4520:	4628      	mov	r0, r5
    4522:	4b16      	ldr	r3, [pc, #88]	; (457c <dhcp_decline+0x70>)
    4524:	4798      	blx	r3
	if (result == ERR_OK) {
    4526:	4606      	mov	r6, r0
    4528:	b9f0      	cbnz	r0, 4568 <dhcp_decline+0x5c>
		dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
    452a:	2204      	movs	r2, #4
    452c:	2132      	movs	r1, #50	; 0x32
    452e:	4620      	mov	r0, r4
    4530:	4b13      	ldr	r3, [pc, #76]	; (4580 <dhcp_decline+0x74>)
    4532:	4798      	blx	r3
		dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
    4534:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4536:	4b13      	ldr	r3, [pc, #76]	; (4584 <dhcp_decline+0x78>)
    4538:	4798      	blx	r3
    453a:	4601      	mov	r1, r0
    453c:	4620      	mov	r0, r4
    453e:	4b12      	ldr	r3, [pc, #72]	; (4588 <dhcp_decline+0x7c>)
    4540:	4798      	blx	r3
		dhcp_option_trailer(dhcp);
    4542:	4620      	mov	r0, r4
    4544:	4b11      	ldr	r3, [pc, #68]	; (458c <dhcp_decline+0x80>)
    4546:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    4548:	8b21      	ldrh	r1, [r4, #24]
    454a:	31f0      	adds	r1, #240	; 0xf0
    454c:	b289      	uxth	r1, r1
    454e:	6920      	ldr	r0, [r4, #16]
    4550:	4b0f      	ldr	r3, [pc, #60]	; (4590 <dhcp_decline+0x84>)
    4552:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
    4554:	9500      	str	r5, [sp, #0]
    4556:	2343      	movs	r3, #67	; 0x43
    4558:	4a0e      	ldr	r2, [pc, #56]	; (4594 <dhcp_decline+0x88>)
    455a:	6921      	ldr	r1, [r4, #16]
    455c:	6860      	ldr	r0, [r4, #4]
    455e:	4d0e      	ldr	r5, [pc, #56]	; (4598 <dhcp_decline+0x8c>)
    4560:	47a8      	blx	r5
		dhcp_delete_msg(dhcp);
    4562:	4620      	mov	r0, r4
    4564:	4b0d      	ldr	r3, [pc, #52]	; (459c <dhcp_decline+0x90>)
    4566:	4798      	blx	r3
	dhcp->tries++;
    4568:	7b63      	ldrb	r3, [r4, #13]
    456a:	3301      	adds	r3, #1
    456c:	7363      	strb	r3, [r4, #13]
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    456e:	2314      	movs	r3, #20
    4570:	8363      	strh	r3, [r4, #26]
}
    4572:	4630      	mov	r0, r6
    4574:	b002      	add	sp, #8
    4576:	bd70      	pop	{r4, r5, r6, pc}
    4578:	00003efd 	.word	0x00003efd
    457c:	00003fed 	.word	0x00003fed
    4580:	00003f0d 	.word	0x00003f0d
    4584:	00003ef1 	.word	0x00003ef1
    4588:	00003f6b 	.word	0x00003f6b
    458c:	00003fb5 	.word	0x00003fb5
    4590:	00006195 	.word	0x00006195
    4594:	0000e450 	.word	0x0000e450
    4598:	00009441 	.word	0x00009441
    459c:	00004159 	.word	0x00004159

000045a0 <dhcp_check>:
{
    45a0:	b538      	push	{r3, r4, r5, lr}
    45a2:	4605      	mov	r5, r0
	struct dhcp *dhcp = netif->dhcp;
    45a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_CHECKING);
    45a6:	2108      	movs	r1, #8
    45a8:	4620      	mov	r0, r4
    45aa:	4b07      	ldr	r3, [pc, #28]	; (45c8 <dhcp_check+0x28>)
    45ac:	4798      	blx	r3
	result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
    45ae:	2200      	movs	r2, #0
    45b0:	f104 0124 	add.w	r1, r4, #36	; 0x24
    45b4:	4628      	mov	r0, r5
    45b6:	4b05      	ldr	r3, [pc, #20]	; (45cc <dhcp_check+0x2c>)
    45b8:	4798      	blx	r3
	dhcp->tries++;
    45ba:	7b63      	ldrb	r3, [r4, #13]
    45bc:	3301      	adds	r3, #1
    45be:	7363      	strb	r3, [r4, #13]
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    45c0:	2301      	movs	r3, #1
    45c2:	8363      	strh	r3, [r4, #26]
    45c4:	bd38      	pop	{r3, r4, r5, pc}
    45c6:	bf00      	nop
    45c8:	00003efd 	.word	0x00003efd
    45cc:	00009b3d 	.word	0x00009b3d

000045d0 <dhcp_bind>:
	LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
    45d0:	2800      	cmp	r0, #0
    45d2:	d055      	beq.n	4680 <dhcp_bind+0xb0>
{
    45d4:	b530      	push	{r4, r5, lr}
    45d6:	b083      	sub	sp, #12
    45d8:	4605      	mov	r5, r0
	dhcp = netif->dhcp;
    45da:	6a44      	ldr	r4, [r0, #36]	; 0x24
	LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
    45dc:	2c00      	cmp	r4, #0
    45de:	d050      	beq.n	4682 <dhcp_bind+0xb2>
	if (dhcp->offered_t1_renew != 0xffffffffUL) {
    45e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    45e2:	f1b3 3fff 	cmp.w	r3, #4294967295
    45e6:	d00e      	beq.n	4606 <dhcp_bind+0x36>
		timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    45e8:	331e      	adds	r3, #30
    45ea:	4a2f      	ldr	r2, [pc, #188]	; (46a8 <dhcp_bind+0xd8>)
    45ec:	fba2 2303 	umull	r2, r3, r2, r3
    45f0:	095b      	lsrs	r3, r3, #5
		if (timeout > 0xffff) {
    45f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    45f6:	d301      	bcc.n	45fc <dhcp_bind+0x2c>
			timeout = 0xffff;
    45f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		dhcp->t1_timeout = (u16_t)timeout;
    45fc:	b29b      	uxth	r3, r3
    45fe:	83a3      	strh	r3, [r4, #28]
		if (dhcp->t1_timeout == 0) {
    4600:	b90b      	cbnz	r3, 4606 <dhcp_bind+0x36>
			dhcp->t1_timeout = 1;
    4602:	2301      	movs	r3, #1
    4604:	83a3      	strh	r3, [r4, #28]
	if (dhcp->offered_t2_rebind != 0xffffffffUL) {
    4606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4608:	f1b3 3fff 	cmp.w	r3, #4294967295
    460c:	d00e      	beq.n	462c <dhcp_bind+0x5c>
		timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
    460e:	331e      	adds	r3, #30
    4610:	4a25      	ldr	r2, [pc, #148]	; (46a8 <dhcp_bind+0xd8>)
    4612:	fba2 2303 	umull	r2, r3, r2, r3
    4616:	095b      	lsrs	r3, r3, #5
		if (timeout > 0xffff) {
    4618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    461c:	d301      	bcc.n	4622 <dhcp_bind+0x52>
			timeout = 0xffff;
    461e:	f64f 73ff 	movw	r3, #65535	; 0xffff
		dhcp->t2_timeout = (u16_t)timeout;
    4622:	b29b      	uxth	r3, r3
    4624:	83e3      	strh	r3, [r4, #30]
		if (dhcp->t2_timeout == 0) {
    4626:	b90b      	cbnz	r3, 462c <dhcp_bind+0x5c>
			dhcp->t2_timeout = 1;
    4628:	2301      	movs	r3, #1
    462a:	83e3      	strh	r3, [r4, #30]
	if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
    462c:	8ba2      	ldrh	r2, [r4, #28]
    462e:	8be3      	ldrh	r3, [r4, #30]
    4630:	429a      	cmp	r2, r3
    4632:	d302      	bcc.n	463a <dhcp_bind+0x6a>
    4634:	b10b      	cbz	r3, 463a <dhcp_bind+0x6a>
		dhcp->t1_timeout = 0;
    4636:	2300      	movs	r3, #0
    4638:	83a3      	strh	r3, [r4, #28]
	if (dhcp->subnet_mask_given) {
    463a:	7ba3      	ldrb	r3, [r4, #14]
    463c:	b313      	cbz	r3, 4684 <dhcp_bind+0xb4>
		ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
    463e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4640:	9301      	str	r3, [sp, #4]
	ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
    4642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4644:	9300      	str	r3, [sp, #0]
	if (ip_addr_isany(&gw_addr)) {
    4646:	b92b      	cbnz	r3, 4654 <dhcp_bind+0x84>
		ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
    4648:	6a63      	ldr	r3, [r4, #36]	; 0x24
    464a:	9a01      	ldr	r2, [sp, #4]
    464c:	4013      	ands	r3, r2
		ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
    464e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4652:	9300      	str	r3, [sp, #0]
	netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
    4654:	f104 0124 	add.w	r1, r4, #36	; 0x24
    4658:	4628      	mov	r0, r5
    465a:	4b14      	ldr	r3, [pc, #80]	; (46ac <dhcp_bind+0xdc>)
    465c:	4798      	blx	r3
	netif_set_netmask(netif, &sn_mask);
    465e:	a901      	add	r1, sp, #4
    4660:	4628      	mov	r0, r5
    4662:	4b13      	ldr	r3, [pc, #76]	; (46b0 <dhcp_bind+0xe0>)
    4664:	4798      	blx	r3
	netif_set_gw(netif, &gw_addr);
    4666:	4669      	mov	r1, sp
    4668:	4628      	mov	r0, r5
    466a:	4b12      	ldr	r3, [pc, #72]	; (46b4 <dhcp_bind+0xe4>)
    466c:	4798      	blx	r3
	netif_set_up(netif);
    466e:	4628      	mov	r0, r5
    4670:	4b11      	ldr	r3, [pc, #68]	; (46b8 <dhcp_bind+0xe8>)
    4672:	4798      	blx	r3
	dhcp_set_state(dhcp, DHCP_BOUND);
    4674:	210a      	movs	r1, #10
    4676:	4620      	mov	r0, r4
    4678:	4b10      	ldr	r3, [pc, #64]	; (46bc <dhcp_bind+0xec>)
    467a:	4798      	blx	r3
}
    467c:	b003      	add	sp, #12
    467e:	bd30      	pop	{r4, r5, pc}
    4680:	e7fe      	b.n	4680 <dhcp_bind+0xb0>
    4682:	e7fe      	b.n	4682 <dhcp_bind+0xb2>
		u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
    4684:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
		if (first_octet <= 127) {
    4688:	f013 0f80 	tst.w	r3, #128	; 0x80
    468c:	d102      	bne.n	4694 <dhcp_bind+0xc4>
			ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
    468e:	23ff      	movs	r3, #255	; 0xff
    4690:	9301      	str	r3, [sp, #4]
    4692:	e7d6      	b.n	4642 <dhcp_bind+0x72>
		} else if (first_octet >= 192) {
    4694:	2bbf      	cmp	r3, #191	; 0xbf
    4696:	d903      	bls.n	46a0 <dhcp_bind+0xd0>
			ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
    4698:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    469c:	9301      	str	r3, [sp, #4]
    469e:	e7d0      	b.n	4642 <dhcp_bind+0x72>
			ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
    46a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    46a4:	9301      	str	r3, [sp, #4]
    46a6:	e7cc      	b.n	4642 <dhcp_bind+0x72>
    46a8:	88888889 	.word	0x88888889
    46ac:	00005d4d 	.word	0x00005d4d
    46b0:	00005dbd 	.word	0x00005dbd
    46b4:	00005db1 	.word	0x00005db1
    46b8:	00005e51 	.word	0x00005e51
    46bc:	00003efd 	.word	0x00003efd

000046c0 <dhcp_arp_reply>:
	LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    46c0:	b138      	cbz	r0, 46d2 <dhcp_arp_reply+0x12>
{
    46c2:	b508      	push	{r3, lr}
    46c4:	4603      	mov	r3, r0
	if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
    46c6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    46c8:	b112      	cbz	r2, 46d0 <dhcp_arp_reply+0x10>
    46ca:	7b10      	ldrb	r0, [r2, #12]
    46cc:	2808      	cmp	r0, #8
    46ce:	d001      	beq.n	46d4 <dhcp_arp_reply+0x14>
    46d0:	bd08      	pop	{r3, pc}
    46d2:	e7fe      	b.n	46d2 <dhcp_arp_reply+0x12>
		if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
    46d4:	6809      	ldr	r1, [r1, #0]
    46d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    46d8:	4291      	cmp	r1, r2
    46da:	d1f9      	bne.n	46d0 <dhcp_arp_reply+0x10>
    46dc:	4618      	mov	r0, r3
			dhcp_decline(netif);
    46de:	4b01      	ldr	r3, [pc, #4]	; (46e4 <dhcp_arp_reply+0x24>)
    46e0:	4798      	blx	r3
}
    46e2:	e7f5      	b.n	46d0 <dhcp_arp_reply+0x10>
    46e4:	0000450d 	.word	0x0000450d

000046e8 <dhcp_renew>:
{
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	b082      	sub	sp, #8
    46ec:	4606      	mov	r6, r0
	struct dhcp *dhcp = netif->dhcp;
    46ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_RENEWING);
    46f0:	2105      	movs	r1, #5
    46f2:	4620      	mov	r0, r4
    46f4:	4b21      	ldr	r3, [pc, #132]	; (477c <dhcp_renew+0x94>)
    46f6:	4798      	blx	r3
	result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
    46f8:	2203      	movs	r2, #3
    46fa:	4621      	mov	r1, r4
    46fc:	4630      	mov	r0, r6
    46fe:	4b20      	ldr	r3, [pc, #128]	; (4780 <dhcp_renew+0x98>)
    4700:	4798      	blx	r3
	if (result == ERR_OK) {
    4702:	4605      	mov	r5, r0
    4704:	b1c0      	cbz	r0, 4738 <dhcp_renew+0x50>
	dhcp->tries++;
    4706:	7b63      	ldrb	r3, [r4, #13]
    4708:	3301      	adds	r3, #1
    470a:	b2db      	uxtb	r3, r3
    470c:	7363      	strb	r3, [r4, #13]
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
    470e:	2b09      	cmp	r3, #9
    4710:	d830      	bhi.n	4774 <dhcp_renew+0x8c>
    4712:	b29b      	uxth	r3, r3
    4714:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    4718:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    471c:	011a      	lsls	r2, r3, #4
    471e:	b293      	uxth	r3, r2
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    4720:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    4724:	4a17      	ldr	r2, [pc, #92]	; (4784 <dhcp_renew+0x9c>)
    4726:	fb82 1203 	smull	r1, r2, r2, r3
    472a:	17db      	asrs	r3, r3, #31
    472c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    4730:	8363      	strh	r3, [r4, #26]
}
    4732:	4628      	mov	r0, r5
    4734:	b002      	add	sp, #8
    4736:	bd70      	pop	{r4, r5, r6, pc}
		dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    4738:	2202      	movs	r2, #2
    473a:	2139      	movs	r1, #57	; 0x39
    473c:	4620      	mov	r0, r4
    473e:	4b12      	ldr	r3, [pc, #72]	; (4788 <dhcp_renew+0xa0>)
    4740:	4798      	blx	r3
		dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
    4742:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    4744:	4620      	mov	r0, r4
    4746:	4b11      	ldr	r3, [pc, #68]	; (478c <dhcp_renew+0xa4>)
    4748:	4798      	blx	r3
		dhcp_option_trailer(dhcp);
    474a:	4620      	mov	r0, r4
    474c:	4b10      	ldr	r3, [pc, #64]	; (4790 <dhcp_renew+0xa8>)
    474e:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    4750:	8b21      	ldrh	r1, [r4, #24]
    4752:	31f0      	adds	r1, #240	; 0xf0
    4754:	b289      	uxth	r1, r1
    4756:	6920      	ldr	r0, [r4, #16]
    4758:	4b0e      	ldr	r3, [pc, #56]	; (4794 <dhcp_renew+0xac>)
    475a:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
    475c:	6921      	ldr	r1, [r4, #16]
    475e:	6860      	ldr	r0, [r4, #4]
    4760:	9600      	str	r6, [sp, #0]
    4762:	2343      	movs	r3, #67	; 0x43
    4764:	f104 0220 	add.w	r2, r4, #32
    4768:	4e0b      	ldr	r6, [pc, #44]	; (4798 <dhcp_renew+0xb0>)
    476a:	47b0      	blx	r6
		dhcp_delete_msg(dhcp);
    476c:	4620      	mov	r0, r4
    476e:	4b0b      	ldr	r3, [pc, #44]	; (479c <dhcp_renew+0xb4>)
    4770:	4798      	blx	r3
    4772:	e7c8      	b.n	4706 <dhcp_renew+0x1e>
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
    4774:	f644 6320 	movw	r3, #20000	; 0x4e20
    4778:	e7d2      	b.n	4720 <dhcp_renew+0x38>
    477a:	bf00      	nop
    477c:	00003efd 	.word	0x00003efd
    4780:	00003fed 	.word	0x00003fed
    4784:	10624dd3 	.word	0x10624dd3
    4788:	00003f0d 	.word	0x00003f0d
    478c:	00003f45 	.word	0x00003f45
    4790:	00003fb5 	.word	0x00003fb5
    4794:	00006195 	.word	0x00006195
    4798:	00009441 	.word	0x00009441
    479c:	00004159 	.word	0x00004159

000047a0 <dhcp_t1_timeout>:
{
    47a0:	b508      	push	{r3, lr}
	struct dhcp *dhcp = netif->dhcp;
    47a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
    47a4:	7b1b      	ldrb	r3, [r3, #12]
    47a6:	2b01      	cmp	r3, #1
    47a8:	d003      	beq.n	47b2 <dhcp_t1_timeout+0x12>
    47aa:	2b0a      	cmp	r3, #10
    47ac:	d001      	beq.n	47b2 <dhcp_t1_timeout+0x12>
    47ae:	2b05      	cmp	r3, #5
    47b0:	d101      	bne.n	47b6 <dhcp_t1_timeout+0x16>
		dhcp_renew(netif);
    47b2:	4b01      	ldr	r3, [pc, #4]	; (47b8 <dhcp_t1_timeout+0x18>)
    47b4:	4798      	blx	r3
    47b6:	bd08      	pop	{r3, pc}
    47b8:	000046e9 	.word	0x000046e9

000047bc <dhcp_coarse_tmr>:
{
    47bc:	b510      	push	{r4, lr}
	struct netif *netif = netif_list;
    47be:	4b0d      	ldr	r3, [pc, #52]	; (47f4 <dhcp_coarse_tmr+0x38>)
    47c0:	681c      	ldr	r4, [r3, #0]
	while (netif != NULL) {
    47c2:	e003      	b.n	47cc <dhcp_coarse_tmr+0x10>
				dhcp_t2_timeout(netif);
    47c4:	4620      	mov	r0, r4
    47c6:	4b0c      	ldr	r3, [pc, #48]	; (47f8 <dhcp_coarse_tmr+0x3c>)
    47c8:	4798      	blx	r3
		netif = netif->next;
    47ca:	6824      	ldr	r4, [r4, #0]
	while (netif != NULL) {
    47cc:	b18c      	cbz	r4, 47f2 <dhcp_coarse_tmr+0x36>
		if (netif->dhcp != NULL) {
    47ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47d0:	2b00      	cmp	r3, #0
    47d2:	d0fa      	beq.n	47ca <dhcp_coarse_tmr+0xe>
			if (netif->dhcp->t2_timeout-- == 1) {
    47d4:	8bda      	ldrh	r2, [r3, #30]
    47d6:	1e51      	subs	r1, r2, #1
    47d8:	83d9      	strh	r1, [r3, #30]
    47da:	2a01      	cmp	r2, #1
    47dc:	d0f2      	beq.n	47c4 <dhcp_coarse_tmr+0x8>
			} else if (netif->dhcp->t1_timeout-- == 1) {
    47de:	6a62      	ldr	r2, [r4, #36]	; 0x24
    47e0:	8b93      	ldrh	r3, [r2, #28]
    47e2:	1e59      	subs	r1, r3, #1
    47e4:	8391      	strh	r1, [r2, #28]
    47e6:	2b01      	cmp	r3, #1
    47e8:	d1ef      	bne.n	47ca <dhcp_coarse_tmr+0xe>
				dhcp_t1_timeout(netif);
    47ea:	4620      	mov	r0, r4
    47ec:	4b03      	ldr	r3, [pc, #12]	; (47fc <dhcp_coarse_tmr+0x40>)
    47ee:	4798      	blx	r3
    47f0:	e7eb      	b.n	47ca <dhcp_coarse_tmr+0xe>
}
    47f2:	bd10      	pop	{r4, pc}
    47f4:	200161e0 	.word	0x200161e0
    47f8:	0000422d 	.word	0x0000422d
    47fc:	000047a1 	.word	0x000047a1

00004800 <dhcp_release>:
{
    4800:	b5f0      	push	{r4, r5, r6, r7, lr}
    4802:	b083      	sub	sp, #12
    4804:	4605      	mov	r5, r0
	struct dhcp *dhcp = netif->dhcp;
    4806:	6a44      	ldr	r4, [r0, #36]	; 0x24
	dhcp_set_state(dhcp, DHCP_OFF);
    4808:	2100      	movs	r1, #0
    480a:	4620      	mov	r0, r4
    480c:	4b28      	ldr	r3, [pc, #160]	; (48b0 <dhcp_release+0xb0>)
    480e:	4798      	blx	r3
	ip_addr_set_zero(&dhcp->server_ip_addr);
    4810:	2300      	movs	r3, #0
    4812:	6223      	str	r3, [r4, #32]
	ip_addr_set_zero(&dhcp->offered_ip_addr);
    4814:	6263      	str	r3, [r4, #36]	; 0x24
	ip_addr_set_zero(&dhcp->offered_sn_mask);
    4816:	62a3      	str	r3, [r4, #40]	; 0x28
	ip_addr_set_zero(&dhcp->offered_gw_addr);
    4818:	62e3      	str	r3, [r4, #44]	; 0x2c
	dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
    481a:	63a3      	str	r3, [r4, #56]	; 0x38
    481c:	6363      	str	r3, [r4, #52]	; 0x34
    481e:	6323      	str	r3, [r4, #48]	; 0x30
	result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
    4820:	2207      	movs	r2, #7
    4822:	4621      	mov	r1, r4
    4824:	4628      	mov	r0, r5
    4826:	4b23      	ldr	r3, [pc, #140]	; (48b4 <dhcp_release+0xb4>)
    4828:	4798      	blx	r3
	if (result == ERR_OK) {
    482a:	4606      	mov	r6, r0
    482c:	b340      	cbz	r0, 4880 <dhcp_release+0x80>
	dhcp->tries++;
    482e:	7b63      	ldrb	r3, [r4, #13]
    4830:	3301      	adds	r3, #1
    4832:	b2db      	uxtb	r3, r3
    4834:	7363      	strb	r3, [r4, #13]
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    4836:	2b09      	cmp	r3, #9
    4838:	d837      	bhi.n	48aa <dhcp_release+0xaa>
    483a:	b29b      	uxth	r3, r3
    483c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
    4840:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4844:	00da      	lsls	r2, r3, #3
    4846:	b293      	uxth	r3, r2
	dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
    4848:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
    484c:	4a1a      	ldr	r2, [pc, #104]	; (48b8 <dhcp_release+0xb8>)
    484e:	fb82 1203 	smull	r1, r2, r2, r3
    4852:	17db      	asrs	r3, r3, #31
    4854:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    4858:	8363      	strh	r3, [r4, #26]
	netif_set_down(netif);
    485a:	4628      	mov	r0, r5
    485c:	4b17      	ldr	r3, [pc, #92]	; (48bc <dhcp_release+0xbc>)
    485e:	4798      	blx	r3
	netif_set_ipaddr(netif, IP_ADDR_ANY);
    4860:	4c17      	ldr	r4, [pc, #92]	; (48c0 <dhcp_release+0xc0>)
    4862:	4621      	mov	r1, r4
    4864:	4628      	mov	r0, r5
    4866:	4b17      	ldr	r3, [pc, #92]	; (48c4 <dhcp_release+0xc4>)
    4868:	4798      	blx	r3
	netif_set_gw(netif, IP_ADDR_ANY);
    486a:	4621      	mov	r1, r4
    486c:	4628      	mov	r0, r5
    486e:	4b16      	ldr	r3, [pc, #88]	; (48c8 <dhcp_release+0xc8>)
    4870:	4798      	blx	r3
	netif_set_netmask(netif, IP_ADDR_ANY);
    4872:	4621      	mov	r1, r4
    4874:	4628      	mov	r0, r5
    4876:	4b15      	ldr	r3, [pc, #84]	; (48cc <dhcp_release+0xcc>)
    4878:	4798      	blx	r3
}
    487a:	4630      	mov	r0, r6
    487c:	b003      	add	sp, #12
    487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dhcp_option_trailer(dhcp);
    4880:	4620      	mov	r0, r4
    4882:	4b13      	ldr	r3, [pc, #76]	; (48d0 <dhcp_release+0xd0>)
    4884:	4798      	blx	r3
		pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
    4886:	8b21      	ldrh	r1, [r4, #24]
    4888:	31f0      	adds	r1, #240	; 0xf0
    488a:	b289      	uxth	r1, r1
    488c:	6920      	ldr	r0, [r4, #16]
    488e:	4b11      	ldr	r3, [pc, #68]	; (48d4 <dhcp_release+0xd4>)
    4890:	4798      	blx	r3
		udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
    4892:	6921      	ldr	r1, [r4, #16]
    4894:	6860      	ldr	r0, [r4, #4]
    4896:	9500      	str	r5, [sp, #0]
    4898:	2343      	movs	r3, #67	; 0x43
    489a:	f104 0220 	add.w	r2, r4, #32
    489e:	4f0e      	ldr	r7, [pc, #56]	; (48d8 <dhcp_release+0xd8>)
    48a0:	47b8      	blx	r7
		dhcp_delete_msg(dhcp);
    48a2:	4620      	mov	r0, r4
    48a4:	4b0d      	ldr	r3, [pc, #52]	; (48dc <dhcp_release+0xdc>)
    48a6:	4798      	blx	r3
    48a8:	e7c1      	b.n	482e <dhcp_release+0x2e>
	msecs                 = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
    48aa:	f242 7310 	movw	r3, #10000	; 0x2710
    48ae:	e7cb      	b.n	4848 <dhcp_release+0x48>
    48b0:	00003efd 	.word	0x00003efd
    48b4:	00003fed 	.word	0x00003fed
    48b8:	10624dd3 	.word	0x10624dd3
    48bc:	00005e91 	.word	0x00005e91
    48c0:	0000e454 	.word	0x0000e454
    48c4:	00005d4d 	.word	0x00005d4d
    48c8:	00005db1 	.word	0x00005db1
    48cc:	00005dbd 	.word	0x00005dbd
    48d0:	00003fb5 	.word	0x00003fb5
    48d4:	00006195 	.word	0x00006195
    48d8:	00009441 	.word	0x00009441
    48dc:	00004159 	.word	0x00004159

000048e0 <dhcp_timeout>:
{
    48e0:	b510      	push	{r4, lr}
    48e2:	4604      	mov	r4, r0
	struct dhcp *dhcp = netif->dhcp;
    48e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
    48e6:	7b13      	ldrb	r3, [r2, #12]
    48e8:	2b0c      	cmp	r3, #12
    48ea:	d00c      	beq.n	4906 <dhcp_timeout+0x26>
    48ec:	2b06      	cmp	r3, #6
    48ee:	d00a      	beq.n	4906 <dhcp_timeout+0x26>
	} else if (dhcp->state == DHCP_REQUESTING) {
    48f0:	2b01      	cmp	r3, #1
    48f2:	d00c      	beq.n	490e <dhcp_timeout+0x2e>
	} else if (dhcp->state == DHCP_CHECKING) {
    48f4:	2b08      	cmp	r3, #8
    48f6:	d016      	beq.n	4926 <dhcp_timeout+0x46>
	else if (dhcp->state == DHCP_RENEWING) {
    48f8:	2b05      	cmp	r3, #5
    48fa:	d01d      	beq.n	4938 <dhcp_timeout+0x58>
	} else if (dhcp->state == DHCP_REBINDING) {
    48fc:	2b04      	cmp	r3, #4
    48fe:	d01e      	beq.n	493e <dhcp_timeout+0x5e>
	} else if (dhcp->state == DHCP_REBOOTING) {
    4900:	2b03      	cmp	r3, #3
    4902:	d028      	beq.n	4956 <dhcp_timeout+0x76>
    4904:	bd10      	pop	{r4, pc}
		dhcp_discover(netif);
    4906:	4620      	mov	r0, r4
    4908:	4b17      	ldr	r3, [pc, #92]	; (4968 <dhcp_timeout+0x88>)
    490a:	4798      	blx	r3
    490c:	bd10      	pop	{r4, pc}
		if (dhcp->tries <= 5) {
    490e:	7b53      	ldrb	r3, [r2, #13]
    4910:	2b05      	cmp	r3, #5
    4912:	d802      	bhi.n	491a <dhcp_timeout+0x3a>
			dhcp_select(netif);
    4914:	4b15      	ldr	r3, [pc, #84]	; (496c <dhcp_timeout+0x8c>)
    4916:	4798      	blx	r3
    4918:	bd10      	pop	{r4, pc}
			dhcp_release(netif);
    491a:	4b15      	ldr	r3, [pc, #84]	; (4970 <dhcp_timeout+0x90>)
    491c:	4798      	blx	r3
			dhcp_discover(netif);
    491e:	4620      	mov	r0, r4
    4920:	4b11      	ldr	r3, [pc, #68]	; (4968 <dhcp_timeout+0x88>)
    4922:	4798      	blx	r3
    4924:	bd10      	pop	{r4, pc}
		if (dhcp->tries <= 1) {
    4926:	7b53      	ldrb	r3, [r2, #13]
    4928:	2b01      	cmp	r3, #1
    492a:	d902      	bls.n	4932 <dhcp_timeout+0x52>
			dhcp_bind(netif);
    492c:	4b11      	ldr	r3, [pc, #68]	; (4974 <dhcp_timeout+0x94>)
    492e:	4798      	blx	r3
    4930:	bd10      	pop	{r4, pc}
			dhcp_check(netif);
    4932:	4b11      	ldr	r3, [pc, #68]	; (4978 <dhcp_timeout+0x98>)
    4934:	4798      	blx	r3
    4936:	bd10      	pop	{r4, pc}
		dhcp_renew(netif);
    4938:	4b10      	ldr	r3, [pc, #64]	; (497c <dhcp_timeout+0x9c>)
    493a:	4798      	blx	r3
    493c:	bd10      	pop	{r4, pc}
		if (dhcp->tries <= 8) {
    493e:	7b53      	ldrb	r3, [r2, #13]
    4940:	2b08      	cmp	r3, #8
    4942:	d802      	bhi.n	494a <dhcp_timeout+0x6a>
			dhcp_rebind(netif);
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <dhcp_timeout+0xa0>)
    4946:	4798      	blx	r3
    4948:	bd10      	pop	{r4, pc}
			dhcp_release(netif);
    494a:	4b09      	ldr	r3, [pc, #36]	; (4970 <dhcp_timeout+0x90>)
    494c:	4798      	blx	r3
			dhcp_discover(netif);
    494e:	4620      	mov	r0, r4
    4950:	4b05      	ldr	r3, [pc, #20]	; (4968 <dhcp_timeout+0x88>)
    4952:	4798      	blx	r3
    4954:	bd10      	pop	{r4, pc}
		if (dhcp->tries < REBOOT_TRIES) {
    4956:	7b53      	ldrb	r3, [r2, #13]
    4958:	2b01      	cmp	r3, #1
    495a:	d902      	bls.n	4962 <dhcp_timeout+0x82>
			dhcp_discover(netif);
    495c:	4b02      	ldr	r3, [pc, #8]	; (4968 <dhcp_timeout+0x88>)
    495e:	4798      	blx	r3
}
    4960:	e7d0      	b.n	4904 <dhcp_timeout+0x24>
			dhcp_reboot(netif);
    4962:	4b08      	ldr	r3, [pc, #32]	; (4984 <dhcp_timeout+0xa4>)
    4964:	4798      	blx	r3
    4966:	bd10      	pop	{r4, pc}
    4968:	00004249 	.word	0x00004249
    496c:	00004325 	.word	0x00004325
    4970:	00004801 	.word	0x00004801
    4974:	000045d1 	.word	0x000045d1
    4978:	000045a1 	.word	0x000045a1
    497c:	000046e9 	.word	0x000046e9
    4980:	00004175 	.word	0x00004175
    4984:	00004435 	.word	0x00004435

00004988 <dhcp_fine_tmr>:
{
    4988:	b510      	push	{r4, lr}
	struct netif *netif = netif_list;
    498a:	4b0b      	ldr	r3, [pc, #44]	; (49b8 <dhcp_fine_tmr+0x30>)
    498c:	681c      	ldr	r4, [r3, #0]
	while (netif != NULL) {
    498e:	e002      	b.n	4996 <dhcp_fine_tmr+0xe>
			} else if (netif->dhcp->request_timeout == 1) {
    4990:	2b01      	cmp	r3, #1
    4992:	d00a      	beq.n	49aa <dhcp_fine_tmr+0x22>
		netif = netif->next;
    4994:	6824      	ldr	r4, [r4, #0]
	while (netif != NULL) {
    4996:	b174      	cbz	r4, 49b6 <dhcp_fine_tmr+0x2e>
		if (netif->dhcp != NULL) {
    4998:	6a62      	ldr	r2, [r4, #36]	; 0x24
    499a:	2a00      	cmp	r2, #0
    499c:	d0fa      	beq.n	4994 <dhcp_fine_tmr+0xc>
			if (netif->dhcp->request_timeout > 1) {
    499e:	8b53      	ldrh	r3, [r2, #26]
    49a0:	2b01      	cmp	r3, #1
    49a2:	d9f5      	bls.n	4990 <dhcp_fine_tmr+0x8>
				netif->dhcp->request_timeout--;
    49a4:	3b01      	subs	r3, #1
    49a6:	8353      	strh	r3, [r2, #26]
    49a8:	e7f4      	b.n	4994 <dhcp_fine_tmr+0xc>
				netif->dhcp->request_timeout--;
    49aa:	3b01      	subs	r3, #1
    49ac:	8353      	strh	r3, [r2, #26]
				dhcp_timeout(netif);
    49ae:	4620      	mov	r0, r4
    49b0:	4b02      	ldr	r3, [pc, #8]	; (49bc <dhcp_fine_tmr+0x34>)
    49b2:	4798      	blx	r3
    49b4:	e7ee      	b.n	4994 <dhcp_fine_tmr+0xc>
}
    49b6:	bd10      	pop	{r4, pc}
    49b8:	200161e0 	.word	0x200161e0
    49bc:	000048e1 	.word	0x000048e1

000049c0 <lwip_init>:

/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void lwip_init(void)
{
    49c0:	b508      	push	{r3, lr}
	/* Modules initialization */
	stats_init();
#if !NO_SYS
	sys_init();
    49c2:	4b08      	ldr	r3, [pc, #32]	; (49e4 <lwip_init+0x24>)
    49c4:	4798      	blx	r3
#endif /* !NO_SYS */
	mem_init();
    49c6:	4b08      	ldr	r3, [pc, #32]	; (49e8 <lwip_init+0x28>)
    49c8:	4798      	blx	r3
	memp_init();
    49ca:	4b08      	ldr	r3, [pc, #32]	; (49ec <lwip_init+0x2c>)
    49cc:	4798      	blx	r3
	pbuf_init();
	netif_init();
    49ce:	4b08      	ldr	r3, [pc, #32]	; (49f0 <lwip_init+0x30>)
    49d0:	4798      	blx	r3
#if LWIP_SOCKET
	lwip_socket_init();
    49d2:	4b08      	ldr	r3, [pc, #32]	; (49f4 <lwip_init+0x34>)
    49d4:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
	raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
	udp_init();
    49d6:	4b08      	ldr	r3, [pc, #32]	; (49f8 <lwip_init+0x38>)
    49d8:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
	tcp_init();
    49da:	4b08      	ldr	r3, [pc, #32]	; (49fc <lwip_init+0x3c>)
    49dc:	4798      	blx	r3
#if LWIP_DNS
	dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
	sys_timeouts_init();
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <lwip_init+0x40>)
    49e0:	4798      	blx	r3
    49e2:	bd08      	pop	{r3, pc}
    49e4:	00002461 	.word	0x00002461
    49e8:	00005a41 	.word	0x00005a41
    49ec:	00005ca1 	.word	0x00005ca1
    49f0:	00005d49 	.word	0x00005d49
    49f4:	000036b1 	.word	0x000036b1
    49f8:	000091b9 	.word	0x000091b9
    49fc:	000063b1 	.word	0x000063b1
    4a00:	00008fe5 	.word	0x00008fe5

00004a04 <icmp_send_response>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
    4a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4a08:	b085      	sub	sp, #20
    4a0a:	4680      	mov	r8, r0
    4a0c:	4689      	mov	r9, r1
    4a0e:	4615      	mov	r5, r2
	/* we can use the echo header here */
	struct icmp_echo_hdr *icmphdr;
	ip_addr_t             iphdr_src;

	/* ICMP header + IP header + 8 bytes of data */
	q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE, PBUF_RAM);
    4a10:	2200      	movs	r2, #0
    4a12:	2124      	movs	r1, #36	; 0x24
    4a14:	2001      	movs	r0, #1
    4a16:	4b22      	ldr	r3, [pc, #136]	; (4aa0 <icmp_send_response+0x9c>)
    4a18:	4798      	blx	r3
	if (q == NULL) {
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d03d      	beq.n	4a9a <icmp_send_response+0x96>
    4a1e:	4606      	mov	r6, r0
		return;
	}
	LWIP_ASSERT("check that first pbuf can hold icmp message",
	            (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

	iphdr = (struct ip_hdr *)p->payload;
    4a20:	f8d8 7004 	ldr.w	r7, [r8, #4]
	ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
	LWIP_DEBUGF(ICMP_DEBUG, (" to "));
	ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
	LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

	icmphdr        = (struct icmp_echo_hdr *)q->payload;
    4a24:	6844      	ldr	r4, [r0, #4]
	icmphdr->type  = type;
    4a26:	f884 9000 	strb.w	r9, [r4]
	icmphdr->code  = code;
    4a2a:	7065      	strb	r5, [r4, #1]
	icmphdr->id    = 0;
    4a2c:	2500      	movs	r5, #0
    4a2e:	7125      	strb	r5, [r4, #4]
    4a30:	7165      	strb	r5, [r4, #5]
	icmphdr->seqno = 0;
    4a32:	71a5      	strb	r5, [r4, #6]
    4a34:	71e5      	strb	r5, [r4, #7]

	/* copy fields from original packet */
	SMEMCPY(
    4a36:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4a3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4a3e:	f8d3 e000 	ldr.w	lr, [r3]
    4a42:	6858      	ldr	r0, [r3, #4]
    4a44:	6899      	ldr	r1, [r3, #8]
    4a46:	f8d3 800c 	ldr.w	r8, [r3, #12]
    4a4a:	f8cc e008 	str.w	lr, [ip, #8]
    4a4e:	f8cc 000c 	str.w	r0, [ip, #12]
    4a52:	f8cc 1010 	str.w	r1, [ip, #16]
    4a56:	f8cc 8014 	str.w	r8, [ip, #20]
    4a5a:	f8d3 e010 	ldr.w	lr, [r3, #16]
    4a5e:	6958      	ldr	r0, [r3, #20]
    4a60:	6999      	ldr	r1, [r3, #24]
    4a62:	f8cc e018 	str.w	lr, [ip, #24]
    4a66:	f8cc 001c 	str.w	r0, [ip, #28]
    4a6a:	f8cc 1020 	str.w	r1, [ip, #32]
	    (u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload, IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

	/* calculate checksum */
	icmphdr->chksum = 0;
    4a6e:	70a5      	strb	r5, [r4, #2]
    4a70:	70e5      	strb	r5, [r4, #3]
	icmphdr->chksum = inet_chksum(icmphdr, q->len);
    4a72:	8971      	ldrh	r1, [r6, #10]
    4a74:	4620      	mov	r0, r4
    4a76:	4b0b      	ldr	r3, [pc, #44]	; (4aa4 <icmp_send_response+0xa0>)
    4a78:	4798      	blx	r3
    4a7a:	8060      	strh	r0, [r4, #2]
	ICMP_STATS_INC(icmp.xmit);
	/* increase number of messages attempted to send */
	snmp_inc_icmpoutmsgs();
	/* increase number of destination unreachable messages attempted to send */
	snmp_inc_icmpouttimeexcds();
	ip_addr_copy(iphdr_src, iphdr->src);
    4a7c:	68fb      	ldr	r3, [r7, #12]
    4a7e:	aa04      	add	r2, sp, #16
    4a80:	f842 3d04 	str.w	r3, [r2, #-4]!
	ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
    4a84:	2301      	movs	r3, #1
    4a86:	9301      	str	r3, [sp, #4]
    4a88:	9500      	str	r5, [sp, #0]
    4a8a:	23ff      	movs	r3, #255	; 0xff
    4a8c:	4629      	mov	r1, r5
    4a8e:	4630      	mov	r0, r6
    4a90:	4c05      	ldr	r4, [pc, #20]	; (4aa8 <icmp_send_response+0xa4>)
    4a92:	47a0      	blx	r4
	pbuf_free(q);
    4a94:	4630      	mov	r0, r6
    4a96:	4b05      	ldr	r3, [pc, #20]	; (4aac <icmp_send_response+0xa8>)
    4a98:	4798      	blx	r3
}
    4a9a:	b005      	add	sp, #20
    4a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4aa0:	0000606d 	.word	0x0000606d
    4aa4:	00004d35 	.word	0x00004d35
    4aa8:	000050e1 	.word	0x000050e1
    4aac:	00006009 	.word	0x00006009

00004ab0 <icmp_input>:
{
    4ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4ab4:	b085      	sub	sp, #20
    4ab6:	4605      	mov	r5, r0
    4ab8:	460f      	mov	r7, r1
	iphdr = (struct ip_hdr *)p->payload;
    4aba:	6846      	ldr	r6, [r0, #4]
	hlen  = IPH_HL(iphdr) * 4;
    4abc:	7831      	ldrb	r1, [r6, #0]
    4abe:	f001 010f 	and.w	r1, r1, #15
    4ac2:	0089      	lsls	r1, r1, #2
    4ac4:	fa0f f881 	sxth.w	r8, r1
	if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t) * 2)) {
    4ac8:	4249      	negs	r1, r1
    4aca:	b20c      	sxth	r4, r1
    4acc:	4621      	mov	r1, r4
    4ace:	4b49      	ldr	r3, [pc, #292]	; (4bf4 <icmp_input+0x144>)
    4ad0:	4798      	blx	r3
    4ad2:	b9d0      	cbnz	r0, 4b0a <icmp_input+0x5a>
    4ad4:	892b      	ldrh	r3, [r5, #8]
    4ad6:	2b03      	cmp	r3, #3
    4ad8:	d917      	bls.n	4b0a <icmp_input+0x5a>
	type = *((u8_t *)p->payload);
    4ada:	686b      	ldr	r3, [r5, #4]
    4adc:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    4ade:	2b08      	cmp	r3, #8
    4ae0:	d176      	bne.n	4bd0 <icmp_input+0x120>
		if (ip_addr_ismulticast(&current_iphdr_dest)) {
    4ae2:	4b45      	ldr	r3, [pc, #276]	; (4bf8 <icmp_input+0x148>)
    4ae4:	6818      	ldr	r0, [r3, #0]
    4ae6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    4aea:	2be0      	cmp	r3, #224	; 0xe0
    4aec:	d013      	beq.n	4b16 <icmp_input+0x66>
		int accepted = 1;
    4aee:	f04f 0901 	mov.w	r9, #1
		if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
    4af2:	4639      	mov	r1, r7
    4af4:	4b41      	ldr	r3, [pc, #260]	; (4bfc <icmp_input+0x14c>)
    4af6:	4798      	blx	r3
    4af8:	b108      	cbz	r0, 4afe <icmp_input+0x4e>
			accepted = 0;
    4afa:	f04f 0900 	mov.w	r9, #0
		if (!accepted) {
    4afe:	f1b9 0f00 	cmp.w	r9, #0
    4b02:	d00b      	beq.n	4b1c <icmp_input+0x6c>
		if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
    4b04:	892b      	ldrh	r3, [r5, #8]
    4b06:	2b07      	cmp	r3, #7
    4b08:	d80c      	bhi.n	4b24 <icmp_input+0x74>
	pbuf_free(p);
    4b0a:	4628      	mov	r0, r5
    4b0c:	4b3c      	ldr	r3, [pc, #240]	; (4c00 <icmp_input+0x150>)
    4b0e:	4798      	blx	r3
}
    4b10:	b005      	add	sp, #20
    4b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			accepted = 0;
    4b16:	f04f 0900 	mov.w	r9, #0
    4b1a:	e7ea      	b.n	4af2 <icmp_input+0x42>
			pbuf_free(p);
    4b1c:	4628      	mov	r0, r5
    4b1e:	4b38      	ldr	r3, [pc, #224]	; (4c00 <icmp_input+0x150>)
    4b20:	4798      	blx	r3
			return;
    4b22:	e7f5      	b.n	4b10 <icmp_input+0x60>
		if (inet_chksum_pbuf(p) != 0) {
    4b24:	4628      	mov	r0, r5
    4b26:	4b37      	ldr	r3, [pc, #220]	; (4c04 <icmp_input+0x154>)
    4b28:	4798      	blx	r3
    4b2a:	b968      	cbnz	r0, 4b48 <icmp_input+0x98>
		if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    4b2c:	2124      	movs	r1, #36	; 0x24
    4b2e:	4628      	mov	r0, r5
    4b30:	4b30      	ldr	r3, [pc, #192]	; (4bf4 <icmp_input+0x144>)
    4b32:	4798      	blx	r3
    4b34:	b330      	cbz	r0, 4b84 <icmp_input+0xd4>
			if (pbuf_header(p, hlen)) {
    4b36:	4641      	mov	r1, r8
    4b38:	4628      	mov	r0, r5
    4b3a:	4b2e      	ldr	r3, [pc, #184]	; (4bf4 <icmp_input+0x144>)
    4b3c:	4798      	blx	r3
    4b3e:	b138      	cbz	r0, 4b50 <icmp_input+0xa0>
	pbuf_free(p);
    4b40:	4628      	mov	r0, r5
    4b42:	4b2f      	ldr	r3, [pc, #188]	; (4c00 <icmp_input+0x150>)
    4b44:	4798      	blx	r3
	return;
    4b46:	e7e3      	b.n	4b10 <icmp_input+0x60>
			pbuf_free(p);
    4b48:	4628      	mov	r0, r5
    4b4a:	4b2d      	ldr	r3, [pc, #180]	; (4c00 <icmp_input+0x150>)
    4b4c:	4798      	blx	r3
			return;
    4b4e:	e7df      	b.n	4b10 <icmp_input+0x60>
			r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
    4b50:	2200      	movs	r2, #0
    4b52:	8929      	ldrh	r1, [r5, #8]
    4b54:	2002      	movs	r0, #2
    4b56:	4b2c      	ldr	r3, [pc, #176]	; (4c08 <icmp_input+0x158>)
    4b58:	4798      	blx	r3
			if (r == NULL) {
    4b5a:	4681      	mov	r9, r0
    4b5c:	2800      	cmp	r0, #0
    4b5e:	d0ef      	beq.n	4b40 <icmp_input+0x90>
			if (pbuf_copy(r, p) != ERR_OK) {
    4b60:	4629      	mov	r1, r5
    4b62:	4b2a      	ldr	r3, [pc, #168]	; (4c0c <icmp_input+0x15c>)
    4b64:	4798      	blx	r3
    4b66:	2800      	cmp	r0, #0
    4b68:	d1ea      	bne.n	4b40 <icmp_input+0x90>
			iphdr = (struct ip_hdr *)r->payload;
    4b6a:	f8d9 6004 	ldr.w	r6, [r9, #4]
			if (pbuf_header(r, -hlen)) {
    4b6e:	4621      	mov	r1, r4
    4b70:	4648      	mov	r0, r9
    4b72:	4b20      	ldr	r3, [pc, #128]	; (4bf4 <icmp_input+0x144>)
    4b74:	4798      	blx	r3
    4b76:	2800      	cmp	r0, #0
    4b78:	d1e2      	bne.n	4b40 <icmp_input+0x90>
			pbuf_free(p);
    4b7a:	4628      	mov	r0, r5
    4b7c:	4b20      	ldr	r3, [pc, #128]	; (4c00 <icmp_input+0x150>)
    4b7e:	4798      	blx	r3
			p = r;
    4b80:	464d      	mov	r5, r9
    4b82:	e006      	b.n	4b92 <icmp_input+0xe2>
			if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
    4b84:	f06f 0123 	mvn.w	r1, #35	; 0x23
    4b88:	4628      	mov	r0, r5
    4b8a:	4b1a      	ldr	r3, [pc, #104]	; (4bf4 <icmp_input+0x144>)
    4b8c:	4798      	blx	r3
    4b8e:	2800      	cmp	r0, #0
    4b90:	d1d6      	bne.n	4b40 <icmp_input+0x90>
		iecho = (struct icmp_echo_hdr *)p->payload;
    4b92:	686a      	ldr	r2, [r5, #4]
		ip_addr_copy(iphdr->src, *ip_current_dest_addr());
    4b94:	4b18      	ldr	r3, [pc, #96]	; (4bf8 <icmp_input+0x148>)
    4b96:	681b      	ldr	r3, [r3, #0]
    4b98:	60f3      	str	r3, [r6, #12]
		ip_addr_copy(iphdr->dest, *ip_current_src_addr());
    4b9a:	4b1d      	ldr	r3, [pc, #116]	; (4c10 <icmp_input+0x160>)
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	6133      	str	r3, [r6, #16]
		ICMPH_TYPE_SET(iecho, ICMP_ER);
    4ba0:	2300      	movs	r3, #0
    4ba2:	7013      	strb	r3, [r2, #0]
		if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
    4ba4:	8853      	ldrh	r3, [r2, #2]
    4ba6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
    4baa:	428b      	cmp	r3, r1
    4bac:	d914      	bls.n	4bd8 <icmp_input+0x128>
			iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    4bae:	3309      	adds	r3, #9
    4bb0:	8053      	strh	r3, [r2, #2]
		IPH_TTL_SET(iphdr, ICMP_TTL);
    4bb2:	23ff      	movs	r3, #255	; 0xff
    4bb4:	7233      	strb	r3, [r6, #8]
		IPH_CHKSUM_SET(iphdr, 0);
    4bb6:	2300      	movs	r3, #0
    4bb8:	72b3      	strb	r3, [r6, #10]
    4bba:	72f3      	strb	r3, [r6, #11]
		IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    4bbc:	2114      	movs	r1, #20
    4bbe:	4630      	mov	r0, r6
    4bc0:	4b14      	ldr	r3, [pc, #80]	; (4c14 <icmp_input+0x164>)
    4bc2:	4798      	blx	r3
    4bc4:	8170      	strh	r0, [r6, #10]
		if (pbuf_header(p, hlen)) {
    4bc6:	4641      	mov	r1, r8
    4bc8:	4628      	mov	r0, r5
    4bca:	4b0a      	ldr	r3, [pc, #40]	; (4bf4 <icmp_input+0x144>)
    4bcc:	4798      	blx	r3
    4bce:	b130      	cbz	r0, 4bde <icmp_input+0x12e>
	pbuf_free(p);
    4bd0:	4628      	mov	r0, r5
    4bd2:	4b0b      	ldr	r3, [pc, #44]	; (4c00 <icmp_input+0x150>)
    4bd4:	4798      	blx	r3
	return;
    4bd6:	e79b      	b.n	4b10 <icmp_input+0x60>
			iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    4bd8:	3308      	adds	r3, #8
    4bda:	8053      	strh	r3, [r2, #2]
    4bdc:	e7e9      	b.n	4bb2 <icmp_input+0x102>
			ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL, ICMP_TTL, 0, IP_PROTO_ICMP, inp);
    4bde:	9702      	str	r7, [sp, #8]
    4be0:	2301      	movs	r3, #1
    4be2:	9301      	str	r3, [sp, #4]
    4be4:	2200      	movs	r2, #0
    4be6:	9200      	str	r2, [sp, #0]
    4be8:	23ff      	movs	r3, #255	; 0xff
    4bea:	4903      	ldr	r1, [pc, #12]	; (4bf8 <icmp_input+0x148>)
    4bec:	4628      	mov	r0, r5
    4bee:	4c0a      	ldr	r4, [pc, #40]	; (4c18 <icmp_input+0x168>)
    4bf0:	47a0      	blx	r4
    4bf2:	e7ed      	b.n	4bd0 <icmp_input+0x120>
    4bf4:	00005f8f 	.word	0x00005f8f
    4bf8:	200129c4 	.word	0x200129c4
    4bfc:	00005121 	.word	0x00005121
    4c00:	00006009 	.word	0x00006009
    4c04:	00004d45 	.word	0x00004d45
    4c08:	0000606d 	.word	0x0000606d
    4c0c:	0000624d 	.word	0x0000624d
    4c10:	200129bc 	.word	0x200129bc
    4c14:	00004d35 	.word	0x00004d35
    4c18:	00004fed 	.word	0x00004fed

00004c1c <icmp_dest_unreach>:
{
    4c1c:	b508      	push	{r3, lr}
	icmp_send_response(p, ICMP_DUR, t);
    4c1e:	460a      	mov	r2, r1
    4c20:	2103      	movs	r1, #3
    4c22:	4b01      	ldr	r3, [pc, #4]	; (4c28 <icmp_dest_unreach+0xc>)
    4c24:	4798      	blx	r3
    4c26:	bd08      	pop	{r3, pc}
    4c28:	00004a05 	.word	0x00004a05

00004c2c <icmp_time_exceeded>:
{
    4c2c:	b508      	push	{r3, lr}
	icmp_send_response(p, ICMP_TE, t);
    4c2e:	460a      	mov	r2, r1
    4c30:	210b      	movs	r1, #11
    4c32:	4b01      	ldr	r3, [pc, #4]	; (4c38 <icmp_time_exceeded+0xc>)
    4c34:	4798      	blx	r3
    4c36:	bd08      	pop	{r3, pc}
    4c38:	00004a05 	.word	0x00004a05

00004c3c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */

static u16_t lwip_standard_chksum(void *dataptr, int len)
{
    4c3c:	b410      	push	{r4}
    4c3e:	b083      	sub	sp, #12
	u8_t * pb = (u8_t *)dataptr;
	u16_t *ps, t = 0;
    4c40:	2300      	movs	r3, #0
    4c42:	f8ad 3006 	strh.w	r3, [sp, #6]
	u32_t  sum = 0;
	int    odd = ((mem_ptr_t)pb & 1);

	/* Get aligned to u16_t */
	if (odd && len > 0) {
    4c46:	f010 0401 	ands.w	r4, r0, #1
    4c4a:	d007      	beq.n	4c5c <lwip_standard_chksum+0x20>
    4c4c:	4299      	cmp	r1, r3
    4c4e:	dd08      	ble.n	4c62 <lwip_standard_chksum+0x26>
		((u8_t *)&t)[1] = *pb++;
    4c50:	1c43      	adds	r3, r0, #1
    4c52:	7802      	ldrb	r2, [r0, #0]
    4c54:	f88d 2007 	strb.w	r2, [sp, #7]
		len--;
    4c58:	3901      	subs	r1, #1
    4c5a:	e000      	b.n	4c5e <lwip_standard_chksum+0x22>
	u8_t * pb = (u8_t *)dataptr;
    4c5c:	4603      	mov	r3, r0
	u32_t  sum = 0;
    4c5e:	2200      	movs	r2, #0
	}

	/* Add the bulk of the data */
	ps = (u16_t *)(void *)pb;
	while (len > 1) {
    4c60:	e005      	b.n	4c6e <lwip_standard_chksum+0x32>
	u8_t * pb = (u8_t *)dataptr;
    4c62:	4603      	mov	r3, r0
    4c64:	e7fb      	b.n	4c5e <lwip_standard_chksum+0x22>
		sum += *ps++;
    4c66:	8818      	ldrh	r0, [r3, #0]
    4c68:	4402      	add	r2, r0
		len -= 2;
    4c6a:	3902      	subs	r1, #2
		sum += *ps++;
    4c6c:	3302      	adds	r3, #2
	while (len > 1) {
    4c6e:	2901      	cmp	r1, #1
    4c70:	dcf9      	bgt.n	4c66 <lwip_standard_chksum+0x2a>
	}

	/* Consume left-over byte, if any */
	if (len > 0) {
    4c72:	2900      	cmp	r1, #0
    4c74:	dd02      	ble.n	4c7c <lwip_standard_chksum+0x40>
		((u8_t *)&t)[0] = *(u8_t *)ps;
    4c76:	781b      	ldrb	r3, [r3, #0]
    4c78:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	/* Add end bytes */
	sum += t;
    4c7c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    4c80:	4402      	add	r2, r0

	/* Fold 32-bit sum to 16 bits
	   calling this twice is propably faster than if statements... */
	sum = FOLD_U32T(sum);
    4c82:	b290      	uxth	r0, r2
    4c84:	eb00 4212 	add.w	r2, r0, r2, lsr #16
	sum = FOLD_U32T(sum);
    4c88:	b290      	uxth	r0, r2
    4c8a:	eb00 4012 	add.w	r0, r0, r2, lsr #16

	/* Swap if alignment was odd */
	if (odd) {
    4c8e:	b124      	cbz	r4, 4c9a <lwip_standard_chksum+0x5e>
		sum = SWAP_BYTES_IN_WORD(sum);
    4c90:	0203      	lsls	r3, r0, #8
    4c92:	b29b      	uxth	r3, r3
    4c94:	f3c0 2007 	ubfx	r0, r0, #8, #8
    4c98:	4318      	orrs	r0, r3
	}

	return (u16_t)sum;
}
    4c9a:	b280      	uxth	r0, r0
    4c9c:	b003      	add	sp, #12
    4c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4ca2:	4770      	bx	lr

00004ca4 <inet_chksum_pseudo>:
 * @param proto ip protocol (used for checksum of pseudo header)
 * @param proto_len length of the ip data part (used for checksum of pseudo header)
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t inet_chksum_pseudo(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t proto, u16_t proto_len)
{
    4ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ca8:	4605      	mov	r5, r0
    4caa:	4689      	mov	r9, r1
    4cac:	4690      	mov	r8, r2
    4cae:	461e      	mov	r6, r3
	u32_t        addr;
	struct pbuf *q;
	u8_t         swapped;

	acc     = 0;
	swapped = 0;
    4cb0:	2700      	movs	r7, #0
	acc     = 0;
    4cb2:	463c      	mov	r4, r7
	/* iterate through all pbuf in chain */
	for (q = p; q != NULL; q = q->next) {
    4cb4:	e000      	b.n	4cb8 <inet_chksum_pseudo+0x14>
    4cb6:	682d      	ldr	r5, [r5, #0]
    4cb8:	b1a5      	cbz	r5, 4ce4 <inet_chksum_pseudo+0x40>
		LWIP_DEBUGF(INET_DEBUG,
		            ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n", (void *)q, (void *)q->next));
		acc += LWIP_CHKSUM(q->payload, q->len);
    4cba:	8969      	ldrh	r1, [r5, #10]
    4cbc:	6868      	ldr	r0, [r5, #4]
    4cbe:	4b1b      	ldr	r3, [pc, #108]	; (4d2c <inet_chksum_pseudo+0x88>)
    4cc0:	4798      	blx	r3
    4cc2:	4404      	add	r4, r0
		/*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
		/* just executing this next line is probably faster that the if statement needed
		   to check whether we really need to execute it, and does no harm */
		acc = FOLD_U32T(acc);
    4cc4:	b2a0      	uxth	r0, r4
    4cc6:	eb00 4414 	add.w	r4, r0, r4, lsr #16
		if (q->len % 2 != 0) {
    4cca:	896b      	ldrh	r3, [r5, #10]
    4ccc:	f013 0f01 	tst.w	r3, #1
    4cd0:	d0f1      	beq.n	4cb6 <inet_chksum_pseudo+0x12>
			swapped = 1 - swapped;
    4cd2:	f1c7 0701 	rsb	r7, r7, #1
    4cd6:	b2ff      	uxtb	r7, r7
			acc     = SWAP_BYTES_IN_WORD(acc);
    4cd8:	0223      	lsls	r3, r4, #8
    4cda:	b29b      	uxth	r3, r3
    4cdc:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4ce0:	431c      	orrs	r4, r3
    4ce2:	e7e8      	b.n	4cb6 <inet_chksum_pseudo+0x12>
		}
		/*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
	}

	if (swapped) {
    4ce4:	b127      	cbz	r7, 4cf0 <inet_chksum_pseudo+0x4c>
		acc = SWAP_BYTES_IN_WORD(acc);
    4ce6:	0223      	lsls	r3, r4, #8
    4ce8:	b29b      	uxth	r3, r3
    4cea:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4cee:	431c      	orrs	r4, r3
	}
	addr = ip4_addr_get_u32(src);
    4cf0:	f8d9 3000 	ldr.w	r3, [r9]
	acc += (addr & 0xffffUL);
    4cf4:	fa14 f483 	uxtah	r4, r4, r3
	acc += ((addr >> 16) & 0xffffUL);
    4cf8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
	addr = ip4_addr_get_u32(dest);
    4cfc:	f8d8 0000 	ldr.w	r0, [r8]
	acc += (addr & 0xffffUL);
    4d00:	fa14 f480 	uxtah	r4, r4, r0
	acc += ((addr >> 16) & 0xffffUL);
    4d04:	eb04 4410 	add.w	r4, r4, r0, lsr #16
	acc += (u32_t)htons((u16_t)proto);
    4d08:	4630      	mov	r0, r6
    4d0a:	4d09      	ldr	r5, [pc, #36]	; (4d30 <inet_chksum_pseudo+0x8c>)
    4d0c:	47a8      	blx	r5
    4d0e:	4404      	add	r4, r0
	acc += (u32_t)htons(proto_len);
    4d10:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    4d14:	47a8      	blx	r5
    4d16:	4420      	add	r0, r4

	/* Fold 32-bit sum to 16 bits
	   calling this twice is propably faster than if statements... */
	acc = FOLD_U32T(acc);
    4d18:	b283      	uxth	r3, r0
    4d1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
	acc = FOLD_U32T(acc);
    4d1e:	b298      	uxth	r0, r3
    4d20:	eb00 4013 	add.w	r0, r0, r3, lsr #16
	LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%" X32_F "\n", acc));
	return (u16_t) ~(acc & 0xffffUL);
    4d24:	43c0      	mvns	r0, r0
}
    4d26:	b280      	uxth	r0, r0
    4d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d2c:	00004c3d 	.word	0x00004c3d
    4d30:	00003ec1 	.word	0x00003ec1

00004d34 <inet_chksum>:
 * @param len length of the buffer to calculate the checksum
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t inet_chksum(void *dataptr, u16_t len)
{
    4d34:	b508      	push	{r3, lr}
	return ~LWIP_CHKSUM(dataptr, len);
    4d36:	4b02      	ldr	r3, [pc, #8]	; (4d40 <inet_chksum+0xc>)
    4d38:	4798      	blx	r3
    4d3a:	43c0      	mvns	r0, r0
}
    4d3c:	b280      	uxth	r0, r0
    4d3e:	bd08      	pop	{r3, pc}
    4d40:	00004c3d 	.word	0x00004c3d

00004d44 <inet_chksum_pbuf>:
 *
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t inet_chksum_pbuf(struct pbuf *p)
{
    4d44:	b570      	push	{r4, r5, r6, lr}
    4d46:	4605      	mov	r5, r0
	u32_t        acc;
	struct pbuf *q;
	u8_t         swapped;

	acc     = 0;
	swapped = 0;
    4d48:	2600      	movs	r6, #0
	acc     = 0;
    4d4a:	4634      	mov	r4, r6
	for (q = p; q != NULL; q = q->next) {
    4d4c:	e000      	b.n	4d50 <inet_chksum_pbuf+0xc>
    4d4e:	682d      	ldr	r5, [r5, #0]
    4d50:	b1a5      	cbz	r5, 4d7c <inet_chksum_pbuf+0x38>
		acc += LWIP_CHKSUM(q->payload, q->len);
    4d52:	8969      	ldrh	r1, [r5, #10]
    4d54:	6868      	ldr	r0, [r5, #4]
    4d56:	4b0e      	ldr	r3, [pc, #56]	; (4d90 <inet_chksum_pbuf+0x4c>)
    4d58:	4798      	blx	r3
    4d5a:	4420      	add	r0, r4
		acc = FOLD_U32T(acc);
    4d5c:	b284      	uxth	r4, r0
    4d5e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
		if (q->len % 2 != 0) {
    4d62:	896b      	ldrh	r3, [r5, #10]
    4d64:	f013 0f01 	tst.w	r3, #1
    4d68:	d0f1      	beq.n	4d4e <inet_chksum_pbuf+0xa>
			swapped = 1 - swapped;
    4d6a:	f1c6 0601 	rsb	r6, r6, #1
    4d6e:	b2f6      	uxtb	r6, r6
			acc     = SWAP_BYTES_IN_WORD(acc);
    4d70:	0223      	lsls	r3, r4, #8
    4d72:	b29b      	uxth	r3, r3
    4d74:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4d78:	431c      	orrs	r4, r3
    4d7a:	e7e8      	b.n	4d4e <inet_chksum_pbuf+0xa>
		}
	}

	if (swapped) {
    4d7c:	b126      	cbz	r6, 4d88 <inet_chksum_pbuf+0x44>
		acc = SWAP_BYTES_IN_WORD(acc);
    4d7e:	0223      	lsls	r3, r4, #8
    4d80:	b29b      	uxth	r3, r3
    4d82:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4d86:	431c      	orrs	r4, r3
	}
	return (u16_t) ~(acc & 0xffffUL);
    4d88:	43e0      	mvns	r0, r4
}
    4d8a:	b280      	uxth	r0, r0
    4d8c:	bd70      	pop	{r4, r5, r6, pc}
    4d8e:	bf00      	nop
    4d90:	00004c3d 	.word	0x00004c3d

00004d94 <ip_route>:
		return netif;
	}
#endif

	/* iterate through netifs */
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    4d94:	4b19      	ldr	r3, [pc, #100]	; (4dfc <ip_route+0x68>)
    4d96:	681b      	ldr	r3, [r3, #0]
    4d98:	e00e      	b.n	4db8 <ip_route+0x24>
				/* return netif on which to forward IP packet */
				return netif;
			}
		}
	}
	if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    4d9a:	4a19      	ldr	r2, [pc, #100]	; (4e00 <ip_route+0x6c>)
    4d9c:	6810      	ldr	r0, [r2, #0]
    4d9e:	b138      	cbz	r0, 4db0 <ip_route+0x1c>
    4da0:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    4da4:	f012 0f01 	tst.w	r2, #1
    4da8:	d102      	bne.n	4db0 <ip_route+0x1c>
		             ip4_addr2_16(dest),
		             ip4_addr3_16(dest),
		             ip4_addr4_16(dest)));
		IP_STATS_INC(ip.rterr);
		snmp_inc_ipoutnoroutes();
		return NULL;
    4daa:	4618      	mov	r0, r3
    4dac:	e000      	b.n	4db0 <ip_route+0x1c>
				return netif;
    4dae:	4618      	mov	r0, r3
	}
	/* no matching netif found, use default netif */
	return netif_default;
}
    4db0:	f85d 4b04 	ldr.w	r4, [sp], #4
    4db4:	4770      	bx	lr
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    4db6:	681b      	ldr	r3, [r3, #0]
    4db8:	b1a3      	cbz	r3, 4de4 <ip_route+0x50>
		if (netif_is_up(netif)) {
    4dba:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    4dbe:	f012 0f01 	tst.w	r2, #1
    4dc2:	d0f8      	beq.n	4db6 <ip_route+0x22>
{
    4dc4:	b410      	push	{r4}
			if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
    4dc6:	6802      	ldr	r2, [r0, #0]
    4dc8:	685c      	ldr	r4, [r3, #4]
    4dca:	6899      	ldr	r1, [r3, #8]
    4dcc:	4062      	eors	r2, r4
    4dce:	420a      	tst	r2, r1
    4dd0:	d0ed      	beq.n	4dae <ip_route+0x1a>
	for (netif = netif_list; netif != NULL; netif = netif->next) {
    4dd2:	681b      	ldr	r3, [r3, #0]
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	d0e0      	beq.n	4d9a <ip_route+0x6>
		if (netif_is_up(netif)) {
    4dd8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
    4ddc:	f012 0f01 	tst.w	r2, #1
    4de0:	d0f7      	beq.n	4dd2 <ip_route+0x3e>
    4de2:	e7f0      	b.n	4dc6 <ip_route+0x32>
	if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
    4de4:	4a06      	ldr	r2, [pc, #24]	; (4e00 <ip_route+0x6c>)
    4de6:	6810      	ldr	r0, [r2, #0]
    4de8:	2800      	cmp	r0, #0
    4dea:	d0e3      	beq.n	4db4 <ip_route+0x20>
    4dec:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    4df0:	f012 0f01 	tst.w	r2, #1
    4df4:	d1de      	bne.n	4db4 <ip_route+0x20>
		return NULL;
    4df6:	4618      	mov	r0, r3
}
    4df8:	4770      	bx	lr
    4dfa:	bf00      	nop
    4dfc:	200161e0 	.word	0x200161e0
    4e00:	200161e4 	.word	0x200161e4

00004e04 <ip_input>:
 * @param inp the netif on which this packet was received
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t ip_input(struct pbuf *p, struct netif *inp)
{
    4e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e08:	4606      	mov	r6, r0

	IP_STATS_INC(ip.recv);
	snmp_inc_ipinreceives();

	/* identify the IP header */
	iphdr = (struct ip_hdr *)p->payload;
    4e0a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (IPH_V(iphdr) != 4) {
    4e0e:	f898 3000 	ldrb.w	r3, [r8]
    4e12:	091a      	lsrs	r2, r3, #4
    4e14:	2a04      	cmp	r2, #4
    4e16:	d004      	beq.n	4e22 <ip_input+0x1e>
		LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING,
		            ("IP packet dropped due to bad version number %" U16_F "\n", IPH_V(iphdr)));
		ip_debug_print(p);
		pbuf_free(p);
    4e18:	4b65      	ldr	r3, [pc, #404]	; (4fb0 <ip_input+0x1ac>)
    4e1a:	4798      	blx	r3
	current_header = NULL;
	ip_addr_set_any(&current_iphdr_src);
	ip_addr_set_any(&current_iphdr_dest);

	return ERR_OK;
}
    4e1c:	2000      	movs	r0, #0
    4e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e22:	460f      	mov	r7, r1
	iphdr_hlen = IPH_HL(iphdr);
    4e24:	f003 030f 	and.w	r3, r3, #15
	iphdr_hlen *= 4;
    4e28:	009d      	lsls	r5, r3, #2
	iphdr_len = ntohs(IPH_LEN(iphdr));
    4e2a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
    4e2e:	4b61      	ldr	r3, [pc, #388]	; (4fb4 <ip_input+0x1b0>)
    4e30:	4798      	blx	r3
    4e32:	4604      	mov	r4, r0
	if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
    4e34:	8973      	ldrh	r3, [r6, #10]
    4e36:	429d      	cmp	r5, r3
    4e38:	d802      	bhi.n	4e40 <ip_input+0x3c>
    4e3a:	8933      	ldrh	r3, [r6, #8]
    4e3c:	4298      	cmp	r0, r3
    4e3e:	d903      	bls.n	4e48 <ip_input+0x44>
		pbuf_free(p);
    4e40:	4630      	mov	r0, r6
    4e42:	4b5b      	ldr	r3, [pc, #364]	; (4fb0 <ip_input+0x1ac>)
    4e44:	4798      	blx	r3
		return ERR_OK;
    4e46:	e7e9      	b.n	4e1c <ip_input+0x18>
	if (inet_chksum(iphdr, iphdr_hlen) != 0) {
    4e48:	4629      	mov	r1, r5
    4e4a:	4640      	mov	r0, r8
    4e4c:	4b5a      	ldr	r3, [pc, #360]	; (4fb8 <ip_input+0x1b4>)
    4e4e:	4798      	blx	r3
    4e50:	b978      	cbnz	r0, 4e72 <ip_input+0x6e>
	pbuf_realloc(p, iphdr_len);
    4e52:	4621      	mov	r1, r4
    4e54:	4630      	mov	r0, r6
    4e56:	4b59      	ldr	r3, [pc, #356]	; (4fbc <ip_input+0x1b8>)
    4e58:	4798      	blx	r3
	ip_addr_copy(current_iphdr_dest, iphdr->dest);
    4e5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
    4e5e:	4b58      	ldr	r3, [pc, #352]	; (4fc0 <ip_input+0x1bc>)
    4e60:	601a      	str	r2, [r3, #0]
	ip_addr_copy(current_iphdr_src, iphdr->src);
    4e62:	f8d8 200c 	ldr.w	r2, [r8, #12]
    4e66:	4b57      	ldr	r3, [pc, #348]	; (4fc4 <ip_input+0x1c0>)
    4e68:	601a      	str	r2, [r3, #0]
		netif     = inp;
    4e6a:	463c      	mov	r4, r7
		int first = 1;
    4e6c:	f04f 0901 	mov.w	r9, #1
    4e70:	e00d      	b.n	4e8e <ip_input+0x8a>
		pbuf_free(p);
    4e72:	4630      	mov	r0, r6
    4e74:	4b4e      	ldr	r3, [pc, #312]	; (4fb0 <ip_input+0x1ac>)
    4e76:	4798      	blx	r3
		return ERR_OK;
    4e78:	e7d0      	b.n	4e1c <ip_input+0x18>
			if (first) {
    4e7a:	f1b9 0f00 	cmp.w	r9, #0
    4e7e:	d04e      	beq.n	4f1e <ip_input+0x11a>
				netif = netif_list;
    4e80:	4b51      	ldr	r3, [pc, #324]	; (4fc8 <ip_input+0x1c4>)
    4e82:	681c      	ldr	r4, [r3, #0]
				first = 0;
    4e84:	f04f 0900 	mov.w	r9, #0
			if (netif == inp) {
    4e88:	42bc      	cmp	r4, r7
    4e8a:	d04a      	beq.n	4f22 <ip_input+0x11e>
		} while (netif != NULL);
    4e8c:	b19c      	cbz	r4, 4eb6 <ip_input+0xb2>
			if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
    4e8e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    4e92:	f013 0f01 	tst.w	r3, #1
    4e96:	d0f0      	beq.n	4e7a <ip_input+0x76>
    4e98:	f114 0f04 	cmn.w	r4, #4
    4e9c:	d0ed      	beq.n	4e7a <ip_input+0x76>
    4e9e:	6863      	ldr	r3, [r4, #4]
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d0ea      	beq.n	4e7a <ip_input+0x76>
				if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    4ea4:	4a46      	ldr	r2, [pc, #280]	; (4fc0 <ip_input+0x1bc>)
    4ea6:	6810      	ldr	r0, [r2, #0]
    4ea8:	4283      	cmp	r3, r0
    4eaa:	d004      	beq.n	4eb6 <ip_input+0xb2>
				    ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
    4eac:	4621      	mov	r1, r4
    4eae:	4b47      	ldr	r3, [pc, #284]	; (4fcc <ip_input+0x1c8>)
    4eb0:	4798      	blx	r3
				if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
    4eb2:	2800      	cmp	r0, #0
    4eb4:	d0e1      	beq.n	4e7a <ip_input+0x76>
	if (netif == NULL) {
    4eb6:	2c00      	cmp	r4, #0
    4eb8:	d035      	beq.n	4f26 <ip_input+0x122>
	int check_ip_src = 1;
    4eba:	2301      	movs	r3, #1
	if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
    4ebc:	b11b      	cbz	r3, 4ec6 <ip_input+0xc2>
    4ebe:	4b41      	ldr	r3, [pc, #260]	; (4fc4 <ip_input+0x1c0>)
    4ec0:	6818      	ldr	r0, [r3, #0]
    4ec2:	2800      	cmp	r0, #0
    4ec4:	d13f      	bne.n	4f46 <ip_input+0x142>
	if (netif == NULL) {
    4ec6:	2c00      	cmp	r4, #0
    4ec8:	d04b      	beq.n	4f62 <ip_input+0x15e>
	if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
    4eca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    4ece:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    4ed2:	b29b      	uxth	r3, r3
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d148      	bne.n	4f6a <ip_input+0x166>
	current_netif  = inp;
    4ed8:	4b3d      	ldr	r3, [pc, #244]	; (4fd0 <ip_input+0x1cc>)
    4eda:	601f      	str	r7, [r3, #0]
	current_header = iphdr;
    4edc:	4b3d      	ldr	r3, [pc, #244]	; (4fd4 <ip_input+0x1d0>)
    4ede:	f8c3 8000 	str.w	r8, [r3]
		switch (IPH_PROTO(iphdr)) {
    4ee2:	f898 3009 	ldrb.w	r3, [r8, #9]
    4ee6:	2b06      	cmp	r3, #6
    4ee8:	d057      	beq.n	4f9a <ip_input+0x196>
    4eea:	2b11      	cmp	r3, #17
    4eec:	d047      	beq.n	4f7e <ip_input+0x17a>
    4eee:	2b01      	cmp	r3, #1
    4ef0:	d058      	beq.n	4fa4 <ip_input+0x1a0>
			if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) && !ip_addr_ismulticast(&current_iphdr_dest)) {
    4ef2:	4639      	mov	r1, r7
    4ef4:	4b32      	ldr	r3, [pc, #200]	; (4fc0 <ip_input+0x1bc>)
    4ef6:	6818      	ldr	r0, [r3, #0]
    4ef8:	4b34      	ldr	r3, [pc, #208]	; (4fcc <ip_input+0x1c8>)
    4efa:	4798      	blx	r3
    4efc:	b958      	cbnz	r0, 4f16 <ip_input+0x112>
    4efe:	4b30      	ldr	r3, [pc, #192]	; (4fc0 <ip_input+0x1bc>)
    4f00:	681b      	ldr	r3, [r3, #0]
    4f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    4f06:	2be0      	cmp	r3, #224	; 0xe0
    4f08:	d005      	beq.n	4f16 <ip_input+0x112>
				p->payload = iphdr;
    4f0a:	f8c6 8004 	str.w	r8, [r6, #4]
				icmp_dest_unreach(p, ICMP_DUR_PROTO);
    4f0e:	2102      	movs	r1, #2
    4f10:	4630      	mov	r0, r6
    4f12:	4b31      	ldr	r3, [pc, #196]	; (4fd8 <ip_input+0x1d4>)
    4f14:	4798      	blx	r3
			pbuf_free(p);
    4f16:	4630      	mov	r0, r6
    4f18:	4b25      	ldr	r3, [pc, #148]	; (4fb0 <ip_input+0x1ac>)
    4f1a:	4798      	blx	r3
    4f1c:	e033      	b.n	4f86 <ip_input+0x182>
				netif = netif->next;
    4f1e:	6824      	ldr	r4, [r4, #0]
    4f20:	e7b2      	b.n	4e88 <ip_input+0x84>
				netif = netif->next;
    4f22:	6824      	ldr	r4, [r4, #0]
    4f24:	e7b2      	b.n	4e8c <ip_input+0x88>
		if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
    4f26:	f898 3009 	ldrb.w	r3, [r8, #9]
    4f2a:	2b11      	cmp	r3, #17
    4f2c:	d001      	beq.n	4f32 <ip_input+0x12e>
	int check_ip_src = 1;
    4f2e:	2301      	movs	r3, #1
    4f30:	e7c4      	b.n	4ebc <ip_input+0xb8>
			struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
    4f32:	4445      	add	r5, r8
			if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
    4f34:	886b      	ldrh	r3, [r5, #2]
    4f36:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
    4f3a:	d001      	beq.n	4f40 <ip_input+0x13c>
	int check_ip_src = 1;
    4f3c:	2301      	movs	r3, #1
    4f3e:	e7bd      	b.n	4ebc <ip_input+0xb8>
				netif        = inp;
    4f40:	463c      	mov	r4, r7
				check_ip_src = 0;
    4f42:	2300      	movs	r3, #0
    4f44:	e7ba      	b.n	4ebc <ip_input+0xb8>
		if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) || (ip_addr_ismulticast(&current_iphdr_src))) {
    4f46:	4639      	mov	r1, r7
    4f48:	4b20      	ldr	r3, [pc, #128]	; (4fcc <ip_input+0x1c8>)
    4f4a:	4798      	blx	r3
    4f4c:	b928      	cbnz	r0, 4f5a <ip_input+0x156>
    4f4e:	4b1d      	ldr	r3, [pc, #116]	; (4fc4 <ip_input+0x1c0>)
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    4f56:	2be0      	cmp	r3, #224	; 0xe0
    4f58:	d1b5      	bne.n	4ec6 <ip_input+0xc2>
			pbuf_free(p);
    4f5a:	4630      	mov	r0, r6
    4f5c:	4b14      	ldr	r3, [pc, #80]	; (4fb0 <ip_input+0x1ac>)
    4f5e:	4798      	blx	r3
			return ERR_OK;
    4f60:	e75c      	b.n	4e1c <ip_input+0x18>
		pbuf_free(p);
    4f62:	4630      	mov	r0, r6
    4f64:	4b12      	ldr	r3, [pc, #72]	; (4fb0 <ip_input+0x1ac>)
    4f66:	4798      	blx	r3
		return ERR_OK;
    4f68:	e758      	b.n	4e1c <ip_input+0x18>
		p = ip_reass(p);
    4f6a:	4630      	mov	r0, r6
    4f6c:	4b1b      	ldr	r3, [pc, #108]	; (4fdc <ip_input+0x1d8>)
    4f6e:	4798      	blx	r3
		if (p == NULL) {
    4f70:	4606      	mov	r6, r0
    4f72:	2800      	cmp	r0, #0
    4f74:	f43f af52 	beq.w	4e1c <ip_input+0x18>
		iphdr = (struct ip_hdr *)p->payload;
    4f78:	f8d0 8004 	ldr.w	r8, [r0, #4]
    4f7c:	e7ac      	b.n	4ed8 <ip_input+0xd4>
			udp_input(p, inp);
    4f7e:	4639      	mov	r1, r7
    4f80:	4630      	mov	r0, r6
    4f82:	4b17      	ldr	r3, [pc, #92]	; (4fe0 <ip_input+0x1dc>)
    4f84:	4798      	blx	r3
	current_netif  = NULL;
    4f86:	2300      	movs	r3, #0
    4f88:	4a11      	ldr	r2, [pc, #68]	; (4fd0 <ip_input+0x1cc>)
    4f8a:	6013      	str	r3, [r2, #0]
	current_header = NULL;
    4f8c:	4a11      	ldr	r2, [pc, #68]	; (4fd4 <ip_input+0x1d0>)
    4f8e:	6013      	str	r3, [r2, #0]
	ip_addr_set_any(&current_iphdr_src);
    4f90:	4a0c      	ldr	r2, [pc, #48]	; (4fc4 <ip_input+0x1c0>)
    4f92:	6013      	str	r3, [r2, #0]
	ip_addr_set_any(&current_iphdr_dest);
    4f94:	4a0a      	ldr	r2, [pc, #40]	; (4fc0 <ip_input+0x1bc>)
    4f96:	6013      	str	r3, [r2, #0]
	return ERR_OK;
    4f98:	e740      	b.n	4e1c <ip_input+0x18>
			tcp_input(p, inp);
    4f9a:	4639      	mov	r1, r7
    4f9c:	4630      	mov	r0, r6
    4f9e:	4b11      	ldr	r3, [pc, #68]	; (4fe4 <ip_input+0x1e0>)
    4fa0:	4798      	blx	r3
			break;
    4fa2:	e7f0      	b.n	4f86 <ip_input+0x182>
			icmp_input(p, inp);
    4fa4:	4639      	mov	r1, r7
    4fa6:	4630      	mov	r0, r6
    4fa8:	4b0f      	ldr	r3, [pc, #60]	; (4fe8 <ip_input+0x1e4>)
    4faa:	4798      	blx	r3
			break;
    4fac:	e7eb      	b.n	4f86 <ip_input+0x182>
    4fae:	bf00      	nop
    4fb0:	00006009 	.word	0x00006009
    4fb4:	00003ecd 	.word	0x00003ecd
    4fb8:	00004d35 	.word	0x00004d35
    4fbc:	00006195 	.word	0x00006195
    4fc0:	200129c4 	.word	0x200129c4
    4fc4:	200129bc 	.word	0x200129bc
    4fc8:	200161e0 	.word	0x200161e0
    4fcc:	00005121 	.word	0x00005121
    4fd0:	200129c0 	.word	0x200129c0
    4fd4:	200129c8 	.word	0x200129c8
    4fd8:	00004c1d 	.word	0x00004c1d
    4fdc:	00005661 	.word	0x00005661
    4fe0:	000091bd 	.word	0x000091bd
    4fe4:	00007ed1 	.word	0x00007ed1
    4fe8:	00004ab1 	.word	0x00004ab1

00004fec <ip_output_if>:
 *
 * @note ip_id: RFC791 "some host may be able to simply use
 *  unique identifiers independent of destination"
 */
err_t ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t ttl, u8_t tos, u8_t proto, struct netif *netif)
{
    4fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ff0:	b083      	sub	sp, #12
    4ff2:	4606      	mov	r6, r0
    4ff4:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
    4ff8:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
    4ffc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	LWIP_ASSERT("p->ref == 1", p->ref == 1);

	snmp_inc_ipoutrequests();

	/* Should the IP header be generated or is it already included in p? */
	if (dest != IP_HDRINCL) {
    4ffe:	2a00      	cmp	r2, #0
    5000:	d055      	beq.n	50ae <ip_output_if+0xc2>
    5002:	4689      	mov	r9, r1
    5004:	461c      	mov	r4, r3
    5006:	4690      	mov	r8, r2
			}
#endif /* CHECKSUM_GEN_IP_INLINE */
		}
#endif /* IP_OPTIONS_SEND */
		/* generate IP header */
		if (pbuf_header(p, IP_HLEN)) {
    5008:	2114      	movs	r1, #20
    500a:	4b31      	ldr	r3, [pc, #196]	; (50d0 <ip_output_if+0xe4>)
    500c:	4798      	blx	r3
    500e:	2800      	cmp	r0, #0
    5010:	d15a      	bne.n	50c8 <ip_output_if+0xdc>
			IP_STATS_INC(ip.err);
			snmp_inc_ipoutdiscards();
			return ERR_BUF;
		}

		iphdr = (struct ip_hdr *)p->payload;
    5012:	6875      	ldr	r5, [r6, #4]
		LWIP_ASSERT("check that first pbuf can hold struct ip_hdr", (p->len >= sizeof(struct ip_hdr)));

		IPH_TTL_SET(iphdr, ttl);
    5014:	722c      	strb	r4, [r5, #8]
		IPH_PROTO_SET(iphdr, proto);
    5016:	f885 b009 	strb.w	fp, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += LWIP_MAKE_U16(proto, ttl);
    501a:	ea44 240b 	orr.w	r4, r4, fp, lsl #8
#endif /* CHECKSUM_GEN_IP_INLINE */

		/* dest cannot be NULL here */
		ip_addr_copy(iphdr->dest, *dest);
    501e:	f8d8 0000 	ldr.w	r0, [r8]
    5022:	6128      	str	r0, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    5024:	fa14 f480 	uxtah	r4, r4, r0
		chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
    5028:	eb04 4410 	add.w	r4, r4, r0, lsr #16
#endif /* CHECKSUM_GEN_IP_INLINE */

		IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    502c:	2345      	movs	r3, #69	; 0x45
    502e:	702b      	strb	r3, [r5, #0]
		IPH_TOS_SET(iphdr, tos);
    5030:	f885 a001 	strb.w	sl, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
    5034:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    5038:	ea4a 0a03 	orr.w	sl, sl, r3
    503c:	4454      	add	r4, sl
#endif /* CHECKSUM_GEN_IP_INLINE */
		IPH_LEN_SET(iphdr, htons(p->tot_len));
    503e:	8930      	ldrh	r0, [r6, #8]
    5040:	f8df a094 	ldr.w	sl, [pc, #148]	; 50d8 <ip_output_if+0xec>
    5044:	47d0      	blx	sl
    5046:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += iphdr->_len;
    5048:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
		IPH_OFFSET_SET(iphdr, 0);
    504a:	2300      	movs	r3, #0
    504c:	71ab      	strb	r3, [r5, #6]
    504e:	71eb      	strb	r3, [r5, #7]
		IPH_ID_SET(iphdr, htons(ip_id));
    5050:	f8df b088 	ldr.w	fp, [pc, #136]	; 50dc <ip_output_if+0xf0>
    5054:	f8bb 0000 	ldrh.w	r0, [fp]
    5058:	47d0      	blx	sl
    505a:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
		chk_sum += iphdr->_id;
    505c:	4404      	add	r4, r0
#endif /* CHECKSUM_GEN_IP_INLINE */
		++ip_id;
    505e:	f8bb 3000 	ldrh.w	r3, [fp]
    5062:	3301      	adds	r3, #1
    5064:	f8ab 3000 	strh.w	r3, [fp]

		if (ip_addr_isany(src)) {
    5068:	f1b9 0f00 	cmp.w	r9, #0
    506c:	d002      	beq.n	5074 <ip_output_if+0x88>
    506e:	f8d9 3000 	ldr.w	r3, [r9]
    5072:	b9d3      	cbnz	r3, 50aa <ip_output_if+0xbe>
			ip_addr_copy(iphdr->src, netif->ip_addr);
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	60eb      	str	r3, [r5, #12]
			/* src cannot be NULL here */
			ip_addr_copy(iphdr->src, *src);
		}

#if CHECKSUM_GEN_IP_INLINE
		chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
    5078:	68e8      	ldr	r0, [r5, #12]
    507a:	fa14 f380 	uxtah	r3, r4, r0
		chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
    507e:	eb03 4010 	add.w	r0, r3, r0, lsr #16
		chk_sum        = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    5082:	b283      	uxth	r3, r0
    5084:	eb03 4310 	add.w	r3, r3, r0, lsr #16
		chk_sum        = (chk_sum >> 16) + chk_sum;
    5088:	eb03 4313 	add.w	r3, r3, r3, lsr #16
		chk_sum        = ~chk_sum;
		iphdr->_chksum = chk_sum; /* network order */
    508c:	43db      	mvns	r3, r3
    508e:	816b      	strh	r3, [r5, #10]
	}
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
	/* don't fragment if interface has mtu set to 0 [loopif] */
	if (netif->mtu && (p->tot_len > netif->mtu)) {
    5090:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    5092:	b113      	cbz	r3, 509a <ip_output_if+0xae>
    5094:	8932      	ldrh	r2, [r6, #8]
    5096:	4293      	cmp	r3, r2
    5098:	d310      	bcc.n	50bc <ip_output_if+0xd0>
		return ip_frag(p, netif, dest);
	}
#endif /* IP_FRAG */

	LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
	return netif->output(netif, p, dest);
    509a:	697b      	ldr	r3, [r7, #20]
    509c:	4642      	mov	r2, r8
    509e:	4631      	mov	r1, r6
    50a0:	4638      	mov	r0, r7
    50a2:	4798      	blx	r3
}
    50a4:	b003      	add	sp, #12
    50a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ip_addr_copy(iphdr->src, *src);
    50aa:	60eb      	str	r3, [r5, #12]
    50ac:	e7e4      	b.n	5078 <ip_output_if+0x8c>
		iphdr = (struct ip_hdr *)p->payload;
    50ae:	6843      	ldr	r3, [r0, #4]
		ip_addr_copy(dest_addr, iphdr->dest);
    50b0:	691b      	ldr	r3, [r3, #16]
    50b2:	f10d 0808 	add.w	r8, sp, #8
    50b6:	f848 3d04 	str.w	r3, [r8, #-4]!
    50ba:	e7e9      	b.n	5090 <ip_output_if+0xa4>
		return ip_frag(p, netif, dest);
    50bc:	4642      	mov	r2, r8
    50be:	4639      	mov	r1, r7
    50c0:	4630      	mov	r0, r6
    50c2:	4b04      	ldr	r3, [pc, #16]	; (50d4 <ip_output_if+0xe8>)
    50c4:	4798      	blx	r3
    50c6:	e7ed      	b.n	50a4 <ip_output_if+0xb8>
			return ERR_BUF;
    50c8:	f06f 0001 	mvn.w	r0, #1
    50cc:	e7ea      	b.n	50a4 <ip_output_if+0xb8>
    50ce:	bf00      	nop
    50d0:	00005f8f 	.word	0x00005f8f
    50d4:	00005815 	.word	0x00005815
    50d8:	00003ec1 	.word	0x00003ec1
    50dc:	200015ec 	.word	0x200015ec

000050e0 <ip_output>:
 *
 * @return ERR_RTE if no route is found
 *         see ip_output_if() for more return values
 */
err_t ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, u8_t ttl, u8_t tos, u8_t proto)
{
    50e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50e2:	b085      	sub	sp, #20
    50e4:	4605      	mov	r5, r0
    50e6:	460e      	mov	r6, r1
    50e8:	4614      	mov	r4, r2
    50ea:	461f      	mov	r7, r3

	/* pbufs passed to IP must have a ref-count of 1 as their payload pointer
	   gets altered as the packet is passed down the stack */
	LWIP_ASSERT("p->ref == 1", p->ref == 1);

	if ((netif = ip_route(dest)) == NULL) {
    50ec:	4610      	mov	r0, r2
    50ee:	4b0a      	ldr	r3, [pc, #40]	; (5118 <ip_output+0x38>)
    50f0:	4798      	blx	r3
    50f2:	b170      	cbz	r0, 5112 <ip_output+0x32>
		             ip4_addr4_16(dest)));
		IP_STATS_INC(ip.rterr);
		return ERR_RTE;
	}

	return ip_output_if(p, src, dest, ttl, tos, proto, netif);
    50f4:	9002      	str	r0, [sp, #8]
    50f6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    50fa:	9301      	str	r3, [sp, #4]
    50fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    5100:	9300      	str	r3, [sp, #0]
    5102:	463b      	mov	r3, r7
    5104:	4622      	mov	r2, r4
    5106:	4631      	mov	r1, r6
    5108:	4628      	mov	r0, r5
    510a:	4c04      	ldr	r4, [pc, #16]	; (511c <ip_output+0x3c>)
    510c:	47a0      	blx	r4
}
    510e:	b005      	add	sp, #20
    5110:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_RTE;
    5112:	f06f 0003 	mvn.w	r0, #3
    5116:	e7fa      	b.n	510e <ip_output+0x2e>
    5118:	00004d95 	.word	0x00004d95
    511c:	00004fed 	.word	0x00004fed

00005120 <ip4_addr_isbroadcast>:
{
	ip_addr_t ipaddr;
	ip4_addr_set_u32(&ipaddr, addr);

	/* all ones (broadcast) or all zeroes (old skool broadcast) */
	if ((~addr == IPADDR_ANY) || (addr == IPADDR_ANY)) {
    5120:	1e43      	subs	r3, r0, #1
    5122:	f113 0f03 	cmn.w	r3, #3
    5126:	d811      	bhi.n	514c <ip4_addr_isbroadcast+0x2c>
		return 1;
		/* no broadcast support on this network interface? */
	} else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
    5128:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    512c:	f013 0f02 	tst.w	r3, #2
    5130:	d00e      	beq.n	5150 <ip4_addr_isbroadcast+0x30>
		/* the given address cannot be a broadcast address
		 * nor can we check against any broadcast addresses */
		return 0;
		/* address matches network interface address exactly? => no broadcast */
	} else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    5132:	684b      	ldr	r3, [r1, #4]
    5134:	4298      	cmp	r0, r3
    5136:	d00d      	beq.n	5154 <ip4_addr_isbroadcast+0x34>
		return 0;
		/*  on the same (sub) network... */
	} else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
    5138:	688a      	ldr	r2, [r1, #8]
    513a:	4043      	eors	r3, r0
    513c:	4213      	tst	r3, r2
    513e:	d10b      	bne.n	5158 <ip4_addr_isbroadcast+0x38>
	           /* ...and host identifier bits are all ones? =>... */
	           && ((addr & ~ip4_addr_get_u32(&netif->netmask))
    5140:	43d2      	mvns	r2, r2
    5142:	ea32 0300 	bics.w	r3, r2, r0
    5146:	d009      	beq.n	515c <ip4_addr_isbroadcast+0x3c>
	               == (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
		/* => network broadcast address */
		return 1;
	} else {
		return 0;
    5148:	2000      	movs	r0, #0
    514a:	4770      	bx	lr
		return 1;
    514c:	2001      	movs	r0, #1
    514e:	4770      	bx	lr
		return 0;
    5150:	2000      	movs	r0, #0
    5152:	4770      	bx	lr
		return 0;
    5154:	2000      	movs	r0, #0
    5156:	4770      	bx	lr
		return 0;
    5158:	2000      	movs	r0, #0
    515a:	4770      	bx	lr
		return 1;
    515c:	2001      	movs	r0, #1
	}
}
    515e:	4770      	bx	lr

00005160 <ipaddr_aton>:
 * @param cp IP address in ascii represenation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int ipaddr_aton(const char *cp, ip_addr_t *addr)
{
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	b084      	sub	sp, #16
    5164:	4605      	mov	r5, r0
    5166:	460c      	mov	r4, r1
	u8_t   base;
	char   c;
	u32_t  parts[4];
	u32_t *pp = parts;

	c = *cp;
    5168:	7803      	ldrb	r3, [r0, #0]
	u32_t *pp = parts;
    516a:	466e      	mov	r6, sp
    516c:	e03b      	b.n	51e6 <ipaddr_aton+0x86>
		if (!isdigit(c))
			return (0);
		val  = 0;
		base = 10;
		if (c == '0') {
			c = *++cp;
    516e:	1c6a      	adds	r2, r5, #1
    5170:	786b      	ldrb	r3, [r5, #1]
			if (c == 'x' || c == 'X') {
    5172:	2b78      	cmp	r3, #120	; 0x78
    5174:	d004      	beq.n	5180 <ipaddr_aton+0x20>
    5176:	2b58      	cmp	r3, #88	; 0x58
    5178:	d002      	beq.n	5180 <ipaddr_aton+0x20>
			c = *++cp;
    517a:	4615      	mov	r5, r2
				base = 16;
				c    = *++cp;
			} else
				base = 8;
    517c:	2108      	movs	r1, #8
    517e:	e03a      	b.n	51f6 <ipaddr_aton+0x96>
				c    = *++cp;
    5180:	78ab      	ldrb	r3, [r5, #2]
    5182:	3502      	adds	r5, #2
				base = 16;
    5184:	2110      	movs	r1, #16
				c    = *++cp;
    5186:	e036      	b.n	51f6 <ipaddr_aton+0x96>
		}
		for (;;) {
			if (isdigit(c)) {
				val = (val * base) + (int)(c - '0');
				c   = *++cp;
			} else if (base == 16 && isxdigit(c)) {
    5188:	2910      	cmp	r1, #16
    518a:	d123      	bne.n	51d4 <ipaddr_aton+0x74>
    518c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    5190:	b2d2      	uxtb	r2, r2
    5192:	2a05      	cmp	r2, #5
    5194:	d904      	bls.n	51a0 <ipaddr_aton+0x40>
    5196:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    519a:	b2d2      	uxtb	r2, r2
    519c:	2a05      	cmp	r2, #5
    519e:	d819      	bhi.n	51d4 <ipaddr_aton+0x74>
				val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
    51a0:	0100      	lsls	r0, r0, #4
    51a2:	f103 020a 	add.w	r2, r3, #10
    51a6:	3b61      	subs	r3, #97	; 0x61
    51a8:	b2db      	uxtb	r3, r3
    51aa:	2b19      	cmp	r3, #25
    51ac:	d810      	bhi.n	51d0 <ipaddr_aton+0x70>
    51ae:	2361      	movs	r3, #97	; 0x61
    51b0:	1ad2      	subs	r2, r2, r3
    51b2:	4310      	orrs	r0, r2
				c   = *++cp;
    51b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
			if (isdigit(c)) {
    51b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    51bc:	b2d2      	uxtb	r2, r2
    51be:	2a09      	cmp	r2, #9
    51c0:	d8e2      	bhi.n	5188 <ipaddr_aton+0x28>
				val = (val * base) + (int)(c - '0');
    51c2:	fb00 3301 	mla	r3, r0, r1, r3
    51c6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
				c   = *++cp;
    51ca:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    51ce:	e7f3      	b.n	51b8 <ipaddr_aton+0x58>
				val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
    51d0:	2341      	movs	r3, #65	; 0x41
    51d2:	e7ed      	b.n	51b0 <ipaddr_aton+0x50>
			} else
				break;
		}
		if (c == '.') {
    51d4:	2b2e      	cmp	r3, #46	; 0x2e
    51d6:	d110      	bne.n	51fa <ipaddr_aton+0x9a>
			 * Internet format:
			 *  a.b.c.d
			 *  a.b.c   (with c treated as 16 bits)
			 *  a.b (with b treated as 24 bits)
			 */
			if (pp >= parts + 3) {
    51d8:	ab03      	add	r3, sp, #12
    51da:	429e      	cmp	r6, r3
    51dc:	d24b      	bcs.n	5276 <ipaddr_aton+0x116>
				return (0);
			}
			*pp++ = val;
    51de:	6030      	str	r0, [r6, #0]
			c     = *++cp;
    51e0:	786b      	ldrb	r3, [r5, #1]
			*pp++ = val;
    51e2:	3604      	adds	r6, #4
			c     = *++cp;
    51e4:	3501      	adds	r5, #1
		if (!isdigit(c))
    51e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    51ea:	b2d2      	uxtb	r2, r2
    51ec:	2a09      	cmp	r2, #9
    51ee:	d840      	bhi.n	5272 <ipaddr_aton+0x112>
		if (c == '0') {
    51f0:	2b30      	cmp	r3, #48	; 0x30
    51f2:	d0bc      	beq.n	516e <ipaddr_aton+0xe>
		base = 10;
    51f4:	210a      	movs	r1, #10
				base = 16;
    51f6:	2000      	movs	r0, #0
    51f8:	e7de      	b.n	51b8 <ipaddr_aton+0x58>
			break;
	}
	/*
	 * Check for trailing characters.
	 */
	if (c != '\0' && !isspace(c)) {
    51fa:	b16b      	cbz	r3, 5218 <ipaddr_aton+0xb8>
    51fc:	2b20      	cmp	r3, #32
    51fe:	d00b      	beq.n	5218 <ipaddr_aton+0xb8>
    5200:	2b0c      	cmp	r3, #12
    5202:	d009      	beq.n	5218 <ipaddr_aton+0xb8>
    5204:	2b0a      	cmp	r3, #10
    5206:	d007      	beq.n	5218 <ipaddr_aton+0xb8>
    5208:	2b0d      	cmp	r3, #13
    520a:	d005      	beq.n	5218 <ipaddr_aton+0xb8>
    520c:	2b09      	cmp	r3, #9
    520e:	d003      	beq.n	5218 <ipaddr_aton+0xb8>
    5210:	2b0b      	cmp	r3, #11
    5212:	d001      	beq.n	5218 <ipaddr_aton+0xb8>
		return (0);
    5214:	2300      	movs	r3, #0
    5216:	e02f      	b.n	5278 <ipaddr_aton+0x118>
	}
	/*
	 * Concoct the address according to
	 * the number of parts specified.
	 */
	switch (pp - parts + 1) {
    5218:	466b      	mov	r3, sp
    521a:	1af3      	subs	r3, r6, r3
    521c:	109b      	asrs	r3, r3, #2
    521e:	3301      	adds	r3, #1
    5220:	2b04      	cmp	r3, #4
    5222:	d80a      	bhi.n	523a <ipaddr_aton+0xda>
    5224:	e8df f003 	tbb	[pc, r3]
    5228:	0f030928 	.word	0x0f030928
    522c:	19          	.byte	0x19
    522d:	00          	.byte	0x00

	case 1: /* a -- 32 bits */
		break;

	case 2: /* a.b -- 8.24 bits */
		if (val > 0xffffffUL) {
    522e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    5232:	d224      	bcs.n	527e <ipaddr_aton+0x11e>
			return (0);
		}
		val |= parts[0] << 24;
    5234:	9b00      	ldr	r3, [sp, #0]
    5236:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
		break;
	default:
		LWIP_ASSERT("unhandled", 0);
		break;
	}
	if (addr) {
    523a:	b334      	cbz	r4, 528a <ipaddr_aton+0x12a>
		ip4_addr_set_u32(addr, htonl(val));
    523c:	4b14      	ldr	r3, [pc, #80]	; (5290 <ipaddr_aton+0x130>)
    523e:	4798      	blx	r3
    5240:	6020      	str	r0, [r4, #0]
	}
	return (1);
    5242:	2301      	movs	r3, #1
    5244:	e018      	b.n	5278 <ipaddr_aton+0x118>
		if (val > 0xffff) {
    5246:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    524a:	d21a      	bcs.n	5282 <ipaddr_aton+0x122>
		val |= (parts[0] << 24) | (parts[1] << 16);
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	041b      	lsls	r3, r3, #16
    5250:	9a00      	ldr	r2, [sp, #0]
    5252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    5256:	4318      	orrs	r0, r3
		break;
    5258:	e7ef      	b.n	523a <ipaddr_aton+0xda>
		if (val > 0xff) {
    525a:	28ff      	cmp	r0, #255	; 0xff
    525c:	d813      	bhi.n	5286 <ipaddr_aton+0x126>
		val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
    525e:	9b01      	ldr	r3, [sp, #4]
    5260:	041b      	lsls	r3, r3, #16
    5262:	9a00      	ldr	r2, [sp, #0]
    5264:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    5268:	9a02      	ldr	r2, [sp, #8]
    526a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    526e:	4318      	orrs	r0, r3
		break;
    5270:	e7e3      	b.n	523a <ipaddr_aton+0xda>
			return (0);
    5272:	2300      	movs	r3, #0
    5274:	e000      	b.n	5278 <ipaddr_aton+0x118>
				return (0);
    5276:	2300      	movs	r3, #0
}
    5278:	4618      	mov	r0, r3
    527a:	b004      	add	sp, #16
    527c:	bd70      	pop	{r4, r5, r6, pc}
			return (0);
    527e:	2300      	movs	r3, #0
    5280:	e7fa      	b.n	5278 <ipaddr_aton+0x118>
			return (0);
    5282:	2300      	movs	r3, #0
    5284:	e7f8      	b.n	5278 <ipaddr_aton+0x118>
			return (0);
    5286:	2300      	movs	r3, #0
    5288:	e7f6      	b.n	5278 <ipaddr_aton+0x118>
	return (1);
    528a:	2301      	movs	r3, #1
    528c:	e7f4      	b.n	5278 <ipaddr_aton+0x118>
    528e:	bf00      	nop
    5290:	00003ed9 	.word	0x00003ed9

00005294 <ipaddr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
{
    5294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5298:	b083      	sub	sp, #12
    529a:	4689      	mov	r9, r1
	u8_t  rem;
	u8_t  n;
	u8_t  i;
	int   len = 0;

	s_addr = ip4_addr_get_u32(addr);
    529c:	6803      	ldr	r3, [r0, #0]
    529e:	f10d 0e08 	add.w	lr, sp, #8
    52a2:	f84e 3d04 	str.w	r3, [lr, #-4]!

	rp = buf;
    52a6:	460f      	mov	r7, r1
	int   len = 0;
    52a8:	2600      	movs	r6, #0
	ap = (u8_t *)&s_addr;
	for (n = 0; n < 4; n++) {
    52aa:	4630      	mov	r0, r6
    52ac:	2803      	cmp	r0, #3
    52ae:	d838      	bhi.n	5322 <ipaddr_ntoa_r+0x8e>
    52b0:	2500      	movs	r5, #0
		i = 0;
		do {
			rem = *ap % (u8_t)10;
    52b2:	f89e 4000 	ldrb.w	r4, [lr]
    52b6:	4b20      	ldr	r3, [pc, #128]	; (5338 <ipaddr_ntoa_r+0xa4>)
    52b8:	fba3 1304 	umull	r1, r3, r3, r4
    52bc:	08db      	lsrs	r3, r3, #3
    52be:	eb03 0883 	add.w	r8, r3, r3, lsl #2
    52c2:	ea4f 0c48 	mov.w	ip, r8, lsl #1
    52c6:	eba4 040c 	sub.w	r4, r4, ip
    52ca:	b2e4      	uxtb	r4, r4
			*ap /= (u8_t)10;
    52cc:	b2db      	uxtb	r3, r3
    52ce:	f88e 3000 	strb.w	r3, [lr]
			inv[i++] = '0' + rem;
    52d2:	f105 0c01 	add.w	ip, r5, #1
    52d6:	fa5f f18c 	uxtb.w	r1, ip
    52da:	3430      	adds	r4, #48	; 0x30
    52dc:	f10d 0c08 	add.w	ip, sp, #8
    52e0:	4465      	add	r5, ip
    52e2:	f805 4c08 	strb.w	r4, [r5, #-8]
    52e6:	460d      	mov	r5, r1
		} while (*ap);
    52e8:	2b00      	cmp	r3, #0
    52ea:	d1e2      	bne.n	52b2 <ipaddr_ntoa_r+0x1e>
		while (i--) {
    52ec:	1e4b      	subs	r3, r1, #1
    52ee:	b2db      	uxtb	r3, r3
    52f0:	b159      	cbz	r1, 530a <ipaddr_ntoa_r+0x76>
			if (len++ >= buflen) {
    52f2:	1c74      	adds	r4, r6, #1
    52f4:	4296      	cmp	r6, r2
    52f6:	da19      	bge.n	532c <ipaddr_ntoa_r+0x98>
				return NULL;
			}
			*rp++ = inv[i];
    52f8:	a902      	add	r1, sp, #8
    52fa:	18cd      	adds	r5, r1, r3
    52fc:	f815 5c08 	ldrb.w	r5, [r5, #-8]
    5300:	703d      	strb	r5, [r7, #0]
			if (len++ >= buflen) {
    5302:	4626      	mov	r6, r4
		while (i--) {
    5304:	4619      	mov	r1, r3
			*rp++ = inv[i];
    5306:	3701      	adds	r7, #1
    5308:	e7f0      	b.n	52ec <ipaddr_ntoa_r+0x58>
		}
		if (len++ >= buflen) {
    530a:	1c73      	adds	r3, r6, #1
    530c:	4296      	cmp	r6, r2
    530e:	da11      	bge.n	5334 <ipaddr_ntoa_r+0xa0>
			return NULL;
		}
		*rp++ = '.';
    5310:	242e      	movs	r4, #46	; 0x2e
    5312:	703c      	strb	r4, [r7, #0]
		ap++;
    5314:	f10e 0e01 	add.w	lr, lr, #1
	for (n = 0; n < 4; n++) {
    5318:	3001      	adds	r0, #1
    531a:	b2c0      	uxtb	r0, r0
		if (len++ >= buflen) {
    531c:	461e      	mov	r6, r3
		*rp++ = '.';
    531e:	3701      	adds	r7, #1
    5320:	e7c4      	b.n	52ac <ipaddr_ntoa_r+0x18>
	}
	*--rp = 0;
    5322:	2300      	movs	r3, #0
    5324:	f807 3c01 	strb.w	r3, [r7, #-1]
	return buf;
    5328:	4648      	mov	r0, r9
    532a:	e000      	b.n	532e <ipaddr_ntoa_r+0x9a>
				return NULL;
    532c:	2000      	movs	r0, #0
}
    532e:	b003      	add	sp, #12
    5330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return NULL;
    5334:	2000      	movs	r0, #0
    5336:	e7fa      	b.n	532e <ipaddr_ntoa_r+0x9a>
    5338:	cccccccd 	.word	0xcccccccd

0000533c <ip_reass_dequeue_datagram>:
/**
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
    533c:	b508      	push	{r3, lr}

	/* dequeue the reass struct  */
	if (reassdatagrams == ipr) {
    533e:	4b07      	ldr	r3, [pc, #28]	; (535c <ip_reass_dequeue_datagram+0x20>)
    5340:	681b      	ldr	r3, [r3, #0]
    5342:	4283      	cmp	r3, r0
    5344:	d006      	beq.n	5354 <ip_reass_dequeue_datagram+0x18>
		/* it was the first in the list */
		reassdatagrams = ipr->next;
	} else {
		/* it wasn't the first, so it must have a valid 'prev' */
		LWIP_ASSERT("sanity check linked list", prev != NULL);
		prev->next = ipr->next;
    5346:	6803      	ldr	r3, [r0, #0]
    5348:	600b      	str	r3, [r1, #0]
	}

	/* now we can free the ip_reass struct */
	memp_free(MEMP_REASSDATA, ipr);
    534a:	4601      	mov	r1, r0
    534c:	2004      	movs	r0, #4
    534e:	4b04      	ldr	r3, [pc, #16]	; (5360 <ip_reass_dequeue_datagram+0x24>)
    5350:	4798      	blx	r3
    5352:	bd08      	pop	{r3, pc}
		reassdatagrams = ipr->next;
    5354:	6802      	ldr	r2, [r0, #0]
    5356:	4b01      	ldr	r3, [pc, #4]	; (535c <ip_reass_dequeue_datagram+0x20>)
    5358:	601a      	str	r2, [r3, #0]
    535a:	e7f6      	b.n	534a <ip_reass_dequeue_datagram+0xe>
    535c:	200015f0 	.word	0x200015f0
    5360:	00005d31 	.word	0x00005d31

00005364 <ip_reass_free_complete_datagram>:
{
    5364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5368:	4607      	mov	r7, r0
    536a:	4688      	mov	r8, r1
	iprh = (struct ip_reass_helper *)ipr->p->payload;
    536c:	6844      	ldr	r4, [r0, #4]
    536e:	6863      	ldr	r3, [r4, #4]
	if (iprh->start == 0) {
    5370:	889a      	ldrh	r2, [r3, #4]
    5372:	b112      	cbz	r2, 537a <ip_reass_free_complete_datagram+0x16>
	u16_t                   pbufs_freed = 0;
    5374:	2500      	movs	r5, #0
	p = ipr->p;
    5376:	687c      	ldr	r4, [r7, #4]
	while (p != NULL) {
    5378:	e025      	b.n	53c6 <ip_reass_free_complete_datagram+0x62>
		ipr->p = iprh->next_pbuf;
    537a:	681b      	ldr	r3, [r3, #0]
    537c:	6043      	str	r3, [r0, #4]
		SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
    537e:	4603      	mov	r3, r0
    5380:	6862      	ldr	r2, [r4, #4]
    5382:	f853 1f08 	ldr.w	r1, [r3, #8]!
    5386:	685e      	ldr	r6, [r3, #4]
    5388:	689d      	ldr	r5, [r3, #8]
    538a:	68d8      	ldr	r0, [r3, #12]
    538c:	6011      	str	r1, [r2, #0]
    538e:	6056      	str	r6, [r2, #4]
    5390:	6095      	str	r5, [r2, #8]
    5392:	60d0      	str	r0, [r2, #12]
    5394:	6919      	ldr	r1, [r3, #16]
    5396:	6111      	str	r1, [r2, #16]
		icmp_time_exceeded(p, ICMP_TE_FRAG);
    5398:	2101      	movs	r1, #1
    539a:	4620      	mov	r0, r4
    539c:	4b10      	ldr	r3, [pc, #64]	; (53e0 <ip_reass_free_complete_datagram+0x7c>)
    539e:	4798      	blx	r3
		clen = pbuf_clen(p);
    53a0:	4620      	mov	r0, r4
    53a2:	4b10      	ldr	r3, [pc, #64]	; (53e4 <ip_reass_free_complete_datagram+0x80>)
    53a4:	4798      	blx	r3
		pbufs_freed += clen;
    53a6:	b285      	uxth	r5, r0
		pbuf_free(p);
    53a8:	4620      	mov	r0, r4
    53aa:	4b0f      	ldr	r3, [pc, #60]	; (53e8 <ip_reass_free_complete_datagram+0x84>)
    53ac:	4798      	blx	r3
    53ae:	e7e2      	b.n	5376 <ip_reass_free_complete_datagram+0x12>
		iprh = (struct ip_reass_helper *)p->payload;
    53b0:	6863      	ldr	r3, [r4, #4]
		p    = iprh->next_pbuf;
    53b2:	681e      	ldr	r6, [r3, #0]
		clen = pbuf_clen(pcur);
    53b4:	4620      	mov	r0, r4
    53b6:	4b0b      	ldr	r3, [pc, #44]	; (53e4 <ip_reass_free_complete_datagram+0x80>)
    53b8:	4798      	blx	r3
		pbufs_freed += clen;
    53ba:	4405      	add	r5, r0
    53bc:	b2ad      	uxth	r5, r5
		pbuf_free(pcur);
    53be:	4620      	mov	r0, r4
    53c0:	4b09      	ldr	r3, [pc, #36]	; (53e8 <ip_reass_free_complete_datagram+0x84>)
    53c2:	4798      	blx	r3
		p    = iprh->next_pbuf;
    53c4:	4634      	mov	r4, r6
	while (p != NULL) {
    53c6:	2c00      	cmp	r4, #0
    53c8:	d1f2      	bne.n	53b0 <ip_reass_free_complete_datagram+0x4c>
	ip_reass_dequeue_datagram(ipr, prev);
    53ca:	4641      	mov	r1, r8
    53cc:	4638      	mov	r0, r7
    53ce:	4b07      	ldr	r3, [pc, #28]	; (53ec <ip_reass_free_complete_datagram+0x88>)
    53d0:	4798      	blx	r3
	ip_reass_pbufcount -= pbufs_freed;
    53d2:	4a07      	ldr	r2, [pc, #28]	; (53f0 <ip_reass_free_complete_datagram+0x8c>)
    53d4:	8893      	ldrh	r3, [r2, #4]
    53d6:	1b5b      	subs	r3, r3, r5
    53d8:	8093      	strh	r3, [r2, #4]
}
    53da:	4628      	mov	r0, r5
    53dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53e0:	00004c2d 	.word	0x00004c2d
    53e4:	000061ed 	.word	0x000061ed
    53e8:	00006009 	.word	0x00006009
    53ec:	0000533d 	.word	0x0000533d
    53f0:	200015f0 	.word	0x200015f0

000053f4 <ip_reass_remove_oldest_datagram>:
{
    53f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53f8:	4605      	mov	r5, r0
    53fa:	4688      	mov	r8, r1
	int                  pbufs_freed = 0, pbufs_freed_current;
    53fc:	2600      	movs	r6, #0
    53fe:	e028      	b.n	5452 <ip_reass_remove_oldest_datagram+0x5e>
			if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    5400:	699a      	ldr	r2, [r3, #24]
    5402:	f8d5 e010 	ldr.w	lr, [r5, #16]
    5406:	4572      	cmp	r2, lr
    5408:	d10f      	bne.n	542a <ip_reass_remove_oldest_datagram+0x36>
    540a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    540e:	88aa      	ldrh	r2, [r5, #4]
    5410:	4596      	cmp	lr, r2
    5412:	d10a      	bne.n	542a <ip_reass_remove_oldest_datagram+0x36>
    5414:	e000      	b.n	5418 <ip_reass_remove_oldest_datagram+0x24>
					oldest = r;
    5416:	4618      	mov	r0, r3
			if (r->next != NULL) {
    5418:	681a      	ldr	r2, [r3, #0]
    541a:	b182      	cbz	r2, 543e <ip_reass_remove_oldest_datagram+0x4a>
    541c:	4619      	mov	r1, r3
    541e:	4613      	mov	r3, r2
		while (r != NULL) {
    5420:	b17b      	cbz	r3, 5442 <ip_reass_remove_oldest_datagram+0x4e>
			if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
    5422:	68ea      	ldr	r2, [r5, #12]
    5424:	695f      	ldr	r7, [r3, #20]
    5426:	4297      	cmp	r7, r2
    5428:	d0ea      	beq.n	5400 <ip_reass_remove_oldest_datagram+0xc>
				other_datagrams++;
    542a:	3401      	adds	r4, #1
				if (oldest == NULL) {
    542c:	2800      	cmp	r0, #0
    542e:	d0f2      	beq.n	5416 <ip_reass_remove_oldest_datagram+0x22>
				} else if (r->timer <= oldest->timer) {
    5430:	f893 e01f 	ldrb.w	lr, [r3, #31]
    5434:	7fc2      	ldrb	r2, [r0, #31]
    5436:	4596      	cmp	lr, r2
    5438:	d8ee      	bhi.n	5418 <ip_reass_remove_oldest_datagram+0x24>
					oldest = r;
    543a:	4618      	mov	r0, r3
    543c:	e7ec      	b.n	5418 <ip_reass_remove_oldest_datagram+0x24>
			if (r->next != NULL) {
    543e:	460b      	mov	r3, r1
    5440:	e7ec      	b.n	541c <ip_reass_remove_oldest_datagram+0x28>
		if (oldest != NULL) {
    5442:	b110      	cbz	r0, 544a <ip_reass_remove_oldest_datagram+0x56>
			pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
    5444:	4b07      	ldr	r3, [pc, #28]	; (5464 <ip_reass_remove_oldest_datagram+0x70>)
    5446:	4798      	blx	r3
			pbufs_freed += pbufs_freed_current;
    5448:	4406      	add	r6, r0
	} while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
    544a:	4546      	cmp	r6, r8
    544c:	da07      	bge.n	545e <ip_reass_remove_oldest_datagram+0x6a>
    544e:	2c01      	cmp	r4, #1
    5450:	dd05      	ble.n	545e <ip_reass_remove_oldest_datagram+0x6a>
		r               = reassdatagrams;
    5452:	4b05      	ldr	r3, [pc, #20]	; (5468 <ip_reass_remove_oldest_datagram+0x74>)
    5454:	681b      	ldr	r3, [r3, #0]
		other_datagrams = 0;
    5456:	2400      	movs	r4, #0
		prev            = NULL;
    5458:	4621      	mov	r1, r4
		oldest          = NULL;
    545a:	4620      	mov	r0, r4
		while (r != NULL) {
    545c:	e7e0      	b.n	5420 <ip_reass_remove_oldest_datagram+0x2c>
}
    545e:	4630      	mov	r0, r6
    5460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5464:	00005365 	.word	0x00005365
    5468:	200015f0 	.word	0x200015f0

0000546c <ip_frag_free_pbuf_custom_ref>:
	return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
}

/** Free a struct pbuf_custom_ref */
static void ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
    546c:	b508      	push	{r3, lr}
	LWIP_ASSERT("p != NULL", p != NULL);
	memp_free(MEMP_FRAG_PBUF, p);
    546e:	4601      	mov	r1, r0
    5470:	2005      	movs	r0, #5
    5472:	4b01      	ldr	r3, [pc, #4]	; (5478 <ip_frag_free_pbuf_custom_ref+0xc>)
    5474:	4798      	blx	r3
    5476:	bd08      	pop	{r3, pc}
    5478:	00005d31 	.word	0x00005d31

0000547c <ipfrag_free_pbuf_custom>:
}

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void ipfrag_free_pbuf_custom(struct pbuf *p)
{
    547c:	b510      	push	{r4, lr}
    547e:	4604      	mov	r4, r0
	struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
	LWIP_ASSERT("pcr != NULL", pcr != NULL);
	LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
	if (pcr->original != NULL) {
    5480:	6940      	ldr	r0, [r0, #20]
    5482:	b108      	cbz	r0, 5488 <ipfrag_free_pbuf_custom+0xc>
		pbuf_free(pcr->original);
    5484:	4b02      	ldr	r3, [pc, #8]	; (5490 <ipfrag_free_pbuf_custom+0x14>)
    5486:	4798      	blx	r3
	}
	ip_frag_free_pbuf_custom_ref(pcr);
    5488:	4620      	mov	r0, r4
    548a:	4b02      	ldr	r3, [pc, #8]	; (5494 <ipfrag_free_pbuf_custom+0x18>)
    548c:	4798      	blx	r3
    548e:	bd10      	pop	{r4, pc}
    5490:	00006009 	.word	0x00006009
    5494:	0000546d 	.word	0x0000546d

00005498 <ip_reass_chain_frag_into_datagram_and_validate>:
{
    5498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    549c:	4607      	mov	r7, r0
    549e:	460e      	mov	r6, r1
	fraghdr = (struct ip_hdr *)new_p->payload;
    54a0:	684c      	ldr	r4, [r1, #4]
	len     = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    54a2:	8860      	ldrh	r0, [r4, #2]
    54a4:	f8df 8108 	ldr.w	r8, [pc, #264]	; 55b0 <ip_reass_chain_frag_into_datagram_and_validate+0x118>
    54a8:	47c0      	blx	r8
    54aa:	7825      	ldrb	r5, [r4, #0]
    54ac:	f005 050f 	and.w	r5, r5, #15
    54b0:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
    54b4:	b2ad      	uxth	r5, r5
	offset  = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    54b6:	88e0      	ldrh	r0, [r4, #6]
    54b8:	47c0      	blx	r8
    54ba:	f3c0 000c 	ubfx	r0, r0, #0, #13
    54be:	00c1      	lsls	r1, r0, #3
	iprh            = (struct ip_reass_helper *)new_p->payload;
    54c0:	f8d6 c004 	ldr.w	ip, [r6, #4]
	iprh->next_pbuf = NULL;
    54c4:	2400      	movs	r4, #0
    54c6:	f88c 4000 	strb.w	r4, [ip]
    54ca:	f88c 4001 	strb.w	r4, [ip, #1]
    54ce:	f88c 4002 	strb.w	r4, [ip, #2]
    54d2:	f88c 4003 	strb.w	r4, [ip, #3]
	iprh->start     = offset;
    54d6:	f8ac 1004 	strh.w	r1, [ip, #4]
	iprh->end       = offset + len;
    54da:	eb05 0e01 	add.w	lr, r5, r1
    54de:	fa1f fe8e 	uxth.w	lr, lr
    54e2:	f8ac e006 	strh.w	lr, [ip, #6]
	for (q = ipr->p; q != NULL;) {
    54e6:	687d      	ldr	r5, [r7, #4]
	int                     valid = 1;
    54e8:	2001      	movs	r0, #1
	for (q = ipr->p; q != NULL;) {
    54ea:	e025      	b.n	5538 <ip_reass_chain_frag_into_datagram_and_validate+0xa0>
			iprh->next_pbuf = q;
    54ec:	f8cc 5000 	str.w	r5, [ip]
			if (iprh_prev != NULL) {
    54f0:	b1f4      	cbz	r4, 5530 <ip_reass_chain_frag_into_datagram_and_validate+0x98>
				if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
    54f2:	88e2      	ldrh	r2, [r4, #6]
    54f4:	4291      	cmp	r1, r2
    54f6:	d33e      	bcc.n	5576 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
    54f8:	889b      	ldrh	r3, [r3, #4]
    54fa:	459e      	cmp	lr, r3
    54fc:	d83b      	bhi.n	5576 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
				iprh_prev->next_pbuf = new_p;
    54fe:	6026      	str	r6, [r4, #0]
	if (q == NULL) {
    5500:	b365      	cbz	r5, 555c <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
	if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
    5502:	7fbb      	ldrb	r3, [r7, #30]
    5504:	f013 0f01 	tst.w	r3, #1
    5508:	d043      	beq.n	5592 <ip_reass_chain_frag_into_datagram_and_validate+0xfa>
		if (valid) {
    550a:	2800      	cmp	r0, #0
    550c:	d048      	beq.n	55a0 <ip_reass_chain_frag_into_datagram_and_validate+0x108>
			if (((struct ip_reass_helper *)ipr->p->payload)->start != 0) {
    550e:	687b      	ldr	r3, [r7, #4]
    5510:	685b      	ldr	r3, [r3, #4]
    5512:	889b      	ldrh	r3, [r3, #4]
    5514:	2b00      	cmp	r3, #0
    5516:	d13f      	bne.n	5598 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
				q         = iprh->next_pbuf;
    5518:	f8dc 2000 	ldr.w	r2, [ip]
				while (q != NULL) {
    551c:	b34a      	cbz	r2, 5572 <ip_reass_chain_frag_into_datagram_and_validate+0xda>
					iprh = (struct ip_reass_helper *)q->payload;
    551e:	6853      	ldr	r3, [r2, #4]
					if (iprh_prev->end != iprh->start) {
    5520:	f8bc 1006 	ldrh.w	r1, [ip, #6]
    5524:	889a      	ldrh	r2, [r3, #4]
    5526:	4291      	cmp	r1, r2
    5528:	d139      	bne.n	559e <ip_reass_chain_frag_into_datagram_and_validate+0x106>
					q         = iprh->next_pbuf;
    552a:	681a      	ldr	r2, [r3, #0]
					iprh_prev = iprh;
    552c:	469c      	mov	ip, r3
    552e:	e7f5      	b.n	551c <ip_reass_chain_frag_into_datagram_and_validate+0x84>
				ipr->p = new_p;
    5530:	607e      	str	r6, [r7, #4]
    5532:	e7e5      	b.n	5500 <ip_reass_chain_frag_into_datagram_and_validate+0x68>
		q         = iprh_tmp->next_pbuf;
    5534:	681d      	ldr	r5, [r3, #0]
		iprh_prev = iprh_tmp;
    5536:	461c      	mov	r4, r3
	for (q = ipr->p; q != NULL;) {
    5538:	2d00      	cmp	r5, #0
    553a:	d0e1      	beq.n	5500 <ip_reass_chain_frag_into_datagram_and_validate+0x68>
		iprh_tmp = (struct ip_reass_helper *)q->payload;
    553c:	686b      	ldr	r3, [r5, #4]
		if (iprh->start < iprh_tmp->start) {
    553e:	889a      	ldrh	r2, [r3, #4]
    5540:	4291      	cmp	r1, r2
    5542:	d3d3      	bcc.n	54ec <ip_reass_chain_frag_into_datagram_and_validate+0x54>
		} else if (iprh->start == iprh_tmp->start) {
    5544:	4291      	cmp	r1, r2
    5546:	d016      	beq.n	5576 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
		} else if (iprh->start < iprh_tmp->end) {
    5548:	88dd      	ldrh	r5, [r3, #6]
    554a:	42a9      	cmp	r1, r5
    554c:	d313      	bcc.n	5576 <ip_reass_chain_frag_into_datagram_and_validate+0xde>
			if (iprh_prev != NULL) {
    554e:	2c00      	cmp	r4, #0
    5550:	d0f0      	beq.n	5534 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
				if (iprh_prev->end != iprh_tmp->start) {
    5552:	88e4      	ldrh	r4, [r4, #6]
    5554:	42a2      	cmp	r2, r4
    5556:	d0ed      	beq.n	5534 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
					valid = 0;
    5558:	2000      	movs	r0, #0
    555a:	e7eb      	b.n	5534 <ip_reass_chain_frag_into_datagram_and_validate+0x9c>
		if (iprh_prev != NULL) {
    555c:	b13c      	cbz	r4, 556e <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
			iprh_prev->next_pbuf = new_p;
    555e:	6026      	str	r6, [r4, #0]
			if (iprh_prev->end != iprh->start) {
    5560:	88e2      	ldrh	r2, [r4, #6]
    5562:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    5566:	429a      	cmp	r2, r3
    5568:	d0cb      	beq.n	5502 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
				valid = 0;
    556a:	2000      	movs	r0, #0
    556c:	e7c9      	b.n	5502 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
			ipr->p = new_p;
    556e:	607e      	str	r6, [r7, #4]
    5570:	e7c7      	b.n	5502 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
    5572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ip_reass_pbufcount -= pbuf_clen(new_p);
    5576:	4630      	mov	r0, r6
    5578:	4b0a      	ldr	r3, [pc, #40]	; (55a4 <ip_reass_chain_frag_into_datagram_and_validate+0x10c>)
    557a:	4798      	blx	r3
    557c:	b280      	uxth	r0, r0
    557e:	4a0a      	ldr	r2, [pc, #40]	; (55a8 <ip_reass_chain_frag_into_datagram_and_validate+0x110>)
    5580:	8893      	ldrh	r3, [r2, #4]
    5582:	1a18      	subs	r0, r3, r0
    5584:	8090      	strh	r0, [r2, #4]
	pbuf_free(new_p);
    5586:	4630      	mov	r0, r6
    5588:	4b08      	ldr	r3, [pc, #32]	; (55ac <ip_reass_chain_frag_into_datagram_and_validate+0x114>)
    558a:	4798      	blx	r3
	return 0;
    558c:	2000      	movs	r0, #0
    558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0; /* not yet valid! */
    5592:	2000      	movs	r0, #0
    5594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				valid = 0;
    5598:	2000      	movs	r0, #0
    559a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						valid = 0;
    559e:	2000      	movs	r0, #0
}
    55a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    55a4:	000061ed 	.word	0x000061ed
    55a8:	200015f0 	.word	0x200015f0
    55ac:	00006009 	.word	0x00006009
    55b0:	00003ecd 	.word	0x00003ecd

000055b4 <ip_frag_alloc_pbuf_custom_ref>:
{
    55b4:	b508      	push	{r3, lr}
	return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
    55b6:	2005      	movs	r0, #5
    55b8:	4b01      	ldr	r3, [pc, #4]	; (55c0 <ip_frag_alloc_pbuf_custom_ref+0xc>)
    55ba:	4798      	blx	r3
}
    55bc:	bd08      	pop	{r3, pc}
    55be:	bf00      	nop
    55c0:	00005d09 	.word	0x00005d09

000055c4 <ip_reass_enqueue_new_datagram>:
{
    55c4:	b570      	push	{r4, r5, r6, lr}
    55c6:	4605      	mov	r5, r0
    55c8:	460e      	mov	r6, r1
	ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    55ca:	2004      	movs	r0, #4
    55cc:	4b14      	ldr	r3, [pc, #80]	; (5620 <ip_reass_enqueue_new_datagram+0x5c>)
    55ce:	4798      	blx	r3
	if (ipr == NULL) {
    55d0:	4604      	mov	r4, r0
    55d2:	b1b0      	cbz	r0, 5602 <ip_reass_enqueue_new_datagram+0x3e>
	memset(ipr, 0, sizeof(struct ip_reassdata));
    55d4:	2220      	movs	r2, #32
    55d6:	2100      	movs	r1, #0
    55d8:	4620      	mov	r0, r4
    55da:	4b12      	ldr	r3, [pc, #72]	; (5624 <ip_reass_enqueue_new_datagram+0x60>)
    55dc:	4798      	blx	r3
	ipr->timer = IP_REASS_MAXAGE;
    55de:	2303      	movs	r3, #3
    55e0:	77e3      	strb	r3, [r4, #31]
	ipr->next      = reassdatagrams;
    55e2:	4b11      	ldr	r3, [pc, #68]	; (5628 <ip_reass_enqueue_new_datagram+0x64>)
    55e4:	681a      	ldr	r2, [r3, #0]
    55e6:	6022      	str	r2, [r4, #0]
	reassdatagrams = ipr;
    55e8:	601c      	str	r4, [r3, #0]
	SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
    55ea:	682a      	ldr	r2, [r5, #0]
    55ec:	686e      	ldr	r6, [r5, #4]
    55ee:	68a8      	ldr	r0, [r5, #8]
    55f0:	68e9      	ldr	r1, [r5, #12]
    55f2:	60a2      	str	r2, [r4, #8]
    55f4:	60e6      	str	r6, [r4, #12]
    55f6:	6120      	str	r0, [r4, #16]
    55f8:	6161      	str	r1, [r4, #20]
    55fa:	692a      	ldr	r2, [r5, #16]
    55fc:	61a2      	str	r2, [r4, #24]
}
    55fe:	4620      	mov	r0, r4
    5600:	bd70      	pop	{r4, r5, r6, pc}
		if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
    5602:	4631      	mov	r1, r6
    5604:	4628      	mov	r0, r5
    5606:	4b09      	ldr	r3, [pc, #36]	; (562c <ip_reass_enqueue_new_datagram+0x68>)
    5608:	4798      	blx	r3
    560a:	4286      	cmp	r6, r0
    560c:	dd02      	ble.n	5614 <ip_reass_enqueue_new_datagram+0x50>
		if (ipr == NULL)
    560e:	2c00      	cmp	r4, #0
    5610:	d1e0      	bne.n	55d4 <ip_reass_enqueue_new_datagram+0x10>
    5612:	e7f4      	b.n	55fe <ip_reass_enqueue_new_datagram+0x3a>
			ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
    5614:	2004      	movs	r0, #4
    5616:	4b02      	ldr	r3, [pc, #8]	; (5620 <ip_reass_enqueue_new_datagram+0x5c>)
    5618:	4798      	blx	r3
    561a:	4604      	mov	r4, r0
    561c:	e7f7      	b.n	560e <ip_reass_enqueue_new_datagram+0x4a>
    561e:	bf00      	nop
    5620:	00005d09 	.word	0x00005d09
    5624:	0000cd69 	.word	0x0000cd69
    5628:	200015f0 	.word	0x200015f0
    562c:	000053f5 	.word	0x000053f5

00005630 <ip_reass_tmr>:
{
    5630:	b538      	push	{r3, r4, r5, lr}
	r = reassdatagrams;
    5632:	4b09      	ldr	r3, [pc, #36]	; (5658 <ip_reass_tmr+0x28>)
    5634:	6818      	ldr	r0, [r3, #0]
	struct ip_reassdata *r, *prev = NULL;
    5636:	2400      	movs	r4, #0
	while (r != NULL) {
    5638:	e004      	b.n	5644 <ip_reass_tmr+0x14>
			r = r->next;
    563a:	6805      	ldr	r5, [r0, #0]
			ip_reass_free_complete_datagram(tmp, prev);
    563c:	4621      	mov	r1, r4
    563e:	4b07      	ldr	r3, [pc, #28]	; (565c <ip_reass_tmr+0x2c>)
    5640:	4798      	blx	r3
			r = r->next;
    5642:	4628      	mov	r0, r5
	while (r != NULL) {
    5644:	b138      	cbz	r0, 5656 <ip_reass_tmr+0x26>
		if (r->timer > 0) {
    5646:	7fc3      	ldrb	r3, [r0, #31]
    5648:	2b00      	cmp	r3, #0
    564a:	d0f6      	beq.n	563a <ip_reass_tmr+0xa>
			r->timer--;
    564c:	3b01      	subs	r3, #1
    564e:	77c3      	strb	r3, [r0, #31]
			prev = r;
    5650:	4604      	mov	r4, r0
			r    = r->next;
    5652:	6800      	ldr	r0, [r0, #0]
    5654:	e7f6      	b.n	5644 <ip_reass_tmr+0x14>
}
    5656:	bd38      	pop	{r3, r4, r5, pc}
    5658:	200015f0 	.word	0x200015f0
    565c:	00005365 	.word	0x00005365

00005660 <ip_reass>:
{
    5660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5664:	4681      	mov	r9, r0
	fraghdr = (struct ip_hdr *)p->payload;
    5666:	6845      	ldr	r5, [r0, #4]
	if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
    5668:	782b      	ldrb	r3, [r5, #0]
    566a:	f003 030f 	and.w	r3, r3, #15
    566e:	2b05      	cmp	r3, #5
    5670:	d125      	bne.n	56be <ip_reass+0x5e>
	offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
    5672:	88e8      	ldrh	r0, [r5, #6]
    5674:	4c5b      	ldr	r4, [pc, #364]	; (57e4 <ip_reass+0x184>)
    5676:	47a0      	blx	r4
    5678:	f3c0 000c 	ubfx	r0, r0, #0, #13
    567c:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
	len    = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
    5680:	8868      	ldrh	r0, [r5, #2]
    5682:	47a0      	blx	r4
    5684:	782f      	ldrb	r7, [r5, #0]
    5686:	f007 070f 	and.w	r7, r7, #15
    568a:	eba0 0787 	sub.w	r7, r0, r7, lsl #2
    568e:	b2bf      	uxth	r7, r7
	clen = pbuf_clen(p);
    5690:	4648      	mov	r0, r9
    5692:	4b55      	ldr	r3, [pc, #340]	; (57e8 <ip_reass+0x188>)
    5694:	4798      	blx	r3
    5696:	4680      	mov	r8, r0
	if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
    5698:	4b54      	ldr	r3, [pc, #336]	; (57ec <ip_reass+0x18c>)
    569a:	889b      	ldrh	r3, [r3, #4]
    569c:	4403      	add	r3, r0
    569e:	2b0a      	cmp	r3, #10
    56a0:	dc03      	bgt.n	56aa <ip_reass+0x4a>
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    56a2:	4b52      	ldr	r3, [pc, #328]	; (57ec <ip_reass+0x18c>)
    56a4:	681c      	ldr	r4, [r3, #0]
	struct ip_reassdata *   ipr_prev = NULL;
    56a6:	2600      	movs	r6, #0
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    56a8:	e011      	b.n	56ce <ip_reass+0x6e>
		if (!ip_reass_remove_oldest_datagram(fraghdr, clen) || ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
    56aa:	4601      	mov	r1, r0
    56ac:	4628      	mov	r0, r5
    56ae:	4b50      	ldr	r3, [pc, #320]	; (57f0 <ip_reass+0x190>)
    56b0:	4798      	blx	r3
    56b2:	b120      	cbz	r0, 56be <ip_reass+0x5e>
    56b4:	4b4d      	ldr	r3, [pc, #308]	; (57ec <ip_reass+0x18c>)
    56b6:	889b      	ldrh	r3, [r3, #4]
    56b8:	4443      	add	r3, r8
    56ba:	2b0a      	cmp	r3, #10
    56bc:	ddf1      	ble.n	56a2 <ip_reass+0x42>
	pbuf_free(p);
    56be:	4648      	mov	r0, r9
    56c0:	4b4c      	ldr	r3, [pc, #304]	; (57f4 <ip_reass+0x194>)
    56c2:	4798      	blx	r3
	return NULL;
    56c4:	f04f 0800 	mov.w	r8, #0
    56c8:	e085      	b.n	57d6 <ip_reass+0x176>
		ipr_prev = ipr;
    56ca:	4626      	mov	r6, r4
	for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
    56cc:	6824      	ldr	r4, [r4, #0]
    56ce:	b15c      	cbz	r4, 56e8 <ip_reass+0x88>
		if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
    56d0:	6962      	ldr	r2, [r4, #20]
    56d2:	68eb      	ldr	r3, [r5, #12]
    56d4:	429a      	cmp	r2, r3
    56d6:	d1f8      	bne.n	56ca <ip_reass+0x6a>
    56d8:	69a2      	ldr	r2, [r4, #24]
    56da:	692b      	ldr	r3, [r5, #16]
    56dc:	429a      	cmp	r2, r3
    56de:	d1f4      	bne.n	56ca <ip_reass+0x6a>
    56e0:	89a2      	ldrh	r2, [r4, #12]
    56e2:	88ab      	ldrh	r3, [r5, #4]
    56e4:	429a      	cmp	r2, r3
    56e6:	d1f0      	bne.n	56ca <ip_reass+0x6a>
	if (ipr == NULL) {
    56e8:	2c00      	cmp	r4, #0
    56ea:	d04c      	beq.n	5786 <ip_reass+0x126>
		if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    56ec:	88e8      	ldrh	r0, [r5, #6]
    56ee:	4b3d      	ldr	r3, [pc, #244]	; (57e4 <ip_reass+0x184>)
    56f0:	4798      	blx	r3
    56f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
    56f6:	2800      	cmp	r0, #0
    56f8:	d04d      	beq.n	5796 <ip_reass+0x136>
	ip_reass_pbufcount += clen;
    56fa:	4b3c      	ldr	r3, [pc, #240]	; (57ec <ip_reass+0x18c>)
    56fc:	889a      	ldrh	r2, [r3, #4]
    56fe:	4490      	add	r8, r2
    5700:	f8a3 8004 	strh.w	r8, [r3, #4]
	if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
    5704:	88eb      	ldrh	r3, [r5, #6]
    5706:	f013 0f20 	tst.w	r3, #32
    570a:	d105      	bne.n	5718 <ip_reass+0xb8>
		ipr->flags |= IP_REASS_FLAG_LASTFRAG;
    570c:	7fa3      	ldrb	r3, [r4, #30]
    570e:	f043 0301 	orr.w	r3, r3, #1
    5712:	77a3      	strb	r3, [r4, #30]
		ipr->datagram_len = offset + len;
    5714:	4457      	add	r7, sl
    5716:	83a7      	strh	r7, [r4, #28]
	if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
    5718:	4649      	mov	r1, r9
    571a:	4620      	mov	r0, r4
    571c:	4b36      	ldr	r3, [pc, #216]	; (57f8 <ip_reass+0x198>)
    571e:	4798      	blx	r3
    5720:	2800      	cmp	r0, #0
    5722:	d05b      	beq.n	57dc <ip_reass+0x17c>
		ipr->datagram_len += IP_HLEN;
    5724:	8ba3      	ldrh	r3, [r4, #28]
    5726:	3314      	adds	r3, #20
    5728:	83a3      	strh	r3, [r4, #28]
		r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
    572a:	6863      	ldr	r3, [r4, #4]
    572c:	685f      	ldr	r7, [r3, #4]
    572e:	683d      	ldr	r5, [r7, #0]
		SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
    5730:	4623      	mov	r3, r4
    5732:	f853 2f08 	ldr.w	r2, [r3, #8]!
    5736:	f8d3 e004 	ldr.w	lr, [r3, #4]
    573a:	6898      	ldr	r0, [r3, #8]
    573c:	68d9      	ldr	r1, [r3, #12]
    573e:	603a      	str	r2, [r7, #0]
    5740:	f8c7 e004 	str.w	lr, [r7, #4]
    5744:	60b8      	str	r0, [r7, #8]
    5746:	60f9      	str	r1, [r7, #12]
    5748:	691a      	ldr	r2, [r3, #16]
    574a:	613a      	str	r2, [r7, #16]
		IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
    574c:	8ba0      	ldrh	r0, [r4, #28]
    574e:	4b2b      	ldr	r3, [pc, #172]	; (57fc <ip_reass+0x19c>)
    5750:	4798      	blx	r3
    5752:	8078      	strh	r0, [r7, #2]
		IPH_OFFSET_SET(fraghdr, 0);
    5754:	2300      	movs	r3, #0
    5756:	71bb      	strb	r3, [r7, #6]
    5758:	71fb      	strb	r3, [r7, #7]
		IPH_CHKSUM_SET(fraghdr, 0);
    575a:	72bb      	strb	r3, [r7, #10]
    575c:	72fb      	strb	r3, [r7, #11]
		IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    575e:	2114      	movs	r1, #20
    5760:	4638      	mov	r0, r7
    5762:	4b27      	ldr	r3, [pc, #156]	; (5800 <ip_reass+0x1a0>)
    5764:	4798      	blx	r3
    5766:	8178      	strh	r0, [r7, #10]
		p = ipr->p;
    5768:	f8d4 8004 	ldr.w	r8, [r4, #4]
		while (r != NULL) {
    576c:	b33d      	cbz	r5, 57be <ip_reass+0x15e>
			iprh = (struct ip_reass_helper *)r->payload;
    576e:	686f      	ldr	r7, [r5, #4]
			pbuf_header(r, -IP_HLEN);
    5770:	f06f 0113 	mvn.w	r1, #19
    5774:	4628      	mov	r0, r5
    5776:	4b23      	ldr	r3, [pc, #140]	; (5804 <ip_reass+0x1a4>)
    5778:	4798      	blx	r3
			pbuf_cat(p, r);
    577a:	4629      	mov	r1, r5
    577c:	4640      	mov	r0, r8
    577e:	4b22      	ldr	r3, [pc, #136]	; (5808 <ip_reass+0x1a8>)
    5780:	4798      	blx	r3
			r = iprh->next_pbuf;
    5782:	683d      	ldr	r5, [r7, #0]
    5784:	e7f2      	b.n	576c <ip_reass+0x10c>
		ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
    5786:	4641      	mov	r1, r8
    5788:	4628      	mov	r0, r5
    578a:	4b20      	ldr	r3, [pc, #128]	; (580c <ip_reass+0x1ac>)
    578c:	4798      	blx	r3
		if (ipr == NULL) {
    578e:	4604      	mov	r4, r0
    5790:	2800      	cmp	r0, #0
    5792:	d1b2      	bne.n	56fa <ip_reass+0x9a>
    5794:	e793      	b.n	56be <ip_reass+0x5e>
		if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
    5796:	89e0      	ldrh	r0, [r4, #14]
    5798:	4b12      	ldr	r3, [pc, #72]	; (57e4 <ip_reass+0x184>)
    579a:	4798      	blx	r3
    579c:	f3c0 000c 	ubfx	r0, r0, #0, #13
    57a0:	2800      	cmp	r0, #0
    57a2:	d0aa      	beq.n	56fa <ip_reass+0x9a>
			SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
    57a4:	682a      	ldr	r2, [r5, #0]
    57a6:	f8d5 e004 	ldr.w	lr, [r5, #4]
    57aa:	68a8      	ldr	r0, [r5, #8]
    57ac:	68e9      	ldr	r1, [r5, #12]
    57ae:	60a2      	str	r2, [r4, #8]
    57b0:	f8c4 e00c 	str.w	lr, [r4, #12]
    57b4:	6120      	str	r0, [r4, #16]
    57b6:	6161      	str	r1, [r4, #20]
    57b8:	692a      	ldr	r2, [r5, #16]
    57ba:	61a2      	str	r2, [r4, #24]
    57bc:	e79d      	b.n	56fa <ip_reass+0x9a>
		ip_reass_dequeue_datagram(ipr, ipr_prev);
    57be:	4631      	mov	r1, r6
    57c0:	4620      	mov	r0, r4
    57c2:	4b13      	ldr	r3, [pc, #76]	; (5810 <ip_reass+0x1b0>)
    57c4:	4798      	blx	r3
		ip_reass_pbufcount -= pbuf_clen(p);
    57c6:	4640      	mov	r0, r8
    57c8:	4b07      	ldr	r3, [pc, #28]	; (57e8 <ip_reass+0x188>)
    57ca:	4798      	blx	r3
    57cc:	b280      	uxth	r0, r0
    57ce:	4a07      	ldr	r2, [pc, #28]	; (57ec <ip_reass+0x18c>)
    57d0:	8893      	ldrh	r3, [r2, #4]
    57d2:	1a18      	subs	r0, r3, r0
    57d4:	8090      	strh	r0, [r2, #4]
}
    57d6:	4640      	mov	r0, r8
    57d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return NULL;
    57dc:	f04f 0800 	mov.w	r8, #0
    57e0:	e7f9      	b.n	57d6 <ip_reass+0x176>
    57e2:	bf00      	nop
    57e4:	00003ecd 	.word	0x00003ecd
    57e8:	000061ed 	.word	0x000061ed
    57ec:	200015f0 	.word	0x200015f0
    57f0:	000053f5 	.word	0x000053f5
    57f4:	00006009 	.word	0x00006009
    57f8:	00005499 	.word	0x00005499
    57fc:	00003ec1 	.word	0x00003ec1
    5800:	00004d35 	.word	0x00004d35
    5804:	00005f8f 	.word	0x00005f8f
    5808:	00006209 	.word	0x00006209
    580c:	000055c5 	.word	0x000055c5
    5810:	0000533d 	.word	0x0000533d

00005814 <ip_frag>:
 * @param dest destination ip address to which to send
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
    5814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5818:	b08d      	sub	sp, #52	; 0x34
    581a:	4605      	mov	r5, r0
    581c:	910a      	str	r1, [sp, #40]	; 0x28
    581e:	920b      	str	r2, [sp, #44]	; 0x2c
	struct ip_hdr *original_iphdr;
#endif
	struct ip_hdr *iphdr;
	u16_t          nfb;
	u16_t          left, cop;
	u16_t          mtu = netif->mtu;
    5820:	8d0c      	ldrh	r4, [r1, #40]	; 0x28

	/* Copy the IP header in it */
	iphdr = (struct ip_hdr *)rambuf->payload;
	SMEMCPY(iphdr, p->payload, IP_HLEN);
#else  /* IP_FRAG_USES_STATIC_BUF */
	original_iphdr = (struct ip_hdr *)p->payload;
    5822:	f8d0 a004 	ldr.w	sl, [r0, #4]
	iphdr          = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

	/* Save original offset */
	tmp = ntohs(IPH_OFFSET(iphdr));
    5826:	f8ba 0006 	ldrh.w	r0, [sl, #6]
    582a:	4b61      	ldr	r3, [pc, #388]	; (59b0 <ip_frag+0x19c>)
    582c:	4798      	blx	r3
	ofo = tmp & IP_OFFMASK;
    582e:	f3c0 030c 	ubfx	r3, r0, #0, #13
    5832:	9304      	str	r3, [sp, #16]
	omf = tmp & IP_MF;
    5834:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
    5838:	9309      	str	r3, [sp, #36]	; 0x24

	left = p->tot_len - IP_HLEN;
    583a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    583e:	f1a9 0914 	sub.w	r9, r9, #20
    5842:	fa1f f989 	uxth.w	r9, r9

	nfb = (mtu - IP_HLEN) / 8;
    5846:	f1a4 0314 	sub.w	r3, r4, #20
    584a:	9306      	str	r3, [sp, #24]
    584c:	2b00      	cmp	r3, #0
    584e:	db05      	blt.n	585c <ip_frag+0x48>
    5850:	f3c3 03cf 	ubfx	r3, r3, #3, #16
    5854:	9308      	str	r3, [sp, #32]
	u16_t newpbuflen = 0;
    5856:	2400      	movs	r4, #0
	u16_t          poff = IP_HLEN;
    5858:	2614      	movs	r6, #20

	while (left) {
    585a:	e08a      	b.n	5972 <ip_frag+0x15e>
	nfb = (mtu - IP_HLEN) / 8;
    585c:	3307      	adds	r3, #7
    585e:	e7f7      	b.n	5850 <ip_frag+0x3c>
		if (!last) {
			tmp = tmp | IP_MF;
		}

		/* Fill this fragment */
		cop = last ? left : nfb * 8;
    5860:	f8cd 9014 	str.w	r9, [sp, #20]
		/* When not using a static buffer, create a chain of pbufs.
		 * The first will be a PBUF_RAM holding the link and IP header.
		 * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
		 * but limited to the size of an mtu.
		 */
		rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    5864:	2200      	movs	r2, #0
    5866:	2114      	movs	r1, #20
    5868:	2002      	movs	r0, #2
    586a:	4b52      	ldr	r3, [pc, #328]	; (59b4 <ip_frag+0x1a0>)
    586c:	4798      	blx	r3
		if (rambuf == NULL) {
    586e:	9003      	str	r0, [sp, #12]
    5870:	2800      	cmp	r0, #0
    5872:	f000 8099 	beq.w	59a8 <ip_frag+0x194>
			return ERR_MEM;
		}
		LWIP_ASSERT("this needs a pbuf in one piece!", (p->len >= (IP_HLEN)));
		SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
    5876:	6843      	ldr	r3, [r0, #4]
    5878:	f8da 2000 	ldr.w	r2, [sl]
    587c:	f8da 7004 	ldr.w	r7, [sl, #4]
    5880:	f8da 0008 	ldr.w	r0, [sl, #8]
    5884:	f8da 100c 	ldr.w	r1, [sl, #12]
    5888:	601a      	str	r2, [r3, #0]
    588a:	605f      	str	r7, [r3, #4]
    588c:	6098      	str	r0, [r3, #8]
    588e:	60d9      	str	r1, [r3, #12]
    5890:	f8da 2010 	ldr.w	r2, [sl, #16]
    5894:	611a      	str	r2, [r3, #16]
		iphdr = (struct ip_hdr *)rambuf->payload;
    5896:	9b03      	ldr	r3, [sp, #12]
    5898:	f8d3 b004 	ldr.w	fp, [r3, #4]

		/* Can just adjust p directly for needed offset. */
		p->payload = (u8_t *)p->payload + poff;
    589c:	686b      	ldr	r3, [r5, #4]
    589e:	4433      	add	r3, r6
    58a0:	606b      	str	r3, [r5, #4]
		p->len -= poff;
    58a2:	896b      	ldrh	r3, [r5, #10]
    58a4:	1b9e      	subs	r6, r3, r6
    58a6:	816e      	strh	r6, [r5, #10]

		left_to_copy = cop;
    58a8:	9e05      	ldr	r6, [sp, #20]
		while (left_to_copy) {
    58aa:	e01d      	b.n	58e8 <ip_frag+0xd4>
			/* Is this pbuf already empty? */
			if (!newpbuflen) {
				p = p->next;
				continue;
			}
			pcr = ip_frag_alloc_pbuf_custom_ref();
    58ac:	4b42      	ldr	r3, [pc, #264]	; (59b8 <ip_frag+0x1a4>)
    58ae:	4798      	blx	r3
			if (pcr == NULL) {
    58b0:	4607      	mov	r7, r0
    58b2:	b318      	cbz	r0, 58fc <ip_frag+0xe8>
				pbuf_free(rambuf);
				return ERR_MEM;
			}
			/* Mirror this pbuf, although we might not need all of it. */
			newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
    58b4:	686b      	ldr	r3, [r5, #4]
    58b6:	9401      	str	r4, [sp, #4]
    58b8:	9300      	str	r3, [sp, #0]
    58ba:	4603      	mov	r3, r0
    58bc:	2202      	movs	r2, #2
    58be:	4621      	mov	r1, r4
    58c0:	2003      	movs	r0, #3
    58c2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 59d8 <ip_frag+0x1c4>
    58c6:	47c0      	blx	r8
			if (newpbuf == NULL) {
    58c8:	4680      	mov	r8, r0
    58ca:	b1f8      	cbz	r0, 590c <ip_frag+0xf8>
				ip_frag_free_pbuf_custom_ref(pcr);
				pbuf_free(rambuf);
				return ERR_MEM;
			}
			pbuf_ref(p);
    58cc:	4628      	mov	r0, r5
    58ce:	4b3b      	ldr	r3, [pc, #236]	; (59bc <ip_frag+0x1a8>)
    58d0:	4798      	blx	r3
			pcr->original                = p;
    58d2:	617d      	str	r5, [r7, #20]
			pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
    58d4:	4b3a      	ldr	r3, [pc, #232]	; (59c0 <ip_frag+0x1ac>)
    58d6:	613b      	str	r3, [r7, #16]

			/* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
			 * so that it is removed when pbuf_dechain is later called on rambuf.
			 */
			pbuf_cat(rambuf, newpbuf);
    58d8:	4641      	mov	r1, r8
    58da:	9803      	ldr	r0, [sp, #12]
    58dc:	4b39      	ldr	r3, [pc, #228]	; (59c4 <ip_frag+0x1b0>)
    58de:	4798      	blx	r3
			left_to_copy -= newpbuflen;
    58e0:	1b36      	subs	r6, r6, r4
    58e2:	b2b6      	uxth	r6, r6
			if (left_to_copy) {
    58e4:	b106      	cbz	r6, 58e8 <ip_frag+0xd4>
				p = p->next;
    58e6:	682d      	ldr	r5, [r5, #0]
		while (left_to_copy) {
    58e8:	b1ce      	cbz	r6, 591e <ip_frag+0x10a>
			newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
    58ea:	896c      	ldrh	r4, [r5, #10]
    58ec:	42b4      	cmp	r4, r6
    58ee:	bf28      	it	cs
    58f0:	4634      	movcs	r4, r6
    58f2:	b2a4      	uxth	r4, r4
			if (!newpbuflen) {
    58f4:	2c00      	cmp	r4, #0
    58f6:	d1d9      	bne.n	58ac <ip_frag+0x98>
				p = p->next;
    58f8:	682d      	ldr	r5, [r5, #0]
				continue;
    58fa:	e7f5      	b.n	58e8 <ip_frag+0xd4>
				pbuf_free(rambuf);
    58fc:	9803      	ldr	r0, [sp, #12]
    58fe:	4b32      	ldr	r3, [pc, #200]	; (59c8 <ip_frag+0x1b4>)
    5900:	4798      	blx	r3
				return ERR_MEM;
    5902:	f04f 30ff 	mov.w	r0, #4294967295
#if IP_FRAG_USES_STATIC_BUF
	pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
	snmp_inc_ipfragoks();
	return ERR_OK;
}
    5906:	b00d      	add	sp, #52	; 0x34
    5908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ip_frag_free_pbuf_custom_ref(pcr);
    590c:	4638      	mov	r0, r7
    590e:	4b2f      	ldr	r3, [pc, #188]	; (59cc <ip_frag+0x1b8>)
    5910:	4798      	blx	r3
				pbuf_free(rambuf);
    5912:	9803      	ldr	r0, [sp, #12]
    5914:	4b2c      	ldr	r3, [pc, #176]	; (59c8 <ip_frag+0x1b4>)
    5916:	4798      	blx	r3
				return ERR_MEM;
    5918:	f04f 30ff 	mov.w	r0, #4294967295
    591c:	e7f3      	b.n	5906 <ip_frag+0xf2>
		IPH_OFFSET_SET(iphdr, htons(tmp));
    591e:	9807      	ldr	r0, [sp, #28]
    5920:	4e2b      	ldr	r6, [pc, #172]	; (59d0 <ip_frag+0x1bc>)
    5922:	47b0      	blx	r6
    5924:	f8ab 0006 	strh.w	r0, [fp, #6]
		IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
    5928:	9f05      	ldr	r7, [sp, #20]
    592a:	f107 0014 	add.w	r0, r7, #20
    592e:	b280      	uxth	r0, r0
    5930:	47b0      	blx	r6
    5932:	f8ab 0002 	strh.w	r0, [fp, #2]
		IPH_CHKSUM_SET(iphdr, 0);
    5936:	2300      	movs	r3, #0
    5938:	f88b 300a 	strb.w	r3, [fp, #10]
    593c:	f88b 300b 	strb.w	r3, [fp, #11]
		IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
    5940:	2114      	movs	r1, #20
    5942:	4658      	mov	r0, fp
    5944:	4b23      	ldr	r3, [pc, #140]	; (59d4 <ip_frag+0x1c0>)
    5946:	4798      	blx	r3
    5948:	f8ab 000a 	strh.w	r0, [fp, #10]
        netif->output(netif, rambuf, dest);
    594c:	980a      	ldr	r0, [sp, #40]	; 0x28
    594e:	6943      	ldr	r3, [r0, #20]
    5950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5952:	9e03      	ldr	r6, [sp, #12]
    5954:	4631      	mov	r1, r6
    5956:	4798      	blx	r3
        pbuf_free(rambuf);
    5958:	4630      	mov	r0, r6
    595a:	4b1b      	ldr	r3, [pc, #108]	; (59c8 <ip_frag+0x1b4>)
    595c:	4798      	blx	r3
		left -= cop;
    595e:	eba9 0907 	sub.w	r9, r9, r7
    5962:	fa1f f989 	uxth.w	r9, r9
		ofo += nfb;
    5966:	9b04      	ldr	r3, [sp, #16]
    5968:	9a08      	ldr	r2, [sp, #32]
    596a:	4413      	add	r3, r2
    596c:	b29b      	uxth	r3, r3
    596e:	9304      	str	r3, [sp, #16]
		poff = newpbuflen;
    5970:	4626      	mov	r6, r4
	while (left) {
    5972:	f1b9 0f00 	cmp.w	r9, #0
    5976:	d015      	beq.n	59a4 <ip_frag+0x190>
		last = (left <= mtu - IP_HLEN);
    5978:	464b      	mov	r3, r9
		tmp = omf | (IP_OFFMASK & (ofo));
    597a:	9a04      	ldr	r2, [sp, #16]
    597c:	f3c2 020c 	ubfx	r2, r2, #0, #13
    5980:	9909      	ldr	r1, [sp, #36]	; 0x24
    5982:	430a      	orrs	r2, r1
    5984:	9207      	str	r2, [sp, #28]
		if (!last) {
    5986:	9906      	ldr	r1, [sp, #24]
    5988:	4549      	cmp	r1, r9
    598a:	da02      	bge.n	5992 <ip_frag+0x17e>
			tmp = tmp | IP_MF;
    598c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    5990:	9207      	str	r2, [sp, #28]
		cop = last ? left : nfb * 8;
    5992:	9a06      	ldr	r2, [sp, #24]
    5994:	429a      	cmp	r2, r3
    5996:	f6bf af63 	bge.w	5860 <ip_frag+0x4c>
    599a:	9b08      	ldr	r3, [sp, #32]
    599c:	00db      	lsls	r3, r3, #3
    599e:	b29b      	uxth	r3, r3
    59a0:	9305      	str	r3, [sp, #20]
    59a2:	e75f      	b.n	5864 <ip_frag+0x50>
	return ERR_OK;
    59a4:	2000      	movs	r0, #0
    59a6:	e7ae      	b.n	5906 <ip_frag+0xf2>
			return ERR_MEM;
    59a8:	f04f 30ff 	mov.w	r0, #4294967295
    59ac:	e7ab      	b.n	5906 <ip_frag+0xf2>
    59ae:	bf00      	nop
    59b0:	00003ecd 	.word	0x00003ecd
    59b4:	0000606d 	.word	0x0000606d
    59b8:	000055b5 	.word	0x000055b5
    59bc:	000061ff 	.word	0x000061ff
    59c0:	0000547d 	.word	0x0000547d
    59c4:	00006209 	.word	0x00006209
    59c8:	00006009 	.word	0x00006009
    59cc:	0000546d 	.word	0x0000546d
    59d0:	00003ec1 	.word	0x00003ec1
    59d4:	00004d35 	.word	0x00004d35
    59d8:	00005f31 	.word	0x00005f31

000059dc <plug_holes>:
 *
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void plug_holes(struct mem *mem)
{
    59dc:	b410      	push	{r4}
	LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

	/* plug hole forward */
	LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

	nmem = (struct mem *)(void *)&ram[mem->next];
    59de:	4b17      	ldr	r3, [pc, #92]	; (5a3c <plug_holes+0x60>)
    59e0:	681b      	ldr	r3, [r3, #0]
    59e2:	8801      	ldrh	r1, [r0, #0]
    59e4:	185a      	adds	r2, r3, r1
	if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
    59e6:	4290      	cmp	r0, r2
    59e8:	d00f      	beq.n	5a0a <plug_holes+0x2e>
    59ea:	7914      	ldrb	r4, [r2, #4]
    59ec:	b96c      	cbnz	r4, 5a0a <plug_holes+0x2e>
    59ee:	4c13      	ldr	r4, [pc, #76]	; (5a3c <plug_holes+0x60>)
    59f0:	6864      	ldr	r4, [r4, #4]
    59f2:	42a2      	cmp	r2, r4
    59f4:	d009      	beq.n	5a0a <plug_holes+0x2e>
		/* if mem->next is unused and not end of ram, combine mem and mem->next */
		if (lfree == nmem) {
    59f6:	4c11      	ldr	r4, [pc, #68]	; (5a3c <plug_holes+0x60>)
    59f8:	68a4      	ldr	r4, [r4, #8]
    59fa:	42a2      	cmp	r2, r4
    59fc:	d018      	beq.n	5a30 <plug_holes+0x54>
			lfree = mem;
		}
		mem->next                                      = nmem->next;
    59fe:	5a5a      	ldrh	r2, [r3, r1]
    5a00:	8002      	strh	r2, [r0, #0]
		((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
    5a02:	5a5a      	ldrh	r2, [r3, r1]
    5a04:	441a      	add	r2, r3
    5a06:	1ac1      	subs	r1, r0, r3
    5a08:	8051      	strh	r1, [r2, #2]
	}

	/* plug hole backward */
	pmem = (struct mem *)(void *)&ram[mem->prev];
    5a0a:	8841      	ldrh	r1, [r0, #2]
    5a0c:	185a      	adds	r2, r3, r1
	if (pmem != mem && pmem->used == 0) {
    5a0e:	4290      	cmp	r0, r2
    5a10:	d00b      	beq.n	5a2a <plug_holes+0x4e>
    5a12:	7914      	ldrb	r4, [r2, #4]
    5a14:	b94c      	cbnz	r4, 5a2a <plug_holes+0x4e>
		/* if mem->prev is unused, combine mem and mem->prev */
		if (lfree == mem) {
    5a16:	4c09      	ldr	r4, [pc, #36]	; (5a3c <plug_holes+0x60>)
    5a18:	68a4      	ldr	r4, [r4, #8]
    5a1a:	42a0      	cmp	r0, r4
    5a1c:	d00b      	beq.n	5a36 <plug_holes+0x5a>
			lfree = pmem;
		}
		pmem->next                                    = mem->next;
    5a1e:	8804      	ldrh	r4, [r0, #0]
    5a20:	525c      	strh	r4, [r3, r1]
		((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
    5a22:	8801      	ldrh	r1, [r0, #0]
    5a24:	4419      	add	r1, r3
    5a26:	1ad3      	subs	r3, r2, r3
    5a28:	804b      	strh	r3, [r1, #2]
	}
}
    5a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a2e:	4770      	bx	lr
			lfree = mem;
    5a30:	4a02      	ldr	r2, [pc, #8]	; (5a3c <plug_holes+0x60>)
    5a32:	6090      	str	r0, [r2, #8]
    5a34:	e7e3      	b.n	59fe <plug_holes+0x22>
			lfree = pmem;
    5a36:	4c01      	ldr	r4, [pc, #4]	; (5a3c <plug_holes+0x60>)
    5a38:	60a2      	str	r2, [r4, #8]
    5a3a:	e7f0      	b.n	5a1e <plug_holes+0x42>
    5a3c:	200015f8 	.word	0x200015f8

00005a40 <mem_init>:

/**
 * Zero the heap and initialize start, end and lowest-free
 */
void mem_init(void)
{
    5a40:	b510      	push	{r4, lr}
	struct mem *mem;

	LWIP_ASSERT("Sanity check alignment", (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

	/* align the heap */
	ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
    5a42:	4b0b      	ldr	r3, [pc, #44]	; (5a70 <mem_init+0x30>)
    5a44:	f023 0303 	bic.w	r3, r3, #3
    5a48:	480a      	ldr	r0, [pc, #40]	; (5a74 <mem_init+0x34>)
    5a4a:	6003      	str	r3, [r0, #0]
	/* initialize the start of the heap */
	mem       = (struct mem *)(void *)ram;
	mem->next = MEM_SIZE_ALIGNED;
    5a4c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
    5a50:	801c      	strh	r4, [r3, #0]
	mem->prev = 0;
    5a52:	2200      	movs	r2, #0
    5a54:	805a      	strh	r2, [r3, #2]
	mem->used = 0;
    5a56:	711a      	strb	r2, [r3, #4]
	/* initialize the end of the heap */
	ram_end       = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
    5a58:	191a      	adds	r2, r3, r4
    5a5a:	6042      	str	r2, [r0, #4]
	ram_end->used = 1;
    5a5c:	2101      	movs	r1, #1
    5a5e:	7111      	strb	r1, [r2, #4]
	ram_end->next = MEM_SIZE_ALIGNED;
    5a60:	8014      	strh	r4, [r2, #0]
	ram_end->prev = MEM_SIZE_ALIGNED;
    5a62:	8054      	strh	r4, [r2, #2]

	/* initialize the lowest-free pointer to the start of the heap */
	lfree = (struct mem *)(void *)ram;
    5a64:	6083      	str	r3, [r0, #8]

	MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

	if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    5a66:	300c      	adds	r0, #12
    5a68:	4b03      	ldr	r3, [pc, #12]	; (5a78 <mem_init+0x38>)
    5a6a:	4798      	blx	r3
    5a6c:	bd10      	pop	{r4, pc}
    5a6e:	bf00      	nop
    5a70:	200129cf 	.word	0x200129cf
    5a74:	200015f8 	.word	0x200015f8
    5a78:	00002479 	.word	0x00002479

00005a7c <mem_free>:
void mem_free(void *rmem)
{
	struct mem *mem;
	LWIP_MEM_FREE_DECL_PROTECT();

	if (rmem == NULL) {
    5a7c:	b1f8      	cbz	r0, 5abe <mem_free+0x42>
{
    5a7e:	b538      	push	{r3, r4, r5, lr}
    5a80:	4604      	mov	r4, r0
	}
	LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) == 0);

	LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram && (u8_t *)rmem < (u8_t *)ram_end);

	if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    5a82:	4a0f      	ldr	r2, [pc, #60]	; (5ac0 <mem_free+0x44>)
    5a84:	6812      	ldr	r2, [r2, #0]
    5a86:	4290      	cmp	r0, r2
    5a88:	d303      	bcc.n	5a92 <mem_free+0x16>
    5a8a:	4a0d      	ldr	r2, [pc, #52]	; (5ac0 <mem_free+0x44>)
    5a8c:	6852      	ldr	r2, [r2, #4]
    5a8e:	4290      	cmp	r0, r2
    5a90:	d300      	bcc.n	5a94 <mem_free+0x18>
    5a92:	bd38      	pop	{r3, r4, r5, pc}
		MEM_STATS_INC(illegal);
		SYS_ARCH_UNPROTECT(lev);
		return;
	}
	/* protect the heap from concurrent access */
	LWIP_MEM_FREE_PROTECT();
    5a94:	4d0a      	ldr	r5, [pc, #40]	; (5ac0 <mem_free+0x44>)
    5a96:	2100      	movs	r1, #0
    5a98:	f105 000c 	add.w	r0, r5, #12
    5a9c:	4b09      	ldr	r3, [pc, #36]	; (5ac4 <mem_free+0x48>)
    5a9e:	4798      	blx	r3
	/* Get the corresponding struct mem ... */
	mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    5aa0:	f1a4 0008 	sub.w	r0, r4, #8
	/* ... which has to be in a used state ... */
	LWIP_ASSERT("mem_free: mem->used", mem->used);
	/* ... and is now unused. */
	mem->used = 0;
    5aa4:	2300      	movs	r3, #0
    5aa6:	f804 3c04 	strb.w	r3, [r4, #-4]

	if (mem < lfree) {
    5aaa:	68ab      	ldr	r3, [r5, #8]
    5aac:	4298      	cmp	r0, r3
    5aae:	d200      	bcs.n	5ab2 <mem_free+0x36>
		/* the newly freed struct is now the lowest */
		lfree = mem;
    5ab0:	60a8      	str	r0, [r5, #8]
	}

	MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

	/* finally, see if prev or next are free also */
	plug_holes(mem);
    5ab2:	4b05      	ldr	r3, [pc, #20]	; (5ac8 <mem_free+0x4c>)
    5ab4:	4798      	blx	r3
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_FREE_UNPROTECT();
    5ab6:	4805      	ldr	r0, [pc, #20]	; (5acc <mem_free+0x50>)
    5ab8:	4b05      	ldr	r3, [pc, #20]	; (5ad0 <mem_free+0x54>)
    5aba:	4798      	blx	r3
    5abc:	e7e9      	b.n	5a92 <mem_free+0x16>
    5abe:	4770      	bx	lr
    5ac0:	200015f8 	.word	0x200015f8
    5ac4:	00002509 	.word	0x00002509
    5ac8:	000059dd 	.word	0x000059dd
    5acc:	20001604 	.word	0x20001604
    5ad0:	000024f1 	.word	0x000024f1

00005ad4 <mem_trim>:
 * @return for compatibility reasons: is always == rmem, at the moment
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *mem_trim(void *rmem, mem_size_t newsize)
{
    5ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ad8:	4605      	mov	r5, r0
	/* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
	LWIP_MEM_FREE_DECL_PROTECT();

	/* Expand the size of the allocated memory region so that we can
	   adjust for alignment. */
	newsize = LWIP_MEM_ALIGN_SIZE(newsize);
    5ada:	1ccc      	adds	r4, r1, #3
    5adc:	b2a4      	uxth	r4, r4
    5ade:	f024 0403 	bic.w	r4, r4, #3
    5ae2:	b2a4      	uxth	r4, r4

	if (newsize < MIN_SIZE_ALIGNED) {
    5ae4:	2c0b      	cmp	r4, #11
    5ae6:	d800      	bhi.n	5aea <mem_trim+0x16>
		/* every data block must be at least MIN_SIZE_ALIGNED long */
		newsize = MIN_SIZE_ALIGNED;
    5ae8:	240c      	movs	r4, #12
	}

	if (newsize > MEM_SIZE_ALIGNED) {
    5aea:	f5b4 5f60 	cmp.w	r4, #14336	; 0x3800
    5aee:	d860      	bhi.n	5bb2 <mem_trim+0xde>
		return NULL;
	}

	LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram && (u8_t *)rmem < (u8_t *)ram_end);

	if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
    5af0:	4b32      	ldr	r3, [pc, #200]	; (5bbc <mem_trim+0xe8>)
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	42ab      	cmp	r3, r5
    5af6:	d837      	bhi.n	5b68 <mem_trim+0x94>
    5af8:	4a30      	ldr	r2, [pc, #192]	; (5bbc <mem_trim+0xe8>)
    5afa:	6852      	ldr	r2, [r2, #4]
    5afc:	4295      	cmp	r5, r2
    5afe:	d233      	bcs.n	5b68 <mem_trim+0x94>
		MEM_STATS_INC(illegal);
		SYS_ARCH_UNPROTECT(lev);
		return rmem;
	}
	/* Get the corresponding struct mem ... */
	mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
    5b00:	f1a5 0708 	sub.w	r7, r5, #8
	/* ... and its offset pointer */
	ptr = (mem_size_t)((u8_t *)mem - ram);
    5b04:	1aff      	subs	r7, r7, r3
    5b06:	b2bf      	uxth	r7, r7

	size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    5b08:	f835 6c08 	ldrh.w	r6, [r5, #-8]
    5b0c:	1bf6      	subs	r6, r6, r7
    5b0e:	b2b6      	uxth	r6, r6
    5b10:	3e08      	subs	r6, #8
    5b12:	b2b6      	uxth	r6, r6
	LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
	if (newsize > size) {
    5b14:	42b4      	cmp	r4, r6
    5b16:	d84e      	bhi.n	5bb6 <mem_trim+0xe2>
		/* not supported */
		return NULL;
	}
	if (newsize == size) {
    5b18:	d026      	beq.n	5b68 <mem_trim+0x94>
		/* No change in size, simply return */
		return rmem;
	}

	/* protect the heap from concurrent access */
	LWIP_MEM_FREE_PROTECT();
    5b1a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5bbc <mem_trim+0xe8>
    5b1e:	2100      	movs	r1, #0
    5b20:	f108 000c 	add.w	r0, r8, #12
    5b24:	4b26      	ldr	r3, [pc, #152]	; (5bc0 <mem_trim+0xec>)
    5b26:	4798      	blx	r3

	mem2 = (struct mem *)(void *)&ram[mem->next];
    5b28:	f8d8 2000 	ldr.w	r2, [r8]
    5b2c:	f835 3c08 	ldrh.w	r3, [r5, #-8]
    5b30:	18d1      	adds	r1, r2, r3
	if (mem2->used == 0) {
    5b32:	7908      	ldrb	r0, [r1, #4]
    5b34:	b9f8      	cbnz	r0, 5b76 <mem_trim+0xa2>
		/* The next struct is unused, we can simply move it at little */
		mem_size_t next;
		/* remember the old next pointer */
		next = mem2->next;
    5b36:	5ad0      	ldrh	r0, [r2, r3]
		/* create new struct mem which is moved directly after the shrinked mem */
		ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    5b38:	19e3      	adds	r3, r4, r7
    5b3a:	b29b      	uxth	r3, r3
    5b3c:	3308      	adds	r3, #8
    5b3e:	b29b      	uxth	r3, r3
		if (lfree == mem2) {
    5b40:	f8d8 4008 	ldr.w	r4, [r8, #8]
    5b44:	42a1      	cmp	r1, r4
    5b46:	d012      	beq.n	5b6e <mem_trim+0x9a>
			lfree = (struct mem *)(void *)&ram[ptr2];
		}
		mem2       = (struct mem *)(void *)&ram[ptr2];
    5b48:	18d1      	adds	r1, r2, r3
		mem2->used = 0;
    5b4a:	2400      	movs	r4, #0
    5b4c:	710c      	strb	r4, [r1, #4]
		/* restore the next pointer */
		mem2->next = next;
    5b4e:	52d0      	strh	r0, [r2, r3]
		/* link it back to mem */
		mem2->prev = ptr;
    5b50:	804f      	strh	r7, [r1, #2]
		/* link mem to it */
		mem->next = ptr2;
    5b52:	f825 3c08 	strh.w	r3, [r5, #-8]
		/* last thing to restore linked list: as we have moved mem2,
		 * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
		 * the end of the heap */
		if (mem2->next != MEM_SIZE_ALIGNED) {
    5b56:	5ad1      	ldrh	r1, [r2, r3]
    5b58:	f5b1 5f60 	cmp.w	r1, #14336	; 0x3800
    5b5c:	d001      	beq.n	5b62 <mem_trim+0x8e>
			((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    5b5e:	440a      	add	r2, r1
    5b60:	8053      	strh	r3, [r2, #2]
		  -> the remaining space stays unused since it is too small
		} */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_FREE_UNPROTECT();
    5b62:	4818      	ldr	r0, [pc, #96]	; (5bc4 <mem_trim+0xf0>)
    5b64:	4b18      	ldr	r3, [pc, #96]	; (5bc8 <mem_trim+0xf4>)
    5b66:	4798      	blx	r3
	return rmem;
}
    5b68:	4628      	mov	r0, r5
    5b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			lfree = (struct mem *)(void *)&ram[ptr2];
    5b6e:	18d1      	adds	r1, r2, r3
    5b70:	f8c8 1008 	str.w	r1, [r8, #8]
    5b74:	e7e8      	b.n	5b48 <mem_trim+0x74>
	} else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
    5b76:	f104 0314 	add.w	r3, r4, #20
    5b7a:	42b3      	cmp	r3, r6
    5b7c:	d8f1      	bhi.n	5b62 <mem_trim+0x8e>
		ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    5b7e:	19e3      	adds	r3, r4, r7
    5b80:	b29b      	uxth	r3, r3
    5b82:	3308      	adds	r3, #8
    5b84:	b29b      	uxth	r3, r3
		mem2 = (struct mem *)(void *)&ram[ptr2];
    5b86:	18d1      	adds	r1, r2, r3
		if (mem2 < lfree) {
    5b88:	480c      	ldr	r0, [pc, #48]	; (5bbc <mem_trim+0xe8>)
    5b8a:	6880      	ldr	r0, [r0, #8]
    5b8c:	4281      	cmp	r1, r0
    5b8e:	d201      	bcs.n	5b94 <mem_trim+0xc0>
			lfree = mem2;
    5b90:	480a      	ldr	r0, [pc, #40]	; (5bbc <mem_trim+0xe8>)
    5b92:	6081      	str	r1, [r0, #8]
		mem2->used = 0;
    5b94:	2000      	movs	r0, #0
    5b96:	7108      	strb	r0, [r1, #4]
		mem2->next = mem->next;
    5b98:	f835 0c08 	ldrh.w	r0, [r5, #-8]
    5b9c:	52d0      	strh	r0, [r2, r3]
		mem2->prev = ptr;
    5b9e:	804f      	strh	r7, [r1, #2]
		mem->next  = ptr2;
    5ba0:	f825 3c08 	strh.w	r3, [r5, #-8]
		if (mem2->next != MEM_SIZE_ALIGNED) {
    5ba4:	5ad1      	ldrh	r1, [r2, r3]
    5ba6:	f5b1 5f60 	cmp.w	r1, #14336	; 0x3800
    5baa:	d0da      	beq.n	5b62 <mem_trim+0x8e>
			((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    5bac:	440a      	add	r2, r1
    5bae:	8053      	strh	r3, [r2, #2]
    5bb0:	e7d7      	b.n	5b62 <mem_trim+0x8e>
		return NULL;
    5bb2:	2500      	movs	r5, #0
    5bb4:	e7d8      	b.n	5b68 <mem_trim+0x94>
		return NULL;
    5bb6:	2500      	movs	r5, #0
    5bb8:	e7d6      	b.n	5b68 <mem_trim+0x94>
    5bba:	bf00      	nop
    5bbc:	200015f8 	.word	0x200015f8
    5bc0:	00002509 	.word	0x00002509
    5bc4:	20001604 	.word	0x20001604
    5bc8:	000024f1 	.word	0x000024f1

00005bcc <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
	u8_t        local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_MEM_ALLOC_DECL_PROTECT();

	if (size == 0) {
    5bcc:	2800      	cmp	r0, #0
    5bce:	d05b      	beq.n	5c88 <mem_malloc+0xbc>
{
    5bd0:	b538      	push	{r3, r4, r5, lr}
    5bd2:	4605      	mov	r5, r0
		return NULL;
	}

	/* Expand the size of the allocated memory region so that we can
	   adjust for alignment. */
	size = LWIP_MEM_ALIGN_SIZE(size);
    5bd4:	3503      	adds	r5, #3
    5bd6:	b2ad      	uxth	r5, r5
    5bd8:	f025 0503 	bic.w	r5, r5, #3
    5bdc:	b2ad      	uxth	r5, r5

	if (size < MIN_SIZE_ALIGNED) {
    5bde:	2d0b      	cmp	r5, #11
    5be0:	d800      	bhi.n	5be4 <mem_malloc+0x18>
		/* every data block must be at least MIN_SIZE_ALIGNED long */
		size = MIN_SIZE_ALIGNED;
    5be2:	250c      	movs	r5, #12
	}

	if (size > MEM_SIZE_ALIGNED) {
    5be4:	f5b5 5f60 	cmp.w	r5, #14336	; 0x3800
    5be8:	d850      	bhi.n	5c8c <mem_malloc+0xc0>
		return NULL;
	}

	/* protect the heap from concurrent access */
	sys_mutex_lock(&mem_mutex);
    5bea:	4c29      	ldr	r4, [pc, #164]	; (5c90 <mem_malloc+0xc4>)
    5bec:	2100      	movs	r1, #0
    5bee:	f104 000c 	add.w	r0, r4, #12
    5bf2:	4b28      	ldr	r3, [pc, #160]	; (5c94 <mem_malloc+0xc8>)
    5bf4:	4798      	blx	r3
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

		/* Scan through the heap searching for a free block that is big enough,
		 * beginning with the lowest free block.
		 */
		for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    5bf6:	6821      	ldr	r1, [r4, #0]
    5bf8:	68a3      	ldr	r3, [r4, #8]
    5bfa:	1a5b      	subs	r3, r3, r1
    5bfc:	b29b      	uxth	r3, r3
    5bfe:	e019      	b.n	5c34 <mem_malloc+0x68>
					 * take care of this).
					 * -> near fit or excact fit: do not split, no mem2 creation
					 * also can't move mem->next directly behind mem, since mem->next
					 * will always be used at this point!
					 */
					mem->used = 1;
    5c00:	2301      	movs	r3, #1
    5c02:	7123      	strb	r3, [r4, #4]
					MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
				}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
			mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
				if (mem == lfree) {
    5c04:	4b22      	ldr	r3, [pc, #136]	; (5c90 <mem_malloc+0xc4>)
    5c06:	689b      	ldr	r3, [r3, #8]
    5c08:	429c      	cmp	r4, r3
    5c0a:	d009      	beq.n	5c20 <mem_malloc+0x54>
					}
					lfree = cur;
					LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
				}
				LWIP_MEM_ALLOC_UNPROTECT();
				sys_mutex_unlock(&mem_mutex);
    5c0c:	4822      	ldr	r0, [pc, #136]	; (5c98 <mem_malloc+0xcc>)
    5c0e:	4b23      	ldr	r3, [pc, #140]	; (5c9c <mem_malloc+0xd0>)
    5c10:	4798      	blx	r3
				            (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
				LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
				            ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
				LWIP_ASSERT("mem_malloc: sanity check alignment", (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

				return (u8_t *)mem + SIZEOF_STRUCT_MEM;
    5c12:	f104 0008 	add.w	r0, r4, #8
    5c16:	bd38      	pop	{r3, r4, r5, pc}
						cur = (struct mem *)(void *)&ram[cur->next];
    5c18:	4a1d      	ldr	r2, [pc, #116]	; (5c90 <mem_malloc+0xc4>)
    5c1a:	6812      	ldr	r2, [r2, #0]
    5c1c:	881b      	ldrh	r3, [r3, #0]
    5c1e:	4413      	add	r3, r2
					while (cur->used && cur != ram_end) {
    5c20:	791a      	ldrb	r2, [r3, #4]
    5c22:	b11a      	cbz	r2, 5c2c <mem_malloc+0x60>
    5c24:	4a1a      	ldr	r2, [pc, #104]	; (5c90 <mem_malloc+0xc4>)
    5c26:	6852      	ldr	r2, [r2, #4]
    5c28:	4293      	cmp	r3, r2
    5c2a:	d1f5      	bne.n	5c18 <mem_malloc+0x4c>
					lfree = cur;
    5c2c:	4a18      	ldr	r2, [pc, #96]	; (5c90 <mem_malloc+0xc4>)
    5c2e:	6093      	str	r3, [r2, #8]
    5c30:	e7ec      	b.n	5c0c <mem_malloc+0x40>
		     ptr = ((struct mem *)(void *)&ram[ptr])->next) {
    5c32:	8823      	ldrh	r3, [r4, #0]
		for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
    5c34:	f5c5 5260 	rsb	r2, r5, #14336	; 0x3800
    5c38:	4293      	cmp	r3, r2
    5c3a:	da20      	bge.n	5c7e <mem_malloc+0xb2>
			mem            = (struct mem *)(void *)&ram[ptr];
    5c3c:	18cc      	adds	r4, r1, r3
			if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
    5c3e:	7922      	ldrb	r2, [r4, #4]
    5c40:	2a00      	cmp	r2, #0
    5c42:	d1f6      	bne.n	5c32 <mem_malloc+0x66>
    5c44:	5aca      	ldrh	r2, [r1, r3]
    5c46:	1ad2      	subs	r2, r2, r3
    5c48:	3a08      	subs	r2, #8
    5c4a:	4628      	mov	r0, r5
    5c4c:	42aa      	cmp	r2, r5
    5c4e:	d3f0      	bcc.n	5c32 <mem_malloc+0x66>
				if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
    5c50:	3014      	adds	r0, #20
    5c52:	4282      	cmp	r2, r0
    5c54:	d3d4      	bcc.n	5c00 <mem_malloc+0x34>
					ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    5c56:	18ea      	adds	r2, r5, r3
    5c58:	b292      	uxth	r2, r2
    5c5a:	3208      	adds	r2, #8
    5c5c:	b292      	uxth	r2, r2
					mem2       = (struct mem *)(void *)&ram[ptr2];
    5c5e:	1888      	adds	r0, r1, r2
					mem2->used = 0;
    5c60:	2500      	movs	r5, #0
    5c62:	7105      	strb	r5, [r0, #4]
					mem2->next = mem->next;
    5c64:	8825      	ldrh	r5, [r4, #0]
    5c66:	528d      	strh	r5, [r1, r2]
					mem2->prev = ptr;
    5c68:	8043      	strh	r3, [r0, #2]
					mem->next = ptr2;
    5c6a:	8022      	strh	r2, [r4, #0]
					mem->used = 1;
    5c6c:	2301      	movs	r3, #1
    5c6e:	7123      	strb	r3, [r4, #4]
					if (mem2->next != MEM_SIZE_ALIGNED) {
    5c70:	5a8b      	ldrh	r3, [r1, r2]
    5c72:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    5c76:	d0c5      	beq.n	5c04 <mem_malloc+0x38>
						((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    5c78:	4419      	add	r1, r3
    5c7a:	804a      	strh	r2, [r1, #2]
    5c7c:	e7c2      	b.n	5c04 <mem_malloc+0x38>
	} while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
	LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %" S16_F " bytes\n", (s16_t)size));
	MEM_STATS_INC(err);
	LWIP_MEM_ALLOC_UNPROTECT();
	sys_mutex_unlock(&mem_mutex);
    5c7e:	4806      	ldr	r0, [pc, #24]	; (5c98 <mem_malloc+0xcc>)
    5c80:	4b06      	ldr	r3, [pc, #24]	; (5c9c <mem_malloc+0xd0>)
    5c82:	4798      	blx	r3
	return NULL;
    5c84:	2000      	movs	r0, #0
    5c86:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    5c88:	2000      	movs	r0, #0
    5c8a:	4770      	bx	lr
		return NULL;
    5c8c:	2000      	movs	r0, #0
}
    5c8e:	bd38      	pop	{r3, r4, r5, pc}
    5c90:	200015f8 	.word	0x200015f8
    5c94:	00002509 	.word	0x00002509
    5c98:	20001604 	.word	0x20001604
    5c9c:	000024f1 	.word	0x000024f1

00005ca0 <memp_init>:
 * Initialize this module.
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void memp_init(void)
{
    5ca0:	b430      	push	{r4, r5}
	struct memp *memp;
	u16_t        i, j;

	for (i = 0; i < MEMP_MAX; ++i) {
    5ca2:	2300      	movs	r3, #0
    5ca4:	e001      	b.n	5caa <memp_init+0xa>
    5ca6:	3301      	adds	r3, #1
    5ca8:	b29b      	uxth	r3, r3
    5caa:	2b0c      	cmp	r3, #12
    5cac:	d9fb      	bls.n	5ca6 <memp_init+0x6>
		MEMP_STATS_AVAIL(err, i, 0);
		MEMP_STATS_AVAIL(avail, i, memp_num[i]);
	}

#if !MEMP_SEPARATE_POOLS
	memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
    5cae:	4913      	ldr	r1, [pc, #76]	; (5cfc <memp_init+0x5c>)
    5cb0:	f021 0103 	bic.w	r1, r1, #3
#endif /* !MEMP_SEPARATE_POOLS */
	/* for every pool: */
	for (i = 0; i < MEMP_MAX; ++i) {
    5cb4:	2500      	movs	r5, #0
    5cb6:	e015      	b.n	5ce4 <memp_init+0x44>
#if MEMP_SEPARATE_POOLS
		memp = (struct memp *)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
		/* create a linked list of memp elements */
		for (j = 0; j < memp_num[i]; ++j) {
			memp->next  = memp_tab[i];
    5cb8:	4a11      	ldr	r2, [pc, #68]	; (5d00 <memp_init+0x60>)
    5cba:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    5cbe:	f8d2 44b4 	ldr.w	r4, [r2, #1204]	; 0x4b4
    5cc2:	600c      	str	r4, [r1, #0]
			memp_tab[i] = memp;
    5cc4:	f8c2 14b4 	str.w	r1, [r2, #1204]	; 0x4b4
			memp        = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
    5cc8:	4a0e      	ldr	r2, [pc, #56]	; (5d04 <memp_init+0x64>)
    5cca:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    5cce:	4411      	add	r1, r2
		for (j = 0; j < memp_num[i]; ++j) {
    5cd0:	3301      	adds	r3, #1
    5cd2:	b29b      	uxth	r3, r3
    5cd4:	4a0b      	ldr	r2, [pc, #44]	; (5d04 <memp_init+0x64>)
    5cd6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    5cda:	8b92      	ldrh	r2, [r2, #28]
    5cdc:	4293      	cmp	r3, r2
    5cde:	d3eb      	bcc.n	5cb8 <memp_init+0x18>
	for (i = 0; i < MEMP_MAX; ++i) {
    5ce0:	3501      	adds	r5, #1
    5ce2:	b2ad      	uxth	r5, r5
    5ce4:	2d0c      	cmp	r5, #12
    5ce6:	d807      	bhi.n	5cf8 <memp_init+0x58>
		memp_tab[i] = NULL;
    5ce8:	4628      	mov	r0, r5
    5cea:	4a05      	ldr	r2, [pc, #20]	; (5d00 <memp_init+0x60>)
    5cec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5cf0:	2300      	movs	r3, #0
    5cf2:	f8c2 34b4 	str.w	r3, [r2, #1204]	; 0x4b4
		for (j = 0; j < memp_num[i]; ++j) {
    5cf6:	e7ed      	b.n	5cd4 <memp_init+0x34>
#if MEMP_OVERFLOW_CHECK
	memp_overflow_init();
	/* check everything a first time to see if it worked */
	memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
    5cf8:	bc30      	pop	{r4, r5}
    5cfa:	4770      	bx	lr
    5cfc:	2000160b 	.word	0x2000160b
    5d00:	20007bd8 	.word	0x20007bd8
    5d04:	0000e458 	.word	0x0000e458

00005d08 <memp_malloc>:
#endif
{
	struct memp *memp;
	SYS_ARCH_DECL_PROTECT(old_level);

	LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
    5d08:	280c      	cmp	r0, #12
    5d0a:	d900      	bls.n	5d0e <memp_malloc+0x6>
    5d0c:	e7fe      	b.n	5d0c <memp_malloc+0x4>
	SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
	memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

	memp = memp_tab[type];
    5d0e:	4b07      	ldr	r3, [pc, #28]	; (5d2c <memp_malloc+0x24>)
    5d10:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    5d14:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4

	if (memp != NULL) {
    5d18:	b12b      	cbz	r3, 5d26 <memp_malloc+0x1e>
		memp_tab[type] = memp->next;
    5d1a:	6819      	ldr	r1, [r3, #0]
    5d1c:	4a03      	ldr	r2, [pc, #12]	; (5d2c <memp_malloc+0x24>)
    5d1e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    5d22:	f8c2 14b4 	str.w	r1, [r2, #1204]	; 0x4b4
	}

	SYS_ARCH_UNPROTECT(old_level);

	return memp;
}
    5d26:	4618      	mov	r0, r3
    5d28:	4770      	bx	lr
    5d2a:	bf00      	nop
    5d2c:	20007bd8 	.word	0x20007bd8

00005d30 <memp_free>:
void memp_free(memp_t type, void *mem)
{
	struct memp *memp;
	SYS_ARCH_DECL_PROTECT(old_level);

	if (mem == NULL) {
    5d30:	b139      	cbz	r1, 5d42 <memp_free+0x12>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

	MEMP_STATS_DEC(used, type);

	memp->next     = memp_tab[type];
    5d32:	4b04      	ldr	r3, [pc, #16]	; (5d44 <memp_free+0x14>)
    5d34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5d38:	f8d0 34b4 	ldr.w	r3, [r0, #1204]	; 0x4b4
    5d3c:	600b      	str	r3, [r1, #0]
	memp_tab[type] = memp;
    5d3e:	f8c0 14b4 	str.w	r1, [r0, #1204]	; 0x4b4
    5d42:	4770      	bx	lr
    5d44:	20007bd8 	.word	0x20007bd8

00005d48 <netif_init>:
	return ERR_OK;
}
#endif /* LWIP_HAVE_LOOPIF */

void netif_init(void)
{
    5d48:	4770      	bx	lr
	...

00005d4c <netif_set_ipaddr>:
 *
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4604      	mov	r4, r0
#if LWIP_TCP
	struct tcp_pcb *       pcb;
	struct tcp_pcb_listen *lpcb;

	/* address is actually being changed? */
	if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
    5d50:	460d      	mov	r5, r1
    5d52:	b309      	cbz	r1, 5d98 <netif_set_ipaddr+0x4c>
    5d54:	680a      	ldr	r2, [r1, #0]
    5d56:	6843      	ldr	r3, [r0, #4]
    5d58:	429a      	cmp	r2, r3
    5d5a:	d01d      	beq.n	5d98 <netif_set_ipaddr+0x4c>
		/* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
		LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
		pcb = tcp_active_pcbs;
    5d5c:	4b11      	ldr	r3, [pc, #68]	; (5da4 <netif_set_ipaddr+0x58>)
    5d5e:	6818      	ldr	r0, [r3, #0]
		while (pcb != NULL) {
    5d60:	e003      	b.n	5d6a <netif_set_ipaddr+0x1e>
			    /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
			    && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
			) {
				/* this connection must be aborted */
				struct tcp_pcb *next = pcb->next;
    5d62:	68c6      	ldr	r6, [r0, #12]
				LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
				tcp_abort(pcb);
    5d64:	4b10      	ldr	r3, [pc, #64]	; (5da8 <netif_set_ipaddr+0x5c>)
    5d66:	4798      	blx	r3
				pcb = next;
    5d68:	4630      	mov	r0, r6
		while (pcb != NULL) {
    5d6a:	b128      	cbz	r0, 5d78 <netif_set_ipaddr+0x2c>
			if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
    5d6c:	6802      	ldr	r2, [r0, #0]
    5d6e:	6863      	ldr	r3, [r4, #4]
    5d70:	429a      	cmp	r2, r3
    5d72:	d0f6      	beq.n	5d62 <netif_set_ipaddr+0x16>
			} else {
				pcb = pcb->next;
    5d74:	68c0      	ldr	r0, [r0, #12]
    5d76:	e7f8      	b.n	5d6a <netif_set_ipaddr+0x1e>
			}
		}
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    5d78:	4b0c      	ldr	r3, [pc, #48]	; (5dac <netif_set_ipaddr+0x60>)
    5d7a:	681b      	ldr	r3, [r3, #0]
    5d7c:	e000      	b.n	5d80 <netif_set_ipaddr+0x34>
    5d7e:	68db      	ldr	r3, [r3, #12]
    5d80:	b153      	cbz	r3, 5d98 <netif_set_ipaddr+0x4c>
			/* PCB bound to current local interface address? */
			if ((!(ip_addr_isany(&(lpcb->local_ip)))) && (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
    5d82:	2b00      	cmp	r3, #0
    5d84:	d0fb      	beq.n	5d7e <netif_set_ipaddr+0x32>
    5d86:	681a      	ldr	r2, [r3, #0]
    5d88:	2a00      	cmp	r2, #0
    5d8a:	d0f8      	beq.n	5d7e <netif_set_ipaddr+0x32>
    5d8c:	6861      	ldr	r1, [r4, #4]
    5d8e:	428a      	cmp	r2, r1
    5d90:	d1f5      	bne.n	5d7e <netif_set_ipaddr+0x32>
				/* The PCB is listening to the old ipaddr and
				 * is set to listen to the new one instead */
				ip_addr_set(&(lpcb->local_ip), ipaddr);
    5d92:	682a      	ldr	r2, [r5, #0]
    5d94:	601a      	str	r2, [r3, #0]
    5d96:	e7f2      	b.n	5d7e <netif_set_ipaddr+0x32>
	}
#endif
	snmp_delete_ipaddridx_tree(netif);
	snmp_delete_iprteidx_tree(0, netif);
	/* set new IP address to netif */
	ip_addr_set(&(netif->ip_addr), ipaddr);
    5d98:	b115      	cbz	r5, 5da0 <netif_set_ipaddr+0x54>
    5d9a:	682b      	ldr	r3, [r5, #0]
    5d9c:	6063      	str	r3, [r4, #4]
    5d9e:	bd70      	pop	{r4, r5, r6, pc}
    5da0:	2300      	movs	r3, #0
    5da2:	e7fb      	b.n	5d9c <netif_set_ipaddr+0x50>
    5da4:	200161f0 	.word	0x200161f0
    5da8:	00006d25 	.word	0x00006d25
    5dac:	200161f8 	.word	0x200161f8

00005db0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
	ip_addr_set(&(netif->gw), gw);
    5db0:	b111      	cbz	r1, 5db8 <netif_set_gw+0x8>
    5db2:	680b      	ldr	r3, [r1, #0]
    5db4:	60c3      	str	r3, [r0, #12]
    5db6:	4770      	bx	lr
    5db8:	2300      	movs	r3, #0
    5dba:	e7fb      	b.n	5db4 <netif_set_gw+0x4>

00005dbc <netif_set_netmask>:
 */
void netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
	snmp_delete_iprteidx_tree(0, netif);
	/* set new netmask to netif */
	ip_addr_set(&(netif->netmask), netmask);
    5dbc:	b111      	cbz	r1, 5dc4 <netif_set_netmask+0x8>
    5dbe:	680b      	ldr	r3, [r1, #0]
    5dc0:	6083      	str	r3, [r0, #8]
    5dc2:	4770      	bx	lr
    5dc4:	2300      	movs	r3, #0
    5dc6:	e7fb      	b.n	5dc0 <netif_set_netmask+0x4>

00005dc8 <netif_set_addr>:
{
    5dc8:	b570      	push	{r4, r5, r6, lr}
    5dca:	4604      	mov	r4, r0
    5dcc:	4616      	mov	r6, r2
    5dce:	461d      	mov	r5, r3
	netif_set_ipaddr(netif, ipaddr);
    5dd0:	4b05      	ldr	r3, [pc, #20]	; (5de8 <netif_set_addr+0x20>)
    5dd2:	4798      	blx	r3
	netif_set_netmask(netif, netmask);
    5dd4:	4631      	mov	r1, r6
    5dd6:	4620      	mov	r0, r4
    5dd8:	4b04      	ldr	r3, [pc, #16]	; (5dec <netif_set_addr+0x24>)
    5dda:	4798      	blx	r3
	netif_set_gw(netif, gw);
    5ddc:	4629      	mov	r1, r5
    5dde:	4620      	mov	r0, r4
    5de0:	4b03      	ldr	r3, [pc, #12]	; (5df0 <netif_set_addr+0x28>)
    5de2:	4798      	blx	r3
    5de4:	bd70      	pop	{r4, r5, r6, pc}
    5de6:	bf00      	nop
    5de8:	00005d4d 	.word	0x00005d4d
    5dec:	00005dbd 	.word	0x00005dbd
    5df0:	00005db1 	.word	0x00005db1

00005df4 <netif_add>:
{
    5df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5df6:	4604      	mov	r4, r0
	ip_addr_set_zero(&netif->ip_addr);
    5df8:	2500      	movs	r5, #0
    5dfa:	6045      	str	r5, [r0, #4]
	ip_addr_set_zero(&netif->netmask);
    5dfc:	6085      	str	r5, [r0, #8]
	ip_addr_set_zero(&netif->gw);
    5dfe:	60c5      	str	r5, [r0, #12]
	netif->flags = 0;
    5e00:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
	netif->dhcp = NULL;
    5e04:	6245      	str	r5, [r0, #36]	; 0x24
	netif->status_callback = NULL;
    5e06:	61c5      	str	r5, [r0, #28]
	netif->state = state;
    5e08:	9d06      	ldr	r5, [sp, #24]
    5e0a:	6205      	str	r5, [r0, #32]
	netif->num   = netif_num++;
    5e0c:	4e0a      	ldr	r6, [pc, #40]	; (5e38 <netif_add+0x44>)
    5e0e:	7835      	ldrb	r5, [r6, #0]
    5e10:	1c6f      	adds	r7, r5, #1
    5e12:	7037      	strb	r7, [r6, #0]
    5e14:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	netif->input = input;
    5e18:	9d08      	ldr	r5, [sp, #32]
    5e1a:	6105      	str	r5, [r0, #16]
	netif_set_addr(netif, ipaddr, netmask, gw);
    5e1c:	4d07      	ldr	r5, [pc, #28]	; (5e3c <netif_add+0x48>)
    5e1e:	47a8      	blx	r5
	if (init(netif) != ERR_OK) {
    5e20:	4620      	mov	r0, r4
    5e22:	9b07      	ldr	r3, [sp, #28]
    5e24:	4798      	blx	r3
    5e26:	b928      	cbnz	r0, 5e34 <netif_add+0x40>
	netif->next = netif_list;
    5e28:	4b05      	ldr	r3, [pc, #20]	; (5e40 <netif_add+0x4c>)
    5e2a:	681a      	ldr	r2, [r3, #0]
    5e2c:	6022      	str	r2, [r4, #0]
	netif_list  = netif;
    5e2e:	601c      	str	r4, [r3, #0]
	return netif;
    5e30:	4620      	mov	r0, r4
    5e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    5e34:	2000      	movs	r0, #0
}
    5e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e38:	200080c0 	.word	0x200080c0
    5e3c:	00005dc9 	.word	0x00005dc9
    5e40:	200161e0 	.word	0x200161e0

00005e44 <netif_set_default>:
		snmp_delete_iprteidx_tree(1, netif);
	} else {
		/* install default route */
		snmp_insert_iprteidx_tree(1, netif);
	}
	netif_default = netif;
    5e44:	4b01      	ldr	r3, [pc, #4]	; (5e4c <netif_set_default+0x8>)
    5e46:	6018      	str	r0, [r3, #0]
    5e48:	4770      	bx	lr
    5e4a:	bf00      	nop
    5e4c:	200161e4 	.word	0x200161e4

00005e50 <netif_set_up>:
 *
 * @see dhcp_start()
 */
void netif_set_up(struct netif *netif)
{
	if (!(netif->flags & NETIF_FLAG_UP)) {
    5e50:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5e54:	f013 0f01 	tst.w	r3, #1
    5e58:	d116      	bne.n	5e88 <netif_set_up+0x38>
{
    5e5a:	b510      	push	{r4, lr}
    5e5c:	4604      	mov	r4, r0
		netif->flags |= NETIF_FLAG_UP;
    5e5e:	f043 0301 	orr.w	r3, r3, #1
    5e62:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

#if LWIP_SNMP
		snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

		NETIF_STATUS_CALLBACK(netif);
    5e66:	69c3      	ldr	r3, [r0, #28]
    5e68:	b103      	cbz	r3, 5e6c <netif_set_up+0x1c>
    5e6a:	4798      	blx	r3

		if (netif->flags & NETIF_FLAG_LINK_UP) {
    5e6c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5e70:	f013 0f10 	tst.w	r3, #16
    5e74:	d002      	beq.n	5e7c <netif_set_up+0x2c>
#if LWIP_ARP
			/* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
			if (netif->flags & (NETIF_FLAG_ETHARP)) {
    5e76:	f013 0f20 	tst.w	r3, #32
    5e7a:	d100      	bne.n	5e7e <netif_set_up+0x2e>
    5e7c:	bd10      	pop	{r4, pc}
				etharp_gratuitous(netif);
    5e7e:	1d21      	adds	r1, r4, #4
    5e80:	4620      	mov	r0, r4
    5e82:	4b02      	ldr	r3, [pc, #8]	; (5e8c <netif_set_up+0x3c>)
    5e84:	4798      	blx	r3
				igmp_report_groups(netif);
			}
#endif /* LWIP_IGMP */
		}
	}
}
    5e86:	e7f9      	b.n	5e7c <netif_set_up+0x2c>
    5e88:	4770      	bx	lr
    5e8a:	bf00      	nop
    5e8c:	00009a9d 	.word	0x00009a9d

00005e90 <netif_set_down>:
 *
 * @see dhcp_start()
 */
void netif_set_down(struct netif *netif)
{
	if (netif->flags & NETIF_FLAG_UP) {
    5e90:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5e94:	f013 0f01 	tst.w	r3, #1
    5e98:	d010      	beq.n	5ebc <netif_set_down+0x2c>
{
    5e9a:	b510      	push	{r4, lr}
    5e9c:	4604      	mov	r4, r0
		netif->flags &= ~NETIF_FLAG_UP;
    5e9e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5ea2:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
#if LWIP_SNMP
		snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
		if (netif->flags & NETIF_FLAG_ETHARP) {
    5ea6:	f013 0f20 	tst.w	r3, #32
    5eaa:	d104      	bne.n	5eb6 <netif_set_down+0x26>
			etharp_cleanup_netif(netif);
		}
#endif /* LWIP_ARP */
		NETIF_STATUS_CALLBACK(netif);
    5eac:	69e3      	ldr	r3, [r4, #28]
    5eae:	b10b      	cbz	r3, 5eb4 <netif_set_down+0x24>
    5eb0:	4620      	mov	r0, r4
    5eb2:	4798      	blx	r3
    5eb4:	bd10      	pop	{r4, pc}
			etharp_cleanup_netif(netif);
    5eb6:	4b02      	ldr	r3, [pc, #8]	; (5ec0 <netif_set_down+0x30>)
    5eb8:	4798      	blx	r3
    5eba:	e7f7      	b.n	5eac <netif_set_down+0x1c>
    5ebc:	4770      	bx	lr
    5ebe:	bf00      	nop
    5ec0:	00009a61 	.word	0x00009a61

00005ec4 <pbuf_pool_is_empty>:
}
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void pbuf_pool_is_empty(void)
{
    5ec4:	b508      	push	{r3, lr}
	SYS_ARCH_UNPROTECT(old_level);
#else  /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
	u8_t queued;
	SYS_ARCH_DECL_PROTECT(old_level);
	SYS_ARCH_PROTECT(old_level);
	queued                  = pbuf_free_ooseq_pending;
    5ec6:	4b08      	ldr	r3, [pc, #32]	; (5ee8 <pbuf_pool_is_empty+0x24>)
    5ec8:	781a      	ldrb	r2, [r3, #0]
	pbuf_free_ooseq_pending = 1;
    5eca:	2101      	movs	r1, #1
    5ecc:	7019      	strb	r1, [r3, #0]
	SYS_ARCH_UNPROTECT(old_level);

	if (!queued) {
    5ece:	b102      	cbz	r2, 5ed2 <pbuf_pool_is_empty+0xe>
    5ed0:	bd08      	pop	{r3, pc}
		/* queue a call to pbuf_free_ooseq if not already queued */
		PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
    5ed2:	4611      	mov	r1, r2
    5ed4:	4805      	ldr	r0, [pc, #20]	; (5eec <pbuf_pool_is_empty+0x28>)
    5ed6:	4b06      	ldr	r3, [pc, #24]	; (5ef0 <pbuf_pool_is_empty+0x2c>)
    5ed8:	4798      	blx	r3
    5eda:	2800      	cmp	r0, #0
    5edc:	d0f8      	beq.n	5ed0 <pbuf_pool_is_empty+0xc>
    5ede:	2200      	movs	r2, #0
    5ee0:	4b01      	ldr	r3, [pc, #4]	; (5ee8 <pbuf_pool_is_empty+0x24>)
    5ee2:	701a      	strb	r2, [r3, #0]
	}
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
    5ee4:	e7f4      	b.n	5ed0 <pbuf_pool_is_empty+0xc>
    5ee6:	bf00      	nop
    5ee8:	200161e8 	.word	0x200161e8
    5eec:	00005f25 	.word	0x00005f25
    5ef0:	00003dbd 	.word	0x00003dbd

00005ef4 <pbuf_free_ooseq>:
{
    5ef4:	b510      	push	{r4, lr}
	pbuf_free_ooseq_pending = 0;
    5ef6:	2200      	movs	r2, #0
    5ef8:	4b07      	ldr	r3, [pc, #28]	; (5f18 <pbuf_free_ooseq+0x24>)
    5efa:	701a      	strb	r2, [r3, #0]
	for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    5efc:	4b07      	ldr	r3, [pc, #28]	; (5f1c <pbuf_free_ooseq+0x28>)
    5efe:	681c      	ldr	r4, [r3, #0]
    5f00:	b144      	cbz	r4, 5f14 <pbuf_free_ooseq+0x20>
		if (NULL != pcb->ooseq) {
    5f02:	6f60      	ldr	r0, [r4, #116]	; 0x74
    5f04:	b908      	cbnz	r0, 5f0a <pbuf_free_ooseq+0x16>
	for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
    5f06:	68e4      	ldr	r4, [r4, #12]
    5f08:	e7fa      	b.n	5f00 <pbuf_free_ooseq+0xc>
			tcp_segs_free(pcb->ooseq);
    5f0a:	4b05      	ldr	r3, [pc, #20]	; (5f20 <pbuf_free_ooseq+0x2c>)
    5f0c:	4798      	blx	r3
			pcb->ooseq = NULL;
    5f0e:	2300      	movs	r3, #0
    5f10:	6763      	str	r3, [r4, #116]	; 0x74
			return;
    5f12:	bd10      	pop	{r4, pc}
    5f14:	bd10      	pop	{r4, pc}
    5f16:	bf00      	nop
    5f18:	200161e8 	.word	0x200161e8
    5f1c:	200161f0 	.word	0x200161f0
    5f20:	000064e9 	.word	0x000064e9

00005f24 <pbuf_free_ooseq_callback>:
{
    5f24:	b508      	push	{r3, lr}
	pbuf_free_ooseq();
    5f26:	4b01      	ldr	r3, [pc, #4]	; (5f2c <pbuf_free_ooseq_callback+0x8>)
    5f28:	4798      	blx	r3
    5f2a:	bd08      	pop	{r3, pc}
    5f2c:	00005ef5 	.word	0x00005ef5

00005f30 <pbuf_alloced_custom>:
 * @param payload_mem_len the size of the 'payload_mem' buffer, must be at least
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p, void *payload_mem,
                                 u16_t payload_mem_len)
{
    5f30:	b470      	push	{r4, r5, r6}
    5f32:	9c03      	ldr	r4, [sp, #12]
	u16_t offset;
	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%" U16_F ")\n", length));

	/* determine header offset */
	switch (l) {
    5f34:	2803      	cmp	r0, #3
    5f36:	d826      	bhi.n	5f86 <pbuf_alloced_custom+0x56>
    5f38:	e8df f000 	tbb	[pc, r0]
    5f3c:	06040802 	.word	0x06040802
	case PBUF_TRANSPORT:
		/* add room for transport (often TCP) layer header */
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    5f40:	2038      	movs	r0, #56	; 0x38
    5f42:	e004      	b.n	5f4e <pbuf_alloced_custom+0x1e>
		/* add room for IP layer header */
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
		break;
	case PBUF_LINK:
		/* add room for link layer header */
		offset = PBUF_LINK_HLEN;
    5f44:	2010      	movs	r0, #16
		break;
    5f46:	e002      	b.n	5f4e <pbuf_alloced_custom+0x1e>
	case PBUF_RAW:
		offset = 0;
    5f48:	2000      	movs	r0, #0
		break;
    5f4a:	e000      	b.n	5f4e <pbuf_alloced_custom+0x1e>
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
    5f4c:	2024      	movs	r0, #36	; 0x24
	default:
		LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
		return NULL;
	}

	if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
    5f4e:	3003      	adds	r0, #3
    5f50:	f020 0503 	bic.w	r5, r0, #3
    5f54:	440d      	add	r5, r1
    5f56:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    5f5a:	42b5      	cmp	r5, r6
    5f5c:	dc15      	bgt.n	5f8a <pbuf_alloced_custom+0x5a>
		LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING,
		            ("pbuf_alloced_custom(length=%" U16_F ") buffer too short\n", length));
		return NULL;
	}

	p->pbuf.next = NULL;
    5f5e:	2500      	movs	r5, #0
    5f60:	601d      	str	r5, [r3, #0]
	if (payload_mem != NULL) {
    5f62:	b16c      	cbz	r4, 5f80 <pbuf_alloced_custom+0x50>
		p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
    5f64:	f020 0003 	bic.w	r0, r0, #3
    5f68:	4420      	add	r0, r4
    5f6a:	6058      	str	r0, [r3, #4]
	} else {
		p->pbuf.payload = NULL;
	}
	p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
    5f6c:	2002      	movs	r0, #2
    5f6e:	7358      	strb	r0, [r3, #13]
	p->pbuf.len = p->pbuf.tot_len = length;
    5f70:	8119      	strh	r1, [r3, #8]
    5f72:	8159      	strh	r1, [r3, #10]
	p->pbuf.type                  = type;
    5f74:	731a      	strb	r2, [r3, #12]
	p->pbuf.ref                   = 1;
    5f76:	2201      	movs	r2, #1
    5f78:	81da      	strh	r2, [r3, #14]
	return &p->pbuf;
    5f7a:	4618      	mov	r0, r3
}
    5f7c:	bc70      	pop	{r4, r5, r6}
    5f7e:	4770      	bx	lr
		p->pbuf.payload = NULL;
    5f80:	2000      	movs	r0, #0
    5f82:	6058      	str	r0, [r3, #4]
    5f84:	e7f2      	b.n	5f6c <pbuf_alloced_custom+0x3c>
		return NULL;
    5f86:	2000      	movs	r0, #0
    5f88:	e7f8      	b.n	5f7c <pbuf_alloced_custom+0x4c>
		return NULL;
    5f8a:	2000      	movs	r0, #0
    5f8c:	e7f6      	b.n	5f7c <pbuf_alloced_custom+0x4c>

00005f8e <pbuf_header>:
	u16_t type;
	void *payload;
	u16_t increment_magnitude;

	LWIP_ASSERT("p != NULL", p != NULL);
	if ((header_size_increment == 0) || (p == NULL)) {
    5f8e:	2900      	cmp	r1, #0
    5f90:	d032      	beq.n	5ff8 <pbuf_header+0x6a>
    5f92:	460b      	mov	r3, r1
    5f94:	2800      	cmp	r0, #0
    5f96:	d031      	beq.n	5ffc <pbuf_header+0x6e>
{
    5f98:	b410      	push	{r4}
		return 0;
	}

	if (header_size_increment < 0) {
    5f9a:	2900      	cmp	r1, #0
    5f9c:	db0d      	blt.n	5fba <pbuf_header+0x2c>
		increment_magnitude = -header_size_increment;
		/* Check that we aren't going to move off the end of the pbuf */
		LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
	} else {
		increment_magnitude = header_size_increment;
    5f9e:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
	}

	type = p->type;
    5fa0:	7b02      	ldrb	r2, [r0, #12]
	/* remember current payload pointer */
	payload = p->payload;
    5fa2:	6841      	ldr	r1, [r0, #4]

	/* pbuf types containing payloads? */
	if (type == PBUF_RAM || type == PBUF_POOL) {
    5fa4:	b17a      	cbz	r2, 5fc6 <pbuf_header+0x38>
    5fa6:	2a03      	cmp	r2, #3
    5fa8:	d00d      	beq.n	5fc6 <pbuf_header+0x38>
			p->payload = payload;
			/* bail out unsuccesfully */
			return 1;
		}
		/* pbuf types refering to external payloads? */
	} else if (type == PBUF_REF || type == PBUF_ROM) {
    5faa:	3a01      	subs	r2, #1
    5fac:	b292      	uxth	r2, r2
    5fae:	2a01      	cmp	r2, #1
    5fb0:	d826      	bhi.n	6000 <pbuf_header+0x72>
		/* hide a header in the payload? */
		if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	db10      	blt.n	5fd8 <pbuf_header+0x4a>
			/* increase payload pointer */
			p->payload = (u8_t *)p->payload - header_size_increment;
		} else {
			/* cannot expand payload to front (yet!)
			 * bail out unsuccesfully */
			return 1;
    5fb6:	2001      	movs	r0, #1
    5fb8:	e01b      	b.n	5ff2 <pbuf_header+0x64>
		increment_magnitude = -header_size_increment;
    5fba:	424c      	negs	r4, r1
    5fbc:	b2a4      	uxth	r4, r4
		LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
    5fbe:	8942      	ldrh	r2, [r0, #10]
    5fc0:	4294      	cmp	r4, r2
    5fc2:	d9ed      	bls.n	5fa0 <pbuf_header+0x12>
    5fc4:	e7fe      	b.n	5fc4 <pbuf_header+0x36>
		p->payload = (u8_t *)p->payload - header_size_increment;
    5fc6:	1aca      	subs	r2, r1, r3
    5fc8:	6042      	str	r2, [r0, #4]
		if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
    5fca:	f100 0410 	add.w	r4, r0, #16
    5fce:	42a2      	cmp	r2, r4
    5fd0:	d207      	bcs.n	5fe2 <pbuf_header+0x54>
			p->payload = payload;
    5fd2:	6041      	str	r1, [r0, #4]
			return 1;
    5fd4:	2001      	movs	r0, #1
    5fd6:	e00c      	b.n	5ff2 <pbuf_header+0x64>
		if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
    5fd8:	8942      	ldrh	r2, [r0, #10]
    5fda:	4294      	cmp	r4, r2
    5fdc:	d812      	bhi.n	6004 <pbuf_header+0x76>
			p->payload = (u8_t *)p->payload - header_size_increment;
    5fde:	1ac9      	subs	r1, r1, r3
    5fe0:	6041      	str	r1, [r0, #4]
		/* Unknown type */
		LWIP_ASSERT("bad pbuf type", 0);
		return 1;
	}
	/* modify pbuf length fields */
	p->len += header_size_increment;
    5fe2:	b29b      	uxth	r3, r3
    5fe4:	8942      	ldrh	r2, [r0, #10]
    5fe6:	441a      	add	r2, r3
    5fe8:	8142      	strh	r2, [r0, #10]
	p->tot_len += header_size_increment;
    5fea:	8902      	ldrh	r2, [r0, #8]
    5fec:	4413      	add	r3, r2
    5fee:	8103      	strh	r3, [r0, #8]

	LWIP_DEBUGF(
	    PBUF_DEBUG | LWIP_DBG_TRACE,
	    ("pbuf_header: old %p new %p (%" S16_F ")\n", (void *)payload, (void *)p->payload, header_size_increment));

	return 0;
    5ff0:	2000      	movs	r0, #0
}
    5ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ff6:	4770      	bx	lr
		return 0;
    5ff8:	2000      	movs	r0, #0
    5ffa:	4770      	bx	lr
    5ffc:	2000      	movs	r0, #0
    5ffe:	4770      	bx	lr
		return 1;
    6000:	2001      	movs	r0, #1
    6002:	e7f6      	b.n	5ff2 <pbuf_header+0x64>
			return 1;
    6004:	2001      	movs	r0, #1
    6006:	e7f4      	b.n	5ff2 <pbuf_header+0x64>

00006008 <pbuf_free>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t pbuf_free(struct pbuf *p)
{
    6008:	b538      	push	{r3, r4, r5, lr}
	u16_t        type;
	struct pbuf *q;
	u8_t         count;

	if (p == NULL) {
    600a:	b340      	cbz	r0, 605e <pbuf_free+0x56>
    600c:	4601      	mov	r1, r0
    600e:	2400      	movs	r4, #0
    6010:	e005      	b.n	601e <pbuf_free+0x16>
#if LWIP_SUPPORT_CUSTOM_PBUF
			/* is this a custom pbuf? */
			if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
				struct pbuf_custom *pc = (struct pbuf_custom *)p;
				LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
				pc->custom_free_function(p);
    6012:	690b      	ldr	r3, [r1, #16]
    6014:	4608      	mov	r0, r1
    6016:	4798      	blx	r3
					/* type == PBUF_RAM */
				} else {
					mem_free(p);
				}
			}
			count++;
    6018:	3401      	adds	r4, #1
    601a:	b2e4      	uxtb	r4, r4
			/* proceed to next pbuf */
			p = q;
    601c:	4629      	mov	r1, r5
	while (p != NULL) {
    601e:	b1f9      	cbz	r1, 6060 <pbuf_free+0x58>
		ref = --(p->ref);
    6020:	89cb      	ldrh	r3, [r1, #14]
    6022:	3b01      	subs	r3, #1
    6024:	b29b      	uxth	r3, r3
    6026:	81cb      	strh	r3, [r1, #14]
		if (ref == 0) {
    6028:	b9bb      	cbnz	r3, 605a <pbuf_free+0x52>
			q = p->next;
    602a:	680d      	ldr	r5, [r1, #0]
			type = p->type;
    602c:	7b0b      	ldrb	r3, [r1, #12]
			if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
    602e:	7b4a      	ldrb	r2, [r1, #13]
    6030:	f012 0f02 	tst.w	r2, #2
    6034:	d1ed      	bne.n	6012 <pbuf_free+0xa>
				if (type == PBUF_POOL) {
    6036:	2b03      	cmp	r3, #3
    6038:	d007      	beq.n	604a <pbuf_free+0x42>
				} else if (type == PBUF_ROM || type == PBUF_REF) {
    603a:	3b01      	subs	r3, #1
    603c:	b29b      	uxth	r3, r3
    603e:	2b01      	cmp	r3, #1
    6040:	d907      	bls.n	6052 <pbuf_free+0x4a>
					mem_free(p);
    6042:	4608      	mov	r0, r1
    6044:	4b07      	ldr	r3, [pc, #28]	; (6064 <pbuf_free+0x5c>)
    6046:	4798      	blx	r3
    6048:	e7e6      	b.n	6018 <pbuf_free+0x10>
					memp_free(MEMP_PBUF_POOL, p);
    604a:	200c      	movs	r0, #12
    604c:	4b06      	ldr	r3, [pc, #24]	; (6068 <pbuf_free+0x60>)
    604e:	4798      	blx	r3
    6050:	e7e2      	b.n	6018 <pbuf_free+0x10>
					memp_free(MEMP_PBUF, p);
    6052:	200b      	movs	r0, #11
    6054:	4b04      	ldr	r3, [pc, #16]	; (6068 <pbuf_free+0x60>)
    6056:	4798      	blx	r3
    6058:	e7de      	b.n	6018 <pbuf_free+0x10>
			/* (and so the remaining pbufs in chain as well) */
		} else {
			LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE,
			            ("pbuf_free: %p has ref %" U16_F ", ending here.\n", (void *)p, ref));
			/* stop walking through the chain */
			p = NULL;
    605a:	2100      	movs	r1, #0
    605c:	e7df      	b.n	601e <pbuf_free+0x16>
		return 0;
    605e:	2400      	movs	r4, #0
		}
	}
	PERF_STOP("pbuf_free");
	/* return number of de-allocated pbufs */
	return count;
}
    6060:	4620      	mov	r0, r4
    6062:	bd38      	pop	{r3, r4, r5, pc}
    6064:	00005a7d 	.word	0x00005a7d
    6068:	00005d31 	.word	0x00005d31

0000606c <pbuf_alloc>:
{
    606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (layer) {
    6070:	2803      	cmp	r0, #3
    6072:	f200 8083 	bhi.w	617c <pbuf_alloc+0x110>
    6076:	e8df f000 	tbb	[pc, r0]
    607a:	0802      	.short	0x0802
    607c:	0604      	.short	0x0604
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    607e:	2438      	movs	r4, #56	; 0x38
    6080:	e004      	b.n	608c <pbuf_alloc+0x20>
		offset = PBUF_LINK_HLEN;
    6082:	2410      	movs	r4, #16
		break;
    6084:	e002      	b.n	608c <pbuf_alloc+0x20>
		offset = 0;
    6086:	2400      	movs	r4, #0
		break;
    6088:	e000      	b.n	608c <pbuf_alloc+0x20>
		offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
    608a:	2424      	movs	r4, #36	; 0x24
    608c:	4616      	mov	r6, r2
    608e:	460d      	mov	r5, r1
	switch (type) {
    6090:	2a03      	cmp	r2, #3
    6092:	d875      	bhi.n	6180 <pbuf_alloc+0x114>
    6094:	e8df f002 	tbb	[pc, r2]
    6098:	02656546 	.word	0x02656546
		p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    609c:	200c      	movs	r0, #12
    609e:	4b39      	ldr	r3, [pc, #228]	; (6184 <pbuf_alloc+0x118>)
    60a0:	4798      	blx	r3
		if (p == NULL) {
    60a2:	4607      	mov	r7, r0
    60a4:	2800      	cmp	r0, #0
    60a6:	d033      	beq.n	6110 <pbuf_alloc+0xa4>
		p->type = type;
    60a8:	7306      	strb	r6, [r0, #12]
		p->next = NULL;
    60aa:	2300      	movs	r3, #0
    60ac:	6003      	str	r3, [r0, #0]
		p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    60ae:	f104 0310 	add.w	r3, r4, #16
    60b2:	4403      	add	r3, r0
    60b4:	3303      	adds	r3, #3
    60b6:	f023 0303 	bic.w	r3, r3, #3
    60ba:	6043      	str	r3, [r0, #4]
		p->tot_len = length;
    60bc:	8105      	strh	r5, [r0, #8]
		p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
    60be:	f5c4 64bd 	rsb	r4, r4, #1512	; 0x5e8
    60c2:	3404      	adds	r4, #4
    60c4:	42ac      	cmp	r4, r5
    60c6:	bfa8      	it	ge
    60c8:	462c      	movge	r4, r5
    60ca:	b2a4      	uxth	r4, r4
    60cc:	8144      	strh	r4, [r0, #10]
		p->ref = 1;
    60ce:	2301      	movs	r3, #1
    60d0:	81c3      	strh	r3, [r0, #14]
		rem_len = length - p->len;
    60d2:	1b2d      	subs	r5, r5, r4
		r = p;
    60d4:	4680      	mov	r8, r0
		while (rem_len > 0) {
    60d6:	2d00      	cmp	r5, #0
    60d8:	dd3c      	ble.n	6154 <pbuf_alloc+0xe8>
			q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
    60da:	200c      	movs	r0, #12
    60dc:	4b29      	ldr	r3, [pc, #164]	; (6184 <pbuf_alloc+0x118>)
    60de:	4798      	blx	r3
			if (q == NULL) {
    60e0:	4604      	mov	r4, r0
    60e2:	b1c0      	cbz	r0, 6116 <pbuf_alloc+0xaa>
			q->type  = type;
    60e4:	7306      	strb	r6, [r0, #12]
			q->flags = 0;
    60e6:	2300      	movs	r3, #0
    60e8:	7343      	strb	r3, [r0, #13]
			q->next  = NULL;
    60ea:	6003      	str	r3, [r0, #0]
			r->next = q;
    60ec:	f8c8 0000 	str.w	r0, [r8]
			q->tot_len = (u16_t)rem_len;
    60f0:	b2ab      	uxth	r3, r5
    60f2:	8103      	strh	r3, [r0, #8]
			q->len     = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
    60f4:	f240 52ec 	movw	r2, #1516	; 0x5ec
    60f8:	4293      	cmp	r3, r2
    60fa:	bf28      	it	cs
    60fc:	4613      	movcs	r3, r2
    60fe:	8143      	strh	r3, [r0, #10]
			q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
    6100:	f100 0210 	add.w	r2, r0, #16
    6104:	6042      	str	r2, [r0, #4]
			q->ref = 1;
    6106:	2201      	movs	r2, #1
    6108:	81c2      	strh	r2, [r0, #14]
			rem_len -= q->len;
    610a:	1aed      	subs	r5, r5, r3
			r = q;
    610c:	4680      	mov	r8, r0
    610e:	e7e2      	b.n	60d6 <pbuf_alloc+0x6a>
			PBUF_POOL_IS_EMPTY();
    6110:	4b1d      	ldr	r3, [pc, #116]	; (6188 <pbuf_alloc+0x11c>)
    6112:	4798      	blx	r3
			return NULL;
    6114:	e022      	b.n	615c <pbuf_alloc+0xf0>
				PBUF_POOL_IS_EMPTY();
    6116:	4b1c      	ldr	r3, [pc, #112]	; (6188 <pbuf_alloc+0x11c>)
    6118:	4798      	blx	r3
				pbuf_free(p);
    611a:	4638      	mov	r0, r7
    611c:	4b1b      	ldr	r3, [pc, #108]	; (618c <pbuf_alloc+0x120>)
    611e:	4798      	blx	r3
				return NULL;
    6120:	4627      	mov	r7, r4
    6122:	e01b      	b.n	615c <pbuf_alloc+0xf0>
		p = (struct pbuf *)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    6124:	f104 0010 	add.w	r0, r4, #16
    6128:	1ccb      	adds	r3, r1, #3
    612a:	b29b      	uxth	r3, r3
    612c:	f023 0303 	bic.w	r3, r3, #3
    6130:	4418      	add	r0, r3
    6132:	b280      	uxth	r0, r0
    6134:	4b16      	ldr	r3, [pc, #88]	; (6190 <pbuf_alloc+0x124>)
    6136:	4798      	blx	r3
		if (p == NULL) {
    6138:	4607      	mov	r7, r0
    613a:	b178      	cbz	r0, 615c <pbuf_alloc+0xf0>
		p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
    613c:	f104 0310 	add.w	r3, r4, #16
    6140:	4403      	add	r3, r0
    6142:	3303      	adds	r3, #3
    6144:	f023 0303 	bic.w	r3, r3, #3
    6148:	6043      	str	r3, [r0, #4]
		p->len = p->tot_len = length;
    614a:	8105      	strh	r5, [r0, #8]
    614c:	8145      	strh	r5, [r0, #10]
		p->next             = NULL;
    614e:	2300      	movs	r3, #0
    6150:	6003      	str	r3, [r0, #0]
		p->type             = type;
    6152:	7306      	strb	r6, [r0, #12]
	p->ref = 1;
    6154:	2301      	movs	r3, #1
    6156:	81fb      	strh	r3, [r7, #14]
	p->flags = 0;
    6158:	2300      	movs	r3, #0
    615a:	737b      	strb	r3, [r7, #13]
}
    615c:	4638      	mov	r0, r7
    615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p = (struct pbuf *)memp_malloc(MEMP_PBUF);
    6162:	200b      	movs	r0, #11
    6164:	4b07      	ldr	r3, [pc, #28]	; (6184 <pbuf_alloc+0x118>)
    6166:	4798      	blx	r3
		if (p == NULL) {
    6168:	4607      	mov	r7, r0
    616a:	2800      	cmp	r0, #0
    616c:	d0f6      	beq.n	615c <pbuf_alloc+0xf0>
		p->payload = NULL;
    616e:	2300      	movs	r3, #0
    6170:	6043      	str	r3, [r0, #4]
		p->len = p->tot_len = length;
    6172:	8105      	strh	r5, [r0, #8]
    6174:	8145      	strh	r5, [r0, #10]
		p->next             = NULL;
    6176:	6003      	str	r3, [r0, #0]
		p->type             = type;
    6178:	7306      	strb	r6, [r0, #12]
		break;
    617a:	e7eb      	b.n	6154 <pbuf_alloc+0xe8>
		return NULL;
    617c:	2700      	movs	r7, #0
    617e:	e7ed      	b.n	615c <pbuf_alloc+0xf0>
		return NULL;
    6180:	2700      	movs	r7, #0
    6182:	e7eb      	b.n	615c <pbuf_alloc+0xf0>
    6184:	00005d09 	.word	0x00005d09
    6188:	00005ec5 	.word	0x00005ec5
    618c:	00006009 	.word	0x00006009
    6190:	00005bcd 	.word	0x00005bcd

00006194 <pbuf_realloc>:
{
    6194:	b538      	push	{r3, r4, r5, lr}
    6196:	4604      	mov	r4, r0
	if (new_len >= p->tot_len) {
    6198:	8900      	ldrh	r0, [r0, #8]
    619a:	4288      	cmp	r0, r1
    619c:	d920      	bls.n	61e0 <pbuf_realloc+0x4c>
    619e:	460d      	mov	r5, r1
    61a0:	e006      	b.n	61b0 <pbuf_realloc+0x1c>
		rem_len -= q->len;
    61a2:	1aeb      	subs	r3, r5, r3
    61a4:	b29d      	uxth	r5, r3
		q->tot_len += (u16_t)grow;
    61a6:	1a0b      	subs	r3, r1, r0
    61a8:	8922      	ldrh	r2, [r4, #8]
    61aa:	4413      	add	r3, r2
    61ac:	8123      	strh	r3, [r4, #8]
		q = q->next;
    61ae:	6824      	ldr	r4, [r4, #0]
	while (rem_len > q->len) {
    61b0:	8963      	ldrh	r3, [r4, #10]
    61b2:	429d      	cmp	r5, r3
    61b4:	d8f5      	bhi.n	61a2 <pbuf_realloc+0xe>
	if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
    61b6:	7b22      	ldrb	r2, [r4, #12]
    61b8:	b952      	cbnz	r2, 61d0 <pbuf_realloc+0x3c>
    61ba:	429d      	cmp	r5, r3
    61bc:	d008      	beq.n	61d0 <pbuf_realloc+0x3c>
		q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    61be:	6863      	ldr	r3, [r4, #4]
    61c0:	1b1b      	subs	r3, r3, r4
    61c2:	fa15 f183 	uxtah	r1, r5, r3
    61c6:	b289      	uxth	r1, r1
    61c8:	4620      	mov	r0, r4
    61ca:	4b06      	ldr	r3, [pc, #24]	; (61e4 <pbuf_realloc+0x50>)
    61cc:	4798      	blx	r3
    61ce:	4604      	mov	r4, r0
	q->len     = rem_len;
    61d0:	8165      	strh	r5, [r4, #10]
	q->tot_len = q->len;
    61d2:	8125      	strh	r5, [r4, #8]
	if (q->next != NULL) {
    61d4:	6820      	ldr	r0, [r4, #0]
    61d6:	b108      	cbz	r0, 61dc <pbuf_realloc+0x48>
		pbuf_free(q->next);
    61d8:	4b03      	ldr	r3, [pc, #12]	; (61e8 <pbuf_realloc+0x54>)
    61da:	4798      	blx	r3
	q->next = NULL;
    61dc:	2300      	movs	r3, #0
    61de:	6023      	str	r3, [r4, #0]
    61e0:	bd38      	pop	{r3, r4, r5, pc}
    61e2:	bf00      	nop
    61e4:	00005ad5 	.word	0x00005ad5
    61e8:	00006009 	.word	0x00006009

000061ec <pbuf_clen>:

u8_t pbuf_clen(struct pbuf *p)
{
	u8_t len;

	len = 0;
    61ec:	2300      	movs	r3, #0
	while (p != NULL) {
    61ee:	e002      	b.n	61f6 <pbuf_clen+0xa>
		++len;
    61f0:	3301      	adds	r3, #1
    61f2:	b2db      	uxtb	r3, r3
		p = p->next;
    61f4:	6800      	ldr	r0, [r0, #0]
	while (p != NULL) {
    61f6:	2800      	cmp	r0, #0
    61f8:	d1fa      	bne.n	61f0 <pbuf_clen+0x4>
	}
	return len;
}
    61fa:	4618      	mov	r0, r3
    61fc:	4770      	bx	lr

000061fe <pbuf_ref>:
 */
void pbuf_ref(struct pbuf *p)
{
	SYS_ARCH_DECL_PROTECT(old_level);
	/* pbuf given? */
	if (p != NULL) {
    61fe:	b110      	cbz	r0, 6206 <pbuf_ref+0x8>
		SYS_ARCH_PROTECT(old_level);
		++(p->ref);
    6200:	89c3      	ldrh	r3, [r0, #14]
    6202:	3301      	adds	r3, #1
    6204:	81c3      	strh	r3, [r0, #14]
    6206:	4770      	bx	lr

00006208 <pbuf_cat>:

void pbuf_cat(struct pbuf *h, struct pbuf *t)
{
	struct pbuf *p;

	LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)", ((h != NULL) && (t != NULL)), return;);
    6208:	b118      	cbz	r0, 6212 <pbuf_cat+0xa>
    620a:	4603      	mov	r3, r0
    620c:	b109      	cbz	r1, 6212 <pbuf_cat+0xa>
{
    620e:	b410      	push	{r4}
    6210:	e005      	b.n	621e <pbuf_cat+0x16>
    6212:	e7fe      	b.n	6212 <pbuf_cat+0xa>

	/* proceed to last pbuf of chain */
	for (p = h; p->next != NULL; p = p->next) {
		/* add total length of second chain to all totals of first chain */
		p->tot_len += t->tot_len;
    6214:	890a      	ldrh	r2, [r1, #8]
    6216:	891c      	ldrh	r4, [r3, #8]
    6218:	4422      	add	r2, r4
    621a:	811a      	strh	r2, [r3, #8]
	for (p = h; p->next != NULL; p = p->next) {
    621c:	4603      	mov	r3, r0
    621e:	6818      	ldr	r0, [r3, #0]
    6220:	2800      	cmp	r0, #0
    6222:	d1f7      	bne.n	6214 <pbuf_cat+0xc>
	}
	/* { p is last pbuf of first h chain, p->next == NULL } */
	LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
	LWIP_ASSERT("p->next == NULL", p->next == NULL);
	/* add total length of second chain to last pbuf total of first chain */
	p->tot_len += t->tot_len;
    6224:	890a      	ldrh	r2, [r1, #8]
    6226:	8918      	ldrh	r0, [r3, #8]
    6228:	4402      	add	r2, r0
    622a:	811a      	strh	r2, [r3, #8]
	/* chain last pbuf of head (p) with first of tail (t) */
	p->next = t;
    622c:	6019      	str	r1, [r3, #0]
	/* p->next now references t, but the caller will drop its reference to t,
	 * so netto there is no change to the reference count of t.
	 */
}
    622e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6232:	4770      	bx	lr

00006234 <pbuf_chain>:
 * The ->next field of the last pbuf of the head chain is adjusted.
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void pbuf_chain(struct pbuf *h, struct pbuf *t)
{
    6234:	b510      	push	{r4, lr}
    6236:	460c      	mov	r4, r1
	pbuf_cat(h, t);
    6238:	4b02      	ldr	r3, [pc, #8]	; (6244 <pbuf_chain+0x10>)
    623a:	4798      	blx	r3
	/* t is now referenced by h */
	pbuf_ref(t);
    623c:	4620      	mov	r0, r4
    623e:	4b02      	ldr	r3, [pc, #8]	; (6248 <pbuf_chain+0x14>)
    6240:	4798      	blx	r3
    6242:	bd10      	pop	{r4, pc}
    6244:	00006209 	.word	0x00006209
    6248:	000061ff 	.word	0x000061ff

0000624c <pbuf_copy>:
	u16_t offset_to = 0, offset_from = 0, len;

	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n", (void *)p_to, (void *)p_from));

	/* is the target big enough to hold the source? */
	LWIP_ERROR("pbuf_copy: target not big enough to hold source",
    624c:	2800      	cmp	r0, #0
    624e:	d04c      	beq.n	62ea <pbuf_copy+0x9e>
{
    6250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6254:	460c      	mov	r4, r1
    6256:	4605      	mov	r5, r0
	LWIP_ERROR("pbuf_copy: target not big enough to hold source",
    6258:	b119      	cbz	r1, 6262 <pbuf_copy+0x16>
    625a:	8902      	ldrh	r2, [r0, #8]
    625c:	890b      	ldrh	r3, [r1, #8]
    625e:	429a      	cmp	r2, r3
    6260:	d200      	bcs.n	6264 <pbuf_copy+0x18>
    6262:	e7fe      	b.n	6262 <pbuf_copy+0x16>
    6264:	f04f 0800 	mov.w	r8, #0
    6268:	4647      	mov	r7, r8
    626a:	e010      	b.n	628e <pbuf_copy+0x42>
		if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
			/* complete current p_from fits into current p_to */
			len = p_from->len - offset_from;
		} else {
			/* current p_from does not fit into current p_to */
			len = p_to->len - offset_to;
    626c:	1bdb      	subs	r3, r3, r7
    626e:	b29e      	uxth	r6, r3
    6270:	e015      	b.n	629e <pbuf_copy+0x52>
		if (offset_from >= p_from->len) {
			/* on to next p_from (if any) */
			offset_from = 0;
			p_from      = p_from->next;
		}
		if (offset_to == p_to->len) {
    6272:	896b      	ldrh	r3, [r5, #10]
    6274:	429f      	cmp	r7, r3
    6276:	d025      	beq.n	62c4 <pbuf_copy+0x78>
			offset_to = 0;
			p_to      = p_to->next;
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
		}

		if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
    6278:	b11c      	cbz	r4, 6282 <pbuf_copy+0x36>
    627a:	8962      	ldrh	r2, [r4, #10]
    627c:	8923      	ldrh	r3, [r4, #8]
    627e:	429a      	cmp	r2, r3
    6280:	d028      	beq.n	62d4 <pbuf_copy+0x88>
			/* don't copy more than one packet! */
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_from->next == NULL), return ERR_VAL;);
		}
		if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
    6282:	b11d      	cbz	r5, 628c <pbuf_copy+0x40>
    6284:	896a      	ldrh	r2, [r5, #10]
    6286:	892b      	ldrh	r3, [r5, #8]
    6288:	429a      	cmp	r2, r3
    628a:	d027      	beq.n	62dc <pbuf_copy+0x90>
			/* don't copy more than one packet! */
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_to->next == NULL), return ERR_VAL;);
		}
	} while (p_from);
    628c:	b354      	cbz	r4, 62e4 <pbuf_copy+0x98>
		if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
    628e:	896b      	ldrh	r3, [r5, #10]
    6290:	1bd8      	subs	r0, r3, r7
    6292:	8962      	ldrh	r2, [r4, #10]
    6294:	eba2 0108 	sub.w	r1, r2, r8
    6298:	4288      	cmp	r0, r1
    629a:	dbe7      	blt.n	626c <pbuf_copy+0x20>
			len = p_from->len - offset_from;
    629c:	b28e      	uxth	r6, r1
		MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    629e:	6868      	ldr	r0, [r5, #4]
    62a0:	6861      	ldr	r1, [r4, #4]
    62a2:	4632      	mov	r2, r6
    62a4:	4441      	add	r1, r8
    62a6:	4438      	add	r0, r7
    62a8:	4b10      	ldr	r3, [pc, #64]	; (62ec <pbuf_copy+0xa0>)
    62aa:	4798      	blx	r3
		offset_to += len;
    62ac:	4437      	add	r7, r6
    62ae:	b2bf      	uxth	r7, r7
		offset_from += len;
    62b0:	4446      	add	r6, r8
    62b2:	fa1f f886 	uxth.w	r8, r6
		if (offset_from >= p_from->len) {
    62b6:	8963      	ldrh	r3, [r4, #10]
    62b8:	4598      	cmp	r8, r3
    62ba:	d3da      	bcc.n	6272 <pbuf_copy+0x26>
			p_from      = p_from->next;
    62bc:	6824      	ldr	r4, [r4, #0]
			offset_from = 0;
    62be:	f04f 0800 	mov.w	r8, #0
    62c2:	e7d6      	b.n	6272 <pbuf_copy+0x26>
			p_to      = p_to->next;
    62c4:	682d      	ldr	r5, [r5, #0]
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    62c6:	b10d      	cbz	r5, 62cc <pbuf_copy+0x80>
			offset_to = 0;
    62c8:	2700      	movs	r7, #0
    62ca:	e7d5      	b.n	6278 <pbuf_copy+0x2c>
			LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    62cc:	b90c      	cbnz	r4, 62d2 <pbuf_copy+0x86>
			offset_to = 0;
    62ce:	2700      	movs	r7, #0
    62d0:	e7d2      	b.n	6278 <pbuf_copy+0x2c>
    62d2:	e7fe      	b.n	62d2 <pbuf_copy+0x86>
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_from->next == NULL), return ERR_VAL;);
    62d4:	6823      	ldr	r3, [r4, #0]
    62d6:	2b00      	cmp	r3, #0
    62d8:	d0d3      	beq.n	6282 <pbuf_copy+0x36>
    62da:	e7fe      	b.n	62da <pbuf_copy+0x8e>
			LWIP_ERROR("pbuf_copy() does not allow packet queues!\n", (p_to->next == NULL), return ERR_VAL;);
    62dc:	682b      	ldr	r3, [r5, #0]
    62de:	2b00      	cmp	r3, #0
    62e0:	d0d4      	beq.n	628c <pbuf_copy+0x40>
    62e2:	e7fe      	b.n	62e2 <pbuf_copy+0x96>
	LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
	return ERR_OK;
}
    62e4:	2000      	movs	r0, #0
    62e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62ea:	e7fe      	b.n	62ea <pbuf_copy+0x9e>
    62ec:	0000cd53 	.word	0x0000cd53

000062f0 <pbuf_copy_partial>:
	struct pbuf *p;
	u16_t        left;
	u16_t        buf_copy_len;
	u16_t        copied_total = 0;

	LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
    62f0:	b138      	cbz	r0, 6302 <pbuf_copy_partial+0x12>
{
    62f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62f6:	460f      	mov	r7, r1
    62f8:	4690      	mov	r8, r2
    62fa:	4605      	mov	r5, r0
	LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
    62fc:	b111      	cbz	r1, 6304 <pbuf_copy_partial+0x14>
    62fe:	2600      	movs	r6, #0
    6300:	e015      	b.n	632e <pbuf_copy_partial+0x3e>
    6302:	e7fe      	b.n	6302 <pbuf_copy_partial+0x12>
    6304:	e7fe      	b.n	6304 <pbuf_copy_partial+0x14>
		if ((offset != 0) && (offset >= p->len)) {
			/* don't copy from this buffer -> on to the next */
			offset -= p->len;
		} else {
			/* copy from this buffer. maybe only partially. */
			buf_copy_len = p->len - offset;
    6306:	896a      	ldrh	r2, [r5, #10]
    6308:	1ad2      	subs	r2, r2, r3
    630a:	b294      	uxth	r4, r2
			if (buf_copy_len > len)
    630c:	45a0      	cmp	r8, r4
    630e:	d200      	bcs.n	6312 <pbuf_copy_partial+0x22>
				buf_copy_len = len;
    6310:	4644      	mov	r4, r8
			/* copy the necessary parts of the buffer */
			MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
    6312:	6869      	ldr	r1, [r5, #4]
    6314:	4622      	mov	r2, r4
    6316:	4419      	add	r1, r3
    6318:	19b8      	adds	r0, r7, r6
    631a:	4b0c      	ldr	r3, [pc, #48]	; (634c <pbuf_copy_partial+0x5c>)
    631c:	4798      	blx	r3
			copied_total += buf_copy_len;
    631e:	4426      	add	r6, r4
    6320:	b2b6      	uxth	r6, r6
			left += buf_copy_len;
			len -= buf_copy_len;
    6322:	eba8 0404 	sub.w	r4, r8, r4
    6326:	fa1f f884 	uxth.w	r8, r4
			offset = 0;
    632a:	2300      	movs	r3, #0
	for (p = buf; len != 0 && p != NULL; p = p->next) {
    632c:	682d      	ldr	r5, [r5, #0]
    632e:	f1b8 0f00 	cmp.w	r8, #0
    6332:	d008      	beq.n	6346 <pbuf_copy_partial+0x56>
    6334:	b13d      	cbz	r5, 6346 <pbuf_copy_partial+0x56>
		if ((offset != 0) && (offset >= p->len)) {
    6336:	2b00      	cmp	r3, #0
    6338:	d0e5      	beq.n	6306 <pbuf_copy_partial+0x16>
    633a:	896a      	ldrh	r2, [r5, #10]
    633c:	4293      	cmp	r3, r2
    633e:	d3e2      	bcc.n	6306 <pbuf_copy_partial+0x16>
			offset -= p->len;
    6340:	1a9b      	subs	r3, r3, r2
    6342:	b29b      	uxth	r3, r3
    6344:	e7f2      	b.n	632c <pbuf_copy_partial+0x3c>
		}
	}
	return copied_total;
}
    6346:	4630      	mov	r0, r6
    6348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    634c:	0000cd53 	.word	0x0000cd53

00006350 <tcp_new_port>:
 * Allocate a new local TCP port.
 *
 * @return a new (free) local TCP port number
 */
static u16_t tcp_new_port(void)
{
    6350:	b410      	push	{r4}
	u8_t            i;
	u16_t           n = 0;
    6352:	2200      	movs	r2, #0
	struct tcp_pcb *pcb;

again:
	if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    6354:	4914      	ldr	r1, [pc, #80]	; (63a8 <tcp_new_port+0x58>)
    6356:	880b      	ldrh	r3, [r1, #0]
    6358:	1c58      	adds	r0, r3, #1
    635a:	8008      	strh	r0, [r1, #0]
    635c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6360:	428b      	cmp	r3, r1
    6362:	d103      	bne.n	636c <tcp_new_port+0x1c>
		tcp_port = TCP_LOCAL_PORT_RANGE_START;
    6364:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    6368:	4b0f      	ldr	r3, [pc, #60]	; (63a8 <tcp_new_port+0x58>)
    636a:	8019      	strh	r1, [r3, #0]
	}
	/* Check all PCB lists. */
	for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    636c:	2300      	movs	r3, #0
    636e:	2b03      	cmp	r3, #3
    6370:	d904      	bls.n	637c <tcp_new_port+0x2c>
				}
				goto again;
			}
		}
	}
	return tcp_port;
    6372:	4b0d      	ldr	r3, [pc, #52]	; (63a8 <tcp_new_port+0x58>)
    6374:	8818      	ldrh	r0, [r3, #0]
}
    6376:	f85d 4b04 	ldr.w	r4, [sp], #4
    637a:	4770      	bx	lr
		for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    637c:	490b      	ldr	r1, [pc, #44]	; (63ac <tcp_new_port+0x5c>)
    637e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    6382:	6809      	ldr	r1, [r1, #0]
    6384:	b911      	cbnz	r1, 638c <tcp_new_port+0x3c>
	for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    6386:	3301      	adds	r3, #1
    6388:	b2db      	uxtb	r3, r3
    638a:	e7f0      	b.n	636e <tcp_new_port+0x1e>
			if (pcb->local_port == tcp_port) {
    638c:	8b4c      	ldrh	r4, [r1, #26]
    638e:	4806      	ldr	r0, [pc, #24]	; (63a8 <tcp_new_port+0x58>)
    6390:	8800      	ldrh	r0, [r0, #0]
    6392:	4284      	cmp	r4, r0
    6394:	d106      	bne.n	63a4 <tcp_new_port+0x54>
				if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
    6396:	3201      	adds	r2, #1
    6398:	b292      	uxth	r2, r2
    639a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    639e:	d3d9      	bcc.n	6354 <tcp_new_port+0x4>
					return 0;
    63a0:	2000      	movs	r0, #0
    63a2:	e7e8      	b.n	6376 <tcp_new_port+0x26>
		for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
    63a4:	68c9      	ldr	r1, [r1, #12]
    63a6:	e7ed      	b.n	6384 <tcp_new_port+0x34>
    63a8:	20000040 	.word	0x20000040
    63ac:	0000e490 	.word	0x0000e490

000063b0 <tcp_init>:
{
    63b0:	4770      	bx	lr
	...

000063b4 <tcp_bind>:
	LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
    63b4:	7e03      	ldrb	r3, [r0, #24]
    63b6:	b103      	cbz	r3, 63ba <tcp_bind+0x6>
    63b8:	e7fe      	b.n	63b8 <tcp_bind+0x4>
{
    63ba:	b570      	push	{r4, r5, r6, lr}
    63bc:	4604      	mov	r4, r0
    63be:	460d      	mov	r5, r1
	if (port == 0) {
    63c0:	b13a      	cbz	r2, 63d2 <tcp_bind+0x1e>
	for (i = 0; i < max_pcb_list; i++) {
    63c2:	2100      	movs	r1, #0
    63c4:	2903      	cmp	r1, #3
    63c6:	dc1e      	bgt.n	6406 <tcp_bind+0x52>
		for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    63c8:	4b1b      	ldr	r3, [pc, #108]	; (6438 <tcp_bind+0x84>)
    63ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    63ce:	681b      	ldr	r3, [r3, #0]
    63d0:	e008      	b.n	63e4 <tcp_bind+0x30>
		port = tcp_new_port();
    63d2:	4b1a      	ldr	r3, [pc, #104]	; (643c <tcp_bind+0x88>)
    63d4:	4798      	blx	r3
		if (port == 0) {
    63d6:	4602      	mov	r2, r0
    63d8:	2800      	cmp	r0, #0
    63da:	d1f2      	bne.n	63c2 <tcp_bind+0xe>
			return ERR_BUF;
    63dc:	f06f 0001 	mvn.w	r0, #1
    63e0:	bd70      	pop	{r4, r5, r6, pc}
		for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
    63e2:	68db      	ldr	r3, [r3, #12]
    63e4:	b16b      	cbz	r3, 6402 <tcp_bind+0x4e>
			if (cpcb->local_port == port) {
    63e6:	8b58      	ldrh	r0, [r3, #26]
    63e8:	4282      	cmp	r2, r0
    63ea:	d1fa      	bne.n	63e2 <tcp_bind+0x2e>
					if (ip_addr_isany(&(cpcb->local_ip)) || ip_addr_isany(ipaddr)
    63ec:	b1c3      	cbz	r3, 6420 <tcp_bind+0x6c>
    63ee:	681e      	ldr	r6, [r3, #0]
    63f0:	b1ce      	cbz	r6, 6426 <tcp_bind+0x72>
    63f2:	b1dd      	cbz	r5, 642c <tcp_bind+0x78>
    63f4:	6828      	ldr	r0, [r5, #0]
    63f6:	b1e0      	cbz	r0, 6432 <tcp_bind+0x7e>
					    || ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
    63f8:	4286      	cmp	r6, r0
    63fa:	d1f2      	bne.n	63e2 <tcp_bind+0x2e>
						return ERR_USE;
    63fc:	f06f 0007 	mvn.w	r0, #7
}
    6400:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < max_pcb_list; i++) {
    6402:	3101      	adds	r1, #1
    6404:	e7de      	b.n	63c4 <tcp_bind+0x10>
	if (!ip_addr_isany(ipaddr)) {
    6406:	b115      	cbz	r5, 640e <tcp_bind+0x5a>
    6408:	682b      	ldr	r3, [r5, #0]
    640a:	b103      	cbz	r3, 640e <tcp_bind+0x5a>
		pcb->local_ip = *ipaddr;
    640c:	6023      	str	r3, [r4, #0]
	pcb->local_port = port;
    640e:	8362      	strh	r2, [r4, #26]
	TCP_REG(&tcp_bound_pcbs, pcb);
    6410:	4b0b      	ldr	r3, [pc, #44]	; (6440 <tcp_bind+0x8c>)
    6412:	681a      	ldr	r2, [r3, #0]
    6414:	60e2      	str	r2, [r4, #12]
    6416:	601c      	str	r4, [r3, #0]
    6418:	4b0a      	ldr	r3, [pc, #40]	; (6444 <tcp_bind+0x90>)
    641a:	4798      	blx	r3
	return ERR_OK;
    641c:	2000      	movs	r0, #0
    641e:	bd70      	pop	{r4, r5, r6, pc}
						return ERR_USE;
    6420:	f06f 0007 	mvn.w	r0, #7
    6424:	bd70      	pop	{r4, r5, r6, pc}
    6426:	f06f 0007 	mvn.w	r0, #7
    642a:	bd70      	pop	{r4, r5, r6, pc}
    642c:	f06f 0007 	mvn.w	r0, #7
    6430:	bd70      	pop	{r4, r5, r6, pc}
    6432:	f06f 0007 	mvn.w	r0, #7
    6436:	bd70      	pop	{r4, r5, r6, pc}
    6438:	0000e490 	.word	0x0000e490
    643c:	00006351 	.word	0x00006351
    6440:	20016200 	.word	0x20016200
    6444:	00008f65 	.word	0x00008f65

00006448 <tcp_update_rcv_ann_wnd>:
{
    6448:	b470      	push	{r4, r5, r6}
	u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
    644a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    644c:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    644e:	192a      	adds	r2, r5, r4
	if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
    6450:	6b01      	ldr	r1, [r0, #48]	; 0x30
    6452:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    6454:	f640 3668 	movw	r6, #2920	; 0xb68
    6458:	42b3      	cmp	r3, r6
    645a:	d900      	bls.n	645e <tcp_update_rcv_ann_wnd+0x16>
    645c:	4633      	mov	r3, r6
    645e:	440b      	add	r3, r1
    6460:	1ad3      	subs	r3, r2, r3
    6462:	2b00      	cmp	r3, #0
    6464:	db03      	blt.n	646e <tcp_update_rcv_ann_wnd+0x26>
		pcb->rcv_ann_wnd = pcb->rcv_wnd;
    6466:	85c4      	strh	r4, [r0, #46]	; 0x2e
		return new_right_edge - pcb->rcv_ann_right_edge;
    6468:	1a50      	subs	r0, r2, r1
}
    646a:	bc70      	pop	{r4, r5, r6}
    646c:	4770      	bx	lr
		if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
    646e:	1a6b      	subs	r3, r5, r1
    6470:	2b00      	cmp	r3, #0
    6472:	dd03      	ble.n	647c <tcp_update_rcv_ann_wnd+0x34>
			pcb->rcv_ann_wnd = 0;
    6474:	2200      	movs	r2, #0
    6476:	85c2      	strh	r2, [r0, #46]	; 0x2e
		return 0;
    6478:	4610      	mov	r0, r2
    647a:	e7f6      	b.n	646a <tcp_update_rcv_ann_wnd+0x22>
			u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
    647c:	1b49      	subs	r1, r1, r5
			pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
    647e:	85c1      	strh	r1, [r0, #46]	; 0x2e
		return 0;
    6480:	2000      	movs	r0, #0
    6482:	e7f2      	b.n	646a <tcp_update_rcv_ann_wnd+0x22>

00006484 <tcp_recved>:
{
    6484:	b510      	push	{r4, lr}
    6486:	4604      	mov	r4, r0
	pcb->rcv_wnd += len;
    6488:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
    648a:	4419      	add	r1, r3
    648c:	b289      	uxth	r1, r1
    648e:	8581      	strh	r1, [r0, #44]	; 0x2c
	if (pcb->rcv_wnd > TCP_WND) {
    6490:	f241 63d0 	movw	r3, #5840	; 0x16d0
    6494:	4299      	cmp	r1, r3
    6496:	d900      	bls.n	649a <tcp_recved+0x16>
		pcb->rcv_wnd = TCP_WND;
    6498:	8583      	strh	r3, [r0, #44]	; 0x2c
	wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
    649a:	4620      	mov	r0, r4
    649c:	4b07      	ldr	r3, [pc, #28]	; (64bc <tcp_recved+0x38>)
    649e:	4798      	blx	r3
	if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    64a0:	f240 53b3 	movw	r3, #1459	; 0x5b3
    64a4:	4298      	cmp	r0, r3
    64a6:	dc00      	bgt.n	64aa <tcp_recved+0x26>
    64a8:	bd10      	pop	{r4, pc}
		tcp_ack_now(pcb);
    64aa:	7fa3      	ldrb	r3, [r4, #30]
    64ac:	f043 0302 	orr.w	r3, r3, #2
    64b0:	77a3      	strb	r3, [r4, #30]
		tcp_output(pcb);
    64b2:	4620      	mov	r0, r4
    64b4:	4b02      	ldr	r3, [pc, #8]	; (64c0 <tcp_recved+0x3c>)
    64b6:	4798      	blx	r3
}
    64b8:	e7f6      	b.n	64a8 <tcp_recved+0x24>
    64ba:	bf00      	nop
    64bc:	00006449 	.word	0x00006449
    64c0:	00008a51 	.word	0x00008a51

000064c4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void tcp_seg_free(struct tcp_seg *seg)
{
	if (seg != NULL) {
    64c4:	b150      	cbz	r0, 64dc <tcp_seg_free+0x18>
{
    64c6:	b510      	push	{r4, lr}
    64c8:	4604      	mov	r4, r0
		if (seg->p != NULL) {
    64ca:	6840      	ldr	r0, [r0, #4]
    64cc:	b108      	cbz	r0, 64d2 <tcp_seg_free+0xe>
			pbuf_free(seg->p);
    64ce:	4b04      	ldr	r3, [pc, #16]	; (64e0 <tcp_seg_free+0x1c>)
    64d0:	4798      	blx	r3
#if TCP_DEBUG
			seg->p = NULL;
#endif /* TCP_DEBUG */
		}
		memp_free(MEMP_TCP_SEG, seg);
    64d2:	4621      	mov	r1, r4
    64d4:	2003      	movs	r0, #3
    64d6:	4b03      	ldr	r3, [pc, #12]	; (64e4 <tcp_seg_free+0x20>)
    64d8:	4798      	blx	r3
    64da:	bd10      	pop	{r4, pc}
    64dc:	4770      	bx	lr
    64de:	bf00      	nop
    64e0:	00006009 	.word	0x00006009
    64e4:	00005d31 	.word	0x00005d31

000064e8 <tcp_segs_free>:
	while (seg != NULL) {
    64e8:	b138      	cbz	r0, 64fa <tcp_segs_free+0x12>
{
    64ea:	b510      	push	{r4, lr}
		struct tcp_seg *next = seg->next;
    64ec:	6804      	ldr	r4, [r0, #0]
		tcp_seg_free(seg);
    64ee:	4b03      	ldr	r3, [pc, #12]	; (64fc <tcp_segs_free+0x14>)
    64f0:	4798      	blx	r3
		seg = next;
    64f2:	4620      	mov	r0, r4
	while (seg != NULL) {
    64f4:	2c00      	cmp	r4, #0
    64f6:	d1f9      	bne.n	64ec <tcp_segs_free+0x4>
}
    64f8:	bd10      	pop	{r4, pc}
    64fa:	4770      	bx	lr
    64fc:	000064c5 	.word	0x000064c5

00006500 <tcp_seg_copy>:
 *
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *tcp_seg_copy(struct tcp_seg *seg)
{
    6500:	b538      	push	{r3, r4, r5, lr}
    6502:	4605      	mov	r5, r0
	struct tcp_seg *cseg;

	cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
    6504:	2003      	movs	r0, #3
    6506:	4b08      	ldr	r3, [pc, #32]	; (6528 <tcp_seg_copy+0x28>)
    6508:	4798      	blx	r3
	if (cseg == NULL) {
    650a:	4604      	mov	r4, r0
    650c:	b150      	cbz	r0, 6524 <tcp_seg_copy+0x24>
		return NULL;
	}
	SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
    650e:	6828      	ldr	r0, [r5, #0]
    6510:	6869      	ldr	r1, [r5, #4]
    6512:	68aa      	ldr	r2, [r5, #8]
    6514:	68eb      	ldr	r3, [r5, #12]
    6516:	6020      	str	r0, [r4, #0]
    6518:	6061      	str	r1, [r4, #4]
    651a:	60a2      	str	r2, [r4, #8]
    651c:	60e3      	str	r3, [r4, #12]
	pbuf_ref(cseg->p);
    651e:	6860      	ldr	r0, [r4, #4]
    6520:	4b02      	ldr	r3, [pc, #8]	; (652c <tcp_seg_copy+0x2c>)
    6522:	4798      	blx	r3
	return cseg;
}
    6524:	4620      	mov	r0, r4
    6526:	bd38      	pop	{r3, r4, r5, pc}
    6528:	00005d09 	.word	0x00005d09
    652c:	000061ff 	.word	0x000061ff

00006530 <tcp_arg>:
 */
void tcp_arg(struct tcp_pcb *pcb, void *arg)
{
	/* This function is allowed to be called for both listen pcbs and
	   connection pcbs. */
	pcb->callback_arg = arg;
    6530:	6101      	str	r1, [r0, #16]
    6532:	4770      	bx	lr

00006534 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
	LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
	pcb->recv = recv;
    6534:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    6538:	4770      	bx	lr

0000653a <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
	LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
	pcb->sent = sent;
    653a:	67c1      	str	r1, [r0, #124]	; 0x7c
    653c:	4770      	bx	lr

0000653e <tcp_err>:
 *        has occured on the connection
 */
void tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
	LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
	pcb->errf = err;
    653e:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
    6542:	4770      	bx	lr

00006544 <tcp_accept>:
 */
void tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
	/* This function is allowed to be called for both listen pcbs and
	   connection pcbs. */
	pcb->accept = accept;
    6544:	6141      	str	r1, [r0, #20]
    6546:	4770      	bx	lr

00006548 <tcp_poll>:
 */
void tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
	LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
	pcb->poll = poll;
    6548:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
#else  /* LWIP_CALLBACK_API */
	LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
	pcb->pollinterval = interval;
    654c:	f880 2020 	strb.w	r2, [r0, #32]
    6550:	4770      	bx	lr
	...

00006554 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void tcp_pcb_purge(struct tcp_pcb *pcb)
{
	if (pcb->state != CLOSED && pcb->state != TIME_WAIT && pcb->state != LISTEN) {
    6554:	7e03      	ldrb	r3, [r0, #24]
    6556:	b1e3      	cbz	r3, 6592 <tcp_pcb_purge+0x3e>
    6558:	2b0a      	cmp	r3, #10
    655a:	d01a      	beq.n	6592 <tcp_pcb_purge+0x3e>
    655c:	2b01      	cmp	r3, #1
    655e:	d018      	beq.n	6592 <tcp_pcb_purge+0x3e>
{
    6560:	b570      	push	{r4, r5, r6, lr}
    6562:	4604      	mov	r4, r0
				}
			}
		}
#endif /* TCP_LISTEN_BACKLOG */

		if (pcb->refused_data != NULL) {
    6564:	6f80      	ldr	r0, [r0, #120]	; 0x78
    6566:	b118      	cbz	r0, 6570 <tcp_pcb_purge+0x1c>
			LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
			pbuf_free(pcb->refused_data);
    6568:	4b0a      	ldr	r3, [pc, #40]	; (6594 <tcp_pcb_purge+0x40>)
    656a:	4798      	blx	r3
			pcb->refused_data = NULL;
    656c:	2300      	movs	r3, #0
    656e:	67a3      	str	r3, [r4, #120]	; 0x78
		}
#if TCP_QUEUE_OOSEQ
		if (pcb->ooseq != NULL) {
			LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
		}
		tcp_segs_free(pcb->ooseq);
    6570:	6f60      	ldr	r0, [r4, #116]	; 0x74
    6572:	4e09      	ldr	r6, [pc, #36]	; (6598 <tcp_pcb_purge+0x44>)
    6574:	47b0      	blx	r6
		pcb->ooseq = NULL;
    6576:	2500      	movs	r5, #0
    6578:	6765      	str	r5, [r4, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

		/* Stop the retransmission timer as it will expect data on unacked
		   queue if it fires */
		pcb->rtime = -1;
    657a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    657e:	86a3      	strh	r3, [r4, #52]	; 0x34

		tcp_segs_free(pcb->unsent);
    6580:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6582:	47b0      	blx	r6
		tcp_segs_free(pcb->unacked);
    6584:	6f20      	ldr	r0, [r4, #112]	; 0x70
    6586:	47b0      	blx	r6
		pcb->unacked = pcb->unsent = NULL;
    6588:	66e5      	str	r5, [r4, #108]	; 0x6c
    658a:	6725      	str	r5, [r4, #112]	; 0x70
#if TCP_OVERSIZE
		pcb->unsent_oversize = 0;
    658c:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    6590:	bd70      	pop	{r4, r5, r6, pc}
    6592:	4770      	bx	lr
    6594:	00006009 	.word	0x00006009
    6598:	000064e9 	.word	0x000064e9

0000659c <tcp_slowtmr>:
{
    659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65a0:	b082      	sub	sp, #8
	++tcp_ticks;
    65a2:	4aa2      	ldr	r2, [pc, #648]	; (682c <tcp_slowtmr+0x290>)
    65a4:	6813      	ldr	r3, [r2, #0]
    65a6:	3301      	adds	r3, #1
    65a8:	6013      	str	r3, [r2, #0]
	++tcp_timer_ctr;
    65aa:	4aa1      	ldr	r2, [pc, #644]	; (6830 <tcp_slowtmr+0x294>)
    65ac:	7813      	ldrb	r3, [r2, #0]
    65ae:	3301      	adds	r3, #1
    65b0:	7013      	strb	r3, [r2, #0]
	pcb  = tcp_active_pcbs;
    65b2:	4ba0      	ldr	r3, [pc, #640]	; (6834 <tcp_slowtmr+0x298>)
    65b4:	681c      	ldr	r4, [r3, #0]
	prev = NULL;
    65b6:	2600      	movs	r6, #0
	while (pcb != NULL) {
    65b8:	e000      	b.n	65bc <tcp_slowtmr+0x20>
			pcb = pcb->next;
    65ba:	68e4      	ldr	r4, [r4, #12]
	while (pcb != NULL) {
    65bc:	2c00      	cmp	r4, #0
    65be:	f000 8131 	beq.w	6824 <tcp_slowtmr+0x288>
		if (pcb->last_timer == tcp_timer_ctr) {
    65c2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    65c6:	4b9a      	ldr	r3, [pc, #616]	; (6830 <tcp_slowtmr+0x294>)
    65c8:	781b      	ldrb	r3, [r3, #0]
    65ca:	429a      	cmp	r2, r3
    65cc:	d0f5      	beq.n	65ba <tcp_slowtmr+0x1e>
		pcb->last_timer = tcp_timer_ctr;
    65ce:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    65d2:	7e23      	ldrb	r3, [r4, #24]
    65d4:	2b02      	cmp	r3, #2
    65d6:	d01f      	beq.n	6618 <tcp_slowtmr+0x7c>
		} else if (pcb->nrtx == TCP_MAXRTX) {
    65d8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    65dc:	2a0c      	cmp	r2, #12
    65de:	d056      	beq.n	668e <tcp_slowtmr+0xf2>
			if (pcb->persist_backoff > 0) {
    65e0:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
    65e4:	b1f5      	cbz	r5, 6624 <tcp_slowtmr+0x88>
				pcb->persist_cnt++;
    65e6:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
    65ea:	3301      	adds	r3, #1
    65ec:	b2db      	uxtb	r3, r3
    65ee:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
				if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff - 1]) {
    65f2:	1e69      	subs	r1, r5, #1
    65f4:	4a90      	ldr	r2, [pc, #576]	; (6838 <tcp_slowtmr+0x29c>)
    65f6:	440a      	add	r2, r1
    65f8:	7c12      	ldrb	r2, [r2, #16]
    65fa:	4293      	cmp	r3, r2
    65fc:	d355      	bcc.n	66aa <tcp_slowtmr+0x10e>
					pcb->persist_cnt = 0;
    65fe:	2300      	movs	r3, #0
    6600:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
					if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
    6604:	2d06      	cmp	r5, #6
    6606:	d802      	bhi.n	660e <tcp_slowtmr+0x72>
						pcb->persist_backoff++;
    6608:	3501      	adds	r5, #1
    660a:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
					tcp_zero_window_probe(pcb);
    660e:	4620      	mov	r0, r4
    6610:	4b8a      	ldr	r3, [pc, #552]	; (683c <tcp_slowtmr+0x2a0>)
    6612:	4798      	blx	r3
		pcb_remove = 0;
    6614:	2500      	movs	r5, #0
    6616:	e03b      	b.n	6690 <tcp_slowtmr+0xf4>
		if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
    6618:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    661c:	2a06      	cmp	r2, #6
    661e:	d1db      	bne.n	65d8 <tcp_slowtmr+0x3c>
			++pcb_remove;
    6620:	2501      	movs	r5, #1
    6622:	e035      	b.n	6690 <tcp_slowtmr+0xf4>
				if (pcb->rtime >= 0) {
    6624:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    6628:	2900      	cmp	r1, #0
    662a:	db01      	blt.n	6630 <tcp_slowtmr+0x94>
					++pcb->rtime;
    662c:	3101      	adds	r1, #1
    662e:	86a1      	strh	r1, [r4, #52]	; 0x34
				if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
    6630:	6f21      	ldr	r1, [r4, #112]	; 0x70
    6632:	b369      	cbz	r1, 6690 <tcp_slowtmr+0xf4>
    6634:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
    6638:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
    663c:	4288      	cmp	r0, r1
    663e:	db27      	blt.n	6690 <tcp_slowtmr+0xf4>
					if (pcb->state != SYN_SENT) {
    6640:	2b02      	cmp	r3, #2
    6642:	d00b      	beq.n	665c <tcp_slowtmr+0xc0>
						pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
    6644:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    6648:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
    664c:	eb03 03e1 	add.w	r3, r3, r1, asr #3
    6650:	4979      	ldr	r1, [pc, #484]	; (6838 <tcp_slowtmr+0x29c>)
    6652:	440a      	add	r2, r1
    6654:	7e12      	ldrb	r2, [r2, #24]
    6656:	4093      	lsls	r3, r2
    6658:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
					pcb->rtime = 0;
    665c:	2300      	movs	r3, #0
    665e:	86a3      	strh	r3, [r4, #52]	; 0x34
					eff_wnd       = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
    6660:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    6664:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    6668:	4293      	cmp	r3, r2
    666a:	bf28      	it	cs
    666c:	4613      	movcs	r3, r2
					pcb->ssthresh = eff_wnd >> 1;
    666e:	085b      	lsrs	r3, r3, #1
    6670:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
					if (pcb->ssthresh < (pcb->mss << 1)) {
    6674:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    6676:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    667a:	da02      	bge.n	6682 <tcp_slowtmr+0xe6>
						pcb->ssthresh = (pcb->mss << 1);
    667c:	0053      	lsls	r3, r2, #1
    667e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
					pcb->cwnd = pcb->mss;
    6682:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
					tcp_rexmit_rto(pcb);
    6686:	4620      	mov	r0, r4
    6688:	4b6d      	ldr	r3, [pc, #436]	; (6840 <tcp_slowtmr+0x2a4>)
    668a:	4798      	blx	r3
    668c:	e000      	b.n	6690 <tcp_slowtmr+0xf4>
			++pcb_remove;
    668e:	2501      	movs	r5, #1
		if (pcb->state == FIN_WAIT_2) {
    6690:	7e23      	ldrb	r3, [r4, #24]
    6692:	2b06      	cmp	r3, #6
    6694:	d00b      	beq.n	66ae <tcp_slowtmr+0x112>
		if (ip_get_option(pcb, SOF_KEEPALIVE) && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
    6696:	7a22      	ldrb	r2, [r4, #8]
    6698:	f012 0f08 	tst.w	r2, #8
    669c:	d03f      	beq.n	671e <tcp_slowtmr+0x182>
    669e:	2b04      	cmp	r3, #4
    66a0:	d012      	beq.n	66c8 <tcp_slowtmr+0x12c>
    66a2:	2b07      	cmp	r3, #7
    66a4:	d010      	beq.n	66c8 <tcp_slowtmr+0x12c>
		pcb_reset  = 0;
    66a6:	2700      	movs	r7, #0
    66a8:	e03a      	b.n	6720 <tcp_slowtmr+0x184>
		pcb_remove = 0;
    66aa:	2500      	movs	r5, #0
    66ac:	e7f0      	b.n	6690 <tcp_slowtmr+0xf4>
			if (pcb->flags & TF_RXCLOSED) {
    66ae:	7fa2      	ldrb	r2, [r4, #30]
    66b0:	f012 0f10 	tst.w	r2, #16
    66b4:	d0ef      	beq.n	6696 <tcp_slowtmr+0xfa>
				if ((u32_t)(tcp_ticks - pcb->tmr) > TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
    66b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    66b8:	4a5c      	ldr	r2, [pc, #368]	; (682c <tcp_slowtmr+0x290>)
    66ba:	6812      	ldr	r2, [r2, #0]
    66bc:	1a52      	subs	r2, r2, r1
    66be:	2a28      	cmp	r2, #40	; 0x28
    66c0:	d9e9      	bls.n	6696 <tcp_slowtmr+0xfa>
					++pcb_remove;
    66c2:	3501      	adds	r5, #1
    66c4:	b2ed      	uxtb	r5, r5
    66c6:	e7e6      	b.n	6696 <tcp_slowtmr+0xfa>
			if ((u32_t)(tcp_ticks - pcb->tmr) > (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
    66c8:	4b58      	ldr	r3, [pc, #352]	; (682c <tcp_slowtmr+0x290>)
    66ca:	681a      	ldr	r2, [r3, #0]
    66cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    66ce:	1ad2      	subs	r2, r2, r3
    66d0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    66d4:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
    66d8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
    66dc:	4859      	ldr	r0, [pc, #356]	; (6844 <tcp_slowtmr+0x2a8>)
    66de:	fba0 0303 	umull	r0, r3, r0, r3
    66e2:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    66e6:	d903      	bls.n	66f0 <tcp_slowtmr+0x154>
				++pcb_remove;
    66e8:	3501      	adds	r5, #1
    66ea:	b2ed      	uxtb	r5, r5
				++pcb_reset;
    66ec:	2701      	movs	r7, #1
    66ee:	e017      	b.n	6720 <tcp_slowtmr+0x184>
			           > (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb)) / TCP_SLOW_INTERVAL) {
    66f0:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    66f4:	4854      	ldr	r0, [pc, #336]	; (6848 <tcp_slowtmr+0x2ac>)
    66f6:	fb00 1303 	mla	r3, r0, r3, r1
    66fa:	4952      	ldr	r1, [pc, #328]	; (6844 <tcp_slowtmr+0x2a8>)
    66fc:	fba1 1303 	umull	r1, r3, r1, r3
			} else if ((u32_t)(tcp_ticks - pcb->tmr)
    6700:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
    6704:	d801      	bhi.n	670a <tcp_slowtmr+0x16e>
		pcb_reset  = 0;
    6706:	2700      	movs	r7, #0
    6708:	e00a      	b.n	6720 <tcp_slowtmr+0x184>
				tcp_keepalive(pcb);
    670a:	4620      	mov	r0, r4
    670c:	4b4f      	ldr	r3, [pc, #316]	; (684c <tcp_slowtmr+0x2b0>)
    670e:	4798      	blx	r3
				pcb->keep_cnt_sent++;
    6710:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
    6714:	3301      	adds	r3, #1
    6716:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		pcb_reset  = 0;
    671a:	2700      	movs	r7, #0
    671c:	e000      	b.n	6720 <tcp_slowtmr+0x184>
    671e:	2700      	movs	r7, #0
		if (pcb->ooseq != NULL && (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
    6720:	6f60      	ldr	r0, [r4, #116]	; 0x74
    6722:	b150      	cbz	r0, 673a <tcp_slowtmr+0x19e>
    6724:	4b41      	ldr	r3, [pc, #260]	; (682c <tcp_slowtmr+0x290>)
    6726:	681a      	ldr	r2, [r3, #0]
    6728:	6a63      	ldr	r3, [r4, #36]	; 0x24
    672a:	1ad2      	subs	r2, r2, r3
    672c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    6730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6734:	0059      	lsls	r1, r3, #1
    6736:	428a      	cmp	r2, r1
    6738:	d224      	bcs.n	6784 <tcp_slowtmr+0x1e8>
		if (pcb->state == SYN_RCVD) {
    673a:	7e23      	ldrb	r3, [r4, #24]
    673c:	2b03      	cmp	r3, #3
    673e:	d026      	beq.n	678e <tcp_slowtmr+0x1f2>
		if (pcb->state == LAST_ACK) {
    6740:	2b09      	cmp	r3, #9
    6742:	d02d      	beq.n	67a0 <tcp_slowtmr+0x204>
		if (pcb_remove) {
    6744:	2d00      	cmp	r5, #0
    6746:	d134      	bne.n	67b2 <tcp_slowtmr+0x216>
			pcb  = pcb->next;
    6748:	68e5      	ldr	r5, [r4, #12]
			++prev->polltmr;
    674a:	7fe3      	ldrb	r3, [r4, #31]
    674c:	3301      	adds	r3, #1
    674e:	b2db      	uxtb	r3, r3
    6750:	77e3      	strb	r3, [r4, #31]
			if (prev->polltmr >= prev->pollinterval) {
    6752:	f894 2020 	ldrb.w	r2, [r4, #32]
    6756:	4293      	cmp	r3, r2
    6758:	d361      	bcc.n	681e <tcp_slowtmr+0x282>
				prev->polltmr = 0;
    675a:	2300      	movs	r3, #0
    675c:	77e3      	strb	r3, [r4, #31]
				tcp_active_pcbs_changed = 0;
    675e:	4a3c      	ldr	r2, [pc, #240]	; (6850 <tcp_slowtmr+0x2b4>)
    6760:	7013      	strb	r3, [r2, #0]
				TCP_EVENT_POLL(prev, err);
    6762:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    6766:	2b00      	cmp	r3, #0
    6768:	d051      	beq.n	680e <tcp_slowtmr+0x272>
    676a:	4621      	mov	r1, r4
    676c:	6920      	ldr	r0, [r4, #16]
    676e:	4798      	blx	r3
				if (tcp_active_pcbs_changed) {
    6770:	4b37      	ldr	r3, [pc, #220]	; (6850 <tcp_slowtmr+0x2b4>)
    6772:	781b      	ldrb	r3, [r3, #0]
    6774:	2b00      	cmp	r3, #0
    6776:	f47f af1c 	bne.w	65b2 <tcp_slowtmr+0x16>
				if (err == ERR_OK) {
    677a:	2800      	cmp	r0, #0
    677c:	d049      	beq.n	6812 <tcp_slowtmr+0x276>
			prev = pcb;
    677e:	4626      	mov	r6, r4
			pcb  = pcb->next;
    6780:	462c      	mov	r4, r5
    6782:	e71b      	b.n	65bc <tcp_slowtmr+0x20>
			tcp_segs_free(pcb->ooseq);
    6784:	4b33      	ldr	r3, [pc, #204]	; (6854 <tcp_slowtmr+0x2b8>)
    6786:	4798      	blx	r3
			pcb->ooseq = NULL;
    6788:	2300      	movs	r3, #0
    678a:	6763      	str	r3, [r4, #116]	; 0x74
    678c:	e7d5      	b.n	673a <tcp_slowtmr+0x19e>
			if ((u32_t)(tcp_ticks - pcb->tmr) > TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
    678e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6790:	4a26      	ldr	r2, [pc, #152]	; (682c <tcp_slowtmr+0x290>)
    6792:	6812      	ldr	r2, [r2, #0]
    6794:	1a52      	subs	r2, r2, r1
    6796:	2a28      	cmp	r2, #40	; 0x28
    6798:	d9d2      	bls.n	6740 <tcp_slowtmr+0x1a4>
				++pcb_remove;
    679a:	3501      	adds	r5, #1
    679c:	b2ed      	uxtb	r5, r5
    679e:	e7cf      	b.n	6740 <tcp_slowtmr+0x1a4>
			if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    67a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    67a2:	4b22      	ldr	r3, [pc, #136]	; (682c <tcp_slowtmr+0x290>)
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	1a9b      	subs	r3, r3, r2
    67a8:	2bf0      	cmp	r3, #240	; 0xf0
    67aa:	d9cb      	bls.n	6744 <tcp_slowtmr+0x1a8>
				++pcb_remove;
    67ac:	3501      	adds	r5, #1
    67ae:	b2ed      	uxtb	r5, r5
    67b0:	e7c8      	b.n	6744 <tcp_slowtmr+0x1a8>
			tcp_pcb_purge(pcb);
    67b2:	4620      	mov	r0, r4
    67b4:	4b28      	ldr	r3, [pc, #160]	; (6858 <tcp_slowtmr+0x2bc>)
    67b6:	4798      	blx	r3
			if (prev != NULL) {
    67b8:	b1d6      	cbz	r6, 67f0 <tcp_slowtmr+0x254>
				prev->next = pcb->next;
    67ba:	68e3      	ldr	r3, [r4, #12]
    67bc:	60f3      	str	r3, [r6, #12]
			if (pcb_reset) {
    67be:	b9df      	cbnz	r7, 67f8 <tcp_slowtmr+0x25c>
			err_fn  = pcb->errf;
    67c0:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
			err_arg = pcb->callback_arg;
    67c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
			pcb     = pcb->next;
    67c8:	68e7      	ldr	r7, [r4, #12]
			memp_free(MEMP_TCP_PCB, pcb2);
    67ca:	4621      	mov	r1, r4
    67cc:	2001      	movs	r0, #1
    67ce:	4b23      	ldr	r3, [pc, #140]	; (685c <tcp_slowtmr+0x2c0>)
    67d0:	4798      	blx	r3
			tcp_active_pcbs_changed = 0;
    67d2:	2200      	movs	r2, #0
    67d4:	4b1e      	ldr	r3, [pc, #120]	; (6850 <tcp_slowtmr+0x2b4>)
    67d6:	701a      	strb	r2, [r3, #0]
			TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
    67d8:	b11d      	cbz	r5, 67e2 <tcp_slowtmr+0x246>
    67da:	f06f 0109 	mvn.w	r1, #9
    67de:	4640      	mov	r0, r8
    67e0:	47a8      	blx	r5
			if (tcp_active_pcbs_changed) {
    67e2:	4b1b      	ldr	r3, [pc, #108]	; (6850 <tcp_slowtmr+0x2b4>)
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	2b00      	cmp	r3, #0
    67e8:	f47f aee3 	bne.w	65b2 <tcp_slowtmr+0x16>
			pcb     = pcb->next;
    67ec:	463c      	mov	r4, r7
    67ee:	e6e5      	b.n	65bc <tcp_slowtmr+0x20>
				tcp_active_pcbs = pcb->next;
    67f0:	68e2      	ldr	r2, [r4, #12]
    67f2:	4b10      	ldr	r3, [pc, #64]	; (6834 <tcp_slowtmr+0x298>)
    67f4:	601a      	str	r2, [r3, #0]
    67f6:	e7e2      	b.n	67be <tcp_slowtmr+0x222>
				tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    67f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    67fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
    67fc:	8ba3      	ldrh	r3, [r4, #28]
    67fe:	9301      	str	r3, [sp, #4]
    6800:	8b63      	ldrh	r3, [r4, #26]
    6802:	9300      	str	r3, [sp, #0]
    6804:	1d23      	adds	r3, r4, #4
    6806:	4622      	mov	r2, r4
    6808:	4d15      	ldr	r5, [pc, #84]	; (6860 <tcp_slowtmr+0x2c4>)
    680a:	47a8      	blx	r5
    680c:	e7d8      	b.n	67c0 <tcp_slowtmr+0x224>
				TCP_EVENT_POLL(prev, err);
    680e:	2000      	movs	r0, #0
    6810:	e7ae      	b.n	6770 <tcp_slowtmr+0x1d4>
					tcp_output(prev);
    6812:	4620      	mov	r0, r4
    6814:	4b13      	ldr	r3, [pc, #76]	; (6864 <tcp_slowtmr+0x2c8>)
    6816:	4798      	blx	r3
			prev = pcb;
    6818:	4626      	mov	r6, r4
			pcb  = pcb->next;
    681a:	462c      	mov	r4, r5
    681c:	e6ce      	b.n	65bc <tcp_slowtmr+0x20>
			prev = pcb;
    681e:	4626      	mov	r6, r4
			pcb  = pcb->next;
    6820:	462c      	mov	r4, r5
    6822:	e6cb      	b.n	65bc <tcp_slowtmr+0x20>
	pcb  = tcp_tw_pcbs;
    6824:	4b10      	ldr	r3, [pc, #64]	; (6868 <tcp_slowtmr+0x2cc>)
    6826:	681d      	ldr	r5, [r3, #0]
	while (pcb != NULL) {
    6828:	e024      	b.n	6874 <tcp_slowtmr+0x2d8>
    682a:	bf00      	nop
    682c:	200161f4 	.word	0x200161f4
    6830:	200080c1 	.word	0x200080c1
    6834:	200161f0 	.word	0x200161f0
    6838:	0000e490 	.word	0x0000e490
    683c:	00008e29 	.word	0x00008e29
    6840:	00008cd1 	.word	0x00008cd1
    6844:	10624dd3 	.word	0x10624dd3
    6848:	000124f8 	.word	0x000124f8
    684c:	00008dbd 	.word	0x00008dbd
    6850:	200161ec 	.word	0x200161ec
    6854:	000064e9 	.word	0x000064e9
    6858:	00006555 	.word	0x00006555
    685c:	00005d31 	.word	0x00005d31
    6860:	00008c2d 	.word	0x00008c2d
    6864:	00008a51 	.word	0x00008a51
    6868:	20016204 	.word	0x20016204
			++pcb_remove;
    686c:	2301      	movs	r3, #1
		if (pcb_remove) {
    686e:	b953      	cbnz	r3, 6886 <tcp_slowtmr+0x2ea>
			prev = pcb;
    6870:	462c      	mov	r4, r5
			pcb  = pcb->next;
    6872:	68ed      	ldr	r5, [r5, #12]
	while (pcb != NULL) {
    6874:	b1c5      	cbz	r5, 68a8 <tcp_slowtmr+0x30c>
		if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
    6876:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6878:	4b0d      	ldr	r3, [pc, #52]	; (68b0 <tcp_slowtmr+0x314>)
    687a:	681b      	ldr	r3, [r3, #0]
    687c:	1a9b      	subs	r3, r3, r2
    687e:	2bf0      	cmp	r3, #240	; 0xf0
    6880:	d8f4      	bhi.n	686c <tcp_slowtmr+0x2d0>
		pcb_remove = 0;
    6882:	2300      	movs	r3, #0
    6884:	e7f3      	b.n	686e <tcp_slowtmr+0x2d2>
			tcp_pcb_purge(pcb);
    6886:	4628      	mov	r0, r5
    6888:	4b0a      	ldr	r3, [pc, #40]	; (68b4 <tcp_slowtmr+0x318>)
    688a:	4798      	blx	r3
			if (prev != NULL) {
    688c:	b144      	cbz	r4, 68a0 <tcp_slowtmr+0x304>
				prev->next = pcb->next;
    688e:	68eb      	ldr	r3, [r5, #12]
    6890:	60e3      	str	r3, [r4, #12]
			pcb  = pcb->next;
    6892:	68ee      	ldr	r6, [r5, #12]
			memp_free(MEMP_TCP_PCB, pcb2);
    6894:	4629      	mov	r1, r5
    6896:	2001      	movs	r0, #1
    6898:	4b07      	ldr	r3, [pc, #28]	; (68b8 <tcp_slowtmr+0x31c>)
    689a:	4798      	blx	r3
			pcb  = pcb->next;
    689c:	4635      	mov	r5, r6
    689e:	e7e9      	b.n	6874 <tcp_slowtmr+0x2d8>
				tcp_tw_pcbs = pcb->next;
    68a0:	68ea      	ldr	r2, [r5, #12]
    68a2:	4b06      	ldr	r3, [pc, #24]	; (68bc <tcp_slowtmr+0x320>)
    68a4:	601a      	str	r2, [r3, #0]
    68a6:	e7f4      	b.n	6892 <tcp_slowtmr+0x2f6>
}
    68a8:	b002      	add	sp, #8
    68aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ae:	bf00      	nop
    68b0:	200161f4 	.word	0x200161f4
    68b4:	00006555 	.word	0x00006555
    68b8:	00005d31 	.word	0x00005d31
    68bc:	20016204 	.word	0x20016204

000068c0 <tcp_pcb_remove>:
 *
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
    68c0:	b510      	push	{r4, lr}
    68c2:	460c      	mov	r4, r1
	TCP_RMV(pcblist, pcb);
    68c4:	6803      	ldr	r3, [r0, #0]
    68c6:	428b      	cmp	r3, r1
    68c8:	d00a      	beq.n	68e0 <tcp_pcb_remove+0x20>
    68ca:	4a14      	ldr	r2, [pc, #80]	; (691c <tcp_pcb_remove+0x5c>)
    68cc:	6013      	str	r3, [r2, #0]
    68ce:	4b13      	ldr	r3, [pc, #76]	; (691c <tcp_pcb_remove+0x5c>)
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	b153      	cbz	r3, 68ea <tcp_pcb_remove+0x2a>
    68d4:	68da      	ldr	r2, [r3, #12]
    68d6:	4294      	cmp	r4, r2
    68d8:	d005      	beq.n	68e6 <tcp_pcb_remove+0x26>
    68da:	4b10      	ldr	r3, [pc, #64]	; (691c <tcp_pcb_remove+0x5c>)
    68dc:	601a      	str	r2, [r3, #0]
    68de:	e7f6      	b.n	68ce <tcp_pcb_remove+0xe>
    68e0:	68db      	ldr	r3, [r3, #12]
    68e2:	6003      	str	r3, [r0, #0]
    68e4:	e001      	b.n	68ea <tcp_pcb_remove+0x2a>
    68e6:	68e2      	ldr	r2, [r4, #12]
    68e8:	60da      	str	r2, [r3, #12]
    68ea:	2300      	movs	r3, #0
    68ec:	60e3      	str	r3, [r4, #12]

	tcp_pcb_purge(pcb);
    68ee:	4620      	mov	r0, r4
    68f0:	4b0b      	ldr	r3, [pc, #44]	; (6920 <tcp_pcb_remove+0x60>)
    68f2:	4798      	blx	r3

	/* if there is an outstanding delayed ACKs, send it */
	if (pcb->state != TIME_WAIT && pcb->state != LISTEN && pcb->flags & TF_ACK_DELAY) {
    68f4:	7e23      	ldrb	r3, [r4, #24]
    68f6:	2b0a      	cmp	r3, #10
    68f8:	d005      	beq.n	6906 <tcp_pcb_remove+0x46>
    68fa:	2b01      	cmp	r3, #1
    68fc:	d003      	beq.n	6906 <tcp_pcb_remove+0x46>
    68fe:	7fa3      	ldrb	r3, [r4, #30]
    6900:	f013 0f01 	tst.w	r3, #1
    6904:	d102      	bne.n	690c <tcp_pcb_remove+0x4c>
#if TCP_QUEUE_OOSEQ
		LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
	}

	pcb->state = CLOSED;
    6906:	2300      	movs	r3, #0
    6908:	7623      	strb	r3, [r4, #24]
    690a:	bd10      	pop	{r4, pc}
		pcb->flags |= TF_ACK_NOW;
    690c:	f043 0302 	orr.w	r3, r3, #2
    6910:	77a3      	strb	r3, [r4, #30]
		tcp_output(pcb);
    6912:	4620      	mov	r0, r4
    6914:	4b03      	ldr	r3, [pc, #12]	; (6924 <tcp_pcb_remove+0x64>)
    6916:	4798      	blx	r3
    6918:	e7f5      	b.n	6906 <tcp_pcb_remove+0x46>
    691a:	bf00      	nop
    691c:	200161fc 	.word	0x200161fc
    6920:	00006555 	.word	0x00006555
    6924:	00008a51 	.word	0x00008a51

00006928 <tcp_close_shutdown>:
{
    6928:	b530      	push	{r4, r5, lr}
    692a:	b083      	sub	sp, #12
    692c:	4604      	mov	r4, r0
	if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
    692e:	b121      	cbz	r1, 693a <tcp_close_shutdown+0x12>
    6930:	7e03      	ldrb	r3, [r0, #24]
    6932:	2b04      	cmp	r3, #4
    6934:	d00b      	beq.n	694e <tcp_close_shutdown+0x26>
    6936:	2b07      	cmp	r3, #7
    6938:	d009      	beq.n	694e <tcp_close_shutdown+0x26>
	switch (pcb->state) {
    693a:	7e23      	ldrb	r3, [r4, #24]
    693c:	2b07      	cmp	r3, #7
    693e:	f200 80a0 	bhi.w	6a82 <tcp_close_shutdown+0x15a>
    6942:	e8df f003 	tbb	[pc, r3]
    6946:	6b46      	.short	0x6b46
    6948:	9e8c8376 	.word	0x9e8c8376
    694c:	959e      	.short	0x959e
		if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    694e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    6950:	b1db      	cbz	r3, 698a <tcp_close_shutdown+0x62>
			tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    6952:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6954:	6d20      	ldr	r0, [r4, #80]	; 0x50
    6956:	8ba3      	ldrh	r3, [r4, #28]
    6958:	9301      	str	r3, [sp, #4]
    695a:	8b63      	ldrh	r3, [r4, #26]
    695c:	9300      	str	r3, [sp, #0]
    695e:	1d23      	adds	r3, r4, #4
    6960:	4622      	mov	r2, r4
    6962:	4d4b      	ldr	r5, [pc, #300]	; (6a90 <tcp_close_shutdown+0x168>)
    6964:	47a8      	blx	r5
			tcp_pcb_purge(pcb);
    6966:	4620      	mov	r0, r4
    6968:	4b4a      	ldr	r3, [pc, #296]	; (6a94 <tcp_close_shutdown+0x16c>)
    696a:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    696c:	4b4a      	ldr	r3, [pc, #296]	; (6a98 <tcp_close_shutdown+0x170>)
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	429c      	cmp	r4, r3
    6972:	d010      	beq.n	6996 <tcp_close_shutdown+0x6e>
    6974:	4a49      	ldr	r2, [pc, #292]	; (6a9c <tcp_close_shutdown+0x174>)
    6976:	6013      	str	r3, [r2, #0]
    6978:	4b48      	ldr	r3, [pc, #288]	; (6a9c <tcp_close_shutdown+0x174>)
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	b18b      	cbz	r3, 69a2 <tcp_close_shutdown+0x7a>
    697e:	68da      	ldr	r2, [r3, #12]
    6980:	4294      	cmp	r4, r2
    6982:	d00c      	beq.n	699e <tcp_close_shutdown+0x76>
    6984:	4b45      	ldr	r3, [pc, #276]	; (6a9c <tcp_close_shutdown+0x174>)
    6986:	601a      	str	r2, [r3, #0]
    6988:	e7f6      	b.n	6978 <tcp_close_shutdown+0x50>
		if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
    698a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    698c:	f241 63d0 	movw	r3, #5840	; 0x16d0
    6990:	429a      	cmp	r2, r3
    6992:	d1de      	bne.n	6952 <tcp_close_shutdown+0x2a>
    6994:	e7d1      	b.n	693a <tcp_close_shutdown+0x12>
			TCP_RMV_ACTIVE(pcb);
    6996:	68da      	ldr	r2, [r3, #12]
    6998:	4b3f      	ldr	r3, [pc, #252]	; (6a98 <tcp_close_shutdown+0x170>)
    699a:	601a      	str	r2, [r3, #0]
    699c:	e001      	b.n	69a2 <tcp_close_shutdown+0x7a>
    699e:	68e2      	ldr	r2, [r4, #12]
    69a0:	60da      	str	r2, [r3, #12]
    69a2:	2300      	movs	r3, #0
    69a4:	60e3      	str	r3, [r4, #12]
    69a6:	2201      	movs	r2, #1
    69a8:	4b3d      	ldr	r3, [pc, #244]	; (6aa0 <tcp_close_shutdown+0x178>)
    69aa:	701a      	strb	r2, [r3, #0]
			if (pcb->state == ESTABLISHED) {
    69ac:	7e23      	ldrb	r3, [r4, #24]
    69ae:	2b04      	cmp	r3, #4
    69b0:	d005      	beq.n	69be <tcp_close_shutdown+0x96>
				memp_free(MEMP_TCP_PCB, pcb);
    69b2:	4621      	mov	r1, r4
    69b4:	2001      	movs	r0, #1
    69b6:	4b3b      	ldr	r3, [pc, #236]	; (6aa4 <tcp_close_shutdown+0x17c>)
    69b8:	4798      	blx	r3
			return ERR_OK;
    69ba:	2500      	movs	r5, #0
    69bc:	e02b      	b.n	6a16 <tcp_close_shutdown+0xee>
				pcb->state = TIME_WAIT;
    69be:	230a      	movs	r3, #10
    69c0:	7623      	strb	r3, [r4, #24]
				TCP_REG(&tcp_tw_pcbs, pcb);
    69c2:	4b39      	ldr	r3, [pc, #228]	; (6aa8 <tcp_close_shutdown+0x180>)
    69c4:	681a      	ldr	r2, [r3, #0]
    69c6:	60e2      	str	r2, [r4, #12]
    69c8:	601c      	str	r4, [r3, #0]
    69ca:	4b38      	ldr	r3, [pc, #224]	; (6aac <tcp_close_shutdown+0x184>)
    69cc:	4798      	blx	r3
			return ERR_OK;
    69ce:	2500      	movs	r5, #0
    69d0:	e021      	b.n	6a16 <tcp_close_shutdown+0xee>
		if (pcb->local_port != 0) {
    69d2:	8b63      	ldrh	r3, [r4, #26]
    69d4:	b1b3      	cbz	r3, 6a04 <tcp_close_shutdown+0xdc>
			TCP_RMV(&tcp_bound_pcbs, pcb);
    69d6:	4b36      	ldr	r3, [pc, #216]	; (6ab0 <tcp_close_shutdown+0x188>)
    69d8:	681b      	ldr	r3, [r3, #0]
    69da:	429c      	cmp	r4, r3
    69dc:	d00a      	beq.n	69f4 <tcp_close_shutdown+0xcc>
    69de:	4a2f      	ldr	r2, [pc, #188]	; (6a9c <tcp_close_shutdown+0x174>)
    69e0:	6013      	str	r3, [r2, #0]
    69e2:	4b2e      	ldr	r3, [pc, #184]	; (6a9c <tcp_close_shutdown+0x174>)
    69e4:	681b      	ldr	r3, [r3, #0]
    69e6:	b15b      	cbz	r3, 6a00 <tcp_close_shutdown+0xd8>
    69e8:	68da      	ldr	r2, [r3, #12]
    69ea:	4294      	cmp	r4, r2
    69ec:	d006      	beq.n	69fc <tcp_close_shutdown+0xd4>
    69ee:	4b2b      	ldr	r3, [pc, #172]	; (6a9c <tcp_close_shutdown+0x174>)
    69f0:	601a      	str	r2, [r3, #0]
    69f2:	e7f6      	b.n	69e2 <tcp_close_shutdown+0xba>
    69f4:	68da      	ldr	r2, [r3, #12]
    69f6:	4b2e      	ldr	r3, [pc, #184]	; (6ab0 <tcp_close_shutdown+0x188>)
    69f8:	601a      	str	r2, [r3, #0]
    69fa:	e001      	b.n	6a00 <tcp_close_shutdown+0xd8>
    69fc:	68e2      	ldr	r2, [r4, #12]
    69fe:	60da      	str	r2, [r3, #12]
    6a00:	2300      	movs	r3, #0
    6a02:	60e3      	str	r3, [r4, #12]
		memp_free(MEMP_TCP_PCB, pcb);
    6a04:	4621      	mov	r1, r4
    6a06:	2001      	movs	r0, #1
    6a08:	4b26      	ldr	r3, [pc, #152]	; (6aa4 <tcp_close_shutdown+0x17c>)
    6a0a:	4798      	blx	r3
		err = ERR_OK;
    6a0c:	2400      	movs	r4, #0
		pcb = NULL;
    6a0e:	4625      	mov	r5, r4
	if (pcb != NULL && err == ERR_OK) {
    6a10:	b10c      	cbz	r4, 6a16 <tcp_close_shutdown+0xee>
    6a12:	2d00      	cmp	r5, #0
    6a14:	d038      	beq.n	6a88 <tcp_close_shutdown+0x160>
}
    6a16:	4628      	mov	r0, r5
    6a18:	b003      	add	sp, #12
    6a1a:	bd30      	pop	{r4, r5, pc}
		tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
    6a1c:	4621      	mov	r1, r4
    6a1e:	4825      	ldr	r0, [pc, #148]	; (6ab4 <tcp_close_shutdown+0x18c>)
    6a20:	4b25      	ldr	r3, [pc, #148]	; (6ab8 <tcp_close_shutdown+0x190>)
    6a22:	4798      	blx	r3
		memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    6a24:	4621      	mov	r1, r4
    6a26:	2002      	movs	r0, #2
    6a28:	4b1e      	ldr	r3, [pc, #120]	; (6aa4 <tcp_close_shutdown+0x17c>)
    6a2a:	4798      	blx	r3
		err = ERR_OK;
    6a2c:	2400      	movs	r4, #0
		pcb = NULL;
    6a2e:	4625      	mov	r5, r4
		break;
    6a30:	e7ee      	b.n	6a10 <tcp_close_shutdown+0xe8>
		TCP_PCB_REMOVE_ACTIVE(pcb);
    6a32:	4621      	mov	r1, r4
    6a34:	4818      	ldr	r0, [pc, #96]	; (6a98 <tcp_close_shutdown+0x170>)
    6a36:	4b20      	ldr	r3, [pc, #128]	; (6ab8 <tcp_close_shutdown+0x190>)
    6a38:	4798      	blx	r3
    6a3a:	2001      	movs	r0, #1
    6a3c:	4b18      	ldr	r3, [pc, #96]	; (6aa0 <tcp_close_shutdown+0x178>)
    6a3e:	7018      	strb	r0, [r3, #0]
		memp_free(MEMP_TCP_PCB, pcb);
    6a40:	4621      	mov	r1, r4
    6a42:	4b18      	ldr	r3, [pc, #96]	; (6aa4 <tcp_close_shutdown+0x17c>)
    6a44:	4798      	blx	r3
		err = ERR_OK;
    6a46:	2400      	movs	r4, #0
		pcb = NULL;
    6a48:	4625      	mov	r5, r4
		break;
    6a4a:	e7e1      	b.n	6a10 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    6a4c:	4620      	mov	r0, r4
    6a4e:	4b1b      	ldr	r3, [pc, #108]	; (6abc <tcp_close_shutdown+0x194>)
    6a50:	4798      	blx	r3
		if (err == ERR_OK) {
    6a52:	4605      	mov	r5, r0
    6a54:	2800      	cmp	r0, #0
    6a56:	d1db      	bne.n	6a10 <tcp_close_shutdown+0xe8>
			pcb->state = FIN_WAIT_1;
    6a58:	2305      	movs	r3, #5
    6a5a:	7623      	strb	r3, [r4, #24]
    6a5c:	e7d8      	b.n	6a10 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    6a5e:	4620      	mov	r0, r4
    6a60:	4b16      	ldr	r3, [pc, #88]	; (6abc <tcp_close_shutdown+0x194>)
    6a62:	4798      	blx	r3
		if (err == ERR_OK) {
    6a64:	4605      	mov	r5, r0
    6a66:	2800      	cmp	r0, #0
    6a68:	d1d2      	bne.n	6a10 <tcp_close_shutdown+0xe8>
			pcb->state = FIN_WAIT_1;
    6a6a:	2305      	movs	r3, #5
    6a6c:	7623      	strb	r3, [r4, #24]
    6a6e:	e7cf      	b.n	6a10 <tcp_close_shutdown+0xe8>
		err = tcp_send_fin(pcb);
    6a70:	4620      	mov	r0, r4
    6a72:	4b12      	ldr	r3, [pc, #72]	; (6abc <tcp_close_shutdown+0x194>)
    6a74:	4798      	blx	r3
		if (err == ERR_OK) {
    6a76:	4605      	mov	r5, r0
    6a78:	2800      	cmp	r0, #0
    6a7a:	d1c9      	bne.n	6a10 <tcp_close_shutdown+0xe8>
			pcb->state = LAST_ACK;
    6a7c:	2309      	movs	r3, #9
    6a7e:	7623      	strb	r3, [r4, #24]
    6a80:	e7c6      	b.n	6a10 <tcp_close_shutdown+0xe8>
		err = ERR_OK;
    6a82:	2500      	movs	r5, #0
		pcb = NULL;
    6a84:	462c      	mov	r4, r5
    6a86:	e7c3      	b.n	6a10 <tcp_close_shutdown+0xe8>
		tcp_output(pcb);
    6a88:	4620      	mov	r0, r4
    6a8a:	4b0d      	ldr	r3, [pc, #52]	; (6ac0 <tcp_close_shutdown+0x198>)
    6a8c:	4798      	blx	r3
    6a8e:	e7c2      	b.n	6a16 <tcp_close_shutdown+0xee>
    6a90:	00008c2d 	.word	0x00008c2d
    6a94:	00006555 	.word	0x00006555
    6a98:	200161f0 	.word	0x200161f0
    6a9c:	200161fc 	.word	0x200161fc
    6aa0:	200161ec 	.word	0x200161ec
    6aa4:	00005d31 	.word	0x00005d31
    6aa8:	20016204 	.word	0x20016204
    6aac:	00008f65 	.word	0x00008f65
    6ab0:	20016200 	.word	0x20016200
    6ab4:	200161f8 	.word	0x200161f8
    6ab8:	000068c1 	.word	0x000068c1
    6abc:	00008989 	.word	0x00008989
    6ac0:	00008a51 	.word	0x00008a51

00006ac4 <tcp_close>:
{
    6ac4:	b508      	push	{r3, lr}
	if (pcb->state != LISTEN) {
    6ac6:	7e03      	ldrb	r3, [r0, #24]
    6ac8:	2b01      	cmp	r3, #1
    6aca:	d003      	beq.n	6ad4 <tcp_close+0x10>
		pcb->flags |= TF_RXCLOSED;
    6acc:	7f83      	ldrb	r3, [r0, #30]
    6ace:	f043 0310 	orr.w	r3, r3, #16
    6ad2:	7783      	strb	r3, [r0, #30]
	return tcp_close_shutdown(pcb, 1);
    6ad4:	2101      	movs	r1, #1
    6ad6:	4b01      	ldr	r3, [pc, #4]	; (6adc <tcp_close+0x18>)
    6ad8:	4798      	blx	r3
}
    6ada:	bd08      	pop	{r3, pc}
    6adc:	00006929 	.word	0x00006929

00006ae0 <tcp_recv_null>:
{
    6ae0:	b510      	push	{r4, lr}
    6ae2:	4608      	mov	r0, r1
	if (p != NULL) {
    6ae4:	b142      	cbz	r2, 6af8 <tcp_recv_null+0x18>
    6ae6:	4614      	mov	r4, r2
		tcp_recved(pcb, p->tot_len);
    6ae8:	8911      	ldrh	r1, [r2, #8]
    6aea:	4b06      	ldr	r3, [pc, #24]	; (6b04 <tcp_recv_null+0x24>)
    6aec:	4798      	blx	r3
		pbuf_free(p);
    6aee:	4620      	mov	r0, r4
    6af0:	4b05      	ldr	r3, [pc, #20]	; (6b08 <tcp_recv_null+0x28>)
    6af2:	4798      	blx	r3
	return ERR_OK;
    6af4:	2000      	movs	r0, #0
    6af6:	bd10      	pop	{r4, pc}
	} else if (err == ERR_OK) {
    6af8:	b10b      	cbz	r3, 6afe <tcp_recv_null+0x1e>
	return ERR_OK;
    6afa:	2000      	movs	r0, #0
}
    6afc:	bd10      	pop	{r4, pc}
		return tcp_close(pcb);
    6afe:	4b03      	ldr	r3, [pc, #12]	; (6b0c <tcp_recv_null+0x2c>)
    6b00:	4798      	blx	r3
    6b02:	bd10      	pop	{r4, pc}
    6b04:	00006485 	.word	0x00006485
    6b08:	00006009 	.word	0x00006009
    6b0c:	00006ac5 	.word	0x00006ac5

00006b10 <tcp_process_refused_data>:
{
    6b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b12:	4604      	mov	r4, r0
	u8_t  refused_flags = pcb->refused_data->flags;
    6b14:	6f86      	ldr	r6, [r0, #120]	; 0x78
    6b16:	7b77      	ldrb	r7, [r6, #13]
	pcb->refused_data         = NULL;
    6b18:	2300      	movs	r3, #0
    6b1a:	6783      	str	r3, [r0, #120]	; 0x78
	TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
    6b1c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    6b20:	b1e5      	cbz	r5, 6b5c <tcp_process_refused_data+0x4c>
    6b22:	4632      	mov	r2, r6
    6b24:	4601      	mov	r1, r0
    6b26:	6900      	ldr	r0, [r0, #16]
    6b28:	47a8      	blx	r5
    6b2a:	4605      	mov	r5, r0
	if (err == ERR_OK) {
    6b2c:	bb05      	cbnz	r5, 6b70 <tcp_process_refused_data+0x60>
		if (refused_flags & PBUF_FLAG_TCP_FIN) {
    6b2e:	f017 0f20 	tst.w	r7, #32
    6b32:	d022      	beq.n	6b7a <tcp_process_refused_data+0x6a>
			if (pcb->rcv_wnd != TCP_WND) {
    6b34:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    6b36:	f241 62d0 	movw	r2, #5840	; 0x16d0
    6b3a:	4293      	cmp	r3, r2
    6b3c:	d001      	beq.n	6b42 <tcp_process_refused_data+0x32>
				pcb->rcv_wnd++;
    6b3e:	3301      	adds	r3, #1
    6b40:	85a3      	strh	r3, [r4, #44]	; 0x2c
			TCP_EVENT_CLOSED(pcb, err);
    6b42:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    6b46:	b18e      	cbz	r6, 6b6c <tcp_process_refused_data+0x5c>
    6b48:	2300      	movs	r3, #0
    6b4a:	461a      	mov	r2, r3
    6b4c:	4621      	mov	r1, r4
    6b4e:	6920      	ldr	r0, [r4, #16]
    6b50:	47b0      	blx	r6
			if (err == ERR_ABRT) {
    6b52:	f110 0f0a 	cmn.w	r0, #10
    6b56:	d110      	bne.n	6b7a <tcp_process_refused_data+0x6a>
				return ERR_ABRT;
    6b58:	4605      	mov	r5, r0
    6b5a:	e00e      	b.n	6b7a <tcp_process_refused_data+0x6a>
	TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
    6b5c:	2300      	movs	r3, #0
    6b5e:	4632      	mov	r2, r6
    6b60:	4601      	mov	r1, r0
    6b62:	4618      	mov	r0, r3
    6b64:	4d06      	ldr	r5, [pc, #24]	; (6b80 <tcp_process_refused_data+0x70>)
    6b66:	47a8      	blx	r5
    6b68:	4605      	mov	r5, r0
    6b6a:	e7df      	b.n	6b2c <tcp_process_refused_data+0x1c>
			TCP_EVENT_CLOSED(pcb, err);
    6b6c:	4628      	mov	r0, r5
    6b6e:	e7f0      	b.n	6b52 <tcp_process_refused_data+0x42>
	} else if (err == ERR_ABRT) {
    6b70:	f115 0f0a 	cmn.w	r5, #10
    6b74:	d001      	beq.n	6b7a <tcp_process_refused_data+0x6a>
		pcb->refused_data = refused_data;
    6b76:	67a6      	str	r6, [r4, #120]	; 0x78
	return ERR_OK;
    6b78:	2500      	movs	r5, #0
}
    6b7a:	4628      	mov	r0, r5
    6b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b7e:	bf00      	nop
    6b80:	00006ae1 	.word	0x00006ae1

00006b84 <tcp_fasttmr>:
{
    6b84:	b570      	push	{r4, r5, r6, lr}
	++tcp_timer_ctr;
    6b86:	4a16      	ldr	r2, [pc, #88]	; (6be0 <tcp_fasttmr+0x5c>)
    6b88:	7813      	ldrb	r3, [r2, #0]
    6b8a:	3301      	adds	r3, #1
    6b8c:	7013      	strb	r3, [r2, #0]
	pcb = tcp_active_pcbs;
    6b8e:	4b15      	ldr	r3, [pc, #84]	; (6be4 <tcp_fasttmr+0x60>)
    6b90:	681c      	ldr	r4, [r3, #0]
	while (pcb != NULL) {
    6b92:	b324      	cbz	r4, 6bde <tcp_fasttmr+0x5a>
		if (pcb->last_timer != tcp_timer_ctr) {
    6b94:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    6b98:	4b11      	ldr	r3, [pc, #68]	; (6be0 <tcp_fasttmr+0x5c>)
    6b9a:	781b      	ldrb	r3, [r3, #0]
    6b9c:	429a      	cmp	r2, r3
    6b9e:	d0f8      	beq.n	6b92 <tcp_fasttmr+0xe>
			pcb->last_timer = tcp_timer_ctr;
    6ba0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
			if (pcb->flags & TF_ACK_DELAY) {
    6ba4:	7fa3      	ldrb	r3, [r4, #30]
    6ba6:	f013 0f01 	tst.w	r3, #1
    6baa:	d10d      	bne.n	6bc8 <tcp_fasttmr+0x44>
			next = pcb->next;
    6bac:	68e6      	ldr	r6, [r4, #12]
			if (pcb->refused_data != NULL) {
    6bae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    6bb0:	b143      	cbz	r3, 6bc4 <tcp_fasttmr+0x40>
				tcp_active_pcbs_changed = 0;
    6bb2:	4d0d      	ldr	r5, [pc, #52]	; (6be8 <tcp_fasttmr+0x64>)
    6bb4:	2300      	movs	r3, #0
    6bb6:	702b      	strb	r3, [r5, #0]
				tcp_process_refused_data(pcb);
    6bb8:	4620      	mov	r0, r4
    6bba:	4b0c      	ldr	r3, [pc, #48]	; (6bec <tcp_fasttmr+0x68>)
    6bbc:	4798      	blx	r3
				if (tcp_active_pcbs_changed) {
    6bbe:	782b      	ldrb	r3, [r5, #0]
    6bc0:	2b00      	cmp	r3, #0
    6bc2:	d1e4      	bne.n	6b8e <tcp_fasttmr+0xa>
{
    6bc4:	4634      	mov	r4, r6
    6bc6:	e7e4      	b.n	6b92 <tcp_fasttmr+0xe>
				tcp_ack_now(pcb);
    6bc8:	f043 0302 	orr.w	r3, r3, #2
    6bcc:	77a3      	strb	r3, [r4, #30]
				tcp_output(pcb);
    6bce:	4620      	mov	r0, r4
    6bd0:	4b07      	ldr	r3, [pc, #28]	; (6bf0 <tcp_fasttmr+0x6c>)
    6bd2:	4798      	blx	r3
				pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    6bd4:	7fa3      	ldrb	r3, [r4, #30]
    6bd6:	f023 0303 	bic.w	r3, r3, #3
    6bda:	77a3      	strb	r3, [r4, #30]
    6bdc:	e7e6      	b.n	6bac <tcp_fasttmr+0x28>
}
    6bde:	bd70      	pop	{r4, r5, r6, pc}
    6be0:	200080c1 	.word	0x200080c1
    6be4:	200161f0 	.word	0x200161f0
    6be8:	200161ec 	.word	0x200161ec
    6bec:	00006b11 	.word	0x00006b11
    6bf0:	00008a51 	.word	0x00008a51

00006bf4 <tcp_tmr>:
{
    6bf4:	b508      	push	{r3, lr}
	tcp_fasttmr();
    6bf6:	4b07      	ldr	r3, [pc, #28]	; (6c14 <tcp_tmr+0x20>)
    6bf8:	4798      	blx	r3
	if (++tcp_timer & 1) {
    6bfa:	4a07      	ldr	r2, [pc, #28]	; (6c18 <tcp_tmr+0x24>)
    6bfc:	7853      	ldrb	r3, [r2, #1]
    6bfe:	3301      	adds	r3, #1
    6c00:	b2db      	uxtb	r3, r3
    6c02:	7053      	strb	r3, [r2, #1]
    6c04:	f013 0f01 	tst.w	r3, #1
    6c08:	d100      	bne.n	6c0c <tcp_tmr+0x18>
    6c0a:	bd08      	pop	{r3, pc}
		tcp_slowtmr();
    6c0c:	4b03      	ldr	r3, [pc, #12]	; (6c1c <tcp_tmr+0x28>)
    6c0e:	4798      	blx	r3
}
    6c10:	e7fb      	b.n	6c0a <tcp_tmr+0x16>
    6c12:	bf00      	nop
    6c14:	00006b85 	.word	0x00006b85
    6c18:	200080c1 	.word	0x200080c1
    6c1c:	0000659d 	.word	0x0000659d

00006c20 <tcp_shutdown>:
	if (pcb->state == LISTEN) {
    6c20:	7e03      	ldrb	r3, [r0, #24]
    6c22:	2b01      	cmp	r3, #1
    6c24:	d020      	beq.n	6c68 <tcp_shutdown+0x48>
{
    6c26:	b570      	push	{r4, r5, r6, lr}
    6c28:	4616      	mov	r6, r2
    6c2a:	460d      	mov	r5, r1
    6c2c:	4604      	mov	r4, r0
	if (shut_rx) {
    6c2e:	b151      	cbz	r1, 6c46 <tcp_shutdown+0x26>
		pcb->flags |= TF_RXCLOSED;
    6c30:	7f83      	ldrb	r3, [r0, #30]
    6c32:	f043 0310 	orr.w	r3, r3, #16
    6c36:	7783      	strb	r3, [r0, #30]
		if (shut_tx) {
    6c38:	b992      	cbnz	r2, 6c60 <tcp_shutdown+0x40>
		if (pcb->refused_data != NULL) {
    6c3a:	6f80      	ldr	r0, [r0, #120]	; 0x78
    6c3c:	b118      	cbz	r0, 6c46 <tcp_shutdown+0x26>
			pbuf_free(pcb->refused_data);
    6c3e:	4b0e      	ldr	r3, [pc, #56]	; (6c78 <tcp_shutdown+0x58>)
    6c40:	4798      	blx	r3
			pcb->refused_data = NULL;
    6c42:	2300      	movs	r3, #0
    6c44:	67a3      	str	r3, [r4, #120]	; 0x78
	if (shut_tx) {
    6c46:	b196      	cbz	r6, 6c6e <tcp_shutdown+0x4e>
		switch (pcb->state) {
    6c48:	7e23      	ldrb	r3, [r4, #24]
    6c4a:	2b03      	cmp	r3, #3
    6c4c:	d311      	bcc.n	6c72 <tcp_shutdown+0x52>
    6c4e:	2b04      	cmp	r3, #4
    6c50:	d901      	bls.n	6c56 <tcp_shutdown+0x36>
    6c52:	2b07      	cmp	r3, #7
    6c54:	d10d      	bne.n	6c72 <tcp_shutdown+0x52>
			return tcp_close_shutdown(pcb, shut_rx);
    6c56:	b2e9      	uxtb	r1, r5
    6c58:	4620      	mov	r0, r4
    6c5a:	4b08      	ldr	r3, [pc, #32]	; (6c7c <tcp_shutdown+0x5c>)
    6c5c:	4798      	blx	r3
    6c5e:	bd70      	pop	{r4, r5, r6, pc}
			return tcp_close_shutdown(pcb, 1);
    6c60:	2101      	movs	r1, #1
    6c62:	4b06      	ldr	r3, [pc, #24]	; (6c7c <tcp_shutdown+0x5c>)
    6c64:	4798      	blx	r3
    6c66:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_CONN;
    6c68:	f06f 000c 	mvn.w	r0, #12
    6c6c:	4770      	bx	lr
	return ERR_OK;
    6c6e:	2000      	movs	r0, #0
    6c70:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_CONN;
    6c72:	f06f 000c 	mvn.w	r0, #12
}
    6c76:	bd70      	pop	{r4, r5, r6, pc}
    6c78:	00006009 	.word	0x00006009
    6c7c:	00006929 	.word	0x00006929

00006c80 <tcp_abandon>:
{
    6c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c84:	b083      	sub	sp, #12
    6c86:	4604      	mov	r4, r0
	if (pcb->state == TIME_WAIT) {
    6c88:	7e03      	ldrb	r3, [r0, #24]
    6c8a:	2b0a      	cmp	r3, #10
    6c8c:	d027      	beq.n	6cde <tcp_abandon+0x5e>
    6c8e:	460e      	mov	r6, r1
		seqno = pcb->snd_nxt;
    6c90:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
		ackno = pcb->rcv_nxt;
    6c94:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
		errf = pcb->errf;
    6c98:	f8d0 508c 	ldr.w	r5, [r0, #140]	; 0x8c
		errf_arg = pcb->callback_arg;
    6c9c:	6907      	ldr	r7, [r0, #16]
		TCP_PCB_REMOVE_ACTIVE(pcb);
    6c9e:	4601      	mov	r1, r0
    6ca0:	4819      	ldr	r0, [pc, #100]	; (6d08 <tcp_abandon+0x88>)
    6ca2:	4b1a      	ldr	r3, [pc, #104]	; (6d0c <tcp_abandon+0x8c>)
    6ca4:	4798      	blx	r3
    6ca6:	2201      	movs	r2, #1
    6ca8:	4b19      	ldr	r3, [pc, #100]	; (6d10 <tcp_abandon+0x90>)
    6caa:	701a      	strb	r2, [r3, #0]
		if (pcb->unacked != NULL) {
    6cac:	6f20      	ldr	r0, [r4, #112]	; 0x70
    6cae:	b108      	cbz	r0, 6cb4 <tcp_abandon+0x34>
			tcp_segs_free(pcb->unacked);
    6cb0:	4b18      	ldr	r3, [pc, #96]	; (6d14 <tcp_abandon+0x94>)
    6cb2:	4798      	blx	r3
		if (pcb->unsent != NULL) {
    6cb4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6cb6:	b108      	cbz	r0, 6cbc <tcp_abandon+0x3c>
			tcp_segs_free(pcb->unsent);
    6cb8:	4b16      	ldr	r3, [pc, #88]	; (6d14 <tcp_abandon+0x94>)
    6cba:	4798      	blx	r3
		if (pcb->ooseq != NULL) {
    6cbc:	6f60      	ldr	r0, [r4, #116]	; 0x74
    6cbe:	b108      	cbz	r0, 6cc4 <tcp_abandon+0x44>
			tcp_segs_free(pcb->ooseq);
    6cc0:	4b14      	ldr	r3, [pc, #80]	; (6d14 <tcp_abandon+0x94>)
    6cc2:	4798      	blx	r3
		if (reset) {
    6cc4:	b9a6      	cbnz	r6, 6cf0 <tcp_abandon+0x70>
		memp_free(MEMP_TCP_PCB, pcb);
    6cc6:	4621      	mov	r1, r4
    6cc8:	2001      	movs	r0, #1
    6cca:	4b13      	ldr	r3, [pc, #76]	; (6d18 <tcp_abandon+0x98>)
    6ccc:	4798      	blx	r3
		TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
    6cce:	b11d      	cbz	r5, 6cd8 <tcp_abandon+0x58>
    6cd0:	f06f 0109 	mvn.w	r1, #9
    6cd4:	4638      	mov	r0, r7
    6cd6:	47a8      	blx	r5
}
    6cd8:	b003      	add	sp, #12
    6cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    6cde:	4601      	mov	r1, r0
    6ce0:	480e      	ldr	r0, [pc, #56]	; (6d1c <tcp_abandon+0x9c>)
    6ce2:	4b0a      	ldr	r3, [pc, #40]	; (6d0c <tcp_abandon+0x8c>)
    6ce4:	4798      	blx	r3
		memp_free(MEMP_TCP_PCB, pcb);
    6ce6:	4621      	mov	r1, r4
    6ce8:	2001      	movs	r0, #1
    6cea:	4b0b      	ldr	r3, [pc, #44]	; (6d18 <tcp_abandon+0x98>)
    6cec:	4798      	blx	r3
    6cee:	e7f3      	b.n	6cd8 <tcp_abandon+0x58>
			tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    6cf0:	8ba3      	ldrh	r3, [r4, #28]
    6cf2:	9301      	str	r3, [sp, #4]
    6cf4:	8b63      	ldrh	r3, [r4, #26]
    6cf6:	9300      	str	r3, [sp, #0]
    6cf8:	1d23      	adds	r3, r4, #4
    6cfa:	4622      	mov	r2, r4
    6cfc:	4649      	mov	r1, r9
    6cfe:	4640      	mov	r0, r8
    6d00:	4e07      	ldr	r6, [pc, #28]	; (6d20 <tcp_abandon+0xa0>)
    6d02:	47b0      	blx	r6
    6d04:	e7df      	b.n	6cc6 <tcp_abandon+0x46>
    6d06:	bf00      	nop
    6d08:	200161f0 	.word	0x200161f0
    6d0c:	000068c1 	.word	0x000068c1
    6d10:	200161ec 	.word	0x200161ec
    6d14:	000064e9 	.word	0x000064e9
    6d18:	00005d31 	.word	0x00005d31
    6d1c:	20016204 	.word	0x20016204
    6d20:	00008c2d 	.word	0x00008c2d

00006d24 <tcp_abort>:
{
    6d24:	b508      	push	{r3, lr}
	tcp_abandon(pcb, 1);
    6d26:	2101      	movs	r1, #1
    6d28:	4b01      	ldr	r3, [pc, #4]	; (6d30 <tcp_abort+0xc>)
    6d2a:	4798      	blx	r3
    6d2c:	bd08      	pop	{r3, pc}
    6d2e:	bf00      	nop
    6d30:	00006c81 	.word	0x00006c81

00006d34 <tcp_kill_timewait>:
{
    6d34:	b510      	push	{r4, lr}
	for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    6d36:	4b0a      	ldr	r3, [pc, #40]	; (6d60 <tcp_kill_timewait+0x2c>)
    6d38:	681b      	ldr	r3, [r3, #0]
	inactivity = 0;
    6d3a:	2400      	movs	r4, #0
	inactive   = NULL;
    6d3c:	4620      	mov	r0, r4
	for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    6d3e:	e000      	b.n	6d42 <tcp_kill_timewait+0xe>
    6d40:	68db      	ldr	r3, [r3, #12]
    6d42:	b143      	cbz	r3, 6d56 <tcp_kill_timewait+0x22>
		if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    6d44:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6d46:	4a07      	ldr	r2, [pc, #28]	; (6d64 <tcp_kill_timewait+0x30>)
    6d48:	6812      	ldr	r2, [r2, #0]
    6d4a:	1a52      	subs	r2, r2, r1
    6d4c:	4294      	cmp	r4, r2
    6d4e:	d8f7      	bhi.n	6d40 <tcp_kill_timewait+0xc>
			inactivity = tcp_ticks - pcb->tmr;
    6d50:	4614      	mov	r4, r2
			inactive   = pcb;
    6d52:	4618      	mov	r0, r3
    6d54:	e7f4      	b.n	6d40 <tcp_kill_timewait+0xc>
	if (inactive != NULL) {
    6d56:	b108      	cbz	r0, 6d5c <tcp_kill_timewait+0x28>
		tcp_abort(inactive);
    6d58:	4b03      	ldr	r3, [pc, #12]	; (6d68 <tcp_kill_timewait+0x34>)
    6d5a:	4798      	blx	r3
    6d5c:	bd10      	pop	{r4, pc}
    6d5e:	bf00      	nop
    6d60:	20016204 	.word	0x20016204
    6d64:	200161f4 	.word	0x200161f4
    6d68:	00006d25 	.word	0x00006d25

00006d6c <tcp_kill_prio>:
{
    6d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    6d6e:	4b0e      	ldr	r3, [pc, #56]	; (6da8 <tcp_kill_prio+0x3c>)
    6d70:	681b      	ldr	r3, [r3, #0]
	mprio = TCP_PRIO_MAX;
    6d72:	247f      	movs	r4, #127	; 0x7f
	inactivity = 0;
    6d74:	2500      	movs	r5, #0
	inactive   = NULL;
    6d76:	462f      	mov	r7, r5
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    6d78:	e000      	b.n	6d7c <tcp_kill_prio+0x10>
    6d7a:	68db      	ldr	r3, [r3, #12]
    6d7c:	b173      	cbz	r3, 6d9c <tcp_kill_prio+0x30>
		if (pcb->prio <= prio && pcb->prio <= mprio && (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
    6d7e:	7e5a      	ldrb	r2, [r3, #25]
    6d80:	4282      	cmp	r2, r0
    6d82:	d8fa      	bhi.n	6d7a <tcp_kill_prio+0xe>
    6d84:	4294      	cmp	r4, r2
    6d86:	d3f8      	bcc.n	6d7a <tcp_kill_prio+0xe>
    6d88:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    6d8a:	4908      	ldr	r1, [pc, #32]	; (6dac <tcp_kill_prio+0x40>)
    6d8c:	6809      	ldr	r1, [r1, #0]
    6d8e:	1b89      	subs	r1, r1, r6
    6d90:	428d      	cmp	r5, r1
    6d92:	d8f2      	bhi.n	6d7a <tcp_kill_prio+0xe>
			mprio      = pcb->prio;
    6d94:	4614      	mov	r4, r2
			inactivity = tcp_ticks - pcb->tmr;
    6d96:	460d      	mov	r5, r1
			inactive   = pcb;
    6d98:	461f      	mov	r7, r3
    6d9a:	e7ee      	b.n	6d7a <tcp_kill_prio+0xe>
	if (inactive != NULL) {
    6d9c:	b117      	cbz	r7, 6da4 <tcp_kill_prio+0x38>
		tcp_abort(inactive);
    6d9e:	4638      	mov	r0, r7
    6da0:	4b03      	ldr	r3, [pc, #12]	; (6db0 <tcp_kill_prio+0x44>)
    6da2:	4798      	blx	r3
    6da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6da6:	bf00      	nop
    6da8:	200161f0 	.word	0x200161f0
    6dac:	200161f4 	.word	0x200161f4
    6db0:	00006d25 	.word	0x00006d25

00006db4 <tcp_next_iss>:
 */
u32_t tcp_next_iss(void)
{
	static u32_t iss = 6510;

	iss += tcp_ticks; /* XXX */
    6db4:	4b03      	ldr	r3, [pc, #12]	; (6dc4 <tcp_next_iss+0x10>)
    6db6:	6858      	ldr	r0, [r3, #4]
    6db8:	4a03      	ldr	r2, [pc, #12]	; (6dc8 <tcp_next_iss+0x14>)
    6dba:	6812      	ldr	r2, [r2, #0]
    6dbc:	4410      	add	r0, r2
    6dbe:	6058      	str	r0, [r3, #4]
	return iss;
}
    6dc0:	4770      	bx	lr
    6dc2:	bf00      	nop
    6dc4:	20000040 	.word	0x20000040
    6dc8:	200161f4 	.word	0x200161f4

00006dcc <tcp_alloc>:
{
    6dcc:	b538      	push	{r3, r4, r5, lr}
    6dce:	4605      	mov	r5, r0
	pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    6dd0:	2001      	movs	r0, #1
    6dd2:	4b29      	ldr	r3, [pc, #164]	; (6e78 <tcp_alloc+0xac>)
    6dd4:	4798      	blx	r3
	if (pcb == NULL) {
    6dd6:	4604      	mov	r4, r0
    6dd8:	2800      	cmp	r0, #0
    6dda:	d03d      	beq.n	6e58 <tcp_alloc+0x8c>
	if (pcb != NULL) {
    6ddc:	2c00      	cmp	r4, #0
    6dde:	d039      	beq.n	6e54 <tcp_alloc+0x88>
		memset(pcb, 0, sizeof(struct tcp_pcb));
    6de0:	2298      	movs	r2, #152	; 0x98
    6de2:	2100      	movs	r1, #0
    6de4:	4620      	mov	r0, r4
    6de6:	4b25      	ldr	r3, [pc, #148]	; (6e7c <tcp_alloc+0xb0>)
    6de8:	4798      	blx	r3
		pcb->prio         = prio;
    6dea:	7665      	strb	r5, [r4, #25]
		pcb->snd_buf      = TCP_SND_BUF;
    6dec:	f640 3368 	movw	r3, #2920	; 0xb68
    6df0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
		pcb->snd_queuelen = 0;
    6df4:	2500      	movs	r5, #0
    6df6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
		pcb->rcv_wnd      = TCP_WND;
    6dfa:	f241 63d0 	movw	r3, #5840	; 0x16d0
    6dfe:	85a3      	strh	r3, [r4, #44]	; 0x2c
		pcb->rcv_ann_wnd  = TCP_WND;
    6e00:	85e3      	strh	r3, [r4, #46]	; 0x2e
		pcb->tos          = 0;
    6e02:	7265      	strb	r5, [r4, #9]
		pcb->ttl          = TCP_TTL;
    6e04:	23ff      	movs	r3, #255	; 0xff
    6e06:	72a3      	strb	r3, [r4, #10]
		pcb->mss        = (TCP_MSS > 536) ? 536 : TCP_MSS;
    6e08:	f44f 7306 	mov.w	r3, #536	; 0x218
    6e0c:	86e3      	strh	r3, [r4, #54]	; 0x36
		pcb->rto        = 3000 / TCP_SLOW_INTERVAL;
    6e0e:	2306      	movs	r3, #6
    6e10:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		pcb->sa         = 0;
    6e14:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		pcb->sv         = 3000 / TCP_SLOW_INTERVAL;
    6e18:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		pcb->rtime      = -1;
    6e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6e20:	86a3      	strh	r3, [r4, #52]	; 0x34
		pcb->cwnd       = 1;
    6e22:	2301      	movs	r3, #1
    6e24:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		iss             = tcp_next_iss();
    6e28:	4b15      	ldr	r3, [pc, #84]	; (6e80 <tcp_alloc+0xb4>)
    6e2a:	4798      	blx	r3
		pcb->snd_wl2    = iss;
    6e2c:	65a0      	str	r0, [r4, #88]	; 0x58
		pcb->snd_nxt    = iss;
    6e2e:	6520      	str	r0, [r4, #80]	; 0x50
		pcb->lastack    = iss;
    6e30:	64a0      	str	r0, [r4, #72]	; 0x48
		pcb->snd_lbb    = iss;
    6e32:	65e0      	str	r0, [r4, #92]	; 0x5c
		pcb->tmr        = tcp_ticks;
    6e34:	4b13      	ldr	r3, [pc, #76]	; (6e84 <tcp_alloc+0xb8>)
    6e36:	681b      	ldr	r3, [r3, #0]
    6e38:	6263      	str	r3, [r4, #36]	; 0x24
		pcb->last_timer = tcp_timer_ctr;
    6e3a:	4b13      	ldr	r3, [pc, #76]	; (6e88 <tcp_alloc+0xbc>)
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		pcb->polltmr = 0;
    6e42:	77e5      	strb	r5, [r4, #31]
		pcb->recv = tcp_recv_null;
    6e44:	4b11      	ldr	r3, [pc, #68]	; (6e8c <tcp_alloc+0xc0>)
    6e46:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;
    6e4a:	4b11      	ldr	r3, [pc, #68]	; (6e90 <tcp_alloc+0xc4>)
    6e4c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		pcb->keep_cnt_sent = 0;
    6e50:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
}
    6e54:	4620      	mov	r0, r4
    6e56:	bd38      	pop	{r3, r4, r5, pc}
		tcp_kill_timewait();
    6e58:	4b0e      	ldr	r3, [pc, #56]	; (6e94 <tcp_alloc+0xc8>)
    6e5a:	4798      	blx	r3
		pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    6e5c:	2001      	movs	r0, #1
    6e5e:	4b06      	ldr	r3, [pc, #24]	; (6e78 <tcp_alloc+0xac>)
    6e60:	4798      	blx	r3
		if (pcb == NULL) {
    6e62:	4604      	mov	r4, r0
    6e64:	2800      	cmp	r0, #0
    6e66:	d1b9      	bne.n	6ddc <tcp_alloc+0x10>
			tcp_kill_prio(prio);
    6e68:	4628      	mov	r0, r5
    6e6a:	4b0b      	ldr	r3, [pc, #44]	; (6e98 <tcp_alloc+0xcc>)
    6e6c:	4798      	blx	r3
			pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
    6e6e:	2001      	movs	r0, #1
    6e70:	4b01      	ldr	r3, [pc, #4]	; (6e78 <tcp_alloc+0xac>)
    6e72:	4798      	blx	r3
    6e74:	4604      	mov	r4, r0
    6e76:	e7b1      	b.n	6ddc <tcp_alloc+0x10>
    6e78:	00005d09 	.word	0x00005d09
    6e7c:	0000cd69 	.word	0x0000cd69
    6e80:	00006db5 	.word	0x00006db5
    6e84:	200161f4 	.word	0x200161f4
    6e88:	200080c1 	.word	0x200080c1
    6e8c:	00006ae1 	.word	0x00006ae1
    6e90:	006ddd00 	.word	0x006ddd00
    6e94:	00006d35 	.word	0x00006d35
    6e98:	00006d6d 	.word	0x00006d6d

00006e9c <tcp_new>:
{
    6e9c:	b508      	push	{r3, lr}
	return tcp_alloc(TCP_PRIO_NORMAL);
    6e9e:	2040      	movs	r0, #64	; 0x40
    6ea0:	4b01      	ldr	r3, [pc, #4]	; (6ea8 <tcp_new+0xc>)
    6ea2:	4798      	blx	r3
}
    6ea4:	bd08      	pop	{r3, pc}
    6ea6:	bf00      	nop
    6ea8:	00006dcd 	.word	0x00006dcd

00006eac <tcp_eff_send_mss>:
 * Calcluates the effective send mss that can be used for a specific IP address
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
    6eac:	b510      	push	{r4, lr}
    6eae:	4604      	mov	r4, r0
	u16_t         mss_s;
	struct netif *outif;

	outif = ip_route(addr);
    6eb0:	4608      	mov	r0, r1
    6eb2:	4b07      	ldr	r3, [pc, #28]	; (6ed0 <tcp_eff_send_mss+0x24>)
    6eb4:	4798      	blx	r3
	if ((outif != NULL) && (outif->mtu != 0)) {
    6eb6:	b138      	cbz	r0, 6ec8 <tcp_eff_send_mss+0x1c>
    6eb8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    6eba:	b13b      	cbz	r3, 6ecc <tcp_eff_send_mss+0x20>
		mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    6ebc:	3b28      	subs	r3, #40	; 0x28
    6ebe:	b298      	uxth	r0, r3
		/* RFC 1122, chap 4.2.2.6:
		 * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
		 * We correct for TCP options in tcp_write(), and don't support IP options.
		 */
		sendmss = LWIP_MIN(sendmss, mss_s);
    6ec0:	42a0      	cmp	r0, r4
    6ec2:	bf28      	it	cs
    6ec4:	4620      	movcs	r0, r4
    6ec6:	bd10      	pop	{r4, pc}
    6ec8:	4620      	mov	r0, r4
    6eca:	bd10      	pop	{r4, pc}
    6ecc:	4620      	mov	r0, r4
	}
	return sendmss;
}
    6ece:	bd10      	pop	{r4, pc}
    6ed0:	00004d95 	.word	0x00004d95

00006ed4 <tcp_parseopt>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void tcp_parseopt(struct tcp_pcb *pcb)
{
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	4605      	mov	r5, r0
	u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
	u32_t tsval;
#endif

	opts = (u8_t *)tcphdr + TCP_HLEN;
    6ed8:	4b21      	ldr	r3, [pc, #132]	; (6f60 <tcp_parseopt+0x8c>)
    6eda:	681b      	ldr	r3, [r3, #0]
    6edc:	f103 0414 	add.w	r4, r3, #20

	/* Parse the TCP MSS option, if present. */
	if (TCPH_HDRLEN(tcphdr) > 0x5) {
    6ee0:	8998      	ldrh	r0, [r3, #12]
    6ee2:	4b20      	ldr	r3, [pc, #128]	; (6f64 <tcp_parseopt+0x90>)
    6ee4:	4798      	blx	r3
    6ee6:	f3c0 300f 	ubfx	r0, r0, #12, #16
    6eea:	2805      	cmp	r0, #5
    6eec:	d800      	bhi.n	6ef0 <tcp_parseopt+0x1c>
    6eee:	bd70      	pop	{r4, r5, r6, pc}
		max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    6ef0:	4b1b      	ldr	r3, [pc, #108]	; (6f60 <tcp_parseopt+0x8c>)
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	8998      	ldrh	r0, [r3, #12]
    6ef6:	4b1b      	ldr	r3, [pc, #108]	; (6f64 <tcp_parseopt+0x90>)
    6ef8:	4798      	blx	r3
    6efa:	0b02      	lsrs	r2, r0, #12
    6efc:	3a05      	subs	r2, #5
    6efe:	b292      	uxth	r2, r2
    6f00:	0092      	lsls	r2, r2, #2
    6f02:	b292      	uxth	r2, r2
		for (c = 0; c < max_c;) {
    6f04:	2300      	movs	r3, #0
    6f06:	4293      	cmp	r3, r2
    6f08:	d2f1      	bcs.n	6eee <tcp_parseopt+0x1a>
			opt = opts[c];
    6f0a:	4618      	mov	r0, r3
    6f0c:	5ce1      	ldrb	r1, [r4, r3]
			switch (opt) {
    6f0e:	2901      	cmp	r1, #1
    6f10:	d00a      	beq.n	6f28 <tcp_parseopt+0x54>
    6f12:	2900      	cmp	r1, #0
    6f14:	d0eb      	beq.n	6eee <tcp_parseopt+0x1a>
    6f16:	2902      	cmp	r1, #2
    6f18:	d009      	beq.n	6f2e <tcp_parseopt+0x5a>
				c += 0x0A;
				break;
#endif
			default:
				LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
				if (opts[c + 1] == 0) {
    6f1a:	4420      	add	r0, r4
    6f1c:	7841      	ldrb	r1, [r0, #1]
    6f1e:	2900      	cmp	r1, #0
    6f20:	d0e5      	beq.n	6eee <tcp_parseopt+0x1a>
					   and we don't process them further. */
					return;
				}
				/* All other options have a length field, so that we easily
				   can skip past them. */
				c += opts[c + 1];
    6f22:	440b      	add	r3, r1
    6f24:	b29b      	uxth	r3, r3
    6f26:	e7ee      	b.n	6f06 <tcp_parseopt+0x32>
				++c;
    6f28:	3301      	adds	r3, #1
    6f2a:	b29b      	uxth	r3, r3
				break;
    6f2c:	e7eb      	b.n	6f06 <tcp_parseopt+0x32>
				if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
    6f2e:	18e1      	adds	r1, r4, r3
    6f30:	7849      	ldrb	r1, [r1, #1]
    6f32:	2904      	cmp	r1, #4
    6f34:	d1db      	bne.n	6eee <tcp_parseopt+0x1a>
    6f36:	1d19      	adds	r1, r3, #4
    6f38:	4291      	cmp	r1, r2
    6f3a:	dcd8      	bgt.n	6eee <tcp_parseopt+0x1a>
				mss = (opts[c + 2] << 8) | opts[c + 3];
    6f3c:	4420      	add	r0, r4
    6f3e:	7886      	ldrb	r6, [r0, #2]
    6f40:	78c1      	ldrb	r1, [r0, #3]
    6f42:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
    6f46:	1e48      	subs	r0, r1, #1
    6f48:	b280      	uxth	r0, r0
    6f4a:	f240 56b3 	movw	r6, #1459	; 0x5b3
    6f4e:	42b0      	cmp	r0, r6
    6f50:	d901      	bls.n	6f56 <tcp_parseopt+0x82>
    6f52:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6f56:	86e9      	strh	r1, [r5, #54]	; 0x36
				c += 0x04;
    6f58:	3304      	adds	r3, #4
    6f5a:	b29b      	uxth	r3, r3
				break;
    6f5c:	e7d3      	b.n	6f06 <tcp_parseopt+0x32>
    6f5e:	bf00      	nop
    6f60:	200080c4 	.word	0x200080c4
    6f64:	00003ecd 	.word	0x00003ecd

00006f68 <tcp_timewait_input>:
	if (flags & TCP_RST) {
    6f68:	4b1c      	ldr	r3, [pc, #112]	; (6fdc <tcp_timewait_input+0x74>)
    6f6a:	791b      	ldrb	r3, [r3, #4]
    6f6c:	f013 0f04 	tst.w	r3, #4
    6f70:	d12f      	bne.n	6fd2 <tcp_timewait_input+0x6a>
{
    6f72:	b510      	push	{r4, lr}
    6f74:	b082      	sub	sp, #8
	if (flags & TCP_SYN) {
    6f76:	f013 0f02 	tst.w	r3, #2
    6f7a:	d01a      	beq.n	6fb2 <tcp_timewait_input+0x4a>
		if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
    6f7c:	4b17      	ldr	r3, [pc, #92]	; (6fdc <tcp_timewait_input+0x74>)
    6f7e:	6899      	ldr	r1, [r3, #8]
    6f80:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6f82:	1aca      	subs	r2, r1, r3
    6f84:	2a00      	cmp	r2, #0
    6f86:	db1a      	blt.n	6fbe <tcp_timewait_input+0x56>
    6f88:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    6f8a:	4413      	add	r3, r2
    6f8c:	1acb      	subs	r3, r1, r3
    6f8e:	2b00      	cmp	r3, #0
    6f90:	dc15      	bgt.n	6fbe <tcp_timewait_input+0x56>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    6f92:	4812      	ldr	r0, [pc, #72]	; (6fdc <tcp_timewait_input+0x74>)
    6f94:	6803      	ldr	r3, [r0, #0]
    6f96:	8984      	ldrh	r4, [r0, #12]
    6f98:	881a      	ldrh	r2, [r3, #0]
    6f9a:	9201      	str	r2, [sp, #4]
    6f9c:	885b      	ldrh	r3, [r3, #2]
    6f9e:	9300      	str	r3, [sp, #0]
    6fa0:	4b0f      	ldr	r3, [pc, #60]	; (6fe0 <tcp_timewait_input+0x78>)
    6fa2:	4a10      	ldr	r2, [pc, #64]	; (6fe4 <tcp_timewait_input+0x7c>)
    6fa4:	4421      	add	r1, r4
    6fa6:	6900      	ldr	r0, [r0, #16]
    6fa8:	4c0f      	ldr	r4, [pc, #60]	; (6fe8 <tcp_timewait_input+0x80>)
    6faa:	47a0      	blx	r4
			return ERR_OK;
    6fac:	2000      	movs	r0, #0
}
    6fae:	b002      	add	sp, #8
    6fb0:	bd10      	pop	{r4, pc}
	} else if (flags & TCP_FIN) {
    6fb2:	f013 0f01 	tst.w	r3, #1
    6fb6:	d002      	beq.n	6fbe <tcp_timewait_input+0x56>
		pcb->tmr = tcp_ticks;
    6fb8:	4b0c      	ldr	r3, [pc, #48]	; (6fec <tcp_timewait_input+0x84>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	6243      	str	r3, [r0, #36]	; 0x24
	if ((tcplen > 0)) {
    6fbe:	4b07      	ldr	r3, [pc, #28]	; (6fdc <tcp_timewait_input+0x74>)
    6fc0:	899b      	ldrh	r3, [r3, #12]
    6fc2:	b143      	cbz	r3, 6fd6 <tcp_timewait_input+0x6e>
		pcb->flags |= TF_ACK_NOW;
    6fc4:	7f83      	ldrb	r3, [r0, #30]
    6fc6:	f043 0302 	orr.w	r3, r3, #2
    6fca:	7783      	strb	r3, [r0, #30]
		return tcp_output(pcb);
    6fcc:	4b08      	ldr	r3, [pc, #32]	; (6ff0 <tcp_timewait_input+0x88>)
    6fce:	4798      	blx	r3
    6fd0:	e7ed      	b.n	6fae <tcp_timewait_input+0x46>
		return ERR_OK;
    6fd2:	2000      	movs	r0, #0
    6fd4:	4770      	bx	lr
	return ERR_OK;
    6fd6:	2000      	movs	r0, #0
    6fd8:	e7e9      	b.n	6fae <tcp_timewait_input+0x46>
    6fda:	bf00      	nop
    6fdc:	200080c4 	.word	0x200080c4
    6fe0:	200129bc 	.word	0x200129bc
    6fe4:	200129c4 	.word	0x200129c4
    6fe8:	00008c2d 	.word	0x00008c2d
    6fec:	200161f4 	.word	0x200161f4
    6ff0:	00008a51 	.word	0x00008a51

00006ff4 <tcp_listen_input>:
{
    6ff4:	b530      	push	{r4, r5, lr}
    6ff6:	b083      	sub	sp, #12
	if (flags & TCP_RST) {
    6ff8:	4b37      	ldr	r3, [pc, #220]	; (70d8 <tcp_listen_input+0xe4>)
    6ffa:	791b      	ldrb	r3, [r3, #4]
    6ffc:	f013 0f04 	tst.w	r3, #4
    7000:	d163      	bne.n	70ca <tcp_listen_input+0xd6>
    7002:	4605      	mov	r5, r0
	if (flags & TCP_ACK) {
    7004:	f013 0f10 	tst.w	r3, #16
    7008:	d011      	beq.n	702e <tcp_listen_input+0x3a>
		tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    700a:	4833      	ldr	r0, [pc, #204]	; (70d8 <tcp_listen_input+0xe4>)
    700c:	6803      	ldr	r3, [r0, #0]
    700e:	8984      	ldrh	r4, [r0, #12]
    7010:	6881      	ldr	r1, [r0, #8]
    7012:	881a      	ldrh	r2, [r3, #0]
    7014:	9201      	str	r2, [sp, #4]
    7016:	885b      	ldrh	r3, [r3, #2]
    7018:	9300      	str	r3, [sp, #0]
    701a:	4b30      	ldr	r3, [pc, #192]	; (70dc <tcp_listen_input+0xe8>)
    701c:	4a30      	ldr	r2, [pc, #192]	; (70e0 <tcp_listen_input+0xec>)
    701e:	4421      	add	r1, r4
    7020:	6900      	ldr	r0, [r0, #16]
    7022:	4c30      	ldr	r4, [pc, #192]	; (70e4 <tcp_listen_input+0xf0>)
    7024:	47a0      	blx	r4
	return ERR_OK;
    7026:	2500      	movs	r5, #0
}
    7028:	4628      	mov	r0, r5
    702a:	b003      	add	sp, #12
    702c:	bd30      	pop	{r4, r5, pc}
	} else if (flags & TCP_SYN) {
    702e:	f013 0f02 	tst.w	r3, #2
    7032:	d04c      	beq.n	70ce <tcp_listen_input+0xda>
		npcb = tcp_alloc(pcb->prio);
    7034:	7e40      	ldrb	r0, [r0, #25]
    7036:	4b2c      	ldr	r3, [pc, #176]	; (70e8 <tcp_listen_input+0xf4>)
    7038:	4798      	blx	r3
		if (npcb == NULL) {
    703a:	4604      	mov	r4, r0
    703c:	2800      	cmp	r0, #0
    703e:	d048      	beq.n	70d2 <tcp_listen_input+0xde>
		ip_addr_copy(npcb->local_ip, current_iphdr_dest);
    7040:	4b27      	ldr	r3, [pc, #156]	; (70e0 <tcp_listen_input+0xec>)
    7042:	681b      	ldr	r3, [r3, #0]
    7044:	6003      	str	r3, [r0, #0]
		npcb->local_port = pcb->local_port;
    7046:	8b6b      	ldrh	r3, [r5, #26]
    7048:	8343      	strh	r3, [r0, #26]
		ip_addr_copy(npcb->remote_ip, current_iphdr_src);
    704a:	4b24      	ldr	r3, [pc, #144]	; (70dc <tcp_listen_input+0xe8>)
    704c:	681b      	ldr	r3, [r3, #0]
    704e:	6043      	str	r3, [r0, #4]
		npcb->remote_port        = tcphdr->src;
    7050:	4b21      	ldr	r3, [pc, #132]	; (70d8 <tcp_listen_input+0xe4>)
    7052:	681a      	ldr	r2, [r3, #0]
    7054:	8811      	ldrh	r1, [r2, #0]
    7056:	8381      	strh	r1, [r0, #28]
		npcb->state              = SYN_RCVD;
    7058:	2103      	movs	r1, #3
    705a:	7601      	strb	r1, [r0, #24]
		npcb->rcv_nxt            = seqno + 1;
    705c:	689b      	ldr	r3, [r3, #8]
    705e:	1c59      	adds	r1, r3, #1
    7060:	6281      	str	r1, [r0, #40]	; 0x28
		npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    7062:	6301      	str	r1, [r0, #48]	; 0x30
		npcb->snd_wnd            = tcphdr->wnd;
    7064:	89d1      	ldrh	r1, [r2, #14]
    7066:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
		npcb->snd_wnd_max        = tcphdr->wnd;
    706a:	89d2      	ldrh	r2, [r2, #14]
    706c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		npcb->ssthresh           = npcb->snd_wnd;
    7070:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
		npcb->snd_wl1            = seqno - 1; /* initialise to seqno-1 to force window update */
    7074:	3b01      	subs	r3, #1
    7076:	6543      	str	r3, [r0, #84]	; 0x54
		npcb->callback_arg       = pcb->callback_arg;
    7078:	692b      	ldr	r3, [r5, #16]
    707a:	6103      	str	r3, [r0, #16]
		npcb->accept = pcb->accept;
    707c:	696b      	ldr	r3, [r5, #20]
    707e:	6143      	str	r3, [r0, #20]
		npcb->so_options = pcb->so_options & SOF_INHERITED;
    7080:	7a2b      	ldrb	r3, [r5, #8]
    7082:	f003 038c 	and.w	r3, r3, #140	; 0x8c
    7086:	7203      	strb	r3, [r0, #8]
		TCP_REG_ACTIVE(npcb);
    7088:	4b18      	ldr	r3, [pc, #96]	; (70ec <tcp_listen_input+0xf8>)
    708a:	681a      	ldr	r2, [r3, #0]
    708c:	60c2      	str	r2, [r0, #12]
    708e:	6018      	str	r0, [r3, #0]
    7090:	4b17      	ldr	r3, [pc, #92]	; (70f0 <tcp_listen_input+0xfc>)
    7092:	4798      	blx	r3
    7094:	2201      	movs	r2, #1
    7096:	4b17      	ldr	r3, [pc, #92]	; (70f4 <tcp_listen_input+0x100>)
    7098:	701a      	strb	r2, [r3, #0]
		tcp_parseopt(npcb);
    709a:	4620      	mov	r0, r4
    709c:	4b16      	ldr	r3, [pc, #88]	; (70f8 <tcp_listen_input+0x104>)
    709e:	4798      	blx	r3
		npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
    70a0:	1d21      	adds	r1, r4, #4
    70a2:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    70a4:	4b15      	ldr	r3, [pc, #84]	; (70fc <tcp_listen_input+0x108>)
    70a6:	4798      	blx	r3
    70a8:	86e0      	strh	r0, [r4, #54]	; 0x36
		rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
    70aa:	2112      	movs	r1, #18
    70ac:	4620      	mov	r0, r4
    70ae:	4b14      	ldr	r3, [pc, #80]	; (7100 <tcp_listen_input+0x10c>)
    70b0:	4798      	blx	r3
		if (rc != ERR_OK) {
    70b2:	4605      	mov	r5, r0
    70b4:	b120      	cbz	r0, 70c0 <tcp_listen_input+0xcc>
			tcp_abandon(npcb, 0);
    70b6:	2100      	movs	r1, #0
    70b8:	4620      	mov	r0, r4
    70ba:	4b12      	ldr	r3, [pc, #72]	; (7104 <tcp_listen_input+0x110>)
    70bc:	4798      	blx	r3
			return rc;
    70be:	e7b3      	b.n	7028 <tcp_listen_input+0x34>
		return tcp_output(npcb);
    70c0:	4620      	mov	r0, r4
    70c2:	4b11      	ldr	r3, [pc, #68]	; (7108 <tcp_listen_input+0x114>)
    70c4:	4798      	blx	r3
    70c6:	4605      	mov	r5, r0
    70c8:	e7ae      	b.n	7028 <tcp_listen_input+0x34>
		return ERR_OK;
    70ca:	2500      	movs	r5, #0
    70cc:	e7ac      	b.n	7028 <tcp_listen_input+0x34>
	return ERR_OK;
    70ce:	2500      	movs	r5, #0
    70d0:	e7aa      	b.n	7028 <tcp_listen_input+0x34>
			return ERR_MEM;
    70d2:	f04f 35ff 	mov.w	r5, #4294967295
    70d6:	e7a7      	b.n	7028 <tcp_listen_input+0x34>
    70d8:	200080c4 	.word	0x200080c4
    70dc:	200129bc 	.word	0x200129bc
    70e0:	200129c4 	.word	0x200129c4
    70e4:	00008c2d 	.word	0x00008c2d
    70e8:	00006dcd 	.word	0x00006dcd
    70ec:	200161f0 	.word	0x200161f0
    70f0:	00008f65 	.word	0x00008f65
    70f4:	200161ec 	.word	0x200161ec
    70f8:	00006ed5 	.word	0x00006ed5
    70fc:	00006ead 	.word	0x00006ead
    7100:	000088ad 	.word	0x000088ad
    7104:	00006c81 	.word	0x00006c81
    7108:	00008a51 	.word	0x00008a51

0000710c <tcp_oos_insert_segment>:
{
    710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    710e:	4605      	mov	r5, r0
    7110:	460c      	mov	r4, r1
	if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    7112:	68c3      	ldr	r3, [r0, #12]
    7114:	8998      	ldrh	r0, [r3, #12]
    7116:	4b1d      	ldr	r3, [pc, #116]	; (718c <tcp_oos_insert_segment+0x80>)
    7118:	4798      	blx	r3
    711a:	f010 0f01 	tst.w	r0, #1
    711e:	d009      	beq.n	7134 <tcp_oos_insert_segment+0x28>
		tcp_segs_free(next);
    7120:	4620      	mov	r0, r4
    7122:	4b1b      	ldr	r3, [pc, #108]	; (7190 <tcp_oos_insert_segment+0x84>)
    7124:	4798      	blx	r3
		next = NULL;
    7126:	2400      	movs	r4, #0
    7128:	e02e      	b.n	7188 <tcp_oos_insert_segment+0x7c>
			next    = next->next;
    712a:	6826      	ldr	r6, [r4, #0]
			tcp_seg_free(old_seg);
    712c:	4620      	mov	r0, r4
    712e:	4b19      	ldr	r3, [pc, #100]	; (7194 <tcp_oos_insert_segment+0x88>)
    7130:	4798      	blx	r3
			next    = next->next;
    7132:	4634      	mov	r4, r6
		while (next && TCP_SEQ_GEQ((seqno + cseg->len), (next->tcphdr->seqno + next->len))) {
    7134:	b1c4      	cbz	r4, 7168 <tcp_oos_insert_segment+0x5c>
    7136:	892b      	ldrh	r3, [r5, #8]
    7138:	4a17      	ldr	r2, [pc, #92]	; (7198 <tcp_oos_insert_segment+0x8c>)
    713a:	6892      	ldr	r2, [r2, #8]
    713c:	4413      	add	r3, r2
    713e:	68e1      	ldr	r1, [r4, #12]
    7140:	684a      	ldr	r2, [r1, #4]
    7142:	8920      	ldrh	r0, [r4, #8]
    7144:	4402      	add	r2, r0
    7146:	1a9b      	subs	r3, r3, r2
    7148:	2b00      	cmp	r3, #0
    714a:	db0d      	blt.n	7168 <tcp_oos_insert_segment+0x5c>
			if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    714c:	8988      	ldrh	r0, [r1, #12]
    714e:	4b0f      	ldr	r3, [pc, #60]	; (718c <tcp_oos_insert_segment+0x80>)
    7150:	4798      	blx	r3
    7152:	f010 0f01 	tst.w	r0, #1
    7156:	d0e8      	beq.n	712a <tcp_oos_insert_segment+0x1e>
				TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
    7158:	68ef      	ldr	r7, [r5, #12]
    715a:	89be      	ldrh	r6, [r7, #12]
    715c:	2001      	movs	r0, #1
    715e:	4b0f      	ldr	r3, [pc, #60]	; (719c <tcp_oos_insert_segment+0x90>)
    7160:	4798      	blx	r3
    7162:	4330      	orrs	r0, r6
    7164:	81b8      	strh	r0, [r7, #12]
    7166:	e7e0      	b.n	712a <tcp_oos_insert_segment+0x1e>
		if (next && TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
    7168:	b174      	cbz	r4, 7188 <tcp_oos_insert_segment+0x7c>
    716a:	892b      	ldrh	r3, [r5, #8]
    716c:	4a0a      	ldr	r2, [pc, #40]	; (7198 <tcp_oos_insert_segment+0x8c>)
    716e:	6891      	ldr	r1, [r2, #8]
    7170:	440b      	add	r3, r1
    7172:	68e2      	ldr	r2, [r4, #12]
    7174:	6852      	ldr	r2, [r2, #4]
    7176:	1a9b      	subs	r3, r3, r2
    7178:	2b00      	cmp	r3, #0
    717a:	dd05      	ble.n	7188 <tcp_oos_insert_segment+0x7c>
			cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
    717c:	1a52      	subs	r2, r2, r1
    717e:	b291      	uxth	r1, r2
    7180:	8129      	strh	r1, [r5, #8]
			pbuf_realloc(cseg->p, cseg->len);
    7182:	6868      	ldr	r0, [r5, #4]
    7184:	4b06      	ldr	r3, [pc, #24]	; (71a0 <tcp_oos_insert_segment+0x94>)
    7186:	4798      	blx	r3
	cseg->next = next;
    7188:	602c      	str	r4, [r5, #0]
    718a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    718c:	00003ecd 	.word	0x00003ecd
    7190:	000064e9 	.word	0x000064e9
    7194:	000064c5 	.word	0x000064c5
    7198:	200080c4 	.word	0x200080c4
    719c:	00003ec1 	.word	0x00003ec1
    71a0:	00006195 	.word	0x00006195

000071a4 <tcp_receive>:
{
    71a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71a8:	4604      	mov	r4, r0
	if (flags & TCP_ACK) {
    71aa:	4b8e      	ldr	r3, [pc, #568]	; (73e4 <tcp_receive+0x240>)
    71ac:	791b      	ldrb	r3, [r3, #4]
    71ae:	f013 0f10 	tst.w	r3, #16
    71b2:	f000 816c 	beq.w	748e <tcp_receive+0x2ea>
		right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
    71b6:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
    71ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
    71bc:	1886      	adds	r6, r0, r2
		if (TCP_SEQ_LT(pcb->snd_wl1, seqno) || (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno))
    71be:	6d61      	ldr	r1, [r4, #84]	; 0x54
    71c0:	4b88      	ldr	r3, [pc, #544]	; (73e4 <tcp_receive+0x240>)
    71c2:	689b      	ldr	r3, [r3, #8]
    71c4:	1acd      	subs	r5, r1, r3
    71c6:	2d00      	cmp	r5, #0
    71c8:	db20      	blt.n	720c <tcp_receive+0x68>
    71ca:	4299      	cmp	r1, r3
    71cc:	d013      	beq.n	71f6 <tcp_receive+0x52>
		    || (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    71ce:	4985      	ldr	r1, [pc, #532]	; (73e4 <tcp_receive+0x240>)
    71d0:	6909      	ldr	r1, [r1, #16]
    71d2:	428a      	cmp	r2, r1
    71d4:	d015      	beq.n	7202 <tcp_receive+0x5e>
		if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
    71d6:	4b83      	ldr	r3, [pc, #524]	; (73e4 <tcp_receive+0x240>)
    71d8:	691a      	ldr	r2, [r3, #16]
    71da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    71dc:	1ad1      	subs	r1, r2, r3
    71de:	2900      	cmp	r1, #0
    71e0:	dd39      	ble.n	7256 <tcp_receive+0xb2>
		} else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    71e2:	2901      	cmp	r1, #1
    71e4:	d403      	bmi.n	71ee <tcp_receive+0x4a>
    71e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    71e8:	1a51      	subs	r1, r2, r1
    71ea:	2900      	cmp	r1, #0
    71ec:	dd74      	ble.n	72d8 <tcp_receive+0x134>
			pcb->acked = 0;
    71ee:	2300      	movs	r3, #0
    71f0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    71f4:	e10e      	b.n	7414 <tcp_receive+0x270>
		if (TCP_SEQ_LT(pcb->snd_wl1, seqno) || (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno))
    71f6:	497b      	ldr	r1, [pc, #492]	; (73e4 <tcp_receive+0x240>)
    71f8:	6909      	ldr	r1, [r1, #16]
    71fa:	1a51      	subs	r1, r2, r1
    71fc:	2900      	cmp	r1, #0
    71fe:	dae6      	bge.n	71ce <tcp_receive+0x2a>
    7200:	e004      	b.n	720c <tcp_receive+0x68>
		    || (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
    7202:	4a78      	ldr	r2, [pc, #480]	; (73e4 <tcp_receive+0x240>)
    7204:	6812      	ldr	r2, [r2, #0]
    7206:	89d2      	ldrh	r2, [r2, #14]
    7208:	4290      	cmp	r0, r2
    720a:	d2e4      	bcs.n	71d6 <tcp_receive+0x32>
			pcb->snd_wnd = tcphdr->wnd;
    720c:	4a75      	ldr	r2, [pc, #468]	; (73e4 <tcp_receive+0x240>)
    720e:	6812      	ldr	r2, [r2, #0]
    7210:	89d1      	ldrh	r1, [r2, #14]
    7212:	b288      	uxth	r0, r1
    7214:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
			if (pcb->snd_wnd_max < tcphdr->wnd) {
    7218:	f8b4 5062 	ldrh.w	r5, [r4, #98]	; 0x62
    721c:	89d2      	ldrh	r2, [r2, #14]
    721e:	b291      	uxth	r1, r2
    7220:	428d      	cmp	r5, r1
    7222:	d201      	bcs.n	7228 <tcp_receive+0x84>
				pcb->snd_wnd_max = tcphdr->wnd;
    7224:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
			pcb->snd_wl1 = seqno;
    7228:	6563      	str	r3, [r4, #84]	; 0x54
			pcb->snd_wl2 = ackno;
    722a:	4b6e      	ldr	r3, [pc, #440]	; (73e4 <tcp_receive+0x240>)
    722c:	691b      	ldr	r3, [r3, #16]
    722e:	65a3      	str	r3, [r4, #88]	; 0x58
			if (pcb->snd_wnd == 0) {
    7230:	b948      	cbnz	r0, 7246 <tcp_receive+0xa2>
				if (pcb->persist_backoff == 0) {
    7232:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    7236:	2b00      	cmp	r3, #0
    7238:	d1cd      	bne.n	71d6 <tcp_receive+0x32>
					pcb->persist_cnt     = 0;
    723a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
					pcb->persist_backoff = 1;
    723e:	2301      	movs	r3, #1
    7240:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    7244:	e7c7      	b.n	71d6 <tcp_receive+0x32>
			} else if (pcb->persist_backoff > 0) {
    7246:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    724a:	2b00      	cmp	r3, #0
    724c:	d0c3      	beq.n	71d6 <tcp_receive+0x32>
				pcb->persist_backoff = 0;
    724e:	2300      	movs	r3, #0
    7250:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    7254:	e7bf      	b.n	71d6 <tcp_receive+0x32>
			pcb->acked = 0;
    7256:	2100      	movs	r1, #0
    7258:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
			if (tcplen == 0) {
    725c:	4961      	ldr	r1, [pc, #388]	; (73e4 <tcp_receive+0x240>)
    725e:	8989      	ldrh	r1, [r1, #12]
    7260:	bb79      	cbnz	r1, 72c2 <tcp_receive+0x11e>
				if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
    7262:	6da1      	ldr	r1, [r4, #88]	; 0x58
    7264:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
    7268:	4401      	add	r1, r0
    726a:	428e      	cmp	r6, r1
    726c:	d001      	beq.n	7272 <tcp_receive+0xce>
	int          found_dupack = 0;
    726e:	2300      	movs	r3, #0
    7270:	e028      	b.n	72c4 <tcp_receive+0x120>
					if (pcb->rtime >= 0) {
    7272:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
    7276:	2900      	cmp	r1, #0
    7278:	db2a      	blt.n	72d0 <tcp_receive+0x12c>
						if (pcb->lastack == ackno) {
    727a:	429a      	cmp	r2, r3
    727c:	d001      	beq.n	7282 <tcp_receive+0xde>
	int          found_dupack = 0;
    727e:	2300      	movs	r3, #0
    7280:	e020      	b.n	72c4 <tcp_receive+0x120>
							if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
    7282:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
    7286:	1c53      	adds	r3, r2, #1
    7288:	b2db      	uxtb	r3, r3
    728a:	429a      	cmp	r2, r3
    728c:	d201      	bcs.n	7292 <tcp_receive+0xee>
								++pcb->dupacks;
    728e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
							if (pcb->dupacks > 3) {
    7292:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
    7296:	2b03      	cmp	r3, #3
    7298:	d90a      	bls.n	72b0 <tcp_receive+0x10c>
								if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    729a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    729e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    72a0:	4413      	add	r3, r2
    72a2:	b29b      	uxth	r3, r3
    72a4:	429a      	cmp	r2, r3
    72a6:	d215      	bcs.n	72d4 <tcp_receive+0x130>
									pcb->cwnd += pcb->mss;
    72a8:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
							found_dupack = 1;
    72ac:	2301      	movs	r3, #1
    72ae:	e009      	b.n	72c4 <tcp_receive+0x120>
							} else if (pcb->dupacks == 3) {
    72b0:	2b03      	cmp	r3, #3
    72b2:	d001      	beq.n	72b8 <tcp_receive+0x114>
							found_dupack = 1;
    72b4:	2301      	movs	r3, #1
    72b6:	e005      	b.n	72c4 <tcp_receive+0x120>
								tcp_rexmit_fast(pcb);
    72b8:	4620      	mov	r0, r4
    72ba:	4b4b      	ldr	r3, [pc, #300]	; (73e8 <tcp_receive+0x244>)
    72bc:	4798      	blx	r3
							found_dupack = 1;
    72be:	2301      	movs	r3, #1
    72c0:	e000      	b.n	72c4 <tcp_receive+0x120>
	int          found_dupack = 0;
    72c2:	2300      	movs	r3, #0
			if (!found_dupack) {
    72c4:	2b00      	cmp	r3, #0
    72c6:	f040 80a5 	bne.w	7414 <tcp_receive+0x270>
				pcb->dupacks = 0;
    72ca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    72ce:	e0a1      	b.n	7414 <tcp_receive+0x270>
	int          found_dupack = 0;
    72d0:	2300      	movs	r3, #0
    72d2:	e7f7      	b.n	72c4 <tcp_receive+0x120>
							found_dupack = 1;
    72d4:	2301      	movs	r3, #1
    72d6:	e7f5      	b.n	72c4 <tcp_receive+0x120>
			if (pcb->flags & TF_INFR) {
    72d8:	7fa1      	ldrb	r1, [r4, #30]
    72da:	f011 0f04 	tst.w	r1, #4
    72de:	d006      	beq.n	72ee <tcp_receive+0x14a>
				pcb->flags &= ~TF_INFR;
    72e0:	f021 0104 	bic.w	r1, r1, #4
    72e4:	77a1      	strb	r1, [r4, #30]
				pcb->cwnd = pcb->ssthresh;
    72e6:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    72ea:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
			pcb->nrtx = 0;
    72ee:	2000      	movs	r0, #0
    72f0:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
			pcb->rto = (pcb->sa >> 3) + pcb->sv;
    72f4:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	; 0x40
    72f8:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    72fc:	eb01 01e5 	add.w	r1, r1, r5, asr #3
    7300:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
			pcb->acked = (u16_t)(ackno - pcb->lastack);
    7304:	1ad3      	subs	r3, r2, r3
    7306:	b29b      	uxth	r3, r3
    7308:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
			pcb->snd_buf += pcb->acked;
    730c:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
    7310:	440b      	add	r3, r1
    7312:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pcb->dupacks = 0;
    7316:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
			pcb->lastack = ackno;
    731a:	64a2      	str	r2, [r4, #72]	; 0x48
			if (pcb->state >= ESTABLISHED) {
    731c:	7e23      	ldrb	r3, [r4, #24]
    731e:	2b03      	cmp	r3, #3
    7320:	d926      	bls.n	7370 <tcp_receive+0x1cc>
				if (pcb->cwnd < pcb->ssthresh) {
    7322:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
    7326:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    732a:	429a      	cmp	r2, r3
    732c:	d207      	bcs.n	733e <tcp_receive+0x19a>
					if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
    732e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7330:	4413      	add	r3, r2
    7332:	b29b      	uxth	r3, r3
    7334:	429a      	cmp	r2, r3
    7336:	d21b      	bcs.n	7370 <tcp_receive+0x1cc>
						pcb->cwnd += pcb->mss;
    7338:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    733c:	e018      	b.n	7370 <tcp_receive+0x1cc>
					u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
    733e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7340:	fb03 f303 	mul.w	r3, r3, r3
    7344:	fb93 f3f2 	sdiv	r3, r3, r2
    7348:	fa12 f383 	uxtah	r3, r2, r3
    734c:	b29b      	uxth	r3, r3
					if (new_cwnd > pcb->cwnd) {
    734e:	429a      	cmp	r2, r3
    7350:	d20e      	bcs.n	7370 <tcp_receive+0x1cc>
						pcb->cwnd = new_cwnd;
    7352:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    7356:	e00b      	b.n	7370 <tcp_receive+0x1cc>
				pcb->snd_queuelen -= pbuf_clen(next->p);
    7358:	6868      	ldr	r0, [r5, #4]
    735a:	4b24      	ldr	r3, [pc, #144]	; (73ec <tcp_receive+0x248>)
    735c:	4798      	blx	r3
    735e:	b280      	uxth	r0, r0
    7360:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7364:	1a18      	subs	r0, r3, r0
    7366:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
				tcp_seg_free(next);
    736a:	4628      	mov	r0, r5
    736c:	4b20      	ldr	r3, [pc, #128]	; (73f0 <tcp_receive+0x24c>)
    736e:	4798      	blx	r3
			while (pcb->unacked != NULL
    7370:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7372:	b34b      	cbz	r3, 73c8 <tcp_receive+0x224>
			       && TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked), ackno)) {
    7374:	68db      	ldr	r3, [r3, #12]
    7376:	6858      	ldr	r0, [r3, #4]
    7378:	4b1e      	ldr	r3, [pc, #120]	; (73f4 <tcp_receive+0x250>)
    737a:	4798      	blx	r3
    737c:	4605      	mov	r5, r0
    737e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7380:	891e      	ldrh	r6, [r3, #8]
    7382:	68db      	ldr	r3, [r3, #12]
    7384:	8998      	ldrh	r0, [r3, #12]
    7386:	4b1c      	ldr	r3, [pc, #112]	; (73f8 <tcp_receive+0x254>)
    7388:	4798      	blx	r3
    738a:	f010 0003 	ands.w	r0, r0, #3
    738e:	bf18      	it	ne
    7390:	2001      	movne	r0, #1
    7392:	4406      	add	r6, r0
    7394:	4435      	add	r5, r6
    7396:	4b13      	ldr	r3, [pc, #76]	; (73e4 <tcp_receive+0x240>)
    7398:	691b      	ldr	r3, [r3, #16]
    739a:	1aed      	subs	r5, r5, r3
    739c:	2d00      	cmp	r5, #0
    739e:	dc13      	bgt.n	73c8 <tcp_receive+0x224>
				next         = pcb->unacked;
    73a0:	6f25      	ldr	r5, [r4, #112]	; 0x70
				pcb->unacked = pcb->unacked->next;
    73a2:	682b      	ldr	r3, [r5, #0]
    73a4:	6723      	str	r3, [r4, #112]	; 0x70
				if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    73a6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    73aa:	2b00      	cmp	r3, #0
    73ac:	d0d4      	beq.n	7358 <tcp_receive+0x1b4>
    73ae:	68eb      	ldr	r3, [r5, #12]
    73b0:	8998      	ldrh	r0, [r3, #12]
    73b2:	4b11      	ldr	r3, [pc, #68]	; (73f8 <tcp_receive+0x254>)
    73b4:	4798      	blx	r3
    73b6:	f010 0f01 	tst.w	r0, #1
    73ba:	d0cd      	beq.n	7358 <tcp_receive+0x1b4>
					pcb->acked--;
    73bc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    73c0:	3b01      	subs	r3, #1
    73c2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    73c6:	e7c7      	b.n	7358 <tcp_receive+0x1b4>
			if (pcb->unacked == NULL)
    73c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    73ca:	b123      	cbz	r3, 73d6 <tcp_receive+0x232>
				pcb->rtime = 0;
    73cc:	2300      	movs	r3, #0
    73ce:	86a3      	strh	r3, [r4, #52]	; 0x34
			pcb->polltmr = 0;
    73d0:	2300      	movs	r3, #0
    73d2:	77e3      	strb	r3, [r4, #31]
    73d4:	e01e      	b.n	7414 <tcp_receive+0x270>
				pcb->rtime = -1;
    73d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    73da:	86a3      	strh	r3, [r4, #52]	; 0x34
    73dc:	e7f8      	b.n	73d0 <tcp_receive+0x22c>
				pcb->unsent_oversize = 0;
    73de:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    73e2:	e03b      	b.n	745c <tcp_receive+0x2b8>
    73e4:	200080c4 	.word	0x200080c4
    73e8:	00008d5d 	.word	0x00008d5d
    73ec:	000061ed 	.word	0x000061ed
    73f0:	000064c5 	.word	0x000064c5
    73f4:	00003ef1 	.word	0x00003ef1
    73f8:	00003ecd 	.word	0x00003ecd
			pcb->snd_queuelen -= pbuf_clen(next->p);
    73fc:	6868      	ldr	r0, [r5, #4]
    73fe:	4b93      	ldr	r3, [pc, #588]	; (764c <tcp_receive+0x4a8>)
    7400:	4798      	blx	r3
    7402:	b280      	uxth	r0, r0
    7404:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7408:	1a18      	subs	r0, r3, r0
    740a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
			tcp_seg_free(next);
    740e:	4628      	mov	r0, r5
    7410:	4b8f      	ldr	r3, [pc, #572]	; (7650 <tcp_receive+0x4ac>)
    7412:	4798      	blx	r3
		while (pcb->unsent != NULL
    7414:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7416:	2b00      	cmp	r3, #0
    7418:	d031      	beq.n	747e <tcp_receive+0x2da>
		       && TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
    741a:	4a8e      	ldr	r2, [pc, #568]	; (7654 <tcp_receive+0x4b0>)
    741c:	6915      	ldr	r5, [r2, #16]
    741e:	68db      	ldr	r3, [r3, #12]
    7420:	6858      	ldr	r0, [r3, #4]
    7422:	4b8d      	ldr	r3, [pc, #564]	; (7658 <tcp_receive+0x4b4>)
    7424:	4798      	blx	r3
    7426:	4606      	mov	r6, r0
    7428:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    742a:	891f      	ldrh	r7, [r3, #8]
    742c:	68db      	ldr	r3, [r3, #12]
    742e:	8998      	ldrh	r0, [r3, #12]
    7430:	4b8a      	ldr	r3, [pc, #552]	; (765c <tcp_receive+0x4b8>)
    7432:	4798      	blx	r3
    7434:	f010 0003 	ands.w	r0, r0, #3
    7438:	bf18      	it	ne
    743a:	2001      	movne	r0, #1
    743c:	4407      	add	r7, r0
    743e:	443e      	add	r6, r7
    7440:	1bad      	subs	r5, r5, r6
    7442:	2d00      	cmp	r5, #0
    7444:	db1b      	blt.n	747e <tcp_receive+0x2da>
    7446:	4b83      	ldr	r3, [pc, #524]	; (7654 <tcp_receive+0x4b0>)
    7448:	691b      	ldr	r3, [r3, #16]
    744a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    744c:	1a9b      	subs	r3, r3, r2
    744e:	2b00      	cmp	r3, #0
    7450:	dc15      	bgt.n	747e <tcp_receive+0x2da>
			next        = pcb->unsent;
    7452:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
			pcb->unsent = pcb->unsent->next;
    7454:	682b      	ldr	r3, [r5, #0]
    7456:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (pcb->unsent == NULL) {
    7458:	2b00      	cmp	r3, #0
    745a:	d0c0      	beq.n	73de <tcp_receive+0x23a>
			if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
    745c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7460:	2b00      	cmp	r3, #0
    7462:	d0cb      	beq.n	73fc <tcp_receive+0x258>
    7464:	68eb      	ldr	r3, [r5, #12]
    7466:	8998      	ldrh	r0, [r3, #12]
    7468:	4b7c      	ldr	r3, [pc, #496]	; (765c <tcp_receive+0x4b8>)
    746a:	4798      	blx	r3
    746c:	f010 0f01 	tst.w	r0, #1
    7470:	d0c4      	beq.n	73fc <tcp_receive+0x258>
				pcb->acked--;
    7472:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7476:	3b01      	subs	r3, #1
    7478:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    747c:	e7be      	b.n	73fc <tcp_receive+0x258>
		if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
    747e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7480:	b12b      	cbz	r3, 748e <tcp_receive+0x2ea>
    7482:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    7484:	4973      	ldr	r1, [pc, #460]	; (7654 <tcp_receive+0x4b0>)
    7486:	6909      	ldr	r1, [r1, #16]
    7488:	1a52      	subs	r2, r2, r1
    748a:	2a00      	cmp	r2, #0
    748c:	db27      	blt.n	74de <tcp_receive+0x33a>
	if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
    748e:	4b71      	ldr	r3, [pc, #452]	; (7654 <tcp_receive+0x4b0>)
    7490:	899b      	ldrh	r3, [r3, #12]
    7492:	2b00      	cmp	r3, #0
    7494:	f000 82a2 	beq.w	79dc <tcp_receive+0x838>
    7498:	7e22      	ldrb	r2, [r4, #24]
    749a:	2a06      	cmp	r2, #6
    749c:	f200 829e 	bhi.w	79dc <tcp_receive+0x838>
		if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
    74a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    74a2:	4a6c      	ldr	r2, [pc, #432]	; (7654 <tcp_receive+0x4b0>)
    74a4:	6892      	ldr	r2, [r2, #8]
    74a6:	1a8d      	subs	r5, r1, r2
    74a8:	2d01      	cmp	r5, #1
    74aa:	d404      	bmi.n	74b6 <tcp_receive+0x312>
    74ac:	4413      	add	r3, r2
    74ae:	1acb      	subs	r3, r1, r3
    74b0:	3301      	adds	r3, #1
    74b2:	2b00      	cmp	r3, #0
    74b4:	dd36      	ble.n	7524 <tcp_receive+0x380>
			if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
    74b6:	1a52      	subs	r2, r2, r1
    74b8:	2a00      	cmp	r2, #0
    74ba:	db5b      	blt.n	7574 <tcp_receive+0x3d0>
		if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
    74bc:	4b65      	ldr	r3, [pc, #404]	; (7654 <tcp_receive+0x4b0>)
    74be:	6899      	ldr	r1, [r3, #8]
    74c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    74c2:	1a8b      	subs	r3, r1, r2
    74c4:	2b00      	cmp	r3, #0
    74c6:	db05      	blt.n	74d4 <tcp_receive+0x330>
    74c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    74ca:	4413      	add	r3, r2
    74cc:	1acb      	subs	r3, r1, r3
    74ce:	3301      	adds	r3, #1
    74d0:	2b00      	cmp	r3, #0
    74d2:	dd54      	ble.n	757e <tcp_receive+0x3da>
			tcp_send_empty_ack(pcb);
    74d4:	4620      	mov	r0, r4
    74d6:	4b62      	ldr	r3, [pc, #392]	; (7660 <tcp_receive+0x4bc>)
    74d8:	4798      	blx	r3
    74da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			m = (s16_t)(tcp_ticks - pcb->rttest);
    74de:	4a61      	ldr	r2, [pc, #388]	; (7664 <tcp_receive+0x4c0>)
    74e0:	6812      	ldr	r2, [r2, #0]
    74e2:	1ad2      	subs	r2, r2, r3
    74e4:	b292      	uxth	r2, r2
			m = m - (pcb->sa >> 3);
    74e6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    74ea:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
    74ee:	b292      	uxth	r2, r2
    74f0:	b213      	sxth	r3, r2
			pcb->sa += m;
    74f2:	4411      	add	r1, r2
    74f4:	b209      	sxth	r1, r1
    74f6:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
			if (m < 0) {
    74fa:	2b00      	cmp	r3, #0
    74fc:	db0f      	blt.n	751e <tcp_receive+0x37a>
			m = m - (pcb->sv >> 2);
    74fe:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
    7502:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
			pcb->sv += m;
    7506:	fa12 f383 	uxtah	r3, r2, r3
    750a:	b29b      	uxth	r3, r3
    750c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
			pcb->rto = (pcb->sa >> 3) + pcb->sv;
    7510:	eb03 03e1 	add.w	r3, r3, r1, asr #3
    7514:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			pcb->rttest = 0;
    7518:	2300      	movs	r3, #0
    751a:	63a3      	str	r3, [r4, #56]	; 0x38
    751c:	e7b7      	b.n	748e <tcp_receive+0x2ea>
				m = -m;
    751e:	4253      	negs	r3, r2
    7520:	b21b      	sxth	r3, r3
    7522:	e7ec      	b.n	74fe <tcp_receive+0x35a>
			off = pcb->rcv_nxt - seqno;
    7524:	462b      	mov	r3, r5
			p   = inseg.p;
    7526:	4a4b      	ldr	r2, [pc, #300]	; (7654 <tcp_receive+0x4b0>)
    7528:	6990      	ldr	r0, [r2, #24]
			if (inseg.p->len < off) {
    752a:	8942      	ldrh	r2, [r0, #10]
    752c:	4295      	cmp	r5, r2
    752e:	dd1c      	ble.n	756a <tcp_receive+0x3c6>
				new_tot_len = (u16_t)(inseg.p->tot_len - off);
    7530:	8901      	ldrh	r1, [r0, #8]
    7532:	b2ad      	uxth	r5, r5
    7534:	1b4d      	subs	r5, r1, r5
    7536:	b2a9      	uxth	r1, r5
				while (p->len < off) {
    7538:	e004      	b.n	7544 <tcp_receive+0x3a0>
					off -= p->len;
    753a:	1a9b      	subs	r3, r3, r2
					p->tot_len = new_tot_len;
    753c:	8101      	strh	r1, [r0, #8]
					p->len     = 0;
    753e:	2200      	movs	r2, #0
    7540:	8142      	strh	r2, [r0, #10]
					p          = p->next;
    7542:	6800      	ldr	r0, [r0, #0]
				while (p->len < off) {
    7544:	8942      	ldrh	r2, [r0, #10]
    7546:	4293      	cmp	r3, r2
    7548:	dcf7      	bgt.n	753a <tcp_receive+0x396>
				if (pbuf_header(p, (s16_t)-off)) {
    754a:	425b      	negs	r3, r3
    754c:	b219      	sxth	r1, r3
    754e:	4b46      	ldr	r3, [pc, #280]	; (7668 <tcp_receive+0x4c4>)
    7550:	4798      	blx	r3
			inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
    7552:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7554:	4b3f      	ldr	r3, [pc, #252]	; (7654 <tcp_receive+0x4b0>)
    7556:	689a      	ldr	r2, [r3, #8]
    7558:	1a52      	subs	r2, r2, r1
    755a:	8b98      	ldrh	r0, [r3, #28]
    755c:	fa10 f282 	uxtah	r2, r0, r2
    7560:	839a      	strh	r2, [r3, #28]
			inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    7562:	6a1a      	ldr	r2, [r3, #32]
    7564:	6099      	str	r1, [r3, #8]
    7566:	6051      	str	r1, [r2, #4]
    7568:	e7a8      	b.n	74bc <tcp_receive+0x318>
				if (pbuf_header(inseg.p, (s16_t)-off)) {
    756a:	4269      	negs	r1, r5
    756c:	b209      	sxth	r1, r1
    756e:	4b3e      	ldr	r3, [pc, #248]	; (7668 <tcp_receive+0x4c4>)
    7570:	4798      	blx	r3
    7572:	e7ee      	b.n	7552 <tcp_receive+0x3ae>
				tcp_ack_now(pcb);
    7574:	7fa3      	ldrb	r3, [r4, #30]
    7576:	f043 0302 	orr.w	r3, r3, #2
    757a:	77a3      	strb	r3, [r4, #30]
    757c:	e79e      	b.n	74bc <tcp_receive+0x318>
			if (pcb->rcv_nxt == seqno) {
    757e:	4291      	cmp	r1, r2
    7580:	d008      	beq.n	7594 <tcp_receive+0x3f0>
				tcp_send_empty_ack(pcb);
    7582:	4620      	mov	r0, r4
    7584:	4b36      	ldr	r3, [pc, #216]	; (7660 <tcp_receive+0x4bc>)
    7586:	4798      	blx	r3
				if (pcb->ooseq == NULL) {
    7588:	6f65      	ldr	r5, [r4, #116]	; 0x74
    758a:	2d00      	cmp	r5, #0
    758c:	f000 8150 	beq.w	7830 <tcp_receive+0x68c>
    7590:	2600      	movs	r6, #0
    7592:	e172      	b.n	787a <tcp_receive+0x6d6>
				tcplen = TCP_TCPLEN(&inseg);
    7594:	4e2f      	ldr	r6, [pc, #188]	; (7654 <tcp_receive+0x4b0>)
    7596:	8bb5      	ldrh	r5, [r6, #28]
    7598:	6a33      	ldr	r3, [r6, #32]
    759a:	8998      	ldrh	r0, [r3, #12]
    759c:	4b2f      	ldr	r3, [pc, #188]	; (765c <tcp_receive+0x4b8>)
    759e:	4798      	blx	r3
    75a0:	f010 0303 	ands.w	r3, r0, #3
    75a4:	bf18      	it	ne
    75a6:	2301      	movne	r3, #1
    75a8:	442b      	add	r3, r5
    75aa:	b29b      	uxth	r3, r3
    75ac:	81b3      	strh	r3, [r6, #12]
				if (tcplen > pcb->rcv_wnd) {
    75ae:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    75b0:	4293      	cmp	r3, r2
    75b2:	d80d      	bhi.n	75d0 <tcp_receive+0x42c>
				if (pcb->ooseq != NULL) {
    75b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
    75b6:	2b00      	cmp	r3, #0
    75b8:	f000 80bc 	beq.w	7734 <tcp_receive+0x590>
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    75bc:	4b25      	ldr	r3, [pc, #148]	; (7654 <tcp_receive+0x4b0>)
    75be:	6a1b      	ldr	r3, [r3, #32]
    75c0:	8998      	ldrh	r0, [r3, #12]
    75c2:	4b26      	ldr	r3, [pc, #152]	; (765c <tcp_receive+0x4b8>)
    75c4:	4798      	blx	r3
    75c6:	f010 0f01 	tst.w	r0, #1
    75ca:	d137      	bne.n	763c <tcp_receive+0x498>
						next = pcb->ooseq;
    75cc:	6f65      	ldr	r5, [r4, #116]	; 0x74
						while (next && TCP_SEQ_GEQ(seqno + tcplen, next->tcphdr->seqno + next->len)) {
    75ce:	e056      	b.n	767e <tcp_receive+0x4da>
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    75d0:	6a33      	ldr	r3, [r6, #32]
    75d2:	8998      	ldrh	r0, [r3, #12]
    75d4:	4b21      	ldr	r3, [pc, #132]	; (765c <tcp_receive+0x4b8>)
    75d6:	4798      	blx	r3
    75d8:	f010 0f01 	tst.w	r0, #1
    75dc:	d11e      	bne.n	761c <tcp_receive+0x478>
					inseg.len = pcb->rcv_wnd;
    75de:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    75e0:	4b1c      	ldr	r3, [pc, #112]	; (7654 <tcp_receive+0x4b0>)
    75e2:	839a      	strh	r2, [r3, #28]
					if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    75e4:	6a1b      	ldr	r3, [r3, #32]
    75e6:	8998      	ldrh	r0, [r3, #12]
    75e8:	4b1c      	ldr	r3, [pc, #112]	; (765c <tcp_receive+0x4b8>)
    75ea:	4798      	blx	r3
    75ec:	f010 0f02 	tst.w	r0, #2
    75f0:	d003      	beq.n	75fa <tcp_receive+0x456>
						inseg.len -= 1;
    75f2:	4a18      	ldr	r2, [pc, #96]	; (7654 <tcp_receive+0x4b0>)
    75f4:	8b93      	ldrh	r3, [r2, #28]
    75f6:	3b01      	subs	r3, #1
    75f8:	8393      	strh	r3, [r2, #28]
					pbuf_realloc(inseg.p, inseg.len);
    75fa:	4d16      	ldr	r5, [pc, #88]	; (7654 <tcp_receive+0x4b0>)
    75fc:	8ba9      	ldrh	r1, [r5, #28]
    75fe:	69a8      	ldr	r0, [r5, #24]
    7600:	4b1a      	ldr	r3, [pc, #104]	; (766c <tcp_receive+0x4c8>)
    7602:	4798      	blx	r3
					tcplen = TCP_TCPLEN(&inseg);
    7604:	8bae      	ldrh	r6, [r5, #28]
    7606:	6a2b      	ldr	r3, [r5, #32]
    7608:	8998      	ldrh	r0, [r3, #12]
    760a:	4b14      	ldr	r3, [pc, #80]	; (765c <tcp_receive+0x4b8>)
    760c:	4798      	blx	r3
    760e:	f010 0003 	ands.w	r0, r0, #3
    7612:	bf18      	it	ne
    7614:	2001      	movne	r0, #1
    7616:	4406      	add	r6, r0
    7618:	81ae      	strh	r6, [r5, #12]
    761a:	e7cb      	b.n	75b4 <tcp_receive+0x410>
						TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~TCP_FIN);
    761c:	6a36      	ldr	r6, [r6, #32]
    761e:	89b0      	ldrh	r0, [r6, #12]
    7620:	b205      	sxth	r5, r0
    7622:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
    7626:	b280      	uxth	r0, r0
    7628:	4b0c      	ldr	r3, [pc, #48]	; (765c <tcp_receive+0x4b8>)
    762a:	4798      	blx	r3
    762c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    7630:	4b0f      	ldr	r3, [pc, #60]	; (7670 <tcp_receive+0x4cc>)
    7632:	4798      	blx	r3
    7634:	b200      	sxth	r0, r0
    7636:	4305      	orrs	r5, r0
    7638:	81b5      	strh	r5, [r6, #12]
    763a:	e7d0      	b.n	75de <tcp_receive+0x43a>
						while (pcb->ooseq != NULL) {
    763c:	6f60      	ldr	r0, [r4, #116]	; 0x74
    763e:	2800      	cmp	r0, #0
    7640:	d078      	beq.n	7734 <tcp_receive+0x590>
							pcb->ooseq                = pcb->ooseq->next;
    7642:	6803      	ldr	r3, [r0, #0]
    7644:	6763      	str	r3, [r4, #116]	; 0x74
							tcp_seg_free(old_ooseq);
    7646:	4b02      	ldr	r3, [pc, #8]	; (7650 <tcp_receive+0x4ac>)
    7648:	4798      	blx	r3
    764a:	e7f7      	b.n	763c <tcp_receive+0x498>
    764c:	000061ed 	.word	0x000061ed
    7650:	000064c5 	.word	0x000064c5
    7654:	200080c4 	.word	0x200080c4
    7658:	00003ef1 	.word	0x00003ef1
    765c:	00003ecd 	.word	0x00003ecd
    7660:	000089d9 	.word	0x000089d9
    7664:	200161f4 	.word	0x200161f4
    7668:	00005f8f 	.word	0x00005f8f
    766c:	00006195 	.word	0x00006195
    7670:	00003ec1 	.word	0x00003ec1
							next = next->next;
    7674:	682e      	ldr	r6, [r5, #0]
							tcp_seg_free(prev);
    7676:	4628      	mov	r0, r5
    7678:	4b9e      	ldr	r3, [pc, #632]	; (78f4 <tcp_receive+0x750>)
    767a:	4798      	blx	r3
							next = next->next;
    767c:	4635      	mov	r5, r6
						while (next && TCP_SEQ_GEQ(seqno + tcplen, next->tcphdr->seqno + next->len)) {
    767e:	2d00      	cmp	r5, #0
    7680:	d02f      	beq.n	76e2 <tcp_receive+0x53e>
    7682:	4a9d      	ldr	r2, [pc, #628]	; (78f8 <tcp_receive+0x754>)
    7684:	8993      	ldrh	r3, [r2, #12]
    7686:	6892      	ldr	r2, [r2, #8]
    7688:	4413      	add	r3, r2
    768a:	68e9      	ldr	r1, [r5, #12]
    768c:	684a      	ldr	r2, [r1, #4]
    768e:	8928      	ldrh	r0, [r5, #8]
    7690:	4402      	add	r2, r0
    7692:	1a9b      	subs	r3, r3, r2
    7694:	2b00      	cmp	r3, #0
    7696:	db24      	blt.n	76e2 <tcp_receive+0x53e>
							if (TCPH_FLAGS(next->tcphdr) & TCP_FIN && (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
    7698:	8988      	ldrh	r0, [r1, #12]
    769a:	4b98      	ldr	r3, [pc, #608]	; (78fc <tcp_receive+0x758>)
    769c:	4798      	blx	r3
    769e:	f010 0f01 	tst.w	r0, #1
    76a2:	d0e7      	beq.n	7674 <tcp_receive+0x4d0>
    76a4:	4b94      	ldr	r3, [pc, #592]	; (78f8 <tcp_receive+0x754>)
    76a6:	6a1b      	ldr	r3, [r3, #32]
    76a8:	8998      	ldrh	r0, [r3, #12]
    76aa:	4b94      	ldr	r3, [pc, #592]	; (78fc <tcp_receive+0x758>)
    76ac:	4798      	blx	r3
    76ae:	f010 0f02 	tst.w	r0, #2
    76b2:	d1df      	bne.n	7674 <tcp_receive+0x4d0>
								TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
    76b4:	4e90      	ldr	r6, [pc, #576]	; (78f8 <tcp_receive+0x754>)
    76b6:	f8d6 8020 	ldr.w	r8, [r6, #32]
    76ba:	f8b8 700c 	ldrh.w	r7, [r8, #12]
    76be:	2001      	movs	r0, #1
    76c0:	4b8f      	ldr	r3, [pc, #572]	; (7900 <tcp_receive+0x75c>)
    76c2:	4798      	blx	r3
    76c4:	4338      	orrs	r0, r7
    76c6:	f8a8 000c 	strh.w	r0, [r8, #12]
								tcplen = TCP_TCPLEN(&inseg);
    76ca:	8bb7      	ldrh	r7, [r6, #28]
    76cc:	6a33      	ldr	r3, [r6, #32]
    76ce:	8998      	ldrh	r0, [r3, #12]
    76d0:	4b8a      	ldr	r3, [pc, #552]	; (78fc <tcp_receive+0x758>)
    76d2:	4798      	blx	r3
    76d4:	f010 0003 	ands.w	r0, r0, #3
    76d8:	bf18      	it	ne
    76da:	2001      	movne	r0, #1
    76dc:	4407      	add	r7, r0
    76de:	81b7      	strh	r7, [r6, #12]
    76e0:	e7c8      	b.n	7674 <tcp_receive+0x4d0>
						if (next && TCP_SEQ_GT(seqno + tcplen, next->tcphdr->seqno)) {
    76e2:	b335      	cbz	r5, 7732 <tcp_receive+0x58e>
    76e4:	4b84      	ldr	r3, [pc, #528]	; (78f8 <tcp_receive+0x754>)
    76e6:	6899      	ldr	r1, [r3, #8]
    76e8:	899b      	ldrh	r3, [r3, #12]
    76ea:	440b      	add	r3, r1
    76ec:	68ea      	ldr	r2, [r5, #12]
    76ee:	6852      	ldr	r2, [r2, #4]
    76f0:	1a9b      	subs	r3, r3, r2
    76f2:	2b00      	cmp	r3, #0
    76f4:	dd1d      	ble.n	7732 <tcp_receive+0x58e>
							inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
    76f6:	1a52      	subs	r2, r2, r1
    76f8:	4b7f      	ldr	r3, [pc, #508]	; (78f8 <tcp_receive+0x754>)
    76fa:	839a      	strh	r2, [r3, #28]
							if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
    76fc:	6a1b      	ldr	r3, [r3, #32]
    76fe:	8998      	ldrh	r0, [r3, #12]
    7700:	4b7e      	ldr	r3, [pc, #504]	; (78fc <tcp_receive+0x758>)
    7702:	4798      	blx	r3
    7704:	f010 0f02 	tst.w	r0, #2
    7708:	d003      	beq.n	7712 <tcp_receive+0x56e>
								inseg.len -= 1;
    770a:	4a7b      	ldr	r2, [pc, #492]	; (78f8 <tcp_receive+0x754>)
    770c:	8b93      	ldrh	r3, [r2, #28]
    770e:	3b01      	subs	r3, #1
    7710:	8393      	strh	r3, [r2, #28]
							pbuf_realloc(inseg.p, inseg.len);
    7712:	4e79      	ldr	r6, [pc, #484]	; (78f8 <tcp_receive+0x754>)
    7714:	8bb1      	ldrh	r1, [r6, #28]
    7716:	69b0      	ldr	r0, [r6, #24]
    7718:	4b7a      	ldr	r3, [pc, #488]	; (7904 <tcp_receive+0x760>)
    771a:	4798      	blx	r3
							tcplen = TCP_TCPLEN(&inseg);
    771c:	8bb7      	ldrh	r7, [r6, #28]
    771e:	6a33      	ldr	r3, [r6, #32]
    7720:	8998      	ldrh	r0, [r3, #12]
    7722:	4b76      	ldr	r3, [pc, #472]	; (78fc <tcp_receive+0x758>)
    7724:	4798      	blx	r3
    7726:	f010 0003 	ands.w	r0, r0, #3
    772a:	bf18      	it	ne
    772c:	2001      	movne	r0, #1
    772e:	4407      	add	r7, r0
    7730:	81b7      	strh	r7, [r6, #12]
						pcb->ooseq = next;
    7732:	6765      	str	r5, [r4, #116]	; 0x74
				pcb->rcv_nxt = seqno + tcplen;
    7734:	4d70      	ldr	r5, [pc, #448]	; (78f8 <tcp_receive+0x754>)
    7736:	89aa      	ldrh	r2, [r5, #12]
    7738:	68ab      	ldr	r3, [r5, #8]
    773a:	4413      	add	r3, r2
    773c:	62a3      	str	r3, [r4, #40]	; 0x28
				pcb->rcv_wnd -= tcplen;
    773e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    7740:	1a9b      	subs	r3, r3, r2
    7742:	85a3      	strh	r3, [r4, #44]	; 0x2c
				tcp_update_rcv_ann_wnd(pcb);
    7744:	4620      	mov	r0, r4
    7746:	4b70      	ldr	r3, [pc, #448]	; (7908 <tcp_receive+0x764>)
    7748:	4798      	blx	r3
				if (inseg.p->tot_len > 0) {
    774a:	69ab      	ldr	r3, [r5, #24]
    774c:	891a      	ldrh	r2, [r3, #8]
    774e:	b112      	cbz	r2, 7756 <tcp_receive+0x5b2>
					recv_data = inseg.p;
    7750:	626b      	str	r3, [r5, #36]	; 0x24
					inseg.p = NULL;
    7752:	2300      	movs	r3, #0
    7754:	61ab      	str	r3, [r5, #24]
				if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
    7756:	4b68      	ldr	r3, [pc, #416]	; (78f8 <tcp_receive+0x754>)
    7758:	6a1b      	ldr	r3, [r3, #32]
    775a:	8998      	ldrh	r0, [r3, #12]
    775c:	4b67      	ldr	r3, [pc, #412]	; (78fc <tcp_receive+0x758>)
    775e:	4798      	blx	r3
    7760:	f010 0f01 	tst.w	r0, #1
    7764:	d021      	beq.n	77aa <tcp_receive+0x606>
					recv_flags |= TF_GOT_FIN;
    7766:	4a64      	ldr	r2, [pc, #400]	; (78f8 <tcp_receive+0x754>)
    7768:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    776c:	f043 0320 	orr.w	r3, r3, #32
    7770:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    7774:	e019      	b.n	77aa <tcp_receive+0x606>
							recv_data = cseg->p;
    7776:	4b60      	ldr	r3, [pc, #384]	; (78f8 <tcp_receive+0x754>)
    7778:	6259      	str	r1, [r3, #36]	; 0x24
						cseg->p = NULL;
    777a:	2300      	movs	r3, #0
    777c:	606b      	str	r3, [r5, #4]
					if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
    777e:	68eb      	ldr	r3, [r5, #12]
    7780:	8998      	ldrh	r0, [r3, #12]
    7782:	4b5e      	ldr	r3, [pc, #376]	; (78fc <tcp_receive+0x758>)
    7784:	4798      	blx	r3
    7786:	f010 0f01 	tst.w	r0, #1
    778a:	d009      	beq.n	77a0 <tcp_receive+0x5fc>
						recv_flags |= TF_GOT_FIN;
    778c:	4a5a      	ldr	r2, [pc, #360]	; (78f8 <tcp_receive+0x754>)
    778e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    7792:	f043 0320 	orr.w	r3, r3, #32
    7796:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
						if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
    779a:	7e23      	ldrb	r3, [r4, #24]
    779c:	2b04      	cmp	r3, #4
    779e:	d034      	beq.n	780a <tcp_receive+0x666>
					pcb->ooseq = cseg->next;
    77a0:	682b      	ldr	r3, [r5, #0]
    77a2:	6763      	str	r3, [r4, #116]	; 0x74
					tcp_seg_free(cseg);
    77a4:	4628      	mov	r0, r5
    77a6:	4b53      	ldr	r3, [pc, #332]	; (78f4 <tcp_receive+0x750>)
    77a8:	4798      	blx	r3
				while (pcb->ooseq != NULL && pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
    77aa:	6f65      	ldr	r5, [r4, #116]	; 0x74
    77ac:	2d00      	cmp	r5, #0
    77ae:	d02f      	beq.n	7810 <tcp_receive+0x66c>
    77b0:	68ea      	ldr	r2, [r5, #12]
    77b2:	6853      	ldr	r3, [r2, #4]
    77b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    77b6:	428b      	cmp	r3, r1
    77b8:	d12a      	bne.n	7810 <tcp_receive+0x66c>
					seqno = pcb->ooseq->tcphdr->seqno;
    77ba:	494f      	ldr	r1, [pc, #316]	; (78f8 <tcp_receive+0x754>)
    77bc:	608b      	str	r3, [r1, #8]
					pcb->rcv_nxt += TCP_TCPLEN(cseg);
    77be:	892e      	ldrh	r6, [r5, #8]
    77c0:	8990      	ldrh	r0, [r2, #12]
    77c2:	4f4e      	ldr	r7, [pc, #312]	; (78fc <tcp_receive+0x758>)
    77c4:	47b8      	blx	r7
    77c6:	f010 0003 	ands.w	r0, r0, #3
    77ca:	bf18      	it	ne
    77cc:	2001      	movne	r0, #1
    77ce:	4406      	add	r6, r0
    77d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77d2:	4433      	add	r3, r6
    77d4:	62a3      	str	r3, [r4, #40]	; 0x28
					pcb->rcv_wnd -= TCP_TCPLEN(cseg);
    77d6:	892e      	ldrh	r6, [r5, #8]
    77d8:	68eb      	ldr	r3, [r5, #12]
    77da:	8998      	ldrh	r0, [r3, #12]
    77dc:	47b8      	blx	r7
    77de:	f010 0003 	ands.w	r0, r0, #3
    77e2:	bf18      	it	ne
    77e4:	2001      	movne	r0, #1
    77e6:	4406      	add	r6, r0
    77e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    77ea:	1b9b      	subs	r3, r3, r6
    77ec:	85a3      	strh	r3, [r4, #44]	; 0x2c
					tcp_update_rcv_ann_wnd(pcb);
    77ee:	4620      	mov	r0, r4
    77f0:	4b45      	ldr	r3, [pc, #276]	; (7908 <tcp_receive+0x764>)
    77f2:	4798      	blx	r3
					if (cseg->p->tot_len > 0) {
    77f4:	6869      	ldr	r1, [r5, #4]
    77f6:	890b      	ldrh	r3, [r1, #8]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d0c0      	beq.n	777e <tcp_receive+0x5da>
						if (recv_data) {
    77fc:	4b3e      	ldr	r3, [pc, #248]	; (78f8 <tcp_receive+0x754>)
    77fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
    7800:	2800      	cmp	r0, #0
    7802:	d0b8      	beq.n	7776 <tcp_receive+0x5d2>
							pbuf_cat(recv_data, cseg->p);
    7804:	4b41      	ldr	r3, [pc, #260]	; (790c <tcp_receive+0x768>)
    7806:	4798      	blx	r3
    7808:	e7b7      	b.n	777a <tcp_receive+0x5d6>
							pcb->state = CLOSE_WAIT;
    780a:	2307      	movs	r3, #7
    780c:	7623      	strb	r3, [r4, #24]
    780e:	e7c7      	b.n	77a0 <tcp_receive+0x5fc>
				tcp_ack(pcb);
    7810:	7fa3      	ldrb	r3, [r4, #30]
    7812:	f013 0f01 	tst.w	r3, #1
    7816:	d006      	beq.n	7826 <tcp_receive+0x682>
    7818:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    781c:	f043 0302 	orr.w	r3, r3, #2
    7820:	77a3      	strb	r3, [r4, #30]
    7822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7826:	f043 0301 	orr.w	r3, r3, #1
    782a:	77a3      	strb	r3, [r4, #30]
    782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pcb->ooseq = tcp_seg_copy(&inseg);
    7830:	4837      	ldr	r0, [pc, #220]	; (7910 <tcp_receive+0x76c>)
    7832:	4b38      	ldr	r3, [pc, #224]	; (7914 <tcp_receive+0x770>)
    7834:	4798      	blx	r3
    7836:	6760      	str	r0, [r4, #116]	; 0x74
    7838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
							if (inseg.len > next->len) {
    783c:	4b2e      	ldr	r3, [pc, #184]	; (78f8 <tcp_receive+0x754>)
    783e:	8b9a      	ldrh	r2, [r3, #28]
    7840:	892b      	ldrh	r3, [r5, #8]
    7842:	429a      	cmp	r2, r3
    7844:	f240 80da 	bls.w	79fc <tcp_receive+0x858>
								cseg = tcp_seg_copy(&inseg);
    7848:	4831      	ldr	r0, [pc, #196]	; (7910 <tcp_receive+0x76c>)
    784a:	4b32      	ldr	r3, [pc, #200]	; (7914 <tcp_receive+0x770>)
    784c:	4798      	blx	r3
								if (cseg != NULL) {
    784e:	4603      	mov	r3, r0
    7850:	2800      	cmp	r0, #0
    7852:	f000 80d3 	beq.w	79fc <tcp_receive+0x858>
									if (prev != NULL) {
    7856:	b136      	cbz	r6, 7866 <tcp_receive+0x6c2>
										prev->next = cseg;
    7858:	6030      	str	r0, [r6, #0]
									tcp_oos_insert_segment(cseg, next);
    785a:	4629      	mov	r1, r5
    785c:	4618      	mov	r0, r3
    785e:	4b2e      	ldr	r3, [pc, #184]	; (7918 <tcp_receive+0x774>)
    7860:	4798      	blx	r3
    7862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
										pcb->ooseq = cseg;
    7866:	6760      	str	r0, [r4, #116]	; 0x74
    7868:	e7f7      	b.n	785a <tcp_receive+0x6b6>
								if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
    786a:	1a5a      	subs	r2, r3, r1
    786c:	2a00      	cmp	r2, #0
    786e:	db35      	blt.n	78dc <tcp_receive+0x738>
							if (next->next == NULL && TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    7870:	682a      	ldr	r2, [r5, #0]
    7872:	462e      	mov	r6, r5
    7874:	2a00      	cmp	r2, #0
    7876:	d051      	beq.n	791c <tcp_receive+0x778>
    7878:	4615      	mov	r5, r2
					for (next = pcb->ooseq; next != NULL; next = next->next) {
    787a:	2d00      	cmp	r5, #0
    787c:	f000 80ac 	beq.w	79d8 <tcp_receive+0x834>
						if (seqno == next->tcphdr->seqno) {
    7880:	68e8      	ldr	r0, [r5, #12]
    7882:	6841      	ldr	r1, [r0, #4]
    7884:	4b1c      	ldr	r3, [pc, #112]	; (78f8 <tcp_receive+0x754>)
    7886:	689b      	ldr	r3, [r3, #8]
    7888:	4299      	cmp	r1, r3
    788a:	d0d7      	beq.n	783c <tcp_receive+0x698>
							if (prev == NULL) {
    788c:	2e00      	cmp	r6, #0
    788e:	d0ec      	beq.n	786a <tcp_receive+0x6c6>
								if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
    7890:	68f2      	ldr	r2, [r6, #12]
    7892:	6852      	ldr	r2, [r2, #4]
    7894:	1a9a      	subs	r2, r3, r2
    7896:	2a01      	cmp	r2, #1
    7898:	d4ea      	bmi.n	7870 <tcp_receive+0x6cc>
    789a:	1a5a      	subs	r2, r3, r1
    789c:	3201      	adds	r2, #1
    789e:	2a00      	cmp	r2, #0
    78a0:	dce6      	bgt.n	7870 <tcp_receive+0x6cc>
									cseg = tcp_seg_copy(&inseg);
    78a2:	481b      	ldr	r0, [pc, #108]	; (7910 <tcp_receive+0x76c>)
    78a4:	4b1b      	ldr	r3, [pc, #108]	; (7914 <tcp_receive+0x770>)
    78a6:	4798      	blx	r3
									if (cseg != NULL) {
    78a8:	4604      	mov	r4, r0
    78aa:	2800      	cmp	r0, #0
    78ac:	f000 80a6 	beq.w	79fc <tcp_receive+0x858>
										if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
    78b0:	68f3      	ldr	r3, [r6, #12]
    78b2:	6859      	ldr	r1, [r3, #4]
    78b4:	8932      	ldrh	r2, [r6, #8]
    78b6:	440a      	add	r2, r1
    78b8:	4b0f      	ldr	r3, [pc, #60]	; (78f8 <tcp_receive+0x754>)
    78ba:	689b      	ldr	r3, [r3, #8]
    78bc:	1ad2      	subs	r2, r2, r3
    78be:	2a00      	cmp	r2, #0
    78c0:	dd05      	ble.n	78ce <tcp_receive+0x72a>
											prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
    78c2:	1a5b      	subs	r3, r3, r1
    78c4:	b299      	uxth	r1, r3
    78c6:	8131      	strh	r1, [r6, #8]
											pbuf_realloc(prev->p, prev->len);
    78c8:	6870      	ldr	r0, [r6, #4]
    78ca:	4b0e      	ldr	r3, [pc, #56]	; (7904 <tcp_receive+0x760>)
    78cc:	4798      	blx	r3
										prev->next = cseg;
    78ce:	6034      	str	r4, [r6, #0]
										tcp_oos_insert_segment(cseg, next);
    78d0:	4629      	mov	r1, r5
    78d2:	4620      	mov	r0, r4
    78d4:	4b10      	ldr	r3, [pc, #64]	; (7918 <tcp_receive+0x774>)
    78d6:	4798      	blx	r3
    78d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
									cseg = tcp_seg_copy(&inseg);
    78dc:	480c      	ldr	r0, [pc, #48]	; (7910 <tcp_receive+0x76c>)
    78de:	4b0d      	ldr	r3, [pc, #52]	; (7914 <tcp_receive+0x770>)
    78e0:	4798      	blx	r3
									if (cseg != NULL) {
    78e2:	2800      	cmp	r0, #0
    78e4:	f000 808a 	beq.w	79fc <tcp_receive+0x858>
										pcb->ooseq = cseg;
    78e8:	6760      	str	r0, [r4, #116]	; 0x74
										tcp_oos_insert_segment(cseg, next);
    78ea:	4629      	mov	r1, r5
    78ec:	4b0a      	ldr	r3, [pc, #40]	; (7918 <tcp_receive+0x774>)
    78ee:	4798      	blx	r3
    78f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78f4:	000064c5 	.word	0x000064c5
    78f8:	200080c4 	.word	0x200080c4
    78fc:	00003ecd 	.word	0x00003ecd
    7900:	00003ec1 	.word	0x00003ec1
    7904:	00006195 	.word	0x00006195
    7908:	00006449 	.word	0x00006449
    790c:	00006209 	.word	0x00006209
    7910:	200080d8 	.word	0x200080d8
    7914:	00006501 	.word	0x00006501
    7918:	0000710d 	.word	0x0000710d
							if (next->next == NULL && TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
    791c:	1a5b      	subs	r3, r3, r1
    791e:	2b00      	cmp	r3, #0
    7920:	dc01      	bgt.n	7926 <tcp_receive+0x782>
    7922:	4615      	mov	r5, r2
    7924:	e7a9      	b.n	787a <tcp_receive+0x6d6>
								if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
    7926:	8980      	ldrh	r0, [r0, #12]
    7928:	4b35      	ldr	r3, [pc, #212]	; (7a00 <tcp_receive+0x85c>)
    792a:	4798      	blx	r3
    792c:	f010 0f01 	tst.w	r0, #1
    7930:	d164      	bne.n	79fc <tcp_receive+0x858>
								next->next = tcp_seg_copy(&inseg);
    7932:	4834      	ldr	r0, [pc, #208]	; (7a04 <tcp_receive+0x860>)
    7934:	4b34      	ldr	r3, [pc, #208]	; (7a08 <tcp_receive+0x864>)
    7936:	4798      	blx	r3
    7938:	6028      	str	r0, [r5, #0]
								if (next->next != NULL) {
    793a:	2800      	cmp	r0, #0
    793c:	d05e      	beq.n	79fc <tcp_receive+0x858>
									if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
    793e:	68eb      	ldr	r3, [r5, #12]
    7940:	6859      	ldr	r1, [r3, #4]
    7942:	892a      	ldrh	r2, [r5, #8]
    7944:	440a      	add	r2, r1
    7946:	4b31      	ldr	r3, [pc, #196]	; (7a0c <tcp_receive+0x868>)
    7948:	689b      	ldr	r3, [r3, #8]
    794a:	1ad2      	subs	r2, r2, r3
    794c:	2a00      	cmp	r2, #0
    794e:	dd05      	ble.n	795c <tcp_receive+0x7b8>
										next->len = (u16_t)(seqno - next->tcphdr->seqno);
    7950:	1a5b      	subs	r3, r3, r1
    7952:	b299      	uxth	r1, r3
    7954:	8129      	strh	r1, [r5, #8]
										pbuf_realloc(next->p, next->len);
    7956:	6868      	ldr	r0, [r5, #4]
    7958:	4b2d      	ldr	r3, [pc, #180]	; (7a10 <tcp_receive+0x86c>)
    795a:	4798      	blx	r3
									if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
    795c:	4b2b      	ldr	r3, [pc, #172]	; (7a0c <tcp_receive+0x868>)
    795e:	899a      	ldrh	r2, [r3, #12]
    7960:	689b      	ldr	r3, [r3, #8]
    7962:	441a      	add	r2, r3
    7964:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7966:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    7968:	440b      	add	r3, r1
    796a:	429a      	cmp	r2, r3
    796c:	d946      	bls.n	79fc <tcp_receive+0x858>
										if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
    796e:	682b      	ldr	r3, [r5, #0]
    7970:	68db      	ldr	r3, [r3, #12]
    7972:	8998      	ldrh	r0, [r3, #12]
    7974:	4b22      	ldr	r3, [pc, #136]	; (7a00 <tcp_receive+0x85c>)
    7976:	4798      	blx	r3
    7978:	f010 0f01 	tst.w	r0, #1
    797c:	d11b      	bne.n	79b6 <tcp_receive+0x812>
										next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
    797e:	682a      	ldr	r2, [r5, #0]
    7980:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7982:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    7984:	440b      	add	r3, r1
    7986:	b29b      	uxth	r3, r3
    7988:	4e20      	ldr	r6, [pc, #128]	; (7a0c <tcp_receive+0x868>)
    798a:	68b1      	ldr	r1, [r6, #8]
    798c:	1a5b      	subs	r3, r3, r1
    798e:	8113      	strh	r3, [r2, #8]
										pbuf_realloc(next->next->p, next->next->len);
    7990:	682b      	ldr	r3, [r5, #0]
    7992:	8919      	ldrh	r1, [r3, #8]
    7994:	6858      	ldr	r0, [r3, #4]
    7996:	4b1e      	ldr	r3, [pc, #120]	; (7a10 <tcp_receive+0x86c>)
    7998:	4798      	blx	r3
										tcplen = TCP_TCPLEN(next->next);
    799a:	682b      	ldr	r3, [r5, #0]
    799c:	891c      	ldrh	r4, [r3, #8]
    799e:	68db      	ldr	r3, [r3, #12]
    79a0:	8998      	ldrh	r0, [r3, #12]
    79a2:	4b17      	ldr	r3, [pc, #92]	; (7a00 <tcp_receive+0x85c>)
    79a4:	4798      	blx	r3
    79a6:	f010 0003 	ands.w	r0, r0, #3
    79aa:	bf18      	it	ne
    79ac:	2001      	movne	r0, #1
    79ae:	4404      	add	r4, r0
    79b0:	81b4      	strh	r4, [r6, #12]
    79b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
											TCPH_FLAGS_SET(next->next->tcphdr,
    79b6:	682b      	ldr	r3, [r5, #0]
    79b8:	68df      	ldr	r7, [r3, #12]
    79ba:	89b8      	ldrh	r0, [r7, #12]
    79bc:	b206      	sxth	r6, r0
    79be:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
    79c2:	b280      	uxth	r0, r0
    79c4:	4b0e      	ldr	r3, [pc, #56]	; (7a00 <tcp_receive+0x85c>)
    79c6:	4798      	blx	r3
    79c8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    79cc:	4b11      	ldr	r3, [pc, #68]	; (7a14 <tcp_receive+0x870>)
    79ce:	4798      	blx	r3
    79d0:	b200      	sxth	r0, r0
    79d2:	4306      	orrs	r6, r0
    79d4:	81be      	strh	r6, [r7, #12]
    79d6:	e7d2      	b.n	797e <tcp_receive+0x7da>
    79d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
    79dc:	4b0b      	ldr	r3, [pc, #44]	; (7a0c <tcp_receive+0x868>)
    79de:	689b      	ldr	r3, [r3, #8]
    79e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    79e2:	1a99      	subs	r1, r3, r2
    79e4:	2900      	cmp	r1, #0
    79e6:	db05      	blt.n	79f4 <tcp_receive+0x850>
    79e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    79ea:	440a      	add	r2, r1
    79ec:	1a9b      	subs	r3, r3, r2
    79ee:	3301      	adds	r3, #1
    79f0:	2b00      	cmp	r3, #0
    79f2:	dd03      	ble.n	79fc <tcp_receive+0x858>
			tcp_ack_now(pcb);
    79f4:	7fa3      	ldrb	r3, [r4, #30]
    79f6:	f043 0302 	orr.w	r3, r3, #2
    79fa:	77a3      	strb	r3, [r4, #30]
    79fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a00:	00003ecd 	.word	0x00003ecd
    7a04:	200080d8 	.word	0x200080d8
    7a08:	00006501 	.word	0x00006501
    7a0c:	200080c4 	.word	0x200080c4
    7a10:	00006195 	.word	0x00006195
    7a14:	00003ec1 	.word	0x00003ec1

00007a18 <tcp_process>:
{
    7a18:	b570      	push	{r4, r5, r6, lr}
    7a1a:	b082      	sub	sp, #8
	if (flags & TCP_RST) {
    7a1c:	4ba7      	ldr	r3, [pc, #668]	; (7cbc <tcp_process+0x2a4>)
    7a1e:	791b      	ldrb	r3, [r3, #4]
    7a20:	f013 0f04 	tst.w	r3, #4
    7a24:	d02e      	beq.n	7a84 <tcp_process+0x6c>
		if (pcb->state == SYN_SENT) {
    7a26:	7e03      	ldrb	r3, [r0, #24]
    7a28:	2b02      	cmp	r3, #2
    7a2a:	d010      	beq.n	7a4e <tcp_process+0x36>
			if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
    7a2c:	4ba3      	ldr	r3, [pc, #652]	; (7cbc <tcp_process+0x2a4>)
    7a2e:	689b      	ldr	r3, [r3, #8]
    7a30:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7a32:	1a99      	subs	r1, r3, r2
    7a34:	2900      	cmp	r1, #0
    7a36:	db13      	blt.n	7a60 <tcp_process+0x48>
    7a38:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    7a3a:	440a      	add	r2, r1
    7a3c:	1a9b      	subs	r3, r3, r2
    7a3e:	2b00      	cmp	r3, #0
    7a40:	dd10      	ble.n	7a64 <tcp_process+0x4c>
	u8_t            acceptable = 0;
    7a42:	2300      	movs	r3, #0
		if (acceptable) {
    7a44:	b983      	cbnz	r3, 7a68 <tcp_process+0x50>
			return ERR_OK;
    7a46:	2500      	movs	r5, #0
}
    7a48:	4628      	mov	r0, r5
    7a4a:	b002      	add	sp, #8
    7a4c:	bd70      	pop	{r4, r5, r6, pc}
			if (ackno == pcb->snd_nxt) {
    7a4e:	6d02      	ldr	r2, [r0, #80]	; 0x50
    7a50:	4b9a      	ldr	r3, [pc, #616]	; (7cbc <tcp_process+0x2a4>)
    7a52:	691b      	ldr	r3, [r3, #16]
    7a54:	429a      	cmp	r2, r3
    7a56:	d001      	beq.n	7a5c <tcp_process+0x44>
	u8_t            acceptable = 0;
    7a58:	2300      	movs	r3, #0
    7a5a:	e7f3      	b.n	7a44 <tcp_process+0x2c>
				acceptable = 1;
    7a5c:	2301      	movs	r3, #1
    7a5e:	e7f1      	b.n	7a44 <tcp_process+0x2c>
	u8_t            acceptable = 0;
    7a60:	2300      	movs	r3, #0
    7a62:	e7ef      	b.n	7a44 <tcp_process+0x2c>
				acceptable = 1;
    7a64:	2301      	movs	r3, #1
    7a66:	e7ed      	b.n	7a44 <tcp_process+0x2c>
			recv_flags |= TF_RESET;
    7a68:	4a94      	ldr	r2, [pc, #592]	; (7cbc <tcp_process+0x2a4>)
    7a6a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    7a6e:	f043 0308 	orr.w	r3, r3, #8
    7a72:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
			pcb->flags &= ~TF_ACK_DELAY;
    7a76:	7f83      	ldrb	r3, [r0, #30]
    7a78:	f023 0301 	bic.w	r3, r3, #1
    7a7c:	7783      	strb	r3, [r0, #30]
			return ERR_RST;
    7a7e:	f06f 050a 	mvn.w	r5, #10
    7a82:	e7e1      	b.n	7a48 <tcp_process+0x30>
	if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
    7a84:	f013 0f02 	tst.w	r3, #2
    7a88:	d00a      	beq.n	7aa0 <tcp_process+0x88>
    7a8a:	7e03      	ldrb	r3, [r0, #24]
    7a8c:	3b02      	subs	r3, #2
    7a8e:	b2db      	uxtb	r3, r3
    7a90:	2b01      	cmp	r3, #1
    7a92:	d905      	bls.n	7aa0 <tcp_process+0x88>
		tcp_ack_now(pcb);
    7a94:	7f83      	ldrb	r3, [r0, #30]
    7a96:	f043 0302 	orr.w	r3, r3, #2
    7a9a:	7783      	strb	r3, [r0, #30]
		return ERR_OK;
    7a9c:	2500      	movs	r5, #0
    7a9e:	e7d3      	b.n	7a48 <tcp_process+0x30>
	if ((pcb->flags & TF_RXCLOSED) == 0) {
    7aa0:	7f83      	ldrb	r3, [r0, #30]
    7aa2:	f013 0f10 	tst.w	r3, #16
    7aa6:	d102      	bne.n	7aae <tcp_process+0x96>
		pcb->tmr = tcp_ticks;
    7aa8:	4b85      	ldr	r3, [pc, #532]	; (7cc0 <tcp_process+0x2a8>)
    7aaa:	681b      	ldr	r3, [r3, #0]
    7aac:	6243      	str	r3, [r0, #36]	; 0x24
    7aae:	4604      	mov	r4, r0
	pcb->keep_cnt_sent = 0;
    7ab0:	2300      	movs	r3, #0
    7ab2:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
	tcp_parseopt(pcb);
    7ab6:	4b83      	ldr	r3, [pc, #524]	; (7cc4 <tcp_process+0x2ac>)
    7ab8:	4798      	blx	r3
	switch (pcb->state) {
    7aba:	7e23      	ldrb	r3, [r4, #24]
    7abc:	3b02      	subs	r3, #2
    7abe:	2b07      	cmp	r3, #7
    7ac0:	f200 81e9 	bhi.w	7e96 <tcp_process+0x47e>
    7ac4:	e8df f013 	tbh	[pc, r3, lsl #1]
    7ac8:	00800008 	.word	0x00800008
    7acc:	011200e8 	.word	0x011200e8
    7ad0:	00e80167 	.word	0x00e80167
    7ad4:	01cf019b 	.word	0x01cf019b
		if ((flags & TCP_ACK) && (flags & TCP_SYN) && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    7ad8:	4b78      	ldr	r3, [pc, #480]	; (7cbc <tcp_process+0x2a4>)
    7ada:	791b      	ldrb	r3, [r3, #4]
    7adc:	f003 0312 	and.w	r3, r3, #18
    7ae0:	2b12      	cmp	r3, #18
    7ae2:	d006      	beq.n	7af2 <tcp_process+0xda>
		else if (flags & TCP_ACK) {
    7ae4:	4b75      	ldr	r3, [pc, #468]	; (7cbc <tcp_process+0x2a4>)
    7ae6:	791b      	ldrb	r3, [r3, #4]
    7ae8:	f013 0f10 	tst.w	r3, #16
    7aec:	d15c      	bne.n	7ba8 <tcp_process+0x190>
	return ERR_OK;
    7aee:	2500      	movs	r5, #0
    7af0:	e7aa      	b.n	7a48 <tcp_process+0x30>
		if ((flags & TCP_ACK) && (flags & TCP_SYN) && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
    7af2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7af4:	68db      	ldr	r3, [r3, #12]
    7af6:	6858      	ldr	r0, [r3, #4]
    7af8:	4b73      	ldr	r3, [pc, #460]	; (7cc8 <tcp_process+0x2b0>)
    7afa:	4798      	blx	r3
    7afc:	3001      	adds	r0, #1
    7afe:	4b6f      	ldr	r3, [pc, #444]	; (7cbc <tcp_process+0x2a4>)
    7b00:	691b      	ldr	r3, [r3, #16]
    7b02:	4298      	cmp	r0, r3
    7b04:	d1ee      	bne.n	7ae4 <tcp_process+0xcc>
			pcb->snd_buf++;
    7b06:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    7b0a:	3201      	adds	r2, #1
    7b0c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
			pcb->rcv_nxt            = seqno + 1;
    7b10:	496a      	ldr	r1, [pc, #424]	; (7cbc <tcp_process+0x2a4>)
    7b12:	688a      	ldr	r2, [r1, #8]
    7b14:	1c50      	adds	r0, r2, #1
    7b16:	62a0      	str	r0, [r4, #40]	; 0x28
			pcb->rcv_ann_right_edge = pcb->rcv_nxt;
    7b18:	6320      	str	r0, [r4, #48]	; 0x30
			pcb->lastack            = ackno;
    7b1a:	64a3      	str	r3, [r4, #72]	; 0x48
			pcb->snd_wnd            = tcphdr->wnd;
    7b1c:	680b      	ldr	r3, [r1, #0]
    7b1e:	89d9      	ldrh	r1, [r3, #14]
    7b20:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
			pcb->snd_wnd_max        = tcphdr->wnd;
    7b24:	89db      	ldrh	r3, [r3, #14]
    7b26:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
			pcb->snd_wl1            = seqno - 1; /* initialise to seqno - 1 to force window update */
    7b2a:	3a01      	subs	r2, #1
    7b2c:	6562      	str	r2, [r4, #84]	; 0x54
			pcb->state              = ESTABLISHED;
    7b2e:	2304      	movs	r3, #4
    7b30:	7623      	strb	r3, [r4, #24]
			pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
    7b32:	18e1      	adds	r1, r4, r3
    7b34:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    7b36:	4b65      	ldr	r3, [pc, #404]	; (7ccc <tcp_process+0x2b4>)
    7b38:	4798      	blx	r3
    7b3a:	86e0      	strh	r0, [r4, #54]	; 0x36
			pcb->ssthresh = pcb->mss * 10;
    7b3c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    7b40:	0053      	lsls	r3, r2, #1
    7b42:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
			pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    7b46:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    7b4a:	2b01      	cmp	r3, #1
    7b4c:	d023      	beq.n	7b96 <tcp_process+0x17e>
    7b4e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
			--pcb->snd_queuelen;
    7b52:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    7b56:	3b01      	subs	r3, #1
    7b58:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
			rseg         = pcb->unacked;
    7b5c:	6f20      	ldr	r0, [r4, #112]	; 0x70
			pcb->unacked = rseg->next;
    7b5e:	6803      	ldr	r3, [r0, #0]
    7b60:	6723      	str	r3, [r4, #112]	; 0x70
			tcp_seg_free(rseg);
    7b62:	4b5b      	ldr	r3, [pc, #364]	; (7cd0 <tcp_process+0x2b8>)
    7b64:	4798      	blx	r3
			if (pcb->unacked == NULL)
    7b66:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7b68:	b1c3      	cbz	r3, 7b9c <tcp_process+0x184>
				pcb->rtime = 0;
    7b6a:	2300      	movs	r3, #0
    7b6c:	86a3      	strh	r3, [r4, #52]	; 0x34
				pcb->nrtx  = 0;
    7b6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    7b72:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    7b76:	b1ab      	cbz	r3, 7ba4 <tcp_process+0x18c>
    7b78:	2200      	movs	r2, #0
    7b7a:	4621      	mov	r1, r4
    7b7c:	6920      	ldr	r0, [r4, #16]
    7b7e:	4798      	blx	r3
    7b80:	4605      	mov	r5, r0
			if (err == ERR_ABRT) {
    7b82:	f115 0f0a 	cmn.w	r5, #10
    7b86:	f43f af5f 	beq.w	7a48 <tcp_process+0x30>
			tcp_ack_now(pcb);
    7b8a:	7fa3      	ldrb	r3, [r4, #30]
    7b8c:	f043 0302 	orr.w	r3, r3, #2
    7b90:	77a3      	strb	r3, [r4, #30]
	return ERR_OK;
    7b92:	2500      	movs	r5, #0
			tcp_ack_now(pcb);
    7b94:	e758      	b.n	7a48 <tcp_process+0x30>
			pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    7b96:	0040      	lsls	r0, r0, #1
    7b98:	b280      	uxth	r0, r0
    7b9a:	e7d8      	b.n	7b4e <tcp_process+0x136>
				pcb->rtime = -1;
    7b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7ba0:	86a3      	strh	r3, [r4, #52]	; 0x34
    7ba2:	e7e6      	b.n	7b72 <tcp_process+0x15a>
			TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
    7ba4:	2500      	movs	r5, #0
    7ba6:	e7ec      	b.n	7b82 <tcp_process+0x16a>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    7ba8:	4b44      	ldr	r3, [pc, #272]	; (7cbc <tcp_process+0x2a4>)
    7baa:	681a      	ldr	r2, [r3, #0]
    7bac:	899c      	ldrh	r4, [r3, #12]
    7bae:	6899      	ldr	r1, [r3, #8]
    7bb0:	6918      	ldr	r0, [r3, #16]
    7bb2:	8813      	ldrh	r3, [r2, #0]
    7bb4:	9301      	str	r3, [sp, #4]
    7bb6:	8853      	ldrh	r3, [r2, #2]
    7bb8:	9300      	str	r3, [sp, #0]
    7bba:	4b46      	ldr	r3, [pc, #280]	; (7cd4 <tcp_process+0x2bc>)
    7bbc:	4a46      	ldr	r2, [pc, #280]	; (7cd8 <tcp_process+0x2c0>)
    7bbe:	4421      	add	r1, r4
    7bc0:	4c46      	ldr	r4, [pc, #280]	; (7cdc <tcp_process+0x2c4>)
    7bc2:	47a0      	blx	r4
	return ERR_OK;
    7bc4:	2500      	movs	r5, #0
    7bc6:	e73f      	b.n	7a48 <tcp_process+0x30>
		if (flags & TCP_ACK) {
    7bc8:	4b3c      	ldr	r3, [pc, #240]	; (7cbc <tcp_process+0x2a4>)
    7bca:	791b      	ldrb	r3, [r3, #4]
    7bcc:	f013 0f10 	tst.w	r3, #16
    7bd0:	d051      	beq.n	7c76 <tcp_process+0x25e>
			if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
    7bd2:	4b3a      	ldr	r3, [pc, #232]	; (7cbc <tcp_process+0x2a4>)
    7bd4:	6918      	ldr	r0, [r3, #16]
    7bd6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7bd8:	1ac3      	subs	r3, r0, r3
    7bda:	2b01      	cmp	r3, #1
    7bdc:	d403      	bmi.n	7be6 <tcp_process+0x1ce>
    7bde:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7be0:	1ac3      	subs	r3, r0, r3
    7be2:	2b00      	cmp	r3, #0
    7be4:	dd0e      	ble.n	7c04 <tcp_process+0x1ec>
				    ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    7be6:	4b35      	ldr	r3, [pc, #212]	; (7cbc <tcp_process+0x2a4>)
    7be8:	681a      	ldr	r2, [r3, #0]
				tcp_rst(
    7bea:	899c      	ldrh	r4, [r3, #12]
    7bec:	6899      	ldr	r1, [r3, #8]
    7bee:	8813      	ldrh	r3, [r2, #0]
    7bf0:	9301      	str	r3, [sp, #4]
    7bf2:	8853      	ldrh	r3, [r2, #2]
    7bf4:	9300      	str	r3, [sp, #0]
    7bf6:	4b37      	ldr	r3, [pc, #220]	; (7cd4 <tcp_process+0x2bc>)
    7bf8:	4a37      	ldr	r2, [pc, #220]	; (7cd8 <tcp_process+0x2c0>)
    7bfa:	4421      	add	r1, r4
    7bfc:	4c37      	ldr	r4, [pc, #220]	; (7cdc <tcp_process+0x2c4>)
    7bfe:	47a0      	blx	r4
	return ERR_OK;
    7c00:	2500      	movs	r5, #0
    7c02:	e721      	b.n	7a48 <tcp_process+0x30>
				pcb->state = ESTABLISHED;
    7c04:	2304      	movs	r3, #4
    7c06:	7623      	strb	r3, [r4, #24]
				TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    7c08:	6963      	ldr	r3, [r4, #20]
    7c0a:	b17b      	cbz	r3, 7c2c <tcp_process+0x214>
    7c0c:	2200      	movs	r2, #0
    7c0e:	4621      	mov	r1, r4
    7c10:	6920      	ldr	r0, [r4, #16]
    7c12:	4798      	blx	r3
    7c14:	4605      	mov	r5, r0
				if (err != ERR_OK) {
    7c16:	b165      	cbz	r5, 7c32 <tcp_process+0x21a>
					if (err != ERR_ABRT) {
    7c18:	f115 0f0a 	cmn.w	r5, #10
    7c1c:	f43f af14 	beq.w	7a48 <tcp_process+0x30>
						tcp_abort(pcb);
    7c20:	4620      	mov	r0, r4
    7c22:	4b2f      	ldr	r3, [pc, #188]	; (7ce0 <tcp_process+0x2c8>)
    7c24:	4798      	blx	r3
					return ERR_ABRT;
    7c26:	f06f 0509 	mvn.w	r5, #9
    7c2a:	e70d      	b.n	7a48 <tcp_process+0x30>
				TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
    7c2c:	f06f 050d 	mvn.w	r5, #13
    7c30:	e7f1      	b.n	7c16 <tcp_process+0x1fe>
				old_cwnd = pcb->cwnd;
    7c32:	f8b4 604c 	ldrh.w	r6, [r4, #76]	; 0x4c
				tcp_receive(pcb);
    7c36:	4620      	mov	r0, r4
    7c38:	4b2a      	ldr	r3, [pc, #168]	; (7ce4 <tcp_process+0x2cc>)
    7c3a:	4798      	blx	r3
				if (pcb->acked != 0) {
    7c3c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7c40:	b113      	cbz	r3, 7c48 <tcp_process+0x230>
					pcb->acked--;
    7c42:	3b01      	subs	r3, #1
    7c44:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
				pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    7c48:	2e01      	cmp	r6, #1
    7c4a:	d010      	beq.n	7c6e <tcp_process+0x256>
    7c4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7c4e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				if (recv_flags & TF_GOT_FIN) {
    7c52:	4b1a      	ldr	r3, [pc, #104]	; (7cbc <tcp_process+0x2a4>)
    7c54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7c58:	f013 0f20 	tst.w	r3, #32
    7c5c:	f43f aef4 	beq.w	7a48 <tcp_process+0x30>
					tcp_ack_now(pcb);
    7c60:	7fa3      	ldrb	r3, [r4, #30]
    7c62:	f043 0302 	orr.w	r3, r3, #2
    7c66:	77a3      	strb	r3, [r4, #30]
					pcb->state = CLOSE_WAIT;
    7c68:	2307      	movs	r3, #7
    7c6a:	7623      	strb	r3, [r4, #24]
    7c6c:	e6ec      	b.n	7a48 <tcp_process+0x30>
				pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
    7c6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    7c70:	005b      	lsls	r3, r3, #1
    7c72:	b29b      	uxth	r3, r3
    7c74:	e7eb      	b.n	7c4e <tcp_process+0x236>
		} else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
    7c76:	f013 0f02 	tst.w	r3, #2
    7c7a:	f000 810e 	beq.w	7e9a <tcp_process+0x482>
    7c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7c80:	3b01      	subs	r3, #1
    7c82:	4a0e      	ldr	r2, [pc, #56]	; (7cbc <tcp_process+0x2a4>)
    7c84:	6892      	ldr	r2, [r2, #8]
    7c86:	4293      	cmp	r3, r2
    7c88:	d001      	beq.n	7c8e <tcp_process+0x276>
	return ERR_OK;
    7c8a:	2500      	movs	r5, #0
    7c8c:	e6dc      	b.n	7a48 <tcp_process+0x30>
			tcp_rexmit(pcb);
    7c8e:	4620      	mov	r0, r4
    7c90:	4b15      	ldr	r3, [pc, #84]	; (7ce8 <tcp_process+0x2d0>)
    7c92:	4798      	blx	r3
	return ERR_OK;
    7c94:	2500      	movs	r5, #0
    7c96:	e6d7      	b.n	7a48 <tcp_process+0x30>
		tcp_receive(pcb);
    7c98:	4620      	mov	r0, r4
    7c9a:	4b12      	ldr	r3, [pc, #72]	; (7ce4 <tcp_process+0x2cc>)
    7c9c:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) { /* passive close */
    7c9e:	4b07      	ldr	r3, [pc, #28]	; (7cbc <tcp_process+0x2a4>)
    7ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7ca4:	f013 0f20 	tst.w	r3, #32
    7ca8:	f000 80f9 	beq.w	7e9e <tcp_process+0x486>
			tcp_ack_now(pcb);
    7cac:	7fa3      	ldrb	r3, [r4, #30]
    7cae:	f043 0302 	orr.w	r3, r3, #2
    7cb2:	77a3      	strb	r3, [r4, #30]
			pcb->state = CLOSE_WAIT;
    7cb4:	2307      	movs	r3, #7
    7cb6:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    7cb8:	2500      	movs	r5, #0
    7cba:	e6c5      	b.n	7a48 <tcp_process+0x30>
    7cbc:	200080c4 	.word	0x200080c4
    7cc0:	200161f4 	.word	0x200161f4
    7cc4:	00006ed5 	.word	0x00006ed5
    7cc8:	00003ef1 	.word	0x00003ef1
    7ccc:	00006ead 	.word	0x00006ead
    7cd0:	000064c5 	.word	0x000064c5
    7cd4:	200129bc 	.word	0x200129bc
    7cd8:	200129c4 	.word	0x200129c4
    7cdc:	00008c2d 	.word	0x00008c2d
    7ce0:	00006d25 	.word	0x00006d25
    7ce4:	000071a5 	.word	0x000071a5
    7ce8:	00008d05 	.word	0x00008d05
		tcp_receive(pcb);
    7cec:	4620      	mov	r0, r4
    7cee:	4b70      	ldr	r3, [pc, #448]	; (7eb0 <tcp_process+0x498>)
    7cf0:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) {
    7cf2:	4b70      	ldr	r3, [pc, #448]	; (7eb4 <tcp_process+0x49c>)
    7cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7cf8:	f013 0f20 	tst.w	r3, #32
    7cfc:	d03a      	beq.n	7d74 <tcp_process+0x35c>
			if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    7cfe:	4b6d      	ldr	r3, [pc, #436]	; (7eb4 <tcp_process+0x49c>)
    7d00:	791b      	ldrb	r3, [r3, #4]
    7d02:	f013 0f10 	tst.w	r3, #16
    7d06:	d004      	beq.n	7d12 <tcp_process+0x2fa>
    7d08:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7d0a:	4b6a      	ldr	r3, [pc, #424]	; (7eb4 <tcp_process+0x49c>)
    7d0c:	691b      	ldr	r3, [r3, #16]
    7d0e:	429a      	cmp	r2, r3
    7d10:	d007      	beq.n	7d22 <tcp_process+0x30a>
				tcp_ack_now(pcb);
    7d12:	7fa3      	ldrb	r3, [r4, #30]
    7d14:	f043 0302 	orr.w	r3, r3, #2
    7d18:	77a3      	strb	r3, [r4, #30]
				pcb->state = CLOSING;
    7d1a:	2308      	movs	r3, #8
    7d1c:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    7d1e:	2500      	movs	r5, #0
    7d20:	e692      	b.n	7a48 <tcp_process+0x30>
				tcp_ack_now(pcb);
    7d22:	7fa3      	ldrb	r3, [r4, #30]
    7d24:	f043 0302 	orr.w	r3, r3, #2
    7d28:	77a3      	strb	r3, [r4, #30]
				tcp_pcb_purge(pcb);
    7d2a:	4620      	mov	r0, r4
    7d2c:	4b62      	ldr	r3, [pc, #392]	; (7eb8 <tcp_process+0x4a0>)
    7d2e:	4798      	blx	r3
				TCP_RMV_ACTIVE(pcb);
    7d30:	4b62      	ldr	r3, [pc, #392]	; (7ebc <tcp_process+0x4a4>)
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	429c      	cmp	r4, r3
    7d36:	d00a      	beq.n	7d4e <tcp_process+0x336>
    7d38:	4a61      	ldr	r2, [pc, #388]	; (7ec0 <tcp_process+0x4a8>)
    7d3a:	6013      	str	r3, [r2, #0]
    7d3c:	4b60      	ldr	r3, [pc, #384]	; (7ec0 <tcp_process+0x4a8>)
    7d3e:	681b      	ldr	r3, [r3, #0]
    7d40:	b15b      	cbz	r3, 7d5a <tcp_process+0x342>
    7d42:	68da      	ldr	r2, [r3, #12]
    7d44:	4294      	cmp	r4, r2
    7d46:	d006      	beq.n	7d56 <tcp_process+0x33e>
    7d48:	4b5d      	ldr	r3, [pc, #372]	; (7ec0 <tcp_process+0x4a8>)
    7d4a:	601a      	str	r2, [r3, #0]
    7d4c:	e7f6      	b.n	7d3c <tcp_process+0x324>
    7d4e:	68da      	ldr	r2, [r3, #12]
    7d50:	4b5a      	ldr	r3, [pc, #360]	; (7ebc <tcp_process+0x4a4>)
    7d52:	601a      	str	r2, [r3, #0]
    7d54:	e001      	b.n	7d5a <tcp_process+0x342>
    7d56:	68e2      	ldr	r2, [r4, #12]
    7d58:	60da      	str	r2, [r3, #12]
    7d5a:	2201      	movs	r2, #1
    7d5c:	4b59      	ldr	r3, [pc, #356]	; (7ec4 <tcp_process+0x4ac>)
    7d5e:	701a      	strb	r2, [r3, #0]
				pcb->state = TIME_WAIT;
    7d60:	230a      	movs	r3, #10
    7d62:	7623      	strb	r3, [r4, #24]
				TCP_REG(&tcp_tw_pcbs, pcb);
    7d64:	4b58      	ldr	r3, [pc, #352]	; (7ec8 <tcp_process+0x4b0>)
    7d66:	681a      	ldr	r2, [r3, #0]
    7d68:	60e2      	str	r2, [r4, #12]
    7d6a:	601c      	str	r4, [r3, #0]
    7d6c:	4b57      	ldr	r3, [pc, #348]	; (7ecc <tcp_process+0x4b4>)
    7d6e:	4798      	blx	r3
	return ERR_OK;
    7d70:	2500      	movs	r5, #0
				TCP_REG(&tcp_tw_pcbs, pcb);
    7d72:	e669      	b.n	7a48 <tcp_process+0x30>
		} else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
    7d74:	4b4f      	ldr	r3, [pc, #316]	; (7eb4 <tcp_process+0x49c>)
    7d76:	791b      	ldrb	r3, [r3, #4]
    7d78:	f013 0f10 	tst.w	r3, #16
    7d7c:	f000 8091 	beq.w	7ea2 <tcp_process+0x48a>
    7d80:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7d82:	4b4c      	ldr	r3, [pc, #304]	; (7eb4 <tcp_process+0x49c>)
    7d84:	691b      	ldr	r3, [r3, #16]
    7d86:	429a      	cmp	r2, r3
    7d88:	d001      	beq.n	7d8e <tcp_process+0x376>
	return ERR_OK;
    7d8a:	2500      	movs	r5, #0
    7d8c:	e65c      	b.n	7a48 <tcp_process+0x30>
			pcb->state = FIN_WAIT_2;
    7d8e:	2306      	movs	r3, #6
    7d90:	7623      	strb	r3, [r4, #24]
	return ERR_OK;
    7d92:	2500      	movs	r5, #0
    7d94:	e658      	b.n	7a48 <tcp_process+0x30>
		tcp_receive(pcb);
    7d96:	4620      	mov	r0, r4
    7d98:	4b45      	ldr	r3, [pc, #276]	; (7eb0 <tcp_process+0x498>)
    7d9a:	4798      	blx	r3
		if (recv_flags & TF_GOT_FIN) {
    7d9c:	4b45      	ldr	r3, [pc, #276]	; (7eb4 <tcp_process+0x49c>)
    7d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7da2:	f013 0f20 	tst.w	r3, #32
    7da6:	d101      	bne.n	7dac <tcp_process+0x394>
	return ERR_OK;
    7da8:	2500      	movs	r5, #0
    7daa:	e64d      	b.n	7a48 <tcp_process+0x30>
			tcp_ack_now(pcb);
    7dac:	7fa3      	ldrb	r3, [r4, #30]
    7dae:	f043 0302 	orr.w	r3, r3, #2
    7db2:	77a3      	strb	r3, [r4, #30]
			tcp_pcb_purge(pcb);
    7db4:	4620      	mov	r0, r4
    7db6:	4b40      	ldr	r3, [pc, #256]	; (7eb8 <tcp_process+0x4a0>)
    7db8:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    7dba:	4b40      	ldr	r3, [pc, #256]	; (7ebc <tcp_process+0x4a4>)
    7dbc:	681b      	ldr	r3, [r3, #0]
    7dbe:	429c      	cmp	r4, r3
    7dc0:	d00a      	beq.n	7dd8 <tcp_process+0x3c0>
    7dc2:	4a3f      	ldr	r2, [pc, #252]	; (7ec0 <tcp_process+0x4a8>)
    7dc4:	6013      	str	r3, [r2, #0]
    7dc6:	4b3e      	ldr	r3, [pc, #248]	; (7ec0 <tcp_process+0x4a8>)
    7dc8:	681b      	ldr	r3, [r3, #0]
    7dca:	b15b      	cbz	r3, 7de4 <tcp_process+0x3cc>
    7dcc:	68da      	ldr	r2, [r3, #12]
    7dce:	4294      	cmp	r4, r2
    7dd0:	d006      	beq.n	7de0 <tcp_process+0x3c8>
    7dd2:	4b3b      	ldr	r3, [pc, #236]	; (7ec0 <tcp_process+0x4a8>)
    7dd4:	601a      	str	r2, [r3, #0]
    7dd6:	e7f6      	b.n	7dc6 <tcp_process+0x3ae>
    7dd8:	68da      	ldr	r2, [r3, #12]
    7dda:	4b38      	ldr	r3, [pc, #224]	; (7ebc <tcp_process+0x4a4>)
    7ddc:	601a      	str	r2, [r3, #0]
    7dde:	e001      	b.n	7de4 <tcp_process+0x3cc>
    7de0:	68e2      	ldr	r2, [r4, #12]
    7de2:	60da      	str	r2, [r3, #12]
    7de4:	2201      	movs	r2, #1
    7de6:	4b37      	ldr	r3, [pc, #220]	; (7ec4 <tcp_process+0x4ac>)
    7de8:	701a      	strb	r2, [r3, #0]
			pcb->state = TIME_WAIT;
    7dea:	230a      	movs	r3, #10
    7dec:	7623      	strb	r3, [r4, #24]
			TCP_REG(&tcp_tw_pcbs, pcb);
    7dee:	4b36      	ldr	r3, [pc, #216]	; (7ec8 <tcp_process+0x4b0>)
    7df0:	681a      	ldr	r2, [r3, #0]
    7df2:	60e2      	str	r2, [r4, #12]
    7df4:	601c      	str	r4, [r3, #0]
    7df6:	4b35      	ldr	r3, [pc, #212]	; (7ecc <tcp_process+0x4b4>)
    7df8:	4798      	blx	r3
	return ERR_OK;
    7dfa:	2500      	movs	r5, #0
    7dfc:	e624      	b.n	7a48 <tcp_process+0x30>
		tcp_receive(pcb);
    7dfe:	4620      	mov	r0, r4
    7e00:	4b2b      	ldr	r3, [pc, #172]	; (7eb0 <tcp_process+0x498>)
    7e02:	4798      	blx	r3
		if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    7e04:	4b2b      	ldr	r3, [pc, #172]	; (7eb4 <tcp_process+0x49c>)
    7e06:	791b      	ldrb	r3, [r3, #4]
    7e08:	f013 0f10 	tst.w	r3, #16
    7e0c:	d04b      	beq.n	7ea6 <tcp_process+0x48e>
    7e0e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7e10:	4b28      	ldr	r3, [pc, #160]	; (7eb4 <tcp_process+0x49c>)
    7e12:	691b      	ldr	r3, [r3, #16]
    7e14:	429a      	cmp	r2, r3
    7e16:	d001      	beq.n	7e1c <tcp_process+0x404>
	return ERR_OK;
    7e18:	2500      	movs	r5, #0
    7e1a:	e615      	b.n	7a48 <tcp_process+0x30>
			tcp_pcb_purge(pcb);
    7e1c:	4620      	mov	r0, r4
    7e1e:	4b26      	ldr	r3, [pc, #152]	; (7eb8 <tcp_process+0x4a0>)
    7e20:	4798      	blx	r3
			TCP_RMV_ACTIVE(pcb);
    7e22:	4b26      	ldr	r3, [pc, #152]	; (7ebc <tcp_process+0x4a4>)
    7e24:	681b      	ldr	r3, [r3, #0]
    7e26:	429c      	cmp	r4, r3
    7e28:	d002      	beq.n	7e30 <tcp_process+0x418>
    7e2a:	4a25      	ldr	r2, [pc, #148]	; (7ec0 <tcp_process+0x4a8>)
    7e2c:	6013      	str	r3, [r2, #0]
    7e2e:	e005      	b.n	7e3c <tcp_process+0x424>
    7e30:	68da      	ldr	r2, [r3, #12]
    7e32:	4b22      	ldr	r3, [pc, #136]	; (7ebc <tcp_process+0x4a4>)
    7e34:	601a      	str	r2, [r3, #0]
    7e36:	e009      	b.n	7e4c <tcp_process+0x434>
    7e38:	4b21      	ldr	r3, [pc, #132]	; (7ec0 <tcp_process+0x4a8>)
    7e3a:	601a      	str	r2, [r3, #0]
    7e3c:	4b20      	ldr	r3, [pc, #128]	; (7ec0 <tcp_process+0x4a8>)
    7e3e:	681b      	ldr	r3, [r3, #0]
    7e40:	b123      	cbz	r3, 7e4c <tcp_process+0x434>
    7e42:	68da      	ldr	r2, [r3, #12]
    7e44:	4294      	cmp	r4, r2
    7e46:	d1f7      	bne.n	7e38 <tcp_process+0x420>
    7e48:	68e2      	ldr	r2, [r4, #12]
    7e4a:	60da      	str	r2, [r3, #12]
    7e4c:	2201      	movs	r2, #1
    7e4e:	4b1d      	ldr	r3, [pc, #116]	; (7ec4 <tcp_process+0x4ac>)
    7e50:	701a      	strb	r2, [r3, #0]
			pcb->state = TIME_WAIT;
    7e52:	230a      	movs	r3, #10
    7e54:	7623      	strb	r3, [r4, #24]
			TCP_REG(&tcp_tw_pcbs, pcb);
    7e56:	4b1c      	ldr	r3, [pc, #112]	; (7ec8 <tcp_process+0x4b0>)
    7e58:	681a      	ldr	r2, [r3, #0]
    7e5a:	60e2      	str	r2, [r4, #12]
    7e5c:	601c      	str	r4, [r3, #0]
    7e5e:	4b1b      	ldr	r3, [pc, #108]	; (7ecc <tcp_process+0x4b4>)
    7e60:	4798      	blx	r3
	return ERR_OK;
    7e62:	2500      	movs	r5, #0
    7e64:	e5f0      	b.n	7a48 <tcp_process+0x30>
		tcp_receive(pcb);
    7e66:	4620      	mov	r0, r4
    7e68:	4b11      	ldr	r3, [pc, #68]	; (7eb0 <tcp_process+0x498>)
    7e6a:	4798      	blx	r3
		if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
    7e6c:	4b11      	ldr	r3, [pc, #68]	; (7eb4 <tcp_process+0x49c>)
    7e6e:	791b      	ldrb	r3, [r3, #4]
    7e70:	f013 0f10 	tst.w	r3, #16
    7e74:	d019      	beq.n	7eaa <tcp_process+0x492>
    7e76:	6d22      	ldr	r2, [r4, #80]	; 0x50
    7e78:	4b0e      	ldr	r3, [pc, #56]	; (7eb4 <tcp_process+0x49c>)
    7e7a:	691b      	ldr	r3, [r3, #16]
    7e7c:	429a      	cmp	r2, r3
    7e7e:	d001      	beq.n	7e84 <tcp_process+0x46c>
	return ERR_OK;
    7e80:	2500      	movs	r5, #0
    7e82:	e5e1      	b.n	7a48 <tcp_process+0x30>
			recv_flags |= TF_CLOSED;
    7e84:	4a0b      	ldr	r2, [pc, #44]	; (7eb4 <tcp_process+0x49c>)
    7e86:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    7e8a:	f043 0310 	orr.w	r3, r3, #16
    7e8e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	return ERR_OK;
    7e92:	2500      	movs	r5, #0
    7e94:	e5d8      	b.n	7a48 <tcp_process+0x30>
    7e96:	2500      	movs	r5, #0
    7e98:	e5d6      	b.n	7a48 <tcp_process+0x30>
    7e9a:	2500      	movs	r5, #0
    7e9c:	e5d4      	b.n	7a48 <tcp_process+0x30>
    7e9e:	2500      	movs	r5, #0
    7ea0:	e5d2      	b.n	7a48 <tcp_process+0x30>
    7ea2:	2500      	movs	r5, #0
    7ea4:	e5d0      	b.n	7a48 <tcp_process+0x30>
    7ea6:	2500      	movs	r5, #0
    7ea8:	e5ce      	b.n	7a48 <tcp_process+0x30>
    7eaa:	2500      	movs	r5, #0
    7eac:	e5cc      	b.n	7a48 <tcp_process+0x30>
    7eae:	bf00      	nop
    7eb0:	000071a5 	.word	0x000071a5
    7eb4:	200080c4 	.word	0x200080c4
    7eb8:	00006555 	.word	0x00006555
    7ebc:	200161f0 	.word	0x200161f0
    7ec0:	200161fc 	.word	0x200161fc
    7ec4:	200161ec 	.word	0x200161ec
    7ec8:	20016204 	.word	0x20016204
    7ecc:	00008f65 	.word	0x00008f65

00007ed0 <tcp_input>:
{
    7ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ed4:	b082      	sub	sp, #8
    7ed6:	4604      	mov	r4, r0
    7ed8:	460d      	mov	r5, r1
	iphdr  = (struct ip_hdr *)p->payload;
    7eda:	6843      	ldr	r3, [r0, #4]
	tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
    7edc:	7819      	ldrb	r1, [r3, #0]
    7ede:	f001 010f 	and.w	r1, r1, #15
    7ee2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7ee6:	4a8b      	ldr	r2, [pc, #556]	; (8114 <tcp_input+0x244>)
    7ee8:	6013      	str	r3, [r2, #0]
	if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
    7eea:	0089      	lsls	r1, r1, #2
    7eec:	4249      	negs	r1, r1
    7eee:	4b8a      	ldr	r3, [pc, #552]	; (8118 <tcp_input+0x248>)
    7ef0:	4798      	blx	r3
    7ef2:	b910      	cbnz	r0, 7efa <tcp_input+0x2a>
    7ef4:	8923      	ldrh	r3, [r4, #8]
    7ef6:	2b13      	cmp	r3, #19
    7ef8:	d805      	bhi.n	7f06 <tcp_input+0x36>
	pbuf_free(p);
    7efa:	4620      	mov	r0, r4
    7efc:	4b87      	ldr	r3, [pc, #540]	; (811c <tcp_input+0x24c>)
    7efe:	4798      	blx	r3
}
    7f00:	b002      	add	sp, #8
    7f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ip_addr_isbroadcast(&current_iphdr_dest, inp) || ip_addr_ismulticast(&current_iphdr_dest)) {
    7f06:	4629      	mov	r1, r5
    7f08:	4b85      	ldr	r3, [pc, #532]	; (8120 <tcp_input+0x250>)
    7f0a:	6818      	ldr	r0, [r3, #0]
    7f0c:	4b85      	ldr	r3, [pc, #532]	; (8124 <tcp_input+0x254>)
    7f0e:	4798      	blx	r3
    7f10:	2800      	cmp	r0, #0
    7f12:	d1f2      	bne.n	7efa <tcp_input+0x2a>
    7f14:	4b82      	ldr	r3, [pc, #520]	; (8120 <tcp_input+0x250>)
    7f16:	681b      	ldr	r3, [r3, #0]
    7f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    7f1c:	2be0      	cmp	r3, #224	; 0xe0
    7f1e:	d0ec      	beq.n	7efa <tcp_input+0x2a>
	if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(), IP_PROTO_TCP, p->tot_len) != 0) {
    7f20:	8923      	ldrh	r3, [r4, #8]
    7f22:	9300      	str	r3, [sp, #0]
    7f24:	2306      	movs	r3, #6
    7f26:	4a7e      	ldr	r2, [pc, #504]	; (8120 <tcp_input+0x250>)
    7f28:	497f      	ldr	r1, [pc, #508]	; (8128 <tcp_input+0x258>)
    7f2a:	4620      	mov	r0, r4
    7f2c:	4d7f      	ldr	r5, [pc, #508]	; (812c <tcp_input+0x25c>)
    7f2e:	47a8      	blx	r5
    7f30:	2800      	cmp	r0, #0
    7f32:	d1e2      	bne.n	7efa <tcp_input+0x2a>
	hdrlen = TCPH_HDRLEN(tcphdr);
    7f34:	4b77      	ldr	r3, [pc, #476]	; (8114 <tcp_input+0x244>)
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	8998      	ldrh	r0, [r3, #12]
    7f3a:	4b7d      	ldr	r3, [pc, #500]	; (8130 <tcp_input+0x260>)
    7f3c:	4798      	blx	r3
    7f3e:	f3c0 300f 	ubfx	r0, r0, #12, #16
	if (pbuf_header(p, -(hdrlen * 4))) {
    7f42:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
    7f46:	0081      	lsls	r1, r0, #2
    7f48:	b209      	sxth	r1, r1
    7f4a:	4620      	mov	r0, r4
    7f4c:	4b72      	ldr	r3, [pc, #456]	; (8118 <tcp_input+0x248>)
    7f4e:	4798      	blx	r3
    7f50:	2800      	cmp	r0, #0
    7f52:	d1d2      	bne.n	7efa <tcp_input+0x2a>
	tcphdr->src  = ntohs(tcphdr->src);
    7f54:	4d6f      	ldr	r5, [pc, #444]	; (8114 <tcp_input+0x244>)
    7f56:	682f      	ldr	r7, [r5, #0]
    7f58:	8838      	ldrh	r0, [r7, #0]
    7f5a:	4e75      	ldr	r6, [pc, #468]	; (8130 <tcp_input+0x260>)
    7f5c:	47b0      	blx	r6
    7f5e:	8038      	strh	r0, [r7, #0]
	tcphdr->dest = ntohs(tcphdr->dest);
    7f60:	682f      	ldr	r7, [r5, #0]
    7f62:	8878      	ldrh	r0, [r7, #2]
    7f64:	47b0      	blx	r6
    7f66:	8078      	strh	r0, [r7, #2]
	seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
    7f68:	682f      	ldr	r7, [r5, #0]
    7f6a:	6878      	ldr	r0, [r7, #4]
    7f6c:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 815c <tcp_input+0x28c>
    7f70:	47c0      	blx	r8
    7f72:	6078      	str	r0, [r7, #4]
    7f74:	60a8      	str	r0, [r5, #8]
	ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
    7f76:	682f      	ldr	r7, [r5, #0]
    7f78:	68b8      	ldr	r0, [r7, #8]
    7f7a:	47c0      	blx	r8
    7f7c:	60b8      	str	r0, [r7, #8]
    7f7e:	6128      	str	r0, [r5, #16]
	tcphdr->wnd           = ntohs(tcphdr->wnd);
    7f80:	682f      	ldr	r7, [r5, #0]
    7f82:	89f8      	ldrh	r0, [r7, #14]
    7f84:	47b0      	blx	r6
    7f86:	81f8      	strh	r0, [r7, #14]
	flags  = TCPH_FLAGS(tcphdr);
    7f88:	682b      	ldr	r3, [r5, #0]
    7f8a:	8998      	ldrh	r0, [r3, #12]
    7f8c:	47b0      	blx	r6
    7f8e:	f000 073f 	and.w	r7, r0, #63	; 0x3f
    7f92:	712f      	strb	r7, [r5, #4]
	tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
    7f94:	8923      	ldrh	r3, [r4, #8]
    7f96:	f017 0203 	ands.w	r2, r7, #3
    7f9a:	bf18      	it	ne
    7f9c:	2201      	movne	r2, #1
    7f9e:	4413      	add	r3, r2
    7fa0:	81ab      	strh	r3, [r5, #12]
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    7fa2:	4b64      	ldr	r3, [pc, #400]	; (8134 <tcp_input+0x264>)
    7fa4:	6818      	ldr	r0, [r3, #0]
    7fa6:	4605      	mov	r5, r0
	prev = NULL;
    7fa8:	2600      	movs	r6, #0
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    7faa:	e001      	b.n	7fb0 <tcp_input+0xe0>
		prev = pcb;
    7fac:	462e      	mov	r6, r5
	for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    7fae:	68ed      	ldr	r5, [r5, #12]
    7fb0:	b1cd      	cbz	r5, 7fe6 <tcp_input+0x116>
		if (pcb->remote_port == tcphdr->src && pcb->local_port == tcphdr->dest
    7fb2:	8ba9      	ldrh	r1, [r5, #28]
    7fb4:	4b57      	ldr	r3, [pc, #348]	; (8114 <tcp_input+0x244>)
    7fb6:	681b      	ldr	r3, [r3, #0]
    7fb8:	881a      	ldrh	r2, [r3, #0]
    7fba:	4291      	cmp	r1, r2
    7fbc:	d1f6      	bne.n	7fac <tcp_input+0xdc>
    7fbe:	8b6a      	ldrh	r2, [r5, #26]
    7fc0:	885b      	ldrh	r3, [r3, #2]
    7fc2:	429a      	cmp	r2, r3
    7fc4:	d1f2      	bne.n	7fac <tcp_input+0xdc>
		    && ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src)
    7fc6:	686a      	ldr	r2, [r5, #4]
    7fc8:	4b57      	ldr	r3, [pc, #348]	; (8128 <tcp_input+0x258>)
    7fca:	681b      	ldr	r3, [r3, #0]
    7fcc:	429a      	cmp	r2, r3
    7fce:	d1ed      	bne.n	7fac <tcp_input+0xdc>
		    && ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    7fd0:	682a      	ldr	r2, [r5, #0]
    7fd2:	4b53      	ldr	r3, [pc, #332]	; (8120 <tcp_input+0x250>)
    7fd4:	681b      	ldr	r3, [r3, #0]
    7fd6:	429a      	cmp	r2, r3
    7fd8:	d1e8      	bne.n	7fac <tcp_input+0xdc>
			if (prev != NULL) {
    7fda:	b126      	cbz	r6, 7fe6 <tcp_input+0x116>
				prev->next      = pcb->next;
    7fdc:	68eb      	ldr	r3, [r5, #12]
    7fde:	60f3      	str	r3, [r6, #12]
				pcb->next       = tcp_active_pcbs;
    7fe0:	60e8      	str	r0, [r5, #12]
				tcp_active_pcbs = pcb;
    7fe2:	4b54      	ldr	r3, [pc, #336]	; (8134 <tcp_input+0x264>)
    7fe4:	601d      	str	r5, [r3, #0]
	if (pcb == NULL) {
    7fe6:	2d00      	cmp	r5, #0
    7fe8:	d04e      	beq.n	8088 <tcp_input+0x1b8>
	if (pcb != NULL) {
    7fea:	2d00      	cmp	r5, #0
    7fec:	f000 8128 	beq.w	8240 <tcp_input+0x370>
		inseg.next   = NULL;
    7ff0:	4b48      	ldr	r3, [pc, #288]	; (8114 <tcp_input+0x244>)
    7ff2:	2200      	movs	r2, #0
    7ff4:	615a      	str	r2, [r3, #20]
		inseg.len    = p->tot_len;
    7ff6:	8921      	ldrh	r1, [r4, #8]
    7ff8:	8399      	strh	r1, [r3, #28]
		inseg.p      = p;
    7ffa:	619c      	str	r4, [r3, #24]
		inseg.tcphdr = tcphdr;
    7ffc:	6819      	ldr	r1, [r3, #0]
    7ffe:	6219      	str	r1, [r3, #32]
		recv_data  = NULL;
    8000:	625a      	str	r2, [r3, #36]	; 0x24
		recv_flags = 0;
    8002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (flags & TCP_PSH) {
    8006:	f017 0f08 	tst.w	r7, #8
    800a:	d003      	beq.n	8014 <tcp_input+0x144>
			p->flags |= PBUF_FLAG_PUSH;
    800c:	7b63      	ldrb	r3, [r4, #13]
    800e:	f043 0301 	orr.w	r3, r3, #1
    8012:	7363      	strb	r3, [r4, #13]
		if (pcb->refused_data != NULL) {
    8014:	6fab      	ldr	r3, [r5, #120]	; 0x78
    8016:	b153      	cbz	r3, 802e <tcp_input+0x15e>
			if ((tcp_process_refused_data(pcb) == ERR_ABRT) || ((pcb->refused_data != NULL) && (tcplen > 0))) {
    8018:	4628      	mov	r0, r5
    801a:	4b47      	ldr	r3, [pc, #284]	; (8138 <tcp_input+0x268>)
    801c:	4798      	blx	r3
    801e:	f110 0f0a 	cmn.w	r0, #10
    8022:	d022      	beq.n	806a <tcp_input+0x19a>
    8024:	6fab      	ldr	r3, [r5, #120]	; 0x78
    8026:	b113      	cbz	r3, 802e <tcp_input+0x15e>
    8028:	4b3a      	ldr	r3, [pc, #232]	; (8114 <tcp_input+0x244>)
    802a:	899b      	ldrh	r3, [r3, #12]
    802c:	b9eb      	cbnz	r3, 806a <tcp_input+0x19a>
		tcp_input_pcb = pcb;
    802e:	4b43      	ldr	r3, [pc, #268]	; (813c <tcp_input+0x26c>)
    8030:	601d      	str	r5, [r3, #0]
		err           = tcp_process(pcb);
    8032:	4628      	mov	r0, r5
    8034:	4b42      	ldr	r3, [pc, #264]	; (8140 <tcp_input+0x270>)
    8036:	4798      	blx	r3
		if (err != ERR_ABRT) {
    8038:	f110 0f0a 	cmn.w	r0, #10
    803c:	d015      	beq.n	806a <tcp_input+0x19a>
			if (recv_flags & TF_RESET) {
    803e:	4b35      	ldr	r3, [pc, #212]	; (8114 <tcp_input+0x244>)
    8040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8044:	f013 0f08 	tst.w	r3, #8
    8048:	f000 808a 	beq.w	8160 <tcp_input+0x290>
				TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
    804c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    8050:	b11b      	cbz	r3, 805a <tcp_input+0x18a>
    8052:	f06f 010a 	mvn.w	r1, #10
    8056:	6928      	ldr	r0, [r5, #16]
    8058:	4798      	blx	r3
				tcp_pcb_remove(&tcp_active_pcbs, pcb);
    805a:	4629      	mov	r1, r5
    805c:	4835      	ldr	r0, [pc, #212]	; (8134 <tcp_input+0x264>)
    805e:	4b39      	ldr	r3, [pc, #228]	; (8144 <tcp_input+0x274>)
    8060:	4798      	blx	r3
				memp_free(MEMP_TCP_PCB, pcb);
    8062:	4629      	mov	r1, r5
    8064:	2001      	movs	r0, #1
    8066:	4b38      	ldr	r3, [pc, #224]	; (8148 <tcp_input+0x278>)
    8068:	4798      	blx	r3
		tcp_input_pcb = NULL;
    806a:	2200      	movs	r2, #0
    806c:	4b33      	ldr	r3, [pc, #204]	; (813c <tcp_input+0x26c>)
    806e:	601a      	str	r2, [r3, #0]
		recv_data     = NULL;
    8070:	4b28      	ldr	r3, [pc, #160]	; (8114 <tcp_input+0x244>)
    8072:	625a      	str	r2, [r3, #36]	; 0x24
		if (inseg.p != NULL) {
    8074:	6998      	ldr	r0, [r3, #24]
    8076:	2800      	cmp	r0, #0
    8078:	f43f af42 	beq.w	7f00 <tcp_input+0x30>
			pbuf_free(inseg.p);
    807c:	4b27      	ldr	r3, [pc, #156]	; (811c <tcp_input+0x24c>)
    807e:	4798      	blx	r3
			inseg.p = NULL;
    8080:	2200      	movs	r2, #0
    8082:	4b24      	ldr	r3, [pc, #144]	; (8114 <tcp_input+0x244>)
    8084:	619a      	str	r2, [r3, #24]
    8086:	e73b      	b.n	7f00 <tcp_input+0x30>
		for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    8088:	4b30      	ldr	r3, [pc, #192]	; (814c <tcp_input+0x27c>)
    808a:	681d      	ldr	r5, [r3, #0]
    808c:	e000      	b.n	8090 <tcp_input+0x1c0>
    808e:	68ed      	ldr	r5, [r5, #12]
    8090:	b1d5      	cbz	r5, 80c8 <tcp_input+0x1f8>
			if (pcb->remote_port == tcphdr->src && pcb->local_port == tcphdr->dest
    8092:	8ba9      	ldrh	r1, [r5, #28]
    8094:	4b1f      	ldr	r3, [pc, #124]	; (8114 <tcp_input+0x244>)
    8096:	681b      	ldr	r3, [r3, #0]
    8098:	881a      	ldrh	r2, [r3, #0]
    809a:	4291      	cmp	r1, r2
    809c:	d1f7      	bne.n	808e <tcp_input+0x1be>
    809e:	8b6a      	ldrh	r2, [r5, #26]
    80a0:	885b      	ldrh	r3, [r3, #2]
    80a2:	429a      	cmp	r2, r3
    80a4:	d1f3      	bne.n	808e <tcp_input+0x1be>
			    && ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src)
    80a6:	686a      	ldr	r2, [r5, #4]
    80a8:	4b1f      	ldr	r3, [pc, #124]	; (8128 <tcp_input+0x258>)
    80aa:	681b      	ldr	r3, [r3, #0]
    80ac:	429a      	cmp	r2, r3
    80ae:	d1ee      	bne.n	808e <tcp_input+0x1be>
			    && ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
    80b0:	682a      	ldr	r2, [r5, #0]
    80b2:	4b1b      	ldr	r3, [pc, #108]	; (8120 <tcp_input+0x250>)
    80b4:	681b      	ldr	r3, [r3, #0]
    80b6:	429a      	cmp	r2, r3
    80b8:	d1e9      	bne.n	808e <tcp_input+0x1be>
				tcp_timewait_input(pcb);
    80ba:	4628      	mov	r0, r5
    80bc:	4b24      	ldr	r3, [pc, #144]	; (8150 <tcp_input+0x280>)
    80be:	4798      	blx	r3
				pbuf_free(p);
    80c0:	4620      	mov	r0, r4
    80c2:	4b16      	ldr	r3, [pc, #88]	; (811c <tcp_input+0x24c>)
    80c4:	4798      	blx	r3
				return;
    80c6:	e71b      	b.n	7f00 <tcp_input+0x30>
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    80c8:	4b22      	ldr	r3, [pc, #136]	; (8154 <tcp_input+0x284>)
    80ca:	681e      	ldr	r6, [r3, #0]
    80cc:	4630      	mov	r0, r6
		prev = NULL;
    80ce:	4629      	mov	r1, r5
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    80d0:	e001      	b.n	80d6 <tcp_input+0x206>
			prev = (struct tcp_pcb *)lpcb;
    80d2:	4601      	mov	r1, r0
		for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
    80d4:	68c0      	ldr	r0, [r0, #12]
    80d6:	b168      	cbz	r0, 80f4 <tcp_input+0x224>
			if (lpcb->local_port == tcphdr->dest) {
    80d8:	8b42      	ldrh	r2, [r0, #26]
    80da:	4b0e      	ldr	r3, [pc, #56]	; (8114 <tcp_input+0x244>)
    80dc:	681b      	ldr	r3, [r3, #0]
    80de:	885b      	ldrh	r3, [r3, #2]
    80e0:	429a      	cmp	r2, r3
    80e2:	d1f6      	bne.n	80d2 <tcp_input+0x202>
				if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) || ip_addr_isany(&(lpcb->local_ip))) {
    80e4:	6803      	ldr	r3, [r0, #0]
    80e6:	4a0e      	ldr	r2, [pc, #56]	; (8120 <tcp_input+0x250>)
    80e8:	6812      	ldr	r2, [r2, #0]
    80ea:	4293      	cmp	r3, r2
    80ec:	d002      	beq.n	80f4 <tcp_input+0x224>
    80ee:	b108      	cbz	r0, 80f4 <tcp_input+0x224>
    80f0:	2b00      	cmp	r3, #0
    80f2:	d1ee      	bne.n	80d2 <tcp_input+0x202>
		if (lpcb != NULL) {
    80f4:	2800      	cmp	r0, #0
    80f6:	f43f af78 	beq.w	7fea <tcp_input+0x11a>
			if (prev != NULL) {
    80fa:	b121      	cbz	r1, 8106 <tcp_input+0x236>
				((struct tcp_pcb_listen *)prev)->next = lpcb->next;
    80fc:	68c3      	ldr	r3, [r0, #12]
    80fe:	60cb      	str	r3, [r1, #12]
				lpcb->next = tcp_listen_pcbs.listen_pcbs;
    8100:	60c6      	str	r6, [r0, #12]
				tcp_listen_pcbs.listen_pcbs = lpcb;
    8102:	4b14      	ldr	r3, [pc, #80]	; (8154 <tcp_input+0x284>)
    8104:	6018      	str	r0, [r3, #0]
			tcp_listen_input(lpcb);
    8106:	4b14      	ldr	r3, [pc, #80]	; (8158 <tcp_input+0x288>)
    8108:	4798      	blx	r3
			pbuf_free(p);
    810a:	4620      	mov	r0, r4
    810c:	4b03      	ldr	r3, [pc, #12]	; (811c <tcp_input+0x24c>)
    810e:	4798      	blx	r3
			return;
    8110:	e6f6      	b.n	7f00 <tcp_input+0x30>
    8112:	bf00      	nop
    8114:	200080c4 	.word	0x200080c4
    8118:	00005f8f 	.word	0x00005f8f
    811c:	00006009 	.word	0x00006009
    8120:	200129c4 	.word	0x200129c4
    8124:	00005121 	.word	0x00005121
    8128:	200129bc 	.word	0x200129bc
    812c:	00004ca5 	.word	0x00004ca5
    8130:	00003ecd 	.word	0x00003ecd
    8134:	200161f0 	.word	0x200161f0
    8138:	00006b11 	.word	0x00006b11
    813c:	20016208 	.word	0x20016208
    8140:	00007a19 	.word	0x00007a19
    8144:	000068c1 	.word	0x000068c1
    8148:	00005d31 	.word	0x00005d31
    814c:	20016204 	.word	0x20016204
    8150:	00006f69 	.word	0x00006f69
    8154:	200161f8 	.word	0x200161f8
    8158:	00006ff5 	.word	0x00006ff5
    815c:	00003ef1 	.word	0x00003ef1
			} else if (recv_flags & TF_CLOSED) {
    8160:	f013 0f10 	tst.w	r3, #16
    8164:	d013      	beq.n	818e <tcp_input+0x2be>
				if (!(pcb->flags & TF_RXCLOSED)) {
    8166:	7fab      	ldrb	r3, [r5, #30]
    8168:	f013 0f10 	tst.w	r3, #16
    816c:	d106      	bne.n	817c <tcp_input+0x2ac>
					TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
    816e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    8172:	b11b      	cbz	r3, 817c <tcp_input+0x2ac>
    8174:	f06f 010b 	mvn.w	r1, #11
    8178:	6928      	ldr	r0, [r5, #16]
    817a:	4798      	blx	r3
				tcp_pcb_remove(&tcp_active_pcbs, pcb);
    817c:	4629      	mov	r1, r5
    817e:	483e      	ldr	r0, [pc, #248]	; (8278 <tcp_input+0x3a8>)
    8180:	4b3e      	ldr	r3, [pc, #248]	; (827c <tcp_input+0x3ac>)
    8182:	4798      	blx	r3
				memp_free(MEMP_TCP_PCB, pcb);
    8184:	4629      	mov	r1, r5
    8186:	2001      	movs	r0, #1
    8188:	4b3d      	ldr	r3, [pc, #244]	; (8280 <tcp_input+0x3b0>)
    818a:	4798      	blx	r3
    818c:	e76d      	b.n	806a <tcp_input+0x19a>
				if (pcb->acked > 0) {
    818e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    8192:	b142      	cbz	r2, 81a6 <tcp_input+0x2d6>
					TCP_EVENT_SENT(pcb, pcb->acked, err);
    8194:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    8196:	b1a3      	cbz	r3, 81c2 <tcp_input+0x2f2>
    8198:	4629      	mov	r1, r5
    819a:	6928      	ldr	r0, [r5, #16]
    819c:	4798      	blx	r3
					if (err == ERR_ABRT) {
    819e:	f110 0f0a 	cmn.w	r0, #10
    81a2:	f43f af62 	beq.w	806a <tcp_input+0x19a>
				if (recv_data != NULL) {
    81a6:	4b37      	ldr	r3, [pc, #220]	; (8284 <tcp_input+0x3b4>)
    81a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    81aa:	b1da      	cbz	r2, 81e4 <tcp_input+0x314>
					if (pcb->flags & TF_RXCLOSED) {
    81ac:	7fab      	ldrb	r3, [r5, #30]
    81ae:	f013 0f10 	tst.w	r3, #16
    81b2:	d008      	beq.n	81c6 <tcp_input+0x2f6>
						pbuf_free(recv_data);
    81b4:	4610      	mov	r0, r2
    81b6:	4b34      	ldr	r3, [pc, #208]	; (8288 <tcp_input+0x3b8>)
    81b8:	4798      	blx	r3
						tcp_abort(pcb);
    81ba:	4628      	mov	r0, r5
    81bc:	4b33      	ldr	r3, [pc, #204]	; (828c <tcp_input+0x3bc>)
    81be:	4798      	blx	r3
						goto aborted;
    81c0:	e753      	b.n	806a <tcp_input+0x19a>
					TCP_EVENT_SENT(pcb, pcb->acked, err);
    81c2:	2000      	movs	r0, #0
    81c4:	e7eb      	b.n	819e <tcp_input+0x2ce>
					TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    81c6:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    81ca:	b1f4      	cbz	r4, 820a <tcp_input+0x33a>
    81cc:	2300      	movs	r3, #0
    81ce:	4629      	mov	r1, r5
    81d0:	6928      	ldr	r0, [r5, #16]
    81d2:	47a0      	blx	r4
					if (err == ERR_ABRT) {
    81d4:	f110 0f0a 	cmn.w	r0, #10
    81d8:	f43f af47 	beq.w	806a <tcp_input+0x19a>
					if (err != ERR_OK) {
    81dc:	b110      	cbz	r0, 81e4 <tcp_input+0x314>
						pcb->refused_data = recv_data;
    81de:	4b29      	ldr	r3, [pc, #164]	; (8284 <tcp_input+0x3b4>)
    81e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    81e2:	67ab      	str	r3, [r5, #120]	; 0x78
				if (recv_flags & TF_GOT_FIN) {
    81e4:	4b27      	ldr	r3, [pc, #156]	; (8284 <tcp_input+0x3b4>)
    81e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    81ea:	f013 0f20 	tst.w	r3, #32
    81ee:	d005      	beq.n	81fc <tcp_input+0x32c>
					if (pcb->refused_data != NULL) {
    81f0:	6fab      	ldr	r3, [r5, #120]	; 0x78
    81f2:	b183      	cbz	r3, 8216 <tcp_input+0x346>
						pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
    81f4:	7b5a      	ldrb	r2, [r3, #13]
    81f6:	f042 0220 	orr.w	r2, r2, #32
    81fa:	735a      	strb	r2, [r3, #13]
				tcp_input_pcb = NULL;
    81fc:	2200      	movs	r2, #0
    81fe:	4b24      	ldr	r3, [pc, #144]	; (8290 <tcp_input+0x3c0>)
    8200:	601a      	str	r2, [r3, #0]
				tcp_output(pcb);
    8202:	4628      	mov	r0, r5
    8204:	4b23      	ldr	r3, [pc, #140]	; (8294 <tcp_input+0x3c4>)
    8206:	4798      	blx	r3
    8208:	e72f      	b.n	806a <tcp_input+0x19a>
					TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
    820a:	2300      	movs	r3, #0
    820c:	4629      	mov	r1, r5
    820e:	4618      	mov	r0, r3
    8210:	4c21      	ldr	r4, [pc, #132]	; (8298 <tcp_input+0x3c8>)
    8212:	47a0      	blx	r4
    8214:	e7de      	b.n	81d4 <tcp_input+0x304>
						if (pcb->rcv_wnd != TCP_WND) {
    8216:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    8218:	f241 62d0 	movw	r2, #5840	; 0x16d0
    821c:	4293      	cmp	r3, r2
    821e:	d001      	beq.n	8224 <tcp_input+0x354>
							pcb->rcv_wnd++;
    8220:	3301      	adds	r3, #1
    8222:	85ab      	strh	r3, [r5, #44]	; 0x2c
						TCP_EVENT_CLOSED(pcb, err);
    8224:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    8228:	b144      	cbz	r4, 823c <tcp_input+0x36c>
    822a:	2300      	movs	r3, #0
    822c:	461a      	mov	r2, r3
    822e:	4629      	mov	r1, r5
    8230:	6928      	ldr	r0, [r5, #16]
    8232:	47a0      	blx	r4
						if (err == ERR_ABRT) {
    8234:	f110 0f0a 	cmn.w	r0, #10
    8238:	d1e0      	bne.n	81fc <tcp_input+0x32c>
    823a:	e716      	b.n	806a <tcp_input+0x19a>
						TCP_EVENT_CLOSED(pcb, err);
    823c:	2000      	movs	r0, #0
    823e:	e7f9      	b.n	8234 <tcp_input+0x364>
		if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
    8240:	4b10      	ldr	r3, [pc, #64]	; (8284 <tcp_input+0x3b4>)
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	8998      	ldrh	r0, [r3, #12]
    8246:	4b15      	ldr	r3, [pc, #84]	; (829c <tcp_input+0x3cc>)
    8248:	4798      	blx	r3
    824a:	f010 0f04 	tst.w	r0, #4
    824e:	d003      	beq.n	8258 <tcp_input+0x388>
		pbuf_free(p);
    8250:	4620      	mov	r0, r4
    8252:	4b0d      	ldr	r3, [pc, #52]	; (8288 <tcp_input+0x3b8>)
    8254:	4798      	blx	r3
    8256:	e653      	b.n	7f00 <tcp_input+0x30>
			tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    8258:	480a      	ldr	r0, [pc, #40]	; (8284 <tcp_input+0x3b4>)
    825a:	6803      	ldr	r3, [r0, #0]
    825c:	8985      	ldrh	r5, [r0, #12]
    825e:	6881      	ldr	r1, [r0, #8]
    8260:	881a      	ldrh	r2, [r3, #0]
    8262:	9201      	str	r2, [sp, #4]
    8264:	885b      	ldrh	r3, [r3, #2]
    8266:	9300      	str	r3, [sp, #0]
    8268:	4b0d      	ldr	r3, [pc, #52]	; (82a0 <tcp_input+0x3d0>)
    826a:	4a0e      	ldr	r2, [pc, #56]	; (82a4 <tcp_input+0x3d4>)
    826c:	4429      	add	r1, r5
    826e:	6900      	ldr	r0, [r0, #16]
    8270:	4d0d      	ldr	r5, [pc, #52]	; (82a8 <tcp_input+0x3d8>)
    8272:	47a8      	blx	r5
    8274:	e7ec      	b.n	8250 <tcp_input+0x380>
    8276:	bf00      	nop
    8278:	200161f0 	.word	0x200161f0
    827c:	000068c1 	.word	0x000068c1
    8280:	00005d31 	.word	0x00005d31
    8284:	200080c4 	.word	0x200080c4
    8288:	00006009 	.word	0x00006009
    828c:	00006d25 	.word	0x00006d25
    8290:	20016208 	.word	0x20016208
    8294:	00008a51 	.word	0x00008a51
    8298:	00006ae1 	.word	0x00006ae1
    829c:	00003ecd 	.word	0x00003ecd
    82a0:	200129bc 	.word	0x200129bc
    82a4:	200129c4 	.word	0x200129c4
    82a8:	00008c2d 	.word	0x00008c2d

000082ac <tcp_write_checks>:
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
	/* connection is in invalid state for data transmission? */
	if ((pcb->state != ESTABLISHED) && (pcb->state != CLOSE_WAIT) && (pcb->state != SYN_SENT)
    82ac:	7e03      	ldrb	r3, [r0, #24]
    82ae:	2b04      	cmp	r3, #4
    82b0:	d005      	beq.n	82be <tcp_write_checks+0x12>
    82b2:	2b07      	cmp	r3, #7
    82b4:	d003      	beq.n	82be <tcp_write_checks+0x12>
    82b6:	2b02      	cmp	r3, #2
    82b8:	d001      	beq.n	82be <tcp_write_checks+0x12>
	    && (pcb->state != SYN_RCVD)) {
    82ba:	2b03      	cmp	r3, #3
    82bc:	d118      	bne.n	82f0 <tcp_write_checks+0x44>
		LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE,
		            ("tcp_write() called in invalid state\n"));
		return ERR_CONN;
	} else if (len == 0) {
    82be:	b1d1      	cbz	r1, 82f6 <tcp_write_checks+0x4a>
		return ERR_OK;
	}

	/* fail on too much data */
	if (len > pcb->snd_buf) {
    82c0:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    82c4:	4299      	cmp	r1, r3
    82c6:	d805      	bhi.n	82d4 <tcp_write_checks+0x28>
	LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %" U16_F "\n", (u16_t)pcb->snd_queuelen));

	/* If total number of pbufs on the unsent/unacked queues exceeds the
	 * configured maximum, return an error */
	/* check for configured max queuelen and possible overflow */
	if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    82c8:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    82cc:	2b07      	cmp	r3, #7
    82ce:	d808      	bhi.n	82e2 <tcp_write_checks+0x36>
		LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
		            pcb->unacked != NULL || pcb->unsent != NULL);
	} else {
		LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty", pcb->unacked == NULL && pcb->unsent == NULL);
	}
	return ERR_OK;
    82d0:	2000      	movs	r0, #0
}
    82d2:	4770      	bx	lr
		pcb->flags |= TF_NAGLEMEMERR;
    82d4:	7f83      	ldrb	r3, [r0, #30]
    82d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    82da:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    82dc:	f04f 30ff 	mov.w	r0, #4294967295
    82e0:	4770      	bx	lr
		pcb->flags |= TF_NAGLEMEMERR;
    82e2:	7f83      	ldrb	r3, [r0, #30]
    82e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    82e8:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    82ea:	f04f 30ff 	mov.w	r0, #4294967295
    82ee:	4770      	bx	lr
		return ERR_CONN;
    82f0:	f06f 000c 	mvn.w	r0, #12
    82f4:	4770      	bx	lr
		return ERR_OK;
    82f6:	2000      	movs	r0, #0
    82f8:	4770      	bx	lr
	...

000082fc <tcp_pbuf_prealloc>:
{
    82fc:	b538      	push	{r3, r4, r5, lr}
    82fe:	460c      	mov	r4, r1
    8300:	461d      	mov	r5, r3
    8302:	f89d 3018 	ldrb.w	r3, [sp, #24]
	if (length < max_length) {
    8306:	4291      	cmp	r1, r2
    8308:	d215      	bcs.n	8336 <tcp_pbuf_prealloc+0x3a>
		if ((apiflags & TCP_WRITE_FLAG_MORE)
    830a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    830e:	f011 0f02 	tst.w	r1, #2
    8312:	d108      	bne.n	8326 <tcp_pbuf_prealloc+0x2a>
		    || (!(pcb->flags & TF_NODELAY) && (!first_seg || pcb->unsent != NULL || pcb->unacked != NULL))) {
    8314:	9904      	ldr	r1, [sp, #16]
    8316:	7f89      	ldrb	r1, [r1, #30]
    8318:	f011 0f40 	tst.w	r1, #64	; 0x40
    831c:	d11d      	bne.n	835a <tcp_pbuf_prealloc+0x5e>
    831e:	b113      	cbz	r3, 8326 <tcp_pbuf_prealloc+0x2a>
    8320:	9b04      	ldr	r3, [sp, #16]
    8322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    8324:	b19b      	cbz	r3, 834e <tcp_pbuf_prealloc+0x52>
			alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    8326:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
    832a:	f021 0103 	bic.w	r1, r1, #3
    832e:	428a      	cmp	r2, r1
    8330:	bfa8      	it	ge
    8332:	460a      	movge	r2, r1
    8334:	b291      	uxth	r1, r2
	p = pbuf_alloc(layer, alloc, PBUF_RAM);
    8336:	2200      	movs	r2, #0
    8338:	4b09      	ldr	r3, [pc, #36]	; (8360 <tcp_pbuf_prealloc+0x64>)
    833a:	4798      	blx	r3
	if (p == NULL) {
    833c:	4603      	mov	r3, r0
    833e:	b120      	cbz	r0, 834a <tcp_pbuf_prealloc+0x4e>
	*oversize = p->len - length;
    8340:	8942      	ldrh	r2, [r0, #10]
    8342:	1b12      	subs	r2, r2, r4
    8344:	802a      	strh	r2, [r5, #0]
	p->len = p->tot_len = length;
    8346:	8104      	strh	r4, [r0, #8]
    8348:	8144      	strh	r4, [r0, #10]
}
    834a:	4618      	mov	r0, r3
    834c:	bd38      	pop	{r3, r4, r5, pc}
		    || (!(pcb->flags & TF_NODELAY) && (!first_seg || pcb->unsent != NULL || pcb->unacked != NULL))) {
    834e:	9b04      	ldr	r3, [sp, #16]
    8350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8352:	2b00      	cmp	r3, #0
    8354:	d1e7      	bne.n	8326 <tcp_pbuf_prealloc+0x2a>
	u16_t        alloc = length;
    8356:	4621      	mov	r1, r4
    8358:	e7ed      	b.n	8336 <tcp_pbuf_prealloc+0x3a>
    835a:	4621      	mov	r1, r4
    835c:	e7eb      	b.n	8336 <tcp_pbuf_prealloc+0x3a>
    835e:	bf00      	nop
    8360:	0000606d 	.word	0x0000606d

00008364 <tcp_create_segment>:
{
    8364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8368:	4681      	mov	r9, r0
    836a:	460f      	mov	r7, r1
    836c:	4690      	mov	r8, r2
    836e:	469a      	mov	sl, r3
    8370:	f89d 6020 	ldrb.w	r6, [sp, #32]
	u8_t            optlen = LWIP_TCP_OPT_LENGTH(optflags);
    8374:	f016 0f01 	tst.w	r6, #1
    8378:	d03a      	beq.n	83f0 <tcp_create_segment+0x8c>
    837a:	2504      	movs	r5, #4
    837c:	f016 0f02 	tst.w	r6, #2
    8380:	d038      	beq.n	83f4 <tcp_create_segment+0x90>
    8382:	230c      	movs	r3, #12
    8384:	441d      	add	r5, r3
	if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
    8386:	2003      	movs	r0, #3
    8388:	4b20      	ldr	r3, [pc, #128]	; (840c <tcp_create_segment+0xa8>)
    838a:	4798      	blx	r3
    838c:	4604      	mov	r4, r0
    838e:	2800      	cmp	r0, #0
    8390:	d032      	beq.n	83f8 <tcp_create_segment+0x94>
	seg->flags = optflags;
    8392:	7286      	strb	r6, [r0, #10]
	seg->next  = NULL;
    8394:	2300      	movs	r3, #0
    8396:	6003      	str	r3, [r0, #0]
	seg->p     = p;
    8398:	6047      	str	r7, [r0, #4]
	seg->len   = p->tot_len - optlen;
    839a:	893b      	ldrh	r3, [r7, #8]
    839c:	1b5b      	subs	r3, r3, r5
    839e:	8103      	strh	r3, [r0, #8]
	if (pbuf_header(p, TCP_HLEN)) {
    83a0:	2114      	movs	r1, #20
    83a2:	4638      	mov	r0, r7
    83a4:	4b1a      	ldr	r3, [pc, #104]	; (8410 <tcp_create_segment+0xac>)
    83a6:	4798      	blx	r3
    83a8:	bb50      	cbnz	r0, 8400 <tcp_create_segment+0x9c>
	seg->tcphdr        = (struct tcp_hdr *)seg->p->payload;
    83aa:	6863      	ldr	r3, [r4, #4]
    83ac:	685f      	ldr	r7, [r3, #4]
    83ae:	60e7      	str	r7, [r4, #12]
	seg->tcphdr->src   = htons(pcb->local_port);
    83b0:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    83b4:	4e17      	ldr	r6, [pc, #92]	; (8414 <tcp_create_segment+0xb0>)
    83b6:	47b0      	blx	r6
    83b8:	8038      	strh	r0, [r7, #0]
	seg->tcphdr->dest  = htons(pcb->remote_port);
    83ba:	68e7      	ldr	r7, [r4, #12]
    83bc:	f8b9 001c 	ldrh.w	r0, [r9, #28]
    83c0:	47b0      	blx	r6
    83c2:	8078      	strh	r0, [r7, #2]
	seg->tcphdr->seqno = htonl(seqno);
    83c4:	68e7      	ldr	r7, [r4, #12]
    83c6:	4650      	mov	r0, sl
    83c8:	4b13      	ldr	r3, [pc, #76]	; (8418 <tcp_create_segment+0xb4>)
    83ca:	4798      	blx	r3
    83cc:	6078      	str	r0, [r7, #4]
	TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
    83ce:	68e7      	ldr	r7, [r4, #12]
    83d0:	f3c5 0087 	ubfx	r0, r5, #2, #8
    83d4:	3005      	adds	r0, #5
    83d6:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
    83da:	b200      	sxth	r0, r0
    83dc:	b280      	uxth	r0, r0
    83de:	47b0      	blx	r6
    83e0:	81b8      	strh	r0, [r7, #12]
	seg->tcphdr->urgp = 0;
    83e2:	68e3      	ldr	r3, [r4, #12]
    83e4:	2200      	movs	r2, #0
    83e6:	749a      	strb	r2, [r3, #18]
    83e8:	74da      	strb	r2, [r3, #19]
}
    83ea:	4620      	mov	r0, r4
    83ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	u8_t            optlen = LWIP_TCP_OPT_LENGTH(optflags);
    83f0:	2500      	movs	r5, #0
    83f2:	e7c3      	b.n	837c <tcp_create_segment+0x18>
    83f4:	2300      	movs	r3, #0
    83f6:	e7c5      	b.n	8384 <tcp_create_segment+0x20>
		pbuf_free(p);
    83f8:	4638      	mov	r0, r7
    83fa:	4b08      	ldr	r3, [pc, #32]	; (841c <tcp_create_segment+0xb8>)
    83fc:	4798      	blx	r3
		return NULL;
    83fe:	e7f4      	b.n	83ea <tcp_create_segment+0x86>
		tcp_seg_free(seg);
    8400:	4620      	mov	r0, r4
    8402:	4b07      	ldr	r3, [pc, #28]	; (8420 <tcp_create_segment+0xbc>)
    8404:	4798      	blx	r3
		return NULL;
    8406:	2400      	movs	r4, #0
    8408:	e7ef      	b.n	83ea <tcp_create_segment+0x86>
    840a:	bf00      	nop
    840c:	00005d09 	.word	0x00005d09
    8410:	00005f8f 	.word	0x00005f8f
    8414:	00003ec1 	.word	0x00003ec1
    8418:	00003ed9 	.word	0x00003ed9
    841c:	00006009 	.word	0x00006009
    8420:	000064c5 	.word	0x000064c5

00008424 <tcp_output_alloc_header>:
{
    8424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8428:	4606      	mov	r6, r0
    842a:	460c      	mov	r4, r1
    842c:	4699      	mov	r9, r3
	struct pbuf *   p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
    842e:	4411      	add	r1, r2
    8430:	b289      	uxth	r1, r1
    8432:	3114      	adds	r1, #20
    8434:	2200      	movs	r2, #0
    8436:	b289      	uxth	r1, r1
    8438:	2001      	movs	r0, #1
    843a:	4b14      	ldr	r3, [pc, #80]	; (848c <tcp_output_alloc_header+0x68>)
    843c:	4798      	blx	r3
	if (p != NULL) {
    843e:	4680      	mov	r8, r0
    8440:	b308      	cbz	r0, 8486 <tcp_output_alloc_header+0x62>
		tcphdr        = (struct tcp_hdr *)p->payload;
    8442:	6845      	ldr	r5, [r0, #4]
		tcphdr->src   = htons(pcb->local_port);
    8444:	8b70      	ldrh	r0, [r6, #26]
    8446:	4f12      	ldr	r7, [pc, #72]	; (8490 <tcp_output_alloc_header+0x6c>)
    8448:	47b8      	blx	r7
    844a:	8028      	strh	r0, [r5, #0]
		tcphdr->dest  = htons(pcb->remote_port);
    844c:	8bb0      	ldrh	r0, [r6, #28]
    844e:	47b8      	blx	r7
    8450:	8068      	strh	r0, [r5, #2]
		tcphdr->seqno = seqno_be;
    8452:	f8c5 9004 	str.w	r9, [r5, #4]
		tcphdr->ackno = htonl(pcb->rcv_nxt);
    8456:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    8458:	4b0e      	ldr	r3, [pc, #56]	; (8494 <tcp_output_alloc_header+0x70>)
    845a:	4798      	blx	r3
    845c:	60a8      	str	r0, [r5, #8]
		TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    845e:	08a0      	lsrs	r0, r4, #2
    8460:	3005      	adds	r0, #5
    8462:	0300      	lsls	r0, r0, #12
    8464:	b280      	uxth	r0, r0
    8466:	f040 0010 	orr.w	r0, r0, #16
    846a:	47b8      	blx	r7
    846c:	81a8      	strh	r0, [r5, #12]
		tcphdr->wnd    = htons(pcb->rcv_ann_wnd);
    846e:	8df0      	ldrh	r0, [r6, #46]	; 0x2e
    8470:	47b8      	blx	r7
    8472:	81e8      	strh	r0, [r5, #14]
		tcphdr->chksum = 0;
    8474:	2300      	movs	r3, #0
    8476:	742b      	strb	r3, [r5, #16]
    8478:	746b      	strb	r3, [r5, #17]
		tcphdr->urgp   = 0;
    847a:	74ab      	strb	r3, [r5, #18]
    847c:	74eb      	strb	r3, [r5, #19]
		pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    847e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8480:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
    8482:	4413      	add	r3, r2
    8484:	6333      	str	r3, [r6, #48]	; 0x30
}
    8486:	4640      	mov	r0, r8
    8488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    848c:	0000606d 	.word	0x0000606d
    8490:	00003ec1 	.word	0x00003ec1
    8494:	00003ed9 	.word	0x00003ed9

00008498 <tcp_output_segment>:
 *
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
    8498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    849c:	b082      	sub	sp, #8
    849e:	4605      	mov	r5, r0
    84a0:	460c      	mov	r4, r1
	/** @bug Exclude retransmitted segments from this count. */
	snmp_inc_tcpoutsegs();

	/* The TCP header has already been constructed, but the ackno and
	 wnd fields remain. */
	seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
    84a2:	68c6      	ldr	r6, [r0, #12]
    84a4:	6a88      	ldr	r0, [r1, #40]	; 0x28
    84a6:	4b33      	ldr	r3, [pc, #204]	; (8574 <tcp_output_segment+0xdc>)
    84a8:	4798      	blx	r3
    84aa:	60b0      	str	r0, [r6, #8]

	/* advertise our receive window size in this TCP segment */
	seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
    84ac:	68ee      	ldr	r6, [r5, #12]
    84ae:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    84b0:	4b31      	ldr	r3, [pc, #196]	; (8578 <tcp_output_segment+0xe0>)
    84b2:	4798      	blx	r3
    84b4:	81f0      	strh	r0, [r6, #14]

	pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
    84b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    84b8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    84ba:	4413      	add	r3, r2
    84bc:	6323      	str	r3, [r4, #48]	; 0x30

	/* Add any requested options.  NB MSS option is only set on SYN
	   packets, so ignore it here */
	opts = (u32_t *)(void *)(seg->tcphdr + 1);
    84be:	68ee      	ldr	r6, [r5, #12]
	if (seg->flags & TF_SEG_OPTS_MSS) {
    84c0:	7aab      	ldrb	r3, [r5, #10]
    84c2:	f013 0f01 	tst.w	r3, #1
    84c6:	d13d      	bne.n	8544 <tcp_output_segment+0xac>
	}
#endif

	/* Set retransmission timer running if it is not currently enabled
	   This must be set before checking the route. */
	if (pcb->rtime == -1) {
    84c8:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    84cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    84d0:	d043      	beq.n	855a <tcp_output_segment+0xc2>
		pcb->rtime = 0;
	}

	/* If we don't have a local IP address, we get one by
	   calling ip_route(). */
	if (ip_addr_isany(&(pcb->local_ip))) {
    84d2:	b10c      	cbz	r4, 84d8 <tcp_output_segment+0x40>
    84d4:	6823      	ldr	r3, [r4, #0]
    84d6:	b933      	cbnz	r3, 84e6 <tcp_output_segment+0x4e>
		netif = ip_route(&(pcb->remote_ip));
    84d8:	1d20      	adds	r0, r4, #4
    84da:	4b28      	ldr	r3, [pc, #160]	; (857c <tcp_output_segment+0xe4>)
    84dc:	4798      	blx	r3
		if (netif == NULL) {
    84de:	2800      	cmp	r0, #0
    84e0:	d02d      	beq.n	853e <tcp_output_segment+0xa6>
			return;
		}
		ip_addr_copy(pcb->local_ip, netif->ip_addr);
    84e2:	6843      	ldr	r3, [r0, #4]
    84e4:	6023      	str	r3, [r4, #0]
	}

	if (pcb->rttest == 0) {
    84e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    84e8:	2b00      	cmp	r3, #0
    84ea:	d039      	beq.n	8560 <tcp_output_segment+0xc8>
	LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
	            ("tcp_output_segment: %" U32_F ":%" U32_F "\n",
	             htonl(seg->tcphdr->seqno),
	             htonl(seg->tcphdr->seqno) + seg->len));

	len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
    84ec:	68eb      	ldr	r3, [r5, #12]
    84ee:	686a      	ldr	r2, [r5, #4]
    84f0:	6851      	ldr	r1, [r2, #4]
    84f2:	1a5b      	subs	r3, r3, r1
    84f4:	b29b      	uxth	r3, r3

	seg->p->len -= len;
    84f6:	8951      	ldrh	r1, [r2, #10]
    84f8:	1ac9      	subs	r1, r1, r3
    84fa:	8151      	strh	r1, [r2, #10]
	seg->p->tot_len -= len;
    84fc:	6869      	ldr	r1, [r5, #4]
    84fe:	890a      	ldrh	r2, [r1, #8]
    8500:	1ad3      	subs	r3, r2, r3
    8502:	810b      	strh	r3, [r1, #8]

	seg->p->payload = seg->tcphdr;
    8504:	686b      	ldr	r3, [r5, #4]
    8506:	68ea      	ldr	r2, [r5, #12]
    8508:	605a      	str	r2, [r3, #4]

	seg->tcphdr->chksum = 0;
    850a:	68eb      	ldr	r3, [r5, #12]
    850c:	2200      	movs	r2, #0
    850e:	741a      	strb	r2, [r3, #16]
    8510:	745a      	strb	r2, [r3, #17]
			seg->tcphdr->chksum = chksum_slow;
		}
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
	}
#else  /* TCP_CHECKSUM_ON_COPY */
	seg->tcphdr->chksum
    8512:	68ef      	ldr	r7, [r5, #12]
	    = inet_chksum_pseudo(seg->p, &(pcb->local_ip), &(pcb->remote_ip), IP_PROTO_TCP, seg->p->tot_len);
    8514:	6868      	ldr	r0, [r5, #4]
    8516:	1d26      	adds	r6, r4, #4
    8518:	8903      	ldrh	r3, [r0, #8]
    851a:	9300      	str	r3, [sp, #0]
    851c:	2306      	movs	r3, #6
    851e:	4632      	mov	r2, r6
    8520:	4621      	mov	r1, r4
    8522:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8590 <tcp_output_segment+0xf8>
    8526:	47c0      	blx	r8
    8528:	8238      	strh	r0, [r7, #16]
	TCP_STATS_INC(tcp.xmit);

#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP);
    852a:	7aa3      	ldrb	r3, [r4, #10]
    852c:	6868      	ldr	r0, [r5, #4]
    852e:	2206      	movs	r2, #6
    8530:	9201      	str	r2, [sp, #4]
    8532:	7a62      	ldrb	r2, [r4, #9]
    8534:	9200      	str	r2, [sp, #0]
    8536:	4632      	mov	r2, r6
    8538:	4621      	mov	r1, r4
    853a:	4c11      	ldr	r4, [pc, #68]	; (8580 <tcp_output_segment+0xe8>)
    853c:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/
}
    853e:	b002      	add	sp, #8
    8540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
    8544:	1d21      	adds	r1, r4, #4
    8546:	f240 50b4 	movw	r0, #1460	; 0x5b4
    854a:	4b0e      	ldr	r3, [pc, #56]	; (8584 <tcp_output_segment+0xec>)
    854c:	4798      	blx	r3
		*opts = TCP_BUILD_MSS_OPTION(mss);
    854e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
    8552:	4b08      	ldr	r3, [pc, #32]	; (8574 <tcp_output_segment+0xdc>)
    8554:	4798      	blx	r3
    8556:	6170      	str	r0, [r6, #20]
    8558:	e7b6      	b.n	84c8 <tcp_output_segment+0x30>
		pcb->rtime = 0;
    855a:	2300      	movs	r3, #0
    855c:	86a3      	strh	r3, [r4, #52]	; 0x34
    855e:	e7b8      	b.n	84d2 <tcp_output_segment+0x3a>
		pcb->rttest = tcp_ticks;
    8560:	4b09      	ldr	r3, [pc, #36]	; (8588 <tcp_output_segment+0xf0>)
    8562:	681b      	ldr	r3, [r3, #0]
    8564:	63a3      	str	r3, [r4, #56]	; 0x38
		pcb->rtseq  = ntohl(seg->tcphdr->seqno);
    8566:	68eb      	ldr	r3, [r5, #12]
    8568:	6858      	ldr	r0, [r3, #4]
    856a:	4b08      	ldr	r3, [pc, #32]	; (858c <tcp_output_segment+0xf4>)
    856c:	4798      	blx	r3
    856e:	63e0      	str	r0, [r4, #60]	; 0x3c
    8570:	e7bc      	b.n	84ec <tcp_output_segment+0x54>
    8572:	bf00      	nop
    8574:	00003ed9 	.word	0x00003ed9
    8578:	00003ec1 	.word	0x00003ec1
    857c:	00004d95 	.word	0x00004d95
    8580:	000050e1 	.word	0x000050e1
    8584:	00006ead 	.word	0x00006ead
    8588:	200161f4 	.word	0x200161f4
    858c:	00003ef1 	.word	0x00003ef1
    8590:	00004ca5 	.word	0x00004ca5

00008594 <tcp_write>:
{
    8594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8598:	b08f      	sub	sp, #60	; 0x3c
	u16_t oversize      = 0;
    859a:	2400      	movs	r4, #0
    859c:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
	u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max / 2);
    85a0:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
    85a4:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
    85a6:	0864      	lsrs	r4, r4, #1
    85a8:	42ac      	cmp	r4, r5
    85aa:	bf28      	it	cs
    85ac:	462c      	movcs	r4, r5
    85ae:	9409      	str	r4, [sp, #36]	; 0x24
	LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", arg != NULL, return ERR_ARG;);
    85b0:	b1b9      	cbz	r1, 85e2 <tcp_write+0x4e>
    85b2:	9106      	str	r1, [sp, #24]
    85b4:	9307      	str	r3, [sp, #28]
    85b6:	4692      	mov	sl, r2
    85b8:	4607      	mov	r7, r0
	err = tcp_write_checks(pcb, len);
    85ba:	4611      	mov	r1, r2
    85bc:	4ba8      	ldr	r3, [pc, #672]	; (8860 <tcp_write+0x2cc>)
    85be:	4798      	blx	r3
	if (err != ERR_OK) {
    85c0:	900b      	str	r0, [sp, #44]	; 0x2c
    85c2:	2800      	cmp	r0, #0
    85c4:	f040 80f8 	bne.w	87b8 <tcp_write+0x224>
	queuelen = pcb->snd_queuelen;
    85c8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    85cc:	9305      	str	r3, [sp, #20]
	if (pcb->unsent != NULL) {
    85ce:	f8d7 806c 	ldr.w	r8, [r7, #108]	; 0x6c
    85d2:	f1b8 0f00 	cmp.w	r8, #0
    85d6:	d106      	bne.n	85e6 <tcp_write+0x52>
	struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    85d8:	46c3      	mov	fp, r8
	u16_t oversize_used = 0;
    85da:	2400      	movs	r4, #0
	u16_t           pos = 0; /* position in 'arg' data */
    85dc:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    85de:	46a1      	mov	r9, r4
    85e0:	e070      	b.n	86c4 <tcp_write+0x130>
    85e2:	e7fe      	b.n	85e2 <tcp_write+0x4e>
		for (last_unsent = pcb->unsent; last_unsent->next != NULL; last_unsent = last_unsent->next)
    85e4:	4698      	mov	r8, r3
    85e6:	f8d8 3000 	ldr.w	r3, [r8]
    85ea:	2b00      	cmp	r3, #0
    85ec:	d1fa      	bne.n	85e4 <tcp_write+0x50>
    85ee:	9304      	str	r3, [sp, #16]
		unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    85f0:	f898 200a 	ldrb.w	r2, [r8, #10]
    85f4:	f012 0f01 	tst.w	r2, #1
    85f8:	d04e      	beq.n	8698 <tcp_write+0x104>
    85fa:	2304      	movs	r3, #4
    85fc:	f012 0f02 	tst.w	r2, #2
    8600:	d04c      	beq.n	869c <tcp_write+0x108>
    8602:	220c      	movs	r2, #12
    8604:	441a      	add	r2, r3
		space         = mss_local - (last_unsent->len + unsent_optlen);
    8606:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    860a:	441a      	add	r2, r3
    860c:	b292      	uxth	r2, r2
    860e:	9909      	ldr	r1, [sp, #36]	; 0x24
    8610:	1a8a      	subs	r2, r1, r2
    8612:	b292      	uxth	r2, r2
		oversize = pcb->unsent_oversize;
    8614:	f8b7 406a 	ldrh.w	r4, [r7, #106]	; 0x6a
    8618:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
		if (oversize > 0) {
    861c:	2c00      	cmp	r4, #0
    861e:	d03f      	beq.n	86a0 <tcp_write+0x10c>
			oversize_used = oversize < len ? oversize : len;
    8620:	4651      	mov	r1, sl
    8622:	45a2      	cmp	sl, r4
    8624:	bf28      	it	cs
    8626:	4621      	movcs	r1, r4
			oversize -= oversize_used;
    8628:	1a64      	subs	r4, r4, r1
    862a:	f8ad 4036 	strh.w	r4, [sp, #54]	; 0x36
			space -= oversize_used;
    862e:	1a52      	subs	r2, r2, r1
    8630:	b292      	uxth	r2, r2
			pos += oversize_used;
    8632:	460c      	mov	r4, r1
			seg           = last_unsent;
    8634:	46c3      	mov	fp, r8
		if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
    8636:	4554      	cmp	r4, sl
    8638:	d241      	bcs.n	86be <tcp_write+0x12a>
    863a:	2a00      	cmp	r2, #0
    863c:	d047      	beq.n	86ce <tcp_write+0x13a>
    863e:	2b00      	cmp	r3, #0
    8640:	d049      	beq.n	86d6 <tcp_write+0x142>
			u16_t seglen = space < len - pos ? space : len - pos;
    8642:	ebaa 0604 	sub.w	r6, sl, r4
    8646:	4296      	cmp	r6, r2
    8648:	bfa8      	it	ge
    864a:	4616      	movge	r6, r2
    864c:	b2b5      	uxth	r5, r6
			if (apiflags & TCP_WRITE_FLAG_COPY) {
    864e:	9907      	ldr	r1, [sp, #28]
    8650:	f011 0f01 	tst.w	r1, #1
    8654:	d027      	beq.n	86a6 <tcp_write+0x112>
				if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
    8656:	2301      	movs	r3, #1
    8658:	9302      	str	r3, [sp, #8]
    865a:	9101      	str	r1, [sp, #4]
    865c:	9700      	str	r7, [sp, #0]
    865e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8662:	4629      	mov	r1, r5
    8664:	2003      	movs	r0, #3
    8666:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8880 <tcp_write+0x2ec>
    866a:	47c8      	blx	r9
    866c:	4681      	mov	r9, r0
    866e:	2800      	cmp	r0, #0
    8670:	f000 8090 	beq.w	8794 <tcp_write+0x200>
				TCP_DATA_COPY2(concat_p->payload, (u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
    8674:	462a      	mov	r2, r5
    8676:	9b06      	ldr	r3, [sp, #24]
    8678:	1919      	adds	r1, r3, r4
    867a:	6840      	ldr	r0, [r0, #4]
    867c:	4b79      	ldr	r3, [pc, #484]	; (8864 <tcp_write+0x2d0>)
    867e:	4798      	blx	r3
			pos += seglen;
    8680:	4425      	add	r5, r4
    8682:	b2ad      	uxth	r5, r5
			queuelen += pbuf_clen(concat_p);
    8684:	4648      	mov	r0, r9
    8686:	4b78      	ldr	r3, [pc, #480]	; (8868 <tcp_write+0x2d4>)
    8688:	4798      	blx	r3
    868a:	9b05      	ldr	r3, [sp, #20]
    868c:	fa13 f080 	uxtah	r0, r3, r0
    8690:	b283      	uxth	r3, r0
    8692:	9305      	str	r3, [sp, #20]
			seg          = last_unsent;
    8694:	46c3      	mov	fp, r8
    8696:	e015      	b.n	86c4 <tcp_write+0x130>
		unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    8698:	2300      	movs	r3, #0
    869a:	e7af      	b.n	85fc <tcp_write+0x68>
    869c:	2200      	movs	r2, #0
    869e:	e7b1      	b.n	8604 <tcp_write+0x70>
	struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
    86a0:	f8dd b010 	ldr.w	fp, [sp, #16]
    86a4:	e7c7      	b.n	8636 <tcp_write+0xa2>
				if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
    86a6:	2201      	movs	r2, #1
    86a8:	4629      	mov	r1, r5
    86aa:	2003      	movs	r0, #3
    86ac:	4b6f      	ldr	r3, [pc, #444]	; (886c <tcp_write+0x2d8>)
    86ae:	4798      	blx	r3
    86b0:	4681      	mov	r9, r0
    86b2:	2800      	cmp	r0, #0
    86b4:	d06e      	beq.n	8794 <tcp_write+0x200>
				concat_p->payload = (u8_t *)arg + pos;
    86b6:	9b06      	ldr	r3, [sp, #24]
    86b8:	4423      	add	r3, r4
    86ba:	6043      	str	r3, [r0, #4]
    86bc:	e7e0      	b.n	8680 <tcp_write+0xec>
    86be:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    86c0:	f04f 0900 	mov.w	r9, #0
			queue = seg;
    86c4:	2300      	movs	r3, #0
    86c6:	9304      	str	r3, [sp, #16]
    86c8:	9308      	str	r3, [sp, #32]
    86ca:	465b      	mov	r3, fp
    86cc:	e03b      	b.n	8746 <tcp_write+0x1b2>
    86ce:	4625      	mov	r5, r4
	struct pbuf *   concat_p    = NULL;
    86d0:	f04f 0900 	mov.w	r9, #0
    86d4:	e7f6      	b.n	86c4 <tcp_write+0x130>
    86d6:	4625      	mov	r5, r4
    86d8:	f04f 0900 	mov.w	r9, #0
    86dc:	e7f2      	b.n	86c4 <tcp_write+0x130>
			if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
    86de:	2201      	movs	r2, #1
    86e0:	4631      	mov	r1, r6
    86e2:	2000      	movs	r0, #0
    86e4:	4b61      	ldr	r3, [pc, #388]	; (886c <tcp_write+0x2d8>)
    86e6:	4798      	blx	r3
    86e8:	900a      	str	r0, [sp, #40]	; 0x28
    86ea:	2800      	cmp	r0, #0
    86ec:	d052      	beq.n	8794 <tcp_write+0x200>
			p2->payload = (u8_t *)arg + pos;
    86ee:	9b06      	ldr	r3, [sp, #24]
    86f0:	442b      	add	r3, r5
    86f2:	6043      	str	r3, [r0, #4]
			if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    86f4:	2200      	movs	r2, #0
    86f6:	4611      	mov	r1, r2
    86f8:	4610      	mov	r0, r2
    86fa:	4b5c      	ldr	r3, [pc, #368]	; (886c <tcp_write+0x2d8>)
    86fc:	4798      	blx	r3
    86fe:	4683      	mov	fp, r0
    8700:	2800      	cmp	r0, #0
    8702:	d044      	beq.n	878e <tcp_write+0x1fa>
			pbuf_cat(p /*header*/, p2 /*data*/);
    8704:	990a      	ldr	r1, [sp, #40]	; 0x28
    8706:	4b5a      	ldr	r3, [pc, #360]	; (8870 <tcp_write+0x2dc>)
    8708:	4798      	blx	r3
		queuelen += pbuf_clen(p);
    870a:	4658      	mov	r0, fp
    870c:	4b56      	ldr	r3, [pc, #344]	; (8868 <tcp_write+0x2d4>)
    870e:	4798      	blx	r3
    8710:	9b05      	ldr	r3, [sp, #20]
    8712:	fa13 f080 	uxtah	r0, r3, r0
    8716:	b283      	uxth	r3, r0
    8718:	9305      	str	r3, [sp, #20]
		if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    871a:	2b08      	cmp	r3, #8
    871c:	d850      	bhi.n	87c0 <tcp_write+0x22c>
		if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
    871e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8720:	2200      	movs	r2, #0
    8722:	9200      	str	r2, [sp, #0]
    8724:	442b      	add	r3, r5
    8726:	4659      	mov	r1, fp
    8728:	4638      	mov	r0, r7
    872a:	f8df b158 	ldr.w	fp, [pc, #344]	; 8884 <tcp_write+0x2f0>
    872e:	47d8      	blx	fp
    8730:	4603      	mov	r3, r0
    8732:	2800      	cmp	r0, #0
    8734:	d02e      	beq.n	8794 <tcp_write+0x200>
		if (queue == NULL) {
    8736:	9a04      	ldr	r2, [sp, #16]
    8738:	2a00      	cmp	r2, #0
    873a:	d045      	beq.n	87c8 <tcp_write+0x234>
			prev_seg->next = seg;
    873c:	9a08      	ldr	r2, [sp, #32]
    873e:	6010      	str	r0, [r2, #0]
		pos += seglen;
    8740:	4435      	add	r5, r6
    8742:	b2ad      	uxth	r5, r5
		prev_seg = seg;
    8744:	9308      	str	r3, [sp, #32]
	while (pos < len) {
    8746:	4555      	cmp	r5, sl
    8748:	d240      	bcs.n	87cc <tcp_write+0x238>
		u16_t        left    = len - pos;
    874a:	ebaa 0605 	sub.w	r6, sl, r5
    874e:	b2b6      	uxth	r6, r6
		u16_t        seglen  = left > max_len ? max_len : left;
    8750:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8752:	4296      	cmp	r6, r2
    8754:	bf28      	it	cs
    8756:	4616      	movcs	r6, r2
		if (apiflags & TCP_WRITE_FLAG_COPY) {
    8758:	9907      	ldr	r1, [sp, #28]
    875a:	f011 0f01 	tst.w	r1, #1
    875e:	d0be      	beq.n	86de <tcp_write+0x14a>
			if ((p = tcp_pbuf_prealloc(
    8760:	9b04      	ldr	r3, [sp, #16]
    8762:	fab3 f383 	clz	r3, r3
    8766:	095b      	lsrs	r3, r3, #5
    8768:	9302      	str	r3, [sp, #8]
    876a:	9101      	str	r1, [sp, #4]
    876c:	9700      	str	r7, [sp, #0]
    876e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    8772:	4631      	mov	r1, r6
    8774:	2000      	movs	r0, #0
    8776:	f8df b108 	ldr.w	fp, [pc, #264]	; 8880 <tcp_write+0x2ec>
    877a:	47d8      	blx	fp
    877c:	4683      	mov	fp, r0
    877e:	b148      	cbz	r0, 8794 <tcp_write+0x200>
			TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
    8780:	4632      	mov	r2, r6
    8782:	9b06      	ldr	r3, [sp, #24]
    8784:	1959      	adds	r1, r3, r5
    8786:	6840      	ldr	r0, [r0, #4]
    8788:	4b36      	ldr	r3, [pc, #216]	; (8864 <tcp_write+0x2d0>)
    878a:	4798      	blx	r3
    878c:	e7bd      	b.n	870a <tcp_write+0x176>
				pbuf_free(p2);
    878e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8790:	4b38      	ldr	r3, [pc, #224]	; (8874 <tcp_write+0x2e0>)
    8792:	4798      	blx	r3
	pcb->flags |= TF_NAGLEMEMERR;
    8794:	7fbb      	ldrb	r3, [r7, #30]
    8796:	f063 037f 	orn	r3, r3, #127	; 0x7f
    879a:	77bb      	strb	r3, [r7, #30]
	if (concat_p != NULL) {
    879c:	f1b9 0f00 	cmp.w	r9, #0
    87a0:	d002      	beq.n	87a8 <tcp_write+0x214>
		pbuf_free(concat_p);
    87a2:	4648      	mov	r0, r9
    87a4:	4b33      	ldr	r3, [pc, #204]	; (8874 <tcp_write+0x2e0>)
    87a6:	4798      	blx	r3
	if (queue != NULL) {
    87a8:	9b04      	ldr	r3, [sp, #16]
    87aa:	b113      	cbz	r3, 87b2 <tcp_write+0x21e>
		tcp_segs_free(queue);
    87ac:	4618      	mov	r0, r3
    87ae:	4b32      	ldr	r3, [pc, #200]	; (8878 <tcp_write+0x2e4>)
    87b0:	4798      	blx	r3
	return ERR_MEM;
    87b2:	f04f 33ff 	mov.w	r3, #4294967295
    87b6:	930b      	str	r3, [sp, #44]	; 0x2c
}
    87b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    87ba:	b00f      	add	sp, #60	; 0x3c
    87bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pbuf_free(p);
    87c0:	4658      	mov	r0, fp
    87c2:	4b2c      	ldr	r3, [pc, #176]	; (8874 <tcp_write+0x2e0>)
    87c4:	4798      	blx	r3
			goto memerr;
    87c6:	e7e5      	b.n	8794 <tcp_write+0x200>
			queue = seg;
    87c8:	9004      	str	r0, [sp, #16]
    87ca:	e7b9      	b.n	8740 <tcp_write+0x1ac>
    87cc:	469b      	mov	fp, r3
	if (oversize_used > 0) {
    87ce:	b184      	cbz	r4, 87f2 <tcp_write+0x25e>
		for (p = last_unsent->p; p; p = p->next) {
    87d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
    87d4:	e006      	b.n	87e4 <tcp_write+0x250>
			p->tot_len += oversize_used;
    87d6:	892b      	ldrh	r3, [r5, #8]
    87d8:	4423      	add	r3, r4
    87da:	812b      	strh	r3, [r5, #8]
			if (p->next == NULL) {
    87dc:	682b      	ldr	r3, [r5, #0]
    87de:	2b00      	cmp	r3, #0
    87e0:	d052      	beq.n	8888 <tcp_write+0x2f4>
		for (p = last_unsent->p; p; p = p->next) {
    87e2:	682d      	ldr	r5, [r5, #0]
    87e4:	2d00      	cmp	r5, #0
    87e6:	d1f6      	bne.n	87d6 <tcp_write+0x242>
		last_unsent->len += oversize_used;
    87e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    87ec:	441c      	add	r4, r3
    87ee:	f8a8 4008 	strh.w	r4, [r8, #8]
	pcb->unsent_oversize = oversize;
    87f2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    87f6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	if (concat_p != NULL) {
    87fa:	f1b9 0f00 	cmp.w	r9, #0
    87fe:	d00b      	beq.n	8818 <tcp_write+0x284>
		pbuf_cat(last_unsent->p, concat_p);
    8800:	4649      	mov	r1, r9
    8802:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8806:	4b1a      	ldr	r3, [pc, #104]	; (8870 <tcp_write+0x2dc>)
    8808:	4798      	blx	r3
		last_unsent->len += concat_p->tot_len;
    880a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    880e:	f8b8 2008 	ldrh.w	r2, [r8, #8]
    8812:	4413      	add	r3, r2
    8814:	f8a8 3008 	strh.w	r3, [r8, #8]
	if (last_unsent == NULL) {
    8818:	f1b8 0f00 	cmp.w	r8, #0
    881c:	d13f      	bne.n	889e <tcp_write+0x30a>
		pcb->unsent = queue;
    881e:	9b04      	ldr	r3, [sp, #16]
    8820:	66fb      	str	r3, [r7, #108]	; 0x6c
	pcb->snd_lbb += len;
    8822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8824:	4453      	add	r3, sl
    8826:	65fb      	str	r3, [r7, #92]	; 0x5c
	pcb->snd_buf -= len;
    8828:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    882c:	eba3 030a 	sub.w	r3, r3, sl
    8830:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	pcb->snd_queuelen = queuelen;
    8834:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8838:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
    883c:	f1bb 0f00 	cmp.w	fp, #0
    8840:	d0ba      	beq.n	87b8 <tcp_write+0x224>
    8842:	f8db 400c 	ldr.w	r4, [fp, #12]
    8846:	2c00      	cmp	r4, #0
    8848:	d0b6      	beq.n	87b8 <tcp_write+0x224>
    884a:	9b07      	ldr	r3, [sp, #28]
    884c:	f013 0f02 	tst.w	r3, #2
    8850:	d1b2      	bne.n	87b8 <tcp_write+0x224>
		TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
    8852:	89a5      	ldrh	r5, [r4, #12]
    8854:	2008      	movs	r0, #8
    8856:	4b09      	ldr	r3, [pc, #36]	; (887c <tcp_write+0x2e8>)
    8858:	4798      	blx	r3
    885a:	4328      	orrs	r0, r5
    885c:	81a0      	strh	r0, [r4, #12]
    885e:	e7ab      	b.n	87b8 <tcp_write+0x224>
    8860:	000082ad 	.word	0x000082ad
    8864:	0000cd53 	.word	0x0000cd53
    8868:	000061ed 	.word	0x000061ed
    886c:	0000606d 	.word	0x0000606d
    8870:	00006209 	.word	0x00006209
    8874:	00006009 	.word	0x00006009
    8878:	000064e9 	.word	0x000064e9
    887c:	00003ec1 	.word	0x00003ec1
    8880:	000082fd 	.word	0x000082fd
    8884:	00008365 	.word	0x00008365
				TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
    8888:	6868      	ldr	r0, [r5, #4]
    888a:	896b      	ldrh	r3, [r5, #10]
    888c:	4622      	mov	r2, r4
    888e:	9906      	ldr	r1, [sp, #24]
    8890:	4418      	add	r0, r3
    8892:	4b05      	ldr	r3, [pc, #20]	; (88a8 <tcp_write+0x314>)
    8894:	4798      	blx	r3
				p->len += oversize_used;
    8896:	896b      	ldrh	r3, [r5, #10]
    8898:	4423      	add	r3, r4
    889a:	816b      	strh	r3, [r5, #10]
    889c:	e7a1      	b.n	87e2 <tcp_write+0x24e>
		last_unsent->next = queue;
    889e:	9b04      	ldr	r3, [sp, #16]
    88a0:	f8c8 3000 	str.w	r3, [r8]
    88a4:	e7bd      	b.n	8822 <tcp_write+0x28e>
    88a6:	bf00      	nop
    88a8:	0000cd53 	.word	0x0000cd53

000088ac <tcp_enqueue_flags>:
	if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
    88ac:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    88b0:	2b07      	cmp	r3, #7
    88b2:	d820      	bhi.n	88f6 <tcp_enqueue_flags+0x4a>
{
    88b4:	b570      	push	{r4, r5, r6, lr}
    88b6:	b082      	sub	sp, #8
	if (flags & TCP_SYN) {
    88b8:	f011 0f02 	tst.w	r1, #2
    88bc:	d122      	bne.n	8904 <tcp_enqueue_flags+0x58>
	u8_t            optflags = 0;
    88be:	2600      	movs	r6, #0
	optlen = LWIP_TCP_OPT_LENGTH(optflags);
    88c0:	b316      	cbz	r6, 8908 <tcp_enqueue_flags+0x5c>
    88c2:	2304      	movs	r3, #4
	if (pcb->snd_buf == 0) {
    88c4:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    88c8:	2a00      	cmp	r2, #0
    88ca:	d053      	beq.n	8974 <tcp_enqueue_flags+0xc8>
    88cc:	460d      	mov	r5, r1
    88ce:	4604      	mov	r4, r0
	if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
    88d0:	b299      	uxth	r1, r3
    88d2:	2200      	movs	r2, #0
    88d4:	4610      	mov	r0, r2
    88d6:	4b29      	ldr	r3, [pc, #164]	; (897c <tcp_enqueue_flags+0xd0>)
    88d8:	4798      	blx	r3
    88da:	4601      	mov	r1, r0
    88dc:	b1b0      	cbz	r0, 890c <tcp_enqueue_flags+0x60>
	if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    88de:	9600      	str	r6, [sp, #0]
    88e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    88e2:	462a      	mov	r2, r5
    88e4:	4620      	mov	r0, r4
    88e6:	4e26      	ldr	r6, [pc, #152]	; (8980 <tcp_enqueue_flags+0xd4>)
    88e8:	47b0      	blx	r6
    88ea:	4601      	mov	r1, r0
    88ec:	b1a8      	cbz	r0, 891a <tcp_enqueue_flags+0x6e>
	if (pcb->unsent == NULL) {
    88ee:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    88f0:	b9da      	cbnz	r2, 892a <tcp_enqueue_flags+0x7e>
		pcb->unsent = seg;
    88f2:	66e0      	str	r0, [r4, #108]	; 0x6c
    88f4:	e01d      	b.n	8932 <tcp_enqueue_flags+0x86>
		pcb->flags |= TF_NAGLEMEMERR;
    88f6:	7f83      	ldrb	r3, [r0, #30]
    88f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88fc:	7783      	strb	r3, [r0, #30]
		return ERR_MEM;
    88fe:	f04f 30ff 	mov.w	r0, #4294967295
    8902:	4770      	bx	lr
		optflags = TF_SEG_OPTS_MSS;
    8904:	2601      	movs	r6, #1
    8906:	e7db      	b.n	88c0 <tcp_enqueue_flags+0x14>
	optlen = LWIP_TCP_OPT_LENGTH(optflags);
    8908:	2300      	movs	r3, #0
    890a:	e7db      	b.n	88c4 <tcp_enqueue_flags+0x18>
		pcb->flags |= TF_NAGLEMEMERR;
    890c:	7fa3      	ldrb	r3, [r4, #30]
    890e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8912:	77a3      	strb	r3, [r4, #30]
		return ERR_MEM;
    8914:	f04f 30ff 	mov.w	r0, #4294967295
    8918:	e02a      	b.n	8970 <tcp_enqueue_flags+0xc4>
		pcb->flags |= TF_NAGLEMEMERR;
    891a:	7fa3      	ldrb	r3, [r4, #30]
    891c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8920:	77a3      	strb	r3, [r4, #30]
		return ERR_MEM;
    8922:	f04f 30ff 	mov.w	r0, #4294967295
    8926:	e023      	b.n	8970 <tcp_enqueue_flags+0xc4>
		for (useg = pcb->unsent; useg->next != NULL; useg = useg->next)
    8928:	461a      	mov	r2, r3
    892a:	6813      	ldr	r3, [r2, #0]
    892c:	2b00      	cmp	r3, #0
    892e:	d1fb      	bne.n	8928 <tcp_enqueue_flags+0x7c>
		useg->next = seg;
    8930:	6011      	str	r1, [r2, #0]
	pcb->unsent_oversize = 0;
    8932:	2300      	movs	r3, #0
    8934:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
    8938:	f015 0f03 	tst.w	r5, #3
    893c:	d007      	beq.n	894e <tcp_enqueue_flags+0xa2>
		pcb->snd_lbb++;
    893e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    8940:	3301      	adds	r3, #1
    8942:	65e3      	str	r3, [r4, #92]	; 0x5c
		pcb->snd_buf--;
    8944:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    8948:	3b01      	subs	r3, #1
    894a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	if (flags & TCP_FIN) {
    894e:	f015 0f01 	tst.w	r5, #1
    8952:	d003      	beq.n	895c <tcp_enqueue_flags+0xb0>
		pcb->flags |= TF_FIN;
    8954:	7fa3      	ldrb	r3, [r4, #30]
    8956:	f043 0320 	orr.w	r3, r3, #32
    895a:	77a3      	strb	r3, [r4, #30]
	pcb->snd_queuelen += pbuf_clen(seg->p);
    895c:	6848      	ldr	r0, [r1, #4]
    895e:	4b09      	ldr	r3, [pc, #36]	; (8984 <tcp_enqueue_flags+0xd8>)
    8960:	4798      	blx	r3
    8962:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    8966:	fa13 f080 	uxtah	r0, r3, r0
    896a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
	return ERR_OK;
    896e:	2000      	movs	r0, #0
}
    8970:	b002      	add	sp, #8
    8972:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
    8974:	f04f 30ff 	mov.w	r0, #4294967295
    8978:	e7fa      	b.n	8970 <tcp_enqueue_flags+0xc4>
    897a:	bf00      	nop
    897c:	0000606d 	.word	0x0000606d
    8980:	00008365 	.word	0x00008365
    8984:	000061ed 	.word	0x000061ed

00008988 <tcp_send_fin>:
{
    8988:	b570      	push	{r4, r5, r6, lr}
    898a:	4605      	mov	r5, r0
	if (pcb->unsent != NULL) {
    898c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    898e:	b90c      	cbnz	r4, 8994 <tcp_send_fin+0xc>
    8990:	e00a      	b.n	89a8 <tcp_send_fin+0x20>
		for (last_unsent = pcb->unsent; last_unsent->next != NULL; last_unsent = last_unsent->next)
    8992:	461c      	mov	r4, r3
    8994:	6823      	ldr	r3, [r4, #0]
    8996:	2b00      	cmp	r3, #0
    8998:	d1fb      	bne.n	8992 <tcp_send_fin+0xa>
		if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
    899a:	68e3      	ldr	r3, [r4, #12]
    899c:	8998      	ldrh	r0, [r3, #12]
    899e:	4b0b      	ldr	r3, [pc, #44]	; (89cc <tcp_send_fin+0x44>)
    89a0:	4798      	blx	r3
    89a2:	f010 0f07 	tst.w	r0, #7
    89a6:	d004      	beq.n	89b2 <tcp_send_fin+0x2a>
	return tcp_enqueue_flags(pcb, TCP_FIN);
    89a8:	2101      	movs	r1, #1
    89aa:	4628      	mov	r0, r5
    89ac:	4b08      	ldr	r3, [pc, #32]	; (89d0 <tcp_send_fin+0x48>)
    89ae:	4798      	blx	r3
}
    89b0:	bd70      	pop	{r4, r5, r6, pc}
			TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
    89b2:	68e6      	ldr	r6, [r4, #12]
    89b4:	89b4      	ldrh	r4, [r6, #12]
    89b6:	2001      	movs	r0, #1
    89b8:	4b06      	ldr	r3, [pc, #24]	; (89d4 <tcp_send_fin+0x4c>)
    89ba:	4798      	blx	r3
    89bc:	4320      	orrs	r0, r4
    89be:	81b0      	strh	r0, [r6, #12]
			pcb->flags |= TF_FIN;
    89c0:	7fab      	ldrb	r3, [r5, #30]
    89c2:	f043 0320 	orr.w	r3, r3, #32
    89c6:	77ab      	strb	r3, [r5, #30]
			return ERR_OK;
    89c8:	2000      	movs	r0, #0
    89ca:	bd70      	pop	{r4, r5, r6, pc}
    89cc:	00003ecd 	.word	0x00003ecd
    89d0:	000088ad 	.word	0x000088ad
    89d4:	00003ec1 	.word	0x00003ec1

000089d8 <tcp_send_empty_ack>:
{
    89d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89dc:	b082      	sub	sp, #8
    89de:	4604      	mov	r4, r0
	p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
    89e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
    89e2:	4b16      	ldr	r3, [pc, #88]	; (8a3c <tcp_send_empty_ack+0x64>)
    89e4:	4798      	blx	r3
    89e6:	4603      	mov	r3, r0
    89e8:	2200      	movs	r2, #0
    89ea:	4611      	mov	r1, r2
    89ec:	4620      	mov	r0, r4
    89ee:	4d14      	ldr	r5, [pc, #80]	; (8a40 <tcp_send_empty_ack+0x68>)
    89f0:	47a8      	blx	r5
	if (p == NULL) {
    89f2:	b300      	cbz	r0, 8a36 <tcp_send_empty_ack+0x5e>
    89f4:	4605      	mov	r5, r0
	tcphdr = (struct tcp_hdr *)p->payload;
    89f6:	6847      	ldr	r7, [r0, #4]
	pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    89f8:	7fa3      	ldrb	r3, [r4, #30]
    89fa:	f023 0303 	bic.w	r3, r3, #3
    89fe:	77a3      	strb	r3, [r4, #30]
	tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip), IP_PROTO_TCP, p->tot_len);
    8a00:	1d26      	adds	r6, r4, #4
    8a02:	8903      	ldrh	r3, [r0, #8]
    8a04:	9300      	str	r3, [sp, #0]
    8a06:	2306      	movs	r3, #6
    8a08:	4632      	mov	r2, r6
    8a0a:	4621      	mov	r1, r4
    8a0c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8a4c <tcp_send_empty_ack+0x74>
    8a10:	47c0      	blx	r8
    8a12:	8238      	strh	r0, [r7, #16]
	ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos, IP_PROTO_TCP);
    8a14:	7aa3      	ldrb	r3, [r4, #10]
    8a16:	2206      	movs	r2, #6
    8a18:	9201      	str	r2, [sp, #4]
    8a1a:	7a62      	ldrb	r2, [r4, #9]
    8a1c:	9200      	str	r2, [sp, #0]
    8a1e:	4632      	mov	r2, r6
    8a20:	4621      	mov	r1, r4
    8a22:	4628      	mov	r0, r5
    8a24:	4c07      	ldr	r4, [pc, #28]	; (8a44 <tcp_send_empty_ack+0x6c>)
    8a26:	47a0      	blx	r4
	pbuf_free(p);
    8a28:	4628      	mov	r0, r5
    8a2a:	4b07      	ldr	r3, [pc, #28]	; (8a48 <tcp_send_empty_ack+0x70>)
    8a2c:	4798      	blx	r3
	return ERR_OK;
    8a2e:	2000      	movs	r0, #0
}
    8a30:	b002      	add	sp, #8
    8a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUF;
    8a36:	f06f 0001 	mvn.w	r0, #1
    8a3a:	e7f9      	b.n	8a30 <tcp_send_empty_ack+0x58>
    8a3c:	00003ed9 	.word	0x00003ed9
    8a40:	00008425 	.word	0x00008425
    8a44:	000050e1 	.word	0x000050e1
    8a48:	00006009 	.word	0x00006009
    8a4c:	00004ca5 	.word	0x00004ca5

00008a50 <tcp_output>:
	if (tcp_input_pcb == pcb) {
    8a50:	4b6f      	ldr	r3, [pc, #444]	; (8c10 <tcp_output+0x1c0>)
    8a52:	681b      	ldr	r3, [r3, #0]
    8a54:	4283      	cmp	r3, r0
    8a56:	f000 80d9 	beq.w	8c0c <tcp_output+0x1bc>
{
    8a5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
    8a5e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    8a62:	f8b0 804c 	ldrh.w	r8, [r0, #76]	; 0x4c
    8a66:	4543      	cmp	r3, r8
    8a68:	d200      	bcs.n	8a6c <tcp_output+0x1c>
    8a6a:	4698      	mov	r8, r3
    8a6c:	4605      	mov	r5, r0
	seg = pcb->unsent;
    8a6e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	if (pcb->flags & TF_ACK_NOW && (seg == NULL || ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
    8a70:	7f83      	ldrb	r3, [r0, #30]
    8a72:	f013 0f02 	tst.w	r3, #2
    8a76:	d00a      	beq.n	8a8e <tcp_output+0x3e>
    8a78:	b164      	cbz	r4, 8a94 <tcp_output+0x44>
    8a7a:	68e3      	ldr	r3, [r4, #12]
    8a7c:	6858      	ldr	r0, [r3, #4]
    8a7e:	4b65      	ldr	r3, [pc, #404]	; (8c14 <tcp_output+0x1c4>)
    8a80:	4798      	blx	r3
    8a82:	6cab      	ldr	r3, [r5, #72]	; 0x48
    8a84:	1ac3      	subs	r3, r0, r3
    8a86:	8920      	ldrh	r0, [r4, #8]
    8a88:	4403      	add	r3, r0
    8a8a:	4598      	cmp	r8, r3
    8a8c:	d302      	bcc.n	8a94 <tcp_output+0x44>
	useg = pcb->unacked;
    8a8e:	6f2f      	ldr	r7, [r5, #112]	; 0x70
	if (useg != NULL) {
    8a90:	b937      	cbnz	r7, 8aa0 <tcp_output+0x50>
    8a92:	e06b      	b.n	8b6c <tcp_output+0x11c>
		return tcp_send_empty_ack(pcb);
    8a94:	4628      	mov	r0, r5
    8a96:	4b60      	ldr	r3, [pc, #384]	; (8c18 <tcp_output+0x1c8>)
    8a98:	4798      	blx	r3
    8a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (; useg->next != NULL; useg = useg->next)
    8a9e:	461f      	mov	r7, r3
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d1fb      	bne.n	8a9e <tcp_output+0x4e>
    8aa6:	e061      	b.n	8b6c <tcp_output+0x11c>
		if ((tcp_do_output_nagle(pcb) == 0) && ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
    8aa8:	891a      	ldrh	r2, [r3, #8]
    8aaa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    8aac:	429a      	cmp	r2, r3
    8aae:	d278      	bcs.n	8ba2 <tcp_output+0x152>
    8ab0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d076      	beq.n	8ba6 <tcp_output+0x156>
    8ab8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    8abc:	2b07      	cmp	r3, #7
    8abe:	d974      	bls.n	8baa <tcp_output+0x15a>
    8ac0:	2301      	movs	r3, #1
    8ac2:	e002      	b.n	8aca <tcp_output+0x7a>
    8ac4:	2301      	movs	r3, #1
    8ac6:	e000      	b.n	8aca <tcp_output+0x7a>
    8ac8:	2301      	movs	r3, #1
    8aca:	b923      	cbnz	r3, 8ad6 <tcp_output+0x86>
    8acc:	7fab      	ldrb	r3, [r5, #30]
    8ace:	f013 0fa0 	tst.w	r3, #160	; 0xa0
    8ad2:	f000 808f 	beq.w	8bf4 <tcp_output+0x1a4>
		pcb->unsent = seg->next;
    8ad6:	6823      	ldr	r3, [r4, #0]
    8ad8:	66eb      	str	r3, [r5, #108]	; 0x6c
		if (pcb->state != SYN_SENT) {
    8ada:	7e2b      	ldrb	r3, [r5, #24]
    8adc:	2b02      	cmp	r3, #2
    8ade:	d00d      	beq.n	8afc <tcp_output+0xac>
			TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    8ae0:	f8d4 900c 	ldr.w	r9, [r4, #12]
    8ae4:	f8b9 600c 	ldrh.w	r6, [r9, #12]
    8ae8:	2010      	movs	r0, #16
    8aea:	4b4c      	ldr	r3, [pc, #304]	; (8c1c <tcp_output+0x1cc>)
    8aec:	4798      	blx	r3
    8aee:	4330      	orrs	r0, r6
    8af0:	f8a9 000c 	strh.w	r0, [r9, #12]
			pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    8af4:	7fab      	ldrb	r3, [r5, #30]
    8af6:	f023 0303 	bic.w	r3, r3, #3
    8afa:	77ab      	strb	r3, [r5, #30]
		tcp_output_segment(seg, pcb);
    8afc:	4629      	mov	r1, r5
    8afe:	4620      	mov	r0, r4
    8b00:	4b47      	ldr	r3, [pc, #284]	; (8c20 <tcp_output+0x1d0>)
    8b02:	4798      	blx	r3
		snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    8b04:	68e3      	ldr	r3, [r4, #12]
    8b06:	6858      	ldr	r0, [r3, #4]
    8b08:	4b42      	ldr	r3, [pc, #264]	; (8c14 <tcp_output+0x1c4>)
    8b0a:	4798      	blx	r3
    8b0c:	4606      	mov	r6, r0
    8b0e:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    8b12:	68e3      	ldr	r3, [r4, #12]
    8b14:	8998      	ldrh	r0, [r3, #12]
    8b16:	4b43      	ldr	r3, [pc, #268]	; (8c24 <tcp_output+0x1d4>)
    8b18:	4798      	blx	r3
    8b1a:	f010 0003 	ands.w	r0, r0, #3
    8b1e:	bf18      	it	ne
    8b20:	2001      	movne	r0, #1
    8b22:	4448      	add	r0, r9
    8b24:	4430      	add	r0, r6
		if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    8b26:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    8b28:	1a1b      	subs	r3, r3, r0
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	db3f      	blt.n	8bae <tcp_output+0x15e>
		if (TCP_TCPLEN(seg) > 0) {
    8b2e:	8926      	ldrh	r6, [r4, #8]
    8b30:	68e3      	ldr	r3, [r4, #12]
    8b32:	8998      	ldrh	r0, [r3, #12]
    8b34:	4b3b      	ldr	r3, [pc, #236]	; (8c24 <tcp_output+0x1d4>)
    8b36:	4798      	blx	r3
    8b38:	f010 0003 	ands.w	r0, r0, #3
    8b3c:	bf18      	it	ne
    8b3e:	2001      	movne	r0, #1
    8b40:	42c6      	cmn	r6, r0
    8b42:	d053      	beq.n	8bec <tcp_output+0x19c>
			seg->next = NULL;
    8b44:	2300      	movs	r3, #0
    8b46:	6023      	str	r3, [r4, #0]
			if (pcb->unacked == NULL) {
    8b48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d031      	beq.n	8bb2 <tcp_output+0x162>
				if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
    8b4e:	68e3      	ldr	r3, [r4, #12]
    8b50:	6858      	ldr	r0, [r3, #4]
    8b52:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8c14 <tcp_output+0x1c4>
    8b56:	47c8      	blx	r9
    8b58:	4606      	mov	r6, r0
    8b5a:	68fb      	ldr	r3, [r7, #12]
    8b5c:	6858      	ldr	r0, [r3, #4]
    8b5e:	47c8      	blx	r9
    8b60:	1a30      	subs	r0, r6, r0
    8b62:	2800      	cmp	r0, #0
    8b64:	db28      	blt.n	8bb8 <tcp_output+0x168>
					useg->next = seg;
    8b66:	603c      	str	r4, [r7, #0]
					useg       = useg->next;
    8b68:	4627      	mov	r7, r4
		seg = pcb->unsent;
    8b6a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
	while (seg != NULL && ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    8b6c:	2c00      	cmp	r4, #0
    8b6e:	d041      	beq.n	8bf4 <tcp_output+0x1a4>
    8b70:	68e3      	ldr	r3, [r4, #12]
    8b72:	6858      	ldr	r0, [r3, #4]
    8b74:	4b27      	ldr	r3, [pc, #156]	; (8c14 <tcp_output+0x1c4>)
    8b76:	4798      	blx	r3
    8b78:	6cab      	ldr	r3, [r5, #72]	; 0x48
    8b7a:	1ac0      	subs	r0, r0, r3
    8b7c:	8923      	ldrh	r3, [r4, #8]
    8b7e:	4418      	add	r0, r3
    8b80:	4580      	cmp	r8, r0
    8b82:	d337      	bcc.n	8bf4 <tcp_output+0x1a4>
		if ((tcp_do_output_nagle(pcb) == 0) && ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
    8b84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    8b86:	2b00      	cmp	r3, #0
    8b88:	d09c      	beq.n	8ac4 <tcp_output+0x74>
    8b8a:	7fab      	ldrb	r3, [r5, #30]
    8b8c:	f013 0f44 	tst.w	r3, #68	; 0x44
    8b90:	d19a      	bne.n	8ac8 <tcp_output+0x78>
    8b92:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8b94:	2b00      	cmp	r3, #0
    8b96:	d08b      	beq.n	8ab0 <tcp_output+0x60>
    8b98:	681a      	ldr	r2, [r3, #0]
    8b9a:	2a00      	cmp	r2, #0
    8b9c:	d084      	beq.n	8aa8 <tcp_output+0x58>
    8b9e:	2301      	movs	r3, #1
    8ba0:	e793      	b.n	8aca <tcp_output+0x7a>
    8ba2:	2301      	movs	r3, #1
    8ba4:	e791      	b.n	8aca <tcp_output+0x7a>
    8ba6:	2301      	movs	r3, #1
    8ba8:	e78f      	b.n	8aca <tcp_output+0x7a>
    8baa:	2300      	movs	r3, #0
    8bac:	e78d      	b.n	8aca <tcp_output+0x7a>
			pcb->snd_nxt = snd_nxt;
    8bae:	6528      	str	r0, [r5, #80]	; 0x50
    8bb0:	e7bd      	b.n	8b2e <tcp_output+0xde>
				pcb->unacked = seg;
    8bb2:	672c      	str	r4, [r5, #112]	; 0x70
				useg         = seg;
    8bb4:	4627      	mov	r7, r4
    8bb6:	e7d8      	b.n	8b6a <tcp_output+0x11a>
					struct tcp_seg **cur_seg = &(pcb->unacked);
    8bb8:	f105 0970 	add.w	r9, r5, #112	; 0x70
					while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    8bbc:	e001      	b.n	8bc2 <tcp_output+0x172>
						cur_seg = &((*cur_seg)->next);
    8bbe:	f8d9 9000 	ldr.w	r9, [r9]
					while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    8bc2:	f8d9 3000 	ldr.w	r3, [r9]
    8bc6:	b15b      	cbz	r3, 8be0 <tcp_output+0x190>
    8bc8:	68db      	ldr	r3, [r3, #12]
    8bca:	6858      	ldr	r0, [r3, #4]
    8bcc:	f8df a044 	ldr.w	sl, [pc, #68]	; 8c14 <tcp_output+0x1c4>
    8bd0:	47d0      	blx	sl
    8bd2:	4606      	mov	r6, r0
    8bd4:	68e3      	ldr	r3, [r4, #12]
    8bd6:	6858      	ldr	r0, [r3, #4]
    8bd8:	47d0      	blx	sl
    8bda:	1a30      	subs	r0, r6, r0
    8bdc:	2800      	cmp	r0, #0
    8bde:	dbee      	blt.n	8bbe <tcp_output+0x16e>
					seg->next  = (*cur_seg);
    8be0:	f8d9 3000 	ldr.w	r3, [r9]
    8be4:	6023      	str	r3, [r4, #0]
					(*cur_seg) = seg;
    8be6:	f8c9 4000 	str.w	r4, [r9]
    8bea:	e7be      	b.n	8b6a <tcp_output+0x11a>
			tcp_seg_free(seg);
    8bec:	4620      	mov	r0, r4
    8bee:	4b0e      	ldr	r3, [pc, #56]	; (8c28 <tcp_output+0x1d8>)
    8bf0:	4798      	blx	r3
    8bf2:	e7ba      	b.n	8b6a <tcp_output+0x11a>
	if (pcb->unsent == NULL) {
    8bf4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8bf6:	b133      	cbz	r3, 8c06 <tcp_output+0x1b6>
	pcb->flags &= ~TF_NAGLEMEMERR;
    8bf8:	7fab      	ldrb	r3, [r5, #30]
    8bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8bfe:	77ab      	strb	r3, [r5, #30]
	return ERR_OK;
    8c00:	2000      	movs	r0, #0
    8c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pcb->unsent_oversize = 0;
    8c06:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    8c0a:	e7f5      	b.n	8bf8 <tcp_output+0x1a8>
		return ERR_OK;
    8c0c:	2000      	movs	r0, #0
    8c0e:	4770      	bx	lr
    8c10:	20016208 	.word	0x20016208
    8c14:	00003ef1 	.word	0x00003ef1
    8c18:	000089d9 	.word	0x000089d9
    8c1c:	00003ec1 	.word	0x00003ec1
    8c20:	00008499 	.word	0x00008499
    8c24:	00003ecd 	.word	0x00003ecd
    8c28:	000064c5 	.word	0x000064c5

00008c2c <tcp_rst>:
 * @param remote_ip the remote IP address to send the segment to
 * @param local_port the local TCP port to send the segment from
 * @param remote_port the remote TCP port to send the segment to
 */
void tcp_rst(u32_t seqno, u32_t ackno, ip_addr_t *local_ip, ip_addr_t *remote_ip, u16_t local_port, u16_t remote_port)
{
    8c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c30:	b083      	sub	sp, #12
    8c32:	4681      	mov	r9, r0
    8c34:	468a      	mov	sl, r1
    8c36:	4693      	mov	fp, r2
    8c38:	4698      	mov	r8, r3
	struct pbuf *   p;
	struct tcp_hdr *tcphdr;
	p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
    8c3a:	2200      	movs	r2, #0
    8c3c:	2114      	movs	r1, #20
    8c3e:	2001      	movs	r0, #1
    8c40:	4b1d      	ldr	r3, [pc, #116]	; (8cb8 <tcp_rst+0x8c>)
    8c42:	4798      	blx	r3
	if (p == NULL) {
    8c44:	2800      	cmp	r0, #0
    8c46:	d034      	beq.n	8cb2 <tcp_rst+0x86>
    8c48:	4605      	mov	r5, r0
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
		return;
	}
	LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr", (p->len >= sizeof(struct tcp_hdr)));

	tcphdr        = (struct tcp_hdr *)p->payload;
    8c4a:	6844      	ldr	r4, [r0, #4]
	tcphdr->src   = htons(local_port);
    8c4c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    8c50:	4e1a      	ldr	r6, [pc, #104]	; (8cbc <tcp_rst+0x90>)
    8c52:	47b0      	blx	r6
    8c54:	8020      	strh	r0, [r4, #0]
	tcphdr->dest  = htons(remote_port);
    8c56:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
    8c5a:	47b0      	blx	r6
    8c5c:	8060      	strh	r0, [r4, #2]
	tcphdr->seqno = htonl(seqno);
    8c5e:	4648      	mov	r0, r9
    8c60:	4f17      	ldr	r7, [pc, #92]	; (8cc0 <tcp_rst+0x94>)
    8c62:	47b8      	blx	r7
    8c64:	6060      	str	r0, [r4, #4]
	tcphdr->ackno = htonl(ackno);
    8c66:	4650      	mov	r0, sl
    8c68:	47b8      	blx	r7
    8c6a:	60a0      	str	r0, [r4, #8]
	TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN / 4, TCP_RST | TCP_ACK);
    8c6c:	f245 0014 	movw	r0, #20500	; 0x5014
    8c70:	47b0      	blx	r6
    8c72:	81a0      	strh	r0, [r4, #12]
	tcphdr->wnd    = PP_HTONS(TCP_WND);
    8c74:	2600      	movs	r6, #0
    8c76:	2316      	movs	r3, #22
    8c78:	73a3      	strb	r3, [r4, #14]
    8c7a:	f06f 032f 	mvn.w	r3, #47	; 0x2f
    8c7e:	73e3      	strb	r3, [r4, #15]
	tcphdr->chksum = 0;
    8c80:	7426      	strb	r6, [r4, #16]
    8c82:	7466      	strb	r6, [r4, #17]
	tcphdr->urgp   = 0;
    8c84:	74a6      	strb	r6, [r4, #18]
    8c86:	74e6      	strb	r6, [r4, #19]

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip, IP_PROTO_TCP, p->tot_len);
    8c88:	892b      	ldrh	r3, [r5, #8]
    8c8a:	9300      	str	r3, [sp, #0]
    8c8c:	2306      	movs	r3, #6
    8c8e:	4642      	mov	r2, r8
    8c90:	4659      	mov	r1, fp
    8c92:	4628      	mov	r0, r5
    8c94:	4f0b      	ldr	r7, [pc, #44]	; (8cc4 <tcp_rst+0x98>)
    8c96:	47b8      	blx	r7
    8c98:	8220      	strh	r0, [r4, #16]
#endif
	TCP_STATS_INC(tcp.xmit);
	snmp_inc_tcpoutrsts();
	/* Send output with hardcoded TTL since we have no access to the pcb */
	ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
    8c9a:	2306      	movs	r3, #6
    8c9c:	9301      	str	r3, [sp, #4]
    8c9e:	9600      	str	r6, [sp, #0]
    8ca0:	23ff      	movs	r3, #255	; 0xff
    8ca2:	4642      	mov	r2, r8
    8ca4:	4659      	mov	r1, fp
    8ca6:	4628      	mov	r0, r5
    8ca8:	4c07      	ldr	r4, [pc, #28]	; (8cc8 <tcp_rst+0x9c>)
    8caa:	47a0      	blx	r4
	pbuf_free(p);
    8cac:	4628      	mov	r0, r5
    8cae:	4b07      	ldr	r3, [pc, #28]	; (8ccc <tcp_rst+0xa0>)
    8cb0:	4798      	blx	r3
	LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %" U32_F " ackno %" U32_F ".\n", seqno, ackno));
}
    8cb2:	b003      	add	sp, #12
    8cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cb8:	0000606d 	.word	0x0000606d
    8cbc:	00003ec1 	.word	0x00003ec1
    8cc0:	00003ed9 	.word	0x00003ed9
    8cc4:	00004ca5 	.word	0x00004ca5
    8cc8:	000050e1 	.word	0x000050e1
    8ccc:	00006009 	.word	0x00006009

00008cd0 <tcp_rexmit_rto>:
 */
void tcp_rexmit_rto(struct tcp_pcb *pcb)
{
	struct tcp_seg *seg;

	if (pcb->unacked == NULL) {
    8cd0:	6f02      	ldr	r2, [r0, #112]	; 0x70
    8cd2:	b10a      	cbz	r2, 8cd8 <tcp_rexmit_rto+0x8>
{
    8cd4:	b508      	push	{r3, lr}
    8cd6:	e001      	b.n	8cdc <tcp_rexmit_rto+0xc>
    8cd8:	4770      	bx	lr
		return;
	}

	/* Move all unacked segments to the head of the unsent queue */
	for (seg = pcb->unacked; seg->next != NULL; seg = seg->next)
    8cda:	461a      	mov	r2, r3
    8cdc:	6813      	ldr	r3, [r2, #0]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d1fb      	bne.n	8cda <tcp_rexmit_rto+0xa>
		;
	/* concatenate unsent queue after unacked queue */
	seg->next = pcb->unsent;
    8ce2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    8ce4:	6013      	str	r3, [r2, #0]
	/* unsent queue is the concatenated queue (of unacked, unsent) */
	pcb->unsent = pcb->unacked;
    8ce6:	6f03      	ldr	r3, [r0, #112]	; 0x70
    8ce8:	66c3      	str	r3, [r0, #108]	; 0x6c
	/* unacked queue is now empty */
	pcb->unacked = NULL;
    8cea:	2200      	movs	r2, #0
    8cec:	6702      	str	r2, [r0, #112]	; 0x70
	/* last unsent hasn't changed, no need to reset unsent_oversize */

	/* increment number of retransmissions */
	++pcb->nrtx;
    8cee:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    8cf2:	3301      	adds	r3, #1
    8cf4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

	/* Don't take any RTT measurements after retransmitting. */
	pcb->rttest = 0;
    8cf8:	6382      	str	r2, [r0, #56]	; 0x38

	/* Do the actual retransmission */
	tcp_output(pcb);
    8cfa:	4b01      	ldr	r3, [pc, #4]	; (8d00 <tcp_rexmit_rto+0x30>)
    8cfc:	4798      	blx	r3
    8cfe:	bd08      	pop	{r3, pc}
    8d00:	00008a51 	.word	0x00008a51

00008d04 <tcp_rexmit>:
 * Called by tcp_receive() for fast retramsmit.
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void tcp_rexmit(struct tcp_pcb *pcb)
{
    8d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct tcp_seg * seg;
	struct tcp_seg **cur_seg;

	if (pcb->unacked == NULL) {
    8d08:	6f07      	ldr	r7, [r0, #112]	; 0x70
    8d0a:	b307      	cbz	r7, 8d4e <tcp_rexmit+0x4a>
    8d0c:	4680      	mov	r8, r0
	}

	/* Move the first unacked segment to the unsent queue */
	/* Keep the unsent queue sorted. */
	seg          = pcb->unacked;
	pcb->unacked = seg->next;
    8d0e:	683b      	ldr	r3, [r7, #0]
    8d10:	6703      	str	r3, [r0, #112]	; 0x70

	cur_seg = &(pcb->unsent);
    8d12:	f100 056c 	add.w	r5, r0, #108	; 0x6c
	while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    8d16:	e000      	b.n	8d1a <tcp_rexmit+0x16>
		cur_seg = &((*cur_seg)->next);
    8d18:	682d      	ldr	r5, [r5, #0]
	while (*cur_seg && TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
    8d1a:	682b      	ldr	r3, [r5, #0]
    8d1c:	b153      	cbz	r3, 8d34 <tcp_rexmit+0x30>
    8d1e:	68db      	ldr	r3, [r3, #12]
    8d20:	6858      	ldr	r0, [r3, #4]
    8d22:	4e0d      	ldr	r6, [pc, #52]	; (8d58 <tcp_rexmit+0x54>)
    8d24:	47b0      	blx	r6
    8d26:	4604      	mov	r4, r0
    8d28:	68fb      	ldr	r3, [r7, #12]
    8d2a:	6858      	ldr	r0, [r3, #4]
    8d2c:	47b0      	blx	r6
    8d2e:	1a20      	subs	r0, r4, r0
    8d30:	2800      	cmp	r0, #0
    8d32:	dbf1      	blt.n	8d18 <tcp_rexmit+0x14>
	}
	seg->next = *cur_seg;
    8d34:	682b      	ldr	r3, [r5, #0]
    8d36:	603b      	str	r3, [r7, #0]
	*cur_seg  = seg;
    8d38:	602f      	str	r7, [r5, #0]
#if TCP_OVERSIZE
	if (seg->next == NULL) {
    8d3a:	683b      	ldr	r3, [r7, #0]
    8d3c:	b14b      	cbz	r3, 8d52 <tcp_rexmit+0x4e>
		/* the retransmitted segment is last in unsent, so reset unsent_oversize */
		pcb->unsent_oversize = 0;
	}
#endif /* TCP_OVERSIZE */

	++pcb->nrtx;
    8d3e:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
    8d42:	3301      	adds	r3, #1
    8d44:	f888 3046 	strb.w	r3, [r8, #70]	; 0x46

	/* Don't take any rtt measurements after retransmitting. */
	pcb->rttest = 0;
    8d48:	2300      	movs	r3, #0
    8d4a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    8d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pcb->unsent_oversize = 0;
    8d52:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
    8d56:	e7f2      	b.n	8d3e <tcp_rexmit+0x3a>
    8d58:	00003ef1 	.word	0x00003ef1

00008d5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void tcp_rexmit_fast(struct tcp_pcb *pcb)
{
	if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
    8d5c:	6f03      	ldr	r3, [r0, #112]	; 0x70
    8d5e:	b11b      	cbz	r3, 8d68 <tcp_rexmit_fast+0xc>
    8d60:	7f83      	ldrb	r3, [r0, #30]
    8d62:	f013 0f04 	tst.w	r3, #4
    8d66:	d000      	beq.n	8d6a <tcp_rexmit_fast+0xe>
    8d68:	4770      	bx	lr
{
    8d6a:	b510      	push	{r4, lr}
    8d6c:	4604      	mov	r4, r0
		LWIP_DEBUGF(TCP_FR_DEBUG,
		            ("tcp_receive: dupacks %" U16_F " (%" U32_F "), fast retransmit %" U32_F "\n",
		             (u16_t)pcb->dupacks,
		             pcb->lastack,
		             ntohl(pcb->unacked->tcphdr->seqno)));
		tcp_rexmit(pcb);
    8d6e:	4b12      	ldr	r3, [pc, #72]	; (8db8 <tcp_rexmit_fast+0x5c>)
    8d70:	4798      	blx	r3

		/* Set ssthresh to half of the minimum of the current
		 * cwnd and the advertised window */
		if (pcb->cwnd > pcb->snd_wnd) {
    8d72:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    8d76:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
    8d7a:	4293      	cmp	r3, r2
    8d7c:	d918      	bls.n	8db0 <tcp_rexmit_fast+0x54>
			pcb->ssthresh = pcb->snd_wnd / 2;
    8d7e:	0852      	lsrs	r2, r2, #1
    8d80:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
		} else {
			pcb->ssthresh = pcb->cwnd / 2;
		}

		/* The minimum value for ssthresh should be 2 MSS */
		if (pcb->ssthresh < 2 * pcb->mss) {
    8d84:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    8d88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    8d8a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    8d8e:	da02      	bge.n	8d96 <tcp_rexmit_fast+0x3a>
			LWIP_DEBUGF(TCP_FR_DEBUG,
			            ("tcp_receive: The minimum value for ssthresh %" U16_F " should be min 2 mss %" U16_F "...\n",
			             pcb->ssthresh,
			             2 * pcb->mss));
			pcb->ssthresh = 2 * pcb->mss;
    8d90:	005a      	lsls	r2, r3, #1
    8d92:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
		}

		pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    8d96:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    8d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d9e:	fa12 f383 	uxtah	r3, r2, r3
    8da2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
		pcb->flags |= TF_INFR;
    8da6:	7fa3      	ldrb	r3, [r4, #30]
    8da8:	f043 0304 	orr.w	r3, r3, #4
    8dac:	77a3      	strb	r3, [r4, #30]
    8dae:	bd10      	pop	{r4, pc}
			pcb->ssthresh = pcb->cwnd / 2;
    8db0:	085b      	lsrs	r3, r3, #1
    8db2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    8db6:	e7e5      	b.n	8d84 <tcp_rexmit_fast+0x28>
    8db8:	00008d05 	.word	0x00008d05

00008dbc <tcp_keepalive>:
 * Called by tcp_slowtmr()
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void tcp_keepalive(struct tcp_pcb *pcb)
{
    8dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dc0:	b082      	sub	sp, #8
    8dc2:	4604      	mov	r4, r0
	            ("tcp_keepalive: tcp_ticks %" U32_F "   pcb->tmr %" U32_F " pcb->keep_cnt_sent %" U16_F "\n",
	             tcp_ticks,
	             pcb->tmr,
	             pcb->keep_cnt_sent));

	p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
    8dc4:	6d00      	ldr	r0, [r0, #80]	; 0x50
    8dc6:	3801      	subs	r0, #1
    8dc8:	4b12      	ldr	r3, [pc, #72]	; (8e14 <tcp_keepalive+0x58>)
    8dca:	4798      	blx	r3
    8dcc:	4603      	mov	r3, r0
    8dce:	2200      	movs	r2, #0
    8dd0:	4611      	mov	r1, r2
    8dd2:	4620      	mov	r0, r4
    8dd4:	4d10      	ldr	r5, [pc, #64]	; (8e18 <tcp_keepalive+0x5c>)
    8dd6:	47a8      	blx	r5
	if (p == NULL) {
    8dd8:	b1c0      	cbz	r0, 8e0c <tcp_keepalive+0x50>
    8dda:	4605      	mov	r5, r0
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: could not allocate memory for pbuf\n"));
		return;
	}
	tcphdr = (struct tcp_hdr *)p->payload;
    8ddc:	6847      	ldr	r7, [r0, #4]

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip, IP_PROTO_TCP, p->tot_len);
    8dde:	1d26      	adds	r6, r4, #4
    8de0:	8903      	ldrh	r3, [r0, #8]
    8de2:	9300      	str	r3, [sp, #0]
    8de4:	2306      	movs	r3, #6
    8de6:	4632      	mov	r2, r6
    8de8:	4621      	mov	r1, r4
    8dea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8e24 <tcp_keepalive+0x68>
    8dee:	47c0      	blx	r8
    8df0:	8238      	strh	r0, [r7, #16]

	/* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    8df2:	7aa3      	ldrb	r3, [r4, #10]
    8df4:	2206      	movs	r2, #6
    8df6:	9201      	str	r2, [sp, #4]
    8df8:	2200      	movs	r2, #0
    8dfa:	9200      	str	r2, [sp, #0]
    8dfc:	4632      	mov	r2, r6
    8dfe:	4621      	mov	r1, r4
    8e00:	4628      	mov	r0, r5
    8e02:	4c06      	ldr	r4, [pc, #24]	; (8e1c <tcp_keepalive+0x60>)
    8e04:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

	pbuf_free(p);
    8e06:	4628      	mov	r0, r5
    8e08:	4b05      	ldr	r3, [pc, #20]	; (8e20 <tcp_keepalive+0x64>)
    8e0a:	4798      	blx	r3

	LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %" U32_F " ackno %" U32_F ".\n", pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    8e0c:	b002      	add	sp, #8
    8e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e12:	bf00      	nop
    8e14:	00003ed9 	.word	0x00003ed9
    8e18:	00008425 	.word	0x00008425
    8e1c:	000050e1 	.word	0x000050e1
    8e20:	00006009 	.word	0x00006009
    8e24:	00004ca5 	.word	0x00004ca5

00008e28 <tcp_zero_window_probe>:
 * Called by tcp_slowtmr()
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void tcp_zero_window_probe(struct tcp_pcb *pcb)
{
    8e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e2c:	b082      	sub	sp, #8
	            ("tcp_zero_window_probe: tcp_ticks %" U32_F "   pcb->tmr %" U32_F " pcb->keep_cnt_sent %" U16_F "\n",
	             tcp_ticks,
	             pcb->tmr,
	             pcb->keep_cnt_sent));

	seg = pcb->unacked;
    8e2e:	6f05      	ldr	r5, [r0, #112]	; 0x70

	if (seg == NULL) {
    8e30:	b175      	cbz	r5, 8e50 <tcp_zero_window_probe+0x28>
		seg = pcb->unsent;
	}
	if (seg == NULL) {
    8e32:	2d00      	cmp	r5, #0
    8e34:	d041      	beq.n	8eba <tcp_zero_window_probe+0x92>
    8e36:	4604      	mov	r4, r0
		return;
	}

	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    8e38:	68eb      	ldr	r3, [r5, #12]
    8e3a:	8998      	ldrh	r0, [r3, #12]
    8e3c:	4b27      	ldr	r3, [pc, #156]	; (8edc <tcp_zero_window_probe+0xb4>)
    8e3e:	4798      	blx	r3
    8e40:	f010 0f01 	tst.w	r0, #1
    8e44:	d006      	beq.n	8e54 <tcp_zero_window_probe+0x2c>
    8e46:	892b      	ldrh	r3, [r5, #8]
    8e48:	2b00      	cmp	r3, #0
    8e4a:	d039      	beq.n	8ec0 <tcp_zero_window_probe+0x98>
    8e4c:	2200      	movs	r2, #0
    8e4e:	e002      	b.n	8e56 <tcp_zero_window_probe+0x2e>
		seg = pcb->unsent;
    8e50:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    8e52:	e7ee      	b.n	8e32 <tcp_zero_window_probe+0xa>
	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    8e54:	2200      	movs	r2, #0
	/* we want to send one seqno: either FIN or data (no options) */
	len = is_fin ? 0 : 1;
    8e56:	f002 08ff 	and.w	r8, r2, #255	; 0xff

	p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
    8e5a:	68eb      	ldr	r3, [r5, #12]
    8e5c:	685b      	ldr	r3, [r3, #4]
    8e5e:	f082 0201 	eor.w	r2, r2, #1
    8e62:	2100      	movs	r1, #0
    8e64:	4620      	mov	r0, r4
    8e66:	4e1e      	ldr	r6, [pc, #120]	; (8ee0 <tcp_zero_window_probe+0xb8>)
    8e68:	47b0      	blx	r6
	if (p == NULL) {
    8e6a:	4606      	mov	r6, r0
    8e6c:	b328      	cbz	r0, 8eba <tcp_zero_window_probe+0x92>
		LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
		return;
	}
	tcphdr = (struct tcp_hdr *)p->payload;
    8e6e:	6847      	ldr	r7, [r0, #4]

	if (is_fin) {
    8e70:	f1b8 0f00 	cmp.w	r8, #0
    8e74:	d026      	beq.n	8ec4 <tcp_zero_window_probe+0x9c>
		/* FIN segment, no data */
		TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
    8e76:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
    8e7a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
    8e7e:	2011      	movs	r0, #17
    8e80:	4b18      	ldr	r3, [pc, #96]	; (8ee4 <tcp_zero_window_probe+0xbc>)
    8e82:	4798      	blx	r3
    8e84:	b200      	sxth	r0, r0
    8e86:	4305      	orrs	r5, r0
    8e88:	81bd      	strh	r5, [r7, #12]
		   Ensure we copy the first TCP data byte: */
		pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
	}

#if CHECKSUM_GEN_TCP
	tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip, IP_PROTO_TCP, p->tot_len);
    8e8a:	1d25      	adds	r5, r4, #4
    8e8c:	8933      	ldrh	r3, [r6, #8]
    8e8e:	9300      	str	r3, [sp, #0]
    8e90:	2306      	movs	r3, #6
    8e92:	462a      	mov	r2, r5
    8e94:	4621      	mov	r1, r4
    8e96:	4630      	mov	r0, r6
    8e98:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8ef4 <tcp_zero_window_probe+0xcc>
    8e9c:	47c0      	blx	r8
    8e9e:	8238      	strh	r0, [r7, #16]

	/* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
	ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, &(pcb->addr_hint));
#else  /* LWIP_NETIF_HWADDRHINT*/
	ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
    8ea0:	7aa3      	ldrb	r3, [r4, #10]
    8ea2:	2206      	movs	r2, #6
    8ea4:	9201      	str	r2, [sp, #4]
    8ea6:	2200      	movs	r2, #0
    8ea8:	9200      	str	r2, [sp, #0]
    8eaa:	462a      	mov	r2, r5
    8eac:	4621      	mov	r1, r4
    8eae:	4630      	mov	r0, r6
    8eb0:	4c0d      	ldr	r4, [pc, #52]	; (8ee8 <tcp_zero_window_probe+0xc0>)
    8eb2:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

	pbuf_free(p);
    8eb4:	4630      	mov	r0, r6
    8eb6:	4b0d      	ldr	r3, [pc, #52]	; (8eec <tcp_zero_window_probe+0xc4>)
    8eb8:	4798      	blx	r3

	LWIP_DEBUGF(TCP_DEBUG,
	            ("tcp_zero_window_probe: seqno %" U32_F " ackno %" U32_F ".\n", pcb->snd_nxt - 1, pcb->rcv_nxt));
}
    8eba:	b002      	add	sp, #8
    8ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
    8ec0:	2201      	movs	r2, #1
    8ec2:	e7c8      	b.n	8e56 <tcp_zero_window_probe+0x2e>
		pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
    8ec4:	6868      	ldr	r0, [r5, #4]
    8ec6:	8903      	ldrh	r3, [r0, #8]
    8ec8:	892a      	ldrh	r2, [r5, #8]
    8eca:	1a9b      	subs	r3, r3, r2
    8ecc:	b29b      	uxth	r3, r3
    8ece:	2201      	movs	r2, #1
    8ed0:	f107 0114 	add.w	r1, r7, #20
    8ed4:	4d06      	ldr	r5, [pc, #24]	; (8ef0 <tcp_zero_window_probe+0xc8>)
    8ed6:	47a8      	blx	r5
    8ed8:	e7d7      	b.n	8e8a <tcp_zero_window_probe+0x62>
    8eda:	bf00      	nop
    8edc:	00003ecd 	.word	0x00003ecd
    8ee0:	00008425 	.word	0x00008425
    8ee4:	00003ec1 	.word	0x00003ec1
    8ee8:	000050e1 	.word	0x000050e1
    8eec:	00006009 	.word	0x00006009
    8ef0:	000062f1 	.word	0x000062f1
    8ef4:	00004ca5 	.word	0x00004ca5

00008ef8 <sys_timeout>:
#if LWIP_DEBUG_TIMERNAMES
void sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else  /* LWIP_DEBUG_TIMERNAMES */
void sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
    8ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8efa:	4605      	mov	r5, r0
    8efc:	460f      	mov	r7, r1
    8efe:	4616      	mov	r6, r2
	struct sys_timeo *timeout, *t;

	timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
    8f00:	200a      	movs	r0, #10
    8f02:	4b16      	ldr	r3, [pc, #88]	; (8f5c <sys_timeout+0x64>)
    8f04:	4798      	blx	r3
	if (timeout == NULL) {
    8f06:	2800      	cmp	r0, #0
    8f08:	d027      	beq.n	8f5a <sys_timeout+0x62>
    8f0a:	4604      	mov	r4, r0
		LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
		return;
	}
	timeout->next = NULL;
    8f0c:	2300      	movs	r3, #0
    8f0e:	6003      	str	r3, [r0, #0]
	timeout->h    = handler;
    8f10:	6087      	str	r7, [r0, #8]
	timeout->arg  = arg;
    8f12:	60c6      	str	r6, [r0, #12]
	timeout->time = msecs;
    8f14:	6045      	str	r5, [r0, #4]
	LWIP_DEBUGF(
	    TIMERS_DEBUG,
	    ("sys_timeout: %p msecs=%" U32_F " handler=%s arg=%p\n", (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

	if (next_timeout == NULL) {
    8f16:	4b12      	ldr	r3, [pc, #72]	; (8f60 <sys_timeout+0x68>)
    8f18:	681a      	ldr	r2, [r3, #0]
    8f1a:	b172      	cbz	r2, 8f3a <sys_timeout+0x42>
		next_timeout = timeout;
		return;
	}

	if (next_timeout->time > msecs) {
    8f1c:	6853      	ldr	r3, [r2, #4]
    8f1e:	429d      	cmp	r5, r3
    8f20:	d30d      	bcc.n	8f3e <sys_timeout+0x46>
		next_timeout->time -= msecs;
		timeout->next = next_timeout;
		next_timeout  = timeout;
	} else {
		for (t = next_timeout; t != NULL; t = t->next) {
    8f22:	b1d2      	cbz	r2, 8f5a <sys_timeout+0x62>
			timeout->time -= t->time;
    8f24:	6851      	ldr	r1, [r2, #4]
    8f26:	6863      	ldr	r3, [r4, #4]
    8f28:	1a5b      	subs	r3, r3, r1
    8f2a:	6063      	str	r3, [r4, #4]
			if (t->next == NULL || t->next->time > timeout->time) {
    8f2c:	6811      	ldr	r1, [r2, #0]
    8f2e:	b161      	cbz	r1, 8f4a <sys_timeout+0x52>
    8f30:	6848      	ldr	r0, [r1, #4]
    8f32:	4283      	cmp	r3, r0
    8f34:	d309      	bcc.n	8f4a <sys_timeout+0x52>
		for (t = next_timeout; t != NULL; t = t->next) {
    8f36:	460a      	mov	r2, r1
    8f38:	e7f3      	b.n	8f22 <sys_timeout+0x2a>
		next_timeout = timeout;
    8f3a:	6018      	str	r0, [r3, #0]
		return;
    8f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		next_timeout->time -= msecs;
    8f3e:	1b5d      	subs	r5, r3, r5
    8f40:	6055      	str	r5, [r2, #4]
		timeout->next = next_timeout;
    8f42:	6002      	str	r2, [r0, #0]
		next_timeout  = timeout;
    8f44:	4b06      	ldr	r3, [pc, #24]	; (8f60 <sys_timeout+0x68>)
    8f46:	6018      	str	r0, [r3, #0]
    8f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (t->next != NULL) {
    8f4a:	b111      	cbz	r1, 8f52 <sys_timeout+0x5a>
					t->next->time -= timeout->time;
    8f4c:	6848      	ldr	r0, [r1, #4]
    8f4e:	1ac3      	subs	r3, r0, r3
    8f50:	604b      	str	r3, [r1, #4]
				}
				timeout->next = t->next;
    8f52:	6813      	ldr	r3, [r2, #0]
    8f54:	6023      	str	r3, [r4, #0]
				t->next       = timeout;
    8f56:	6014      	str	r4, [r2, #0]
				break;
    8f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f5c:	00005d09 	.word	0x00005d09
    8f60:	200080f0 	.word	0x200080f0

00008f64 <tcp_timer_needed>:
{
    8f64:	b508      	push	{r3, lr}
	if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    8f66:	4b0a      	ldr	r3, [pc, #40]	; (8f90 <tcp_timer_needed+0x2c>)
    8f68:	685b      	ldr	r3, [r3, #4]
    8f6a:	b953      	cbnz	r3, 8f82 <tcp_timer_needed+0x1e>
    8f6c:	4b09      	ldr	r3, [pc, #36]	; (8f94 <tcp_timer_needed+0x30>)
    8f6e:	681b      	ldr	r3, [r3, #0]
    8f70:	b143      	cbz	r3, 8f84 <tcp_timer_needed+0x20>
		tcpip_tcp_timer_active = 1;
    8f72:	2201      	movs	r2, #1
    8f74:	4b06      	ldr	r3, [pc, #24]	; (8f90 <tcp_timer_needed+0x2c>)
    8f76:	605a      	str	r2, [r3, #4]
		sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    8f78:	2200      	movs	r2, #0
    8f7a:	4907      	ldr	r1, [pc, #28]	; (8f98 <tcp_timer_needed+0x34>)
    8f7c:	20fa      	movs	r0, #250	; 0xfa
    8f7e:	4b07      	ldr	r3, [pc, #28]	; (8f9c <tcp_timer_needed+0x38>)
    8f80:	4798      	blx	r3
    8f82:	bd08      	pop	{r3, pc}
	if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    8f84:	4b06      	ldr	r3, [pc, #24]	; (8fa0 <tcp_timer_needed+0x3c>)
    8f86:	681b      	ldr	r3, [r3, #0]
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d1f2      	bne.n	8f72 <tcp_timer_needed+0xe>
    8f8c:	e7f9      	b.n	8f82 <tcp_timer_needed+0x1e>
    8f8e:	bf00      	nop
    8f90:	200080f0 	.word	0x200080f0
    8f94:	200161f0 	.word	0x200161f0
    8f98:	00008fa5 	.word	0x00008fa5
    8f9c:	00008ef9 	.word	0x00008ef9
    8fa0:	20016204 	.word	0x20016204

00008fa4 <tcpip_tcp_timer>:
{
    8fa4:	b508      	push	{r3, lr}
	tcp_tmr();
    8fa6:	4b09      	ldr	r3, [pc, #36]	; (8fcc <tcpip_tcp_timer+0x28>)
    8fa8:	4798      	blx	r3
	if (tcp_active_pcbs || tcp_tw_pcbs) {
    8faa:	4b09      	ldr	r3, [pc, #36]	; (8fd0 <tcpip_tcp_timer+0x2c>)
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	b12b      	cbz	r3, 8fbc <tcpip_tcp_timer+0x18>
		sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
    8fb0:	2200      	movs	r2, #0
    8fb2:	4908      	ldr	r1, [pc, #32]	; (8fd4 <tcpip_tcp_timer+0x30>)
    8fb4:	20fa      	movs	r0, #250	; 0xfa
    8fb6:	4b08      	ldr	r3, [pc, #32]	; (8fd8 <tcpip_tcp_timer+0x34>)
    8fb8:	4798      	blx	r3
    8fba:	bd08      	pop	{r3, pc}
	if (tcp_active_pcbs || tcp_tw_pcbs) {
    8fbc:	4b07      	ldr	r3, [pc, #28]	; (8fdc <tcpip_tcp_timer+0x38>)
    8fbe:	681b      	ldr	r3, [r3, #0]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d1f5      	bne.n	8fb0 <tcpip_tcp_timer+0xc>
		tcpip_tcp_timer_active = 0;
    8fc4:	2200      	movs	r2, #0
    8fc6:	4b06      	ldr	r3, [pc, #24]	; (8fe0 <tcpip_tcp_timer+0x3c>)
    8fc8:	605a      	str	r2, [r3, #4]
    8fca:	bd08      	pop	{r3, pc}
    8fcc:	00006bf5 	.word	0x00006bf5
    8fd0:	200161f0 	.word	0x200161f0
    8fd4:	00008fa5 	.word	0x00008fa5
    8fd8:	00008ef9 	.word	0x00008ef9
    8fdc:	20016204 	.word	0x20016204
    8fe0:	200080f0 	.word	0x200080f0

00008fe4 <sys_timeouts_init>:
{
    8fe4:	b510      	push	{r4, lr}
	sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
    8fe6:	2200      	movs	r2, #0
    8fe8:	490a      	ldr	r1, [pc, #40]	; (9014 <sys_timeouts_init+0x30>)
    8fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8fee:	4c0a      	ldr	r4, [pc, #40]	; (9018 <sys_timeouts_init+0x34>)
    8ff0:	47a0      	blx	r4
	sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
    8ff2:	2200      	movs	r2, #0
    8ff4:	4909      	ldr	r1, [pc, #36]	; (901c <sys_timeouts_init+0x38>)
    8ff6:	f241 3088 	movw	r0, #5000	; 0x1388
    8ffa:	47a0      	blx	r4
	sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
    8ffc:	2200      	movs	r2, #0
    8ffe:	4908      	ldr	r1, [pc, #32]	; (9020 <sys_timeouts_init+0x3c>)
    9000:	f64e 2060 	movw	r0, #60000	; 0xea60
    9004:	47a0      	blx	r4
	sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
    9006:	2200      	movs	r2, #0
    9008:	4906      	ldr	r1, [pc, #24]	; (9024 <sys_timeouts_init+0x40>)
    900a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    900e:	47a0      	blx	r4
    9010:	bd10      	pop	{r4, pc}
    9012:	bf00      	nop
    9014:	00009089 	.word	0x00009089
    9018:	00008ef9 	.word	0x00008ef9
    901c:	00009069 	.word	0x00009069
    9020:	00009049 	.word	0x00009049
    9024:	00009029 	.word	0x00009029

00009028 <dhcp_timer_fine>:
{
    9028:	b508      	push	{r3, lr}
	dhcp_fine_tmr();
    902a:	4b04      	ldr	r3, [pc, #16]	; (903c <dhcp_timer_fine+0x14>)
    902c:	4798      	blx	r3
	sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
    902e:	2200      	movs	r2, #0
    9030:	4903      	ldr	r1, [pc, #12]	; (9040 <dhcp_timer_fine+0x18>)
    9032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    9036:	4b03      	ldr	r3, [pc, #12]	; (9044 <dhcp_timer_fine+0x1c>)
    9038:	4798      	blx	r3
    903a:	bd08      	pop	{r3, pc}
    903c:	00004989 	.word	0x00004989
    9040:	00009029 	.word	0x00009029
    9044:	00008ef9 	.word	0x00008ef9

00009048 <dhcp_timer_coarse>:
{
    9048:	b508      	push	{r3, lr}
	dhcp_coarse_tmr();
    904a:	4b04      	ldr	r3, [pc, #16]	; (905c <dhcp_timer_coarse+0x14>)
    904c:	4798      	blx	r3
	sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
    904e:	2200      	movs	r2, #0
    9050:	4903      	ldr	r1, [pc, #12]	; (9060 <dhcp_timer_coarse+0x18>)
    9052:	f64e 2060 	movw	r0, #60000	; 0xea60
    9056:	4b03      	ldr	r3, [pc, #12]	; (9064 <dhcp_timer_coarse+0x1c>)
    9058:	4798      	blx	r3
    905a:	bd08      	pop	{r3, pc}
    905c:	000047bd 	.word	0x000047bd
    9060:	00009049 	.word	0x00009049
    9064:	00008ef9 	.word	0x00008ef9

00009068 <arp_timer>:
{
    9068:	b508      	push	{r3, lr}
	etharp_tmr();
    906a:	4b04      	ldr	r3, [pc, #16]	; (907c <arp_timer+0x14>)
    906c:	4798      	blx	r3
	sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
    906e:	2200      	movs	r2, #0
    9070:	4903      	ldr	r1, [pc, #12]	; (9080 <arp_timer+0x18>)
    9072:	f241 3088 	movw	r0, #5000	; 0x1388
    9076:	4b03      	ldr	r3, [pc, #12]	; (9084 <arp_timer+0x1c>)
    9078:	4798      	blx	r3
    907a:	bd08      	pop	{r3, pc}
    907c:	000099fd 	.word	0x000099fd
    9080:	00009069 	.word	0x00009069
    9084:	00008ef9 	.word	0x00008ef9

00009088 <ip_reass_timer>:
{
    9088:	b508      	push	{r3, lr}
	ip_reass_tmr();
    908a:	4b04      	ldr	r3, [pc, #16]	; (909c <ip_reass_timer+0x14>)
    908c:	4798      	blx	r3
	sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
    908e:	2200      	movs	r2, #0
    9090:	4903      	ldr	r1, [pc, #12]	; (90a0 <ip_reass_timer+0x18>)
    9092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9096:	4b03      	ldr	r3, [pc, #12]	; (90a4 <ip_reass_timer+0x1c>)
    9098:	4798      	blx	r3
    909a:	bd08      	pop	{r3, pc}
    909c:	00005631 	.word	0x00005631
    90a0:	00009089 	.word	0x00009089
    90a4:	00008ef9 	.word	0x00008ef9

000090a8 <sys_untimeout>:
 */
void sys_untimeout(sys_timeout_handler handler, void *arg)
{
	struct sys_timeo *prev_t, *t;

	if (next_timeout == NULL) {
    90a8:	4b11      	ldr	r3, [pc, #68]	; (90f0 <sys_untimeout+0x48>)
    90aa:	681b      	ldr	r3, [r3, #0]
    90ac:	b1fb      	cbz	r3, 90ee <sys_untimeout+0x46>
{
    90ae:	b510      	push	{r4, lr}
    90b0:	2400      	movs	r4, #0
    90b2:	e005      	b.n	90c0 <sys_untimeout+0x18>
	for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
		if ((t->h == handler) && (t->arg == arg)) {
			/* We have a match */
			/* Unlink from previous in list */
			if (prev_t == NULL) {
				next_timeout = t->next;
    90b4:	6819      	ldr	r1, [r3, #0]
    90b6:	4a0e      	ldr	r2, [pc, #56]	; (90f0 <sys_untimeout+0x48>)
    90b8:	6011      	str	r1, [r2, #0]
    90ba:	e00c      	b.n	90d6 <sys_untimeout+0x2e>
	for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
    90bc:	461c      	mov	r4, r3
    90be:	681b      	ldr	r3, [r3, #0]
    90c0:	b1a3      	cbz	r3, 90ec <sys_untimeout+0x44>
		if ((t->h == handler) && (t->arg == arg)) {
    90c2:	689a      	ldr	r2, [r3, #8]
    90c4:	4282      	cmp	r2, r0
    90c6:	d1f9      	bne.n	90bc <sys_untimeout+0x14>
    90c8:	68da      	ldr	r2, [r3, #12]
    90ca:	428a      	cmp	r2, r1
    90cc:	d1f6      	bne.n	90bc <sys_untimeout+0x14>
			if (prev_t == NULL) {
    90ce:	2c00      	cmp	r4, #0
    90d0:	d0f0      	beq.n	90b4 <sys_untimeout+0xc>
			} else {
				prev_t->next = t->next;
    90d2:	681a      	ldr	r2, [r3, #0]
    90d4:	6022      	str	r2, [r4, #0]
			}
			/* If not the last one, add time of this one back to next */
			if (t->next != NULL) {
    90d6:	681a      	ldr	r2, [r3, #0]
    90d8:	b11a      	cbz	r2, 90e2 <sys_untimeout+0x3a>
				t->next->time += t->time;
    90da:	6858      	ldr	r0, [r3, #4]
    90dc:	6851      	ldr	r1, [r2, #4]
    90de:	4401      	add	r1, r0
    90e0:	6051      	str	r1, [r2, #4]
			}
			memp_free(MEMP_SYS_TIMEOUT, t);
    90e2:	4619      	mov	r1, r3
    90e4:	200a      	movs	r0, #10
    90e6:	4b03      	ldr	r3, [pc, #12]	; (90f4 <sys_untimeout+0x4c>)
    90e8:	4798      	blx	r3
			return;
    90ea:	bd10      	pop	{r4, pc}
    90ec:	bd10      	pop	{r4, pc}
    90ee:	4770      	bx	lr
    90f0:	200080f0 	.word	0x200080f0
    90f4:	00005d31 	.word	0x00005d31

000090f8 <sys_timeouts_mbox_fetch>:
 *
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
    90f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90fa:	4604      	mov	r4, r0
    90fc:	460d      	mov	r5, r1
    90fe:	e016      	b.n	912e <sys_timeouts_mbox_fetch+0x36>
	sys_timeout_handler handler;
	void *              arg;

again:
	if (!next_timeout) {
		time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
    9100:	2200      	movs	r2, #0
    9102:	4629      	mov	r1, r5
    9104:	4620      	mov	r0, r4
    9106:	4b16      	ldr	r3, [pc, #88]	; (9160 <sys_timeouts_mbox_fetch+0x68>)
    9108:	4798      	blx	r3
    910a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		if (next_timeout->time > 0) {
			time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
    910c:	4629      	mov	r1, r5
    910e:	4620      	mov	r0, r4
    9110:	4b13      	ldr	r3, [pc, #76]	; (9160 <sys_timeouts_mbox_fetch+0x68>)
    9112:	4798      	blx	r3
		} else {
			time_needed = SYS_ARCH_TIMEOUT;
		}

		if (time_needed == SYS_ARCH_TIMEOUT) {
    9114:	f1b0 3fff 	cmp.w	r0, #4294967295
    9118:	d116      	bne.n	9148 <sys_timeouts_mbox_fetch+0x50>
			/* If time == SYS_ARCH_TIMEOUT, a timeout occured before a message
			   could be fetched. We should now call the timeout handler and
			   deallocate the memory allocated for the timeout. */
			tmptimeout   = next_timeout;
    911a:	4b12      	ldr	r3, [pc, #72]	; (9164 <sys_timeouts_mbox_fetch+0x6c>)
    911c:	6819      	ldr	r1, [r3, #0]
			next_timeout = tmptimeout->next;
    911e:	680a      	ldr	r2, [r1, #0]
    9120:	601a      	str	r2, [r3, #0]
			handler      = tmptimeout->h;
    9122:	688e      	ldr	r6, [r1, #8]
			arg          = tmptimeout->arg;
    9124:	68cf      	ldr	r7, [r1, #12]
#if LWIP_DEBUG_TIMERNAMES
			if (handler != NULL) {
				LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n", tmptimeout->handler_name, arg));
			}
#endif /* LWIP_DEBUG_TIMERNAMES */
			memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
    9126:	200a      	movs	r0, #10
    9128:	4b0f      	ldr	r3, [pc, #60]	; (9168 <sys_timeouts_mbox_fetch+0x70>)
    912a:	4798      	blx	r3
			if (handler != NULL) {
    912c:	b94e      	cbnz	r6, 9142 <sys_timeouts_mbox_fetch+0x4a>
	if (!next_timeout) {
    912e:	4b0d      	ldr	r3, [pc, #52]	; (9164 <sys_timeouts_mbox_fetch+0x6c>)
    9130:	681b      	ldr	r3, [r3, #0]
    9132:	2b00      	cmp	r3, #0
    9134:	d0e4      	beq.n	9100 <sys_timeouts_mbox_fetch+0x8>
		if (next_timeout->time > 0) {
    9136:	685a      	ldr	r2, [r3, #4]
    9138:	2a00      	cmp	r2, #0
    913a:	d1e7      	bne.n	910c <sys_timeouts_mbox_fetch+0x14>
			time_needed = SYS_ARCH_TIMEOUT;
    913c:	f04f 30ff 	mov.w	r0, #4294967295
    9140:	e7e8      	b.n	9114 <sys_timeouts_mbox_fetch+0x1c>
				/* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
				   timeout handler function. */
				LOCK_TCPIP_CORE();
				handler(arg);
    9142:	4638      	mov	r0, r7
    9144:	47b0      	blx	r6
    9146:	e7f2      	b.n	912e <sys_timeouts_mbox_fetch+0x36>
			goto again;
		} else {
			/* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
			   occured. The time variable is set to the number of
			   milliseconds we waited for the message. */
			if (time_needed < next_timeout->time) {
    9148:	4b06      	ldr	r3, [pc, #24]	; (9164 <sys_timeouts_mbox_fetch+0x6c>)
    914a:	681a      	ldr	r2, [r3, #0]
    914c:	6853      	ldr	r3, [r2, #4]
    914e:	4298      	cmp	r0, r3
    9150:	d302      	bcc.n	9158 <sys_timeouts_mbox_fetch+0x60>
				next_timeout->time -= time_needed;
			} else {
				next_timeout->time = 0;
    9152:	2300      	movs	r3, #0
    9154:	6053      	str	r3, [r2, #4]
    9156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				next_timeout->time -= time_needed;
    9158:	1a1b      	subs	r3, r3, r0
    915a:	6053      	str	r3, [r2, #4]
    915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    915e:	bf00      	nop
    9160:	00002641 	.word	0x00002641
    9164:	200080f0 	.word	0x200080f0
    9168:	00005d31 	.word	0x00005d31

0000916c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t udp_new_port(void)
{
	u16_t           n = 0;
    916c:	2000      	movs	r0, #0
	struct udp_pcb *pcb;

again:
	if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    916e:	4a10      	ldr	r2, [pc, #64]	; (91b0 <udp_new_port+0x44>)
    9170:	8813      	ldrh	r3, [r2, #0]
    9172:	1c59      	adds	r1, r3, #1
    9174:	8011      	strh	r1, [r2, #0]
    9176:	f64f 72ff 	movw	r2, #65535	; 0xffff
    917a:	4293      	cmp	r3, r2
    917c:	d009      	beq.n	9192 <udp_new_port+0x26>
		udp_port = UDP_LOCAL_PORT_RANGE_START;
	}
	/* Check all PCBs. */
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    917e:	4b0d      	ldr	r3, [pc, #52]	; (91b4 <udp_new_port+0x48>)
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	b193      	cbz	r3, 91aa <udp_new_port+0x3e>
		if (pcb->local_port == udp_port) {
    9184:	8a59      	ldrh	r1, [r3, #18]
    9186:	4a0a      	ldr	r2, [pc, #40]	; (91b0 <udp_new_port+0x44>)
    9188:	8812      	ldrh	r2, [r2, #0]
    918a:	4291      	cmp	r1, r2
    918c:	d006      	beq.n	919c <udp_new_port+0x30>
	for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    918e:	68db      	ldr	r3, [r3, #12]
    9190:	e7f7      	b.n	9182 <udp_new_port+0x16>
		udp_port = UDP_LOCAL_PORT_RANGE_START;
    9192:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    9196:	4b06      	ldr	r3, [pc, #24]	; (91b0 <udp_new_port+0x44>)
    9198:	801a      	strh	r2, [r3, #0]
    919a:	e7f0      	b.n	917e <udp_new_port+0x12>
			if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
    919c:	3001      	adds	r0, #1
    919e:	b280      	uxth	r0, r0
    91a0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    91a4:	d3e3      	bcc.n	916e <udp_new_port+0x2>
				return 0;
    91a6:	2000      	movs	r0, #0
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
    91a8:	4770      	bx	lr
	return udp_port;
    91aa:	4b01      	ldr	r3, [pc, #4]	; (91b0 <udp_new_port+0x44>)
    91ac:	8818      	ldrh	r0, [r3, #0]
    91ae:	4770      	bx	lr
    91b0:	20000048 	.word	0x20000048
    91b4:	2001620c 	.word	0x2001620c

000091b8 <udp_init>:
{
    91b8:	4770      	bx	lr
	...

000091bc <udp_input>:
 * @param p pbuf to be demultiplexed to a UDP PCB.
 * @param inp network interface on which the datagram was received.
 *
 */
void udp_input(struct pbuf *p, struct netif *inp)
{
    91bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91c0:	b085      	sub	sp, #20
    91c2:	4605      	mov	r5, r0
    91c4:	468a      	mov	sl, r1

	PERF_START;

	UDP_STATS_INC(udp.recv);

	iphdr = (struct ip_hdr *)p->payload;
    91c6:	f8d0 9004 	ldr.w	r9, [r0, #4]

	/* Check minimum length (IP header + UDP header)
	 * and move payload pointer to UDP header */
	if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
    91ca:	8903      	ldrh	r3, [r0, #8]
    91cc:	f899 1000 	ldrb.w	r1, [r9]
    91d0:	f001 010f 	and.w	r1, r1, #15
    91d4:	1c8a      	adds	r2, r1, #2
    91d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
    91da:	db05      	blt.n	91e8 <udp_input+0x2c>
    91dc:	0089      	lsls	r1, r1, #2
    91de:	4249      	negs	r1, r1
    91e0:	4b6d      	ldr	r3, [pc, #436]	; (9398 <udp_input+0x1dc>)
    91e2:	4798      	blx	r3
    91e4:	4606      	mov	r6, r0
    91e6:	b128      	cbz	r0, 91f4 <udp_input+0x38>
		/* drop short packets */
		LWIP_DEBUGF(UDP_DEBUG, ("udp_input: short UDP datagram (%" U16_F " bytes) discarded\n", p->tot_len));
		UDP_STATS_INC(udp.lenerr);
		UDP_STATS_INC(udp.drop);
		snmp_inc_udpinerrors();
		pbuf_free(p);
    91e8:	4628      	mov	r0, r5
    91ea:	4b6c      	ldr	r3, [pc, #432]	; (939c <udp_input+0x1e0>)
    91ec:	4798      	blx	r3
	} else {
		pbuf_free(p);
	}
end:
	PERF_STOP("udp_input");
}
    91ee:	b005      	add	sp, #20
    91f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udphdr = (struct udp_hdr *)p->payload;
    91f4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
    91f8:	4651      	mov	r1, sl
    91fa:	4b69      	ldr	r3, [pc, #420]	; (93a0 <udp_input+0x1e4>)
    91fc:	6818      	ldr	r0, [r3, #0]
    91fe:	4b69      	ldr	r3, [pc, #420]	; (93a4 <udp_input+0x1e8>)
    9200:	4798      	blx	r3
    9202:	4680      	mov	r8, r0
	src  = ntohs(udphdr->src);
    9204:	f8bb 0000 	ldrh.w	r0, [fp]
    9208:	4c67      	ldr	r4, [pc, #412]	; (93a8 <udp_input+0x1ec>)
    920a:	47a0      	blx	r4
    920c:	4607      	mov	r7, r0
	dest = ntohs(udphdr->dest);
    920e:	f8bb 0002 	ldrh.w	r0, [fp, #2]
    9212:	47a0      	blx	r4
	if (dest == DHCP_CLIENT_PORT) {
    9214:	2844      	cmp	r0, #68	; 0x44
    9216:	d00a      	beq.n	922e <udp_input+0x72>
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    9218:	4b64      	ldr	r3, [pc, #400]	; (93ac <udp_input+0x1f0>)
    921a:	681b      	ldr	r3, [r3, #0]
    921c:	9303      	str	r3, [sp, #12]
    921e:	461c      	mov	r4, r3
		uncon_pcb   = NULL;
    9220:	f04f 0c00 	mov.w	ip, #0
		prev        = NULL;
    9224:	4663      	mov	r3, ip
    9226:	4641      	mov	r1, r8
    9228:	46ae      	mov	lr, r5
    922a:	4665      	mov	r5, ip
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    922c:	e03e      	b.n	92ac <udp_input+0xf0>
		if (src == DHCP_SERVER_PORT) {
    922e:	2f43      	cmp	r7, #67	; 0x43
    9230:	d001      	beq.n	9236 <udp_input+0x7a>
	pcb = NULL;
    9232:	2400      	movs	r4, #0
    9234:	e05e      	b.n	92f4 <udp_input+0x138>
			if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
    9236:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    923a:	2b00      	cmp	r3, #0
    923c:	d077      	beq.n	932e <udp_input+0x172>
    923e:	685c      	ldr	r4, [r3, #4]
    9240:	2c00      	cmp	r4, #0
    9242:	d057      	beq.n	92f4 <udp_input+0x138>
				if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip)
    9244:	f114 0f04 	cmn.w	r4, #4
    9248:	d054      	beq.n	92f4 <udp_input+0x138>
    924a:	6863      	ldr	r3, [r4, #4]
    924c:	2b00      	cmp	r3, #0
    924e:	d051      	beq.n	92f4 <udp_input+0x138>
				     || ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
    9250:	4a57      	ldr	r2, [pc, #348]	; (93b0 <udp_input+0x1f4>)
    9252:	6812      	ldr	r2, [r2, #0]
    9254:	4293      	cmp	r3, r2
    9256:	d04d      	beq.n	92f4 <udp_input+0x138>
	pcb = NULL;
    9258:	2400      	movs	r4, #0
    925a:	e04b      	b.n	92f4 <udp_input+0x138>
				if ((!broadcast && ip_addr_isany(&pcb->local_ip)) || ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)
    925c:	b911      	cbnz	r1, 9264 <udp_input+0xa8>
    925e:	b19c      	cbz	r4, 9288 <udp_input+0xcc>
    9260:	6822      	ldr	r2, [r4, #0]
    9262:	b18a      	cbz	r2, 9288 <udp_input+0xcc>
    9264:	f8d4 c000 	ldr.w	ip, [r4]
    9268:	4a4d      	ldr	r2, [pc, #308]	; (93a0 <udp_input+0x1e4>)
    926a:	6812      	ldr	r2, [r2, #0]
    926c:	4594      	cmp	ip, r2
    926e:	d00b      	beq.n	9288 <udp_input+0xcc>
				    ||
    9270:	b199      	cbz	r1, 929a <udp_input+0xde>
				     && (ip_addr_isany(&pcb->local_ip)
    9272:	b14c      	cbz	r4, 9288 <udp_input+0xcc>
    9274:	f1bc 0f00 	cmp.w	ip, #0
    9278:	d006      	beq.n	9288 <udp_input+0xcc>
				         || ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
    927a:	ea8c 0c02 	eor.w	ip, ip, r2
    927e:	f8da 2008 	ldr.w	r2, [sl, #8]
    9282:	ea1c 0f02 	tst.w	ip, r2
    9286:	d10a      	bne.n	929e <udp_input+0xe2>
					if ((uncon_pcb == NULL) && ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
    9288:	b10d      	cbz	r5, 928e <udp_input+0xd2>
					local_match = 1;
    928a:	2201      	movs	r2, #1
    928c:	e013      	b.n	92b6 <udp_input+0xfa>
					if ((uncon_pcb == NULL) && ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
    928e:	7c22      	ldrb	r2, [r4, #16]
    9290:	f012 0f04 	tst.w	r2, #4
    9294:	d005      	beq.n	92a2 <udp_input+0xe6>
					local_match = 1;
    9296:	2201      	movs	r2, #1
    9298:	e00d      	b.n	92b6 <udp_input+0xfa>
			local_match = 0;
    929a:	460a      	mov	r2, r1
    929c:	e00b      	b.n	92b6 <udp_input+0xfa>
    929e:	4632      	mov	r2, r6
    92a0:	e009      	b.n	92b6 <udp_input+0xfa>
						uncon_pcb = pcb;
    92a2:	4625      	mov	r5, r4
					local_match = 1;
    92a4:	2201      	movs	r2, #1
    92a6:	e006      	b.n	92b6 <udp_input+0xfa>
			prev = pcb;
    92a8:	4623      	mov	r3, r4
		for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
    92aa:	68e4      	ldr	r4, [r4, #12]
    92ac:	b1f4      	cbz	r4, 92ec <udp_input+0x130>
			if (pcb->local_port == dest) {
    92ae:	8a62      	ldrh	r2, [r4, #18]
    92b0:	4290      	cmp	r0, r2
    92b2:	d0d3      	beq.n	925c <udp_input+0xa0>
			local_match = 0;
    92b4:	4632      	mov	r2, r6
			if ((local_match != 0) && (pcb->remote_port == src)
    92b6:	2a00      	cmp	r2, #0
    92b8:	d0f6      	beq.n	92a8 <udp_input+0xec>
    92ba:	8aa2      	ldrh	r2, [r4, #20]
    92bc:	4297      	cmp	r7, r2
    92be:	d1f3      	bne.n	92a8 <udp_input+0xec>
			    && (ip_addr_isany(&pcb->remote_ip) || ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
    92c0:	f114 0f04 	cmn.w	r4, #4
    92c4:	d007      	beq.n	92d6 <udp_input+0x11a>
    92c6:	6862      	ldr	r2, [r4, #4]
    92c8:	b12a      	cbz	r2, 92d6 <udp_input+0x11a>
    92ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 93b0 <udp_input+0x1f4>
    92ce:	f8dc c000 	ldr.w	ip, [ip]
    92d2:	4562      	cmp	r2, ip
    92d4:	d1e8      	bne.n	92a8 <udp_input+0xec>
    92d6:	46ac      	mov	ip, r5
    92d8:	4688      	mov	r8, r1
    92da:	4675      	mov	r5, lr
				if (prev != NULL) {
    92dc:	b14b      	cbz	r3, 92f2 <udp_input+0x136>
					prev->next = pcb->next;
    92de:	68e2      	ldr	r2, [r4, #12]
    92e0:	60da      	str	r2, [r3, #12]
					pcb->next  = udp_pcbs;
    92e2:	9b03      	ldr	r3, [sp, #12]
    92e4:	60e3      	str	r3, [r4, #12]
					udp_pcbs   = pcb;
    92e6:	4b31      	ldr	r3, [pc, #196]	; (93ac <udp_input+0x1f0>)
    92e8:	601c      	str	r4, [r3, #0]
    92ea:	e002      	b.n	92f2 <udp_input+0x136>
    92ec:	46ac      	mov	ip, r5
    92ee:	4688      	mov	r8, r1
    92f0:	4675      	mov	r5, lr
		if (pcb == NULL) {
    92f2:	b1f4      	cbz	r4, 9332 <udp_input+0x176>
	if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
    92f4:	b1fc      	cbz	r4, 9336 <udp_input+0x17a>
			if (udphdr->chksum != 0) {
    92f6:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    92fa:	b143      	cbz	r3, 930e <udp_input+0x152>
				if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(), IP_PROTO_UDP, p->tot_len)
    92fc:	892b      	ldrh	r3, [r5, #8]
    92fe:	9300      	str	r3, [sp, #0]
    9300:	2311      	movs	r3, #17
    9302:	4a27      	ldr	r2, [pc, #156]	; (93a0 <udp_input+0x1e4>)
    9304:	492a      	ldr	r1, [pc, #168]	; (93b0 <udp_input+0x1f4>)
    9306:	4628      	mov	r0, r5
    9308:	4e2a      	ldr	r6, [pc, #168]	; (93b4 <udp_input+0x1f8>)
    930a:	47b0      	blx	r6
    930c:	b9e8      	cbnz	r0, 934a <udp_input+0x18e>
		if (pbuf_header(p, -UDP_HLEN)) {
    930e:	f06f 0107 	mvn.w	r1, #7
    9312:	4628      	mov	r0, r5
    9314:	4b20      	ldr	r3, [pc, #128]	; (9398 <udp_input+0x1dc>)
    9316:	4798      	blx	r3
    9318:	b9d8      	cbnz	r0, 9352 <udp_input+0x196>
		if (pcb != NULL) {
    931a:	b314      	cbz	r4, 9362 <udp_input+0x1a6>
			if (pcb->recv != NULL) {
    931c:	69a6      	ldr	r6, [r4, #24]
    931e:	b1e6      	cbz	r6, 935a <udp_input+0x19e>
				pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
    9320:	69e0      	ldr	r0, [r4, #28]
    9322:	9700      	str	r7, [sp, #0]
    9324:	4b22      	ldr	r3, [pc, #136]	; (93b0 <udp_input+0x1f4>)
    9326:	462a      	mov	r2, r5
    9328:	4621      	mov	r1, r4
    932a:	47b0      	blx	r6
    932c:	e75f      	b.n	91ee <udp_input+0x32>
	pcb = NULL;
    932e:	2400      	movs	r4, #0
    9330:	e7e0      	b.n	92f4 <udp_input+0x138>
			pcb = uncon_pcb;
    9332:	4664      	mov	r4, ip
    9334:	e7de      	b.n	92f4 <udp_input+0x138>
	if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
    9336:	f8da 2004 	ldr.w	r2, [sl, #4]
    933a:	4b19      	ldr	r3, [pc, #100]	; (93a0 <udp_input+0x1e4>)
    933c:	681b      	ldr	r3, [r3, #0]
    933e:	429a      	cmp	r2, r3
    9340:	d0d9      	beq.n	92f6 <udp_input+0x13a>
		pbuf_free(p);
    9342:	4628      	mov	r0, r5
    9344:	4b15      	ldr	r3, [pc, #84]	; (939c <udp_input+0x1e0>)
    9346:	4798      	blx	r3
}
    9348:	e751      	b.n	91ee <udp_input+0x32>
					pbuf_free(p);
    934a:	4628      	mov	r0, r5
    934c:	4b13      	ldr	r3, [pc, #76]	; (939c <udp_input+0x1e0>)
    934e:	4798      	blx	r3
					goto end;
    9350:	e74d      	b.n	91ee <udp_input+0x32>
			pbuf_free(p);
    9352:	4628      	mov	r0, r5
    9354:	4b11      	ldr	r3, [pc, #68]	; (939c <udp_input+0x1e0>)
    9356:	4798      	blx	r3
			goto end;
    9358:	e749      	b.n	91ee <udp_input+0x32>
				pbuf_free(p);
    935a:	4628      	mov	r0, r5
    935c:	4b0f      	ldr	r3, [pc, #60]	; (939c <udp_input+0x1e0>)
    935e:	4798      	blx	r3
				goto end;
    9360:	e745      	b.n	91ee <udp_input+0x32>
			if (!broadcast && !ip_addr_ismulticast(&current_iphdr_dest)) {
    9362:	f1b8 0f00 	cmp.w	r8, #0
    9366:	d112      	bne.n	938e <udp_input+0x1d2>
    9368:	4b0d      	ldr	r3, [pc, #52]	; (93a0 <udp_input+0x1e4>)
    936a:	681b      	ldr	r3, [r3, #0]
    936c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9370:	2be0      	cmp	r3, #224	; 0xe0
    9372:	d00c      	beq.n	938e <udp_input+0x1d2>
				pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
    9374:	f899 1000 	ldrb.w	r1, [r9]
    9378:	f001 010f 	and.w	r1, r1, #15
    937c:	3102      	adds	r1, #2
    937e:	0089      	lsls	r1, r1, #2
    9380:	4628      	mov	r0, r5
    9382:	4b05      	ldr	r3, [pc, #20]	; (9398 <udp_input+0x1dc>)
    9384:	4798      	blx	r3
				icmp_dest_unreach(p, ICMP_DUR_PORT);
    9386:	2103      	movs	r1, #3
    9388:	4628      	mov	r0, r5
    938a:	4b0b      	ldr	r3, [pc, #44]	; (93b8 <udp_input+0x1fc>)
    938c:	4798      	blx	r3
			pbuf_free(p);
    938e:	4628      	mov	r0, r5
    9390:	4b02      	ldr	r3, [pc, #8]	; (939c <udp_input+0x1e0>)
    9392:	4798      	blx	r3
    9394:	e72b      	b.n	91ee <udp_input+0x32>
    9396:	bf00      	nop
    9398:	00005f8f 	.word	0x00005f8f
    939c:	00006009 	.word	0x00006009
    93a0:	200129c4 	.word	0x200129c4
    93a4:	00005121 	.word	0x00005121
    93a8:	00003ecd 	.word	0x00003ecd
    93ac:	2001620c 	.word	0x2001620c
    93b0:	200129bc 	.word	0x200129bc
    93b4:	00004ca5 	.word	0x00004ca5
    93b8:	00004c1d 	.word	0x00004c1d

000093bc <udp_bind>:
 * another UDP PCB.
 *
 * @see udp_disconnect()
 */
err_t udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
    93bc:	b570      	push	{r4, r5, r6, lr}
    93be:	4604      	mov	r4, r0
	ip_addr_debug_print(UDP_DEBUG, ipaddr);
	LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %" U16_F ")\n", port));

	rebind = 0;
	/* Check for double bind and rebind of the same pcb */
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    93c0:	4b1d      	ldr	r3, [pc, #116]	; (9438 <udp_bind+0x7c>)
    93c2:	681b      	ldr	r3, [r3, #0]
	rebind = 0;
    93c4:	2600      	movs	r6, #0
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    93c6:	e001      	b.n	93cc <udp_bind+0x10>
		/* is this UDP PCB already on active list? */
		if (pcb == ipcb) {
			/* pcb may occur at most once in active list */
			LWIP_ASSERT("rebind == 0", rebind == 0);
			/* pcb already in list, just rebind */
			rebind = 1;
    93c8:	2601      	movs	r6, #1
	for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    93ca:	68db      	ldr	r3, [r3, #12]
    93cc:	b17b      	cbz	r3, 93ee <udp_bind+0x32>
		if (pcb == ipcb) {
    93ce:	42a3      	cmp	r3, r4
    93d0:	d0fa      	beq.n	93c8 <udp_bind+0xc>
		else if (!ip_get_option(pcb, SOF_REUSEADDR) && !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else  /* SO_REUSE */
		/* port matches that of PCB in list and REUSEADDR not set -> reject */
		else {
#endif /* SO_REUSE */
			if ((ipcb->local_port == port) &&
    93d2:	8a58      	ldrh	r0, [r3, #18]
    93d4:	4290      	cmp	r0, r2
    93d6:	d1f8      	bne.n	93ca <udp_bind+0xe>
    93d8:	b1fb      	cbz	r3, 941a <udp_bind+0x5e>
			    /* IP address matches, or one is IP_ADDR_ANY? */
			    (ip_addr_isany(&(ipcb->local_ip)) || ip_addr_isany(ipaddr) || ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
    93da:	6818      	ldr	r0, [r3, #0]
    93dc:	b300      	cbz	r0, 9420 <udp_bind+0x64>
    93de:	b311      	cbz	r1, 9426 <udp_bind+0x6a>
    93e0:	680d      	ldr	r5, [r1, #0]
    93e2:	b31d      	cbz	r5, 942c <udp_bind+0x70>
    93e4:	42a8      	cmp	r0, r5
    93e6:	d1f0      	bne.n	93ca <udp_bind+0xe>
				/* other PCB already binds to this local IP and port */
				LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: local port %" U16_F " already bound by another pcb\n", port));
				return ERR_USE;
    93e8:	f06f 0007 	mvn.w	r0, #7
    93ec:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
	}

	ip_addr_set(&pcb->local_ip, ipaddr);
    93ee:	b151      	cbz	r1, 9406 <udp_bind+0x4a>
    93f0:	680b      	ldr	r3, [r1, #0]
    93f2:	6023      	str	r3, [r4, #0]

	/* no port specified? */
	if (port == 0) {
    93f4:	b14a      	cbz	r2, 940a <udp_bind+0x4e>
			/* no more ports available in local range */
			LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
			return ERR_USE;
		}
	}
	pcb->local_port = port;
    93f6:	8262      	strh	r2, [r4, #18]
	snmp_insert_udpidx_tree(pcb);
	/* pcb not active yet? */
	if (rebind == 0) {
    93f8:	b9de      	cbnz	r6, 9432 <udp_bind+0x76>
		/* place the PCB on the active list if not already there */
		pcb->next = udp_pcbs;
    93fa:	4b0f      	ldr	r3, [pc, #60]	; (9438 <udp_bind+0x7c>)
    93fc:	681a      	ldr	r2, [r3, #0]
    93fe:	60e2      	str	r2, [r4, #12]
		udp_pcbs  = pcb;
    9400:	601c      	str	r4, [r3, #0]
	             ip4_addr1_16(&pcb->local_ip),
	             ip4_addr2_16(&pcb->local_ip),
	             ip4_addr3_16(&pcb->local_ip),
	             ip4_addr4_16(&pcb->local_ip),
	             pcb->local_port));
	return ERR_OK;
    9402:	2000      	movs	r0, #0
    9404:	bd70      	pop	{r4, r5, r6, pc}
	ip_addr_set(&pcb->local_ip, ipaddr);
    9406:	2300      	movs	r3, #0
    9408:	e7f3      	b.n	93f2 <udp_bind+0x36>
		port = udp_new_port();
    940a:	4b0c      	ldr	r3, [pc, #48]	; (943c <udp_bind+0x80>)
    940c:	4798      	blx	r3
		if (port == 0) {
    940e:	4602      	mov	r2, r0
    9410:	2800      	cmp	r0, #0
    9412:	d1f0      	bne.n	93f6 <udp_bind+0x3a>
			return ERR_USE;
    9414:	f06f 0007 	mvn.w	r0, #7
    9418:	bd70      	pop	{r4, r5, r6, pc}
				return ERR_USE;
    941a:	f06f 0007 	mvn.w	r0, #7
    941e:	bd70      	pop	{r4, r5, r6, pc}
    9420:	f06f 0007 	mvn.w	r0, #7
    9424:	bd70      	pop	{r4, r5, r6, pc}
    9426:	f06f 0007 	mvn.w	r0, #7
    942a:	bd70      	pop	{r4, r5, r6, pc}
    942c:	f06f 0007 	mvn.w	r0, #7
    9430:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_OK;
    9432:	2000      	movs	r0, #0
}
    9434:	bd70      	pop	{r4, r5, r6, pc}
    9436:	bf00      	nop
    9438:	2001620c 	.word	0x2001620c
    943c:	0000916d 	.word	0x0000916d

00009440 <udp_sendto_if>:
{
    9440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9444:	b085      	sub	sp, #20
    9446:	4604      	mov	r4, r0
    9448:	460f      	mov	r7, r1
    944a:	4691      	mov	r9, r2
    944c:	469a      	mov	sl, r3
    944e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (pcb->local_port == 0) {
    9452:	8a42      	ldrh	r2, [r0, #18]
    9454:	b92a      	cbnz	r2, 9462 <udp_sendto_if+0x22>
		err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
    9456:	4601      	mov	r1, r0
    9458:	4b34      	ldr	r3, [pc, #208]	; (952c <udp_sendto_if+0xec>)
    945a:	4798      	blx	r3
		if (err != ERR_OK) {
    945c:	4605      	mov	r5, r0
    945e:	2800      	cmp	r0, #0
    9460:	d13f      	bne.n	94e2 <udp_sendto_if+0xa2>
	if (pbuf_header(p, UDP_HLEN)) {
    9462:	2108      	movs	r1, #8
    9464:	4638      	mov	r0, r7
    9466:	4b32      	ldr	r3, [pc, #200]	; (9530 <udp_sendto_if+0xf0>)
    9468:	4798      	blx	r3
    946a:	b168      	cbz	r0, 9488 <udp_sendto_if+0x48>
		q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    946c:	2200      	movs	r2, #0
    946e:	2108      	movs	r1, #8
    9470:	2001      	movs	r0, #1
    9472:	4b30      	ldr	r3, [pc, #192]	; (9534 <udp_sendto_if+0xf4>)
    9474:	4798      	blx	r3
		if (q == NULL) {
    9476:	4606      	mov	r6, r0
    9478:	2800      	cmp	r0, #0
    947a:	d051      	beq.n	9520 <udp_sendto_if+0xe0>
		if (p->tot_len != 0) {
    947c:	893b      	ldrh	r3, [r7, #8]
    947e:	b123      	cbz	r3, 948a <udp_sendto_if+0x4a>
			pbuf_chain(q, p);
    9480:	4639      	mov	r1, r7
    9482:	4b2d      	ldr	r3, [pc, #180]	; (9538 <udp_sendto_if+0xf8>)
    9484:	4798      	blx	r3
    9486:	e000      	b.n	948a <udp_sendto_if+0x4a>
		q = p;
    9488:	463e      	mov	r6, r7
	udphdr       = (struct udp_hdr *)q->payload;
    948a:	6875      	ldr	r5, [r6, #4]
	udphdr->src  = htons(pcb->local_port);
    948c:	8a60      	ldrh	r0, [r4, #18]
    948e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 953c <udp_sendto_if+0xfc>
    9492:	47d8      	blx	fp
    9494:	8028      	strh	r0, [r5, #0]
	udphdr->dest = htons(dst_port);
    9496:	4650      	mov	r0, sl
    9498:	47d8      	blx	fp
    949a:	8068      	strh	r0, [r5, #2]
	udphdr->chksum = 0x0000;
    949c:	2300      	movs	r3, #0
    949e:	71ab      	strb	r3, [r5, #6]
    94a0:	71eb      	strb	r3, [r5, #7]
	if (ip_addr_isany(&pcb->local_ip)) {
    94a2:	46a2      	mov	sl, r4
    94a4:	b10c      	cbz	r4, 94aa <udp_sendto_if+0x6a>
    94a6:	6823      	ldr	r3, [r4, #0]
    94a8:	b9fb      	cbnz	r3, 94ea <udp_sendto_if+0xaa>
		src_ip = &(netif->ip_addr);
    94aa:	f108 0a04 	add.w	sl, r8, #4
		udphdr->len = htons(q->tot_len);
    94ae:	8930      	ldrh	r0, [r6, #8]
    94b0:	4b22      	ldr	r3, [pc, #136]	; (953c <udp_sendto_if+0xfc>)
    94b2:	4798      	blx	r3
    94b4:	80a8      	strh	r0, [r5, #4]
		if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
    94b6:	7c23      	ldrb	r3, [r4, #16]
    94b8:	f013 0f01 	tst.w	r3, #1
    94bc:	d021      	beq.n	9502 <udp_sendto_if+0xc2>
		err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
    94be:	7aa3      	ldrb	r3, [r4, #10]
    94c0:	7a62      	ldrb	r2, [r4, #9]
    94c2:	f8cd 8008 	str.w	r8, [sp, #8]
    94c6:	2111      	movs	r1, #17
    94c8:	9101      	str	r1, [sp, #4]
    94ca:	9200      	str	r2, [sp, #0]
    94cc:	464a      	mov	r2, r9
    94ce:	4651      	mov	r1, sl
    94d0:	4630      	mov	r0, r6
    94d2:	4c1b      	ldr	r4, [pc, #108]	; (9540 <udp_sendto_if+0x100>)
    94d4:	47a0      	blx	r4
    94d6:	4605      	mov	r5, r0
	if (q != p) {
    94d8:	42be      	cmp	r6, r7
    94da:	d002      	beq.n	94e2 <udp_sendto_if+0xa2>
		pbuf_free(q);
    94dc:	4630      	mov	r0, r6
    94de:	4b19      	ldr	r3, [pc, #100]	; (9544 <udp_sendto_if+0x104>)
    94e0:	4798      	blx	r3
}
    94e2:	4628      	mov	r0, r5
    94e4:	b005      	add	sp, #20
    94e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
    94ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
    94ee:	4293      	cmp	r3, r2
    94f0:	d0dd      	beq.n	94ae <udp_sendto_if+0x6e>
			if (q != p) {
    94f2:	42be      	cmp	r6, r7
    94f4:	d017      	beq.n	9526 <udp_sendto_if+0xe6>
				pbuf_free(q);
    94f6:	4630      	mov	r0, r6
    94f8:	4b12      	ldr	r3, [pc, #72]	; (9544 <udp_sendto_if+0x104>)
    94fa:	4798      	blx	r3
			return ERR_VAL;
    94fc:	f06f 0505 	mvn.w	r5, #5
    9500:	e7ef      	b.n	94e2 <udp_sendto_if+0xa2>
				udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
    9502:	8933      	ldrh	r3, [r6, #8]
    9504:	9300      	str	r3, [sp, #0]
    9506:	2311      	movs	r3, #17
    9508:	464a      	mov	r2, r9
    950a:	4651      	mov	r1, sl
    950c:	4630      	mov	r0, r6
    950e:	f8df b038 	ldr.w	fp, [pc, #56]	; 9548 <udp_sendto_if+0x108>
    9512:	47d8      	blx	fp
			if (udpchksum == 0x0000) {
    9514:	4603      	mov	r3, r0
    9516:	b908      	cbnz	r0, 951c <udp_sendto_if+0xdc>
				udpchksum = 0xffff;
    9518:	f64f 73ff 	movw	r3, #65535	; 0xffff
			udphdr->chksum = udpchksum;
    951c:	80eb      	strh	r3, [r5, #6]
    951e:	e7ce      	b.n	94be <udp_sendto_if+0x7e>
			return ERR_MEM;
    9520:	f04f 35ff 	mov.w	r5, #4294967295
    9524:	e7dd      	b.n	94e2 <udp_sendto_if+0xa2>
			return ERR_VAL;
    9526:	f06f 0505 	mvn.w	r5, #5
    952a:	e7da      	b.n	94e2 <udp_sendto_if+0xa2>
    952c:	000093bd 	.word	0x000093bd
    9530:	00005f8f 	.word	0x00005f8f
    9534:	0000606d 	.word	0x0000606d
    9538:	00006235 	.word	0x00006235
    953c:	00003ec1 	.word	0x00003ec1
    9540:	00004fed 	.word	0x00004fed
    9544:	00006009 	.word	0x00006009
    9548:	00004ca5 	.word	0x00004ca5

0000954c <udp_sendto>:
{
    954c:	b5f0      	push	{r4, r5, r6, r7, lr}
    954e:	b083      	sub	sp, #12
    9550:	4605      	mov	r5, r0
    9552:	460e      	mov	r6, r1
    9554:	4614      	mov	r4, r2
    9556:	461f      	mov	r7, r3
	netif = ip_route(dst_ip);
    9558:	4610      	mov	r0, r2
    955a:	4b07      	ldr	r3, [pc, #28]	; (9578 <udp_sendto+0x2c>)
    955c:	4798      	blx	r3
	if (netif == NULL) {
    955e:	b140      	cbz	r0, 9572 <udp_sendto+0x26>
	return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
    9560:	9000      	str	r0, [sp, #0]
    9562:	463b      	mov	r3, r7
    9564:	4622      	mov	r2, r4
    9566:	4631      	mov	r1, r6
    9568:	4628      	mov	r0, r5
    956a:	4c04      	ldr	r4, [pc, #16]	; (957c <udp_sendto+0x30>)
    956c:	47a0      	blx	r4
}
    956e:	b003      	add	sp, #12
    9570:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_RTE;
    9572:	f06f 0003 	mvn.w	r0, #3
    9576:	e7fa      	b.n	956e <udp_sendto+0x22>
    9578:	00004d95 	.word	0x00004d95
    957c:	00009441 	.word	0x00009441

00009580 <udp_send>:
{
    9580:	b510      	push	{r4, lr}
    9582:	4602      	mov	r2, r0
	return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
    9584:	8a83      	ldrh	r3, [r0, #20]
    9586:	3204      	adds	r2, #4
    9588:	4c01      	ldr	r4, [pc, #4]	; (9590 <udp_send+0x10>)
    958a:	47a0      	blx	r4
}
    958c:	bd10      	pop	{r4, pc}
    958e:	bf00      	nop
    9590:	0000954d 	.word	0x0000954d

00009594 <udp_recv>:
 * @param recv_arg additional argument to pass to the callback function
 */
void udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
	/* remember recv() callback and user data */
	pcb->recv     = recv;
    9594:	6181      	str	r1, [r0, #24]
	pcb->recv_arg = recv_arg;
    9596:	61c2      	str	r2, [r0, #28]
    9598:	4770      	bx	lr
	...

0000959c <udp_remove>:
 * UDP PCB's and the data structure is freed from memory.
 *
 * @see udp_new()
 */
void udp_remove(struct udp_pcb *pcb)
{
    959c:	b508      	push	{r3, lr}
    959e:	4601      	mov	r1, r0
	struct udp_pcb *pcb2;

	snmp_delete_udpidx_tree(pcb);
	/* pcb to be removed is first in list? */
	if (udp_pcbs == pcb) {
    95a0:	4b0a      	ldr	r3, [pc, #40]	; (95cc <udp_remove+0x30>)
    95a2:	681b      	ldr	r3, [r3, #0]
    95a4:	4283      	cmp	r3, r0
    95a6:	d107      	bne.n	95b8 <udp_remove+0x1c>
		/* make list start at 2nd pcb */
		udp_pcbs = udp_pcbs->next;
    95a8:	68da      	ldr	r2, [r3, #12]
    95aa:	4b08      	ldr	r3, [pc, #32]	; (95cc <udp_remove+0x30>)
    95ac:	601a      	str	r2, [r3, #0]
				/* remove pcb from list */
				pcb2->next = pcb->next;
			}
		}
	}
	memp_free(MEMP_UDP_PCB, pcb);
    95ae:	2000      	movs	r0, #0
    95b0:	4b07      	ldr	r3, [pc, #28]	; (95d0 <udp_remove+0x34>)
    95b2:	4798      	blx	r3
    95b4:	bd08      	pop	{r3, pc}
		for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
    95b6:	68db      	ldr	r3, [r3, #12]
    95b8:	2b00      	cmp	r3, #0
    95ba:	d0f8      	beq.n	95ae <udp_remove+0x12>
			if (pcb2->next != NULL && pcb2->next == pcb) {
    95bc:	68da      	ldr	r2, [r3, #12]
    95be:	2a00      	cmp	r2, #0
    95c0:	d0f9      	beq.n	95b6 <udp_remove+0x1a>
    95c2:	4291      	cmp	r1, r2
    95c4:	d1f7      	bne.n	95b6 <udp_remove+0x1a>
				pcb2->next = pcb->next;
    95c6:	68ca      	ldr	r2, [r1, #12]
    95c8:	60da      	str	r2, [r3, #12]
    95ca:	e7f4      	b.n	95b6 <udp_remove+0x1a>
    95cc:	2001620c 	.word	0x2001620c
    95d0:	00005d31 	.word	0x00005d31

000095d4 <udp_new>:
 * could not be allocated.
 *
 * @see udp_remove()
 */
struct udp_pcb *udp_new(void)
{
    95d4:	b510      	push	{r4, lr}
	struct udp_pcb *pcb;
	pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
    95d6:	2000      	movs	r0, #0
    95d8:	4b05      	ldr	r3, [pc, #20]	; (95f0 <udp_new+0x1c>)
    95da:	4798      	blx	r3
	/* could allocate UDP PCB? */
	if (pcb != NULL) {
    95dc:	4604      	mov	r4, r0
    95de:	b128      	cbz	r0, 95ec <udp_new+0x18>
		/* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
		 * which means checksum is generated over the whole datagram per default
		 * (recommended as default by RFC 3828). */
		/* initialize PCB to all zeroes */
		memset(pcb, 0, sizeof(struct udp_pcb));
    95e0:	2220      	movs	r2, #32
    95e2:	2100      	movs	r1, #0
    95e4:	4b03      	ldr	r3, [pc, #12]	; (95f4 <udp_new+0x20>)
    95e6:	4798      	blx	r3
		pcb->ttl = UDP_TTL;
    95e8:	23ff      	movs	r3, #255	; 0xff
    95ea:	72a3      	strb	r3, [r4, #10]
	}
	return pcb;
}
    95ec:	4620      	mov	r0, r4
    95ee:	bd10      	pop	{r4, pc}
    95f0:	00005d09 	.word	0x00005d09
    95f4:	0000cd69 	.word	0x0000cd69

000095f8 <etharp_free_entry>:

#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void etharp_free_entry(int i)
{
    95f8:	b510      	push	{r4, lr}
    95fa:	4604      	mov	r4, r0
	/* remove from SNMP ARP index tree */
	snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
	/* and empty packet queue */
	if (arp_table[i].q != NULL) {
    95fc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    9600:	0093      	lsls	r3, r2, #2
    9602:	4a09      	ldr	r2, [pc, #36]	; (9628 <etharp_free_entry+0x30>)
    9604:	58d0      	ldr	r0, [r2, r3]
    9606:	b138      	cbz	r0, 9618 <etharp_free_entry+0x20>
		/* remove all queued packets */
		LWIP_DEBUGF(
		    ETHARP_DEBUG,
		    ("etharp_free_entry: freeing entry %" U16_F ", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
		free_etharp_q(arp_table[i].q);
    9608:	4b08      	ldr	r3, [pc, #32]	; (962c <etharp_free_entry+0x34>)
    960a:	4798      	blx	r3
		arp_table[i].q = NULL;
    960c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9610:	0093      	lsls	r3, r2, #2
    9612:	2100      	movs	r1, #0
    9614:	4a04      	ldr	r2, [pc, #16]	; (9628 <etharp_free_entry+0x30>)
    9616:	50d1      	str	r1, [r2, r3]
	}
	/* recycle entry for re-use */
	arp_table[i].state = ETHARP_STATE_EMPTY;
    9618:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    961c:	00a2      	lsls	r2, r4, #2
    961e:	4b02      	ldr	r3, [pc, #8]	; (9628 <etharp_free_entry+0x30>)
    9620:	4413      	add	r3, r2
    9622:	2200      	movs	r2, #0
    9624:	749a      	strb	r2, [r3, #18]
    9626:	bd10      	pop	{r4, pc}
    9628:	200080f8 	.word	0x200080f8
    962c:	00006009 	.word	0x00006009

00009630 <etharp_find_entry>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
    9630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	s8_t empty = ARP_TABLE_SIZE;
	u8_t i = 0, age_pending = 0, age_stable = 0;
	/* oldest entry with packets on queue */
	s8_t old_queue = ARP_TABLE_SIZE;
	/* its age */
	u8_t age_queue = 0;
    9634:	f04f 0e00 	mov.w	lr, #0
	s8_t old_queue = ARP_TABLE_SIZE;
    9638:	f04f 0c0a 	mov.w	ip, #10
	u8_t i = 0, age_pending = 0, age_stable = 0;
    963c:	46f0      	mov	r8, lr
    963e:	46f3      	mov	fp, lr
	 * 4) remember the oldest pending entry with queued packets (if any)
	 * 5) search for a matching IP entry, either pending or stable
	 *    until 5 matches, or all entries are searched for.
	 */

	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    9640:	4673      	mov	r3, lr
	s8_t empty = ARP_TABLE_SIZE;
    9642:	4667      	mov	r7, ip
	s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
    9644:	46e1      	mov	r9, ip
    9646:	46e2      	mov	sl, ip
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    9648:	e003      	b.n	9652 <etharp_find_entry+0x22>
		u8_t state = arp_table[i].state;
		/* no empty entry found yet and now we do find one? */
		if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
    964a:	b96c      	cbnz	r4, 9668 <etharp_find_entry+0x38>
			LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %" U16_F "\n", (u16_t)i));
			/* remember first empty entry */
			empty = i;
    964c:	b25f      	sxtb	r7, r3
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    964e:	3301      	adds	r3, #1
    9650:	b2db      	uxtb	r3, r3
    9652:	2b09      	cmp	r3, #9
    9654:	d845      	bhi.n	96e2 <etharp_find_entry+0xb2>
		u8_t state = arp_table[i].state;
    9656:	461a      	mov	r2, r3
    9658:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    965c:	00a5      	lsls	r5, r4, #2
    965e:	4c40      	ldr	r4, [pc, #256]	; (9760 <etharp_find_entry+0x130>)
    9660:	442c      	add	r4, r5
    9662:	7ca4      	ldrb	r4, [r4, #18]
		if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
    9664:	2f0a      	cmp	r7, #10
    9666:	d0f0      	beq.n	964a <etharp_find_entry+0x1a>
		} else if (state != ETHARP_STATE_EMPTY) {
    9668:	2c00      	cmp	r4, #0
    966a:	d0f0      	beq.n	964e <etharp_find_entry+0x1e>
			LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
			            state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
			/* if given, does IP address match IP address in ARP entry? */
			if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
    966c:	b140      	cbz	r0, 9680 <etharp_find_entry+0x50>
    966e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    9672:	00ae      	lsls	r6, r5, #2
    9674:	4d3a      	ldr	r5, [pc, #232]	; (9760 <etharp_find_entry+0x130>)
    9676:	4435      	add	r5, r6
    9678:	686d      	ldr	r5, [r5, #4]
    967a:	6806      	ldr	r6, [r0, #0]
    967c:	42ae      	cmp	r6, r5
    967e:	d00f      	beq.n	96a0 <etharp_find_entry+0x70>
				            ("etharp_find_entry: found matching entry %" U16_F "\n", (u16_t)i));
				/* found exact IP address match, simply bail out */
				return i;
			}
			/* pending entry? */
			if (state == ETHARP_STATE_PENDING) {
    9680:	2c01      	cmp	r4, #1
    9682:	d010      	beq.n	96a6 <etharp_find_entry+0x76>
						old_pending = i;
						age_pending = arp_table[i].ctime;
					}
				}
				/* stable entry? */
			} else if (state >= ETHARP_STATE_STABLE) {
    9684:	2c01      	cmp	r4, #1
    9686:	d9e2      	bls.n	964e <etharp_find_entry+0x1e>
				/* don't record old_stable for static entries since they never expire */
				if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
				{
					/* remember entry with oldest stable entry in oldest, its age in maxtime */
					if (arp_table[i].ctime >= age_stable) {
    9688:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    968c:	0094      	lsls	r4, r2, #2
    968e:	4a34      	ldr	r2, [pc, #208]	; (9760 <etharp_find_entry+0x130>)
    9690:	4422      	add	r2, r4
    9692:	7cd2      	ldrb	r2, [r2, #19]
    9694:	4590      	cmp	r8, r2
    9696:	d8da      	bhi.n	964e <etharp_find_entry+0x1e>
						old_stable = i;
    9698:	fa4f f983 	sxtb.w	r9, r3
						age_stable = arp_table[i].ctime;
    969c:	4690      	mov	r8, r2
    969e:	e7d6      	b.n	964e <etharp_find_entry+0x1e>
				return i;
    96a0:	b258      	sxtb	r0, r3
    96a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (arp_table[i].q != NULL) {
    96a6:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    96aa:	00ac      	lsls	r4, r5, #2
    96ac:	4d2c      	ldr	r5, [pc, #176]	; (9760 <etharp_find_entry+0x130>)
    96ae:	592c      	ldr	r4, [r5, r4]
    96b0:	b15c      	cbz	r4, 96ca <etharp_find_entry+0x9a>
					if (arp_table[i].ctime >= age_queue) {
    96b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    96b6:	0094      	lsls	r4, r2, #2
    96b8:	462a      	mov	r2, r5
    96ba:	4422      	add	r2, r4
    96bc:	7cd2      	ldrb	r2, [r2, #19]
    96be:	4596      	cmp	lr, r2
    96c0:	d8c5      	bhi.n	964e <etharp_find_entry+0x1e>
						old_queue = i;
    96c2:	fa4f fc83 	sxtb.w	ip, r3
						age_queue = arp_table[i].ctime;
    96c6:	4696      	mov	lr, r2
    96c8:	e7c1      	b.n	964e <etharp_find_entry+0x1e>
					if (arp_table[i].ctime >= age_pending) {
    96ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    96ce:	0094      	lsls	r4, r2, #2
    96d0:	4a23      	ldr	r2, [pc, #140]	; (9760 <etharp_find_entry+0x130>)
    96d2:	4422      	add	r2, r4
    96d4:	7cd2      	ldrb	r2, [r2, #19]
    96d6:	4593      	cmp	fp, r2
    96d8:	d8b9      	bhi.n	964e <etharp_find_entry+0x1e>
						old_pending = i;
    96da:	fa4f fa83 	sxtb.w	sl, r3
						age_pending = arp_table[i].ctime;
    96de:	4693      	mov	fp, r2
    96e0:	e7b5      	b.n	964e <etharp_find_entry+0x1e>
		}
	}
	/* { we have no match } => try to create a new entry */

	/* don't create new entry, only search? */
	if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
    96e2:	f011 0f02 	tst.w	r1, #2
    96e6:	d133      	bne.n	9750 <etharp_find_entry+0x120>
    96e8:	2f0a      	cmp	r7, #10
    96ea:	d015      	beq.n	9718 <etharp_find_entry+0xe8>
    96ec:	4604      	mov	r4, r0
	 *
	 * { ETHARP_FLAG_TRY_HARD is set at this point }
	 */

	/* 1) empty entry available? */
	if (empty < ARP_TABLE_SIZE) {
    96ee:	2f09      	cmp	r7, #9
    96f0:	dc19      	bgt.n	9726 <etharp_find_entry+0xf6>
		i = empty;
    96f2:	b2ff      	uxtb	r7, r7

	LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
	LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY", arp_table[i].state == ETHARP_STATE_EMPTY);

	/* IP address given? */
	if (ipaddr != NULL) {
    96f4:	b134      	cbz	r4, 9704 <etharp_find_entry+0xd4>
		/* set IP address */
		ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
    96f6:	6821      	ldr	r1, [r4, #0]
    96f8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    96fc:	009a      	lsls	r2, r3, #2
    96fe:	4b18      	ldr	r3, [pc, #96]	; (9760 <etharp_find_entry+0x130>)
    9700:	4413      	add	r3, r2
    9702:	6059      	str	r1, [r3, #4]
	}
	arp_table[i].ctime = 0;
    9704:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    9708:	009a      	lsls	r2, r3, #2
    970a:	4b15      	ldr	r3, [pc, #84]	; (9760 <etharp_find_entry+0x130>)
    970c:	4413      	add	r3, r2
    970e:	2200      	movs	r2, #0
    9710:	74da      	strb	r2, [r3, #19]
	return (err_t)i;
    9712:	b278      	sxtb	r0, r7
    9714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    9718:	f011 0f01 	tst.w	r1, #1
    971c:	d1e6      	bne.n	96ec <etharp_find_entry+0xbc>
		return (s8_t)ERR_MEM;
    971e:	f04f 30ff 	mov.w	r0, #4294967295
    9722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (old_stable < ARP_TABLE_SIZE) {
    9726:	f1b9 0f09 	cmp.w	r9, #9
    972a:	dc05      	bgt.n	9738 <etharp_find_entry+0x108>
			i = old_stable;
    972c:	fa5f f789 	uxtb.w	r7, r9
		etharp_free_entry(i);
    9730:	4638      	mov	r0, r7
    9732:	4b0c      	ldr	r3, [pc, #48]	; (9764 <etharp_find_entry+0x134>)
    9734:	4798      	blx	r3
    9736:	e7dd      	b.n	96f4 <etharp_find_entry+0xc4>
		} else if (old_pending < ARP_TABLE_SIZE) {
    9738:	f1ba 0f09 	cmp.w	sl, #9
    973c:	dc02      	bgt.n	9744 <etharp_find_entry+0x114>
			i = old_pending;
    973e:	fa5f f78a 	uxtb.w	r7, sl
    9742:	e7f5      	b.n	9730 <etharp_find_entry+0x100>
		} else if (old_queue < ARP_TABLE_SIZE) {
    9744:	f1bc 0f09 	cmp.w	ip, #9
    9748:	dc06      	bgt.n	9758 <etharp_find_entry+0x128>
			i = old_queue;
    974a:	fa5f f78c 	uxtb.w	r7, ip
    974e:	e7ef      	b.n	9730 <etharp_find_entry+0x100>
		return (s8_t)ERR_MEM;
    9750:	f04f 30ff 	mov.w	r0, #4294967295
    9754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return (s8_t)ERR_MEM;
    9758:	f04f 30ff 	mov.w	r0, #4294967295
}
    975c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9760:	200080f8 	.word	0x200080f8
    9764:	000095f9 	.word	0x000095f9

00009768 <etharp_send_ip>:
 * @params src the source MAC address to be copied into the ethernet header
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
    9768:	b538      	push	{r3, r4, r5, lr}
	struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
    976a:	684c      	ldr	r4, [r1, #4]

	LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
	            (netif->hwaddr_len == ETHARP_HWADDR_LEN));
	ETHADDR32_COPY(&ethhdr->dest, dst);
    976c:	681d      	ldr	r5, [r3, #0]
    976e:	f8c4 5002 	str.w	r5, [r4, #2]
    9772:	889b      	ldrh	r3, [r3, #4]
    9774:	80e3      	strh	r3, [r4, #6]
	ETHADDR16_COPY(&ethhdr->src, src);
    9776:	6813      	ldr	r3, [r2, #0]
    9778:	60a3      	str	r3, [r4, #8]
    977a:	8893      	ldrh	r3, [r2, #4]
    977c:	81a3      	strh	r3, [r4, #12]
	ethhdr->type = PP_HTONS(ETHTYPE_IP);
    977e:	2308      	movs	r3, #8
    9780:	73a3      	strb	r3, [r4, #14]
    9782:	2300      	movs	r3, #0
    9784:	73e3      	strb	r3, [r4, #15]
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
	/* send the packet */
	return netif->linkoutput(netif, p);
    9786:	6983      	ldr	r3, [r0, #24]
    9788:	4798      	blx	r3
}
    978a:	bd38      	pop	{r3, r4, r5, pc}

0000978c <etharp_update_arp_entry>:
	             ethaddr->addr[2],
	             ethaddr->addr[3],
	             ethaddr->addr[4],
	             ethaddr->addr[5]));
	/* non-unicast address? */
	if (ip_addr_isany(ipaddr) || ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr)) {
    978c:	2900      	cmp	r1, #0
    978e:	d03c      	beq.n	980a <etharp_update_arp_entry+0x7e>
{
    9790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9792:	4604      	mov	r4, r0
    9794:	460e      	mov	r6, r1
	if (ip_addr_isany(ipaddr) || ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr)) {
    9796:	6808      	ldr	r0, [r1, #0]
    9798:	2800      	cmp	r0, #0
    979a:	d039      	beq.n	9810 <etharp_update_arp_entry+0x84>
    979c:	461f      	mov	r7, r3
    979e:	4615      	mov	r5, r2
    97a0:	4621      	mov	r1, r4
    97a2:	4b21      	ldr	r3, [pc, #132]	; (9828 <etharp_update_arp_entry+0x9c>)
    97a4:	4798      	blx	r3
    97a6:	2800      	cmp	r0, #0
    97a8:	d135      	bne.n	9816 <etharp_update_arp_entry+0x8a>
    97aa:	6833      	ldr	r3, [r6, #0]
    97ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    97b0:	2be0      	cmp	r3, #224	; 0xe0
    97b2:	d033      	beq.n	981c <etharp_update_arp_entry+0x90>
		LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
		            ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
		return ERR_ARG;
	}
	/* find or create ARP entry */
	i = etharp_find_entry(ipaddr, flags);
    97b4:	4639      	mov	r1, r7
    97b6:	4630      	mov	r0, r6
    97b8:	4b1c      	ldr	r3, [pc, #112]	; (982c <etharp_update_arp_entry+0xa0>)
    97ba:	4798      	blx	r3
	/* bail out if no entry could be found */
	if (i < 0) {
    97bc:	2800      	cmp	r0, #0
    97be:	db31      	blt.n	9824 <etharp_update_arp_entry+0x98>
		arp_table[i].state = ETHARP_STATE_STATIC;
	} else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
	{
		/* mark it stable */
		arp_table[i].state = ETHARP_STATE_STABLE;
    97c0:	491b      	ldr	r1, [pc, #108]	; (9830 <etharp_update_arp_entry+0xa4>)
    97c2:	2314      	movs	r3, #20
    97c4:	fb03 f300 	mul.w	r3, r3, r0
    97c8:	18ce      	adds	r6, r1, r3
    97ca:	2202      	movs	r2, #2
    97cc:	74b2      	strb	r2, [r6, #18]
	}

	/* record network interface */
	arp_table[i].netif = netif;
    97ce:	60b4      	str	r4, [r6, #8]
	snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
	            ("etharp_update_arp_entry: updating stable entry %" S16_F "\n", (s16_t)i));
	/* update address */
	ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
    97d0:	f103 0208 	add.w	r2, r3, #8
    97d4:	440a      	add	r2, r1
    97d6:	682f      	ldr	r7, [r5, #0]
    97d8:	6057      	str	r7, [r2, #4]
    97da:	88af      	ldrh	r7, [r5, #4]
    97dc:	8117      	strh	r7, [r2, #8]
	/* reset time stamp */
	arp_table[i].ctime = 0;
    97de:	2200      	movs	r2, #0
    97e0:	74f2      	strb	r2, [r6, #19]
		/* get the packet pointer */
		p = q->p;
		/* now queue entry can be freed */
		memp_free(MEMP_ARP_QUEUE, q);
#else  /* ARP_QUEUEING */
	if (arp_table[i].q != NULL) {
    97e2:	58cf      	ldr	r7, [r1, r3]
    97e4:	b1ef      	cbz	r7, 9822 <etharp_update_arp_entry+0x96>
		struct pbuf *p = arp_table[i].q;
		arp_table[i].q = NULL;
    97e6:	2314      	movs	r3, #20
    97e8:	fb03 f000 	mul.w	r0, r3, r0
    97ec:	4616      	mov	r6, r2
    97ee:	460b      	mov	r3, r1
    97f0:	501a      	str	r2, [r3, r0]
#endif /* ARP_QUEUEING */
		/* send the queued IP packet */
		etharp_send_ip(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr);
    97f2:	462b      	mov	r3, r5
    97f4:	f104 022b 	add.w	r2, r4, #43	; 0x2b
    97f8:	4639      	mov	r1, r7
    97fa:	4620      	mov	r0, r4
    97fc:	4c0d      	ldr	r4, [pc, #52]	; (9834 <etharp_update_arp_entry+0xa8>)
    97fe:	47a0      	blx	r4
		/* free the queued IP packet */
		pbuf_free(p);
    9800:	4638      	mov	r0, r7
    9802:	4b0d      	ldr	r3, [pc, #52]	; (9838 <etharp_update_arp_entry+0xac>)
    9804:	4798      	blx	r3
	}
	return ERR_OK;
    9806:	4630      	mov	r0, r6
    9808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_ARG;
    980a:	f06f 000d 	mvn.w	r0, #13
    980e:	4770      	bx	lr
    9810:	f06f 000d 	mvn.w	r0, #13
    9814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9816:	f06f 000d 	mvn.w	r0, #13
    981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    981c:	f06f 000d 	mvn.w	r0, #13
    9820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return ERR_OK;
    9822:	2000      	movs	r0, #0
}
    9824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9826:	bf00      	nop
    9828:	00005121 	.word	0x00005121
    982c:	00009631 	.word	0x00009631
    9830:	200080f8 	.word	0x200080f8
    9834:	00009769 	.word	0x00009769
    9838:	00006009 	.word	0x00006009

0000983c <etharp_raw>:
#endif /* LWIP_AUTOIP */
    err_t
    etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr, const struct eth_addr *ethdst_addr,
               const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr, const struct eth_addr *hwdst_addr,
               const ip_addr_t *ipdst_addr, const u16_t opcode)
{
    983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9840:	4606      	mov	r6, r0
    9842:	460f      	mov	r7, r1
    9844:	4690      	mov	r8, r2
    9846:	469a      	mov	sl, r3
    9848:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
#endif /* LWIP_AUTOIP */

	LWIP_ASSERT("netif != NULL", netif != NULL);

	/* allocate a pbuf for the outgoing ARP request packet */
	p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
    984c:	2200      	movs	r2, #0
    984e:	212c      	movs	r1, #44	; 0x2c
    9850:	2003      	movs	r0, #3
    9852:	4b23      	ldr	r3, [pc, #140]	; (98e0 <etharp_raw+0xa4>)
    9854:	4798      	blx	r3
	/* could allocate a pbuf for an ARP request? */
	if (p == NULL) {
    9856:	2800      	cmp	r0, #0
    9858:	d03e      	beq.n	98d8 <etharp_raw+0x9c>
    985a:	4605      	mov	r5, r0
		ETHARP_STATS_INC(etharp.memerr);
		return ERR_MEM;
	}
	LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr", (p->len >= SIZEOF_ETHARP_PACKET));

	ethhdr = (struct eth_hdr *)p->payload;
    985c:	6844      	ldr	r4, [r0, #4]
	hdr    = (struct etharp_hdr *)((u8_t *)ethhdr + SIZEOF_ETH_HDR);
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
	hdr->opcode = htons(opcode);
    985e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    9862:	4b20      	ldr	r3, [pc, #128]	; (98e4 <etharp_raw+0xa8>)
    9864:	4798      	blx	r3
    9866:	82e0      	strh	r0, [r4, #22]
	 * 'sender IP address' MUST be sent using link-layer broadcast instead of
	 * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
	ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t *)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
	/* Write the ARP MAC-Addresses */
	ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
    9868:	f8da 3000 	ldr.w	r3, [sl]
    986c:	61a3      	str	r3, [r4, #24]
    986e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    9872:	83a3      	strh	r3, [r4, #28]
	ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
    9874:	f8d9 3000 	ldr.w	r3, [r9]
    9878:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    987c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    9880:	84e3      	strh	r3, [r4, #38]	; 0x26
	/* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
	ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
	ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
    9882:	f8d8 3000 	ldr.w	r3, [r8]
    9886:	f8c4 3002 	str.w	r3, [r4, #2]
    988a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    988e:	80e3      	strh	r3, [r4, #6]
#endif /* LWIP_AUTOIP */
	ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
    9890:	683b      	ldr	r3, [r7, #0]
    9892:	60a3      	str	r3, [r4, #8]
    9894:	88bb      	ldrh	r3, [r7, #4]
    9896:	81a3      	strh	r3, [r4, #12]
	/* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
	 * structure packing. */
	IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
    9898:	9b08      	ldr	r3, [sp, #32]
    989a:	681b      	ldr	r3, [r3, #0]
    989c:	f8c4 301e 	str.w	r3, [r4, #30]
	IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
    98a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    98a2:	681b      	ldr	r3, [r3, #0]
    98a4:	62a3      	str	r3, [r4, #40]	; 0x28

	hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
    98a6:	2200      	movs	r2, #0
    98a8:	7422      	strb	r2, [r4, #16]
    98aa:	2301      	movs	r3, #1
    98ac:	7463      	strb	r3, [r4, #17]
	hdr->proto  = PP_HTONS(ETHTYPE_IP);
    98ae:	2308      	movs	r3, #8
    98b0:	74a3      	strb	r3, [r4, #18]
    98b2:	74e2      	strb	r2, [r4, #19]
	/* set hwlen and protolen */
	hdr->hwlen    = ETHARP_HWADDR_LEN;
    98b4:	2206      	movs	r2, #6
    98b6:	7522      	strb	r2, [r4, #20]
	hdr->protolen = sizeof(ip_addr_t);
    98b8:	2204      	movs	r2, #4
    98ba:	7562      	strb	r2, [r4, #21]

	ethhdr->type = PP_HTONS(ETHTYPE_ARP);
    98bc:	73a3      	strb	r3, [r4, #14]
    98be:	2306      	movs	r3, #6
    98c0:	73e3      	strb	r3, [r4, #15]
	/* send ARP query */
	result = netif->linkoutput(netif, p);
    98c2:	69b3      	ldr	r3, [r6, #24]
    98c4:	4629      	mov	r1, r5
    98c6:	4630      	mov	r0, r6
    98c8:	4798      	blx	r3
    98ca:	4604      	mov	r4, r0
	ETHARP_STATS_INC(etharp.xmit);
	/* free ARP query packet */
	pbuf_free(p);
    98cc:	4628      	mov	r0, r5
    98ce:	4b06      	ldr	r3, [pc, #24]	; (98e8 <etharp_raw+0xac>)
    98d0:	4798      	blx	r3
	p = NULL;
	/* could not allocate pbuf for ARP request */

	return result;
}
    98d2:	4620      	mov	r0, r4
    98d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ERR_MEM;
    98d8:	f04f 34ff 	mov.w	r4, #4294967295
    98dc:	e7f9      	b.n	98d2 <etharp_raw+0x96>
    98de:	bf00      	nop
    98e0:	0000606d 	.word	0x0000606d
    98e4:	00003ec1 	.word	0x00003ec1
    98e8:	00006009 	.word	0x00006009

000098ec <etharp_arp_input>:
	LWIP_ERROR("netif != NULL", (netif != NULL), return;);
    98ec:	b1c8      	cbz	r0, 9922 <etharp_arp_input+0x36>
{
    98ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98f2:	b082      	sub	sp, #8
    98f4:	4605      	mov	r5, r0
    98f6:	4616      	mov	r6, r2
    98f8:	460f      	mov	r7, r1
	if (p->len < SIZEOF_ETHARP_PACKET) {
    98fa:	8953      	ldrh	r3, [r2, #10]
    98fc:	2b2b      	cmp	r3, #43	; 0x2b
    98fe:	d911      	bls.n	9924 <etharp_arp_input+0x38>
	ethhdr = (struct eth_hdr *)p->payload;
    9900:	6854      	ldr	r4, [r2, #4]
	if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) || (hdr->hwlen != ETHARP_HWADDR_LEN)
    9902:	8a23      	ldrh	r3, [r4, #16]
    9904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9908:	d105      	bne.n	9916 <etharp_arp_input+0x2a>
    990a:	7d23      	ldrb	r3, [r4, #20]
    990c:	2b06      	cmp	r3, #6
    990e:	d102      	bne.n	9916 <etharp_arp_input+0x2a>
	    || (hdr->protolen != sizeof(ip_addr_t)) || (hdr->proto != PP_HTONS(ETHTYPE_IP))) {
    9910:	7d63      	ldrb	r3, [r4, #21]
    9912:	2b04      	cmp	r3, #4
    9914:	d00a      	beq.n	992c <etharp_arp_input+0x40>
		pbuf_free(p);
    9916:	4630      	mov	r0, r6
    9918:	4b34      	ldr	r3, [pc, #208]	; (99ec <etharp_arp_input+0x100>)
    991a:	4798      	blx	r3
}
    991c:	b002      	add	sp, #8
    991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9922:	e7fe      	b.n	9922 <etharp_arp_input+0x36>
		pbuf_free(p);
    9924:	4610      	mov	r0, r2
    9926:	4b31      	ldr	r3, [pc, #196]	; (99ec <etharp_arp_input+0x100>)
    9928:	4798      	blx	r3
		return;
    992a:	e7f7      	b.n	991c <etharp_arp_input+0x30>
	    || (hdr->protolen != sizeof(ip_addr_t)) || (hdr->proto != PP_HTONS(ETHTYPE_IP))) {
    992c:	8a63      	ldrh	r3, [r4, #18]
    992e:	2b08      	cmp	r3, #8
    9930:	d1f1      	bne.n	9916 <etharp_arp_input+0x2a>
	IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
    9932:	f8d4 301e 	ldr.w	r3, [r4, #30]
    9936:	9301      	str	r3, [sp, #4]
	IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
    9938:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
	if (ip_addr_isany(&netif->ip_addr)) {
    993c:	f110 0f04 	cmn.w	r0, #4
    9940:	d01e      	beq.n	9980 <etharp_arp_input+0x94>
    9942:	6843      	ldr	r3, [r0, #4]
    9944:	b1fb      	cbz	r3, 9986 <etharp_arp_input+0x9a>
		for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
    9946:	4599      	cmp	r9, r3
    9948:	bf14      	ite	ne
    994a:	f04f 0900 	movne.w	r9, #0
    994e:	f04f 0901 	moveq.w	r9, #1
	etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
    9952:	f104 0818 	add.w	r8, r4, #24
    9956:	f1b9 0f00 	cmp.w	r9, #0
    995a:	d017      	beq.n	998c <etharp_arp_input+0xa0>
    995c:	2301      	movs	r3, #1
    995e:	4642      	mov	r2, r8
    9960:	a901      	add	r1, sp, #4
    9962:	4628      	mov	r0, r5
    9964:	f8df a090 	ldr.w	sl, [pc, #144]	; 99f8 <etharp_arp_input+0x10c>
    9968:	47d0      	blx	sl
	switch (hdr->opcode) {
    996a:	8ae3      	ldrh	r3, [r4, #22]
    996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9970:	d00e      	beq.n	9990 <etharp_arp_input+0xa4>
    9972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9976:	d034      	beq.n	99e2 <etharp_arp_input+0xf6>
	pbuf_free(p);
    9978:	4630      	mov	r0, r6
    997a:	4b1c      	ldr	r3, [pc, #112]	; (99ec <etharp_arp_input+0x100>)
    997c:	4798      	blx	r3
    997e:	e7cd      	b.n	991c <etharp_arp_input+0x30>
		for_us = 0;
    9980:	f04f 0900 	mov.w	r9, #0
    9984:	e7e5      	b.n	9952 <etharp_arp_input+0x66>
    9986:	f04f 0900 	mov.w	r9, #0
    998a:	e7e2      	b.n	9952 <etharp_arp_input+0x66>
	etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
    998c:	2302      	movs	r3, #2
    998e:	e7e6      	b.n	995e <etharp_arp_input+0x72>
		if (for_us) {
    9990:	f1b9 0f00 	cmp.w	r9, #0
    9994:	d0f0      	beq.n	9978 <etharp_arp_input+0x8c>
			hdr->opcode = htons(ARP_REPLY);
    9996:	2002      	movs	r0, #2
    9998:	4b15      	ldr	r3, [pc, #84]	; (99f0 <etharp_arp_input+0x104>)
    999a:	4798      	blx	r3
    999c:	82e0      	strh	r0, [r4, #22]
			IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
    999e:	f8d4 301e 	ldr.w	r3, [r4, #30]
    99a2:	62a3      	str	r3, [r4, #40]	; 0x28
			IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
    99a4:	686b      	ldr	r3, [r5, #4]
    99a6:	f8c4 301e 	str.w	r3, [r4, #30]
			ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
    99aa:	f8d8 3000 	ldr.w	r3, [r8]
    99ae:	f8c4 3022 	str.w	r3, [r4, #34]	; 0x22
    99b2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    99b6:	84e3      	strh	r3, [r4, #38]	; 0x26
			ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
    99b8:	f8d8 3000 	ldr.w	r3, [r8]
    99bc:	f8c4 3002 	str.w	r3, [r4, #2]
    99c0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    99c4:	80e3      	strh	r3, [r4, #6]
			ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
    99c6:	683b      	ldr	r3, [r7, #0]
    99c8:	61a3      	str	r3, [r4, #24]
    99ca:	88bb      	ldrh	r3, [r7, #4]
    99cc:	f8a8 3004 	strh.w	r3, [r8, #4]
			ETHADDR16_COPY(&ethhdr->src, ethaddr);
    99d0:	683b      	ldr	r3, [r7, #0]
    99d2:	60a3      	str	r3, [r4, #8]
    99d4:	88bb      	ldrh	r3, [r7, #4]
    99d6:	81a3      	strh	r3, [r4, #12]
			netif->linkoutput(netif, p);
    99d8:	69ab      	ldr	r3, [r5, #24]
    99da:	4631      	mov	r1, r6
    99dc:	4628      	mov	r0, r5
    99de:	4798      	blx	r3
    99e0:	e7ca      	b.n	9978 <etharp_arp_input+0x8c>
		dhcp_arp_reply(netif, &sipaddr);
    99e2:	a901      	add	r1, sp, #4
    99e4:	4628      	mov	r0, r5
    99e6:	4b03      	ldr	r3, [pc, #12]	; (99f4 <etharp_arp_input+0x108>)
    99e8:	4798      	blx	r3
		break;
    99ea:	e7c5      	b.n	9978 <etharp_arp_input+0x8c>
    99ec:	00006009 	.word	0x00006009
    99f0:	00003ec1 	.word	0x00003ec1
    99f4:	000046c1 	.word	0x000046c1
    99f8:	0000978d 	.word	0x0000978d

000099fc <etharp_tmr>:
{
    99fc:	b510      	push	{r4, lr}
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    99fe:	2400      	movs	r4, #0
    9a00:	e005      	b.n	9a0e <etharp_tmr+0x12>
			    || ((arp_table[i].state == ETHARP_STATE_PENDING) && (arp_table[i].ctime >= ARP_MAXPENDING))) {
    9a02:	2b01      	cmp	r3, #1
    9a04:	d91c      	bls.n	9a40 <etharp_tmr+0x44>
				etharp_free_entry(i);
    9a06:	4b14      	ldr	r3, [pc, #80]	; (9a58 <etharp_tmr+0x5c>)
    9a08:	4798      	blx	r3
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    9a0a:	3401      	adds	r4, #1
    9a0c:	b2e4      	uxtb	r4, r4
    9a0e:	2c09      	cmp	r4, #9
    9a10:	d820      	bhi.n	9a54 <etharp_tmr+0x58>
		u8_t state = arp_table[i].state;
    9a12:	4620      	mov	r0, r4
    9a14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9a18:	009a      	lsls	r2, r3, #2
    9a1a:	4b10      	ldr	r3, [pc, #64]	; (9a5c <etharp_tmr+0x60>)
    9a1c:	4413      	add	r3, r2
    9a1e:	7c9b      	ldrb	r3, [r3, #18]
		if (state != ETHARP_STATE_EMPTY
    9a20:	2b00      	cmp	r3, #0
    9a22:	d0f2      	beq.n	9a0a <etharp_tmr+0xe>
			arp_table[i].ctime++;
    9a24:	4611      	mov	r1, r2
    9a26:	4a0d      	ldr	r2, [pc, #52]	; (9a5c <etharp_tmr+0x60>)
    9a28:	440a      	add	r2, r1
    9a2a:	7cd3      	ldrb	r3, [r2, #19]
    9a2c:	3301      	adds	r3, #1
    9a2e:	b2db      	uxtb	r3, r3
    9a30:	74d3      	strb	r3, [r2, #19]
			if ((arp_table[i].ctime >= ARP_MAXAGE)
    9a32:	2bef      	cmp	r3, #239	; 0xef
    9a34:	d8e7      	bhi.n	9a06 <etharp_tmr+0xa>
			    || ((arp_table[i].state == ETHARP_STATE_PENDING) && (arp_table[i].ctime >= ARP_MAXPENDING))) {
    9a36:	4a09      	ldr	r2, [pc, #36]	; (9a5c <etharp_tmr+0x60>)
    9a38:	440a      	add	r2, r1
    9a3a:	7c92      	ldrb	r2, [r2, #18]
    9a3c:	2a01      	cmp	r2, #1
    9a3e:	d0e0      	beq.n	9a02 <etharp_tmr+0x6>
			} else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
    9a40:	2a03      	cmp	r2, #3
    9a42:	d1e2      	bne.n	9a0a <etharp_tmr+0xe>
				arp_table[i].state = ETHARP_STATE_STABLE;
    9a44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9a48:	0082      	lsls	r2, r0, #2
    9a4a:	4b04      	ldr	r3, [pc, #16]	; (9a5c <etharp_tmr+0x60>)
    9a4c:	4413      	add	r3, r2
    9a4e:	2202      	movs	r2, #2
    9a50:	749a      	strb	r2, [r3, #18]
    9a52:	e7da      	b.n	9a0a <etharp_tmr+0xe>
}
    9a54:	bd10      	pop	{r4, pc}
    9a56:	bf00      	nop
    9a58:	000095f9 	.word	0x000095f9
    9a5c:	200080f8 	.word	0x200080f8

00009a60 <etharp_cleanup_netif>:
{
    9a60:	b538      	push	{r3, r4, r5, lr}
    9a62:	4605      	mov	r5, r0
	for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    9a64:	2400      	movs	r4, #0
    9a66:	e001      	b.n	9a6c <etharp_cleanup_netif+0xc>
    9a68:	3401      	adds	r4, #1
    9a6a:	b2e4      	uxtb	r4, r4
    9a6c:	2c09      	cmp	r4, #9
    9a6e:	d810      	bhi.n	9a92 <etharp_cleanup_netif+0x32>
		u8_t state = arp_table[i].state;
    9a70:	4620      	mov	r0, r4
    9a72:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9a76:	009a      	lsls	r2, r3, #2
    9a78:	4b06      	ldr	r3, [pc, #24]	; (9a94 <etharp_cleanup_netif+0x34>)
    9a7a:	4413      	add	r3, r2
    9a7c:	7c9b      	ldrb	r3, [r3, #18]
		if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d0f2      	beq.n	9a68 <etharp_cleanup_netif+0x8>
    9a82:	4b04      	ldr	r3, [pc, #16]	; (9a94 <etharp_cleanup_netif+0x34>)
    9a84:	4413      	add	r3, r2
    9a86:	689b      	ldr	r3, [r3, #8]
    9a88:	42ab      	cmp	r3, r5
    9a8a:	d1ed      	bne.n	9a68 <etharp_cleanup_netif+0x8>
			etharp_free_entry(i);
    9a8c:	4b02      	ldr	r3, [pc, #8]	; (9a98 <etharp_cleanup_netif+0x38>)
    9a8e:	4798      	blx	r3
    9a90:	e7ea      	b.n	9a68 <etharp_cleanup_netif+0x8>
}
    9a92:	bd38      	pop	{r3, r4, r5, pc}
    9a94:	200080f8 	.word	0x200080f8
    9a98:	000095f9 	.word	0x000095f9

00009a9c <etharp_request>:
 * @return ERR_OK if the request has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
    9a9c:	b530      	push	{r4, r5, lr}
    9a9e:	b085      	sub	sp, #20
    9aa0:	4603      	mov	r3, r0
	LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
	return etharp_raw(netif,
	                  (struct eth_addr *)netif->hwaddr,
    9aa2:	f100 042b 	add.w	r4, r0, #43	; 0x2b
	                  &ethbroadcast,
	                  (struct eth_addr *)netif->hwaddr,
	                  &netif->ip_addr,
    9aa6:	3304      	adds	r3, #4
	return etharp_raw(netif,
    9aa8:	4a06      	ldr	r2, [pc, #24]	; (9ac4 <etharp_request+0x28>)
    9aaa:	2501      	movs	r5, #1
    9aac:	9503      	str	r5, [sp, #12]
    9aae:	9102      	str	r1, [sp, #8]
    9ab0:	f102 0108 	add.w	r1, r2, #8
    9ab4:	9101      	str	r1, [sp, #4]
    9ab6:	9300      	str	r3, [sp, #0]
    9ab8:	4623      	mov	r3, r4
    9aba:	4621      	mov	r1, r4
    9abc:	4c02      	ldr	r4, [pc, #8]	; (9ac8 <etharp_request+0x2c>)
    9abe:	47a0      	blx	r4
	                  &ethzero,
	                  ipaddr,
	                  ARP_REQUEST);
}
    9ac0:	b005      	add	sp, #20
    9ac2:	bd30      	pop	{r4, r5, pc}
    9ac4:	0000e55c 	.word	0x0000e55c
    9ac8:	0000983d 	.word	0x0000983d

00009acc <etharp_output_to_arp_index>:
{
    9acc:	b570      	push	{r4, r5, r6, lr}
    9ace:	4605      	mov	r5, r0
    9ad0:	460e      	mov	r6, r1
    9ad2:	4614      	mov	r4, r2
	if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    9ad4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    9ad8:	009a      	lsls	r2, r3, #2
    9ada:	4b15      	ldr	r3, [pc, #84]	; (9b30 <etharp_output_to_arp_index+0x64>)
    9adc:	4413      	add	r3, r2
    9ade:	7c9b      	ldrb	r3, [r3, #18]
    9ae0:	2b02      	cmp	r3, #2
    9ae2:	d00d      	beq.n	9b00 <etharp_output_to_arp_index+0x34>
	return etharp_send_ip(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr);
    9ae4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9ae8:	00a3      	lsls	r3, r4, #2
    9aea:	3308      	adds	r3, #8
    9aec:	4a10      	ldr	r2, [pc, #64]	; (9b30 <etharp_output_to_arp_index+0x64>)
    9aee:	4413      	add	r3, r2
    9af0:	3304      	adds	r3, #4
    9af2:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    9af6:	4631      	mov	r1, r6
    9af8:	4628      	mov	r0, r5
    9afa:	4c0e      	ldr	r4, [pc, #56]	; (9b34 <etharp_output_to_arp_index+0x68>)
    9afc:	47a0      	blx	r4
}
    9afe:	bd70      	pop	{r4, r5, r6, pc}
	if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    9b00:	4b0b      	ldr	r3, [pc, #44]	; (9b30 <etharp_output_to_arp_index+0x64>)
    9b02:	4413      	add	r3, r2
    9b04:	7cdb      	ldrb	r3, [r3, #19]
    9b06:	2be3      	cmp	r3, #227	; 0xe3
    9b08:	d9ec      	bls.n	9ae4 <etharp_output_to_arp_index+0x18>
		if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
    9b0a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9b0e:	0093      	lsls	r3, r2, #2
    9b10:	4907      	ldr	r1, [pc, #28]	; (9b30 <etharp_output_to_arp_index+0x64>)
    9b12:	4419      	add	r1, r3
    9b14:	3104      	adds	r1, #4
    9b16:	4b08      	ldr	r3, [pc, #32]	; (9b38 <etharp_output_to_arp_index+0x6c>)
    9b18:	4798      	blx	r3
    9b1a:	2800      	cmp	r0, #0
    9b1c:	d1e2      	bne.n	9ae4 <etharp_output_to_arp_index+0x18>
			arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    9b1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b22:	009a      	lsls	r2, r3, #2
    9b24:	4b02      	ldr	r3, [pc, #8]	; (9b30 <etharp_output_to_arp_index+0x64>)
    9b26:	4413      	add	r3, r2
    9b28:	2203      	movs	r2, #3
    9b2a:	749a      	strb	r2, [r3, #18]
    9b2c:	e7da      	b.n	9ae4 <etharp_output_to_arp_index+0x18>
    9b2e:	bf00      	nop
    9b30:	200080f8 	.word	0x200080f8
    9b34:	00009769 	.word	0x00009769
    9b38:	00009a9d 	.word	0x00009a9d

00009b3c <etharp_query>:
{
    9b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b40:	4606      	mov	r6, r0
    9b42:	460d      	mov	r5, r1
    9b44:	4617      	mov	r7, r2
	struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
    9b46:	f100 082b 	add.w	r8, r0, #43	; 0x2b
	if (ip_addr_isbroadcast(ipaddr, netif) || ip_addr_ismulticast(ipaddr) || ip_addr_isany(ipaddr)) {
    9b4a:	4601      	mov	r1, r0
    9b4c:	6828      	ldr	r0, [r5, #0]
    9b4e:	4b48      	ldr	r3, [pc, #288]	; (9c70 <etharp_query+0x134>)
    9b50:	4798      	blx	r3
    9b52:	2800      	cmp	r0, #0
    9b54:	d175      	bne.n	9c42 <etharp_query+0x106>
    9b56:	682b      	ldr	r3, [r5, #0]
    9b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9b5c:	2ae0      	cmp	r2, #224	; 0xe0
    9b5e:	d074      	beq.n	9c4a <etharp_query+0x10e>
    9b60:	2d00      	cmp	r5, #0
    9b62:	d076      	beq.n	9c52 <etharp_query+0x116>
    9b64:	2b00      	cmp	r3, #0
    9b66:	d078      	beq.n	9c5a <etharp_query+0x11e>
	i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
    9b68:	2101      	movs	r1, #1
    9b6a:	4628      	mov	r0, r5
    9b6c:	4b41      	ldr	r3, [pc, #260]	; (9c74 <etharp_query+0x138>)
    9b6e:	4798      	blx	r3
	if (i < 0) {
    9b70:	1e04      	subs	r4, r0, #0
    9b72:	db76      	blt.n	9c62 <etharp_query+0x126>
	if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    9b74:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b78:	009a      	lsls	r2, r3, #2
    9b7a:	4b3f      	ldr	r3, [pc, #252]	; (9c78 <etharp_query+0x13c>)
    9b7c:	4413      	add	r3, r2
    9b7e:	7c9b      	ldrb	r3, [r3, #18]
    9b80:	b91b      	cbnz	r3, 9b8a <etharp_query+0x4e>
		arp_table[i].state = ETHARP_STATE_PENDING;
    9b82:	4b3d      	ldr	r3, [pc, #244]	; (9c78 <etharp_query+0x13c>)
    9b84:	4413      	add	r3, r2
    9b86:	2201      	movs	r2, #1
    9b88:	749a      	strb	r2, [r3, #18]
	if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    9b8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9b8e:	009a      	lsls	r2, r3, #2
    9b90:	4b39      	ldr	r3, [pc, #228]	; (9c78 <etharp_query+0x13c>)
    9b92:	4413      	add	r3, r2
    9b94:	7c9b      	ldrb	r3, [r3, #18]
    9b96:	2b01      	cmp	r3, #1
    9b98:	d00e      	beq.n	9bb8 <etharp_query+0x7c>
    9b9a:	b16f      	cbz	r7, 9bb8 <etharp_query+0x7c>
	err_t            result  = ERR_MEM;
    9b9c:	f04f 30ff 	mov.w	r0, #4294967295
	if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    9ba0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9ba4:	009a      	lsls	r2, r3, #2
    9ba6:	4b34      	ldr	r3, [pc, #208]	; (9c78 <etharp_query+0x13c>)
    9ba8:	4413      	add	r3, r2
    9baa:	7c9b      	ldrb	r3, [r3, #18]
    9bac:	2b01      	cmp	r3, #1
    9bae:	d80b      	bhi.n	9bc8 <etharp_query+0x8c>
	} else if (arp_table[i].state == ETHARP_STATE_PENDING) {
    9bb0:	2b01      	cmp	r3, #1
    9bb2:	d016      	beq.n	9be2 <etharp_query+0xa6>
}
    9bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		result = etharp_request(netif, ipaddr);
    9bb8:	4629      	mov	r1, r5
    9bba:	4630      	mov	r0, r6
    9bbc:	4b2f      	ldr	r3, [pc, #188]	; (9c7c <etharp_query+0x140>)
    9bbe:	4798      	blx	r3
		if (q == NULL) {
    9bc0:	2f00      	cmp	r7, #0
    9bc2:	d1ed      	bne.n	9ba0 <etharp_query+0x64>
    9bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ETHARP_SET_HINT(netif, i);
    9bc8:	4b2b      	ldr	r3, [pc, #172]	; (9c78 <etharp_query+0x13c>)
    9bca:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
		result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
    9bce:	3208      	adds	r2, #8
    9bd0:	4413      	add	r3, r2
    9bd2:	3304      	adds	r3, #4
    9bd4:	4642      	mov	r2, r8
    9bd6:	4639      	mov	r1, r7
    9bd8:	4630      	mov	r0, r6
    9bda:	4c29      	ldr	r4, [pc, #164]	; (9c80 <etharp_query+0x144>)
    9bdc:	47a0      	blx	r4
    9bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9be2:	463b      	mov	r3, r7
		while (p) {
    9be4:	b123      	cbz	r3, 9bf0 <etharp_query+0xb4>
			if (p->type != PBUF_ROM) {
    9be6:	7b1a      	ldrb	r2, [r3, #12]
    9be8:	2a01      	cmp	r2, #1
    9bea:	d113      	bne.n	9c14 <etharp_query+0xd8>
			p = p->next;
    9bec:	681b      	ldr	r3, [r3, #0]
    9bee:	e7f9      	b.n	9be4 <etharp_query+0xa8>
		int          copy_needed = 0;
    9bf0:	2200      	movs	r2, #0
		if (copy_needed) {
    9bf2:	b18a      	cbz	r2, 9c18 <etharp_query+0xdc>
			p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
    9bf4:	2200      	movs	r2, #0
    9bf6:	8919      	ldrh	r1, [r3, #8]
    9bf8:	2003      	movs	r0, #3
    9bfa:	4b22      	ldr	r3, [pc, #136]	; (9c84 <etharp_query+0x148>)
    9bfc:	4798      	blx	r3
			if (p != NULL) {
    9bfe:	4605      	mov	r5, r0
    9c00:	b170      	cbz	r0, 9c20 <etharp_query+0xe4>
				if (pbuf_copy(p, q) != ERR_OK) {
    9c02:	4639      	mov	r1, r7
    9c04:	4b20      	ldr	r3, [pc, #128]	; (9c88 <etharp_query+0x14c>)
    9c06:	4798      	blx	r3
    9c08:	b150      	cbz	r0, 9c20 <etharp_query+0xe4>
					pbuf_free(p);
    9c0a:	4628      	mov	r0, r5
    9c0c:	4b1f      	ldr	r3, [pc, #124]	; (9c8c <etharp_query+0x150>)
    9c0e:	4798      	blx	r3
					p = NULL;
    9c10:	2500      	movs	r5, #0
    9c12:	e005      	b.n	9c20 <etharp_query+0xe4>
				copy_needed = 1;
    9c14:	2201      	movs	r2, #1
    9c16:	e7ec      	b.n	9bf2 <etharp_query+0xb6>
			pbuf_ref(p);
    9c18:	4638      	mov	r0, r7
    9c1a:	4b1d      	ldr	r3, [pc, #116]	; (9c90 <etharp_query+0x154>)
    9c1c:	4798      	blx	r3
			p = q;
    9c1e:	463d      	mov	r5, r7
		if (p != NULL) {
    9c20:	b315      	cbz	r5, 9c68 <etharp_query+0x12c>
			if (arp_table[i].q != NULL) {
    9c22:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9c26:	0093      	lsls	r3, r2, #2
    9c28:	4a13      	ldr	r2, [pc, #76]	; (9c78 <etharp_query+0x13c>)
    9c2a:	58d0      	ldr	r0, [r2, r3]
    9c2c:	b108      	cbz	r0, 9c32 <etharp_query+0xf6>
				pbuf_free(arp_table[i].q);
    9c2e:	4b17      	ldr	r3, [pc, #92]	; (9c8c <etharp_query+0x150>)
    9c30:	4798      	blx	r3
			arp_table[i].q = p;
    9c32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9c36:	00a3      	lsls	r3, r4, #2
    9c38:	4a0f      	ldr	r2, [pc, #60]	; (9c78 <etharp_query+0x13c>)
    9c3a:	50d5      	str	r5, [r2, r3]
			result = ERR_OK;
    9c3c:	2000      	movs	r0, #0
    9c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_ARG;
    9c42:	f06f 000d 	mvn.w	r0, #13
    9c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c4a:	f06f 000d 	mvn.w	r0, #13
    9c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c52:	f06f 000d 	mvn.w	r0, #13
    9c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c5a:	f06f 000d 	mvn.w	r0, #13
    9c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return (err_t)i;
    9c62:	4620      	mov	r0, r4
    9c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			result = ERR_MEM;
    9c68:	f04f 30ff 	mov.w	r0, #4294967295
    9c6c:	e7a2      	b.n	9bb4 <etharp_query+0x78>
    9c6e:	bf00      	nop
    9c70:	00005121 	.word	0x00005121
    9c74:	00009631 	.word	0x00009631
    9c78:	200080f8 	.word	0x200080f8
    9c7c:	00009a9d 	.word	0x00009a9d
    9c80:	00009769 	.word	0x00009769
    9c84:	0000606d 	.word	0x0000606d
    9c88:	0000624d 	.word	0x0000624d
    9c8c:	00006009 	.word	0x00006009
    9c90:	000061ff 	.word	0x000061ff

00009c94 <etharp_output>:
{
    9c94:	b570      	push	{r4, r5, r6, lr}
    9c96:	b082      	sub	sp, #8
    9c98:	4605      	mov	r5, r0
    9c9a:	460e      	mov	r6, r1
    9c9c:	4614      	mov	r4, r2
	if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    9c9e:	2110      	movs	r1, #16
    9ca0:	4630      	mov	r0, r6
    9ca2:	4b40      	ldr	r3, [pc, #256]	; (9da4 <etharp_output+0x110>)
    9ca4:	4798      	blx	r3
    9ca6:	2800      	cmp	r0, #0
    9ca8:	d173      	bne.n	9d92 <etharp_output+0xfe>
	if (ip_addr_isbroadcast(ipaddr, netif)) {
    9caa:	4629      	mov	r1, r5
    9cac:	6820      	ldr	r0, [r4, #0]
    9cae:	4b3e      	ldr	r3, [pc, #248]	; (9da8 <etharp_output+0x114>)
    9cb0:	4798      	blx	r3
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d164      	bne.n	9d80 <etharp_output+0xec>
	} else if (ip_addr_ismulticast(ipaddr)) {
    9cb6:	6823      	ldr	r3, [r4, #0]
    9cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9cbc:	2ae0      	cmp	r2, #224	; 0xe0
    9cbe:	d021      	beq.n	9d04 <etharp_output+0x70>
		if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) && !ip_addr_islinklocal(ipaddr)) {
    9cc0:	686a      	ldr	r2, [r5, #4]
    9cc2:	68a9      	ldr	r1, [r5, #8]
    9cc4:	405a      	eors	r2, r3
    9cc6:	420a      	tst	r2, r1
    9cc8:	d00a      	beq.n	9ce0 <etharp_output+0x4c>
    9cca:	b29b      	uxth	r3, r3
    9ccc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
    9cd0:	4293      	cmp	r3, r2
    9cd2:	d005      	beq.n	9ce0 <etharp_output+0x4c>
				if (!ip_addr_isany(&netif->gw)) {
    9cd4:	f115 040c 	adds.w	r4, r5, #12
    9cd8:	d05e      	beq.n	9d98 <etharp_output+0x104>
    9cda:	68eb      	ldr	r3, [r5, #12]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d05e      	beq.n	9d9e <etharp_output+0x10a>
				if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE)
    9ce0:	4b32      	ldr	r3, [pc, #200]	; (9dac <etharp_output+0x118>)
    9ce2:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    9ce6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    9cea:	0081      	lsls	r1, r0, #2
    9cec:	440b      	add	r3, r1
    9cee:	7c9b      	ldrb	r3, [r3, #18]
    9cf0:	2b01      	cmp	r3, #1
    9cf2:	d93d      	bls.n	9d70 <etharp_output+0xdc>
				    && (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
    9cf4:	6820      	ldr	r0, [r4, #0]
    9cf6:	4b2d      	ldr	r3, [pc, #180]	; (9dac <etharp_output+0x118>)
    9cf8:	440b      	add	r3, r1
    9cfa:	685b      	ldr	r3, [r3, #4]
    9cfc:	4298      	cmp	r0, r3
    9cfe:	d017      	beq.n	9d30 <etharp_output+0x9c>
    9d00:	2200      	movs	r2, #0
    9d02:	e01c      	b.n	9d3e <etharp_output+0xaa>
		mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
    9d04:	2301      	movs	r3, #1
    9d06:	f88d 3000 	strb.w	r3, [sp]
		mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
    9d0a:	2300      	movs	r3, #0
    9d0c:	f88d 3001 	strb.w	r3, [sp, #1]
		mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
    9d10:	235e      	movs	r3, #94	; 0x5e
    9d12:	f88d 3002 	strb.w	r3, [sp, #2]
		mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
    9d16:	7863      	ldrb	r3, [r4, #1]
    9d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9d1c:	f88d 3003 	strb.w	r3, [sp, #3]
		mcastaddr.addr[4] = ip4_addr3(ipaddr);
    9d20:	78a3      	ldrb	r3, [r4, #2]
    9d22:	f88d 3004 	strb.w	r3, [sp, #4]
		mcastaddr.addr[5] = ip4_addr4(ipaddr);
    9d26:	78e3      	ldrb	r3, [r4, #3]
    9d28:	f88d 3005 	strb.w	r3, [sp, #5]
		dest = &mcastaddr;
    9d2c:	466b      	mov	r3, sp
    9d2e:	e028      	b.n	9d82 <etharp_output+0xee>
					return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
    9d30:	4631      	mov	r1, r6
    9d32:	4628      	mov	r0, r5
    9d34:	4b1e      	ldr	r3, [pc, #120]	; (9db0 <etharp_output+0x11c>)
    9d36:	4798      	blx	r3
    9d38:	e029      	b.n	9d8e <etharp_output+0xfa>
		for (i = 0; i < ARP_TABLE_SIZE; i++) {
    9d3a:	3201      	adds	r2, #1
    9d3c:	b252      	sxtb	r2, r2
    9d3e:	2a09      	cmp	r2, #9
    9d40:	dc18      	bgt.n	9d74 <etharp_output+0xe0>
			if ((arp_table[i].state >= ETHARP_STATE_STABLE) && (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
    9d42:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    9d46:	0099      	lsls	r1, r3, #2
    9d48:	4b18      	ldr	r3, [pc, #96]	; (9dac <etharp_output+0x118>)
    9d4a:	440b      	add	r3, r1
    9d4c:	7c9b      	ldrb	r3, [r3, #18]
    9d4e:	2b01      	cmp	r3, #1
    9d50:	d9f3      	bls.n	9d3a <etharp_output+0xa6>
    9d52:	6820      	ldr	r0, [r4, #0]
    9d54:	4b15      	ldr	r3, [pc, #84]	; (9dac <etharp_output+0x118>)
    9d56:	440b      	add	r3, r1
    9d58:	685b      	ldr	r3, [r3, #4]
    9d5a:	4298      	cmp	r0, r3
    9d5c:	d1ed      	bne.n	9d3a <etharp_output+0xa6>
				ETHARP_SET_HINT(netif, i);
    9d5e:	b2d2      	uxtb	r2, r2
    9d60:	4b12      	ldr	r3, [pc, #72]	; (9dac <etharp_output+0x118>)
    9d62:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				return etharp_output_to_arp_index(netif, q, i);
    9d66:	4631      	mov	r1, r6
    9d68:	4628      	mov	r0, r5
    9d6a:	4b11      	ldr	r3, [pc, #68]	; (9db0 <etharp_output+0x11c>)
    9d6c:	4798      	blx	r3
    9d6e:	e00e      	b.n	9d8e <etharp_output+0xfa>
    9d70:	2200      	movs	r2, #0
    9d72:	e7e4      	b.n	9d3e <etharp_output+0xaa>
		return etharp_query(netif, dst_addr, q);
    9d74:	4632      	mov	r2, r6
    9d76:	4621      	mov	r1, r4
    9d78:	4628      	mov	r0, r5
    9d7a:	4b0e      	ldr	r3, [pc, #56]	; (9db4 <etharp_output+0x120>)
    9d7c:	4798      	blx	r3
    9d7e:	e006      	b.n	9d8e <etharp_output+0xfa>
		dest = (struct eth_addr *)&ethbroadcast;
    9d80:	4b0d      	ldr	r3, [pc, #52]	; (9db8 <etharp_output+0x124>)
	return etharp_send_ip(netif, q, (struct eth_addr *)(netif->hwaddr), dest);
    9d82:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    9d86:	4631      	mov	r1, r6
    9d88:	4628      	mov	r0, r5
    9d8a:	4c0c      	ldr	r4, [pc, #48]	; (9dbc <etharp_output+0x128>)
    9d8c:	47a0      	blx	r4
}
    9d8e:	b002      	add	sp, #8
    9d90:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUF;
    9d92:	f06f 0001 	mvn.w	r0, #1
    9d96:	e7fa      	b.n	9d8e <etharp_output+0xfa>
					return ERR_RTE;
    9d98:	f06f 0003 	mvn.w	r0, #3
    9d9c:	e7f7      	b.n	9d8e <etharp_output+0xfa>
    9d9e:	f06f 0003 	mvn.w	r0, #3
    9da2:	e7f4      	b.n	9d8e <etharp_output+0xfa>
    9da4:	00005f8f 	.word	0x00005f8f
    9da8:	00005121 	.word	0x00005121
    9dac:	200080f8 	.word	0x200080f8
    9db0:	00009acd 	.word	0x00009acd
    9db4:	00009b3d 	.word	0x00009b3d
    9db8:	0000e55c 	.word	0x0000e55c
    9dbc:	00009769 	.word	0x00009769

00009dc0 <ethernet_input>:
 *
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t ethernet_input(struct pbuf *p, struct netif *netif)
{
    9dc0:	b570      	push	{r4, r5, r6, lr}
    9dc2:	4604      	mov	r4, r0
	u16_t           type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
	s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

	if (p->len <= SIZEOF_ETH_HDR) {
    9dc4:	8943      	ldrh	r3, [r0, #10]
    9dc6:	2b10      	cmp	r3, #16
    9dc8:	d917      	bls.n	9dfa <ethernet_input+0x3a>
    9dca:	460e      	mov	r6, r1
		ETHARP_STATS_INC(etharp.drop);
		goto free_and_return;
	}

	/* points to packet payload, which starts with an Ethernet header */
	ethhdr = (struct eth_hdr *)p->payload;
    9dcc:	6840      	ldr	r0, [r0, #4]
	             (unsigned)ethhdr->src.addr[3],
	             (unsigned)ethhdr->src.addr[4],
	             (unsigned)ethhdr->src.addr[5],
	             (unsigned)htons(ethhdr->type)));

	type = ethhdr->type;
    9dce:	89c5      	ldrh	r5, [r0, #14]

#if LWIP_ARP_FILTER_NETIF
	netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

	if (ethhdr->dest.addr[0] & 1) {
    9dd0:	7883      	ldrb	r3, [r0, #2]
    9dd2:	f013 0f01 	tst.w	r3, #1
    9dd6:	d00b      	beq.n	9df0 <ethernet_input+0x30>
		/* this might be a multicast or broadcast packet */
		if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
    9dd8:	2b01      	cmp	r3, #1
    9dda:	d013      	beq.n	9e04 <ethernet_input+0x44>
			if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) && (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
				/* mark the pbuf as link-layer multicast */
				p->flags |= PBUF_FLAG_LLMCAST;
			}
		} else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
    9ddc:	2206      	movs	r2, #6
    9dde:	491d      	ldr	r1, [pc, #116]	; (9e54 <ethernet_input+0x94>)
    9de0:	3002      	adds	r0, #2
    9de2:	4b1d      	ldr	r3, [pc, #116]	; (9e58 <ethernet_input+0x98>)
    9de4:	4798      	blx	r3
    9de6:	b918      	cbnz	r0, 9df0 <ethernet_input+0x30>
			/* mark the pbuf as link-layer broadcast */
			p->flags |= PBUF_FLAG_LLBCAST;
    9de8:	7b63      	ldrb	r3, [r4, #13]
    9dea:	f043 0308 	orr.w	r3, r3, #8
    9dee:	7363      	strb	r3, [r4, #13]
		}
	}

	switch (type) {
    9df0:	2d08      	cmp	r5, #8
    9df2:	d012      	beq.n	9e1a <ethernet_input+0x5a>
    9df4:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
    9df8:	d020      	beq.n	9e3c <ethernet_input+0x7c>
	/* This means the pbuf is freed or consumed,
	   so the caller doesn't have to free it again */
	return ERR_OK;

free_and_return:
	pbuf_free(p);
    9dfa:	4620      	mov	r0, r4
    9dfc:	4b17      	ldr	r3, [pc, #92]	; (9e5c <ethernet_input+0x9c>)
    9dfe:	4798      	blx	r3
	return ERR_OK;
}
    9e00:	2000      	movs	r0, #0
    9e02:	bd70      	pop	{r4, r5, r6, pc}
			if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) && (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
    9e04:	78c3      	ldrb	r3, [r0, #3]
    9e06:	2b00      	cmp	r3, #0
    9e08:	d1f2      	bne.n	9df0 <ethernet_input+0x30>
    9e0a:	7903      	ldrb	r3, [r0, #4]
    9e0c:	2b5e      	cmp	r3, #94	; 0x5e
    9e0e:	d1ef      	bne.n	9df0 <ethernet_input+0x30>
				p->flags |= PBUF_FLAG_LLMCAST;
    9e10:	7b63      	ldrb	r3, [r4, #13]
    9e12:	f043 0310 	orr.w	r3, r3, #16
    9e16:	7363      	strb	r3, [r4, #13]
    9e18:	e7ea      	b.n	9df0 <ethernet_input+0x30>
		if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    9e1a:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    9e1e:	f013 0f20 	tst.w	r3, #32
    9e22:	d0ea      	beq.n	9dfa <ethernet_input+0x3a>
		if (pbuf_header(p, -ip_hdr_offset)) {
    9e24:	f06f 010f 	mvn.w	r1, #15
    9e28:	4620      	mov	r0, r4
    9e2a:	4b0d      	ldr	r3, [pc, #52]	; (9e60 <ethernet_input+0xa0>)
    9e2c:	4798      	blx	r3
    9e2e:	2800      	cmp	r0, #0
    9e30:	d1e3      	bne.n	9dfa <ethernet_input+0x3a>
			ip_input(p, netif);
    9e32:	4631      	mov	r1, r6
    9e34:	4620      	mov	r0, r4
    9e36:	4b0b      	ldr	r3, [pc, #44]	; (9e64 <ethernet_input+0xa4>)
    9e38:	4798      	blx	r3
		break;
    9e3a:	e7e1      	b.n	9e00 <ethernet_input+0x40>
		if (!(netif->flags & NETIF_FLAG_ETHARP)) {
    9e3c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    9e40:	f013 0f20 	tst.w	r3, #32
    9e44:	d0d9      	beq.n	9dfa <ethernet_input+0x3a>
		etharp_arp_input(netif, (struct eth_addr *)(netif->hwaddr), p);
    9e46:	4622      	mov	r2, r4
    9e48:	f106 012b 	add.w	r1, r6, #43	; 0x2b
    9e4c:	4630      	mov	r0, r6
    9e4e:	4b06      	ldr	r3, [pc, #24]	; (9e68 <ethernet_input+0xa8>)
    9e50:	4798      	blx	r3
		break;
    9e52:	e7d5      	b.n	9e00 <ethernet_input+0x40>
    9e54:	0000e55c 	.word	0x0000e55c
    9e58:	0000cd35 	.word	0x0000cd35
    9e5c:	00006009 	.word	0x00006009
    9e60:	00005f8f 	.word	0x00005f8f
    9e64:	00004e05 	.word	0x00004e05
    9e68:	000098ed 	.word	0x000098ed

00009e6c <count_encoderA>:
	}
}


void count_encoderA (void)
{	
    9e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e6e:	b085      	sub	sp, #20
	ext_irq_disable(encoder_A);
    9e70:	2060      	movs	r0, #96	; 0x60
    9e72:	4c29      	ldr	r4, [pc, #164]	; (9f18 <count_encoderA+0xac>)
    9e74:	47a0      	blx	r4
	ext_irq_disable(encoder_B);
    9e76:	2027      	movs	r0, #39	; 0x27
    9e78:	47a0      	blx	r4
	
	BaseType_t task_woken =pdFALSE;
    9e7a:	2300      	movs	r3, #0
    9e7c:	9303      	str	r3, [sp, #12]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    9e7e:	a802      	add	r0, sp, #8
    9e80:	4c26      	ldr	r4, [pc, #152]	; (9f1c <count_encoderA+0xb0>)
    9e82:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9e84:	4e26      	ldr	r6, [pc, #152]	; (9f20 <count_encoderA+0xb4>)
    9e86:	f8d6 2180 	ldr.w	r2, [r6, #384]	; 0x180
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9e8a:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9e8e:	f8d6 5190 	ldr.w	r5, [r6, #400]	; 0x190

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9e92:	405d      	eors	r5, r3
    9e94:	4015      	ands	r5, r2
    9e96:	405d      	eors	r5, r3

	CRITICAL_SECTION_LEAVE();
    9e98:	a802      	add	r0, sp, #8
    9e9a:	4f22      	ldr	r7, [pc, #136]	; (9f24 <count_encoderA+0xb8>)
    9e9c:	47b8      	blx	r7
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    9e9e:	f005 0501 	and.w	r5, r5, #1
	CRITICAL_SECTION_ENTER();
    9ea2:	a801      	add	r0, sp, #4
    9ea4:	47a0      	blx	r4
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9ea6:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9eaa:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9eae:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9eb2:	4063      	eors	r3, r4
    9eb4:	4013      	ands	r3, r2
    9eb6:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    9eb8:	a801      	add	r0, sp, #4
    9eba:	47b8      	blx	r7
    9ebc:	f004 0480 	and.w	r4, r4, #128	; 0x80
	
	int encoderA_state = gpio_get_pin_level(encoder_A);
	int encoderB_state = gpio_get_pin_level(encoder_B);
	
	if (encoderA_state == 1 && encoderB_state == 1 && aFlag == 1){
    9ec0:	b125      	cbz	r5, 9ecc <count_encoderA+0x60>
    9ec2:	b11c      	cbz	r4, 9ecc <count_encoderA+0x60>
    9ec4:	4a18      	ldr	r2, [pc, #96]	; (9f28 <count_encoderA+0xbc>)
    9ec6:	6812      	ldr	r2, [r2, #0]
    9ec8:	2a01      	cmp	r2, #1
    9eca:	d012      	beq.n	9ef2 <count_encoderA+0x86>
		steering_encoder_vars.aFlag = 0;
		steering_encoder_vars.bFlag = 0;
		
		//printf("%d ", steering_encoder_vars.counter);
	}
	else if(encoderB_state == 1){
    9ecc:	b114      	cbz	r4, 9ed4 <count_encoderA+0x68>
		bFlag = 1;
    9ece:	2201      	movs	r2, #1
    9ed0:	4b15      	ldr	r3, [pc, #84]	; (9f28 <count_encoderA+0xbc>)
    9ed2:	605a      	str	r2, [r3, #4]
	}

	
	xSemaphoreGiveFromISR(ctx.sem, &task_woken);
    9ed4:	a903      	add	r1, sp, #12
    9ed6:	4b14      	ldr	r3, [pc, #80]	; (9f28 <count_encoderA+0xbc>)
    9ed8:	6898      	ldr	r0, [r3, #8]
    9eda:	4b14      	ldr	r3, [pc, #80]	; (9f2c <count_encoderA+0xc0>)
    9edc:	4798      	blx	r3
	
	
	if (task_woken == pdTRUE)
    9ede:	9b03      	ldr	r3, [sp, #12]
    9ee0:	2b01      	cmp	r3, #1
    9ee2:	d00e      	beq.n	9f02 <count_encoderA+0x96>
	portYIELD_FROM_ISR( task_woken);
	ext_irq_enable(encoder_A);
    9ee4:	2060      	movs	r0, #96	; 0x60
    9ee6:	4c12      	ldr	r4, [pc, #72]	; (9f30 <count_encoderA+0xc4>)
    9ee8:	47a0      	blx	r4
	ext_irq_enable(encoder_B);
    9eea:	2027      	movs	r0, #39	; 0x27
    9eec:	47a0      	blx	r4

}
    9eee:	b005      	add	sp, #20
    9ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		--steering_encoder_vars.counter;
    9ef2:	4b10      	ldr	r3, [pc, #64]	; (9f34 <count_encoderA+0xc8>)
    9ef4:	689a      	ldr	r2, [r3, #8]
    9ef6:	3a01      	subs	r2, #1
    9ef8:	609a      	str	r2, [r3, #8]
		steering_encoder_vars.aFlag = 0;
    9efa:	2200      	movs	r2, #0
    9efc:	601a      	str	r2, [r3, #0]
		steering_encoder_vars.bFlag = 0;
    9efe:	605a      	str	r2, [r3, #4]
    9f00:	e7e8      	b.n	9ed4 <count_encoderA+0x68>
	portYIELD_FROM_ISR( task_woken);
    9f02:	2b00      	cmp	r3, #0
    9f04:	d0ee      	beq.n	9ee4 <count_encoderA+0x78>
    9f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9f0a:	4b0b      	ldr	r3, [pc, #44]	; (9f38 <count_encoderA+0xcc>)
    9f0c:	601a      	str	r2, [r3, #0]
    9f0e:	f3bf 8f4f 	dsb	sy
    9f12:	f3bf 8f6f 	isb	sy
    9f16:	e7e5      	b.n	9ee4 <count_encoderA+0x78>
    9f18:	000010f5 	.word	0x000010f5
    9f1c:	00000f81 	.word	0x00000f81
    9f20:	41008000 	.word	0x41008000
    9f24:	00000f8f 	.word	0x00000f8f
    9f28:	200081c8 	.word	0x200081c8
    9f2c:	0000b029 	.word	0x0000b029
    9f30:	000010e5 	.word	0x000010e5
    9f34:	20016210 	.word	0x20016210
    9f38:	e000ed04 	.word	0xe000ed04

00009f3c <count_encoderB>:

void count_encoderB (void)
{	
    9f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f3e:	b085      	sub	sp, #20
	BaseType_t task_woken = pdFALSE;
    9f40:	2300      	movs	r3, #0
    9f42:	9303      	str	r3, [sp, #12]
	
	ext_irq_disable(encoder_A);
    9f44:	2060      	movs	r0, #96	; 0x60
    9f46:	4c2a      	ldr	r4, [pc, #168]	; (9ff0 <count_encoderB+0xb4>)
    9f48:	47a0      	blx	r4
	ext_irq_disable(encoder_B);
    9f4a:	2027      	movs	r0, #39	; 0x27
    9f4c:	47a0      	blx	r4
	CRITICAL_SECTION_ENTER();
    9f4e:	a802      	add	r0, sp, #8
    9f50:	4d28      	ldr	r5, [pc, #160]	; (9ff4 <count_encoderB+0xb8>)
    9f52:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9f54:	4e28      	ldr	r6, [pc, #160]	; (9ff8 <count_encoderB+0xbc>)
    9f56:	f8d6 2180 	ldr.w	r2, [r6, #384]	; 0x180
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9f5a:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9f5e:	f8d6 4190 	ldr.w	r4, [r6, #400]	; 0x190
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9f62:	405c      	eors	r4, r3
    9f64:	4014      	ands	r4, r2
    9f66:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    9f68:	a802      	add	r0, sp, #8
    9f6a:	4f24      	ldr	r7, [pc, #144]	; (9ffc <count_encoderB+0xc0>)
    9f6c:	47b8      	blx	r7
    9f6e:	f004 0401 	and.w	r4, r4, #1
	CRITICAL_SECTION_ENTER();
    9f72:	a801      	add	r0, sp, #4
    9f74:	47a8      	blx	r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9f76:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9f7a:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9f7e:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9f82:	405d      	eors	r5, r3
    9f84:	4015      	ands	r5, r2
    9f86:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    9f88:	a801      	add	r0, sp, #4
    9f8a:	47b8      	blx	r7
	
	int encoderA_state = gpio_get_pin_level(encoder_A);
	int encoderB_state = gpio_get_pin_level(encoder_B);
	
	if (encoderA_state == 1 && encoderB_state == 1 && bFlag == 1){
    9f8c:	b134      	cbz	r4, 9f9c <count_encoderB+0x60>
    9f8e:	f005 0580 	and.w	r5, r5, #128	; 0x80
    9f92:	b11d      	cbz	r5, 9f9c <count_encoderB+0x60>
    9f94:	4b1a      	ldr	r3, [pc, #104]	; (a000 <count_encoderB+0xc4>)
    9f96:	685b      	ldr	r3, [r3, #4]
    9f98:	2b01      	cmp	r3, #1
    9f9a:	d012      	beq.n	9fc2 <count_encoderB+0x86>
		steering_encoder_vars.aFlag=0;
		steering_encoder_vars.bFlag=0;
		printf("%d ", steering_encoder_vars.counter);
		
	}
	else if(encoderA_state == 1){
    9f9c:	b114      	cbz	r4, 9fa4 <count_encoderB+0x68>
		aFlag = 1;
    9f9e:	2201      	movs	r2, #1
    9fa0:	4b17      	ldr	r3, [pc, #92]	; (a000 <count_encoderB+0xc4>)
    9fa2:	601a      	str	r2, [r3, #0]
	}
	
	
	xSemaphoreGiveFromISR(ctx.sem, &task_woken);
    9fa4:	a903      	add	r1, sp, #12
    9fa6:	4b16      	ldr	r3, [pc, #88]	; (a000 <count_encoderB+0xc4>)
    9fa8:	6898      	ldr	r0, [r3, #8]
    9faa:	4b16      	ldr	r3, [pc, #88]	; (a004 <count_encoderB+0xc8>)
    9fac:	4798      	blx	r3
	
	//portEND_SWITCHING_ISR(task_woken);
	if (task_woken == pdTRUE)
    9fae:	9b03      	ldr	r3, [sp, #12]
    9fb0:	2b01      	cmp	r3, #1
    9fb2:	d012      	beq.n	9fda <count_encoderB+0x9e>
	portYIELD_FROM_ISR(task_woken);
	
	ext_irq_enable(encoder_A);
    9fb4:	2060      	movs	r0, #96	; 0x60
    9fb6:	4c14      	ldr	r4, [pc, #80]	; (a008 <count_encoderB+0xcc>)
    9fb8:	47a0      	blx	r4
	ext_irq_enable(encoder_B);
    9fba:	2027      	movs	r0, #39	; 0x27
    9fbc:	47a0      	blx	r4
	
}
    9fbe:	b005      	add	sp, #20
    9fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		++steering_encoder_vars.counter;
    9fc2:	4b12      	ldr	r3, [pc, #72]	; (a00c <count_encoderB+0xd0>)
    9fc4:	689a      	ldr	r2, [r3, #8]
    9fc6:	3201      	adds	r2, #1
    9fc8:	609a      	str	r2, [r3, #8]
		steering_encoder_vars.aFlag=0;
    9fca:	2200      	movs	r2, #0
    9fcc:	601a      	str	r2, [r3, #0]
		steering_encoder_vars.bFlag=0;
    9fce:	605a      	str	r2, [r3, #4]
		printf("%d ", steering_encoder_vars.counter);
    9fd0:	6899      	ldr	r1, [r3, #8]
    9fd2:	480f      	ldr	r0, [pc, #60]	; (a010 <count_encoderB+0xd4>)
    9fd4:	4b0f      	ldr	r3, [pc, #60]	; (a014 <count_encoderB+0xd8>)
    9fd6:	4798      	blx	r3
    9fd8:	e7e4      	b.n	9fa4 <count_encoderB+0x68>
	portYIELD_FROM_ISR(task_woken);
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d0ea      	beq.n	9fb4 <count_encoderB+0x78>
    9fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9fe2:	4b0d      	ldr	r3, [pc, #52]	; (a018 <count_encoderB+0xdc>)
    9fe4:	601a      	str	r2, [r3, #0]
    9fe6:	f3bf 8f4f 	dsb	sy
    9fea:	f3bf 8f6f 	isb	sy
    9fee:	e7e1      	b.n	9fb4 <count_encoderB+0x78>
    9ff0:	000010f5 	.word	0x000010f5
    9ff4:	00000f81 	.word	0x00000f81
    9ff8:	41008000 	.word	0x41008000
    9ffc:	00000f8f 	.word	0x00000f8f
    a000:	200081c8 	.word	0x200081c8
    a004:	0000b029 	.word	0x0000b029
    a008:	000010e5 	.word	0x000010e5
    a00c:	20016210 	.word	0x20016210
    a010:	0000e56c 	.word	0x0000e56c
    a014:	0000d479 	.word	0x0000d479
    a018:	e000ed04 	.word	0xe000ed04

0000a01c <print_ipaddress>:
{
    a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("IP_ADDR    : %s\r\n",
    a01e:	4f0d      	ldr	r7, [pc, #52]	; (a054 <print_ipaddress+0x38>)
    a020:	4e0d      	ldr	r6, [pc, #52]	; (a058 <print_ipaddress+0x3c>)
    a022:	2210      	movs	r2, #16
    a024:	4639      	mov	r1, r7
    a026:	4630      	mov	r0, r6
    a028:	4d0c      	ldr	r5, [pc, #48]	; (a05c <print_ipaddress+0x40>)
    a02a:	47a8      	blx	r5
    a02c:	4601      	mov	r1, r0
    a02e:	480c      	ldr	r0, [pc, #48]	; (a060 <print_ipaddress+0x44>)
    a030:	4c0c      	ldr	r4, [pc, #48]	; (a064 <print_ipaddress+0x48>)
    a032:	47a0      	blx	r4
	printf("NET_MASK   : %s\r\n",
    a034:	2210      	movs	r2, #16
    a036:	4639      	mov	r1, r7
    a038:	1d30      	adds	r0, r6, #4
    a03a:	47a8      	blx	r5
    a03c:	4601      	mov	r1, r0
    a03e:	480a      	ldr	r0, [pc, #40]	; (a068 <print_ipaddress+0x4c>)
    a040:	47a0      	blx	r4
	printf("GATEWAY_IP : %s\r\n", ipaddr_ntoa_r((const ip_addr_t *)&(TCPIP_STACK_INTERFACE_0_desc.gw), tmp_buff, 16));
    a042:	2210      	movs	r2, #16
    a044:	4639      	mov	r1, r7
    a046:	f106 0008 	add.w	r0, r6, #8
    a04a:	47a8      	blx	r5
    a04c:	4601      	mov	r1, r0
    a04e:	4807      	ldr	r0, [pc, #28]	; (a06c <print_ipaddress+0x50>)
    a050:	47a0      	blx	r4
    a052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a054:	20008358 	.word	0x20008358
    a058:	20012978 	.word	0x20012978
    a05c:	00005295 	.word	0x00005295
    a060:	0000e570 	.word	0x0000e570
    a064:	0000d479 	.word	0x0000d479
    a068:	0000e584 	.word	0x0000e584
    a06c:	0000e598 	.word	0x0000e598

0000a070 <GetCurrentTime>:
{
    a070:	b508      	push	{r3, lr}
	return xTaskGetTickCount();
    a072:	4b01      	ldr	r3, [pc, #4]	; (a078 <GetCurrentTime+0x8>)
    a074:	4798      	blx	r3
}
    a076:	bd08      	pop	{r3, pc}
    a078:	0000b6ad 	.word	0x0000b6ad

0000a07c <GetPIDTime>:
{
    a07c:	b508      	push	{r3, lr}
	return (unsigned long) GetCurrentTime();
    a07e:	4b01      	ldr	r3, [pc, #4]	; (a084 <GetPIDTime+0x8>)
    a080:	4798      	blx	r3
}
    a082:	bd08      	pop	{r3, pc}
    a084:	0000a071 	.word	0x0000a071

0000a088 <ConvertAngleToPIDInt>:
{
    a088:	b510      	push	{r4, lr}
	return (int)(angle * 1000.0);
    a08a:	4b04      	ldr	r3, [pc, #16]	; (a09c <ConvertAngleToPIDInt+0x14>)
    a08c:	4798      	blx	r3
    a08e:	2200      	movs	r2, #0
    a090:	4b03      	ldr	r3, [pc, #12]	; (a0a0 <ConvertAngleToPIDInt+0x18>)
    a092:	4c04      	ldr	r4, [pc, #16]	; (a0a4 <ConvertAngleToPIDInt+0x1c>)
    a094:	47a0      	blx	r4
    a096:	4b04      	ldr	r3, [pc, #16]	; (a0a8 <ConvertAngleToPIDInt+0x20>)
    a098:	4798      	blx	r3
}
    a09a:	bd10      	pop	{r4, pc}
    a09c:	0000c6b1 	.word	0x0000c6b1
    a0a0:	408f4000 	.word	0x408f4000
    a0a4:	0000c759 	.word	0x0000c759
    a0a8:	0000cb7d 	.word	0x0000cb7d

0000a0ac <SteeringPIDSource>:
{
    a0ac:	b508      	push	{r3, lr}
	return ConvertAngleToPIDInt(ctx.steering_angle_commanded);
    a0ae:	4b02      	ldr	r3, [pc, #8]	; (a0b8 <SteeringPIDSource+0xc>)
    a0b0:	6998      	ldr	r0, [r3, #24]
    a0b2:	4b02      	ldr	r3, [pc, #8]	; (a0bc <SteeringPIDSource+0x10>)
    a0b4:	4798      	blx	r3
}
    a0b6:	bd08      	pop	{r3, pc}
    a0b8:	200081c8 	.word	0x200081c8
    a0bc:	0000a089 	.word	0x0000a089

0000a0c0 <ConvertSpeedToPIDInt>:
{
    a0c0:	b510      	push	{r4, lr}
	return (int)(speed * 1000.0);
    a0c2:	4b04      	ldr	r3, [pc, #16]	; (a0d4 <ConvertSpeedToPIDInt+0x14>)
    a0c4:	4798      	blx	r3
    a0c6:	2200      	movs	r2, #0
    a0c8:	4b03      	ldr	r3, [pc, #12]	; (a0d8 <ConvertSpeedToPIDInt+0x18>)
    a0ca:	4c04      	ldr	r4, [pc, #16]	; (a0dc <ConvertSpeedToPIDInt+0x1c>)
    a0cc:	47a0      	blx	r4
    a0ce:	4b04      	ldr	r3, [pc, #16]	; (a0e0 <ConvertSpeedToPIDInt+0x20>)
    a0d0:	4798      	blx	r3
}
    a0d2:	bd10      	pop	{r4, pc}
    a0d4:	0000c6b1 	.word	0x0000c6b1
    a0d8:	408f4000 	.word	0x408f4000
    a0dc:	0000c759 	.word	0x0000c759
    a0e0:	0000cb7d 	.word	0x0000cb7d

0000a0e4 <SpeedPIDSource>:
{
    a0e4:	b508      	push	{r3, lr}
	return ConvertSpeedToPIDInt(ctx.vehicle_speed_commanded);
    a0e6:	4b02      	ldr	r3, [pc, #8]	; (a0f0 <SpeedPIDSource+0xc>)
    a0e8:	6958      	ldr	r0, [r3, #20]
    a0ea:	4b02      	ldr	r3, [pc, #8]	; (a0f4 <SpeedPIDSource+0x10>)
    a0ec:	4798      	blx	r3
}
    a0ee:	bd08      	pop	{r3, pc}
    a0f0:	200081c8 	.word	0x200081c8
    a0f4:	0000a0c1 	.word	0x0000a0c1

0000a0f8 <ConvertPIDIntToDutyCycle>:
	return ((float)PID_int) / 1000.0;
    a0f8:	ee07 0a90 	vmov	s15, r0
    a0fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
}
    a100:	eddf 7a03 	vldr	s15, [pc, #12]	; a110 <ConvertPIDIntToDutyCycle+0x18>
    a104:	eec7 6a27 	vdiv.f32	s13, s14, s15
    a108:	ee16 0a90 	vmov	r0, s13
    a10c:	4770      	bx	lr
    a10e:	bf00      	nop
    a110:	447a0000 	.word	0x447a0000

0000a114 <SteeringPIDOutput>:
{
    a114:	b508      	push	{r3, lr}
	ctx.steering_torque_pid_out = ConvertPIDIntToDutyCycle(pid_output);
    a116:	4b03      	ldr	r3, [pc, #12]	; (a124 <SteeringPIDOutput+0x10>)
    a118:	4798      	blx	r3
    a11a:	4b03      	ldr	r3, [pc, #12]	; (a128 <SteeringPIDOutput+0x14>)
    a11c:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168
    a120:	bd08      	pop	{r3, pc}
    a122:	bf00      	nop
    a124:	0000a0f9 	.word	0x0000a0f9
    a128:	200081c8 	.word	0x200081c8

0000a12c <SpeedPIDOutput>:
{
    a12c:	b508      	push	{r3, lr}
	ctx.acceleration_pid_out = ConvertPIDIntToDutyCycle(pid_output);
    a12e:	4b03      	ldr	r3, [pc, #12]	; (a13c <SpeedPIDOutput+0x10>)
    a130:	4798      	blx	r3
    a132:	4b03      	ldr	r3, [pc, #12]	; (a140 <SpeedPIDOutput+0x14>)
    a134:	f8c3 016c 	str.w	r0, [r3, #364]	; 0x16c
    a138:	bd08      	pop	{r3, pc}
    a13a:	bf00      	nop
    a13c:	0000a0f9 	.word	0x0000a0f9
    a140:	200081c8 	.word	0x200081c8

0000a144 <ConvertDutyCycleToPIDInt>:
{
    a144:	b510      	push	{r4, lr}
	return ((int)duty_cycle) * 1000.0;
    a146:	ee07 0a90 	vmov	s15, r0
    a14a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    a14e:	ee17 0a90 	vmov	r0, s15
    a152:	4b04      	ldr	r3, [pc, #16]	; (a164 <ConvertDutyCycleToPIDInt+0x20>)
    a154:	4798      	blx	r3
    a156:	2200      	movs	r2, #0
    a158:	4b03      	ldr	r3, [pc, #12]	; (a168 <ConvertDutyCycleToPIDInt+0x24>)
    a15a:	4c04      	ldr	r4, [pc, #16]	; (a16c <ConvertDutyCycleToPIDInt+0x28>)
    a15c:	47a0      	blx	r4
    a15e:	4b04      	ldr	r3, [pc, #16]	; (a170 <ConvertDutyCycleToPIDInt+0x2c>)
    a160:	4798      	blx	r3
}
    a162:	bd10      	pop	{r4, pc}
    a164:	0000c68d 	.word	0x0000c68d
    a168:	408f4000 	.word	0x408f4000
    a16c:	0000c759 	.word	0x0000c759
    a170:	0000cb7d 	.word	0x0000cb7d

0000a174 <TeleOperation>:
{
    a174:	b510      	push	{r4, lr}
	if(ctx->tele_operation_enabled && ctx->current_time - ctx->last_eth_input_rx_time < 100)
    a176:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    a17a:	b12b      	cbz	r3, a188 <TeleOperation+0x14>
    a17c:	4604      	mov	r4, r0
    a17e:	6883      	ldr	r3, [r0, #8]
    a180:	6842      	ldr	r2, [r0, #4]
    a182:	1a9b      	subs	r3, r3, r2
    a184:	2b63      	cmp	r3, #99	; 0x63
    a186:	d906      	bls.n	a196 <TeleOperation+0x22>
		SetAcceleration(0.0);
    a188:	2000      	movs	r0, #0
    a18a:	4b12      	ldr	r3, [pc, #72]	; (a1d4 <TeleOperation+0x60>)
    a18c:	4798      	blx	r3
		SetSafetyLight1On(0);
    a18e:	2000      	movs	r0, #0
    a190:	4b11      	ldr	r3, [pc, #68]	; (a1d8 <TeleOperation+0x64>)
    a192:	4798      	blx	r3
    a194:	bd10      	pop	{r4, pc}
		SetSafetyLight1On(1);
    a196:	2001      	movs	r0, #1
    a198:	4b0f      	ldr	r3, [pc, #60]	; (a1d8 <TeleOperation+0x64>)
    a19a:	4798      	blx	r3
		SetAcceleration(ctx->vehicle_speed_commanded);
    a19c:	68e0      	ldr	r0, [r4, #12]
    a19e:	4b0d      	ldr	r3, [pc, #52]	; (a1d4 <TeleOperation+0x60>)
    a1a0:	4798      	blx	r3
		if(ctx->steering_angle_commanded > 0)
    a1a2:	edd4 7a04 	vldr	s15, [r4, #16]
    a1a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1ae:	dd07      	ble.n	a1c0 <TeleOperation+0x4c>
			SetSteeringTorque(ctx->steering_angle_commanded);
    a1b0:	ee17 0a90 	vmov	r0, s15
    a1b4:	4b09      	ldr	r3, [pc, #36]	; (a1dc <TeleOperation+0x68>)
    a1b6:	4798      	blx	r3
			SetSteerDirection(0);
    a1b8:	2000      	movs	r0, #0
    a1ba:	4b09      	ldr	r3, [pc, #36]	; (a1e0 <TeleOperation+0x6c>)
    a1bc:	4798      	blx	r3
    a1be:	bd10      	pop	{r4, pc}
			SetSteeringTorque(ctx->steering_angle_commanded * -1);
    a1c0:	eef1 7a67 	vneg.f32	s15, s15
    a1c4:	ee17 0a90 	vmov	r0, s15
    a1c8:	4b04      	ldr	r3, [pc, #16]	; (a1dc <TeleOperation+0x68>)
    a1ca:	4798      	blx	r3
			SetSteerDirection(1);
    a1cc:	2001      	movs	r0, #1
    a1ce:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <TeleOperation+0x6c>)
    a1d0:	4798      	blx	r3
    a1d2:	bd10      	pop	{r4, pc}
    a1d4:	0000045d 	.word	0x0000045d
    a1d8:	0000036d 	.word	0x0000036d
    a1dc:	000003a1 	.word	0x000003a1
    a1e0:	00000389 	.word	0x00000389

0000a1e4 <main_task>:
{
    a1e4:	b538      	push	{r3, r4, r5, lr}
    a1e6:	4604      	mov	r4, r0
    a1e8:	e00e      	b.n	a208 <main_task+0x24>
		context->current_time = GetCurrentTime();
    a1ea:	4b0d      	ldr	r3, [pc, #52]	; (a220 <main_task+0x3c>)
    a1ec:	4798      	blx	r3
    a1ee:	60a0      	str	r0, [r4, #8]
		TeleOperation(context);
    a1f0:	4620      	mov	r0, r4
    a1f2:	4b0c      	ldr	r3, [pc, #48]	; (a224 <main_task+0x40>)
    a1f4:	4798      	blx	r3
		xSemaphoreGive(context->sem);
    a1f6:	2300      	movs	r3, #0
    a1f8:	461a      	mov	r2, r3
    a1fa:	4619      	mov	r1, r3
    a1fc:	6820      	ldr	r0, [r4, #0]
    a1fe:	4d0a      	ldr	r5, [pc, #40]	; (a228 <main_task+0x44>)
    a200:	47a8      	blx	r5
		vTaskDelay(MAIN_TASK_LOOP_TIME);
    a202:	2001      	movs	r0, #1
    a204:	4b09      	ldr	r3, [pc, #36]	; (a22c <main_task+0x48>)
    a206:	4798      	blx	r3
		if(xSemaphoreTake(context->sem, 50) != pdTRUE)
    a208:	2300      	movs	r3, #0
    a20a:	2232      	movs	r2, #50	; 0x32
    a20c:	4619      	mov	r1, r3
    a20e:	6820      	ldr	r0, [r4, #0]
    a210:	4d07      	ldr	r5, [pc, #28]	; (a230 <main_task+0x4c>)
    a212:	47a8      	blx	r5
    a214:	2801      	cmp	r0, #1
    a216:	d0e8      	beq.n	a1ea <main_task+0x6>
			vTaskDelay(1);
    a218:	2001      	movs	r0, #1
    a21a:	4b04      	ldr	r3, [pc, #16]	; (a22c <main_task+0x48>)
    a21c:	4798      	blx	r3
    a21e:	e7e4      	b.n	a1ea <main_task+0x6>
    a220:	0000a071 	.word	0x0000a071
    a224:	0000a175 	.word	0x0000a175
    a228:	0000ad55 	.word	0x0000ad55
    a22c:	0000b8ed 	.word	0x0000b8ed
    a230:	0000b10d 	.word	0x0000b10d
    a234:	00000000 	.word	0x00000000

0000a238 <main>:



int main(void)
{
    a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a23c:	b085      	sub	sp, #20
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    a23e:	4b4e      	ldr	r3, [pc, #312]	; (a378 <main+0x140>)
    a240:	4798      	blx	r3
	
	ctx.steeringangle_to_encoder_ratio = (MAX_STEERING_ANGLE - MIN_STEERING_ANGLE) / (float)(MAX_STEERING_ENCODER_COUNT - MIN_STEERING_ENCODER_COUNT);
    a242:	4d4e      	ldr	r5, [pc, #312]	; (a37c <main+0x144>)
    a244:	4b4e      	ldr	r3, [pc, #312]	; (a380 <main+0x148>)
    a246:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
	ctx.steering_controller.p = STEERING_P_GAIN;
    a24a:	a349      	add	r3, pc, #292	; (adr r3, a370 <main+0x138>)
    a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a250:	e9c5 230e 	strd	r2, r3, [r5, #56]	; 0x38
	ctx.steering_controller.i = STEERING_I_GAIN;
    a254:	2600      	movs	r6, #0
    a256:	2700      	movs	r7, #0
    a258:	e9c5 6710 	strd	r6, r7, [r5, #64]	; 0x40
	ctx.steering_controller.d = STEERING_D_GAIN;
    a25c:	e9c5 6712 	strd	r6, r7, [r5, #72]	; 0x48
	ctx.steering_controller.pidSource = SteeringPIDSource;
    a260:	4b48      	ldr	r3, [pc, #288]	; (a384 <main+0x14c>)
    a262:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	ctx.steering_controller.pidOutput = SteeringPIDOutput;
    a266:	4b48      	ldr	r3, [pc, #288]	; (a388 <main+0x150>)
    a268:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	setInputBounds(&(ctx.steering_controller), ConvertAngleToPIDInt(MIN_STEERING_ANGLE), ConvertAngleToPIDInt(MAX_STEERING_ANGLE));
    a26c:	4847      	ldr	r0, [pc, #284]	; (a38c <main+0x154>)
    a26e:	4c48      	ldr	r4, [pc, #288]	; (a390 <main+0x158>)
    a270:	47a0      	blx	r4
    a272:	4682      	mov	sl, r0
    a274:	4847      	ldr	r0, [pc, #284]	; (a394 <main+0x15c>)
    a276:	47a0      	blx	r4
    a278:	f105 0808 	add.w	r8, r5, #8
    a27c:	f105 0938 	add.w	r9, r5, #56	; 0x38
    a280:	4602      	mov	r2, r0
    a282:	4651      	mov	r1, sl
    a284:	4648      	mov	r0, r9
    a286:	f8df b170 	ldr.w	fp, [pc, #368]	; a3f8 <main+0x1c0>
    a28a:	47d8      	blx	fp
	setOutputBounds(&(ctx.steering_controller), ConvertDutyCycleToPIDInt(MAX_STEERING_DUTY_CYCLE)*-1, ConvertDutyCycleToPIDInt(MAX_STEERING_DUTY_CYCLE));
    a28c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    a290:	f8df a168 	ldr.w	sl, [pc, #360]	; a3fc <main+0x1c4>
    a294:	47d0      	blx	sl
    a296:	4604      	mov	r4, r0
    a298:	4602      	mov	r2, r0
    a29a:	4241      	negs	r1, r0
    a29c:	4648      	mov	r0, r9
    a29e:	f8df 9160 	ldr.w	r9, [pc, #352]	; a400 <main+0x1c8>
    a2a2:	47c8      	blx	r9
	ctx.steering_controller.getSystemTime = GetPIDTime;
    a2a4:	4b3c      	ldr	r3, [pc, #240]	; (a398 <main+0x160>)
    a2a6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8

	ctx.speed_controller.p = SPEED_P_GAIN;
    a2aa:	2200      	movs	r2, #0
    a2ac:	4b3b      	ldr	r3, [pc, #236]	; (a39c <main+0x164>)
    a2ae:	e9c5 2334 	strd	r2, r3, [r5, #208]	; 0xd0
	ctx.speed_controller.i = SPEED_I_GAIN;
    a2b2:	e9c5 6736 	strd	r6, r7, [r5, #216]	; 0xd8
	ctx.speed_controller.d = SPEED_D_GAIN;
    a2b6:	e9c5 6738 	strd	r6, r7, [r5, #224]	; 0xe0
	ctx.speed_controller.pidSource = SpeedPIDSource;
    a2ba:	4b39      	ldr	r3, [pc, #228]	; (a3a0 <main+0x168>)
    a2bc:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
	ctx.speed_controller.pidOutput = SpeedPIDOutput;
    a2c0:	4b38      	ldr	r3, [pc, #224]	; (a3a4 <main+0x16c>)
    a2c2:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
	setInputBounds(&(ctx.speed_controller), ConvertSpeedToPIDInt(MIN_VEHICLE_SPEED), ConvertSpeedToPIDInt(MAX_VEHICLE_SPEED));
    a2c6:	4838      	ldr	r0, [pc, #224]	; (a3a8 <main+0x170>)
    a2c8:	4e38      	ldr	r6, [pc, #224]	; (a3ac <main+0x174>)
    a2ca:	47b0      	blx	r6
    a2cc:	4607      	mov	r7, r0
    a2ce:	4838      	ldr	r0, [pc, #224]	; (a3b0 <main+0x178>)
    a2d0:	47b0      	blx	r6
    a2d2:	f105 06d0 	add.w	r6, r5, #208	; 0xd0
    a2d6:	4602      	mov	r2, r0
    a2d8:	4639      	mov	r1, r7
    a2da:	4630      	mov	r0, r6
    a2dc:	47d8      	blx	fp
	setOutputBounds(&(ctx.speed_controller), ConvertDutyCycleToPIDInt(MIN_ACCEL_DUTY_CYCLE), ConvertDutyCycleToPIDInt(MAX_ACCEL_DUTY_CYCLE));
    a2de:	4835      	ldr	r0, [pc, #212]	; (a3b4 <main+0x17c>)
    a2e0:	47d0      	blx	sl
    a2e2:	4622      	mov	r2, r4
    a2e4:	4601      	mov	r1, r0
    a2e6:	4630      	mov	r0, r6
    a2e8:	47c8      	blx	r9
	ctx.speed_controller.getSystemTime = GetPIDTime;
	
	//Initialize Encoder 
	steering_encoder_vars.aFlag=0;
    a2ea:	4b33      	ldr	r3, [pc, #204]	; (a3b8 <main+0x180>)
    a2ec:	2400      	movs	r4, #0
    a2ee:	601c      	str	r4, [r3, #0]
	steering_encoder_vars.bFlag=0;
    a2f0:	605c      	str	r4, [r3, #4]
	steering_encoder_vars.counter=0;
    a2f2:	609c      	str	r4, [r3, #8]
	steering_encoder_vars.last_count=0;
    a2f4:	60dc      	str	r4, [r3, #12]

	
	memset(&ctx, 0, sizeof(ctx));
    a2f6:	f44f 72c4 	mov.w	r2, #392	; 0x188
    a2fa:	4621      	mov	r1, r4
    a2fc:	4640      	mov	r0, r8
    a2fe:	4b2f      	ldr	r3, [pc, #188]	; (a3bc <main+0x184>)
    a300:	4798      	blx	r3
	// The idea of a Semaphore is to manage access to a shared resource, in our case its context ctx, which holds the vehicle information
	// Context is shared between the 1-ethernet_thread task, which handles communications with the host computer and 2-main_task which controls the vehicle's functionality
	
	// ctx.sem refers to the handle semaphore which acts as the gatekeeper of the shared resource, a Binary Semaphore allows the shared resource to be occupied
	// by one task at a time
	ctx.sem = xSemaphoreCreateBinary();
    a302:	2203      	movs	r2, #3
    a304:	4621      	mov	r1, r4
    a306:	2001      	movs	r0, #1
    a308:	4b2d      	ldr	r3, [pc, #180]	; (a3c0 <main+0x188>)
    a30a:	4798      	blx	r3
    a30c:	60a8      	str	r0, [r5, #8]
	
	// We make the semaphore available
	xSemaphoreGive(ctx.sem);
    a30e:	4623      	mov	r3, r4
    a310:	4622      	mov	r2, r4
    a312:	4621      	mov	r1, r4
    a314:	4d2b      	ldr	r5, [pc, #172]	; (a3c4 <main+0x18c>)
    a316:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a318:	4b2b      	ldr	r3, [pc, #172]	; (a3c8 <main+0x190>)
    a31a:	22a0      	movs	r2, #160	; 0xa0
    a31c:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    a320:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
	// ISRs using FreeRTOS *FromISR APIs must have priorities below or equal to 
	// configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY. This version of RTOS, it is 4
	NVIC_SetPriority(EIC_0_IRQn, 5);
	NVIC_SetPriority(EIC_7_IRQn, 5);	
	// Register the Interrupts and assign the pins to the functions
	ext_irq_register(PIN_PB07, count_encoderA);
    a324:	4929      	ldr	r1, [pc, #164]	; (a3cc <main+0x194>)
    a326:	2027      	movs	r0, #39	; 0x27
    a328:	4d29      	ldr	r5, [pc, #164]	; (a3d0 <main+0x198>)
    a32a:	47a8      	blx	r5
	ext_irq_register(PIN_PD00, count_encoderB);
    a32c:	4929      	ldr	r1, [pc, #164]	; (a3d4 <main+0x19c>)
    a32e:	2060      	movs	r0, #96	; 0x60
    a330:	47a8      	blx	r5

	xTaskCreate(ethernet_thread,
    a332:	9403      	str	r4, [sp, #12]
    a334:	9402      	str	r4, [sp, #8]
    a336:	9401      	str	r4, [sp, #4]
    a338:	9400      	str	r4, [sp, #0]
    a33a:	4643      	mov	r3, r8
    a33c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a340:	4925      	ldr	r1, [pc, #148]	; (a3d8 <main+0x1a0>)
    a342:	4826      	ldr	r0, [pc, #152]	; (a3dc <main+0x1a4>)
    a344:	4d26      	ldr	r5, [pc, #152]	; (a3e0 <main+0x1a8>)
    a346:	47a8      	blx	r5
		2048,
		&ctx,
		0,
		NULL);

	xTaskCreate(main_task,
    a348:	9403      	str	r4, [sp, #12]
    a34a:	9402      	str	r4, [sp, #8]
    a34c:	9401      	str	r4, [sp, #4]
    a34e:	2302      	movs	r3, #2
    a350:	9300      	str	r3, [sp, #0]
    a352:	4643      	mov	r3, r8
    a354:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a358:	4922      	ldr	r1, [pc, #136]	; (a3e4 <main+0x1ac>)
    a35a:	4823      	ldr	r0, [pc, #140]	; (a3e8 <main+0x1b0>)
    a35c:	47a8      	blx	r5
		2048,
		&ctx,
		2,
		NULL);	

	vTaskStartScheduler();
    a35e:	4b23      	ldr	r3, [pc, #140]	; (a3ec <main+0x1b4>)
    a360:	4798      	blx	r3
	
	//Should never reach here as vTaskStartScheduler is infinitely blocking
	//If we DO reach here then there is insufficient RAM
	printf("Insufficient RTOS heap available to create the idle or timer daemon tasks");
    a362:	4823      	ldr	r0, [pc, #140]	; (a3f0 <main+0x1b8>)
    a364:	4b23      	ldr	r3, [pc, #140]	; (a3f4 <main+0x1bc>)
    a366:	4798      	blx	r3

	return 0;
}
    a368:	4620      	mov	r0, r4
    a36a:	b005      	add	sp, #20
    a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a370:	11111111 	.word	0x11111111
    a374:	3fa11111 	.word	0x3fa11111
    a378:	000002d1 	.word	0x000002d1
    a37c:	200081c8 	.word	0x200081c8
    a380:	3e124925 	.word	0x3e124925
    a384:	0000a0ad 	.word	0x0000a0ad
    a388:	0000a115 	.word	0x0000a115
    a38c:	c2480000 	.word	0xc2480000
    a390:	0000a089 	.word	0x0000a089
    a394:	42480000 	.word	0x42480000
    a398:	0000a07d 	.word	0x0000a07d
    a39c:	3ff00000 	.word	0x3ff00000
    a3a0:	0000a0e5 	.word	0x0000a0e5
    a3a4:	0000a12d 	.word	0x0000a12d
    a3a8:	bf800000 	.word	0xbf800000
    a3ac:	0000a0c1 	.word	0x0000a0c1
    a3b0:	40a00000 	.word	0x40a00000
    a3b4:	be800000 	.word	0xbe800000
    a3b8:	20016210 	.word	0x20016210
    a3bc:	0000cd69 	.word	0x0000cd69
    a3c0:	0000ac85 	.word	0x0000ac85
    a3c4:	0000ad55 	.word	0x0000ad55
    a3c8:	e000e100 	.word	0xe000e100
    a3cc:	00009e6d 	.word	0x00009e6d
    a3d0:	00001015 	.word	0x00001015
    a3d4:	00009f3d 	.word	0x00009f3d
    a3d8:	0000e5ac 	.word	0x0000e5ac
    a3dc:	00000c69 	.word	0x00000c69
    a3e0:	0000b4c1 	.word	0x0000b4c1
    a3e4:	0000e5bc 	.word	0x0000e5bc
    a3e8:	0000a1e5 	.word	0x0000a1e5
    a3ec:	0000b619 	.word	0x0000b619
    a3f0:	0000e5c8 	.word	0x0000e5c8
    a3f4:	0000d479 	.word	0x0000d479
    a3f8:	0000a405 	.word	0x0000a405
    a3fc:	0000a145 	.word	0x0000a145
    a400:	0000a415 	.word	0x0000a415

0000a404 <setInputBounds>:
 * @param lower The lower input bound.
 * @param upper The upper input bound.
 */
void setInputBounds(PIDController *controller, int lower, int upper) {

	if(upper > lower) {
    a404:	428a      	cmp	r2, r1
    a406:	dd04      	ble.n	a412 <setInputBounds+0xe>
		controller->inputBounded = 1;
    a408:	2301      	movs	r3, #1
    a40a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
		controller->inputUpperBound = upper;
    a40e:	6682      	str	r2, [r0, #104]	; 0x68
		controller->inputLowerBound = lower;
    a410:	6641      	str	r1, [r0, #100]	; 0x64
    a412:	4770      	bx	lr

0000a414 <setOutputBounds>:
 * @param lower The lower output bound.
 * @param upper The upper output bound.
 */
void setOutputBounds(PIDController *controller, int lower, int upper) {

	if(upper > lower) {
    a414:	428a      	cmp	r2, r1
    a416:	dd04      	ble.n	a422 <setOutputBounds+0xe>
		controller->outputBounded = 1;
    a418:	2301      	movs	r3, #1
    a41a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
		controller->outputLowerBound = lower;
    a41e:	6701      	str	r1, [r0, #112]	; 0x70
		controller->outputUpperBound = upper;
    a420:	6742      	str	r2, [r0, #116]	; 0x74
    a422:	4770      	bx	lr

0000a424 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    a424:	b958      	cbnz	r0, a43e <_read+0x1a>
{
    a426:	b508      	push	{r3, lr}
    a428:	460b      	mov	r3, r1
    a42a:	4611      	mov	r1, r2
    a42c:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    a42e:	4b05      	ldr	r3, [pc, #20]	; (a444 <_read+0x20>)
    a430:	4798      	blx	r3
	if (n < 0) {
    a432:	2800      	cmp	r0, #0
    a434:	db00      	blt.n	a438 <_read+0x14>
		return -1;
	}

	return n;
}
    a436:	bd08      	pop	{r3, pc}
		return -1;
    a438:	f04f 30ff 	mov.w	r0, #4294967295
    a43c:	bd08      	pop	{r3, pc}
		return -1;
    a43e:	f04f 30ff 	mov.w	r0, #4294967295
    a442:	4770      	bx	lr
    a444:	0000a49d 	.word	0x0000a49d

0000a448 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    a448:	3801      	subs	r0, #1
    a44a:	2802      	cmp	r0, #2
    a44c:	d80b      	bhi.n	a466 <_write+0x1e>
{
    a44e:	b508      	push	{r3, lr}
    a450:	460b      	mov	r3, r1
    a452:	4611      	mov	r1, r2
    a454:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    a456:	4b05      	ldr	r3, [pc, #20]	; (a46c <_write+0x24>)
    a458:	4798      	blx	r3
	if (n < 0) {
    a45a:	2800      	cmp	r0, #0
    a45c:	db00      	blt.n	a460 <_write+0x18>
		return -1;
	}

	return n;
}
    a45e:	bd08      	pop	{r3, pc}
		return -1;
    a460:	f04f 30ff 	mov.w	r0, #4294967295
    a464:	bd08      	pop	{r3, pc}
		return -1;
    a466:	f04f 30ff 	mov.w	r0, #4294967295
    a46a:	4770      	bx	lr
    a46c:	0000a4c1 	.word	0x0000a4c1

0000a470 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    a470:	b570      	push	{r4, r5, r6, lr}
    a472:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    a474:	4d06      	ldr	r5, [pc, #24]	; (a490 <stdio_io_init+0x20>)
    a476:	682b      	ldr	r3, [r5, #0]
    a478:	2100      	movs	r1, #0
    a47a:	6898      	ldr	r0, [r3, #8]
    a47c:	4c05      	ldr	r4, [pc, #20]	; (a494 <stdio_io_init+0x24>)
    a47e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    a480:	682b      	ldr	r3, [r5, #0]
    a482:	2100      	movs	r1, #0
    a484:	6858      	ldr	r0, [r3, #4]
    a486:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    a488:	4b03      	ldr	r3, [pc, #12]	; (a498 <stdio_io_init+0x28>)
    a48a:	601e      	str	r6, [r3, #0]
    a48c:	bd70      	pop	{r4, r5, r6, pc}
    a48e:	bf00      	nop
    a490:	20000054 	.word	0x20000054
    a494:	0000d591 	.word	0x0000d591
    a498:	20008378 	.word	0x20008378

0000a49c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    a49c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a49e:	4b06      	ldr	r3, [pc, #24]	; (a4b8 <stdio_io_read+0x1c>)
    a4a0:	681b      	ldr	r3, [r3, #0]
    a4a2:	b133      	cbz	r3, a4b2 <stdio_io_read+0x16>
    a4a4:	460a      	mov	r2, r1
    a4a6:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    a4a8:	b292      	uxth	r2, r2
    a4aa:	4618      	mov	r0, r3
    a4ac:	4b03      	ldr	r3, [pc, #12]	; (a4bc <stdio_io_read+0x20>)
    a4ae:	4798      	blx	r3
    a4b0:	bd08      	pop	{r3, pc}
		return 0;
    a4b2:	2000      	movs	r0, #0
}
    a4b4:	bd08      	pop	{r3, pc}
    a4b6:	bf00      	nop
    a4b8:	20008378 	.word	0x20008378
    a4bc:	00001139 	.word	0x00001139

0000a4c0 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    a4c0:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    a4c2:	4b06      	ldr	r3, [pc, #24]	; (a4dc <stdio_io_write+0x1c>)
    a4c4:	681b      	ldr	r3, [r3, #0]
    a4c6:	b133      	cbz	r3, a4d6 <stdio_io_write+0x16>
    a4c8:	460a      	mov	r2, r1
    a4ca:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    a4cc:	b292      	uxth	r2, r2
    a4ce:	4618      	mov	r0, r3
    a4d0:	4b03      	ldr	r3, [pc, #12]	; (a4e0 <stdio_io_write+0x20>)
    a4d2:	4798      	blx	r3
    a4d4:	bd08      	pop	{r3, pc}
		return 0;
    a4d6:	2000      	movs	r0, #0
}
    a4d8:	bd08      	pop	{r3, pc}
    a4da:	bf00      	nop
    a4dc:	20008378 	.word	0x20008378
    a4e0:	00001105 	.word	0x00001105

0000a4e4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    a4e4:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    a4e6:	4c04      	ldr	r4, [pc, #16]	; (a4f8 <stdio_redirect_init+0x14>)
    a4e8:	4620      	mov	r0, r4
    a4ea:	4b04      	ldr	r3, [pc, #16]	; (a4fc <stdio_redirect_init+0x18>)
    a4ec:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    a4ee:	4620      	mov	r0, r4
    a4f0:	4b03      	ldr	r3, [pc, #12]	; (a500 <stdio_redirect_init+0x1c>)
    a4f2:	4798      	blx	r3
    a4f4:	bd10      	pop	{r4, pc}
    a4f6:	bf00      	nop
    a4f8:	2001290c 	.word	0x2001290c
    a4fc:	00001521 	.word	0x00001521
    a500:	0000a471 	.word	0x0000a471

0000a504 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    a504:	f100 0308 	add.w	r3, r0, #8
    a508:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    a50a:	f04f 32ff 	mov.w	r2, #4294967295
    a50e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    a510:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    a512:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    a514:	2300      	movs	r3, #0
    a516:	6003      	str	r3, [r0, #0]
    a518:	4770      	bx	lr

0000a51a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    a51a:	2300      	movs	r3, #0
    a51c:	6103      	str	r3, [r0, #16]
    a51e:	4770      	bx	lr

0000a520 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    a520:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    a522:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    a524:	689a      	ldr	r2, [r3, #8]
    a526:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    a528:	689a      	ldr	r2, [r3, #8]
    a52a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    a52c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    a52e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    a530:	6803      	ldr	r3, [r0, #0]
    a532:	3301      	adds	r3, #1
    a534:	6003      	str	r3, [r0, #0]
    a536:	4770      	bx	lr

0000a538 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    a538:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    a53a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    a53c:	f1b5 3fff 	cmp.w	r5, #4294967295
    a540:	d002      	beq.n	a548 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    a542:	f100 0208 	add.w	r2, r0, #8
    a546:	e002      	b.n	a54e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    a548:	6902      	ldr	r2, [r0, #16]
    a54a:	e004      	b.n	a556 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    a54c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    a54e:	6853      	ldr	r3, [r2, #4]
    a550:	681c      	ldr	r4, [r3, #0]
    a552:	42a5      	cmp	r5, r4
    a554:	d2fa      	bcs.n	a54c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    a556:	6853      	ldr	r3, [r2, #4]
    a558:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    a55a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    a55c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    a55e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    a560:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    a562:	6803      	ldr	r3, [r0, #0]
    a564:	3301      	adds	r3, #1
    a566:	6003      	str	r3, [r0, #0]
}
    a568:	bc30      	pop	{r4, r5}
    a56a:	4770      	bx	lr

0000a56c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    a56c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    a56e:	6842      	ldr	r2, [r0, #4]
    a570:	6881      	ldr	r1, [r0, #8]
    a572:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    a574:	6882      	ldr	r2, [r0, #8]
    a576:	6841      	ldr	r1, [r0, #4]
    a578:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    a57a:	685a      	ldr	r2, [r3, #4]
    a57c:	4290      	cmp	r0, r2
    a57e:	d005      	beq.n	a58c <uxListRemove+0x20>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    a580:	2200      	movs	r2, #0
    a582:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    a584:	6818      	ldr	r0, [r3, #0]
    a586:	3801      	subs	r0, #1
    a588:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
    a58a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    a58c:	6882      	ldr	r2, [r0, #8]
    a58e:	605a      	str	r2, [r3, #4]
    a590:	e7f6      	b.n	a580 <uxListRemove+0x14>
	...

0000a594 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    a594:	4b0b      	ldr	r3, [pc, #44]	; (a5c4 <prvTaskExitError+0x30>)
    a596:	681b      	ldr	r3, [r3, #0]
    a598:	f1b3 3fff 	cmp.w	r3, #4294967295
    a59c:	d008      	beq.n	a5b0 <prvTaskExitError+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    a59e:	f04f 0380 	mov.w	r3, #128	; 0x80
    a5a2:	f383 8811 	msr	BASEPRI, r3
    a5a6:	f3bf 8f6f 	isb	sy
    a5aa:	f3bf 8f4f 	dsb	sy
    a5ae:	e7fe      	b.n	a5ae <prvTaskExitError+0x1a>
    a5b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    a5b4:	f383 8811 	msr	BASEPRI, r3
    a5b8:	f3bf 8f6f 	isb	sy
    a5bc:	f3bf 8f4f 	dsb	sy
    a5c0:	e7fe      	b.n	a5c0 <prvTaskExitError+0x2c>
    a5c2:	bf00      	nop
    a5c4:	2000004c 	.word	0x2000004c

0000a5c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask(void)
{
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    a5c8:	4806      	ldr	r0, [pc, #24]	; (a5e4 <prvPortStartFirstTask+0x1c>)
    a5ca:	6800      	ldr	r0, [r0, #0]
    a5cc:	6800      	ldr	r0, [r0, #0]
    a5ce:	f380 8808 	msr	MSP, r0
    a5d2:	b662      	cpsie	i
    a5d4:	b661      	cpsie	f
    a5d6:	f3bf 8f4f 	dsb	sy
    a5da:	f3bf 8f6f 	isb	sy
    a5de:	df00      	svc	0
    a5e0:	bf00      	nop
    a5e2:	0000      	.short	0x0000
    a5e4:	e000ed08 	.word	0xe000ed08

0000a5e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    a5e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; a5f8 <vPortEnableVFP+0x10>
    a5ec:	6801      	ldr	r1, [r0, #0]
    a5ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a5f2:	6001      	str	r1, [r0, #0]
    a5f4:	4770      	bx	lr
    a5f6:	0000      	.short	0x0000
    a5f8:	e000ed88 	.word	0xe000ed88

0000a5fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    a5fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    a600:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    a604:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    a608:	4b05      	ldr	r3, [pc, #20]	; (a620 <pxPortInitialiseStack+0x24>)
    a60a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    a60e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
    a612:	f06f 0302 	mvn.w	r3, #2
    a616:	f840 3c24 	str.w	r3, [r0, #-36]
}
    a61a:	3844      	subs	r0, #68	; 0x44
    a61c:	4770      	bx	lr
    a61e:	bf00      	nop
    a620:	0000a595 	.word	0x0000a595

0000a624 <SVCall_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    a624:	4b06      	ldr	r3, [pc, #24]	; (a640 <pxCurrentTCBConst2>)
    a626:	6819      	ldr	r1, [r3, #0]
    a628:	6808      	ldr	r0, [r1, #0]
    a62a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a62e:	f380 8809 	msr	PSP, r0
    a632:	f3bf 8f6f 	isb	sy
    a636:	f04f 0000 	mov.w	r0, #0
    a63a:	f380 8811 	msr	BASEPRI, r0
    a63e:	4770      	bx	lr

0000a640 <pxCurrentTCBConst2>:
    a640:	2001287c 	.word	0x2001287c

0000a644 <vPortEnterCritical>:
    a644:	f04f 0380 	mov.w	r3, #128	; 0x80
    a648:	f383 8811 	msr	BASEPRI, r3
    a64c:	f3bf 8f6f 	isb	sy
    a650:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    a654:	4a0a      	ldr	r2, [pc, #40]	; (a680 <vPortEnterCritical+0x3c>)
    a656:	6813      	ldr	r3, [r2, #0]
    a658:	3301      	adds	r3, #1
    a65a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    a65c:	2b01      	cmp	r3, #1
    a65e:	d10d      	bne.n	a67c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    a660:	4b08      	ldr	r3, [pc, #32]	; (a684 <vPortEnterCritical+0x40>)
    a662:	681b      	ldr	r3, [r3, #0]
    a664:	f013 0fff 	tst.w	r3, #255	; 0xff
    a668:	d008      	beq.n	a67c <vPortEnterCritical+0x38>
    a66a:	f04f 0380 	mov.w	r3, #128	; 0x80
    a66e:	f383 8811 	msr	BASEPRI, r3
    a672:	f3bf 8f6f 	isb	sy
    a676:	f3bf 8f4f 	dsb	sy
    a67a:	e7fe      	b.n	a67a <vPortEnterCritical+0x36>
    a67c:	4770      	bx	lr
    a67e:	bf00      	nop
    a680:	2000004c 	.word	0x2000004c
    a684:	e000ed04 	.word	0xe000ed04

0000a688 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    a688:	4b09      	ldr	r3, [pc, #36]	; (a6b0 <vPortExitCritical+0x28>)
    a68a:	681b      	ldr	r3, [r3, #0]
    a68c:	b943      	cbnz	r3, a6a0 <vPortExitCritical+0x18>
    a68e:	f04f 0380 	mov.w	r3, #128	; 0x80
    a692:	f383 8811 	msr	BASEPRI, r3
    a696:	f3bf 8f6f 	isb	sy
    a69a:	f3bf 8f4f 	dsb	sy
    a69e:	e7fe      	b.n	a69e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    a6a0:	3b01      	subs	r3, #1
    a6a2:	4a03      	ldr	r2, [pc, #12]	; (a6b0 <vPortExitCritical+0x28>)
    a6a4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    a6a6:	b90b      	cbnz	r3, a6ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    a6a8:	f383 8811 	msr	BASEPRI, r3
    a6ac:	4770      	bx	lr
    a6ae:	bf00      	nop
    a6b0:	2000004c 	.word	0x2000004c

0000a6b4 <PendSV_Handler>:
	__asm volatile(
    a6b4:	f3ef 8009 	mrs	r0, PSP
    a6b8:	f3bf 8f6f 	isb	sy
    a6bc:	4b14      	ldr	r3, [pc, #80]	; (a710 <pxCurrentTCBConst>)
    a6be:	681a      	ldr	r2, [r3, #0]
    a6c0:	f01e 0f10 	tst.w	lr, #16
    a6c4:	bf08      	it	eq
    a6c6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    a6ca:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6ce:	6010      	str	r0, [r2, #0]
    a6d0:	f84d 3d04 	str.w	r3, [sp, #-4]!
    a6d4:	f04f 0080 	mov.w	r0, #128	; 0x80
    a6d8:	f380 8811 	msr	BASEPRI, r0
    a6dc:	f3bf 8f4f 	dsb	sy
    a6e0:	f3bf 8f6f 	isb	sy
    a6e4:	f001 f986 	bl	b9f4 <vTaskSwitchContext>
    a6e8:	f04f 0000 	mov.w	r0, #0
    a6ec:	f380 8811 	msr	BASEPRI, r0
    a6f0:	bc08      	pop	{r3}
    a6f2:	6819      	ldr	r1, [r3, #0]
    a6f4:	6808      	ldr	r0, [r1, #0]
    a6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6fa:	f01e 0f10 	tst.w	lr, #16
    a6fe:	bf08      	it	eq
    a700:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    a704:	f380 8809 	msr	PSP, r0
    a708:	f3bf 8f6f 	isb	sy
    a70c:	4770      	bx	lr
    a70e:	bf00      	nop

0000a710 <pxCurrentTCBConst>:
    a710:	2001287c 	.word	0x2001287c

0000a714 <SysTick_Handler>:
{
    a714:	b508      	push	{r3, lr}
	__asm volatile("	mrs %0, basepri											\n"
    a716:	f3ef 8311 	mrs	r3, BASEPRI
    a71a:	f04f 0280 	mov.w	r2, #128	; 0x80
    a71e:	f382 8811 	msr	BASEPRI, r2
    a722:	f3bf 8f6f 	isb	sy
    a726:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    a72a:	4b05      	ldr	r3, [pc, #20]	; (a740 <SysTick_Handler+0x2c>)
    a72c:	4798      	blx	r3
    a72e:	b118      	cbz	r0, a738 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    a730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a734:	4b03      	ldr	r3, [pc, #12]	; (a744 <SysTick_Handler+0x30>)
    a736:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    a738:	2300      	movs	r3, #0
    a73a:	f383 8811 	msr	BASEPRI, r3
    a73e:	bd08      	pop	{r3, pc}
    a740:	0000b6b9 	.word	0x0000b6b9
    a744:	e000ed04 	.word	0xe000ed04

0000a748 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    a748:	f642 62df 	movw	r2, #11999	; 0x2edf
    a74c:	4b02      	ldr	r3, [pc, #8]	; (a758 <vPortSetupTimerInterrupt+0x10>)
    a74e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    a750:	2207      	movs	r2, #7
    a752:	3b04      	subs	r3, #4
    a754:	601a      	str	r2, [r3, #0]
    a756:	4770      	bx	lr
    a758:	e000e014 	.word	0xe000e014

0000a75c <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    a75c:	4b31      	ldr	r3, [pc, #196]	; (a824 <xPortStartScheduler+0xc8>)
    a75e:	681a      	ldr	r2, [r3, #0]
    a760:	4b31      	ldr	r3, [pc, #196]	; (a828 <xPortStartScheduler+0xcc>)
    a762:	429a      	cmp	r2, r3
    a764:	d019      	beq.n	a79a <xPortStartScheduler+0x3e>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    a766:	4b2f      	ldr	r3, [pc, #188]	; (a824 <xPortStartScheduler+0xc8>)
    a768:	681a      	ldr	r2, [r3, #0]
    a76a:	4b30      	ldr	r3, [pc, #192]	; (a82c <xPortStartScheduler+0xd0>)
    a76c:	429a      	cmp	r2, r3
    a76e:	d01d      	beq.n	a7ac <xPortStartScheduler+0x50>
{
    a770:	b500      	push	{lr}
    a772:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    a774:	4b2e      	ldr	r3, [pc, #184]	; (a830 <xPortStartScheduler+0xd4>)
    a776:	781a      	ldrb	r2, [r3, #0]
    a778:	b2d2      	uxtb	r2, r2
    a77a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    a77c:	22ff      	movs	r2, #255	; 0xff
    a77e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	b2db      	uxtb	r3, r3
    a784:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    a788:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
    a790:	4a28      	ldr	r2, [pc, #160]	; (a834 <xPortStartScheduler+0xd8>)
    a792:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    a794:	2307      	movs	r3, #7
    a796:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    a798:	e01b      	b.n	a7d2 <xPortStartScheduler+0x76>
	__asm volatile("	mov %0, %1												\n"
    a79a:	f04f 0380 	mov.w	r3, #128	; 0x80
    a79e:	f383 8811 	msr	BASEPRI, r3
    a7a2:	f3bf 8f6f 	isb	sy
    a7a6:	f3bf 8f4f 	dsb	sy
    a7aa:	e7fe      	b.n	a7aa <xPortStartScheduler+0x4e>
    a7ac:	f04f 0380 	mov.w	r3, #128	; 0x80
    a7b0:	f383 8811 	msr	BASEPRI, r3
    a7b4:	f3bf 8f6f 	isb	sy
    a7b8:	f3bf 8f4f 	dsb	sy
    a7bc:	e7fe      	b.n	a7bc <xPortStartScheduler+0x60>
			ulMaxPRIGROUPValue--;
    a7be:	4a1d      	ldr	r2, [pc, #116]	; (a834 <xPortStartScheduler+0xd8>)
    a7c0:	6853      	ldr	r3, [r2, #4]
    a7c2:	3b01      	subs	r3, #1
    a7c4:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= (uint8_t)0x01;
    a7c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a7ca:	005b      	lsls	r3, r3, #1
    a7cc:	b2db      	uxtb	r3, r3
    a7ce:	f88d 3003 	strb.w	r3, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    a7d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a7d6:	f013 0f80 	tst.w	r3, #128	; 0x80
    a7da:	d1f0      	bne.n	a7be <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    a7dc:	4a15      	ldr	r2, [pc, #84]	; (a834 <xPortStartScheduler+0xd8>)
    a7de:	6853      	ldr	r3, [r2, #4]
    a7e0:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    a7e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    a7e6:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    a7e8:	9b01      	ldr	r3, [sp, #4]
    a7ea:	b2db      	uxtb	r3, r3
    a7ec:	4a10      	ldr	r2, [pc, #64]	; (a830 <xPortStartScheduler+0xd4>)
    a7ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    a7f0:	4b11      	ldr	r3, [pc, #68]	; (a838 <xPortStartScheduler+0xdc>)
    a7f2:	681a      	ldr	r2, [r3, #0]
    a7f4:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    a7f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    a7fa:	681a      	ldr	r2, [r3, #0]
    a7fc:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    a800:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    a802:	4b0e      	ldr	r3, [pc, #56]	; (a83c <xPortStartScheduler+0xe0>)
    a804:	4798      	blx	r3
	uxCriticalNesting = 0;
    a806:	2200      	movs	r2, #0
    a808:	4b0d      	ldr	r3, [pc, #52]	; (a840 <xPortStartScheduler+0xe4>)
    a80a:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
    a80c:	4b0d      	ldr	r3, [pc, #52]	; (a844 <xPortStartScheduler+0xe8>)
    a80e:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    a810:	4a0d      	ldr	r2, [pc, #52]	; (a848 <xPortStartScheduler+0xec>)
    a812:	6813      	ldr	r3, [r2, #0]
    a814:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    a818:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    a81a:	4b0c      	ldr	r3, [pc, #48]	; (a84c <xPortStartScheduler+0xf0>)
    a81c:	4798      	blx	r3
	prvTaskExitError();
    a81e:	4b0c      	ldr	r3, [pc, #48]	; (a850 <xPortStartScheduler+0xf4>)
    a820:	4798      	blx	r3
    a822:	bf00      	nop
    a824:	e000ed00 	.word	0xe000ed00
    a828:	410fc271 	.word	0x410fc271
    a82c:	410fc270 	.word	0x410fc270
    a830:	e000e400 	.word	0xe000e400
    a834:	2000837c 	.word	0x2000837c
    a838:	e000ed20 	.word	0xe000ed20
    a83c:	0000a749 	.word	0x0000a749
    a840:	2000004c 	.word	0x2000004c
    a844:	0000a5e9 	.word	0x0000a5e9
    a848:	e000ef34 	.word	0xe000ef34
    a84c:	0000a5c9 	.word	0x0000a5c9
    a850:	0000a595 	.word	0x0000a595

0000a854 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt));
    a854:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    a858:	2b0f      	cmp	r3, #15
    a85a:	d90f      	bls.n	a87c <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    a85c:	4a10      	ldr	r2, [pc, #64]	; (a8a0 <vPortValidateInterruptPriority+0x4c>)
    a85e:	5c9b      	ldrb	r3, [r3, r2]
    a860:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    a862:	4a10      	ldr	r2, [pc, #64]	; (a8a4 <vPortValidateInterruptPriority+0x50>)
    a864:	7812      	ldrb	r2, [r2, #0]
    a866:	4293      	cmp	r3, r2
    a868:	d208      	bcs.n	a87c <vPortValidateInterruptPriority+0x28>
    a86a:	f04f 0380 	mov.w	r3, #128	; 0x80
    a86e:	f383 8811 	msr	BASEPRI, r3
    a872:	f3bf 8f6f 	isb	sy
    a876:	f3bf 8f4f 	dsb	sy
    a87a:	e7fe      	b.n	a87a <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredicable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    a87c:	4b0a      	ldr	r3, [pc, #40]	; (a8a8 <vPortValidateInterruptPriority+0x54>)
    a87e:	681b      	ldr	r3, [r3, #0]
    a880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    a884:	4a07      	ldr	r2, [pc, #28]	; (a8a4 <vPortValidateInterruptPriority+0x50>)
    a886:	6852      	ldr	r2, [r2, #4]
    a888:	4293      	cmp	r3, r2
    a88a:	d908      	bls.n	a89e <vPortValidateInterruptPriority+0x4a>
    a88c:	f04f 0380 	mov.w	r3, #128	; 0x80
    a890:	f383 8811 	msr	BASEPRI, r3
    a894:	f3bf 8f6f 	isb	sy
    a898:	f3bf 8f4f 	dsb	sy
    a89c:	e7fe      	b.n	a89c <vPortValidateInterruptPriority+0x48>
    a89e:	4770      	bx	lr
    a8a0:	e000e3f0 	.word	0xe000e3f0
    a8a4:	2000837c 	.word	0x2000837c
    a8a8:	e000ed0c 	.word	0xe000ed0c

0000a8ac <prvHeapInit>:
{
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *    pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    a8ac:	4a09      	ldr	r2, [pc, #36]	; (a8d4 <prvHeapInit+0x28>)
	                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    a8ae:	f022 0207 	bic.w	r2, r2, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
    a8b2:	4b09      	ldr	r3, [pc, #36]	; (a8d8 <prvHeapInit+0x2c>)
    a8b4:	f8c3 2b58 	str.w	r2, [r3, #2904]	; 0xb58
	xStart.xBlockSize      = (size_t)0;
    a8b8:	2000      	movs	r0, #0
    a8ba:	f8c3 0b5c 	str.w	r0, [r3, #2908]	; 0xb5c

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize      = configADJUSTED_HEAP_SIZE;
    a8be:	f24a 4108 	movw	r1, #41992	; 0xa408
    a8c2:	f8c3 1b64 	str.w	r1, [r3, #2916]	; 0xb64
	xEnd.pxNextFreeBlock = NULL;
    a8c6:	f8c3 0b60 	str.w	r0, [r3, #2912]	; 0xb60

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock                  = (void *)pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize      = configADJUSTED_HEAP_SIZE;
    a8ca:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    a8cc:	f503 6336 	add.w	r3, r3, #2912	; 0xb60
    a8d0:	6013      	str	r3, [r2, #0]
    a8d2:	4770      	bx	lr
    a8d4:	2000838c 	.word	0x2000838c
    a8d8:	20011c3c 	.word	0x20011c3c

0000a8dc <pvPortMalloc>:
{
    a8dc:	b570      	push	{r4, r5, r6, lr}
    a8de:	4604      	mov	r4, r0
	vTaskSuspendAll();
    a8e0:	4b26      	ldr	r3, [pc, #152]	; (a97c <pvPortMalloc+0xa0>)
    a8e2:	4798      	blx	r3
		if (xHeapHasBeenInitialised == pdFALSE) {
    a8e4:	4b26      	ldr	r3, [pc, #152]	; (a980 <pvPortMalloc+0xa4>)
    a8e6:	f8d3 3b68 	ldr.w	r3, [r3, #2920]	; 0xb68
    a8ea:	b193      	cbz	r3, a912 <pvPortMalloc+0x36>
		if (xWantedSize > 0) {
    a8ec:	b134      	cbz	r4, a8fc <pvPortMalloc+0x20>
			xWantedSize += heapSTRUCT_SIZE;
    a8ee:	3408      	adds	r4, #8
			if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0) {
    a8f0:	f014 0f07 	tst.w	r4, #7
    a8f4:	d002      	beq.n	a8fc <pvPortMalloc+0x20>
				xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    a8f6:	f024 0407 	bic.w	r4, r4, #7
    a8fa:	3408      	adds	r4, #8
		if ((xWantedSize > 0) && (xWantedSize < configADJUSTED_HEAP_SIZE)) {
    a8fc:	1e62      	subs	r2, r4, #1
    a8fe:	f24a 4306 	movw	r3, #41990	; 0xa406
    a902:	429a      	cmp	r2, r3
    a904:	d835      	bhi.n	a972 <pvPortMalloc+0x96>
			pxBlock         = xStart.pxNextFreeBlock;
    a906:	491e      	ldr	r1, [pc, #120]	; (a980 <pvPortMalloc+0xa4>)
    a908:	f8d1 3b58 	ldr.w	r3, [r1, #2904]	; 0xb58
			pxPreviousBlock = &xStart;
    a90c:	f601 3158 	addw	r1, r1, #2904	; 0xb58
			while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
    a910:	e008      	b.n	a924 <pvPortMalloc+0x48>
			prvHeapInit();
    a912:	4b1c      	ldr	r3, [pc, #112]	; (a984 <pvPortMalloc+0xa8>)
    a914:	4798      	blx	r3
			xHeapHasBeenInitialised = pdTRUE;
    a916:	2201      	movs	r2, #1
    a918:	4b19      	ldr	r3, [pc, #100]	; (a980 <pvPortMalloc+0xa4>)
    a91a:	f8c3 2b68 	str.w	r2, [r3, #2920]	; 0xb68
    a91e:	e7e5      	b.n	a8ec <pvPortMalloc+0x10>
				pxPreviousBlock = pxBlock;
    a920:	4619      	mov	r1, r3
				pxBlock         = pxBlock->pxNextFreeBlock;
    a922:	4613      	mov	r3, r2
			while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
    a924:	685a      	ldr	r2, [r3, #4]
    a926:	4294      	cmp	r4, r2
    a928:	d902      	bls.n	a930 <pvPortMalloc+0x54>
    a92a:	681a      	ldr	r2, [r3, #0]
    a92c:	2a00      	cmp	r2, #0
    a92e:	d1f7      	bne.n	a920 <pvPortMalloc+0x44>
			if (pxBlock != &xEnd) {
    a930:	4a15      	ldr	r2, [pc, #84]	; (a988 <pvPortMalloc+0xac>)
    a932:	4293      	cmp	r3, r2
    a934:	d01f      	beq.n	a976 <pvPortMalloc+0x9a>
				pvReturn = (void *)(((uint8_t *)pxPreviousBlock->pxNextFreeBlock) + heapSTRUCT_SIZE);
    a936:	680d      	ldr	r5, [r1, #0]
    a938:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    a93a:	681a      	ldr	r2, [r3, #0]
    a93c:	600a      	str	r2, [r1, #0]
				if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
    a93e:	685a      	ldr	r2, [r3, #4]
    a940:	1b12      	subs	r2, r2, r4
    a942:	2a10      	cmp	r2, #16
    a944:	d90c      	bls.n	a960 <pvPortMalloc+0x84>
					pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
    a946:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    a948:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize        = xWantedSize;
    a94a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList((pxNewBlockLink));
    a94c:	6874      	ldr	r4, [r6, #4]
    a94e:	490f      	ldr	r1, [pc, #60]	; (a98c <pvPortMalloc+0xb0>)
    a950:	e000      	b.n	a954 <pvPortMalloc+0x78>
    a952:	4611      	mov	r1, r2
    a954:	680a      	ldr	r2, [r1, #0]
    a956:	6850      	ldr	r0, [r2, #4]
    a958:	4284      	cmp	r4, r0
    a95a:	d8fa      	bhi.n	a952 <pvPortMalloc+0x76>
    a95c:	6032      	str	r2, [r6, #0]
    a95e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    a960:	6859      	ldr	r1, [r3, #4]
    a962:	4a0b      	ldr	r2, [pc, #44]	; (a990 <pvPortMalloc+0xb4>)
    a964:	6813      	ldr	r3, [r2, #0]
    a966:	1a5b      	subs	r3, r3, r1
    a968:	6013      	str	r3, [r2, #0]
	(void)xTaskResumeAll();
    a96a:	4b0a      	ldr	r3, [pc, #40]	; (a994 <pvPortMalloc+0xb8>)
    a96c:	4798      	blx	r3
}
    a96e:	4628      	mov	r0, r5
    a970:	bd70      	pop	{r4, r5, r6, pc}
	void *            pvReturn                = NULL;
    a972:	2500      	movs	r5, #0
    a974:	e7f9      	b.n	a96a <pvPortMalloc+0x8e>
    a976:	2500      	movs	r5, #0
    a978:	e7f7      	b.n	a96a <pvPortMalloc+0x8e>
    a97a:	bf00      	nop
    a97c:	0000b699 	.word	0x0000b699
    a980:	20011c3c 	.word	0x20011c3c
    a984:	0000a8ad 	.word	0x0000a8ad
    a988:	2001279c 	.word	0x2001279c
    a98c:	20012794 	.word	0x20012794
    a990:	20000050 	.word	0x20000050
    a994:	0000b7e1 	.word	0x0000b7e1

0000a998 <vPortFree>:
	if (pv != NULL) {
    a998:	b1d0      	cbz	r0, a9d0 <vPortFree+0x38>
{
    a99a:	b570      	push	{r4, r5, r6, lr}
    a99c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    a99e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    a9a2:	4b0c      	ldr	r3, [pc, #48]	; (a9d4 <vPortFree+0x3c>)
    a9a4:	4798      	blx	r3
			prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
    a9a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
    a9aa:	4a0b      	ldr	r2, [pc, #44]	; (a9d8 <vPortFree+0x40>)
    a9ac:	e000      	b.n	a9b0 <vPortFree+0x18>
    a9ae:	461a      	mov	r2, r3
    a9b0:	6813      	ldr	r3, [r2, #0]
    a9b2:	6859      	ldr	r1, [r3, #4]
    a9b4:	428c      	cmp	r4, r1
    a9b6:	d8fa      	bhi.n	a9ae <vPortFree+0x16>
    a9b8:	f845 3c08 	str.w	r3, [r5, #-8]
    a9bc:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    a9be:	f855 1c04 	ldr.w	r1, [r5, #-4]
    a9c2:	4a06      	ldr	r2, [pc, #24]	; (a9dc <vPortFree+0x44>)
    a9c4:	6813      	ldr	r3, [r2, #0]
    a9c6:	440b      	add	r3, r1
    a9c8:	6013      	str	r3, [r2, #0]
		(void)xTaskResumeAll();
    a9ca:	4b05      	ldr	r3, [pc, #20]	; (a9e0 <vPortFree+0x48>)
    a9cc:	4798      	blx	r3
    a9ce:	bd70      	pop	{r4, r5, r6, pc}
    a9d0:	4770      	bx	lr
    a9d2:	bf00      	nop
    a9d4:	0000b699 	.word	0x0000b699
    a9d8:	20012794 	.word	0x20012794
    a9dc:	20000050 	.word	0x20000050
    a9e0:	0000b7e1 	.word	0x0000b7e1

0000a9e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    a9e4:	b510      	push	{r4, lr}
    a9e6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    a9e8:	4b06      	ldr	r3, [pc, #24]	; (aa04 <prvIsQueueFull+0x20>)
    a9ea:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    a9ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    a9ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a9f0:	429a      	cmp	r2, r3
    a9f2:	d004      	beq.n	a9fe <prvIsQueueFull+0x1a>
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
    a9f4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
    a9f6:	4b04      	ldr	r3, [pc, #16]	; (aa08 <prvIsQueueFull+0x24>)
    a9f8:	4798      	blx	r3

	return xReturn;
}
    a9fa:	4620      	mov	r0, r4
    a9fc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    a9fe:	2401      	movs	r4, #1
    aa00:	e7f9      	b.n	a9f6 <prvIsQueueFull+0x12>
    aa02:	bf00      	nop
    aa04:	0000a645 	.word	0x0000a645
    aa08:	0000a689 	.word	0x0000a689

0000aa0c <prvIsQueueEmpty>:
{
    aa0c:	b510      	push	{r4, lr}
    aa0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    aa10:	4b05      	ldr	r3, [pc, #20]	; (aa28 <prvIsQueueEmpty+0x1c>)
    aa12:	4798      	blx	r3
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    aa14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    aa16:	b123      	cbz	r3, aa22 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
    aa18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    aa1a:	4b04      	ldr	r3, [pc, #16]	; (aa2c <prvIsQueueEmpty+0x20>)
    aa1c:	4798      	blx	r3
}
    aa1e:	4620      	mov	r0, r4
    aa20:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
    aa22:	2401      	movs	r4, #1
    aa24:	e7f9      	b.n	aa1a <prvIsQueueEmpty+0xe>
    aa26:	bf00      	nop
    aa28:	0000a645 	.word	0x0000a645
    aa2c:	0000a689 	.word	0x0000a689

0000aa30 <prvCopyDataToQueue>:
{
    aa30:	b538      	push	{r3, r4, r5, lr}
    aa32:	4604      	mov	r4, r0
    aa34:	4615      	mov	r5, r2
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    aa36:	6c02      	ldr	r2, [r0, #64]	; 0x40
    aa38:	b95a      	cbnz	r2, aa52 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    aa3a:	6803      	ldr	r3, [r0, #0]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d12e      	bne.n	aa9e <prvCopyDataToQueue+0x6e>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    aa40:	6840      	ldr	r0, [r0, #4]
    aa42:	4b1b      	ldr	r3, [pc, #108]	; (aab0 <prvCopyDataToQueue+0x80>)
    aa44:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    aa46:	2300      	movs	r3, #0
    aa48:	6063      	str	r3, [r4, #4]
	++(pxQueue->uxMessagesWaiting);
    aa4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    aa4c:	3301      	adds	r3, #1
    aa4e:	63a3      	str	r3, [r4, #56]	; 0x38
}
    aa50:	bd38      	pop	{r3, r4, r5, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    aa52:	b96d      	cbnz	r5, aa70 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    aa54:	6880      	ldr	r0, [r0, #8]
    aa56:	4b17      	ldr	r3, [pc, #92]	; (aab4 <prvCopyDataToQueue+0x84>)
    aa58:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    aa5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    aa5c:	68a3      	ldr	r3, [r4, #8]
    aa5e:	4413      	add	r3, r2
    aa60:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    aa62:	6862      	ldr	r2, [r4, #4]
    aa64:	4293      	cmp	r3, r2
    aa66:	d31c      	bcc.n	aaa2 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    aa68:	6823      	ldr	r3, [r4, #0]
    aa6a:	60a3      	str	r3, [r4, #8]
	BaseType_t xReturn = pdFALSE;
    aa6c:	2000      	movs	r0, #0
    aa6e:	e7ec      	b.n	aa4a <prvCopyDataToQueue+0x1a>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    aa70:	68c0      	ldr	r0, [r0, #12]
    aa72:	4b10      	ldr	r3, [pc, #64]	; (aab4 <prvCopyDataToQueue+0x84>)
    aa74:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    aa76:	6c23      	ldr	r3, [r4, #64]	; 0x40
    aa78:	425b      	negs	r3, r3
    aa7a:	68e2      	ldr	r2, [r4, #12]
    aa7c:	441a      	add	r2, r3
    aa7e:	60e2      	str	r2, [r4, #12]
		    < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest
    aa80:	6821      	ldr	r1, [r4, #0]
		if (pxQueue->u.pcReadFrom
    aa82:	428a      	cmp	r2, r1
    aa84:	d202      	bcs.n	aa8c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    aa86:	6862      	ldr	r2, [r4, #4]
    aa88:	4413      	add	r3, r2
    aa8a:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    aa8c:	2d02      	cmp	r5, #2
    aa8e:	d10a      	bne.n	aaa6 <prvCopyDataToQueue+0x76>
			if (pxQueue->uxMessagesWaiting > (UBaseType_t)0) {
    aa90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    aa92:	b153      	cbz	r3, aaaa <prvCopyDataToQueue+0x7a>
				--(pxQueue->uxMessagesWaiting);
    aa94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    aa96:	3b01      	subs	r3, #1
    aa98:	63a3      	str	r3, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    aa9a:	2000      	movs	r0, #0
    aa9c:	e7d5      	b.n	aa4a <prvCopyDataToQueue+0x1a>
    aa9e:	2000      	movs	r0, #0
    aaa0:	e7d3      	b.n	aa4a <prvCopyDataToQueue+0x1a>
    aaa2:	2000      	movs	r0, #0
    aaa4:	e7d1      	b.n	aa4a <prvCopyDataToQueue+0x1a>
    aaa6:	2000      	movs	r0, #0
    aaa8:	e7cf      	b.n	aa4a <prvCopyDataToQueue+0x1a>
    aaaa:	2000      	movs	r0, #0
    aaac:	e7cd      	b.n	aa4a <prvCopyDataToQueue+0x1a>
    aaae:	bf00      	nop
    aab0:	0000bd61 	.word	0x0000bd61
    aab4:	0000cd53 	.word	0x0000cd53

0000aab8 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    aab8:	b530      	push	{r4, r5, lr}
    aaba:	b083      	sub	sp, #12
    aabc:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    aabe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    aac0:	b164      	cbz	r4, aadc <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    aac2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    aac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    aac6:	429a      	cmp	r2, r3
    aac8:	d311      	bcc.n	aaee <prvNotifyQueueSetContainer+0x36>
    aaca:	f04f 0380 	mov.w	r3, #128	; 0x80
    aace:	f383 8811 	msr	BASEPRI, r3
    aad2:	f3bf 8f6f 	isb	sy
    aad6:	f3bf 8f4f 	dsb	sy
    aada:	e7fe      	b.n	aada <prvNotifyQueueSetContainer+0x22>
    aadc:	f04f 0380 	mov.w	r3, #128	; 0x80
    aae0:	f383 8811 	msr	BASEPRI, r3
    aae4:	f3bf 8f6f 	isb	sy
    aae8:	f3bf 8f4f 	dsb	sy
    aaec:	e7fe      	b.n	aaec <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    aaee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    aaf0:	4293      	cmp	r3, r2
    aaf2:	d803      	bhi.n	aafc <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    aaf4:	2500      	movs	r5, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    aaf6:	4628      	mov	r0, r5
    aaf8:	b003      	add	sp, #12
    aafa:	bd30      	pop	{r4, r5, pc}
    aafc:	460a      	mov	r2, r1
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    aafe:	a901      	add	r1, sp, #4
    ab00:	4620      	mov	r0, r4
    ab02:	4b0b      	ldr	r3, [pc, #44]	; (ab30 <prvNotifyQueueSetContainer+0x78>)
    ab04:	4798      	blx	r3
    ab06:	4605      	mov	r5, r0
		if (pxQueueSetContainer->xTxLock == queueUNLOCKED) {
    ab08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ab0e:	d10a      	bne.n	ab26 <prvNotifyQueueSetContainer+0x6e>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    ab10:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ab12:	2b00      	cmp	r3, #0
    ab14:	d0ef      	beq.n	aaf6 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    ab16:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ab1a:	4b06      	ldr	r3, [pc, #24]	; (ab34 <prvNotifyQueueSetContainer+0x7c>)
    ab1c:	4798      	blx	r3
    ab1e:	2800      	cmp	r0, #0
    ab20:	d0e9      	beq.n	aaf6 <prvNotifyQueueSetContainer+0x3e>
					xReturn = pdTRUE;
    ab22:	2501      	movs	r5, #1
	return xReturn;
    ab24:	e7e7      	b.n	aaf6 <prvNotifyQueueSetContainer+0x3e>
			(pxQueueSetContainer->xTxLock)++;
    ab26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ab28:	3301      	adds	r3, #1
    ab2a:	64a3      	str	r3, [r4, #72]	; 0x48
    ab2c:	e7e3      	b.n	aaf6 <prvNotifyQueueSetContainer+0x3e>
    ab2e:	bf00      	nop
    ab30:	0000aa31 	.word	0x0000aa31
    ab34:	0000bb59 	.word	0x0000bb59

0000ab38 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    ab38:	6c02      	ldr	r2, [r0, #64]	; 0x40
    ab3a:	b172      	cbz	r2, ab5a <prvCopyDataFromQueue+0x22>
{
    ab3c:	b510      	push	{r4, lr}
    ab3e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    ab40:	68c4      	ldr	r4, [r0, #12]
    ab42:	4414      	add	r4, r2
    ab44:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    ab46:	6840      	ldr	r0, [r0, #4]
    ab48:	4284      	cmp	r4, r0
    ab4a:	d301      	bcc.n	ab50 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    ab4c:	6818      	ldr	r0, [r3, #0]
    ab4e:	60d8      	str	r0, [r3, #12]
    ab50:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    ab52:	68d9      	ldr	r1, [r3, #12]
    ab54:	4b01      	ldr	r3, [pc, #4]	; (ab5c <prvCopyDataFromQueue+0x24>)
    ab56:	4798      	blx	r3
    ab58:	bd10      	pop	{r4, pc}
    ab5a:	4770      	bx	lr
    ab5c:	0000cd53 	.word	0x0000cd53

0000ab60 <prvUnlockQueue>:
{
    ab60:	b510      	push	{r4, lr}
    ab62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    ab64:	4b1e      	ldr	r3, [pc, #120]	; (abe0 <prvUnlockQueue+0x80>)
    ab66:	4798      	blx	r3
		while (pxQueue->xTxLock > queueLOCKED_UNMODIFIED) {
    ab68:	e009      	b.n	ab7e <prvUnlockQueue+0x1e>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    ab6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ab6c:	b1cb      	cbz	r3, aba2 <prvUnlockQueue+0x42>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    ab6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ab72:	4b1c      	ldr	r3, [pc, #112]	; (abe4 <prvUnlockQueue+0x84>)
    ab74:	4798      	blx	r3
    ab76:	b988      	cbnz	r0, ab9c <prvUnlockQueue+0x3c>
			--(pxQueue->xTxLock);
    ab78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ab7a:	3b01      	subs	r3, #1
    ab7c:	64a3      	str	r3, [r4, #72]	; 0x48
		while (pxQueue->xTxLock > queueLOCKED_UNMODIFIED) {
    ab7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ab80:	2b00      	cmp	r3, #0
    ab82:	dd0e      	ble.n	aba2 <prvUnlockQueue+0x42>
				if (pxQueue->pxQueueSetContainer != NULL) {
    ab84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ab86:	2b00      	cmp	r3, #0
    ab88:	d0ef      	beq.n	ab6a <prvUnlockQueue+0xa>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) == pdTRUE) {
    ab8a:	2100      	movs	r1, #0
    ab8c:	4620      	mov	r0, r4
    ab8e:	4b16      	ldr	r3, [pc, #88]	; (abe8 <prvUnlockQueue+0x88>)
    ab90:	4798      	blx	r3
    ab92:	2801      	cmp	r0, #1
    ab94:	d1f0      	bne.n	ab78 <prvUnlockQueue+0x18>
						vTaskMissedYield();
    ab96:	4b15      	ldr	r3, [pc, #84]	; (abec <prvUnlockQueue+0x8c>)
    ab98:	4798      	blx	r3
    ab9a:	e7ed      	b.n	ab78 <prvUnlockQueue+0x18>
							vTaskMissedYield();
    ab9c:	4b13      	ldr	r3, [pc, #76]	; (abec <prvUnlockQueue+0x8c>)
    ab9e:	4798      	blx	r3
    aba0:	e7ea      	b.n	ab78 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
    aba2:	f04f 33ff 	mov.w	r3, #4294967295
    aba6:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
    aba8:	4b11      	ldr	r3, [pc, #68]	; (abf0 <prvUnlockQueue+0x90>)
    abaa:	4798      	blx	r3
	taskENTER_CRITICAL();
    abac:	4b0c      	ldr	r3, [pc, #48]	; (abe0 <prvUnlockQueue+0x80>)
    abae:	4798      	blx	r3
		while (pxQueue->xRxLock > queueLOCKED_UNMODIFIED) {
    abb0:	e002      	b.n	abb8 <prvUnlockQueue+0x58>
				--(pxQueue->xRxLock);
    abb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    abb4:	3b01      	subs	r3, #1
    abb6:	6463      	str	r3, [r4, #68]	; 0x44
		while (pxQueue->xRxLock > queueLOCKED_UNMODIFIED) {
    abb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    abba:	2b00      	cmp	r3, #0
    abbc:	dd0a      	ble.n	abd4 <prvUnlockQueue+0x74>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    abbe:	6923      	ldr	r3, [r4, #16]
    abc0:	b143      	cbz	r3, abd4 <prvUnlockQueue+0x74>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    abc2:	f104 0010 	add.w	r0, r4, #16
    abc6:	4b07      	ldr	r3, [pc, #28]	; (abe4 <prvUnlockQueue+0x84>)
    abc8:	4798      	blx	r3
    abca:	2800      	cmp	r0, #0
    abcc:	d0f1      	beq.n	abb2 <prvUnlockQueue+0x52>
					vTaskMissedYield();
    abce:	4b07      	ldr	r3, [pc, #28]	; (abec <prvUnlockQueue+0x8c>)
    abd0:	4798      	blx	r3
    abd2:	e7ee      	b.n	abb2 <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
    abd4:	f04f 33ff 	mov.w	r3, #4294967295
    abd8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
    abda:	4b05      	ldr	r3, [pc, #20]	; (abf0 <prvUnlockQueue+0x90>)
    abdc:	4798      	blx	r3
    abde:	bd10      	pop	{r4, pc}
    abe0:	0000a645 	.word	0x0000a645
    abe4:	0000bb59 	.word	0x0000bb59
    abe8:	0000aab9 	.word	0x0000aab9
    abec:	0000bc9d 	.word	0x0000bc9d
    abf0:	0000a689 	.word	0x0000a689

0000abf4 <xQueueGenericReset>:
{
    abf4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    abf6:	b308      	cbz	r0, ac3c <xQueueGenericReset+0x48>
    abf8:	4604      	mov	r4, r0
    abfa:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    abfc:	4b1c      	ldr	r3, [pc, #112]	; (ac70 <xQueueGenericReset+0x7c>)
    abfe:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    ac00:	6821      	ldr	r1, [r4, #0]
    ac02:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    ac04:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ac06:	fb03 1002 	mla	r0, r3, r2, r1
    ac0a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    ac0c:	2000      	movs	r0, #0
    ac0e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    ac10:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    ac12:	3a01      	subs	r2, #1
    ac14:	fb02 1303 	mla	r3, r2, r3, r1
    ac18:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock           = queueUNLOCKED;
    ac1a:	f04f 33ff 	mov.w	r3, #4294967295
    ac1e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock           = queueUNLOCKED;
    ac20:	64a3      	str	r3, [r4, #72]	; 0x48
		if (xNewQueue == pdFALSE) {
    ac22:	b9ed      	cbnz	r5, ac60 <xQueueGenericReset+0x6c>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    ac24:	6923      	ldr	r3, [r4, #16]
    ac26:	b12b      	cbz	r3, ac34 <xQueueGenericReset+0x40>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) == pdTRUE) {
    ac28:	f104 0010 	add.w	r0, r4, #16
    ac2c:	4b11      	ldr	r3, [pc, #68]	; (ac74 <xQueueGenericReset+0x80>)
    ac2e:	4798      	blx	r3
    ac30:	2801      	cmp	r0, #1
    ac32:	d00c      	beq.n	ac4e <xQueueGenericReset+0x5a>
	taskEXIT_CRITICAL();
    ac34:	4b10      	ldr	r3, [pc, #64]	; (ac78 <xQueueGenericReset+0x84>)
    ac36:	4798      	blx	r3
}
    ac38:	2001      	movs	r0, #1
    ac3a:	bd38      	pop	{r3, r4, r5, pc}
    ac3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    ac40:	f383 8811 	msr	BASEPRI, r3
    ac44:	f3bf 8f6f 	isb	sy
    ac48:	f3bf 8f4f 	dsb	sy
    ac4c:	e7fe      	b.n	ac4c <xQueueGenericReset+0x58>
					queueYIELD_IF_USING_PREEMPTION();
    ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ac52:	4b0a      	ldr	r3, [pc, #40]	; (ac7c <xQueueGenericReset+0x88>)
    ac54:	601a      	str	r2, [r3, #0]
    ac56:	f3bf 8f4f 	dsb	sy
    ac5a:	f3bf 8f6f 	isb	sy
    ac5e:	e7e9      	b.n	ac34 <xQueueGenericReset+0x40>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    ac60:	f104 0010 	add.w	r0, r4, #16
    ac64:	4d06      	ldr	r5, [pc, #24]	; (ac80 <xQueueGenericReset+0x8c>)
    ac66:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    ac68:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ac6c:	47a8      	blx	r5
    ac6e:	e7e1      	b.n	ac34 <xQueueGenericReset+0x40>
    ac70:	0000a645 	.word	0x0000a645
    ac74:	0000bb59 	.word	0x0000bb59
    ac78:	0000a689 	.word	0x0000a689
    ac7c:	e000ed04 	.word	0xe000ed04
    ac80:	0000a505 	.word	0x0000a505

0000ac84 <xQueueGenericCreate>:
{
    ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    ac86:	b940      	cbnz	r0, ac9a <xQueueGenericCreate+0x16>
    ac88:	f04f 0380 	mov.w	r3, #128	; 0x80
    ac8c:	f383 8811 	msr	BASEPRI, r3
    ac90:	f3bf 8f6f 	isb	sy
    ac94:	f3bf 8f4f 	dsb	sy
    ac98:	e7fe      	b.n	ac98 <xQueueGenericCreate+0x14>
    ac9a:	4606      	mov	r6, r0
	if (uxItemSize == (UBaseType_t)0) {
    ac9c:	b119      	cbz	r1, aca6 <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = (size_t)(uxQueueLength * uxItemSize)
    ac9e:	fb01 f000 	mul.w	r0, r1, r0
    aca2:	3001      	adds	r0, #1
    aca4:	e000      	b.n	aca8 <xQueueGenericCreate+0x24>
		xQueueSizeInBytes = (size_t)0;
    aca6:	2000      	movs	r0, #0
    aca8:	4617      	mov	r7, r2
    acaa:	460d      	mov	r5, r1
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    acac:	3058      	adds	r0, #88	; 0x58
    acae:	4b11      	ldr	r3, [pc, #68]	; (acf4 <xQueueGenericCreate+0x70>)
    acb0:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    acb2:	4604      	mov	r4, r0
    acb4:	b190      	cbz	r0, acdc <xQueueGenericCreate+0x58>
		if (uxItemSize == (UBaseType_t)0) {
    acb6:	b96d      	cbnz	r5, acd4 <xQueueGenericCreate+0x50>
			pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    acb8:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength   = uxQueueLength;
    acba:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
    acbc:	6425      	str	r5, [r4, #64]	; 0x40
		(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    acbe:	2101      	movs	r1, #1
    acc0:	4620      	mov	r0, r4
    acc2:	4b0d      	ldr	r3, [pc, #52]	; (acf8 <xQueueGenericCreate+0x74>)
    acc4:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
    acc6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
    acca:	2300      	movs	r3, #0
    accc:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
    acce:	4620      	mov	r0, r4
	configASSERT(xReturn);
    acd0:	b130      	cbz	r0, ace0 <xQueueGenericCreate+0x5c>
}
    acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ((int8_t *)pxNewQueue) + sizeof(Queue_t);
    acd4:	f100 0358 	add.w	r3, r0, #88	; 0x58
    acd8:	6003      	str	r3, [r0, #0]
    acda:	e7ee      	b.n	acba <xQueueGenericCreate+0x36>
	QueueHandle_t xReturn = NULL;
    acdc:	2000      	movs	r0, #0
    acde:	e7f7      	b.n	acd0 <xQueueGenericCreate+0x4c>
    ace0:	f04f 0380 	mov.w	r3, #128	; 0x80
    ace4:	f383 8811 	msr	BASEPRI, r3
    ace8:	f3bf 8f6f 	isb	sy
    acec:	f3bf 8f4f 	dsb	sy
    acf0:	e7fe      	b.n	acf0 <xQueueGenericCreate+0x6c>
    acf2:	bf00      	nop
    acf4:	0000a8dd 	.word	0x0000a8dd
    acf8:	0000abf5 	.word	0x0000abf5

0000acfc <xQueueCreateCountingSemaphore>:
	configASSERT(uxMaxCount != 0);
    acfc:	b940      	cbnz	r0, ad10 <xQueueCreateCountingSemaphore+0x14>
    acfe:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad02:	f383 8811 	msr	BASEPRI, r3
    ad06:	f3bf 8f6f 	isb	sy
    ad0a:	f3bf 8f4f 	dsb	sy
    ad0e:	e7fe      	b.n	ad0e <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    ad10:	4288      	cmp	r0, r1
    ad12:	d208      	bcs.n	ad26 <xQueueCreateCountingSemaphore+0x2a>
    ad14:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad18:	f383 8811 	msr	BASEPRI, r3
    ad1c:	f3bf 8f6f 	isb	sy
    ad20:	f3bf 8f4f 	dsb	sy
    ad24:	e7fe      	b.n	ad24 <xQueueCreateCountingSemaphore+0x28>
{
    ad26:	b510      	push	{r4, lr}
    ad28:	460c      	mov	r4, r1
	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    ad2a:	2202      	movs	r2, #2
    ad2c:	2100      	movs	r1, #0
    ad2e:	4b08      	ldr	r3, [pc, #32]	; (ad50 <xQueueCreateCountingSemaphore+0x54>)
    ad30:	4798      	blx	r3
	if (xHandle != NULL) {
    ad32:	4603      	mov	r3, r0
    ad34:	b100      	cbz	r0, ad38 <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    ad36:	6384      	str	r4, [r0, #56]	; 0x38
	configASSERT(xHandle);
    ad38:	b943      	cbnz	r3, ad4c <xQueueCreateCountingSemaphore+0x50>
    ad3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad3e:	f383 8811 	msr	BASEPRI, r3
    ad42:	f3bf 8f6f 	isb	sy
    ad46:	f3bf 8f4f 	dsb	sy
    ad4a:	e7fe      	b.n	ad4a <xQueueCreateCountingSemaphore+0x4e>
}
    ad4c:	4618      	mov	r0, r3
    ad4e:	bd10      	pop	{r4, pc}
    ad50:	0000ac85 	.word	0x0000ac85

0000ad54 <xQueueGenericSend>:
{
    ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad56:	b085      	sub	sp, #20
    ad58:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    ad5a:	b160      	cbz	r0, ad76 <xQueueGenericSend+0x22>
    ad5c:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    ad5e:	b199      	cbz	r1, ad88 <xQueueGenericSend+0x34>
    ad60:	2501      	movs	r5, #1
    ad62:	b9bd      	cbnz	r5, ad94 <xQueueGenericSend+0x40>
    ad64:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad68:	f383 8811 	msr	BASEPRI, r3
    ad6c:	f3bf 8f6f 	isb	sy
    ad70:	f3bf 8f4f 	dsb	sy
    ad74:	e7fe      	b.n	ad74 <xQueueGenericSend+0x20>
    ad76:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad7a:	f383 8811 	msr	BASEPRI, r3
    ad7e:	f3bf 8f6f 	isb	sy
    ad82:	f3bf 8f4f 	dsb	sy
    ad86:	e7fe      	b.n	ad86 <xQueueGenericSend+0x32>
    ad88:	6c02      	ldr	r2, [r0, #64]	; 0x40
    ad8a:	b90a      	cbnz	r2, ad90 <xQueueGenericSend+0x3c>
    ad8c:	2501      	movs	r5, #1
    ad8e:	e7e8      	b.n	ad62 <xQueueGenericSend+0xe>
    ad90:	2500      	movs	r5, #0
    ad92:	e7e6      	b.n	ad62 <xQueueGenericSend+0xe>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    ad94:	2b02      	cmp	r3, #2
    ad96:	d009      	beq.n	adac <xQueueGenericSend+0x58>
    ad98:	b96d      	cbnz	r5, adb6 <xQueueGenericSend+0x62>
    ad9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    ad9e:	f383 8811 	msr	BASEPRI, r3
    ada2:	f3bf 8f6f 	isb	sy
    ada6:	f3bf 8f4f 	dsb	sy
    adaa:	e7fe      	b.n	adaa <xQueueGenericSend+0x56>
    adac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    adae:	2a01      	cmp	r2, #1
    adb0:	d0f2      	beq.n	ad98 <xQueueGenericSend+0x44>
    adb2:	2500      	movs	r5, #0
    adb4:	e7f0      	b.n	ad98 <xQueueGenericSend+0x44>
    adb6:	461e      	mov	r6, r3
    adb8:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    adba:	4b4d      	ldr	r3, [pc, #308]	; (aef0 <xQueueGenericSend+0x19c>)
    adbc:	4798      	blx	r3
    adbe:	b910      	cbnz	r0, adc6 <xQueueGenericSend+0x72>
    adc0:	9b01      	ldr	r3, [sp, #4]
    adc2:	b103      	cbz	r3, adc6 <xQueueGenericSend+0x72>
    adc4:	2500      	movs	r5, #0
    adc6:	b945      	cbnz	r5, adda <xQueueGenericSend+0x86>
    adc8:	f04f 0380 	mov.w	r3, #128	; 0x80
    adcc:	f383 8811 	msr	BASEPRI, r3
    add0:	f3bf 8f6f 	isb	sy
    add4:	f3bf 8f4f 	dsb	sy
    add8:	e7fe      	b.n	add8 <xQueueGenericSend+0x84>
    adda:	2500      	movs	r5, #0
    addc:	e03e      	b.n	ae5c <xQueueGenericSend+0x108>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    adde:	4632      	mov	r2, r6
    ade0:	4639      	mov	r1, r7
    ade2:	4620      	mov	r0, r4
    ade4:	4b43      	ldr	r3, [pc, #268]	; (aef4 <xQueueGenericSend+0x1a0>)
    ade6:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    ade8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    adea:	b193      	cbz	r3, ae12 <xQueueGenericSend+0xbe>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) == pdTRUE) {
    adec:	4631      	mov	r1, r6
    adee:	4620      	mov	r0, r4
    adf0:	4b41      	ldr	r3, [pc, #260]	; (aef8 <xQueueGenericSend+0x1a4>)
    adf2:	4798      	blx	r3
    adf4:	2801      	cmp	r0, #1
    adf6:	d107      	bne.n	ae08 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
    adf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    adfc:	4b3f      	ldr	r3, [pc, #252]	; (aefc <xQueueGenericSend+0x1a8>)
    adfe:	601a      	str	r2, [r3, #0]
    ae00:	f3bf 8f4f 	dsb	sy
    ae04:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    ae08:	4b3d      	ldr	r3, [pc, #244]	; (af00 <xQueueGenericSend+0x1ac>)
    ae0a:	4798      	blx	r3
				return pdPASS;
    ae0c:	2001      	movs	r0, #1
}
    ae0e:	b005      	add	sp, #20
    ae10:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    ae12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ae14:	b173      	cbz	r3, ae34 <xQueueGenericSend+0xe0>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) == pdTRUE) {
    ae16:	f104 0024 	add.w	r0, r4, #36	; 0x24
    ae1a:	4b3a      	ldr	r3, [pc, #232]	; (af04 <xQueueGenericSend+0x1b0>)
    ae1c:	4798      	blx	r3
    ae1e:	2801      	cmp	r0, #1
    ae20:	d1f2      	bne.n	ae08 <xQueueGenericSend+0xb4>
								queueYIELD_IF_USING_PREEMPTION();
    ae22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ae26:	4b35      	ldr	r3, [pc, #212]	; (aefc <xQueueGenericSend+0x1a8>)
    ae28:	601a      	str	r2, [r3, #0]
    ae2a:	f3bf 8f4f 	dsb	sy
    ae2e:	f3bf 8f6f 	isb	sy
    ae32:	e7e9      	b.n	ae08 <xQueueGenericSend+0xb4>
						} else if (xYieldRequired != pdFALSE) {
    ae34:	2800      	cmp	r0, #0
    ae36:	d0e7      	beq.n	ae08 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
    ae38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ae3c:	4b2f      	ldr	r3, [pc, #188]	; (aefc <xQueueGenericSend+0x1a8>)
    ae3e:	601a      	str	r2, [r3, #0]
    ae40:	f3bf 8f4f 	dsb	sy
    ae44:	f3bf 8f6f 	isb	sy
    ae48:	e7de      	b.n	ae08 <xQueueGenericSend+0xb4>
					taskEXIT_CRITICAL();
    ae4a:	4b2d      	ldr	r3, [pc, #180]	; (af00 <xQueueGenericSend+0x1ac>)
    ae4c:	4798      	blx	r3
					return errQUEUE_FULL;
    ae4e:	2000      	movs	r0, #0
    ae50:	e7dd      	b.n	ae0e <xQueueGenericSend+0xba>
				prvUnlockQueue(pxQueue);
    ae52:	4620      	mov	r0, r4
    ae54:	4b2c      	ldr	r3, [pc, #176]	; (af08 <xQueueGenericSend+0x1b4>)
    ae56:	4798      	blx	r3
				(void)xTaskResumeAll();
    ae58:	4b2c      	ldr	r3, [pc, #176]	; (af0c <xQueueGenericSend+0x1b8>)
    ae5a:	4798      	blx	r3
		taskENTER_CRITICAL();
    ae5c:	4b2c      	ldr	r3, [pc, #176]	; (af10 <xQueueGenericSend+0x1bc>)
    ae5e:	4798      	blx	r3
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    ae60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    ae62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ae64:	429a      	cmp	r2, r3
    ae66:	d3ba      	bcc.n	adde <xQueueGenericSend+0x8a>
    ae68:	2e02      	cmp	r6, #2
    ae6a:	d0b8      	beq.n	adde <xQueueGenericSend+0x8a>
				if (xTicksToWait == (TickType_t)0) {
    ae6c:	9b01      	ldr	r3, [sp, #4]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d0eb      	beq.n	ae4a <xQueueGenericSend+0xf6>
				} else if (xEntryTimeSet == pdFALSE) {
    ae72:	b91d      	cbnz	r5, ae7c <xQueueGenericSend+0x128>
					vTaskSetTimeOutState(&xTimeOut);
    ae74:	a802      	add	r0, sp, #8
    ae76:	4b27      	ldr	r3, [pc, #156]	; (af14 <xQueueGenericSend+0x1c0>)
    ae78:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    ae7a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    ae7c:	4b20      	ldr	r3, [pc, #128]	; (af00 <xQueueGenericSend+0x1ac>)
    ae7e:	4798      	blx	r3
		vTaskSuspendAll();
    ae80:	4b25      	ldr	r3, [pc, #148]	; (af18 <xQueueGenericSend+0x1c4>)
    ae82:	4798      	blx	r3
		prvLockQueue(pxQueue);
    ae84:	4b22      	ldr	r3, [pc, #136]	; (af10 <xQueueGenericSend+0x1bc>)
    ae86:	4798      	blx	r3
    ae88:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ae8e:	d101      	bne.n	ae94 <xQueueGenericSend+0x140>
    ae90:	2300      	movs	r3, #0
    ae92:	6463      	str	r3, [r4, #68]	; 0x44
    ae94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ae96:	f1b3 3fff 	cmp.w	r3, #4294967295
    ae9a:	d101      	bne.n	aea0 <xQueueGenericSend+0x14c>
    ae9c:	2300      	movs	r3, #0
    ae9e:	64a3      	str	r3, [r4, #72]	; 0x48
    aea0:	4b17      	ldr	r3, [pc, #92]	; (af00 <xQueueGenericSend+0x1ac>)
    aea2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    aea4:	a901      	add	r1, sp, #4
    aea6:	a802      	add	r0, sp, #8
    aea8:	4b1c      	ldr	r3, [pc, #112]	; (af1c <xQueueGenericSend+0x1c8>)
    aeaa:	4798      	blx	r3
    aeac:	b9c8      	cbnz	r0, aee2 <xQueueGenericSend+0x18e>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    aeae:	4620      	mov	r0, r4
    aeb0:	4b1b      	ldr	r3, [pc, #108]	; (af20 <xQueueGenericSend+0x1cc>)
    aeb2:	4798      	blx	r3
    aeb4:	2800      	cmp	r0, #0
    aeb6:	d0cc      	beq.n	ae52 <xQueueGenericSend+0xfe>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    aeb8:	9901      	ldr	r1, [sp, #4]
    aeba:	f104 0010 	add.w	r0, r4, #16
    aebe:	4b19      	ldr	r3, [pc, #100]	; (af24 <xQueueGenericSend+0x1d0>)
    aec0:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    aec2:	4620      	mov	r0, r4
    aec4:	4b10      	ldr	r3, [pc, #64]	; (af08 <xQueueGenericSend+0x1b4>)
    aec6:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    aec8:	4b10      	ldr	r3, [pc, #64]	; (af0c <xQueueGenericSend+0x1b8>)
    aeca:	4798      	blx	r3
    aecc:	2800      	cmp	r0, #0
    aece:	d1c5      	bne.n	ae5c <xQueueGenericSend+0x108>
					portYIELD_WITHIN_API();
    aed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    aed4:	4b09      	ldr	r3, [pc, #36]	; (aefc <xQueueGenericSend+0x1a8>)
    aed6:	601a      	str	r2, [r3, #0]
    aed8:	f3bf 8f4f 	dsb	sy
    aedc:	f3bf 8f6f 	isb	sy
    aee0:	e7bc      	b.n	ae5c <xQueueGenericSend+0x108>
			prvUnlockQueue(pxQueue);
    aee2:	4620      	mov	r0, r4
    aee4:	4b08      	ldr	r3, [pc, #32]	; (af08 <xQueueGenericSend+0x1b4>)
    aee6:	4798      	blx	r3
			(void)xTaskResumeAll();
    aee8:	4b08      	ldr	r3, [pc, #32]	; (af0c <xQueueGenericSend+0x1b8>)
    aeea:	4798      	blx	r3
			return errQUEUE_FULL;
    aeec:	2000      	movs	r0, #0
    aeee:	e78e      	b.n	ae0e <xQueueGenericSend+0xba>
    aef0:	0000bcad 	.word	0x0000bcad
    aef4:	0000aa31 	.word	0x0000aa31
    aef8:	0000aab9 	.word	0x0000aab9
    aefc:	e000ed04 	.word	0xe000ed04
    af00:	0000a689 	.word	0x0000a689
    af04:	0000bb59 	.word	0x0000bb59
    af08:	0000ab61 	.word	0x0000ab61
    af0c:	0000b7e1 	.word	0x0000b7e1
    af10:	0000a645 	.word	0x0000a645
    af14:	0000bbe9 	.word	0x0000bbe9
    af18:	0000b699 	.word	0x0000b699
    af1c:	0000bc11 	.word	0x0000bc11
    af20:	0000a9e5 	.word	0x0000a9e5
    af24:	0000ba95 	.word	0x0000ba95

0000af28 <xQueueGenericSendFromISR>:
	configASSERT(pxQueue);
    af28:	b170      	cbz	r0, af48 <xQueueGenericSendFromISR+0x20>
{
    af2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af2e:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    af30:	b199      	cbz	r1, af5a <xQueueGenericSendFromISR+0x32>
    af32:	2001      	movs	r0, #1
    af34:	b9b8      	cbnz	r0, af66 <xQueueGenericSendFromISR+0x3e>
    af36:	f04f 0380 	mov.w	r3, #128	; 0x80
    af3a:	f383 8811 	msr	BASEPRI, r3
    af3e:	f3bf 8f6f 	isb	sy
    af42:	f3bf 8f4f 	dsb	sy
    af46:	e7fe      	b.n	af46 <xQueueGenericSendFromISR+0x1e>
    af48:	f04f 0380 	mov.w	r3, #128	; 0x80
    af4c:	f383 8811 	msr	BASEPRI, r3
    af50:	f3bf 8f6f 	isb	sy
    af54:	f3bf 8f4f 	dsb	sy
    af58:	e7fe      	b.n	af58 <xQueueGenericSendFromISR+0x30>
    af5a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    af5c:	b908      	cbnz	r0, af62 <xQueueGenericSendFromISR+0x3a>
    af5e:	2001      	movs	r0, #1
    af60:	e7e8      	b.n	af34 <xQueueGenericSendFromISR+0xc>
    af62:	2000      	movs	r0, #0
    af64:	e7e6      	b.n	af34 <xQueueGenericSendFromISR+0xc>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    af66:	2b02      	cmp	r3, #2
    af68:	d009      	beq.n	af7e <xQueueGenericSendFromISR+0x56>
    af6a:	b968      	cbnz	r0, af88 <xQueueGenericSendFromISR+0x60>
    af6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    af70:	f383 8811 	msr	BASEPRI, r3
    af74:	f3bf 8f6f 	isb	sy
    af78:	f3bf 8f4f 	dsb	sy
    af7c:	e7fe      	b.n	af7c <xQueueGenericSendFromISR+0x54>
    af7e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    af80:	2d01      	cmp	r5, #1
    af82:	d0f2      	beq.n	af6a <xQueueGenericSendFromISR+0x42>
    af84:	2000      	movs	r0, #0
    af86:	e7f0      	b.n	af6a <xQueueGenericSendFromISR+0x42>
    af88:	461e      	mov	r6, r3
    af8a:	4615      	mov	r5, r2
    af8c:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    af8e:	4b22      	ldr	r3, [pc, #136]	; (b018 <xQueueGenericSendFromISR+0xf0>)
    af90:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    af92:	f3ef 8711 	mrs	r7, BASEPRI
    af96:	f04f 0380 	mov.w	r3, #128	; 0x80
    af9a:	f383 8811 	msr	BASEPRI, r3
    af9e:	f3bf 8f6f 	isb	sy
    afa2:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    afa6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    afa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    afaa:	429a      	cmp	r2, r3
    afac:	d301      	bcc.n	afb2 <xQueueGenericSendFromISR+0x8a>
    afae:	2e02      	cmp	r6, #2
    afb0:	d126      	bne.n	b000 <xQueueGenericSendFromISR+0xd8>
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    afb2:	4632      	mov	r2, r6
    afb4:	4641      	mov	r1, r8
    afb6:	4620      	mov	r0, r4
    afb8:	4b18      	ldr	r3, [pc, #96]	; (b01c <xQueueGenericSendFromISR+0xf4>)
    afba:	4798      	blx	r3
			if (pxQueue->xTxLock == queueUNLOCKED) {
    afbc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
    afc2:	d118      	bne.n	aff6 <xQueueGenericSendFromISR+0xce>
					if (pxQueue->pxQueueSetContainer != NULL) {
    afc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    afc6:	b15b      	cbz	r3, afe0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) == pdTRUE) {
    afc8:	4631      	mov	r1, r6
    afca:	4620      	mov	r0, r4
    afcc:	4b14      	ldr	r3, [pc, #80]	; (b020 <xQueueGenericSendFromISR+0xf8>)
    afce:	4798      	blx	r3
    afd0:	2801      	cmp	r0, #1
    afd2:	d117      	bne.n	b004 <xQueueGenericSendFromISR+0xdc>
							if (pxHigherPriorityTaskWoken != NULL) {
    afd4:	b1c5      	cbz	r5, b008 <xQueueGenericSendFromISR+0xe0>
								*pxHigherPriorityTaskWoken = pdTRUE;
    afd6:	6028      	str	r0, [r5, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    afd8:	f387 8811 	msr	BASEPRI, r7
}
    afdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    afe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afe2:	b19b      	cbz	r3, b00c <xQueueGenericSendFromISR+0xe4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    afe4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    afe8:	4b0e      	ldr	r3, [pc, #56]	; (b024 <xQueueGenericSendFromISR+0xfc>)
    afea:	4798      	blx	r3
    afec:	b180      	cbz	r0, b010 <xQueueGenericSendFromISR+0xe8>
								if (pxHigherPriorityTaskWoken != NULL) {
    afee:	b18d      	cbz	r5, b014 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
    aff0:	2001      	movs	r0, #1
    aff2:	6028      	str	r0, [r5, #0]
    aff4:	e7f0      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
				++(pxQueue->xTxLock);
    aff6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    aff8:	3301      	adds	r3, #1
    affa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
    affc:	2001      	movs	r0, #1
    affe:	e7eb      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
			xReturn = errQUEUE_FULL;
    b000:	2000      	movs	r0, #0
    b002:	e7e9      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
    b004:	2001      	movs	r0, #1
    b006:	e7e7      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
    b008:	2001      	movs	r0, #1
    b00a:	e7e5      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
    b00c:	2001      	movs	r0, #1
    b00e:	e7e3      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
    b010:	2001      	movs	r0, #1
    b012:	e7e1      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
    b014:	2001      	movs	r0, #1
    b016:	e7df      	b.n	afd8 <xQueueGenericSendFromISR+0xb0>
    b018:	0000a855 	.word	0x0000a855
    b01c:	0000aa31 	.word	0x0000aa31
    b020:	0000aab9 	.word	0x0000aab9
    b024:	0000bb59 	.word	0x0000bb59

0000b028 <xQueueGiveFromISR>:
	configASSERT(pxQueue);
    b028:	b160      	cbz	r0, b044 <xQueueGiveFromISR+0x1c>
{
    b02a:	b570      	push	{r4, r5, r6, lr}
    b02c:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    b02e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    b030:	b18b      	cbz	r3, b056 <xQueueGiveFromISR+0x2e>
	__asm volatile("	mov %0, %1												\n"
    b032:	f04f 0380 	mov.w	r3, #128	; 0x80
    b036:	f383 8811 	msr	BASEPRI, r3
    b03a:	f3bf 8f6f 	isb	sy
    b03e:	f3bf 8f4f 	dsb	sy
    b042:	e7fe      	b.n	b042 <xQueueGiveFromISR+0x1a>
    b044:	f04f 0380 	mov.w	r3, #128	; 0x80
    b048:	f383 8811 	msr	BASEPRI, r3
    b04c:	f3bf 8f6f 	isb	sy
    b050:	f3bf 8f4f 	dsb	sy
    b054:	e7fe      	b.n	b054 <xQueueGiveFromISR+0x2c>
	configASSERT(!((pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) && (pxQueue->pxMutexHolder != NULL)));
    b056:	6803      	ldr	r3, [r0, #0]
    b058:	b153      	cbz	r3, b070 <xQueueGiveFromISR+0x48>
    b05a:	2301      	movs	r3, #1
    b05c:	b973      	cbnz	r3, b07c <xQueueGiveFromISR+0x54>
    b05e:	f04f 0380 	mov.w	r3, #128	; 0x80
    b062:	f383 8811 	msr	BASEPRI, r3
    b066:	f3bf 8f6f 	isb	sy
    b06a:	f3bf 8f4f 	dsb	sy
    b06e:	e7fe      	b.n	b06e <xQueueGiveFromISR+0x46>
    b070:	6843      	ldr	r3, [r0, #4]
    b072:	b90b      	cbnz	r3, b078 <xQueueGiveFromISR+0x50>
    b074:	2301      	movs	r3, #1
    b076:	e7f1      	b.n	b05c <xQueueGiveFromISR+0x34>
    b078:	2300      	movs	r3, #0
    b07a:	e7ef      	b.n	b05c <xQueueGiveFromISR+0x34>
    b07c:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    b07e:	4b20      	ldr	r3, [pc, #128]	; (b100 <xQueueGiveFromISR+0xd8>)
    b080:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    b082:	f3ef 8611 	mrs	r6, BASEPRI
    b086:	f04f 0380 	mov.w	r3, #128	; 0x80
    b08a:	f383 8811 	msr	BASEPRI, r3
    b08e:	f3bf 8f6f 	isb	sy
    b092:	f3bf 8f4f 	dsb	sy
		if (pxQueue->uxMessagesWaiting < pxQueue->uxLength) {
    b096:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b09a:	429a      	cmp	r2, r3
    b09c:	d223      	bcs.n	b0e6 <xQueueGiveFromISR+0xbe>
			++(pxQueue->uxMessagesWaiting);
    b09e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b0a0:	3301      	adds	r3, #1
    b0a2:	63a3      	str	r3, [r4, #56]	; 0x38
			if (pxQueue->xTxLock == queueUNLOCKED) {
    b0a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    b0aa:	d117      	bne.n	b0dc <xQueueGiveFromISR+0xb4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    b0ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b0ae:	b153      	cbz	r3, b0c6 <xQueueGiveFromISR+0x9e>
						if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) == pdTRUE) {
    b0b0:	2100      	movs	r1, #0
    b0b2:	4620      	mov	r0, r4
    b0b4:	4b13      	ldr	r3, [pc, #76]	; (b104 <xQueueGiveFromISR+0xdc>)
    b0b6:	4798      	blx	r3
    b0b8:	2801      	cmp	r0, #1
    b0ba:	d116      	bne.n	b0ea <xQueueGiveFromISR+0xc2>
							if (pxHigherPriorityTaskWoken != NULL) {
    b0bc:	b1bd      	cbz	r5, b0ee <xQueueGiveFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
    b0be:	6028      	str	r0, [r5, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue));
    b0c0:	f386 8811 	msr	BASEPRI, r6
}
    b0c4:	bd70      	pop	{r4, r5, r6, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    b0c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b0c8:	b19b      	cbz	r3, b0f2 <xQueueGiveFromISR+0xca>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    b0ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
    b0ce:	4b0e      	ldr	r3, [pc, #56]	; (b108 <xQueueGiveFromISR+0xe0>)
    b0d0:	4798      	blx	r3
    b0d2:	b180      	cbz	r0, b0f6 <xQueueGiveFromISR+0xce>
								if (pxHigherPriorityTaskWoken != NULL) {
    b0d4:	b18d      	cbz	r5, b0fa <xQueueGiveFromISR+0xd2>
									*pxHigherPriorityTaskWoken = pdTRUE;
    b0d6:	2001      	movs	r0, #1
    b0d8:	6028      	str	r0, [r5, #0]
    b0da:	e7f1      	b.n	b0c0 <xQueueGiveFromISR+0x98>
				++(pxQueue->xTxLock);
    b0dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b0de:	3301      	adds	r3, #1
    b0e0:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
    b0e2:	2001      	movs	r0, #1
    b0e4:	e7ec      	b.n	b0c0 <xQueueGiveFromISR+0x98>
			xReturn = errQUEUE_FULL;
    b0e6:	2000      	movs	r0, #0
    b0e8:	e7ea      	b.n	b0c0 <xQueueGiveFromISR+0x98>
			xReturn = pdPASS;
    b0ea:	2001      	movs	r0, #1
    b0ec:	e7e8      	b.n	b0c0 <xQueueGiveFromISR+0x98>
    b0ee:	2001      	movs	r0, #1
    b0f0:	e7e6      	b.n	b0c0 <xQueueGiveFromISR+0x98>
    b0f2:	2001      	movs	r0, #1
    b0f4:	e7e4      	b.n	b0c0 <xQueueGiveFromISR+0x98>
    b0f6:	2001      	movs	r0, #1
    b0f8:	e7e2      	b.n	b0c0 <xQueueGiveFromISR+0x98>
    b0fa:	2001      	movs	r0, #1
    b0fc:	e7e0      	b.n	b0c0 <xQueueGiveFromISR+0x98>
    b0fe:	bf00      	nop
    b100:	0000a855 	.word	0x0000a855
    b104:	0000aab9 	.word	0x0000aab9
    b108:	0000bb59 	.word	0x0000bb59

0000b10c <xQueueGenericReceive>:
{
    b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b10e:	b085      	sub	sp, #20
    b110:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    b112:	b160      	cbz	r0, b12e <xQueueGenericReceive+0x22>
    b114:	4604      	mov	r4, r0
	configASSERT(!((pvBuffer == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    b116:	b199      	cbz	r1, b140 <xQueueGenericReceive+0x34>
    b118:	2501      	movs	r5, #1
    b11a:	b9bd      	cbnz	r5, b14c <xQueueGenericReceive+0x40>
	__asm volatile("	mov %0, %1												\n"
    b11c:	f04f 0380 	mov.w	r3, #128	; 0x80
    b120:	f383 8811 	msr	BASEPRI, r3
    b124:	f3bf 8f6f 	isb	sy
    b128:	f3bf 8f4f 	dsb	sy
    b12c:	e7fe      	b.n	b12c <xQueueGenericReceive+0x20>
    b12e:	f04f 0380 	mov.w	r3, #128	; 0x80
    b132:	f383 8811 	msr	BASEPRI, r3
    b136:	f3bf 8f6f 	isb	sy
    b13a:	f3bf 8f4f 	dsb	sy
    b13e:	e7fe      	b.n	b13e <xQueueGenericReceive+0x32>
    b140:	6c02      	ldr	r2, [r0, #64]	; 0x40
    b142:	b90a      	cbnz	r2, b148 <xQueueGenericReceive+0x3c>
    b144:	2501      	movs	r5, #1
    b146:	e7e8      	b.n	b11a <xQueueGenericReceive+0xe>
    b148:	2500      	movs	r5, #0
    b14a:	e7e6      	b.n	b11a <xQueueGenericReceive+0xe>
    b14c:	461f      	mov	r7, r3
    b14e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    b150:	4b51      	ldr	r3, [pc, #324]	; (b298 <xQueueGenericReceive+0x18c>)
    b152:	4798      	blx	r3
    b154:	b910      	cbnz	r0, b15c <xQueueGenericReceive+0x50>
    b156:	9b01      	ldr	r3, [sp, #4]
    b158:	b103      	cbz	r3, b15c <xQueueGenericReceive+0x50>
    b15a:	2500      	movs	r5, #0
    b15c:	b945      	cbnz	r5, b170 <xQueueGenericReceive+0x64>
    b15e:	f04f 0380 	mov.w	r3, #128	; 0x80
    b162:	f383 8811 	msr	BASEPRI, r3
    b166:	f3bf 8f6f 	isb	sy
    b16a:	f3bf 8f4f 	dsb	sy
    b16e:	e7fe      	b.n	b16e <xQueueGenericReceive+0x62>
    b170:	2500      	movs	r5, #0
    b172:	e046      	b.n	b202 <xQueueGenericReceive+0xf6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    b174:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    b176:	4631      	mov	r1, r6
    b178:	4620      	mov	r0, r4
    b17a:	4b48      	ldr	r3, [pc, #288]	; (b29c <xQueueGenericReceive+0x190>)
    b17c:	4798      	blx	r3
				if (xJustPeeking == pdFALSE) {
    b17e:	b9e7      	cbnz	r7, b1ba <xQueueGenericReceive+0xae>
					--(pxQueue->uxMessagesWaiting);
    b180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b182:	3b01      	subs	r3, #1
    b184:	63a3      	str	r3, [r4, #56]	; 0x38
						if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    b186:	6823      	ldr	r3, [r4, #0]
    b188:	b913      	cbnz	r3, b190 <xQueueGenericReceive+0x84>
							    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    b18a:	4b45      	ldr	r3, [pc, #276]	; (b2a0 <xQueueGenericReceive+0x194>)
    b18c:	4798      	blx	r3
    b18e:	6060      	str	r0, [r4, #4]
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    b190:	6923      	ldr	r3, [r4, #16]
    b192:	b16b      	cbz	r3, b1b0 <xQueueGenericReceive+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) == pdTRUE) {
    b194:	f104 0010 	add.w	r0, r4, #16
    b198:	4b42      	ldr	r3, [pc, #264]	; (b2a4 <xQueueGenericReceive+0x198>)
    b19a:	4798      	blx	r3
    b19c:	2801      	cmp	r0, #1
    b19e:	d107      	bne.n	b1b0 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
    b1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b1a4:	4b40      	ldr	r3, [pc, #256]	; (b2a8 <xQueueGenericReceive+0x19c>)
    b1a6:	601a      	str	r2, [r3, #0]
    b1a8:	f3bf 8f4f 	dsb	sy
    b1ac:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    b1b0:	4b3e      	ldr	r3, [pc, #248]	; (b2ac <xQueueGenericReceive+0x1a0>)
    b1b2:	4798      	blx	r3
				return pdPASS;
    b1b4:	2001      	movs	r0, #1
}
    b1b6:	b005      	add	sp, #20
    b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    b1ba:	60e5      	str	r5, [r4, #12]
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    b1bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d0f6      	beq.n	b1b0 <xQueueGenericReceive+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    b1c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    b1c6:	4b37      	ldr	r3, [pc, #220]	; (b2a4 <xQueueGenericReceive+0x198>)
    b1c8:	4798      	blx	r3
    b1ca:	2800      	cmp	r0, #0
    b1cc:	d0f0      	beq.n	b1b0 <xQueueGenericReceive+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
    b1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b1d2:	4b35      	ldr	r3, [pc, #212]	; (b2a8 <xQueueGenericReceive+0x19c>)
    b1d4:	601a      	str	r2, [r3, #0]
    b1d6:	f3bf 8f4f 	dsb	sy
    b1da:	f3bf 8f6f 	isb	sy
    b1de:	e7e7      	b.n	b1b0 <xQueueGenericReceive+0xa4>
					taskEXIT_CRITICAL();
    b1e0:	4b32      	ldr	r3, [pc, #200]	; (b2ac <xQueueGenericReceive+0x1a0>)
    b1e2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    b1e4:	2000      	movs	r0, #0
    b1e6:	e7e6      	b.n	b1b6 <xQueueGenericReceive+0xaa>
						taskENTER_CRITICAL();
    b1e8:	4b31      	ldr	r3, [pc, #196]	; (b2b0 <xQueueGenericReceive+0x1a4>)
    b1ea:	4798      	blx	r3
							vTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    b1ec:	6860      	ldr	r0, [r4, #4]
    b1ee:	4b31      	ldr	r3, [pc, #196]	; (b2b4 <xQueueGenericReceive+0x1a8>)
    b1f0:	4798      	blx	r3
						taskEXIT_CRITICAL();
    b1f2:	4b2e      	ldr	r3, [pc, #184]	; (b2ac <xQueueGenericReceive+0x1a0>)
    b1f4:	4798      	blx	r3
    b1f6:	e032      	b.n	b25e <xQueueGenericReceive+0x152>
				prvUnlockQueue(pxQueue);
    b1f8:	4620      	mov	r0, r4
    b1fa:	4b2f      	ldr	r3, [pc, #188]	; (b2b8 <xQueueGenericReceive+0x1ac>)
    b1fc:	4798      	blx	r3
				(void)xTaskResumeAll();
    b1fe:	4b2f      	ldr	r3, [pc, #188]	; (b2bc <xQueueGenericReceive+0x1b0>)
    b200:	4798      	blx	r3
		taskENTER_CRITICAL();
    b202:	4b2b      	ldr	r3, [pc, #172]	; (b2b0 <xQueueGenericReceive+0x1a4>)
    b204:	4798      	blx	r3
			if (pxQueue->uxMessagesWaiting > (UBaseType_t)0) {
    b206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b208:	2b00      	cmp	r3, #0
    b20a:	d1b3      	bne.n	b174 <xQueueGenericReceive+0x68>
				if (xTicksToWait == (TickType_t)0) {
    b20c:	9b01      	ldr	r3, [sp, #4]
    b20e:	2b00      	cmp	r3, #0
    b210:	d0e6      	beq.n	b1e0 <xQueueGenericReceive+0xd4>
				} else if (xEntryTimeSet == pdFALSE) {
    b212:	b91d      	cbnz	r5, b21c <xQueueGenericReceive+0x110>
					vTaskSetTimeOutState(&xTimeOut);
    b214:	a802      	add	r0, sp, #8
    b216:	4b2a      	ldr	r3, [pc, #168]	; (b2c0 <xQueueGenericReceive+0x1b4>)
    b218:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b21a:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
    b21c:	4b23      	ldr	r3, [pc, #140]	; (b2ac <xQueueGenericReceive+0x1a0>)
    b21e:	4798      	blx	r3
		vTaskSuspendAll();
    b220:	4b28      	ldr	r3, [pc, #160]	; (b2c4 <xQueueGenericReceive+0x1b8>)
    b222:	4798      	blx	r3
		prvLockQueue(pxQueue);
    b224:	4b22      	ldr	r3, [pc, #136]	; (b2b0 <xQueueGenericReceive+0x1a4>)
    b226:	4798      	blx	r3
    b228:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
    b22e:	d101      	bne.n	b234 <xQueueGenericReceive+0x128>
    b230:	2300      	movs	r3, #0
    b232:	6463      	str	r3, [r4, #68]	; 0x44
    b234:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b236:	f1b3 3fff 	cmp.w	r3, #4294967295
    b23a:	d101      	bne.n	b240 <xQueueGenericReceive+0x134>
    b23c:	2300      	movs	r3, #0
    b23e:	64a3      	str	r3, [r4, #72]	; 0x48
    b240:	4b1a      	ldr	r3, [pc, #104]	; (b2ac <xQueueGenericReceive+0x1a0>)
    b242:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    b244:	a901      	add	r1, sp, #4
    b246:	a802      	add	r0, sp, #8
    b248:	4b1f      	ldr	r3, [pc, #124]	; (b2c8 <xQueueGenericReceive+0x1bc>)
    b24a:	4798      	blx	r3
    b24c:	b9e0      	cbnz	r0, b288 <xQueueGenericReceive+0x17c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    b24e:	4620      	mov	r0, r4
    b250:	4b1e      	ldr	r3, [pc, #120]	; (b2cc <xQueueGenericReceive+0x1c0>)
    b252:	4798      	blx	r3
    b254:	2800      	cmp	r0, #0
    b256:	d0cf      	beq.n	b1f8 <xQueueGenericReceive+0xec>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    b258:	6823      	ldr	r3, [r4, #0]
    b25a:	2b00      	cmp	r3, #0
    b25c:	d0c4      	beq.n	b1e8 <xQueueGenericReceive+0xdc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    b25e:	9901      	ldr	r1, [sp, #4]
    b260:	f104 0024 	add.w	r0, r4, #36	; 0x24
    b264:	4b1a      	ldr	r3, [pc, #104]	; (b2d0 <xQueueGenericReceive+0x1c4>)
    b266:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    b268:	4620      	mov	r0, r4
    b26a:	4b13      	ldr	r3, [pc, #76]	; (b2b8 <xQueueGenericReceive+0x1ac>)
    b26c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    b26e:	4b13      	ldr	r3, [pc, #76]	; (b2bc <xQueueGenericReceive+0x1b0>)
    b270:	4798      	blx	r3
    b272:	2800      	cmp	r0, #0
    b274:	d1c5      	bne.n	b202 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
    b276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b27a:	4b0b      	ldr	r3, [pc, #44]	; (b2a8 <xQueueGenericReceive+0x19c>)
    b27c:	601a      	str	r2, [r3, #0]
    b27e:	f3bf 8f4f 	dsb	sy
    b282:	f3bf 8f6f 	isb	sy
    b286:	e7bc      	b.n	b202 <xQueueGenericReceive+0xf6>
			prvUnlockQueue(pxQueue);
    b288:	4620      	mov	r0, r4
    b28a:	4b0b      	ldr	r3, [pc, #44]	; (b2b8 <xQueueGenericReceive+0x1ac>)
    b28c:	4798      	blx	r3
			(void)xTaskResumeAll();
    b28e:	4b0b      	ldr	r3, [pc, #44]	; (b2bc <xQueueGenericReceive+0x1b0>)
    b290:	4798      	blx	r3
			return errQUEUE_EMPTY;
    b292:	2000      	movs	r0, #0
    b294:	e78f      	b.n	b1b6 <xQueueGenericReceive+0xaa>
    b296:	bf00      	nop
    b298:	0000bcad 	.word	0x0000bcad
    b29c:	0000ab39 	.word	0x0000ab39
    b2a0:	0000bdfd 	.word	0x0000bdfd
    b2a4:	0000bb59 	.word	0x0000bb59
    b2a8:	e000ed04 	.word	0xe000ed04
    b2ac:	0000a689 	.word	0x0000a689
    b2b0:	0000a645 	.word	0x0000a645
    b2b4:	0000bccd 	.word	0x0000bccd
    b2b8:	0000ab61 	.word	0x0000ab61
    b2bc:	0000b7e1 	.word	0x0000b7e1
    b2c0:	0000bbe9 	.word	0x0000bbe9
    b2c4:	0000b699 	.word	0x0000b699
    b2c8:	0000bc11 	.word	0x0000bc11
    b2cc:	0000aa0d 	.word	0x0000aa0d
    b2d0:	0000ba95 	.word	0x0000ba95

0000b2d4 <vQueueDelete>:
{
    b2d4:	b508      	push	{r3, lr}
	configASSERT(pxQueue);
    b2d6:	b940      	cbnz	r0, b2ea <vQueueDelete+0x16>
    b2d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    b2dc:	f383 8811 	msr	BASEPRI, r3
    b2e0:	f3bf 8f6f 	isb	sy
    b2e4:	f3bf 8f4f 	dsb	sy
    b2e8:	e7fe      	b.n	b2e8 <vQueueDelete+0x14>
	vPortFree(pxQueue);
    b2ea:	4b01      	ldr	r3, [pc, #4]	; (b2f0 <vQueueDelete+0x1c>)
    b2ec:	4798      	blx	r3
    b2ee:	bd08      	pop	{r3, pc}
    b2f0:	0000a999 	.word	0x0000a999

0000b2f4 <vQueueWaitForMessageRestricted>:
{
    b2f4:	b570      	push	{r4, r5, r6, lr}
    b2f6:	4604      	mov	r4, r0
    b2f8:	460d      	mov	r5, r1
    b2fa:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    b2fc:	4b0f      	ldr	r3, [pc, #60]	; (b33c <vQueueWaitForMessageRestricted+0x48>)
    b2fe:	4798      	blx	r3
    b300:	6c63      	ldr	r3, [r4, #68]	; 0x44
    b302:	f1b3 3fff 	cmp.w	r3, #4294967295
    b306:	d00b      	beq.n	b320 <vQueueWaitForMessageRestricted+0x2c>
    b308:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
    b30e:	d00a      	beq.n	b326 <vQueueWaitForMessageRestricted+0x32>
    b310:	4b0b      	ldr	r3, [pc, #44]	; (b340 <vQueueWaitForMessageRestricted+0x4c>)
    b312:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    b314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b316:	b14b      	cbz	r3, b32c <vQueueWaitForMessageRestricted+0x38>
	prvUnlockQueue(pxQueue);
    b318:	4620      	mov	r0, r4
    b31a:	4b0a      	ldr	r3, [pc, #40]	; (b344 <vQueueWaitForMessageRestricted+0x50>)
    b31c:	4798      	blx	r3
    b31e:	bd70      	pop	{r4, r5, r6, pc}
	prvLockQueue(pxQueue);
    b320:	2300      	movs	r3, #0
    b322:	6463      	str	r3, [r4, #68]	; 0x44
    b324:	e7f0      	b.n	b308 <vQueueWaitForMessageRestricted+0x14>
    b326:	2300      	movs	r3, #0
    b328:	64a3      	str	r3, [r4, #72]	; 0x48
    b32a:	e7f1      	b.n	b310 <vQueueWaitForMessageRestricted+0x1c>
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    b32c:	4632      	mov	r2, r6
    b32e:	4629      	mov	r1, r5
    b330:	f104 0024 	add.w	r0, r4, #36	; 0x24
    b334:	4b04      	ldr	r3, [pc, #16]	; (b348 <vQueueWaitForMessageRestricted+0x54>)
    b336:	4798      	blx	r3
    b338:	e7ee      	b.n	b318 <vQueueWaitForMessageRestricted+0x24>
    b33a:	bf00      	nop
    b33c:	0000a645 	.word	0x0000a645
    b340:	0000a689 	.word	0x0000a689
    b344:	0000ab61 	.word	0x0000ab61
    b348:	0000baf9 	.word	0x0000baf9

0000b34c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    b34c:	4b09      	ldr	r3, [pc, #36]	; (b374 <prvResetNextTaskUnblockTime+0x28>)
    b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b350:	681b      	ldr	r3, [r3, #0]
    b352:	b943      	cbnz	r3, b366 <prvResetNextTaskUnblockTime+0x1a>
    b354:	2301      	movs	r3, #1
    b356:	b943      	cbnz	r3, b36a <prvResetNextTaskUnblockTime+0x1e>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    b358:	4b06      	ldr	r3, [pc, #24]	; (b374 <prvResetNextTaskUnblockTime+0x28>)
    b35a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b35c:	68d2      	ldr	r2, [r2, #12]
    b35e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xGenericListItem));
    b360:	6852      	ldr	r2, [r2, #4]
    b362:	62da      	str	r2, [r3, #44]	; 0x2c
    b364:	4770      	bx	lr
	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    b366:	2300      	movs	r3, #0
    b368:	e7f5      	b.n	b356 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
    b36a:	f04f 32ff 	mov.w	r2, #4294967295
    b36e:	4b01      	ldr	r3, [pc, #4]	; (b374 <prvResetNextTaskUnblockTime+0x28>)
    b370:	62da      	str	r2, [r3, #44]	; 0x2c
    b372:	4770      	bx	lr
    b374:	200127a8 	.word	0x200127a8

0000b378 <prvDeleteTCB>:
{
    b378:	b538      	push	{r3, r4, r5, lr}
    b37a:	4605      	mov	r5, r0
		vPortFreeAligned(pxTCB->pxStack);
    b37c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    b37e:	4c02      	ldr	r4, [pc, #8]	; (b388 <prvDeleteTCB+0x10>)
    b380:	47a0      	blx	r4
	vPortFree(pxTCB);
    b382:	4628      	mov	r0, r5
    b384:	47a0      	blx	r4
    b386:	bd38      	pop	{r3, r4, r5, pc}
    b388:	0000a999 	.word	0x0000a999

0000b38c <prvAllocateTCBAndStack>:
{
    b38c:	b570      	push	{r4, r5, r6, lr}
    b38e:	4606      	mov	r6, r0
		pxStack = (StackType_t *)pvPortMallocAligned(
    b390:	460c      	mov	r4, r1
    b392:	b919      	cbnz	r1, b39c <prvAllocateTCBAndStack+0x10>
    b394:	0080      	lsls	r0, r0, #2
    b396:	4b0c      	ldr	r3, [pc, #48]	; (b3c8 <prvAllocateTCBAndStack+0x3c>)
    b398:	4798      	blx	r3
    b39a:	4604      	mov	r4, r0
		if (pxStack != NULL) {
    b39c:	b18c      	cbz	r4, b3c2 <prvAllocateTCBAndStack+0x36>
			pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t));
    b39e:	2054      	movs	r0, #84	; 0x54
    b3a0:	4b09      	ldr	r3, [pc, #36]	; (b3c8 <prvAllocateTCBAndStack+0x3c>)
    b3a2:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    b3a4:	4605      	mov	r5, r0
    b3a6:	b140      	cbz	r0, b3ba <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
    b3a8:	6304      	str	r4, [r0, #48]	; 0x30
	if (pxNewTCB != NULL) {
    b3aa:	b125      	cbz	r5, b3b6 <prvAllocateTCBAndStack+0x2a>
			(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)usStackDepth * sizeof(StackType_t));
    b3ac:	00b2      	lsls	r2, r6, #2
    b3ae:	21a5      	movs	r1, #165	; 0xa5
    b3b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
    b3b2:	4b06      	ldr	r3, [pc, #24]	; (b3cc <prvAllocateTCBAndStack+0x40>)
    b3b4:	4798      	blx	r3
}
    b3b6:	4628      	mov	r0, r5
    b3b8:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree(pxStack);
    b3ba:	4620      	mov	r0, r4
    b3bc:	4b04      	ldr	r3, [pc, #16]	; (b3d0 <prvAllocateTCBAndStack+0x44>)
    b3be:	4798      	blx	r3
    b3c0:	e7f3      	b.n	b3aa <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
    b3c2:	2500      	movs	r5, #0
    b3c4:	e7f1      	b.n	b3aa <prvAllocateTCBAndStack+0x1e>
    b3c6:	bf00      	nop
    b3c8:	0000a8dd 	.word	0x0000a8dd
    b3cc:	0000cd69 	.word	0x0000cd69
    b3d0:	0000a999 	.word	0x0000a999

0000b3d4 <prvInitialiseTCBVariables>:
{
    b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3d6:	4604      	mov	r4, r0
    b3d8:	4615      	mov	r5, r2
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    b3da:	2300      	movs	r3, #0
    b3dc:	2b07      	cmp	r3, #7
    b3de:	d918      	bls.n	b412 <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    b3e0:	2300      	movs	r3, #0
    b3e2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    b3e6:	2d04      	cmp	r5, #4
    b3e8:	d900      	bls.n	b3ec <prvInitialiseTCBVariables+0x18>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    b3ea:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
    b3ec:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
    b3ee:	6465      	str	r5, [r4, #68]	; 0x44
		pxTCB->uxMutexesHeld  = 0;
    b3f0:	2600      	movs	r6, #0
    b3f2:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxTCB->xGenericListItem));
    b3f4:	1d20      	adds	r0, r4, #4
    b3f6:	4f0b      	ldr	r7, [pc, #44]	; (b424 <prvInitialiseTCBVariables+0x50>)
    b3f8:	47b8      	blx	r7
	vListInitialiseItem(&(pxTCB->xEventListItem));
    b3fa:	f104 0018 	add.w	r0, r4, #24
    b3fe:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER(&(pxTCB->xGenericListItem), pxTCB);
    b400:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    b402:	f1c5 0505 	rsb	r5, r5, #5
    b406:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxTCB->xEventListItem), pxTCB);
    b408:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
    b40a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->eNotifyState    = eNotWaitingNotification;
    b40c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[x] = pcName[x];
    b412:	5cc8      	ldrb	r0, [r1, r3]
    b414:	18e2      	adds	r2, r4, r3
    b416:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if (pcName[x] == 0x00) {
    b41a:	5cca      	ldrb	r2, [r1, r3]
    b41c:	2a00      	cmp	r2, #0
    b41e:	d0df      	beq.n	b3e0 <prvInitialiseTCBVariables+0xc>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    b420:	3301      	adds	r3, #1
    b422:	e7db      	b.n	b3dc <prvInitialiseTCBVariables+0x8>
    b424:	0000a51b 	.word	0x0000a51b

0000b428 <prvInitialiseTaskLists>:
{
    b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    b42a:	2400      	movs	r4, #0
    b42c:	2c04      	cmp	r4, #4
    b42e:	d915      	bls.n	b45c <prvInitialiseTaskLists+0x34>
	vListInitialise(&xDelayedTaskList1);
    b430:	4c0e      	ldr	r4, [pc, #56]	; (b46c <prvInitialiseTaskLists+0x44>)
    b432:	f104 0794 	add.w	r7, r4, #148	; 0x94
    b436:	4638      	mov	r0, r7
    b438:	4d0d      	ldr	r5, [pc, #52]	; (b470 <prvInitialiseTaskLists+0x48>)
    b43a:	47a8      	blx	r5
	vListInitialise(&xDelayedTaskList2);
    b43c:	f104 06a8 	add.w	r6, r4, #168	; 0xa8
    b440:	4630      	mov	r0, r6
    b442:	47a8      	blx	r5
	vListInitialise(&xPendingReadyList);
    b444:	f104 0014 	add.w	r0, r4, #20
    b448:	47a8      	blx	r5
		vListInitialise(&xTasksWaitingTermination);
    b44a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b44e:	47a8      	blx	r5
		vListInitialise(&xSuspendedTaskList);
    b450:	4620      	mov	r0, r4
    b452:	47a8      	blx	r5
	pxDelayedTaskList         = &xDelayedTaskList1;
    b454:	62a7      	str	r7, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    b456:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
    b45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    b45c:	2014      	movs	r0, #20
    b45e:	4b05      	ldr	r3, [pc, #20]	; (b474 <prvInitialiseTaskLists+0x4c>)
    b460:	fb00 3004 	mla	r0, r0, r4, r3
    b464:	4b02      	ldr	r3, [pc, #8]	; (b470 <prvInitialiseTaskLists+0x48>)
    b466:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    b468:	3401      	adds	r4, #1
    b46a:	e7df      	b.n	b42c <prvInitialiseTaskLists+0x4>
    b46c:	200127a8 	.word	0x200127a8
    b470:	0000a505 	.word	0x0000a505
    b474:	200127d8 	.word	0x200127d8

0000b478 <prvAddCurrentTaskToDelayedList>:
{
    b478:	b538      	push	{r3, r4, r5, lr}
	listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xGenericListItem), xTimeToWake);
    b47a:	4b0f      	ldr	r3, [pc, #60]	; (b4b8 <prvAddCurrentTaskToDelayedList+0x40>)
    b47c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    b480:	6050      	str	r0, [r2, #4]
	if (xTimeToWake < xTickCount) {
    b482:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    b486:	4298      	cmp	r0, r3
    b488:	d30c      	bcc.n	b4a4 <prvAddCurrentTaskToDelayedList+0x2c>
    b48a:	4604      	mov	r4, r0
		vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xGenericListItem));
    b48c:	4d0a      	ldr	r5, [pc, #40]	; (b4b8 <prvAddCurrentTaskToDelayedList+0x40>)
    b48e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b490:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    b494:	3104      	adds	r1, #4
    b496:	4b09      	ldr	r3, [pc, #36]	; (b4bc <prvAddCurrentTaskToDelayedList+0x44>)
    b498:	4798      	blx	r3
		if (xTimeToWake < xNextTaskUnblockTime) {
    b49a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    b49c:	429c      	cmp	r4, r3
    b49e:	d200      	bcs.n	b4a2 <prvAddCurrentTaskToDelayedList+0x2a>
			xNextTaskUnblockTime = xTimeToWake;
    b4a0:	62ec      	str	r4, [r5, #44]	; 0x2c
    b4a2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xGenericListItem));
    b4a4:	4b04      	ldr	r3, [pc, #16]	; (b4b8 <prvAddCurrentTaskToDelayedList+0x40>)
    b4a6:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    b4aa:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
    b4ae:	3104      	adds	r1, #4
    b4b0:	4b02      	ldr	r3, [pc, #8]	; (b4bc <prvAddCurrentTaskToDelayedList+0x44>)
    b4b2:	4798      	blx	r3
    b4b4:	bd38      	pop	{r3, r4, r5, pc}
    b4b6:	bf00      	nop
    b4b8:	200127a8 	.word	0x200127a8
    b4bc:	0000a539 	.word	0x0000a539

0000b4c0 <xTaskGenericCreate>:
{
    b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4c4:	b083      	sub	sp, #12
    b4c6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    b4c8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT(pxTaskCode);
    b4cc:	b158      	cbz	r0, b4e6 <xTaskGenericCreate+0x26>
    b4ce:	4680      	mov	r8, r0
	configASSERT(((uxPriority & (UBaseType_t)(~portPRIVILEGE_BIT)) < (UBaseType_t)configMAX_PRIORITIES));
    b4d0:	2f04      	cmp	r7, #4
    b4d2:	d911      	bls.n	b4f8 <xTaskGenericCreate+0x38>
    b4d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    b4d8:	f383 8811 	msr	BASEPRI, r3
    b4dc:	f3bf 8f6f 	isb	sy
    b4e0:	f3bf 8f4f 	dsb	sy
    b4e4:	e7fe      	b.n	b4e4 <xTaskGenericCreate+0x24>
    b4e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    b4ea:	f383 8811 	msr	BASEPRI, r3
    b4ee:	f3bf 8f6f 	isb	sy
    b4f2:	f3bf 8f4f 	dsb	sy
    b4f6:	e7fe      	b.n	b4f6 <xTaskGenericCreate+0x36>
    b4f8:	4699      	mov	r9, r3
    b4fa:	4616      	mov	r6, r2
    b4fc:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack(usStackDepth, puxStackBuffer);
    b4fe:	990e      	ldr	r1, [sp, #56]	; 0x38
    b500:	4610      	mov	r0, r2
    b502:	4b3b      	ldr	r3, [pc, #236]	; (b5f0 <xTaskGenericCreate+0x130>)
    b504:	4798      	blx	r3
	if (pxNewTCB != NULL) {
    b506:	4604      	mov	r4, r0
    b508:	2800      	cmp	r0, #0
    b50a:	d06d      	beq.n	b5e8 <xTaskGenericCreate+0x128>
			pxTopOfStack = pxNewTCB->pxStack + (usStackDepth - (uint16_t)1);
    b50c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    b50e:	f106 4580 	add.w	r5, r6, #1073741824	; 0x40000000
    b512:	3d01      	subs	r5, #1
    b514:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			                      & (~((portPOINTER_SIZE_TYPE)
    b518:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables(pxNewTCB, pcName, uxPriority, xRegions, usStackDepth);
    b51c:	9600      	str	r6, [sp, #0]
    b51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b520:	463a      	mov	r2, r7
    b522:	4651      	mov	r1, sl
    b524:	4e33      	ldr	r6, [pc, #204]	; (b5f4 <xTaskGenericCreate+0x134>)
    b526:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    b528:	464a      	mov	r2, r9
    b52a:	4641      	mov	r1, r8
    b52c:	4628      	mov	r0, r5
    b52e:	4b32      	ldr	r3, [pc, #200]	; (b5f8 <xTaskGenericCreate+0x138>)
    b530:	4798      	blx	r3
    b532:	6020      	str	r0, [r4, #0]
		if ((void *)pxCreatedTask != NULL) {
    b534:	f1bb 0f00 	cmp.w	fp, #0
    b538:	d001      	beq.n	b53e <xTaskGenericCreate+0x7e>
			*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    b53a:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
    b53e:	4b2f      	ldr	r3, [pc, #188]	; (b5fc <xTaskGenericCreate+0x13c>)
    b540:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
    b542:	4b2f      	ldr	r3, [pc, #188]	; (b600 <xTaskGenericCreate+0x140>)
    b544:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
    b548:	3201      	adds	r2, #1
    b54a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			if (pxCurrentTCB == NULL) {
    b54e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    b552:	2b00      	cmp	r3, #0
    b554:	d139      	bne.n	b5ca <xTaskGenericCreate+0x10a>
				pxCurrentTCB = pxNewTCB;
    b556:	4b2a      	ldr	r3, [pc, #168]	; (b600 <xTaskGenericCreate+0x140>)
    b558:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
				if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    b55c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    b560:	2b01      	cmp	r3, #1
    b562:	d101      	bne.n	b568 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
    b564:	4b27      	ldr	r3, [pc, #156]	; (b604 <xTaskGenericCreate+0x144>)
    b566:	4798      	blx	r3
			uxTaskNumber++;
    b568:	4a25      	ldr	r2, [pc, #148]	; (b600 <xTaskGenericCreate+0x140>)
    b56a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    b56e:	3301      	adds	r3, #1
    b570:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    b574:	63e3      	str	r3, [r4, #60]	; 0x3c
			prvAddTaskToReadyList(pxNewTCB);
    b576:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b578:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    b57c:	4293      	cmp	r3, r2
    b57e:	d902      	bls.n	b586 <xTaskGenericCreate+0xc6>
    b580:	4a1f      	ldr	r2, [pc, #124]	; (b600 <xTaskGenericCreate+0x140>)
    b582:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    b586:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b58a:	009a      	lsls	r2, r3, #2
    b58c:	1d21      	adds	r1, r4, #4
    b58e:	481e      	ldr	r0, [pc, #120]	; (b608 <xTaskGenericCreate+0x148>)
    b590:	4410      	add	r0, r2
    b592:	4b1e      	ldr	r3, [pc, #120]	; (b60c <xTaskGenericCreate+0x14c>)
    b594:	4798      	blx	r3
		taskEXIT_CRITICAL();
    b596:	4b1e      	ldr	r3, [pc, #120]	; (b610 <xTaskGenericCreate+0x150>)
    b598:	4798      	blx	r3
			xReturn = pdPASS;
    b59a:	2001      	movs	r0, #1
	if (xReturn == pdPASS) {
    b59c:	2801      	cmp	r0, #1
    b59e:	d111      	bne.n	b5c4 <xTaskGenericCreate+0x104>
		if (xSchedulerRunning != pdFALSE) {
    b5a0:	4b17      	ldr	r3, [pc, #92]	; (b600 <xTaskGenericCreate+0x140>)
    b5a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    b5a6:	b16b      	cbz	r3, b5c4 <xTaskGenericCreate+0x104>
			if (pxCurrentTCB->uxPriority < uxPriority) {
    b5a8:	4b15      	ldr	r3, [pc, #84]	; (b600 <xTaskGenericCreate+0x140>)
    b5aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b5b0:	429f      	cmp	r7, r3
    b5b2:	d907      	bls.n	b5c4 <xTaskGenericCreate+0x104>
				taskYIELD_IF_USING_PREEMPTION();
    b5b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b5b8:	4b16      	ldr	r3, [pc, #88]	; (b614 <xTaskGenericCreate+0x154>)
    b5ba:	601a      	str	r2, [r3, #0]
    b5bc:	f3bf 8f4f 	dsb	sy
    b5c0:	f3bf 8f6f 	isb	sy
}
    b5c4:	b003      	add	sp, #12
    b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (xSchedulerRunning == pdFALSE) {
    b5ca:	4b0d      	ldr	r3, [pc, #52]	; (b600 <xTaskGenericCreate+0x140>)
    b5cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d1c9      	bne.n	b568 <xTaskGenericCreate+0xa8>
					if (pxCurrentTCB->uxPriority <= uxPriority) {
    b5d4:	4b0a      	ldr	r3, [pc, #40]	; (b600 <xTaskGenericCreate+0x140>)
    b5d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    b5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b5dc:	429f      	cmp	r7, r3
    b5de:	d3c3      	bcc.n	b568 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
    b5e0:	4b07      	ldr	r3, [pc, #28]	; (b600 <xTaskGenericCreate+0x140>)
    b5e2:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
    b5e6:	e7bf      	b.n	b568 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    b5e8:	f04f 30ff 	mov.w	r0, #4294967295
    b5ec:	e7d6      	b.n	b59c <xTaskGenericCreate+0xdc>
    b5ee:	bf00      	nop
    b5f0:	0000b38d 	.word	0x0000b38d
    b5f4:	0000b3d5 	.word	0x0000b3d5
    b5f8:	0000a5fd 	.word	0x0000a5fd
    b5fc:	0000a645 	.word	0x0000a645
    b600:	200127a8 	.word	0x200127a8
    b604:	0000b429 	.word	0x0000b429
    b608:	200127d8 	.word	0x200127d8
    b60c:	0000a521 	.word	0x0000a521
    b610:	0000a689 	.word	0x0000a689
    b614:	e000ed04 	.word	0xe000ed04

0000b618 <vTaskStartScheduler>:
{
    b618:	b510      	push	{r4, lr}
    b61a:	b084      	sub	sp, #16
		xReturn = xTaskCreate(prvIdleTask,
    b61c:	2300      	movs	r3, #0
    b61e:	9303      	str	r3, [sp, #12]
    b620:	9302      	str	r3, [sp, #8]
    b622:	9301      	str	r3, [sp, #4]
    b624:	9300      	str	r3, [sp, #0]
    b626:	2240      	movs	r2, #64	; 0x40
    b628:	4915      	ldr	r1, [pc, #84]	; (b680 <vTaskStartScheduler+0x68>)
    b62a:	4816      	ldr	r0, [pc, #88]	; (b684 <vTaskStartScheduler+0x6c>)
    b62c:	4c16      	ldr	r4, [pc, #88]	; (b688 <vTaskStartScheduler+0x70>)
    b62e:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    b630:	2801      	cmp	r0, #1
    b632:	d00b      	beq.n	b64c <vTaskStartScheduler+0x34>
	if (xReturn == pdPASS) {
    b634:	2801      	cmp	r0, #1
    b636:	d00c      	beq.n	b652 <vTaskStartScheduler+0x3a>
		configASSERT(xReturn);
    b638:	b9f8      	cbnz	r0, b67a <vTaskStartScheduler+0x62>
    b63a:	f04f 0380 	mov.w	r3, #128	; 0x80
    b63e:	f383 8811 	msr	BASEPRI, r3
    b642:	f3bf 8f6f 	isb	sy
    b646:	f3bf 8f4f 	dsb	sy
    b64a:	e7fe      	b.n	b64a <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
    b64c:	4b0f      	ldr	r3, [pc, #60]	; (b68c <vTaskStartScheduler+0x74>)
    b64e:	4798      	blx	r3
    b650:	e7f0      	b.n	b634 <vTaskStartScheduler+0x1c>
    b652:	f04f 0380 	mov.w	r3, #128	; 0x80
    b656:	f383 8811 	msr	BASEPRI, r3
    b65a:	f3bf 8f6f 	isb	sy
    b65e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    b662:	4b0b      	ldr	r3, [pc, #44]	; (b690 <vTaskStartScheduler+0x78>)
    b664:	f04f 32ff 	mov.w	r2, #4294967295
    b668:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning    = pdTRUE;
    b66a:	2201      	movs	r2, #1
    b66c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		xTickCount           = (TickType_t)0U;
    b670:	2200      	movs	r2, #0
    b672:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (xPortStartScheduler() != pdFALSE) {
    b676:	4b07      	ldr	r3, [pc, #28]	; (b694 <vTaskStartScheduler+0x7c>)
    b678:	4798      	blx	r3
}
    b67a:	b004      	add	sp, #16
    b67c:	bd10      	pop	{r4, pc}
    b67e:	bf00      	nop
    b680:	0000e614 	.word	0x0000e614
    b684:	0000b9c9 	.word	0x0000b9c9
    b688:	0000b4c1 	.word	0x0000b4c1
    b68c:	0000bee5 	.word	0x0000bee5
    b690:	200127a8 	.word	0x200127a8
    b694:	0000a75d 	.word	0x0000a75d

0000b698 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    b698:	4a03      	ldr	r2, [pc, #12]	; (b6a8 <vTaskSuspendAll+0x10>)
    b69a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    b69e:	3301      	adds	r3, #1
    b6a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    b6a4:	4770      	bx	lr
    b6a6:	bf00      	nop
    b6a8:	200127a8 	.word	0x200127a8

0000b6ac <xTaskGetTickCount>:
		xTicks = xTickCount;
    b6ac:	4b01      	ldr	r3, [pc, #4]	; (b6b4 <xTaskGetTickCount+0x8>)
    b6ae:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
}
    b6b2:	4770      	bx	lr
    b6b4:	200127a8 	.word	0x200127a8

0000b6b8 <xTaskIncrementTick>:
{
    b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    b6bc:	4b44      	ldr	r3, [pc, #272]	; (b7d0 <xTaskIncrementTick+0x118>)
    b6be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d175      	bne.n	b7b2 <xTaskIncrementTick+0xfa>
		++xTickCount;
    b6c6:	4b42      	ldr	r3, [pc, #264]	; (b7d0 <xTaskIncrementTick+0x118>)
    b6c8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    b6cc:	3201      	adds	r2, #1
    b6ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
			const TickType_t xConstTickCount = xTickCount;
    b6d2:	f8d3 60d8 	ldr.w	r6, [r3, #216]	; 0xd8
			if (xConstTickCount == (TickType_t)0U) {
    b6d6:	b9ce      	cbnz	r6, b70c <xTaskIncrementTick+0x54>
				taskSWITCH_DELAYED_LISTS();
    b6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b6da:	681b      	ldr	r3, [r3, #0]
    b6dc:	b143      	cbz	r3, b6f0 <xTaskIncrementTick+0x38>
    b6de:	f04f 0380 	mov.w	r3, #128	; 0x80
    b6e2:	f383 8811 	msr	BASEPRI, r3
    b6e6:	f3bf 8f6f 	isb	sy
    b6ea:	f3bf 8f4f 	dsb	sy
    b6ee:	e7fe      	b.n	b6ee <xTaskIncrementTick+0x36>
    b6f0:	4b37      	ldr	r3, [pc, #220]	; (b7d0 <xTaskIncrementTick+0x118>)
    b6f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6f4:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
    b6f8:	6299      	str	r1, [r3, #40]	; 0x28
    b6fa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    b6fe:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    b702:	3201      	adds	r2, #1
    b704:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    b708:	4b32      	ldr	r3, [pc, #200]	; (b7d4 <xTaskIncrementTick+0x11c>)
    b70a:	4798      	blx	r3
			if (xConstTickCount >= xNextTaskUnblockTime) {
    b70c:	4b30      	ldr	r3, [pc, #192]	; (b7d0 <xTaskIncrementTick+0x118>)
    b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b710:	429e      	cmp	r6, r3
    b712:	d242      	bcs.n	b79a <xTaskIncrementTick+0xe2>
	BaseType_t xSwitchRequired = pdFALSE;
    b714:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    b716:	4a2e      	ldr	r2, [pc, #184]	; (b7d0 <xTaskIncrementTick+0x118>)
    b718:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b71e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b722:	0099      	lsls	r1, r3, #2
    b724:	440a      	add	r2, r1
    b726:	6b13      	ldr	r3, [r2, #48]	; 0x30
    b728:	2b01      	cmp	r3, #1
    b72a:	d949      	bls.n	b7c0 <xTaskIncrementTick+0x108>
				xSwitchRequired = pdTRUE;
    b72c:	2401      	movs	r4, #1
    b72e:	e047      	b.n	b7c0 <xTaskIncrementTick+0x108>
								xSwitchRequired = pdTRUE;
    b730:	2401      	movs	r4, #1
					if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    b732:	4b27      	ldr	r3, [pc, #156]	; (b7d0 <xTaskIncrementTick+0x118>)
    b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b736:	681b      	ldr	r3, [r3, #0]
    b738:	2b00      	cmp	r3, #0
    b73a:	d030      	beq.n	b79e <xTaskIncrementTick+0xe6>
    b73c:	2300      	movs	r3, #0
    b73e:	2b00      	cmp	r3, #0
    b740:	d12f      	bne.n	b7a2 <xTaskIncrementTick+0xea>
						pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    b742:	4b23      	ldr	r3, [pc, #140]	; (b7d0 <xTaskIncrementTick+0x118>)
    b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b746:	68db      	ldr	r3, [r3, #12]
    b748:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xGenericListItem));
    b74a:	686b      	ldr	r3, [r5, #4]
						if (xConstTickCount < xItemValue) {
    b74c:	429e      	cmp	r6, r3
    b74e:	d32d      	bcc.n	b7ac <xTaskIncrementTick+0xf4>
						(void)uxListRemove(&(pxTCB->xGenericListItem));
    b750:	f105 0804 	add.w	r8, r5, #4
    b754:	4640      	mov	r0, r8
    b756:	4b20      	ldr	r3, [pc, #128]	; (b7d8 <xTaskIncrementTick+0x120>)
    b758:	4798      	blx	r3
						if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    b75a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b75c:	b11b      	cbz	r3, b766 <xTaskIncrementTick+0xae>
							(void)uxListRemove(&(pxTCB->xEventListItem));
    b75e:	f105 0018 	add.w	r0, r5, #24
    b762:	4b1d      	ldr	r3, [pc, #116]	; (b7d8 <xTaskIncrementTick+0x120>)
    b764:	4798      	blx	r3
						prvAddTaskToReadyList(pxTCB);
    b766:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    b768:	4a19      	ldr	r2, [pc, #100]	; (b7d0 <xTaskIncrementTick+0x118>)
    b76a:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    b76e:	4293      	cmp	r3, r2
    b770:	d902      	bls.n	b778 <xTaskIncrementTick+0xc0>
    b772:	4a17      	ldr	r2, [pc, #92]	; (b7d0 <xTaskIncrementTick+0x118>)
    b774:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    b778:	4f15      	ldr	r7, [pc, #84]	; (b7d0 <xTaskIncrementTick+0x118>)
    b77a:	f107 0030 	add.w	r0, r7, #48	; 0x30
    b77e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b782:	009a      	lsls	r2, r3, #2
    b784:	4641      	mov	r1, r8
    b786:	4410      	add	r0, r2
    b788:	4b14      	ldr	r3, [pc, #80]	; (b7dc <xTaskIncrementTick+0x124>)
    b78a:	4798      	blx	r3
							if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    b78c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    b78e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b794:	429a      	cmp	r2, r3
    b796:	d2cb      	bcs.n	b730 <xTaskIncrementTick+0x78>
    b798:	e7cb      	b.n	b732 <xTaskIncrementTick+0x7a>
    b79a:	2400      	movs	r4, #0
    b79c:	e7c9      	b.n	b732 <xTaskIncrementTick+0x7a>
					if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    b79e:	2301      	movs	r3, #1
    b7a0:	e7cd      	b.n	b73e <xTaskIncrementTick+0x86>
						xNextTaskUnblockTime = portMAX_DELAY;
    b7a2:	f04f 32ff 	mov.w	r2, #4294967295
    b7a6:	4b0a      	ldr	r3, [pc, #40]	; (b7d0 <xTaskIncrementTick+0x118>)
    b7a8:	62da      	str	r2, [r3, #44]	; 0x2c
						break;
    b7aa:	e7b4      	b.n	b716 <xTaskIncrementTick+0x5e>
							xNextTaskUnblockTime = xItemValue;
    b7ac:	4a08      	ldr	r2, [pc, #32]	; (b7d0 <xTaskIncrementTick+0x118>)
    b7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
							break;
    b7b0:	e7b1      	b.n	b716 <xTaskIncrementTick+0x5e>
		++uxPendedTicks;
    b7b2:	4a07      	ldr	r2, [pc, #28]	; (b7d0 <xTaskIncrementTick+0x118>)
    b7b4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b7b8:	3301      	adds	r3, #1
    b7ba:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	BaseType_t xSwitchRequired = pdFALSE;
    b7be:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    b7c0:	4b03      	ldr	r3, [pc, #12]	; (b7d0 <xTaskIncrementTick+0x118>)
    b7c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    b7c6:	b103      	cbz	r3, b7ca <xTaskIncrementTick+0x112>
			xSwitchRequired = pdTRUE;
    b7c8:	2401      	movs	r4, #1
}
    b7ca:	4620      	mov	r0, r4
    b7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7d0:	200127a8 	.word	0x200127a8
    b7d4:	0000b34d 	.word	0x0000b34d
    b7d8:	0000a56d 	.word	0x0000a56d
    b7dc:	0000a521 	.word	0x0000a521

0000b7e0 <xTaskResumeAll>:
{
    b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxSchedulerSuspended);
    b7e2:	4b3b      	ldr	r3, [pc, #236]	; (b8d0 <xTaskResumeAll+0xf0>)
    b7e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b7e8:	b943      	cbnz	r3, b7fc <xTaskResumeAll+0x1c>
    b7ea:	f04f 0380 	mov.w	r3, #128	; 0x80
    b7ee:	f383 8811 	msr	BASEPRI, r3
    b7f2:	f3bf 8f6f 	isb	sy
    b7f6:	f3bf 8f4f 	dsb	sy
    b7fa:	e7fe      	b.n	b7fa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
    b7fc:	4b35      	ldr	r3, [pc, #212]	; (b8d4 <xTaskResumeAll+0xf4>)
    b7fe:	4798      	blx	r3
		--uxSchedulerSuspended;
    b800:	4b33      	ldr	r3, [pc, #204]	; (b8d0 <xTaskResumeAll+0xf0>)
    b802:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    b806:	3a01      	subs	r2, #1
    b808:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    b80c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b810:	2b00      	cmp	r3, #0
    b812:	d158      	bne.n	b8c6 <xTaskResumeAll+0xe6>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    b814:	4b2e      	ldr	r3, [pc, #184]	; (b8d0 <xTaskResumeAll+0xf0>)
    b816:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    b81a:	b9a3      	cbnz	r3, b846 <xTaskResumeAll+0x66>
	BaseType_t xAlreadyYielded = pdFALSE;
    b81c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    b81e:	4b2e      	ldr	r3, [pc, #184]	; (b8d8 <xTaskResumeAll+0xf8>)
    b820:	4798      	blx	r3
}
    b822:	4620      	mov	r0, r4
    b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList(pxTCB);
    b826:	4d2a      	ldr	r5, [pc, #168]	; (b8d0 <xTaskResumeAll+0xf0>)
    b828:	f105 0030 	add.w	r0, r5, #48	; 0x30
    b82c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b830:	009a      	lsls	r2, r3, #2
    b832:	4631      	mov	r1, r6
    b834:	4410      	add	r0, r2
    b836:	4b29      	ldr	r3, [pc, #164]	; (b8dc <xTaskResumeAll+0xfc>)
    b838:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    b83a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    b83c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    b840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b842:	429a      	cmp	r2, r3
    b844:	d214      	bcs.n	b870 <xTaskResumeAll+0x90>
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    b846:	4b22      	ldr	r3, [pc, #136]	; (b8d0 <xTaskResumeAll+0xf0>)
    b848:	695b      	ldr	r3, [r3, #20]
    b84a:	b1ab      	cbz	r3, b878 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    b84c:	4d20      	ldr	r5, [pc, #128]	; (b8d0 <xTaskResumeAll+0xf0>)
    b84e:	6a2b      	ldr	r3, [r5, #32]
    b850:	68dc      	ldr	r4, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    b852:	f104 0018 	add.w	r0, r4, #24
    b856:	4f22      	ldr	r7, [pc, #136]	; (b8e0 <xTaskResumeAll+0x100>)
    b858:	47b8      	blx	r7
					(void)uxListRemove(&(pxTCB->xGenericListItem));
    b85a:	1d26      	adds	r6, r4, #4
    b85c:	4630      	mov	r0, r6
    b85e:	47b8      	blx	r7
					prvAddTaskToReadyList(pxTCB);
    b860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b862:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
    b866:	4293      	cmp	r3, r2
    b868:	d9dd      	bls.n	b826 <xTaskResumeAll+0x46>
    b86a:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
    b86e:	e7da      	b.n	b826 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
    b870:	2201      	movs	r2, #1
    b872:	f8c5 20fc 	str.w	r2, [r5, #252]	; 0xfc
    b876:	e7e6      	b.n	b846 <xTaskResumeAll+0x66>
				if (uxPendedTicks > (UBaseType_t)0U) {
    b878:	4b15      	ldr	r3, [pc, #84]	; (b8d0 <xTaskResumeAll+0xf0>)
    b87a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    b87e:	b9a3      	cbnz	r3, b8aa <xTaskResumeAll+0xca>
				if (xYieldPending == pdTRUE) {
    b880:	4b13      	ldr	r3, [pc, #76]	; (b8d0 <xTaskResumeAll+0xf0>)
    b882:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
    b886:	2b01      	cmp	r3, #1
    b888:	d11f      	bne.n	b8ca <xTaskResumeAll+0xea>
					taskYIELD_IF_USING_PREEMPTION();
    b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b88e:	4b15      	ldr	r3, [pc, #84]	; (b8e4 <xTaskResumeAll+0x104>)
    b890:	601a      	str	r2, [r3, #0]
    b892:	f3bf 8f4f 	dsb	sy
    b896:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    b89a:	2401      	movs	r4, #1
    b89c:	e7bf      	b.n	b81e <xTaskResumeAll+0x3e>
						--uxPendedTicks;
    b89e:	4a0c      	ldr	r2, [pc, #48]	; (b8d0 <xTaskResumeAll+0xf0>)
    b8a0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
    b8a4:	3b01      	subs	r3, #1
    b8a6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
					while (uxPendedTicks > (UBaseType_t)0U) {
    b8aa:	4b09      	ldr	r3, [pc, #36]	; (b8d0 <xTaskResumeAll+0xf0>)
    b8ac:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d0e5      	beq.n	b880 <xTaskResumeAll+0xa0>
						if (xTaskIncrementTick() != pdFALSE) {
    b8b4:	4b0c      	ldr	r3, [pc, #48]	; (b8e8 <xTaskResumeAll+0x108>)
    b8b6:	4798      	blx	r3
    b8b8:	2800      	cmp	r0, #0
    b8ba:	d0f0      	beq.n	b89e <xTaskResumeAll+0xbe>
							xYieldPending = pdTRUE;
    b8bc:	2201      	movs	r2, #1
    b8be:	4b04      	ldr	r3, [pc, #16]	; (b8d0 <xTaskResumeAll+0xf0>)
    b8c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    b8c4:	e7eb      	b.n	b89e <xTaskResumeAll+0xbe>
	BaseType_t xAlreadyYielded = pdFALSE;
    b8c6:	2400      	movs	r4, #0
    b8c8:	e7a9      	b.n	b81e <xTaskResumeAll+0x3e>
    b8ca:	2400      	movs	r4, #0
    b8cc:	e7a7      	b.n	b81e <xTaskResumeAll+0x3e>
    b8ce:	bf00      	nop
    b8d0:	200127a8 	.word	0x200127a8
    b8d4:	0000a645 	.word	0x0000a645
    b8d8:	0000a689 	.word	0x0000a689
    b8dc:	0000a521 	.word	0x0000a521
    b8e0:	0000a56d 	.word	0x0000a56d
    b8e4:	e000ed04 	.word	0xe000ed04
    b8e8:	0000b6b9 	.word	0x0000b6b9

0000b8ec <vTaskDelay>:
{
    b8ec:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    b8ee:	b1f0      	cbz	r0, b92e <vTaskDelay+0x42>
    b8f0:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    b8f2:	4b14      	ldr	r3, [pc, #80]	; (b944 <vTaskDelay+0x58>)
    b8f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b8f8:	b143      	cbz	r3, b90c <vTaskDelay+0x20>
    b8fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    b8fe:	f383 8811 	msr	BASEPRI, r3
    b902:	f3bf 8f6f 	isb	sy
    b906:	f3bf 8f4f 	dsb	sy
    b90a:	e7fe      	b.n	b90a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    b90c:	4b0e      	ldr	r3, [pc, #56]	; (b948 <vTaskDelay+0x5c>)
    b90e:	4798      	blx	r3
			xTimeToWake = xTickCount + xTicksToDelay;
    b910:	4b0c      	ldr	r3, [pc, #48]	; (b944 <vTaskDelay+0x58>)
    b912:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    b916:	4414      	add	r4, r2
			if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    b918:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    b91c:	3004      	adds	r0, #4
    b91e:	4b0b      	ldr	r3, [pc, #44]	; (b94c <vTaskDelay+0x60>)
    b920:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    b922:	4620      	mov	r0, r4
    b924:	4b0a      	ldr	r3, [pc, #40]	; (b950 <vTaskDelay+0x64>)
    b926:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    b928:	4b0a      	ldr	r3, [pc, #40]	; (b954 <vTaskDelay+0x68>)
    b92a:	4798      	blx	r3
    b92c:	e000      	b.n	b930 <vTaskDelay+0x44>
	BaseType_t xAlreadyYielded = pdFALSE;
    b92e:	2000      	movs	r0, #0
	if (xAlreadyYielded == pdFALSE) {
    b930:	b938      	cbnz	r0, b942 <vTaskDelay+0x56>
		portYIELD_WITHIN_API();
    b932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b936:	4b08      	ldr	r3, [pc, #32]	; (b958 <vTaskDelay+0x6c>)
    b938:	601a      	str	r2, [r3, #0]
    b93a:	f3bf 8f4f 	dsb	sy
    b93e:	f3bf 8f6f 	isb	sy
    b942:	bd10      	pop	{r4, pc}
    b944:	200127a8 	.word	0x200127a8
    b948:	0000b699 	.word	0x0000b699
    b94c:	0000a56d 	.word	0x0000a56d
    b950:	0000b479 	.word	0x0000b479
    b954:	0000b7e1 	.word	0x0000b7e1
    b958:	e000ed04 	.word	0xe000ed04

0000b95c <prvCheckTasksWaitingTermination>:
{
    b95c:	b538      	push	{r3, r4, r5, lr}
		while (uxTasksDeleted > (UBaseType_t)0U) {
    b95e:	4b13      	ldr	r3, [pc, #76]	; (b9ac <prvCheckTasksWaitingTermination+0x50>)
    b960:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
    b964:	b30b      	cbz	r3, b9aa <prvCheckTasksWaitingTermination+0x4e>
			vTaskSuspendAll();
    b966:	4b12      	ldr	r3, [pc, #72]	; (b9b0 <prvCheckTasksWaitingTermination+0x54>)
    b968:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY(&xTasksWaitingTermination);
    b96a:	4b10      	ldr	r3, [pc, #64]	; (b9ac <prvCheckTasksWaitingTermination+0x50>)
    b96c:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
			(void)xTaskResumeAll();
    b970:	4b10      	ldr	r3, [pc, #64]	; (b9b4 <prvCheckTasksWaitingTermination+0x58>)
    b972:	4798      	blx	r3
			if (xListIsEmpty == pdFALSE) {
    b974:	2c00      	cmp	r4, #0
    b976:	d0f2      	beq.n	b95e <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
    b978:	4b0f      	ldr	r3, [pc, #60]	; (b9b8 <prvCheckTasksWaitingTermination+0x5c>)
    b97a:	4798      	blx	r3
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
    b97c:	4c0b      	ldr	r4, [pc, #44]	; (b9ac <prvCheckTasksWaitingTermination+0x50>)
    b97e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    b982:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xGenericListItem));
    b984:	1d28      	adds	r0, r5, #4
    b986:	4b0d      	ldr	r3, [pc, #52]	; (b9bc <prvCheckTasksWaitingTermination+0x60>)
    b988:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    b98a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    b98e:	3b01      	subs	r3, #1
    b990:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
					--uxTasksDeleted;
    b994:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    b998:	3b01      	subs	r3, #1
    b99a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
				taskEXIT_CRITICAL();
    b99e:	4b08      	ldr	r3, [pc, #32]	; (b9c0 <prvCheckTasksWaitingTermination+0x64>)
    b9a0:	4798      	blx	r3
				prvDeleteTCB(pxTCB);
    b9a2:	4628      	mov	r0, r5
    b9a4:	4b07      	ldr	r3, [pc, #28]	; (b9c4 <prvCheckTasksWaitingTermination+0x68>)
    b9a6:	4798      	blx	r3
    b9a8:	e7d9      	b.n	b95e <prvCheckTasksWaitingTermination+0x2>
}
    b9aa:	bd38      	pop	{r3, r4, r5, pc}
    b9ac:	200127a8 	.word	0x200127a8
    b9b0:	0000b699 	.word	0x0000b699
    b9b4:	0000b7e1 	.word	0x0000b7e1
    b9b8:	0000a645 	.word	0x0000a645
    b9bc:	0000a56d 	.word	0x0000a56d
    b9c0:	0000a689 	.word	0x0000a689
    b9c4:	0000b379 	.word	0x0000b379

0000b9c8 <prvIdleTask>:
{
    b9c8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
    b9ca:	4b07      	ldr	r3, [pc, #28]	; (b9e8 <prvIdleTask+0x20>)
    b9cc:	4798      	blx	r3
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    b9ce:	4b07      	ldr	r3, [pc, #28]	; (b9ec <prvIdleTask+0x24>)
    b9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9d2:	2b01      	cmp	r3, #1
    b9d4:	d9f9      	bls.n	b9ca <prvIdleTask+0x2>
				taskYIELD();
    b9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b9da:	4b05      	ldr	r3, [pc, #20]	; (b9f0 <prvIdleTask+0x28>)
    b9dc:	601a      	str	r2, [r3, #0]
    b9de:	f3bf 8f4f 	dsb	sy
    b9e2:	f3bf 8f6f 	isb	sy
    b9e6:	e7f0      	b.n	b9ca <prvIdleTask+0x2>
    b9e8:	0000b95d 	.word	0x0000b95d
    b9ec:	200127a8 	.word	0x200127a8
    b9f0:	e000ed04 	.word	0xe000ed04

0000b9f4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    b9f4:	4b26      	ldr	r3, [pc, #152]	; (ba90 <vTaskSwitchContext+0x9c>)
    b9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b9fa:	b9bb      	cbnz	r3, ba2c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
    b9fc:	2200      	movs	r2, #0
    b9fe:	4b24      	ldr	r3, [pc, #144]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba00:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ba04:	4a22      	ldr	r2, [pc, #136]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba06:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ba0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ba0e:	0099      	lsls	r1, r3, #2
    ba10:	440a      	add	r2, r1
    ba12:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ba14:	b9c3      	cbnz	r3, ba48 <vTaskSwitchContext+0x54>
    ba16:	4b1e      	ldr	r3, [pc, #120]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    ba1c:	b15b      	cbz	r3, ba36 <vTaskSwitchContext+0x42>
    ba1e:	4a1c      	ldr	r2, [pc, #112]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba20:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ba24:	3b01      	subs	r3, #1
    ba26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    ba2a:	e7eb      	b.n	ba04 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
    ba2c:	2201      	movs	r2, #1
    ba2e:	4b18      	ldr	r3, [pc, #96]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    ba34:	4770      	bx	lr
    ba36:	f04f 0380 	mov.w	r3, #128	; 0x80
    ba3a:	f383 8811 	msr	BASEPRI, r3
    ba3e:	f3bf 8f6f 	isb	sy
    ba42:	f3bf 8f4f 	dsb	sy
    ba46:	e7fe      	b.n	ba46 <vTaskSwitchContext+0x52>
{
    ba48:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ba4a:	4a11      	ldr	r2, [pc, #68]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba4c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
    ba50:	0099      	lsls	r1, r3, #2
    ba52:	18cc      	adds	r4, r1, r3
    ba54:	00a0      	lsls	r0, r4, #2
    ba56:	4410      	add	r0, r2
    ba58:	6b44      	ldr	r4, [r0, #52]	; 0x34
    ba5a:	6864      	ldr	r4, [r4, #4]
    ba5c:	6344      	str	r4, [r0, #52]	; 0x34
    ba5e:	3230      	adds	r2, #48	; 0x30
    ba60:	4419      	add	r1, r3
    ba62:	0088      	lsls	r0, r1, #2
    ba64:	4601      	mov	r1, r0
    ba66:	3008      	adds	r0, #8
    ba68:	4402      	add	r2, r0
    ba6a:	4294      	cmp	r4, r2
    ba6c:	d00b      	beq.n	ba86 <vTaskSwitchContext+0x92>
    ba6e:	4908      	ldr	r1, [pc, #32]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ba74:	009a      	lsls	r2, r3, #2
    ba76:	440a      	add	r2, r1
    ba78:	6b53      	ldr	r3, [r2, #52]	; 0x34
    ba7a:	68db      	ldr	r3, [r3, #12]
    ba7c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
    ba80:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba84:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    ba86:	6860      	ldr	r0, [r4, #4]
    ba88:	4a01      	ldr	r2, [pc, #4]	; (ba90 <vTaskSwitchContext+0x9c>)
    ba8a:	440a      	add	r2, r1
    ba8c:	6350      	str	r0, [r2, #52]	; 0x34
    ba8e:	e7ee      	b.n	ba6e <vTaskSwitchContext+0x7a>
    ba90:	200127a8 	.word	0x200127a8

0000ba94 <vTaskPlaceOnEventList>:
{
    ba94:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    ba96:	b1a8      	cbz	r0, bac4 <vTaskPlaceOnEventList+0x30>
    ba98:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    ba9a:	4d12      	ldr	r5, [pc, #72]	; (bae4 <vTaskPlaceOnEventList+0x50>)
    ba9c:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    baa0:	3118      	adds	r1, #24
    baa2:	4b11      	ldr	r3, [pc, #68]	; (bae8 <vTaskPlaceOnEventList+0x54>)
    baa4:	4798      	blx	r3
	if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    baa6:	f8d5 00d4 	ldr.w	r0, [r5, #212]	; 0xd4
    baaa:	3004      	adds	r0, #4
    baac:	4b0f      	ldr	r3, [pc, #60]	; (baec <vTaskPlaceOnEventList+0x58>)
    baae:	4798      	blx	r3
		if (xTicksToWait == portMAX_DELAY) {
    bab0:	f1b4 3fff 	cmp.w	r4, #4294967295
    bab4:	d00f      	beq.n	bad6 <vTaskPlaceOnEventList+0x42>
			xTimeToWake = xTickCount + xTicksToWait;
    bab6:	4b0b      	ldr	r3, [pc, #44]	; (bae4 <vTaskPlaceOnEventList+0x50>)
    bab8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    babc:	4420      	add	r0, r4
    babe:	4b0c      	ldr	r3, [pc, #48]	; (baf0 <vTaskPlaceOnEventList+0x5c>)
    bac0:	4798      	blx	r3
    bac2:	bd38      	pop	{r3, r4, r5, pc}
    bac4:	f04f 0380 	mov.w	r3, #128	; 0x80
    bac8:	f383 8811 	msr	BASEPRI, r3
    bacc:	f3bf 8f6f 	isb	sy
    bad0:	f3bf 8f4f 	dsb	sy
    bad4:	e7fe      	b.n	bad4 <vTaskPlaceOnEventList+0x40>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xGenericListItem));
    bad6:	4628      	mov	r0, r5
    bad8:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
    badc:	3104      	adds	r1, #4
    bade:	4b05      	ldr	r3, [pc, #20]	; (baf4 <vTaskPlaceOnEventList+0x60>)
    bae0:	4798      	blx	r3
    bae2:	bd38      	pop	{r3, r4, r5, pc}
    bae4:	200127a8 	.word	0x200127a8
    bae8:	0000a539 	.word	0x0000a539
    baec:	0000a56d 	.word	0x0000a56d
    baf0:	0000b479 	.word	0x0000b479
    baf4:	0000a521 	.word	0x0000a521

0000baf8 <vTaskPlaceOnEventListRestricted>:
	configASSERT(pxEventList);
    baf8:	b1b0      	cbz	r0, bb28 <vTaskPlaceOnEventListRestricted+0x30>
{
    bafa:	b570      	push	{r4, r5, r6, lr}
    bafc:	4615      	mov	r5, r2
    bafe:	460c      	mov	r4, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    bb00:	4e11      	ldr	r6, [pc, #68]	; (bb48 <vTaskPlaceOnEventListRestricted+0x50>)
    bb02:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
    bb06:	3118      	adds	r1, #24
    bb08:	4b10      	ldr	r3, [pc, #64]	; (bb4c <vTaskPlaceOnEventListRestricted+0x54>)
    bb0a:	4798      	blx	r3
	if (uxListRemove(&(pxCurrentTCB->xGenericListItem)) == (UBaseType_t)0) {
    bb0c:	f8d6 00d4 	ldr.w	r0, [r6, #212]	; 0xd4
    bb10:	3004      	adds	r0, #4
    bb12:	4b0f      	ldr	r3, [pc, #60]	; (bb50 <vTaskPlaceOnEventListRestricted+0x58>)
    bb14:	4798      	blx	r3
		if (xWaitIndefinitely == pdTRUE) {
    bb16:	2d01      	cmp	r5, #1
    bb18:	d00f      	beq.n	bb3a <vTaskPlaceOnEventListRestricted+0x42>
			xTimeToWake = xTickCount + xTicksToWait;
    bb1a:	4b0b      	ldr	r3, [pc, #44]	; (bb48 <vTaskPlaceOnEventListRestricted+0x50>)
    bb1c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
			prvAddCurrentTaskToDelayedList(xTimeToWake);
    bb20:	4420      	add	r0, r4
    bb22:	4b0c      	ldr	r3, [pc, #48]	; (bb54 <vTaskPlaceOnEventListRestricted+0x5c>)
    bb24:	4798      	blx	r3
    bb26:	bd70      	pop	{r4, r5, r6, pc}
    bb28:	f04f 0380 	mov.w	r3, #128	; 0x80
    bb2c:	f383 8811 	msr	BASEPRI, r3
    bb30:	f3bf 8f6f 	isb	sy
    bb34:	f3bf 8f4f 	dsb	sy
    bb38:	e7fe      	b.n	bb38 <vTaskPlaceOnEventListRestricted+0x40>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xGenericListItem));
    bb3a:	4630      	mov	r0, r6
    bb3c:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
    bb40:	3104      	adds	r1, #4
    bb42:	4b02      	ldr	r3, [pc, #8]	; (bb4c <vTaskPlaceOnEventListRestricted+0x54>)
    bb44:	4798      	blx	r3
    bb46:	bd70      	pop	{r4, r5, r6, pc}
    bb48:	200127a8 	.word	0x200127a8
    bb4c:	0000a521 	.word	0x0000a521
    bb50:	0000a56d 	.word	0x0000a56d
    bb54:	0000b479 	.word	0x0000b479

0000bb58 <xTaskRemoveFromEventList>:
{
    bb58:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    bb5a:	68c3      	ldr	r3, [r0, #12]
    bb5c:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    bb5e:	b34c      	cbz	r4, bbb4 <xTaskRemoveFromEventList+0x5c>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    bb60:	f104 0518 	add.w	r5, r4, #24
    bb64:	4628      	mov	r0, r5
    bb66:	4b1b      	ldr	r3, [pc, #108]	; (bbd4 <xTaskRemoveFromEventList+0x7c>)
    bb68:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    bb6a:	4b1b      	ldr	r3, [pc, #108]	; (bbd8 <xTaskRemoveFromEventList+0x80>)
    bb6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    bb70:	bb4b      	cbnz	r3, bbc6 <xTaskRemoveFromEventList+0x6e>
		(void)uxListRemove(&(pxUnblockedTCB->xGenericListItem));
    bb72:	1d25      	adds	r5, r4, #4
    bb74:	4628      	mov	r0, r5
    bb76:	4b17      	ldr	r3, [pc, #92]	; (bbd4 <xTaskRemoveFromEventList+0x7c>)
    bb78:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    bb7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bb7c:	4a16      	ldr	r2, [pc, #88]	; (bbd8 <xTaskRemoveFromEventList+0x80>)
    bb7e:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    bb82:	4293      	cmp	r3, r2
    bb84:	d902      	bls.n	bb8c <xTaskRemoveFromEventList+0x34>
    bb86:	4a14      	ldr	r2, [pc, #80]	; (bbd8 <xTaskRemoveFromEventList+0x80>)
    bb88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    bb8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bb90:	009a      	lsls	r2, r3, #2
    bb92:	4629      	mov	r1, r5
    bb94:	4811      	ldr	r0, [pc, #68]	; (bbdc <xTaskRemoveFromEventList+0x84>)
    bb96:	4410      	add	r0, r2
    bb98:	4b11      	ldr	r3, [pc, #68]	; (bbe0 <xTaskRemoveFromEventList+0x88>)
    bb9a:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    bb9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    bb9e:	4b0e      	ldr	r3, [pc, #56]	; (bbd8 <xTaskRemoveFromEventList+0x80>)
    bba0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    bba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bba6:	429a      	cmp	r2, r3
    bba8:	d912      	bls.n	bbd0 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
    bbaa:	2001      	movs	r0, #1
    bbac:	4b0a      	ldr	r3, [pc, #40]	; (bbd8 <xTaskRemoveFromEventList+0x80>)
    bbae:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    bbb2:	bd38      	pop	{r3, r4, r5, pc}
    bbb4:	f04f 0380 	mov.w	r3, #128	; 0x80
    bbb8:	f383 8811 	msr	BASEPRI, r3
    bbbc:	f3bf 8f6f 	isb	sy
    bbc0:	f3bf 8f4f 	dsb	sy
    bbc4:	e7fe      	b.n	bbc4 <xTaskRemoveFromEventList+0x6c>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    bbc6:	4629      	mov	r1, r5
    bbc8:	4806      	ldr	r0, [pc, #24]	; (bbe4 <xTaskRemoveFromEventList+0x8c>)
    bbca:	4b05      	ldr	r3, [pc, #20]	; (bbe0 <xTaskRemoveFromEventList+0x88>)
    bbcc:	4798      	blx	r3
    bbce:	e7e5      	b.n	bb9c <xTaskRemoveFromEventList+0x44>
		xReturn = pdFALSE;
    bbd0:	2000      	movs	r0, #0
}
    bbd2:	bd38      	pop	{r3, r4, r5, pc}
    bbd4:	0000a56d 	.word	0x0000a56d
    bbd8:	200127a8 	.word	0x200127a8
    bbdc:	200127d8 	.word	0x200127d8
    bbe0:	0000a521 	.word	0x0000a521
    bbe4:	200127bc 	.word	0x200127bc

0000bbe8 <vTaskSetTimeOutState>:
	configASSERT(pxTimeOut);
    bbe8:	b138      	cbz	r0, bbfa <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    bbea:	4a08      	ldr	r2, [pc, #32]	; (bc0c <vTaskSetTimeOutState+0x24>)
    bbec:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
    bbf0:	6001      	str	r1, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    bbf2:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
    bbf6:	6042      	str	r2, [r0, #4]
    bbf8:	4770      	bx	lr
    bbfa:	f04f 0380 	mov.w	r3, #128	; 0x80
    bbfe:	f383 8811 	msr	BASEPRI, r3
    bc02:	f3bf 8f6f 	isb	sy
    bc06:	f3bf 8f4f 	dsb	sy
    bc0a:	e7fe      	b.n	bc0a <vTaskSetTimeOutState+0x22>
    bc0c:	200127a8 	.word	0x200127a8

0000bc10 <xTaskCheckForTimeOut>:
{
    bc10:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxTimeOut);
    bc12:	b1d0      	cbz	r0, bc4a <xTaskCheckForTimeOut+0x3a>
    bc14:	4604      	mov	r4, r0
	configASSERT(pxTicksToWait);
    bc16:	b309      	cbz	r1, bc5c <xTaskCheckForTimeOut+0x4c>
    bc18:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    bc1a:	4b1c      	ldr	r3, [pc, #112]	; (bc8c <xTaskCheckForTimeOut+0x7c>)
    bc1c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    bc1e:	4b1c      	ldr	r3, [pc, #112]	; (bc90 <xTaskCheckForTimeOut+0x80>)
    bc20:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		if (*pxTicksToWait == portMAX_DELAY) {
    bc24:	682b      	ldr	r3, [r5, #0]
    bc26:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc2a:	d02b      	beq.n	bc84 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    bc2c:	6820      	ldr	r0, [r4, #0]
    bc2e:	4a18      	ldr	r2, [pc, #96]	; (bc90 <xTaskCheckForTimeOut+0x80>)
    bc30:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
    bc34:	4290      	cmp	r0, r2
    bc36:	d002      	beq.n	bc3e <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    bc38:	6862      	ldr	r2, [r4, #4]
    bc3a:	4291      	cmp	r1, r2
    bc3c:	d224      	bcs.n	bc88 <xTaskCheckForTimeOut+0x78>
		} else if ((xConstTickCount - pxTimeOut->xTimeOnEntering) < *pxTicksToWait) {
    bc3e:	6862      	ldr	r2, [r4, #4]
    bc40:	1a88      	subs	r0, r1, r2
    bc42:	4283      	cmp	r3, r0
    bc44:	d813      	bhi.n	bc6e <xTaskCheckForTimeOut+0x5e>
			xReturn = pdTRUE;
    bc46:	2401      	movs	r4, #1
    bc48:	e018      	b.n	bc7c <xTaskCheckForTimeOut+0x6c>
    bc4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    bc4e:	f383 8811 	msr	BASEPRI, r3
    bc52:	f3bf 8f6f 	isb	sy
    bc56:	f3bf 8f4f 	dsb	sy
    bc5a:	e7fe      	b.n	bc5a <xTaskCheckForTimeOut+0x4a>
    bc5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    bc60:	f383 8811 	msr	BASEPRI, r3
    bc64:	f3bf 8f6f 	isb	sy
    bc68:	f3bf 8f4f 	dsb	sy
    bc6c:	e7fe      	b.n	bc6c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= (xConstTickCount - pxTimeOut->xTimeOnEntering);
    bc6e:	1a52      	subs	r2, r2, r1
    bc70:	4413      	add	r3, r2
    bc72:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState(pxTimeOut);
    bc74:	4620      	mov	r0, r4
    bc76:	4b07      	ldr	r3, [pc, #28]	; (bc94 <xTaskCheckForTimeOut+0x84>)
    bc78:	4798      	blx	r3
			xReturn = pdFALSE;
    bc7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    bc7c:	4b06      	ldr	r3, [pc, #24]	; (bc98 <xTaskCheckForTimeOut+0x88>)
    bc7e:	4798      	blx	r3
}
    bc80:	4620      	mov	r0, r4
    bc82:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdFALSE;
    bc84:	2400      	movs	r4, #0
    bc86:	e7f9      	b.n	bc7c <xTaskCheckForTimeOut+0x6c>
			xReturn = pdTRUE;
    bc88:	2401      	movs	r4, #1
    bc8a:	e7f7      	b.n	bc7c <xTaskCheckForTimeOut+0x6c>
    bc8c:	0000a645 	.word	0x0000a645
    bc90:	200127a8 	.word	0x200127a8
    bc94:	0000bbe9 	.word	0x0000bbe9
    bc98:	0000a689 	.word	0x0000a689

0000bc9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    bc9c:	2201      	movs	r2, #1
    bc9e:	4b02      	ldr	r3, [pc, #8]	; (bca8 <vTaskMissedYield+0xc>)
    bca0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    bca4:	4770      	bx	lr
    bca6:	bf00      	nop
    bca8:	200127a8 	.word	0x200127a8

0000bcac <xTaskGetSchedulerState>:

BaseType_t xTaskGetSchedulerState(void)
{
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
    bcac:	4b06      	ldr	r3, [pc, #24]	; (bcc8 <xTaskGetSchedulerState+0x1c>)
    bcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    bcb2:	b12b      	cbz	r3, bcc0 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
	} else {
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    bcb4:	4b04      	ldr	r3, [pc, #16]	; (bcc8 <xTaskGetSchedulerState+0x1c>)
    bcb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    bcba:	b91b      	cbnz	r3, bcc4 <xTaskGetSchedulerState+0x18>
			xReturn = taskSCHEDULER_RUNNING;
    bcbc:	2002      	movs	r0, #2
    bcbe:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    bcc0:	2001      	movs	r0, #1
    bcc2:	4770      	bx	lr
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
    bcc4:	2000      	movs	r0, #0
		}
	}

	return xReturn;
}
    bcc6:	4770      	bx	lr
    bcc8:	200127a8 	.word	0x200127a8

0000bccc <vTaskPriorityInherit>:
{
	TCB_t *const pxTCB = (TCB_t *)pxMutexHolder;

	/* If the mutex was given back by an interrupt while the queue was
	locked then the mutex holder might now be NULL. */
	if (pxMutexHolder != NULL) {
    bccc:	2800      	cmp	r0, #0
    bcce:	d03d      	beq.n	bd4c <vTaskPriorityInherit+0x80>
{
    bcd0:	b538      	push	{r3, r4, r5, lr}
    bcd2:	4605      	mov	r5, r0
		/* If the holder of the mutex has a priority below the priority of
		the task attempting to obtain the mutex then it will temporarily
		inherit the priority of the task attempting to obtain the mutex. */
		if (pxTCB->uxPriority < pxCurrentTCB->uxPriority) {
    bcd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    bcd6:	491e      	ldr	r1, [pc, #120]	; (bd50 <vTaskPriorityInherit+0x84>)
    bcd8:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
    bcdc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    bcde:	428b      	cmp	r3, r1
    bce0:	d218      	bcs.n	bd14 <vTaskPriorityInherit+0x48>
			/* Adjust the mutex holder state to account for its new
			priority.  Only reset the event list item value if the value is
			not	being used for anything else. */
			if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    bce2:	6981      	ldr	r1, [r0, #24]
    bce4:	2900      	cmp	r1, #0
    bce6:	db06      	blt.n	bcf6 <vTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    bce8:	4919      	ldr	r1, [pc, #100]	; (bd50 <vTaskPriorityInherit+0x84>)
    bcea:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
    bcee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    bcf0:	f1c1 0105 	rsb	r1, r1, #5
    bcf4:	6181      	str	r1, [r0, #24]
				mtCOVERAGE_TEST_MARKER();
			}

			/* If the task being modified is in the ready state it will need
			to be moved into a new list. */
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxTCB->uxPriority]), &(pxTCB->xGenericListItem))
    bcf6:	6968      	ldr	r0, [r5, #20]
    bcf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bcfc:	0099      	lsls	r1, r3, #2
    bcfe:	4b15      	ldr	r3, [pc, #84]	; (bd54 <vTaskPriorityInherit+0x88>)
    bd00:	440b      	add	r3, r1
			    != pdFALSE) {
    bd02:	4298      	cmp	r0, r3
    bd04:	d007      	beq.n	bd16 <vTaskPriorityInherit+0x4a>
    bd06:	2300      	movs	r3, #0
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxTCB->uxPriority]), &(pxTCB->xGenericListItem))
    bd08:	b93b      	cbnz	r3, bd1a <vTaskPriorityInherit+0x4e>
				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
				prvAddTaskToReadyList(pxTCB);
			} else {
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    bd0a:	4b11      	ldr	r3, [pc, #68]	; (bd50 <vTaskPriorityInherit+0x84>)
    bd0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd12:	62eb      	str	r3, [r5, #44]	; 0x2c
    bd14:	bd38      	pop	{r3, r4, r5, pc}
			    != pdFALSE) {
    bd16:	2301      	movs	r3, #1
    bd18:	e7f6      	b.n	bd08 <vTaskPriorityInherit+0x3c>
				if (uxListRemove(&(pxTCB->xGenericListItem)) == (UBaseType_t)0) {
    bd1a:	1d2c      	adds	r4, r5, #4
    bd1c:	4620      	mov	r0, r4
    bd1e:	4b0e      	ldr	r3, [pc, #56]	; (bd58 <vTaskPriorityInherit+0x8c>)
    bd20:	4798      	blx	r3
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    bd22:	4a0b      	ldr	r2, [pc, #44]	; (bd50 <vTaskPriorityInherit+0x84>)
    bd24:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    bd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bd2a:	62eb      	str	r3, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxTCB);
    bd2c:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    bd30:	4293      	cmp	r3, r2
    bd32:	d902      	bls.n	bd3a <vTaskPriorityInherit+0x6e>
    bd34:	4a06      	ldr	r2, [pc, #24]	; (bd50 <vTaskPriorityInherit+0x84>)
    bd36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    bd3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bd3e:	009a      	lsls	r2, r3, #2
    bd40:	4621      	mov	r1, r4
    bd42:	4804      	ldr	r0, [pc, #16]	; (bd54 <vTaskPriorityInherit+0x88>)
    bd44:	4410      	add	r0, r2
    bd46:	4b05      	ldr	r3, [pc, #20]	; (bd5c <vTaskPriorityInherit+0x90>)
    bd48:	4798      	blx	r3
    bd4a:	bd38      	pop	{r3, r4, r5, pc}
    bd4c:	4770      	bx	lr
    bd4e:	bf00      	nop
    bd50:	200127a8 	.word	0x200127a8
    bd54:	200127d8 	.word	0x200127d8
    bd58:	0000a56d 	.word	0x0000a56d
    bd5c:	0000a521 	.word	0x0000a521

0000bd60 <xTaskPriorityDisinherit>:
BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder)
{
	TCB_t *const pxTCB   = (TCB_t *)pxMutexHolder;
	BaseType_t   xReturn = pdFALSE;

	if (pxMutexHolder != NULL) {
    bd60:	2800      	cmp	r0, #0
    bd62:	d03c      	beq.n	bdde <xTaskPriorityDisinherit+0x7e>
{
    bd64:	b538      	push	{r3, r4, r5, lr}
    bd66:	4604      	mov	r4, r0
		/* A task can only have an inherited priority if it holds the mutex.
		If the mutex is held by a task then it cannot be given from an
		interrupt, and if a mutex is given by the holding task then it must
		be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
    bd68:	4a20      	ldr	r2, [pc, #128]	; (bdec <xTaskPriorityDisinherit+0x8c>)
    bd6a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    bd6e:	4290      	cmp	r0, r2
    bd70:	d008      	beq.n	bd84 <xTaskPriorityDisinherit+0x24>
    bd72:	f04f 0380 	mov.w	r3, #128	; 0x80
    bd76:	f383 8811 	msr	BASEPRI, r3
    bd7a:	f3bf 8f6f 	isb	sy
    bd7e:	f3bf 8f4f 	dsb	sy
    bd82:	e7fe      	b.n	bd82 <xTaskPriorityDisinherit+0x22>

		configASSERT(pxTCB->uxMutexesHeld);
    bd84:	6c82      	ldr	r2, [r0, #72]	; 0x48
    bd86:	b942      	cbnz	r2, bd9a <xTaskPriorityDisinherit+0x3a>
    bd88:	f04f 0380 	mov.w	r3, #128	; 0x80
    bd8c:	f383 8811 	msr	BASEPRI, r3
    bd90:	f3bf 8f6f 	isb	sy
    bd94:	f3bf 8f4f 	dsb	sy
    bd98:	e7fe      	b.n	bd98 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    bd9a:	3a01      	subs	r2, #1
    bd9c:	6482      	str	r2, [r0, #72]	; 0x48

		/* Has the holder of the mutex inherited the priority of another
		task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    bd9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    bda0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    bda2:	4288      	cmp	r0, r1
    bda4:	d01d      	beq.n	bde2 <xTaskPriorityDisinherit+0x82>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    bda6:	b9f2      	cbnz	r2, bde6 <xTaskPriorityDisinherit+0x86>
				/* A task can only have an inherited priority if it holds
				the mutex.  If the mutex is held by a task then it cannot be
				given from an interrupt, and if a mutex is given by the
				holding	task then it must be the running state task.  Remove
				the	holding task from the ready	list. */
				if (uxListRemove(&(pxTCB->xGenericListItem)) == (UBaseType_t)0) {
    bda8:	1d25      	adds	r5, r4, #4
    bdaa:	4628      	mov	r0, r5
    bdac:	4b10      	ldr	r3, [pc, #64]	; (bdf0 <xTaskPriorityDisinherit+0x90>)
    bdae:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the
				new	ready list. */
				traceTASK_PRIORITY_DISINHERIT(pxTCB, pxTCB->uxBasePriority);
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    bdb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bdb2:	62e3      	str	r3, [r4, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
				any other purpose if this task is running, and it must be
				running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(
    bdb4:	f1c3 0205 	rsb	r2, r3, #5
    bdb8:	61a2      	str	r2, [r4, #24]
				    &(pxTCB->xEventListItem),
				    (TickType_t)configMAX_PRIORITIES - (TickType_t)pxTCB->uxPriority); /*lint !e961 MISRA exception as
				                                                                          the casts are only redundant
				                                                                          for some ports. */
				prvAddTaskToReadyList(pxTCB);
    bdba:	4a0c      	ldr	r2, [pc, #48]	; (bdec <xTaskPriorityDisinherit+0x8c>)
    bdbc:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
    bdc0:	4293      	cmp	r3, r2
    bdc2:	d902      	bls.n	bdca <xTaskPriorityDisinherit+0x6a>
    bdc4:	4a09      	ldr	r2, [pc, #36]	; (bdec <xTaskPriorityDisinherit+0x8c>)
    bdc6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    bdca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bdce:	009a      	lsls	r2, r3, #2
    bdd0:	4629      	mov	r1, r5
    bdd2:	4808      	ldr	r0, [pc, #32]	; (bdf4 <xTaskPriorityDisinherit+0x94>)
    bdd4:	4410      	add	r0, r2
    bdd6:	4b08      	ldr	r3, [pc, #32]	; (bdf8 <xTaskPriorityDisinherit+0x98>)
    bdd8:	4798      	blx	r3
				in an order different to that in which they were taken.
				If a context switch did not occur when the first mutex was
				returned, even if a task was waiting on it, then a context
				switch should occur when the last mutex is returned whether
				a task is waiting on it or not. */
				xReturn = pdTRUE;
    bdda:	2001      	movs	r0, #1
    bddc:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    bdde:	2000      	movs	r0, #0
    bde0:	4770      	bx	lr
    bde2:	2000      	movs	r0, #0
    bde4:	bd38      	pop	{r3, r4, r5, pc}
    bde6:	2000      	movs	r0, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    bde8:	bd38      	pop	{r3, r4, r5, pc}
    bdea:	bf00      	nop
    bdec:	200127a8 	.word	0x200127a8
    bdf0:	0000a56d 	.word	0x0000a56d
    bdf4:	200127d8 	.word	0x200127d8
    bdf8:	0000a521 	.word	0x0000a521

0000bdfc <pvTaskIncrementMutexHeldCount>:

void *pvTaskIncrementMutexHeldCount(void)
{
	/* If xSemaphoreCreateMutex() is called before any tasks have been created
	then pxCurrentTCB will be NULL. */
	if (pxCurrentTCB != NULL) {
    bdfc:	4b06      	ldr	r3, [pc, #24]	; (be18 <pvTaskIncrementMutexHeldCount+0x1c>)
    bdfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    be02:	b12b      	cbz	r3, be10 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    be04:	4b04      	ldr	r3, [pc, #16]	; (be18 <pvTaskIncrementMutexHeldCount+0x1c>)
    be06:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    be0a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    be0c:	3301      	adds	r3, #1
    be0e:	6493      	str	r3, [r2, #72]	; 0x48
	}

	return pxCurrentTCB;
    be10:	4b01      	ldr	r3, [pc, #4]	; (be18 <pvTaskIncrementMutexHeldCount+0x1c>)
    be12:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
}
    be16:	4770      	bx	lr
    be18:	200127a8 	.word	0x200127a8

0000be1c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    be1c:	4b06      	ldr	r3, [pc, #24]	; (be38 <prvGetNextExpireTime+0x1c>)
    be1e:	681a      	ldr	r2, [r3, #0]
    be20:	6813      	ldr	r3, [r2, #0]
    be22:	fab3 f383 	clz	r3, r3
    be26:	095b      	lsrs	r3, r3, #5
    be28:	6003      	str	r3, [r0, #0]
	if (*pxListWasEmpty == pdFALSE) {
    be2a:	b913      	cbnz	r3, be32 <prvGetNextExpireTime+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    be2c:	68d3      	ldr	r3, [r2, #12]
    be2e:	6818      	ldr	r0, [r3, #0]
    be30:	4770      	bx	lr
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
    be32:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
    be34:	4770      	bx	lr
    be36:	bf00      	nop
    be38:	200128a8 	.word	0x200128a8

0000be3c <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    be3c:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    be3e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    be40:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    be42:	4291      	cmp	r1, r2
    be44:	d80c      	bhi.n	be60 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if ((xTimeNow - xCommandTime) >= pxTimer->xTimerPeriodInTicks) {
    be46:	1ad2      	subs	r2, r2, r3
    be48:	6983      	ldr	r3, [r0, #24]
    be4a:	429a      	cmp	r2, r3
    be4c:	d301      	bcc.n	be52 <prvInsertTimerInActiveList+0x16>
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    be4e:	2001      	movs	r0, #1
    be50:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    be52:	1d01      	adds	r1, r0, #4
    be54:	4b09      	ldr	r3, [pc, #36]	; (be7c <prvInsertTimerInActiveList+0x40>)
    be56:	6858      	ldr	r0, [r3, #4]
    be58:	4b09      	ldr	r3, [pc, #36]	; (be80 <prvInsertTimerInActiveList+0x44>)
    be5a:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    be5c:	2000      	movs	r0, #0
    be5e:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    be60:	429a      	cmp	r2, r3
    be62:	d201      	bcs.n	be68 <prvInsertTimerInActiveList+0x2c>
    be64:	4299      	cmp	r1, r3
    be66:	d206      	bcs.n	be76 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    be68:	1d01      	adds	r1, r0, #4
    be6a:	4b04      	ldr	r3, [pc, #16]	; (be7c <prvInsertTimerInActiveList+0x40>)
    be6c:	6818      	ldr	r0, [r3, #0]
    be6e:	4b04      	ldr	r3, [pc, #16]	; (be80 <prvInsertTimerInActiveList+0x44>)
    be70:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    be72:	2000      	movs	r0, #0
    be74:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    be76:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    be78:	bd08      	pop	{r3, pc}
    be7a:	bf00      	nop
    be7c:	200128a8 	.word	0x200128a8
    be80:	0000a539 	.word	0x0000a539

0000be84 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    be86:	4b12      	ldr	r3, [pc, #72]	; (bed0 <prvCheckForValidListAndQueue+0x4c>)
    be88:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    be8a:	4b12      	ldr	r3, [pc, #72]	; (bed4 <prvCheckForValidListAndQueue+0x50>)
    be8c:	689b      	ldr	r3, [r3, #8]
    be8e:	b113      	cbz	r3, be96 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    be90:	4b11      	ldr	r3, [pc, #68]	; (bed8 <prvCheckForValidListAndQueue+0x54>)
    be92:	4798      	blx	r3
    be94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    be96:	4c0f      	ldr	r4, [pc, #60]	; (bed4 <prvCheckForValidListAndQueue+0x50>)
    be98:	f104 060c 	add.w	r6, r4, #12
    be9c:	4630      	mov	r0, r6
    be9e:	4f0f      	ldr	r7, [pc, #60]	; (bedc <prvCheckForValidListAndQueue+0x58>)
    bea0:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    bea2:	f104 0520 	add.w	r5, r4, #32
    bea6:	4628      	mov	r0, r5
    bea8:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    beaa:	6026      	str	r6, [r4, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    beac:	6065      	str	r5, [r4, #4]
			xTimerQueue         = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    beae:	2200      	movs	r2, #0
    beb0:	210c      	movs	r1, #12
    beb2:	2002      	movs	r0, #2
    beb4:	4b0a      	ldr	r3, [pc, #40]	; (bee0 <prvCheckForValidListAndQueue+0x5c>)
    beb6:	4798      	blx	r3
    beb8:	60a0      	str	r0, [r4, #8]
			configASSERT(xTimerQueue);
    beba:	2800      	cmp	r0, #0
    bebc:	d1e8      	bne.n	be90 <prvCheckForValidListAndQueue+0xc>
    bebe:	f04f 0380 	mov.w	r3, #128	; 0x80
    bec2:	f383 8811 	msr	BASEPRI, r3
    bec6:	f3bf 8f6f 	isb	sy
    beca:	f3bf 8f4f 	dsb	sy
    bece:	e7fe      	b.n	bece <prvCheckForValidListAndQueue+0x4a>
    bed0:	0000a645 	.word	0x0000a645
    bed4:	200128a8 	.word	0x200128a8
    bed8:	0000a689 	.word	0x0000a689
    bedc:	0000a505 	.word	0x0000a505
    bee0:	0000ac85 	.word	0x0000ac85

0000bee4 <xTimerCreateTimerTask>:
{
    bee4:	b510      	push	{r4, lr}
    bee6:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
    bee8:	4b0f      	ldr	r3, [pc, #60]	; (bf28 <xTimerCreateTimerTask+0x44>)
    beea:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    beec:	4b0f      	ldr	r3, [pc, #60]	; (bf2c <xTimerCreateTimerTask+0x48>)
    beee:	689b      	ldr	r3, [r3, #8]
    bef0:	b1ab      	cbz	r3, bf1e <xTimerCreateTimerTask+0x3a>
			xReturn = xTaskCreate(prvTimerTask,
    bef2:	2300      	movs	r3, #0
    bef4:	9303      	str	r3, [sp, #12]
    bef6:	9302      	str	r3, [sp, #8]
    bef8:	9301      	str	r3, [sp, #4]
    befa:	2202      	movs	r2, #2
    befc:	9200      	str	r2, [sp, #0]
    befe:	f44f 7280 	mov.w	r2, #256	; 0x100
    bf02:	490b      	ldr	r1, [pc, #44]	; (bf30 <xTimerCreateTimerTask+0x4c>)
    bf04:	480b      	ldr	r0, [pc, #44]	; (bf34 <xTimerCreateTimerTask+0x50>)
    bf06:	4c0c      	ldr	r4, [pc, #48]	; (bf38 <xTimerCreateTimerTask+0x54>)
    bf08:	47a0      	blx	r4
	configASSERT(xReturn);
    bf0a:	b950      	cbnz	r0, bf22 <xTimerCreateTimerTask+0x3e>
    bf0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    bf10:	f383 8811 	msr	BASEPRI, r3
    bf14:	f3bf 8f6f 	isb	sy
    bf18:	f3bf 8f4f 	dsb	sy
    bf1c:	e7fe      	b.n	bf1c <xTimerCreateTimerTask+0x38>
	BaseType_t xReturn = pdFAIL;
    bf1e:	2000      	movs	r0, #0
    bf20:	e7f3      	b.n	bf0a <xTimerCreateTimerTask+0x26>
}
    bf22:	b004      	add	sp, #16
    bf24:	bd10      	pop	{r4, pc}
    bf26:	bf00      	nop
    bf28:	0000be85 	.word	0x0000be85
    bf2c:	200128a8 	.word	0x200128a8
    bf30:	0000e62c 	.word	0x0000e62c
    bf34:	0000c269 	.word	0x0000c269
    bf38:	0000b4c1 	.word	0x0000b4c1

0000bf3c <xTimerGenericCommand>:
	configASSERT(xTimer);
    bf3c:	b1c0      	cbz	r0, bf70 <xTimerGenericCommand+0x34>
{
    bf3e:	b530      	push	{r4, r5, lr}
    bf40:	b085      	sub	sp, #20
    bf42:	4615      	mov	r5, r2
    bf44:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    bf46:	4a17      	ldr	r2, [pc, #92]	; (bfa4 <xTimerGenericCommand+0x68>)
    bf48:	6890      	ldr	r0, [r2, #8]
    bf4a:	b340      	cbz	r0, bf9e <xTimerGenericCommand+0x62>
    bf4c:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    bf4e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    bf50:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    bf52:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    bf54:	2905      	cmp	r1, #5
    bf56:	dc1c      	bgt.n	bf92 <xTimerGenericCommand+0x56>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    bf58:	4b13      	ldr	r3, [pc, #76]	; (bfa8 <xTimerGenericCommand+0x6c>)
    bf5a:	4798      	blx	r3
    bf5c:	2802      	cmp	r0, #2
    bf5e:	d010      	beq.n	bf82 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    bf60:	2300      	movs	r3, #0
    bf62:	461a      	mov	r2, r3
    bf64:	a901      	add	r1, sp, #4
    bf66:	480f      	ldr	r0, [pc, #60]	; (bfa4 <xTimerGenericCommand+0x68>)
    bf68:	6880      	ldr	r0, [r0, #8]
    bf6a:	4c10      	ldr	r4, [pc, #64]	; (bfac <xTimerGenericCommand+0x70>)
    bf6c:	47a0      	blx	r4
    bf6e:	e014      	b.n	bf9a <xTimerGenericCommand+0x5e>
    bf70:	f04f 0380 	mov.w	r3, #128	; 0x80
    bf74:	f383 8811 	msr	BASEPRI, r3
    bf78:	f3bf 8f6f 	isb	sy
    bf7c:	f3bf 8f4f 	dsb	sy
    bf80:	e7fe      	b.n	bf80 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    bf82:	2300      	movs	r3, #0
    bf84:	9a08      	ldr	r2, [sp, #32]
    bf86:	a901      	add	r1, sp, #4
    bf88:	4806      	ldr	r0, [pc, #24]	; (bfa4 <xTimerGenericCommand+0x68>)
    bf8a:	6880      	ldr	r0, [r0, #8]
    bf8c:	4c07      	ldr	r4, [pc, #28]	; (bfac <xTimerGenericCommand+0x70>)
    bf8e:	47a0      	blx	r4
    bf90:	e003      	b.n	bf9a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    bf92:	2300      	movs	r3, #0
    bf94:	a901      	add	r1, sp, #4
    bf96:	4c06      	ldr	r4, [pc, #24]	; (bfb0 <xTimerGenericCommand+0x74>)
    bf98:	47a0      	blx	r4
}
    bf9a:	b005      	add	sp, #20
    bf9c:	bd30      	pop	{r4, r5, pc}
	BaseType_t          xReturn = pdFAIL;
    bf9e:	2000      	movs	r0, #0
	return xReturn;
    bfa0:	e7fb      	b.n	bf9a <xTimerGenericCommand+0x5e>
    bfa2:	bf00      	nop
    bfa4:	200128a8 	.word	0x200128a8
    bfa8:	0000bcad 	.word	0x0000bcad
    bfac:	0000ad55 	.word	0x0000ad55
    bfb0:	0000af29 	.word	0x0000af29

0000bfb4 <prvSwitchTimerLists>:
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    bfb4:	4b20      	ldr	r3, [pc, #128]	; (c038 <prvSwitchTimerLists+0x84>)
    bfb6:	681b      	ldr	r3, [r3, #0]
    bfb8:	681a      	ldr	r2, [r3, #0]
    bfba:	2a00      	cmp	r2, #0
    bfbc:	d037      	beq.n	c02e <prvSwitchTimerLists+0x7a>
{
    bfbe:	b570      	push	{r4, r5, r6, lr}
    bfc0:	b082      	sub	sp, #8
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    bfc2:	68db      	ldr	r3, [r3, #12]
    bfc4:	681e      	ldr	r6, [r3, #0]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    bfc6:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    bfc8:	1d25      	adds	r5, r4, #4
    bfca:	4628      	mov	r0, r5
    bfcc:	4b1b      	ldr	r3, [pc, #108]	; (c03c <prvSwitchTimerLists+0x88>)
    bfce:	4798      	blx	r3
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    bfd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bfd2:	4620      	mov	r0, r4
    bfd4:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    bfd6:	69e3      	ldr	r3, [r4, #28]
    bfd8:	2b01      	cmp	r3, #1
    bfda:	d00a      	beq.n	bff2 <prvSwitchTimerLists+0x3e>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    bfdc:	4b16      	ldr	r3, [pc, #88]	; (c038 <prvSwitchTimerLists+0x84>)
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	681a      	ldr	r2, [r3, #0]
    bfe2:	2a00      	cmp	r2, #0
    bfe4:	d1ed      	bne.n	bfc2 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList  = pxOverflowTimerList;
    bfe6:	4a14      	ldr	r2, [pc, #80]	; (c038 <prvSwitchTimerLists+0x84>)
    bfe8:	6851      	ldr	r1, [r2, #4]
    bfea:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    bfec:	6053      	str	r3, [r2, #4]
}
    bfee:	b002      	add	sp, #8
    bff0:	bd70      	pop	{r4, r5, r6, pc}
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    bff2:	69a3      	ldr	r3, [r4, #24]
    bff4:	4433      	add	r3, r6
			if (xReloadTime > xNextExpireTime) {
    bff6:	429e      	cmp	r6, r3
    bff8:	d207      	bcs.n	c00a <prvSwitchTimerLists+0x56>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    bffa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    bffc:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    bffe:	4629      	mov	r1, r5
    c000:	4b0d      	ldr	r3, [pc, #52]	; (c038 <prvSwitchTimerLists+0x84>)
    c002:	6818      	ldr	r0, [r3, #0]
    c004:	4b0e      	ldr	r3, [pc, #56]	; (c040 <prvSwitchTimerLists+0x8c>)
    c006:	4798      	blx	r3
    c008:	e7e8      	b.n	bfdc <prvSwitchTimerLists+0x28>
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    c00a:	2100      	movs	r1, #0
    c00c:	9100      	str	r1, [sp, #0]
    c00e:	460b      	mov	r3, r1
    c010:	4632      	mov	r2, r6
    c012:	4620      	mov	r0, r4
    c014:	4c0b      	ldr	r4, [pc, #44]	; (c044 <prvSwitchTimerLists+0x90>)
    c016:	47a0      	blx	r4
				configASSERT(xResult);
    c018:	2800      	cmp	r0, #0
    c01a:	d1df      	bne.n	bfdc <prvSwitchTimerLists+0x28>
    c01c:	f04f 0380 	mov.w	r3, #128	; 0x80
    c020:	f383 8811 	msr	BASEPRI, r3
    c024:	f3bf 8f6f 	isb	sy
    c028:	f3bf 8f4f 	dsb	sy
    c02c:	e7fe      	b.n	c02c <prvSwitchTimerLists+0x78>
	pxCurrentTimerList  = pxOverflowTimerList;
    c02e:	4a02      	ldr	r2, [pc, #8]	; (c038 <prvSwitchTimerLists+0x84>)
    c030:	6851      	ldr	r1, [r2, #4]
    c032:	6011      	str	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    c034:	6053      	str	r3, [r2, #4]
    c036:	4770      	bx	lr
    c038:	200128a8 	.word	0x200128a8
    c03c:	0000a56d 	.word	0x0000a56d
    c040:	0000a539 	.word	0x0000a539
    c044:	0000bf3d 	.word	0x0000bf3d

0000c048 <prvSampleTimeNow>:
{
    c048:	b538      	push	{r3, r4, r5, lr}
    c04a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
    c04c:	4b08      	ldr	r3, [pc, #32]	; (c070 <prvSampleTimeNow+0x28>)
    c04e:	4798      	blx	r3
    c050:	4604      	mov	r4, r0
	if (xTimeNow < xLastTime) {
    c052:	4b08      	ldr	r3, [pc, #32]	; (c074 <prvSampleTimeNow+0x2c>)
    c054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c056:	4298      	cmp	r0, r3
    c058:	d305      	bcc.n	c066 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
    c05a:	2300      	movs	r3, #0
    c05c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
    c05e:	4b05      	ldr	r3, [pc, #20]	; (c074 <prvSampleTimeNow+0x2c>)
    c060:	635c      	str	r4, [r3, #52]	; 0x34
}
    c062:	4620      	mov	r0, r4
    c064:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
    c066:	4b04      	ldr	r3, [pc, #16]	; (c078 <prvSampleTimeNow+0x30>)
    c068:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    c06a:	2301      	movs	r3, #1
    c06c:	602b      	str	r3, [r5, #0]
    c06e:	e7f6      	b.n	c05e <prvSampleTimeNow+0x16>
    c070:	0000b6ad 	.word	0x0000b6ad
    c074:	200128a8 	.word	0x200128a8
    c078:	0000bfb5 	.word	0x0000bfb5

0000c07c <prvProcessExpiredTimer>:
{
    c07c:	b570      	push	{r4, r5, r6, lr}
    c07e:	b082      	sub	sp, #8
    c080:	4605      	mov	r5, r0
    c082:	460e      	mov	r6, r1
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    c084:	4b14      	ldr	r3, [pc, #80]	; (c0d8 <prvProcessExpiredTimer+0x5c>)
    c086:	681b      	ldr	r3, [r3, #0]
    c088:	68db      	ldr	r3, [r3, #12]
    c08a:	68dc      	ldr	r4, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    c08c:	1d20      	adds	r0, r4, #4
    c08e:	4b13      	ldr	r3, [pc, #76]	; (c0dc <prvProcessExpiredTimer+0x60>)
    c090:	4798      	blx	r3
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    c092:	69e3      	ldr	r3, [r4, #28]
    c094:	2b01      	cmp	r3, #1
    c096:	d004      	beq.n	c0a2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    c098:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c09a:	4620      	mov	r0, r4
    c09c:	4798      	blx	r3
}
    c09e:	b002      	add	sp, #8
    c0a0:	bd70      	pop	{r4, r5, r6, pc}
		        pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime)
    c0a2:	69a1      	ldr	r1, [r4, #24]
		if (prvInsertTimerInActiveList(
    c0a4:	462b      	mov	r3, r5
    c0a6:	4632      	mov	r2, r6
    c0a8:	4429      	add	r1, r5
    c0aa:	4620      	mov	r0, r4
    c0ac:	4e0c      	ldr	r6, [pc, #48]	; (c0e0 <prvProcessExpiredTimer+0x64>)
    c0ae:	47b0      	blx	r6
    c0b0:	2801      	cmp	r0, #1
    c0b2:	d1f1      	bne.n	c098 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    c0b4:	2100      	movs	r1, #0
    c0b6:	9100      	str	r1, [sp, #0]
    c0b8:	460b      	mov	r3, r1
    c0ba:	462a      	mov	r2, r5
    c0bc:	4620      	mov	r0, r4
    c0be:	4d09      	ldr	r5, [pc, #36]	; (c0e4 <prvProcessExpiredTimer+0x68>)
    c0c0:	47a8      	blx	r5
			configASSERT(xResult);
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d1e8      	bne.n	c098 <prvProcessExpiredTimer+0x1c>
    c0c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    c0ca:	f383 8811 	msr	BASEPRI, r3
    c0ce:	f3bf 8f6f 	isb	sy
    c0d2:	f3bf 8f4f 	dsb	sy
    c0d6:	e7fe      	b.n	c0d6 <prvProcessExpiredTimer+0x5a>
    c0d8:	200128a8 	.word	0x200128a8
    c0dc:	0000a56d 	.word	0x0000a56d
    c0e0:	0000be3d 	.word	0x0000be3d
    c0e4:	0000bf3d 	.word	0x0000bf3d

0000c0e8 <prvProcessTimerOrBlockTask>:
{
    c0e8:	b570      	push	{r4, r5, r6, lr}
    c0ea:	b082      	sub	sp, #8
    c0ec:	4606      	mov	r6, r0
    c0ee:	460c      	mov	r4, r1
	vTaskSuspendAll();
    c0f0:	4b17      	ldr	r3, [pc, #92]	; (c150 <prvProcessTimerOrBlockTask+0x68>)
    c0f2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    c0f4:	a801      	add	r0, sp, #4
    c0f6:	4b17      	ldr	r3, [pc, #92]	; (c154 <prvProcessTimerOrBlockTask+0x6c>)
    c0f8:	4798      	blx	r3
		if (xTimerListsWereSwitched == pdFALSE) {
    c0fa:	9b01      	ldr	r3, [sp, #4]
    c0fc:	bb23      	cbnz	r3, c148 <prvProcessTimerOrBlockTask+0x60>
    c0fe:	4605      	mov	r5, r0
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    c100:	b90c      	cbnz	r4, c106 <prvProcessTimerOrBlockTask+0x1e>
    c102:	42b0      	cmp	r0, r6
    c104:	d219      	bcs.n	c13a <prvProcessTimerOrBlockTask+0x52>
				if (xListWasEmpty != pdFALSE) {
    c106:	b12c      	cbz	r4, c114 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    c108:	4b13      	ldr	r3, [pc, #76]	; (c158 <prvProcessTimerOrBlockTask+0x70>)
    c10a:	685b      	ldr	r3, [r3, #4]
    c10c:	681c      	ldr	r4, [r3, #0]
    c10e:	fab4 f484 	clz	r4, r4
    c112:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    c114:	4622      	mov	r2, r4
    c116:	1b71      	subs	r1, r6, r5
    c118:	4b0f      	ldr	r3, [pc, #60]	; (c158 <prvProcessTimerOrBlockTask+0x70>)
    c11a:	6898      	ldr	r0, [r3, #8]
    c11c:	4b0f      	ldr	r3, [pc, #60]	; (c15c <prvProcessTimerOrBlockTask+0x74>)
    c11e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    c120:	4b0f      	ldr	r3, [pc, #60]	; (c160 <prvProcessTimerOrBlockTask+0x78>)
    c122:	4798      	blx	r3
    c124:	b938      	cbnz	r0, c136 <prvProcessTimerOrBlockTask+0x4e>
					portYIELD_WITHIN_API();
    c126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c12a:	4b0e      	ldr	r3, [pc, #56]	; (c164 <prvProcessTimerOrBlockTask+0x7c>)
    c12c:	601a      	str	r2, [r3, #0]
    c12e:	f3bf 8f4f 	dsb	sy
    c132:	f3bf 8f6f 	isb	sy
}
    c136:	b002      	add	sp, #8
    c138:	bd70      	pop	{r4, r5, r6, pc}
				(void)xTaskResumeAll();
    c13a:	4b09      	ldr	r3, [pc, #36]	; (c160 <prvProcessTimerOrBlockTask+0x78>)
    c13c:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    c13e:	4629      	mov	r1, r5
    c140:	4630      	mov	r0, r6
    c142:	4b09      	ldr	r3, [pc, #36]	; (c168 <prvProcessTimerOrBlockTask+0x80>)
    c144:	4798      	blx	r3
    c146:	e7f6      	b.n	c136 <prvProcessTimerOrBlockTask+0x4e>
			(void)xTaskResumeAll();
    c148:	4b05      	ldr	r3, [pc, #20]	; (c160 <prvProcessTimerOrBlockTask+0x78>)
    c14a:	4798      	blx	r3
}
    c14c:	e7f3      	b.n	c136 <prvProcessTimerOrBlockTask+0x4e>
    c14e:	bf00      	nop
    c150:	0000b699 	.word	0x0000b699
    c154:	0000c049 	.word	0x0000c049
    c158:	200128a8 	.word	0x200128a8
    c15c:	0000b2f5 	.word	0x0000b2f5
    c160:	0000b7e1 	.word	0x0000b7e1
    c164:	e000ed04 	.word	0xe000ed04
    c168:	0000c07d 	.word	0x0000c07d

0000c16c <prvProcessReceivedCommands>:
{
    c16c:	b530      	push	{r4, r5, lr}
    c16e:	b087      	sub	sp, #28
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    c170:	2300      	movs	r3, #0
    c172:	461a      	mov	r2, r3
    c174:	a903      	add	r1, sp, #12
    c176:	4835      	ldr	r0, [pc, #212]	; (c24c <prvProcessReceivedCommands+0xe0>)
    c178:	6880      	ldr	r0, [r0, #8]
    c17a:	4c35      	ldr	r4, [pc, #212]	; (c250 <prvProcessReceivedCommands+0xe4>)
    c17c:	47a0      	blx	r4
    c17e:	2800      	cmp	r0, #0
    c180:	d061      	beq.n	c246 <prvProcessReceivedCommands+0xda>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    c182:	9b03      	ldr	r3, [sp, #12]
    c184:	2b00      	cmp	r3, #0
    c186:	dbf3      	blt.n	c170 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    c188:	9c05      	ldr	r4, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem)) == pdFALSE) {
    c18a:	6963      	ldr	r3, [r4, #20]
    c18c:	b113      	cbz	r3, c194 <prvProcessReceivedCommands+0x28>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    c18e:	1d20      	adds	r0, r4, #4
    c190:	4b30      	ldr	r3, [pc, #192]	; (c254 <prvProcessReceivedCommands+0xe8>)
    c192:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    c194:	a802      	add	r0, sp, #8
    c196:	4b30      	ldr	r3, [pc, #192]	; (c258 <prvProcessReceivedCommands+0xec>)
    c198:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    c19a:	9b03      	ldr	r3, [sp, #12]
    c19c:	2b09      	cmp	r3, #9
    c19e:	d8e7      	bhi.n	c170 <prvProcessReceivedCommands+0x4>
    c1a0:	a201      	add	r2, pc, #4	; (adr r2, c1a8 <prvProcessReceivedCommands+0x3c>)
    c1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c1a6:	bf00      	nop
    c1a8:	0000c1d1 	.word	0x0000c1d1
    c1ac:	0000c1d1 	.word	0x0000c1d1
    c1b0:	0000c1d1 	.word	0x0000c1d1
    c1b4:	0000c171 	.word	0x0000c171
    c1b8:	0000c219 	.word	0x0000c219
    c1bc:	0000c23f 	.word	0x0000c23f
    c1c0:	0000c1d1 	.word	0x0000c1d1
    c1c4:	0000c1d1 	.word	0x0000c1d1
    c1c8:	0000c171 	.word	0x0000c171
    c1cc:	0000c219 	.word	0x0000c219
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    c1d0:	9904      	ldr	r1, [sp, #16]
    c1d2:	69a5      	ldr	r5, [r4, #24]
				if (prvInsertTimerInActiveList(pxTimer,
    c1d4:	460b      	mov	r3, r1
    c1d6:	4602      	mov	r2, r0
    c1d8:	4429      	add	r1, r5
    c1da:	4620      	mov	r0, r4
    c1dc:	4d1f      	ldr	r5, [pc, #124]	; (c25c <prvProcessReceivedCommands+0xf0>)
    c1de:	47a8      	blx	r5
    c1e0:	2801      	cmp	r0, #1
    c1e2:	d1c5      	bne.n	c170 <prvProcessReceivedCommands+0x4>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    c1e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c1e6:	4620      	mov	r0, r4
    c1e8:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    c1ea:	69e3      	ldr	r3, [r4, #28]
    c1ec:	2b01      	cmp	r3, #1
    c1ee:	d1bf      	bne.n	c170 <prvProcessReceivedCommands+0x4>
						                                   + pxTimer->xTimerPeriodInTicks,
    c1f0:	69a2      	ldr	r2, [r4, #24]
						xResult = xTimerGenericCommand(pxTimer,
    c1f2:	2100      	movs	r1, #0
    c1f4:	9100      	str	r1, [sp, #0]
    c1f6:	460b      	mov	r3, r1
    c1f8:	9804      	ldr	r0, [sp, #16]
    c1fa:	4402      	add	r2, r0
    c1fc:	4620      	mov	r0, r4
    c1fe:	4c18      	ldr	r4, [pc, #96]	; (c260 <prvProcessReceivedCommands+0xf4>)
    c200:	47a0      	blx	r4
						configASSERT(xResult);
    c202:	2800      	cmp	r0, #0
    c204:	d1b4      	bne.n	c170 <prvProcessReceivedCommands+0x4>
    c206:	f04f 0380 	mov.w	r3, #128	; 0x80
    c20a:	f383 8811 	msr	BASEPRI, r3
    c20e:	f3bf 8f6f 	isb	sy
    c212:	f3bf 8f4f 	dsb	sy
    c216:	e7fe      	b.n	c216 <prvProcessReceivedCommands+0xaa>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    c218:	9904      	ldr	r1, [sp, #16]
    c21a:	61a1      	str	r1, [r4, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    c21c:	b131      	cbz	r1, c22c <prvProcessReceivedCommands+0xc0>
				(void)prvInsertTimerInActiveList(
    c21e:	4603      	mov	r3, r0
    c220:	4602      	mov	r2, r0
    c222:	4401      	add	r1, r0
    c224:	4620      	mov	r0, r4
    c226:	4c0d      	ldr	r4, [pc, #52]	; (c25c <prvProcessReceivedCommands+0xf0>)
    c228:	47a0      	blx	r4
				break;
    c22a:	e7a1      	b.n	c170 <prvProcessReceivedCommands+0x4>
    c22c:	f04f 0380 	mov.w	r3, #128	; 0x80
    c230:	f383 8811 	msr	BASEPRI, r3
    c234:	f3bf 8f6f 	isb	sy
    c238:	f3bf 8f4f 	dsb	sy
    c23c:	e7fe      	b.n	c23c <prvProcessReceivedCommands+0xd0>
				vPortFree(pxTimer);
    c23e:	4620      	mov	r0, r4
    c240:	4b08      	ldr	r3, [pc, #32]	; (c264 <prvProcessReceivedCommands+0xf8>)
    c242:	4798      	blx	r3
				break;
    c244:	e794      	b.n	c170 <prvProcessReceivedCommands+0x4>
}
    c246:	b007      	add	sp, #28
    c248:	bd30      	pop	{r4, r5, pc}
    c24a:	bf00      	nop
    c24c:	200128a8 	.word	0x200128a8
    c250:	0000b10d 	.word	0x0000b10d
    c254:	0000a56d 	.word	0x0000a56d
    c258:	0000c049 	.word	0x0000c049
    c25c:	0000be3d 	.word	0x0000be3d
    c260:	0000bf3d 	.word	0x0000bf3d
    c264:	0000a999 	.word	0x0000a999

0000c268 <prvTimerTask>:
{
    c268:	b500      	push	{lr}
    c26a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    c26c:	a801      	add	r0, sp, #4
    c26e:	4b04      	ldr	r3, [pc, #16]	; (c280 <prvTimerTask+0x18>)
    c270:	4798      	blx	r3
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    c272:	9901      	ldr	r1, [sp, #4]
    c274:	4b03      	ldr	r3, [pc, #12]	; (c284 <prvTimerTask+0x1c>)
    c276:	4798      	blx	r3
		prvProcessReceivedCommands();
    c278:	4b03      	ldr	r3, [pc, #12]	; (c288 <prvTimerTask+0x20>)
    c27a:	4798      	blx	r3
    c27c:	e7f6      	b.n	c26c <prvTimerTask+0x4>
    c27e:	bf00      	nop
    c280:	0000be1d 	.word	0x0000be1d
    c284:	0000c0e9 	.word	0x0000c0e9
    c288:	0000c16d 	.word	0x0000c16d

0000c28c <gmac_handler_cb>:
/**
 * \brief Callback for GMAC interrupt.
 * Give semaphore for which gmac_task waits
 */
void gmac_handler_cb(void)
{
    c28c:	b500      	push	{lr}
    c28e:	b083      	sub	sp, #12
	portBASE_TYPE xGMACTaskWoken = pdFALSE;
    c290:	a902      	add	r1, sp, #8
    c292:	2300      	movs	r3, #0
    c294:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(gs_gmac_dev.rx_sem, &xGMACTaskWoken);
    c298:	4b08      	ldr	r3, [pc, #32]	; (c2bc <gmac_handler_cb+0x30>)
    c29a:	6858      	ldr	r0, [r3, #4]
    c29c:	4b08      	ldr	r3, [pc, #32]	; (c2c0 <gmac_handler_cb+0x34>)
    c29e:	4798      	blx	r3
	portEND_SWITCHING_ISR(xGMACTaskWoken);
    c2a0:	9b01      	ldr	r3, [sp, #4]
    c2a2:	b13b      	cbz	r3, c2b4 <gmac_handler_cb+0x28>
    c2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c2a8:	4b06      	ldr	r3, [pc, #24]	; (c2c4 <gmac_handler_cb+0x38>)
    c2aa:	601a      	str	r2, [r3, #0]
    c2ac:	f3bf 8f4f 	dsb	sy
    c2b0:	f3bf 8f6f 	isb	sy
}
    c2b4:	b003      	add	sp, #12
    c2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    c2ba:	bf00      	nop
    c2bc:	20016220 	.word	0x20016220
    c2c0:	0000b029 	.word	0x0000b029
    c2c4:	e000ed04 	.word	0xe000ed04

0000c2c8 <gmac_task>:
/**
 * \brief Task for GMAC.
 * Waits for GMAC interrupt and begins processing of received packets
 */
void gmac_task(void *pvParameters)
{
    c2c8:	b538      	push	{r3, r4, r5, lr}
    c2ca:	4604      	mov	r4, r0
	gmac_device *ps_gmac_dev = pvParameters;

	while (1) {
		/* Wait for the counting RX notification semaphore. */
		xSemaphoreTake(ps_gmac_dev->rx_sem, portMAX_DELAY);
    c2cc:	2300      	movs	r3, #0
    c2ce:	f04f 32ff 	mov.w	r2, #4294967295
    c2d2:	4619      	mov	r1, r3
    c2d4:	6860      	ldr	r0, [r4, #4]
    c2d6:	4d03      	ldr	r5, [pc, #12]	; (c2e4 <gmac_task+0x1c>)
    c2d8:	47a8      	blx	r5

		/* Process the incoming packet. */
		ethernetif_mac_input(ps_gmac_dev->netif);
    c2da:	6820      	ldr	r0, [r4, #0]
    c2dc:	4b02      	ldr	r3, [pc, #8]	; (c2e8 <gmac_task+0x20>)
    c2de:	4798      	blx	r3
    c2e0:	e7f4      	b.n	c2cc <gmac_task+0x4>
    c2e2:	bf00      	nop
    c2e4:	0000b10d 	.word	0x0000b10d
    c2e8:	00002411 	.word	0x00002411

0000c2ec <tcpip_init_done>:
{
    c2ec:	b570      	push	{r4, r5, r6, lr}
    c2ee:	b084      	sub	sp, #16
    c2f0:	4606      	mov	r6, r0
	u8_t mac[6] = {0x00, 0x00, 0x00, 0x00, 0x20, 0x76};
    c2f2:	4b25      	ldr	r3, [pc, #148]	; (c388 <tcpip_init_done+0x9c>)
    c2f4:	e893 0003 	ldmia.w	r3, {r0, r1}
    c2f8:	9002      	str	r0, [sp, #8]
    c2fa:	f8ad 100c 	strh.w	r1, [sp, #12]
	mac_async_register_callback(&COMMUNICATION_IO, MAC_ASYNC_RECEIVE_CB, gmac_handler_cb);
    c2fe:	4c23      	ldr	r4, [pc, #140]	; (c38c <tcpip_init_done+0xa0>)
    c300:	4a23      	ldr	r2, [pc, #140]	; (c390 <tcpip_init_done+0xa4>)
    c302:	2100      	movs	r1, #0
    c304:	4620      	mov	r0, r4
    c306:	4b23      	ldr	r3, [pc, #140]	; (c394 <tcpip_init_done+0xa8>)
    c308:	4798      	blx	r3
	hri_gmac_set_IMR_RCOMP_bit(COMMUNICATION_IO.dev.hw);
    c30a:	6823      	ldr	r3, [r4, #0]
	((Gmac *)hw)->IER.reg = GMAC_IMR_RCOMP;
    c30c:	2202      	movs	r2, #2
    c30e:	629a      	str	r2, [r3, #40]	; 0x28
    c310:	e002      	b.n	c318 <tcpip_init_done+0x2c>
		os_sleep(20);
    c312:	2014      	movs	r0, #20
    c314:	4b20      	ldr	r3, [pc, #128]	; (c398 <tcpip_init_done+0xac>)
    c316:	4798      	blx	r3
	while ((ethernet_phy_get_link_status(&ETHERNET_PHY_0_desc, &link_up)) != ERR_NONE && !(link_up)) {
    c318:	4920      	ldr	r1, [pc, #128]	; (c39c <tcpip_init_done+0xb0>)
    c31a:	4821      	ldr	r0, [pc, #132]	; (c3a0 <tcpip_init_done+0xb4>)
    c31c:	4b21      	ldr	r3, [pc, #132]	; (c3a4 <tcpip_init_done+0xb8>)
    c31e:	4798      	blx	r3
    c320:	b118      	cbz	r0, c32a <tcpip_init_done+0x3e>
    c322:	4b21      	ldr	r3, [pc, #132]	; (c3a8 <tcpip_init_done+0xbc>)
    c324:	785b      	ldrb	r3, [r3, #1]
    c326:	2b00      	cmp	r3, #0
    c328:	d0f3      	beq.n	c312 <tcpip_init_done+0x26>
	printf("\r\nEthernet link up\r\n\r\n");
    c32a:	4820      	ldr	r0, [pc, #128]	; (c3ac <tcpip_init_done+0xc0>)
    c32c:	4b20      	ldr	r3, [pc, #128]	; (c3b0 <tcpip_init_done+0xc4>)
    c32e:	4798      	blx	r3
    c330:	4b20      	ldr	r3, [pc, #128]	; (c3b4 <tcpip_init_done+0xc8>)
    c332:	22a0      	movs	r2, #160	; 0xa0
    c334:	f883 2354 	strb.w	r2, [r3, #852]	; 0x354
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c338:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c33c:	609a      	str	r2, [r3, #8]
	mac_async_enable(&COMMUNICATION_IO);
    c33e:	4813      	ldr	r0, [pc, #76]	; (c38c <tcpip_init_done+0xa0>)
    c340:	4b1d      	ldr	r3, [pc, #116]	; (c3b8 <tcpip_init_done+0xcc>)
    c342:	4798      	blx	r3
	TCPIP_STACK_INTERFACE_0_init(mac);
    c344:	a802      	add	r0, sp, #8
    c346:	4b1d      	ldr	r3, [pc, #116]	; (c3bc <tcpip_init_done+0xd0>)
    c348:	4798      	blx	r3
	TCPIP_STACK_INTERFACE_0_desc.input = tcpip_input;
    c34a:	4c1d      	ldr	r4, [pc, #116]	; (c3c0 <tcpip_init_done+0xd4>)
    c34c:	4b1d      	ldr	r3, [pc, #116]	; (c3c4 <tcpip_init_done+0xd8>)
    c34e:	6123      	str	r3, [r4, #16]
	gs_gmac_dev.netif = &TCPIP_STACK_INTERFACE_0_desc;
    c350:	4d1d      	ldr	r5, [pc, #116]	; (c3c8 <tcpip_init_done+0xdc>)
    c352:	602c      	str	r4, [r5, #0]
	gs_gmac_dev.rx_sem = xSemaphoreCreateCounting(CONF_GMAC_RXDESCR_NUM, 0);
    c354:	2100      	movs	r1, #0
    c356:	2010      	movs	r0, #16
    c358:	4b1c      	ldr	r3, [pc, #112]	; (c3cc <tcpip_init_done+0xe0>)
    c35a:	4798      	blx	r3
    c35c:	6068      	str	r0, [r5, #4]
	id = sys_thread_new("GMAC", gmac_task, &gs_gmac_dev, netifINTERFACE_TASK_STACK_SIZE, netifINTERFACE_TASK_PRIORITY);
    c35e:	2302      	movs	r3, #2
    c360:	9300      	str	r3, [sp, #0]
    c362:	f44f 7300 	mov.w	r3, #512	; 0x200
    c366:	462a      	mov	r2, r5
    c368:	4919      	ldr	r1, [pc, #100]	; (c3d0 <tcpip_init_done+0xe4>)
    c36a:	481a      	ldr	r0, [pc, #104]	; (c3d4 <tcpip_init_done+0xe8>)
    c36c:	4d1a      	ldr	r5, [pc, #104]	; (c3d8 <tcpip_init_done+0xec>)
    c36e:	47a8      	blx	r5
	netif_set_default(&TCPIP_STACK_INTERFACE_0_desc);
    c370:	4620      	mov	r0, r4
    c372:	4b1a      	ldr	r3, [pc, #104]	; (c3dc <tcpip_init_done+0xf0>)
    c374:	4798      	blx	r3
	netif_set_up(&TCPIP_STACK_INTERFACE_0_desc);
    c376:	4620      	mov	r0, r4
    c378:	4b19      	ldr	r3, [pc, #100]	; (c3e0 <tcpip_init_done+0xf4>)
    c37a:	4798      	blx	r3
	sys_sem_signal(sem); /* Signal the waiting thread that the TCP/IP init is done. */
    c37c:	4630      	mov	r0, r6
    c37e:	4b19      	ldr	r3, [pc, #100]	; (c3e4 <tcpip_init_done+0xf8>)
    c380:	4798      	blx	r3
}
    c382:	b004      	add	sp, #16
    c384:	bd70      	pop	{r4, r5, r6, pc}
    c386:	bf00      	nop
    c388:	0000e634 	.word	0x0000e634
    c38c:	20012934 	.word	0x20012934
    c390:	0000c28d 	.word	0x0000c28d
    c394:	00001271 	.word	0x00001271
    c398:	0000b8ed 	.word	0x0000b8ed
    c39c:	200128e1 	.word	0x200128e1
    c3a0:	2001296c 	.word	0x2001296c
    c3a4:	00000e3d 	.word	0x00000e3d
    c3a8:	200128e0 	.word	0x200128e0
    c3ac:	0000e63c 	.word	0x0000e63c
    c3b0:	0000d561 	.word	0x0000d561
    c3b4:	e000e100 	.word	0xe000e100
    c3b8:	000011b5 	.word	0x000011b5
    c3bc:	00000f19 	.word	0x00000f19
    c3c0:	20012974 	.word	0x20012974
    c3c4:	00003d5d 	.word	0x00003d5d
    c3c8:	20016220 	.word	0x20016220
    c3cc:	0000acfd 	.word	0x0000acfd
    c3d0:	0000c2c9 	.word	0x0000c2c9
    c3d4:	0000e654 	.word	0x0000e654
    c3d8:	000026ed 	.word	0x000026ed
    c3dc:	00005e45 	.word	0x00005e45
    c3e0:	00005e51 	.word	0x00005e51
    c3e4:	000024f1 	.word	0x000024f1

0000c3e8 <__aeabi_drsub>:
    c3e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c3ec:	e002      	b.n	c3f4 <__adddf3>
    c3ee:	bf00      	nop

0000c3f0 <__aeabi_dsub>:
    c3f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c3f4 <__adddf3>:
    c3f4:	b530      	push	{r4, r5, lr}
    c3f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c3fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c3fe:	ea94 0f05 	teq	r4, r5
    c402:	bf08      	it	eq
    c404:	ea90 0f02 	teqeq	r0, r2
    c408:	bf1f      	itttt	ne
    c40a:	ea54 0c00 	orrsne.w	ip, r4, r0
    c40e:	ea55 0c02 	orrsne.w	ip, r5, r2
    c412:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c416:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c41a:	f000 80e2 	beq.w	c5e2 <__adddf3+0x1ee>
    c41e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c422:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c426:	bfb8      	it	lt
    c428:	426d      	neglt	r5, r5
    c42a:	dd0c      	ble.n	c446 <__adddf3+0x52>
    c42c:	442c      	add	r4, r5
    c42e:	ea80 0202 	eor.w	r2, r0, r2
    c432:	ea81 0303 	eor.w	r3, r1, r3
    c436:	ea82 0000 	eor.w	r0, r2, r0
    c43a:	ea83 0101 	eor.w	r1, r3, r1
    c43e:	ea80 0202 	eor.w	r2, r0, r2
    c442:	ea81 0303 	eor.w	r3, r1, r3
    c446:	2d36      	cmp	r5, #54	; 0x36
    c448:	bf88      	it	hi
    c44a:	bd30      	pophi	{r4, r5, pc}
    c44c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c450:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c454:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c458:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c45c:	d002      	beq.n	c464 <__adddf3+0x70>
    c45e:	4240      	negs	r0, r0
    c460:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c464:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c468:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c46c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c470:	d002      	beq.n	c478 <__adddf3+0x84>
    c472:	4252      	negs	r2, r2
    c474:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c478:	ea94 0f05 	teq	r4, r5
    c47c:	f000 80a7 	beq.w	c5ce <__adddf3+0x1da>
    c480:	f1a4 0401 	sub.w	r4, r4, #1
    c484:	f1d5 0e20 	rsbs	lr, r5, #32
    c488:	db0d      	blt.n	c4a6 <__adddf3+0xb2>
    c48a:	fa02 fc0e 	lsl.w	ip, r2, lr
    c48e:	fa22 f205 	lsr.w	r2, r2, r5
    c492:	1880      	adds	r0, r0, r2
    c494:	f141 0100 	adc.w	r1, r1, #0
    c498:	fa03 f20e 	lsl.w	r2, r3, lr
    c49c:	1880      	adds	r0, r0, r2
    c49e:	fa43 f305 	asr.w	r3, r3, r5
    c4a2:	4159      	adcs	r1, r3
    c4a4:	e00e      	b.n	c4c4 <__adddf3+0xd0>
    c4a6:	f1a5 0520 	sub.w	r5, r5, #32
    c4aa:	f10e 0e20 	add.w	lr, lr, #32
    c4ae:	2a01      	cmp	r2, #1
    c4b0:	fa03 fc0e 	lsl.w	ip, r3, lr
    c4b4:	bf28      	it	cs
    c4b6:	f04c 0c02 	orrcs.w	ip, ip, #2
    c4ba:	fa43 f305 	asr.w	r3, r3, r5
    c4be:	18c0      	adds	r0, r0, r3
    c4c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c4c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c4c8:	d507      	bpl.n	c4da <__adddf3+0xe6>
    c4ca:	f04f 0e00 	mov.w	lr, #0
    c4ce:	f1dc 0c00 	rsbs	ip, ip, #0
    c4d2:	eb7e 0000 	sbcs.w	r0, lr, r0
    c4d6:	eb6e 0101 	sbc.w	r1, lr, r1
    c4da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c4de:	d31b      	bcc.n	c518 <__adddf3+0x124>
    c4e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c4e4:	d30c      	bcc.n	c500 <__adddf3+0x10c>
    c4e6:	0849      	lsrs	r1, r1, #1
    c4e8:	ea5f 0030 	movs.w	r0, r0, rrx
    c4ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c4f0:	f104 0401 	add.w	r4, r4, #1
    c4f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c4f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c4fc:	f080 809a 	bcs.w	c634 <__adddf3+0x240>
    c500:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c504:	bf08      	it	eq
    c506:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c50a:	f150 0000 	adcs.w	r0, r0, #0
    c50e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c512:	ea41 0105 	orr.w	r1, r1, r5
    c516:	bd30      	pop	{r4, r5, pc}
    c518:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c51c:	4140      	adcs	r0, r0
    c51e:	eb41 0101 	adc.w	r1, r1, r1
    c522:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c526:	f1a4 0401 	sub.w	r4, r4, #1
    c52a:	d1e9      	bne.n	c500 <__adddf3+0x10c>
    c52c:	f091 0f00 	teq	r1, #0
    c530:	bf04      	itt	eq
    c532:	4601      	moveq	r1, r0
    c534:	2000      	moveq	r0, #0
    c536:	fab1 f381 	clz	r3, r1
    c53a:	bf08      	it	eq
    c53c:	3320      	addeq	r3, #32
    c53e:	f1a3 030b 	sub.w	r3, r3, #11
    c542:	f1b3 0220 	subs.w	r2, r3, #32
    c546:	da0c      	bge.n	c562 <__adddf3+0x16e>
    c548:	320c      	adds	r2, #12
    c54a:	dd08      	ble.n	c55e <__adddf3+0x16a>
    c54c:	f102 0c14 	add.w	ip, r2, #20
    c550:	f1c2 020c 	rsb	r2, r2, #12
    c554:	fa01 f00c 	lsl.w	r0, r1, ip
    c558:	fa21 f102 	lsr.w	r1, r1, r2
    c55c:	e00c      	b.n	c578 <__adddf3+0x184>
    c55e:	f102 0214 	add.w	r2, r2, #20
    c562:	bfd8      	it	le
    c564:	f1c2 0c20 	rsble	ip, r2, #32
    c568:	fa01 f102 	lsl.w	r1, r1, r2
    c56c:	fa20 fc0c 	lsr.w	ip, r0, ip
    c570:	bfdc      	itt	le
    c572:	ea41 010c 	orrle.w	r1, r1, ip
    c576:	4090      	lslle	r0, r2
    c578:	1ae4      	subs	r4, r4, r3
    c57a:	bfa2      	ittt	ge
    c57c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c580:	4329      	orrge	r1, r5
    c582:	bd30      	popge	{r4, r5, pc}
    c584:	ea6f 0404 	mvn.w	r4, r4
    c588:	3c1f      	subs	r4, #31
    c58a:	da1c      	bge.n	c5c6 <__adddf3+0x1d2>
    c58c:	340c      	adds	r4, #12
    c58e:	dc0e      	bgt.n	c5ae <__adddf3+0x1ba>
    c590:	f104 0414 	add.w	r4, r4, #20
    c594:	f1c4 0220 	rsb	r2, r4, #32
    c598:	fa20 f004 	lsr.w	r0, r0, r4
    c59c:	fa01 f302 	lsl.w	r3, r1, r2
    c5a0:	ea40 0003 	orr.w	r0, r0, r3
    c5a4:	fa21 f304 	lsr.w	r3, r1, r4
    c5a8:	ea45 0103 	orr.w	r1, r5, r3
    c5ac:	bd30      	pop	{r4, r5, pc}
    c5ae:	f1c4 040c 	rsb	r4, r4, #12
    c5b2:	f1c4 0220 	rsb	r2, r4, #32
    c5b6:	fa20 f002 	lsr.w	r0, r0, r2
    c5ba:	fa01 f304 	lsl.w	r3, r1, r4
    c5be:	ea40 0003 	orr.w	r0, r0, r3
    c5c2:	4629      	mov	r1, r5
    c5c4:	bd30      	pop	{r4, r5, pc}
    c5c6:	fa21 f004 	lsr.w	r0, r1, r4
    c5ca:	4629      	mov	r1, r5
    c5cc:	bd30      	pop	{r4, r5, pc}
    c5ce:	f094 0f00 	teq	r4, #0
    c5d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c5d6:	bf06      	itte	eq
    c5d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c5dc:	3401      	addeq	r4, #1
    c5de:	3d01      	subne	r5, #1
    c5e0:	e74e      	b.n	c480 <__adddf3+0x8c>
    c5e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c5e6:	bf18      	it	ne
    c5e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c5ec:	d029      	beq.n	c642 <__adddf3+0x24e>
    c5ee:	ea94 0f05 	teq	r4, r5
    c5f2:	bf08      	it	eq
    c5f4:	ea90 0f02 	teqeq	r0, r2
    c5f8:	d005      	beq.n	c606 <__adddf3+0x212>
    c5fa:	ea54 0c00 	orrs.w	ip, r4, r0
    c5fe:	bf04      	itt	eq
    c600:	4619      	moveq	r1, r3
    c602:	4610      	moveq	r0, r2
    c604:	bd30      	pop	{r4, r5, pc}
    c606:	ea91 0f03 	teq	r1, r3
    c60a:	bf1e      	ittt	ne
    c60c:	2100      	movne	r1, #0
    c60e:	2000      	movne	r0, #0
    c610:	bd30      	popne	{r4, r5, pc}
    c612:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c616:	d105      	bne.n	c624 <__adddf3+0x230>
    c618:	0040      	lsls	r0, r0, #1
    c61a:	4149      	adcs	r1, r1
    c61c:	bf28      	it	cs
    c61e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c622:	bd30      	pop	{r4, r5, pc}
    c624:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c628:	bf3c      	itt	cc
    c62a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c62e:	bd30      	popcc	{r4, r5, pc}
    c630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c634:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c638:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c63c:	f04f 0000 	mov.w	r0, #0
    c640:	bd30      	pop	{r4, r5, pc}
    c642:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c646:	bf1a      	itte	ne
    c648:	4619      	movne	r1, r3
    c64a:	4610      	movne	r0, r2
    c64c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c650:	bf1c      	itt	ne
    c652:	460b      	movne	r3, r1
    c654:	4602      	movne	r2, r0
    c656:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c65a:	bf06      	itte	eq
    c65c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c660:	ea91 0f03 	teqeq	r1, r3
    c664:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c668:	bd30      	pop	{r4, r5, pc}
    c66a:	bf00      	nop

0000c66c <__aeabi_ui2d>:
    c66c:	f090 0f00 	teq	r0, #0
    c670:	bf04      	itt	eq
    c672:	2100      	moveq	r1, #0
    c674:	4770      	bxeq	lr
    c676:	b530      	push	{r4, r5, lr}
    c678:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c67c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c680:	f04f 0500 	mov.w	r5, #0
    c684:	f04f 0100 	mov.w	r1, #0
    c688:	e750      	b.n	c52c <__adddf3+0x138>
    c68a:	bf00      	nop

0000c68c <__aeabi_i2d>:
    c68c:	f090 0f00 	teq	r0, #0
    c690:	bf04      	itt	eq
    c692:	2100      	moveq	r1, #0
    c694:	4770      	bxeq	lr
    c696:	b530      	push	{r4, r5, lr}
    c698:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c69c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c6a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c6a4:	bf48      	it	mi
    c6a6:	4240      	negmi	r0, r0
    c6a8:	f04f 0100 	mov.w	r1, #0
    c6ac:	e73e      	b.n	c52c <__adddf3+0x138>
    c6ae:	bf00      	nop

0000c6b0 <__aeabi_f2d>:
    c6b0:	0042      	lsls	r2, r0, #1
    c6b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c6b6:	ea4f 0131 	mov.w	r1, r1, rrx
    c6ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c6be:	bf1f      	itttt	ne
    c6c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c6c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c6c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c6cc:	4770      	bxne	lr
    c6ce:	f092 0f00 	teq	r2, #0
    c6d2:	bf14      	ite	ne
    c6d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c6d8:	4770      	bxeq	lr
    c6da:	b530      	push	{r4, r5, lr}
    c6dc:	f44f 7460 	mov.w	r4, #896	; 0x380
    c6e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c6e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c6e8:	e720      	b.n	c52c <__adddf3+0x138>
    c6ea:	bf00      	nop

0000c6ec <__aeabi_ul2d>:
    c6ec:	ea50 0201 	orrs.w	r2, r0, r1
    c6f0:	bf08      	it	eq
    c6f2:	4770      	bxeq	lr
    c6f4:	b530      	push	{r4, r5, lr}
    c6f6:	f04f 0500 	mov.w	r5, #0
    c6fa:	e00a      	b.n	c712 <__aeabi_l2d+0x16>

0000c6fc <__aeabi_l2d>:
    c6fc:	ea50 0201 	orrs.w	r2, r0, r1
    c700:	bf08      	it	eq
    c702:	4770      	bxeq	lr
    c704:	b530      	push	{r4, r5, lr}
    c706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c70a:	d502      	bpl.n	c712 <__aeabi_l2d+0x16>
    c70c:	4240      	negs	r0, r0
    c70e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c712:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c716:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c71a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c71e:	f43f aedc 	beq.w	c4da <__adddf3+0xe6>
    c722:	f04f 0203 	mov.w	r2, #3
    c726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c72a:	bf18      	it	ne
    c72c:	3203      	addne	r2, #3
    c72e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c732:	bf18      	it	ne
    c734:	3203      	addne	r2, #3
    c736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c73a:	f1c2 0320 	rsb	r3, r2, #32
    c73e:	fa00 fc03 	lsl.w	ip, r0, r3
    c742:	fa20 f002 	lsr.w	r0, r0, r2
    c746:	fa01 fe03 	lsl.w	lr, r1, r3
    c74a:	ea40 000e 	orr.w	r0, r0, lr
    c74e:	fa21 f102 	lsr.w	r1, r1, r2
    c752:	4414      	add	r4, r2
    c754:	e6c1      	b.n	c4da <__adddf3+0xe6>
    c756:	bf00      	nop

0000c758 <__aeabi_dmul>:
    c758:	b570      	push	{r4, r5, r6, lr}
    c75a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c75e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c766:	bf1d      	ittte	ne
    c768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c76c:	ea94 0f0c 	teqne	r4, ip
    c770:	ea95 0f0c 	teqne	r5, ip
    c774:	f000 f8de 	bleq	c934 <__aeabi_dmul+0x1dc>
    c778:	442c      	add	r4, r5
    c77a:	ea81 0603 	eor.w	r6, r1, r3
    c77e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c782:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c786:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c78a:	bf18      	it	ne
    c78c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c798:	d038      	beq.n	c80c <__aeabi_dmul+0xb4>
    c79a:	fba0 ce02 	umull	ip, lr, r0, r2
    c79e:	f04f 0500 	mov.w	r5, #0
    c7a2:	fbe1 e502 	umlal	lr, r5, r1, r2
    c7a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c7aa:	fbe0 e503 	umlal	lr, r5, r0, r3
    c7ae:	f04f 0600 	mov.w	r6, #0
    c7b2:	fbe1 5603 	umlal	r5, r6, r1, r3
    c7b6:	f09c 0f00 	teq	ip, #0
    c7ba:	bf18      	it	ne
    c7bc:	f04e 0e01 	orrne.w	lr, lr, #1
    c7c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c7c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c7c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c7cc:	d204      	bcs.n	c7d8 <__aeabi_dmul+0x80>
    c7ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c7d2:	416d      	adcs	r5, r5
    c7d4:	eb46 0606 	adc.w	r6, r6, r6
    c7d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c7dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c7e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c7e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c7e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c7ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c7f0:	bf88      	it	hi
    c7f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c7f6:	d81e      	bhi.n	c836 <__aeabi_dmul+0xde>
    c7f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c7fc:	bf08      	it	eq
    c7fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c802:	f150 0000 	adcs.w	r0, r0, #0
    c806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c80a:	bd70      	pop	{r4, r5, r6, pc}
    c80c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c810:	ea46 0101 	orr.w	r1, r6, r1
    c814:	ea40 0002 	orr.w	r0, r0, r2
    c818:	ea81 0103 	eor.w	r1, r1, r3
    c81c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c820:	bfc2      	ittt	gt
    c822:	ebd4 050c 	rsbsgt	r5, r4, ip
    c826:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c82a:	bd70      	popgt	{r4, r5, r6, pc}
    c82c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c830:	f04f 0e00 	mov.w	lr, #0
    c834:	3c01      	subs	r4, #1
    c836:	f300 80ab 	bgt.w	c990 <__aeabi_dmul+0x238>
    c83a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c83e:	bfde      	ittt	le
    c840:	2000      	movle	r0, #0
    c842:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c846:	bd70      	pople	{r4, r5, r6, pc}
    c848:	f1c4 0400 	rsb	r4, r4, #0
    c84c:	3c20      	subs	r4, #32
    c84e:	da35      	bge.n	c8bc <__aeabi_dmul+0x164>
    c850:	340c      	adds	r4, #12
    c852:	dc1b      	bgt.n	c88c <__aeabi_dmul+0x134>
    c854:	f104 0414 	add.w	r4, r4, #20
    c858:	f1c4 0520 	rsb	r5, r4, #32
    c85c:	fa00 f305 	lsl.w	r3, r0, r5
    c860:	fa20 f004 	lsr.w	r0, r0, r4
    c864:	fa01 f205 	lsl.w	r2, r1, r5
    c868:	ea40 0002 	orr.w	r0, r0, r2
    c86c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c870:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c874:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c878:	fa21 f604 	lsr.w	r6, r1, r4
    c87c:	eb42 0106 	adc.w	r1, r2, r6
    c880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c884:	bf08      	it	eq
    c886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c88a:	bd70      	pop	{r4, r5, r6, pc}
    c88c:	f1c4 040c 	rsb	r4, r4, #12
    c890:	f1c4 0520 	rsb	r5, r4, #32
    c894:	fa00 f304 	lsl.w	r3, r0, r4
    c898:	fa20 f005 	lsr.w	r0, r0, r5
    c89c:	fa01 f204 	lsl.w	r2, r1, r4
    c8a0:	ea40 0002 	orr.w	r0, r0, r2
    c8a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c8a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c8ac:	f141 0100 	adc.w	r1, r1, #0
    c8b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c8b4:	bf08      	it	eq
    c8b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c8ba:	bd70      	pop	{r4, r5, r6, pc}
    c8bc:	f1c4 0520 	rsb	r5, r4, #32
    c8c0:	fa00 f205 	lsl.w	r2, r0, r5
    c8c4:	ea4e 0e02 	orr.w	lr, lr, r2
    c8c8:	fa20 f304 	lsr.w	r3, r0, r4
    c8cc:	fa01 f205 	lsl.w	r2, r1, r5
    c8d0:	ea43 0302 	orr.w	r3, r3, r2
    c8d4:	fa21 f004 	lsr.w	r0, r1, r4
    c8d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c8dc:	fa21 f204 	lsr.w	r2, r1, r4
    c8e0:	ea20 0002 	bic.w	r0, r0, r2
    c8e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c8e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c8ec:	bf08      	it	eq
    c8ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c8f2:	bd70      	pop	{r4, r5, r6, pc}
    c8f4:	f094 0f00 	teq	r4, #0
    c8f8:	d10f      	bne.n	c91a <__aeabi_dmul+0x1c2>
    c8fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c8fe:	0040      	lsls	r0, r0, #1
    c900:	eb41 0101 	adc.w	r1, r1, r1
    c904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c908:	bf08      	it	eq
    c90a:	3c01      	subeq	r4, #1
    c90c:	d0f7      	beq.n	c8fe <__aeabi_dmul+0x1a6>
    c90e:	ea41 0106 	orr.w	r1, r1, r6
    c912:	f095 0f00 	teq	r5, #0
    c916:	bf18      	it	ne
    c918:	4770      	bxne	lr
    c91a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c91e:	0052      	lsls	r2, r2, #1
    c920:	eb43 0303 	adc.w	r3, r3, r3
    c924:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c928:	bf08      	it	eq
    c92a:	3d01      	subeq	r5, #1
    c92c:	d0f7      	beq.n	c91e <__aeabi_dmul+0x1c6>
    c92e:	ea43 0306 	orr.w	r3, r3, r6
    c932:	4770      	bx	lr
    c934:	ea94 0f0c 	teq	r4, ip
    c938:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c93c:	bf18      	it	ne
    c93e:	ea95 0f0c 	teqne	r5, ip
    c942:	d00c      	beq.n	c95e <__aeabi_dmul+0x206>
    c944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c948:	bf18      	it	ne
    c94a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c94e:	d1d1      	bne.n	c8f4 <__aeabi_dmul+0x19c>
    c950:	ea81 0103 	eor.w	r1, r1, r3
    c954:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c958:	f04f 0000 	mov.w	r0, #0
    c95c:	bd70      	pop	{r4, r5, r6, pc}
    c95e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c962:	bf06      	itte	eq
    c964:	4610      	moveq	r0, r2
    c966:	4619      	moveq	r1, r3
    c968:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c96c:	d019      	beq.n	c9a2 <__aeabi_dmul+0x24a>
    c96e:	ea94 0f0c 	teq	r4, ip
    c972:	d102      	bne.n	c97a <__aeabi_dmul+0x222>
    c974:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c978:	d113      	bne.n	c9a2 <__aeabi_dmul+0x24a>
    c97a:	ea95 0f0c 	teq	r5, ip
    c97e:	d105      	bne.n	c98c <__aeabi_dmul+0x234>
    c980:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c984:	bf1c      	itt	ne
    c986:	4610      	movne	r0, r2
    c988:	4619      	movne	r1, r3
    c98a:	d10a      	bne.n	c9a2 <__aeabi_dmul+0x24a>
    c98c:	ea81 0103 	eor.w	r1, r1, r3
    c990:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c994:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c998:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c99c:	f04f 0000 	mov.w	r0, #0
    c9a0:	bd70      	pop	{r4, r5, r6, pc}
    c9a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c9a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c9aa:	bd70      	pop	{r4, r5, r6, pc}

0000c9ac <__aeabi_ddiv>:
    c9ac:	b570      	push	{r4, r5, r6, lr}
    c9ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c9b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c9b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c9ba:	bf1d      	ittte	ne
    c9bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c9c0:	ea94 0f0c 	teqne	r4, ip
    c9c4:	ea95 0f0c 	teqne	r5, ip
    c9c8:	f000 f8a7 	bleq	cb1a <__aeabi_ddiv+0x16e>
    c9cc:	eba4 0405 	sub.w	r4, r4, r5
    c9d0:	ea81 0e03 	eor.w	lr, r1, r3
    c9d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c9d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c9dc:	f000 8088 	beq.w	caf0 <__aeabi_ddiv+0x144>
    c9e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c9e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c9e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c9ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c9f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c9f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c9f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c9fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ca00:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ca04:	429d      	cmp	r5, r3
    ca06:	bf08      	it	eq
    ca08:	4296      	cmpeq	r6, r2
    ca0a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ca0e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ca12:	d202      	bcs.n	ca1a <__aeabi_ddiv+0x6e>
    ca14:	085b      	lsrs	r3, r3, #1
    ca16:	ea4f 0232 	mov.w	r2, r2, rrx
    ca1a:	1ab6      	subs	r6, r6, r2
    ca1c:	eb65 0503 	sbc.w	r5, r5, r3
    ca20:	085b      	lsrs	r3, r3, #1
    ca22:	ea4f 0232 	mov.w	r2, r2, rrx
    ca26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ca2a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ca2e:	ebb6 0e02 	subs.w	lr, r6, r2
    ca32:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca36:	bf22      	ittt	cs
    ca38:	1ab6      	subcs	r6, r6, r2
    ca3a:	4675      	movcs	r5, lr
    ca3c:	ea40 000c 	orrcs.w	r0, r0, ip
    ca40:	085b      	lsrs	r3, r3, #1
    ca42:	ea4f 0232 	mov.w	r2, r2, rrx
    ca46:	ebb6 0e02 	subs.w	lr, r6, r2
    ca4a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca4e:	bf22      	ittt	cs
    ca50:	1ab6      	subcs	r6, r6, r2
    ca52:	4675      	movcs	r5, lr
    ca54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ca58:	085b      	lsrs	r3, r3, #1
    ca5a:	ea4f 0232 	mov.w	r2, r2, rrx
    ca5e:	ebb6 0e02 	subs.w	lr, r6, r2
    ca62:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca66:	bf22      	ittt	cs
    ca68:	1ab6      	subcs	r6, r6, r2
    ca6a:	4675      	movcs	r5, lr
    ca6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ca70:	085b      	lsrs	r3, r3, #1
    ca72:	ea4f 0232 	mov.w	r2, r2, rrx
    ca76:	ebb6 0e02 	subs.w	lr, r6, r2
    ca7a:	eb75 0e03 	sbcs.w	lr, r5, r3
    ca7e:	bf22      	ittt	cs
    ca80:	1ab6      	subcs	r6, r6, r2
    ca82:	4675      	movcs	r5, lr
    ca84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ca88:	ea55 0e06 	orrs.w	lr, r5, r6
    ca8c:	d018      	beq.n	cac0 <__aeabi_ddiv+0x114>
    ca8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ca92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ca96:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ca9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ca9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    caa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    caa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    caaa:	d1c0      	bne.n	ca2e <__aeabi_ddiv+0x82>
    caac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cab0:	d10b      	bne.n	caca <__aeabi_ddiv+0x11e>
    cab2:	ea41 0100 	orr.w	r1, r1, r0
    cab6:	f04f 0000 	mov.w	r0, #0
    caba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cabe:	e7b6      	b.n	ca2e <__aeabi_ddiv+0x82>
    cac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cac4:	bf04      	itt	eq
    cac6:	4301      	orreq	r1, r0
    cac8:	2000      	moveq	r0, #0
    caca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cace:	bf88      	it	hi
    cad0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cad4:	f63f aeaf 	bhi.w	c836 <__aeabi_dmul+0xde>
    cad8:	ebb5 0c03 	subs.w	ip, r5, r3
    cadc:	bf04      	itt	eq
    cade:	ebb6 0c02 	subseq.w	ip, r6, r2
    cae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cae6:	f150 0000 	adcs.w	r0, r0, #0
    caea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    caee:	bd70      	pop	{r4, r5, r6, pc}
    caf0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    caf4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    caf8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cafc:	bfc2      	ittt	gt
    cafe:	ebd4 050c 	rsbsgt	r5, r4, ip
    cb02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cb06:	bd70      	popgt	{r4, r5, r6, pc}
    cb08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cb0c:	f04f 0e00 	mov.w	lr, #0
    cb10:	3c01      	subs	r4, #1
    cb12:	e690      	b.n	c836 <__aeabi_dmul+0xde>
    cb14:	ea45 0e06 	orr.w	lr, r5, r6
    cb18:	e68d      	b.n	c836 <__aeabi_dmul+0xde>
    cb1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cb1e:	ea94 0f0c 	teq	r4, ip
    cb22:	bf08      	it	eq
    cb24:	ea95 0f0c 	teqeq	r5, ip
    cb28:	f43f af3b 	beq.w	c9a2 <__aeabi_dmul+0x24a>
    cb2c:	ea94 0f0c 	teq	r4, ip
    cb30:	d10a      	bne.n	cb48 <__aeabi_ddiv+0x19c>
    cb32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cb36:	f47f af34 	bne.w	c9a2 <__aeabi_dmul+0x24a>
    cb3a:	ea95 0f0c 	teq	r5, ip
    cb3e:	f47f af25 	bne.w	c98c <__aeabi_dmul+0x234>
    cb42:	4610      	mov	r0, r2
    cb44:	4619      	mov	r1, r3
    cb46:	e72c      	b.n	c9a2 <__aeabi_dmul+0x24a>
    cb48:	ea95 0f0c 	teq	r5, ip
    cb4c:	d106      	bne.n	cb5c <__aeabi_ddiv+0x1b0>
    cb4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cb52:	f43f aefd 	beq.w	c950 <__aeabi_dmul+0x1f8>
    cb56:	4610      	mov	r0, r2
    cb58:	4619      	mov	r1, r3
    cb5a:	e722      	b.n	c9a2 <__aeabi_dmul+0x24a>
    cb5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cb60:	bf18      	it	ne
    cb62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cb66:	f47f aec5 	bne.w	c8f4 <__aeabi_dmul+0x19c>
    cb6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cb6e:	f47f af0d 	bne.w	c98c <__aeabi_dmul+0x234>
    cb72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cb76:	f47f aeeb 	bne.w	c950 <__aeabi_dmul+0x1f8>
    cb7a:	e712      	b.n	c9a2 <__aeabi_dmul+0x24a>

0000cb7c <__aeabi_d2iz>:
    cb7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cb80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cb84:	d215      	bcs.n	cbb2 <__aeabi_d2iz+0x36>
    cb86:	d511      	bpl.n	cbac <__aeabi_d2iz+0x30>
    cb88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cb8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cb90:	d912      	bls.n	cbb8 <__aeabi_d2iz+0x3c>
    cb92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cb96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cb9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cb9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cba2:	fa23 f002 	lsr.w	r0, r3, r2
    cba6:	bf18      	it	ne
    cba8:	4240      	negne	r0, r0
    cbaa:	4770      	bx	lr
    cbac:	f04f 0000 	mov.w	r0, #0
    cbb0:	4770      	bx	lr
    cbb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cbb6:	d105      	bne.n	cbc4 <__aeabi_d2iz+0x48>
    cbb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    cbbc:	bf08      	it	eq
    cbbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    cbc2:	4770      	bx	lr
    cbc4:	f04f 0000 	mov.w	r0, #0
    cbc8:	4770      	bx	lr
    cbca:	bf00      	nop

0000cbcc <__aeabi_d2uiz>:
    cbcc:	004a      	lsls	r2, r1, #1
    cbce:	d211      	bcs.n	cbf4 <__aeabi_d2uiz+0x28>
    cbd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cbd4:	d211      	bcs.n	cbfa <__aeabi_d2uiz+0x2e>
    cbd6:	d50d      	bpl.n	cbf4 <__aeabi_d2uiz+0x28>
    cbd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cbdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cbe0:	d40e      	bmi.n	cc00 <__aeabi_d2uiz+0x34>
    cbe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cbe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cbea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cbee:	fa23 f002 	lsr.w	r0, r3, r2
    cbf2:	4770      	bx	lr
    cbf4:	f04f 0000 	mov.w	r0, #0
    cbf8:	4770      	bx	lr
    cbfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cbfe:	d102      	bne.n	cc06 <__aeabi_d2uiz+0x3a>
    cc00:	f04f 30ff 	mov.w	r0, #4294967295
    cc04:	4770      	bx	lr
    cc06:	f04f 0000 	mov.w	r0, #0
    cc0a:	4770      	bx	lr

0000cc0c <__aeabi_d2f>:
    cc0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    cc10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    cc14:	bf24      	itt	cs
    cc16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    cc1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    cc1e:	d90d      	bls.n	cc3c <__aeabi_d2f+0x30>
    cc20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cc24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    cc28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    cc2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    cc30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    cc34:	bf08      	it	eq
    cc36:	f020 0001 	biceq.w	r0, r0, #1
    cc3a:	4770      	bx	lr
    cc3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    cc40:	d121      	bne.n	cc86 <__aeabi_d2f+0x7a>
    cc42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    cc46:	bfbc      	itt	lt
    cc48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    cc4c:	4770      	bxlt	lr
    cc4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc52:	ea4f 5252 	mov.w	r2, r2, lsr #21
    cc56:	f1c2 0218 	rsb	r2, r2, #24
    cc5a:	f1c2 0c20 	rsb	ip, r2, #32
    cc5e:	fa10 f30c 	lsls.w	r3, r0, ip
    cc62:	fa20 f002 	lsr.w	r0, r0, r2
    cc66:	bf18      	it	ne
    cc68:	f040 0001 	orrne.w	r0, r0, #1
    cc6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cc70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    cc74:	fa03 fc0c 	lsl.w	ip, r3, ip
    cc78:	ea40 000c 	orr.w	r0, r0, ip
    cc7c:	fa23 f302 	lsr.w	r3, r3, r2
    cc80:	ea4f 0343 	mov.w	r3, r3, lsl #1
    cc84:	e7cc      	b.n	cc20 <__aeabi_d2f+0x14>
    cc86:	ea7f 5362 	mvns.w	r3, r2, asr #21
    cc8a:	d107      	bne.n	cc9c <__aeabi_d2f+0x90>
    cc8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    cc90:	bf1e      	ittt	ne
    cc92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    cc96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    cc9a:	4770      	bxne	lr
    cc9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    cca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cca8:	4770      	bx	lr
    ccaa:	bf00      	nop

0000ccac <__errno>:
    ccac:	4b01      	ldr	r3, [pc, #4]	; (ccb4 <__errno+0x8>)
    ccae:	6818      	ldr	r0, [r3, #0]
    ccb0:	4770      	bx	lr
    ccb2:	bf00      	nop
    ccb4:	20000054 	.word	0x20000054

0000ccb8 <fiprintf>:
    ccb8:	b40e      	push	{r1, r2, r3}
    ccba:	b503      	push	{r0, r1, lr}
    ccbc:	4601      	mov	r1, r0
    ccbe:	ab03      	add	r3, sp, #12
    ccc0:	4805      	ldr	r0, [pc, #20]	; (ccd8 <fiprintf+0x20>)
    ccc2:	f853 2b04 	ldr.w	r2, [r3], #4
    ccc6:	6800      	ldr	r0, [r0, #0]
    ccc8:	9301      	str	r3, [sp, #4]
    ccca:	f000 f929 	bl	cf20 <_vfiprintf_r>
    ccce:	b002      	add	sp, #8
    ccd0:	f85d eb04 	ldr.w	lr, [sp], #4
    ccd4:	b003      	add	sp, #12
    ccd6:	4770      	bx	lr
    ccd8:	20000054 	.word	0x20000054

0000ccdc <__libc_init_array>:
    ccdc:	b570      	push	{r4, r5, r6, lr}
    ccde:	4e0d      	ldr	r6, [pc, #52]	; (cd14 <__libc_init_array+0x38>)
    cce0:	4c0d      	ldr	r4, [pc, #52]	; (cd18 <__libc_init_array+0x3c>)
    cce2:	1ba4      	subs	r4, r4, r6
    cce4:	10a4      	asrs	r4, r4, #2
    cce6:	2500      	movs	r5, #0
    cce8:	42a5      	cmp	r5, r4
    ccea:	d109      	bne.n	cd00 <__libc_init_array+0x24>
    ccec:	4e0b      	ldr	r6, [pc, #44]	; (cd1c <__libc_init_array+0x40>)
    ccee:	4c0c      	ldr	r4, [pc, #48]	; (cd20 <__libc_init_array+0x44>)
    ccf0:	f002 f84e 	bl	ed90 <_init>
    ccf4:	1ba4      	subs	r4, r4, r6
    ccf6:	10a4      	asrs	r4, r4, #2
    ccf8:	2500      	movs	r5, #0
    ccfa:	42a5      	cmp	r5, r4
    ccfc:	d105      	bne.n	cd0a <__libc_init_array+0x2e>
    ccfe:	bd70      	pop	{r4, r5, r6, pc}
    cd00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    cd04:	4798      	blx	r3
    cd06:	3501      	adds	r5, #1
    cd08:	e7ee      	b.n	cce8 <__libc_init_array+0xc>
    cd0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    cd0e:	4798      	blx	r3
    cd10:	3501      	adds	r5, #1
    cd12:	e7f2      	b.n	ccfa <__libc_init_array+0x1e>
    cd14:	0000ed9c 	.word	0x0000ed9c
    cd18:	0000ed9c 	.word	0x0000ed9c
    cd1c:	0000ed9c 	.word	0x0000ed9c
    cd20:	0000eda0 	.word	0x0000eda0

0000cd24 <malloc>:
    cd24:	4b02      	ldr	r3, [pc, #8]	; (cd30 <malloc+0xc>)
    cd26:	4601      	mov	r1, r0
    cd28:	6818      	ldr	r0, [r3, #0]
    cd2a:	f000 b873 	b.w	ce14 <_malloc_r>
    cd2e:	bf00      	nop
    cd30:	20000054 	.word	0x20000054

0000cd34 <memcmp>:
    cd34:	b510      	push	{r4, lr}
    cd36:	3901      	subs	r1, #1
    cd38:	4402      	add	r2, r0
    cd3a:	4290      	cmp	r0, r2
    cd3c:	d101      	bne.n	cd42 <memcmp+0xe>
    cd3e:	2000      	movs	r0, #0
    cd40:	bd10      	pop	{r4, pc}
    cd42:	f810 3b01 	ldrb.w	r3, [r0], #1
    cd46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    cd4a:	42a3      	cmp	r3, r4
    cd4c:	d0f5      	beq.n	cd3a <memcmp+0x6>
    cd4e:	1b18      	subs	r0, r3, r4
    cd50:	bd10      	pop	{r4, pc}

0000cd52 <memcpy>:
    cd52:	b510      	push	{r4, lr}
    cd54:	1e43      	subs	r3, r0, #1
    cd56:	440a      	add	r2, r1
    cd58:	4291      	cmp	r1, r2
    cd5a:	d100      	bne.n	cd5e <memcpy+0xc>
    cd5c:	bd10      	pop	{r4, pc}
    cd5e:	f811 4b01 	ldrb.w	r4, [r1], #1
    cd62:	f803 4f01 	strb.w	r4, [r3, #1]!
    cd66:	e7f7      	b.n	cd58 <memcpy+0x6>

0000cd68 <memset>:
    cd68:	4402      	add	r2, r0
    cd6a:	4603      	mov	r3, r0
    cd6c:	4293      	cmp	r3, r2
    cd6e:	d100      	bne.n	cd72 <memset+0xa>
    cd70:	4770      	bx	lr
    cd72:	f803 1b01 	strb.w	r1, [r3], #1
    cd76:	e7f9      	b.n	cd6c <memset+0x4>

0000cd78 <_free_r>:
    cd78:	b538      	push	{r3, r4, r5, lr}
    cd7a:	4605      	mov	r5, r0
    cd7c:	2900      	cmp	r1, #0
    cd7e:	d045      	beq.n	ce0c <_free_r+0x94>
    cd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cd84:	1f0c      	subs	r4, r1, #4
    cd86:	2b00      	cmp	r3, #0
    cd88:	bfb8      	it	lt
    cd8a:	18e4      	addlt	r4, r4, r3
    cd8c:	f001 f998 	bl	e0c0 <__malloc_lock>
    cd90:	4a1f      	ldr	r2, [pc, #124]	; (ce10 <_free_r+0x98>)
    cd92:	6813      	ldr	r3, [r2, #0]
    cd94:	4610      	mov	r0, r2
    cd96:	b933      	cbnz	r3, cda6 <_free_r+0x2e>
    cd98:	6063      	str	r3, [r4, #4]
    cd9a:	6014      	str	r4, [r2, #0]
    cd9c:	4628      	mov	r0, r5
    cd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cda2:	f001 b98e 	b.w	e0c2 <__malloc_unlock>
    cda6:	42a3      	cmp	r3, r4
    cda8:	d90c      	bls.n	cdc4 <_free_r+0x4c>
    cdaa:	6821      	ldr	r1, [r4, #0]
    cdac:	1862      	adds	r2, r4, r1
    cdae:	4293      	cmp	r3, r2
    cdb0:	bf04      	itt	eq
    cdb2:	681a      	ldreq	r2, [r3, #0]
    cdb4:	685b      	ldreq	r3, [r3, #4]
    cdb6:	6063      	str	r3, [r4, #4]
    cdb8:	bf04      	itt	eq
    cdba:	1852      	addeq	r2, r2, r1
    cdbc:	6022      	streq	r2, [r4, #0]
    cdbe:	6004      	str	r4, [r0, #0]
    cdc0:	e7ec      	b.n	cd9c <_free_r+0x24>
    cdc2:	4613      	mov	r3, r2
    cdc4:	685a      	ldr	r2, [r3, #4]
    cdc6:	b10a      	cbz	r2, cdcc <_free_r+0x54>
    cdc8:	42a2      	cmp	r2, r4
    cdca:	d9fa      	bls.n	cdc2 <_free_r+0x4a>
    cdcc:	6819      	ldr	r1, [r3, #0]
    cdce:	1858      	adds	r0, r3, r1
    cdd0:	42a0      	cmp	r0, r4
    cdd2:	d10b      	bne.n	cdec <_free_r+0x74>
    cdd4:	6820      	ldr	r0, [r4, #0]
    cdd6:	4401      	add	r1, r0
    cdd8:	1858      	adds	r0, r3, r1
    cdda:	4282      	cmp	r2, r0
    cddc:	6019      	str	r1, [r3, #0]
    cdde:	d1dd      	bne.n	cd9c <_free_r+0x24>
    cde0:	6810      	ldr	r0, [r2, #0]
    cde2:	6852      	ldr	r2, [r2, #4]
    cde4:	605a      	str	r2, [r3, #4]
    cde6:	4401      	add	r1, r0
    cde8:	6019      	str	r1, [r3, #0]
    cdea:	e7d7      	b.n	cd9c <_free_r+0x24>
    cdec:	d902      	bls.n	cdf4 <_free_r+0x7c>
    cdee:	230c      	movs	r3, #12
    cdf0:	602b      	str	r3, [r5, #0]
    cdf2:	e7d3      	b.n	cd9c <_free_r+0x24>
    cdf4:	6820      	ldr	r0, [r4, #0]
    cdf6:	1821      	adds	r1, r4, r0
    cdf8:	428a      	cmp	r2, r1
    cdfa:	bf04      	itt	eq
    cdfc:	6811      	ldreq	r1, [r2, #0]
    cdfe:	6852      	ldreq	r2, [r2, #4]
    ce00:	6062      	str	r2, [r4, #4]
    ce02:	bf04      	itt	eq
    ce04:	1809      	addeq	r1, r1, r0
    ce06:	6021      	streq	r1, [r4, #0]
    ce08:	605c      	str	r4, [r3, #4]
    ce0a:	e7c7      	b.n	cd9c <_free_r+0x24>
    ce0c:	bd38      	pop	{r3, r4, r5, pc}
    ce0e:	bf00      	nop
    ce10:	200128e8 	.word	0x200128e8

0000ce14 <_malloc_r>:
    ce14:	b570      	push	{r4, r5, r6, lr}
    ce16:	1ccd      	adds	r5, r1, #3
    ce18:	f025 0503 	bic.w	r5, r5, #3
    ce1c:	3508      	adds	r5, #8
    ce1e:	2d0c      	cmp	r5, #12
    ce20:	bf38      	it	cc
    ce22:	250c      	movcc	r5, #12
    ce24:	2d00      	cmp	r5, #0
    ce26:	4606      	mov	r6, r0
    ce28:	db01      	blt.n	ce2e <_malloc_r+0x1a>
    ce2a:	42a9      	cmp	r1, r5
    ce2c:	d903      	bls.n	ce36 <_malloc_r+0x22>
    ce2e:	230c      	movs	r3, #12
    ce30:	6033      	str	r3, [r6, #0]
    ce32:	2000      	movs	r0, #0
    ce34:	bd70      	pop	{r4, r5, r6, pc}
    ce36:	f001 f943 	bl	e0c0 <__malloc_lock>
    ce3a:	4a23      	ldr	r2, [pc, #140]	; (cec8 <_malloc_r+0xb4>)
    ce3c:	6814      	ldr	r4, [r2, #0]
    ce3e:	4621      	mov	r1, r4
    ce40:	b991      	cbnz	r1, ce68 <_malloc_r+0x54>
    ce42:	4c22      	ldr	r4, [pc, #136]	; (cecc <_malloc_r+0xb8>)
    ce44:	6823      	ldr	r3, [r4, #0]
    ce46:	b91b      	cbnz	r3, ce50 <_malloc_r+0x3c>
    ce48:	4630      	mov	r0, r6
    ce4a:	f000 fb91 	bl	d570 <_sbrk_r>
    ce4e:	6020      	str	r0, [r4, #0]
    ce50:	4629      	mov	r1, r5
    ce52:	4630      	mov	r0, r6
    ce54:	f000 fb8c 	bl	d570 <_sbrk_r>
    ce58:	1c43      	adds	r3, r0, #1
    ce5a:	d126      	bne.n	ceaa <_malloc_r+0x96>
    ce5c:	230c      	movs	r3, #12
    ce5e:	6033      	str	r3, [r6, #0]
    ce60:	4630      	mov	r0, r6
    ce62:	f001 f92e 	bl	e0c2 <__malloc_unlock>
    ce66:	e7e4      	b.n	ce32 <_malloc_r+0x1e>
    ce68:	680b      	ldr	r3, [r1, #0]
    ce6a:	1b5b      	subs	r3, r3, r5
    ce6c:	d41a      	bmi.n	cea4 <_malloc_r+0x90>
    ce6e:	2b0b      	cmp	r3, #11
    ce70:	d90f      	bls.n	ce92 <_malloc_r+0x7e>
    ce72:	600b      	str	r3, [r1, #0]
    ce74:	50cd      	str	r5, [r1, r3]
    ce76:	18cc      	adds	r4, r1, r3
    ce78:	4630      	mov	r0, r6
    ce7a:	f001 f922 	bl	e0c2 <__malloc_unlock>
    ce7e:	f104 000b 	add.w	r0, r4, #11
    ce82:	1d23      	adds	r3, r4, #4
    ce84:	f020 0007 	bic.w	r0, r0, #7
    ce88:	1ac3      	subs	r3, r0, r3
    ce8a:	d01b      	beq.n	cec4 <_malloc_r+0xb0>
    ce8c:	425a      	negs	r2, r3
    ce8e:	50e2      	str	r2, [r4, r3]
    ce90:	bd70      	pop	{r4, r5, r6, pc}
    ce92:	428c      	cmp	r4, r1
    ce94:	bf0d      	iteet	eq
    ce96:	6863      	ldreq	r3, [r4, #4]
    ce98:	684b      	ldrne	r3, [r1, #4]
    ce9a:	6063      	strne	r3, [r4, #4]
    ce9c:	6013      	streq	r3, [r2, #0]
    ce9e:	bf18      	it	ne
    cea0:	460c      	movne	r4, r1
    cea2:	e7e9      	b.n	ce78 <_malloc_r+0x64>
    cea4:	460c      	mov	r4, r1
    cea6:	6849      	ldr	r1, [r1, #4]
    cea8:	e7ca      	b.n	ce40 <_malloc_r+0x2c>
    ceaa:	1cc4      	adds	r4, r0, #3
    ceac:	f024 0403 	bic.w	r4, r4, #3
    ceb0:	42a0      	cmp	r0, r4
    ceb2:	d005      	beq.n	cec0 <_malloc_r+0xac>
    ceb4:	1a21      	subs	r1, r4, r0
    ceb6:	4630      	mov	r0, r6
    ceb8:	f000 fb5a 	bl	d570 <_sbrk_r>
    cebc:	3001      	adds	r0, #1
    cebe:	d0cd      	beq.n	ce5c <_malloc_r+0x48>
    cec0:	6025      	str	r5, [r4, #0]
    cec2:	e7d9      	b.n	ce78 <_malloc_r+0x64>
    cec4:	bd70      	pop	{r4, r5, r6, pc}
    cec6:	bf00      	nop
    cec8:	200128e8 	.word	0x200128e8
    cecc:	200128ec 	.word	0x200128ec

0000ced0 <__sfputc_r>:
    ced0:	6893      	ldr	r3, [r2, #8]
    ced2:	3b01      	subs	r3, #1
    ced4:	2b00      	cmp	r3, #0
    ced6:	b410      	push	{r4}
    ced8:	6093      	str	r3, [r2, #8]
    ceda:	da08      	bge.n	ceee <__sfputc_r+0x1e>
    cedc:	6994      	ldr	r4, [r2, #24]
    cede:	42a3      	cmp	r3, r4
    cee0:	db02      	blt.n	cee8 <__sfputc_r+0x18>
    cee2:	b2cb      	uxtb	r3, r1
    cee4:	2b0a      	cmp	r3, #10
    cee6:	d102      	bne.n	ceee <__sfputc_r+0x1e>
    cee8:	bc10      	pop	{r4}
    ceea:	f000 bdf9 	b.w	dae0 <__swbuf_r>
    ceee:	6813      	ldr	r3, [r2, #0]
    cef0:	1c58      	adds	r0, r3, #1
    cef2:	6010      	str	r0, [r2, #0]
    cef4:	7019      	strb	r1, [r3, #0]
    cef6:	b2c8      	uxtb	r0, r1
    cef8:	bc10      	pop	{r4}
    cefa:	4770      	bx	lr

0000cefc <__sfputs_r>:
    cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cefe:	4606      	mov	r6, r0
    cf00:	460f      	mov	r7, r1
    cf02:	4614      	mov	r4, r2
    cf04:	18d5      	adds	r5, r2, r3
    cf06:	42ac      	cmp	r4, r5
    cf08:	d101      	bne.n	cf0e <__sfputs_r+0x12>
    cf0a:	2000      	movs	r0, #0
    cf0c:	e007      	b.n	cf1e <__sfputs_r+0x22>
    cf0e:	463a      	mov	r2, r7
    cf10:	f814 1b01 	ldrb.w	r1, [r4], #1
    cf14:	4630      	mov	r0, r6
    cf16:	f7ff ffdb 	bl	ced0 <__sfputc_r>
    cf1a:	1c43      	adds	r3, r0, #1
    cf1c:	d1f3      	bne.n	cf06 <__sfputs_r+0xa>
    cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cf20 <_vfiprintf_r>:
    cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf24:	b09d      	sub	sp, #116	; 0x74
    cf26:	460c      	mov	r4, r1
    cf28:	4617      	mov	r7, r2
    cf2a:	9303      	str	r3, [sp, #12]
    cf2c:	4606      	mov	r6, r0
    cf2e:	b118      	cbz	r0, cf38 <_vfiprintf_r+0x18>
    cf30:	6983      	ldr	r3, [r0, #24]
    cf32:	b90b      	cbnz	r3, cf38 <_vfiprintf_r+0x18>
    cf34:	f000 ff86 	bl	de44 <__sinit>
    cf38:	4b7c      	ldr	r3, [pc, #496]	; (d12c <_vfiprintf_r+0x20c>)
    cf3a:	429c      	cmp	r4, r3
    cf3c:	d157      	bne.n	cfee <_vfiprintf_r+0xce>
    cf3e:	6874      	ldr	r4, [r6, #4]
    cf40:	89a3      	ldrh	r3, [r4, #12]
    cf42:	0718      	lsls	r0, r3, #28
    cf44:	d55d      	bpl.n	d002 <_vfiprintf_r+0xe2>
    cf46:	6923      	ldr	r3, [r4, #16]
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d05a      	beq.n	d002 <_vfiprintf_r+0xe2>
    cf4c:	2300      	movs	r3, #0
    cf4e:	9309      	str	r3, [sp, #36]	; 0x24
    cf50:	2320      	movs	r3, #32
    cf52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cf56:	2330      	movs	r3, #48	; 0x30
    cf58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cf5c:	f04f 0b01 	mov.w	fp, #1
    cf60:	46b8      	mov	r8, r7
    cf62:	4645      	mov	r5, r8
    cf64:	f815 3b01 	ldrb.w	r3, [r5], #1
    cf68:	2b00      	cmp	r3, #0
    cf6a:	d155      	bne.n	d018 <_vfiprintf_r+0xf8>
    cf6c:	ebb8 0a07 	subs.w	sl, r8, r7
    cf70:	d00b      	beq.n	cf8a <_vfiprintf_r+0x6a>
    cf72:	4653      	mov	r3, sl
    cf74:	463a      	mov	r2, r7
    cf76:	4621      	mov	r1, r4
    cf78:	4630      	mov	r0, r6
    cf7a:	f7ff ffbf 	bl	cefc <__sfputs_r>
    cf7e:	3001      	adds	r0, #1
    cf80:	f000 80c4 	beq.w	d10c <_vfiprintf_r+0x1ec>
    cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf86:	4453      	add	r3, sl
    cf88:	9309      	str	r3, [sp, #36]	; 0x24
    cf8a:	f898 3000 	ldrb.w	r3, [r8]
    cf8e:	2b00      	cmp	r3, #0
    cf90:	f000 80bc 	beq.w	d10c <_vfiprintf_r+0x1ec>
    cf94:	2300      	movs	r3, #0
    cf96:	f04f 32ff 	mov.w	r2, #4294967295
    cf9a:	9304      	str	r3, [sp, #16]
    cf9c:	9307      	str	r3, [sp, #28]
    cf9e:	9205      	str	r2, [sp, #20]
    cfa0:	9306      	str	r3, [sp, #24]
    cfa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cfa6:	931a      	str	r3, [sp, #104]	; 0x68
    cfa8:	2205      	movs	r2, #5
    cfaa:	7829      	ldrb	r1, [r5, #0]
    cfac:	4860      	ldr	r0, [pc, #384]	; (d130 <_vfiprintf_r+0x210>)
    cfae:	f001 f837 	bl	e020 <memchr>
    cfb2:	f105 0801 	add.w	r8, r5, #1
    cfb6:	9b04      	ldr	r3, [sp, #16]
    cfb8:	2800      	cmp	r0, #0
    cfba:	d131      	bne.n	d020 <_vfiprintf_r+0x100>
    cfbc:	06d9      	lsls	r1, r3, #27
    cfbe:	bf44      	itt	mi
    cfc0:	2220      	movmi	r2, #32
    cfc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cfc6:	071a      	lsls	r2, r3, #28
    cfc8:	bf44      	itt	mi
    cfca:	222b      	movmi	r2, #43	; 0x2b
    cfcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    cfd0:	782a      	ldrb	r2, [r5, #0]
    cfd2:	2a2a      	cmp	r2, #42	; 0x2a
    cfd4:	d02c      	beq.n	d030 <_vfiprintf_r+0x110>
    cfd6:	9a07      	ldr	r2, [sp, #28]
    cfd8:	2100      	movs	r1, #0
    cfda:	200a      	movs	r0, #10
    cfdc:	46a8      	mov	r8, r5
    cfde:	3501      	adds	r5, #1
    cfe0:	f898 3000 	ldrb.w	r3, [r8]
    cfe4:	3b30      	subs	r3, #48	; 0x30
    cfe6:	2b09      	cmp	r3, #9
    cfe8:	d96d      	bls.n	d0c6 <_vfiprintf_r+0x1a6>
    cfea:	b371      	cbz	r1, d04a <_vfiprintf_r+0x12a>
    cfec:	e026      	b.n	d03c <_vfiprintf_r+0x11c>
    cfee:	4b51      	ldr	r3, [pc, #324]	; (d134 <_vfiprintf_r+0x214>)
    cff0:	429c      	cmp	r4, r3
    cff2:	d101      	bne.n	cff8 <_vfiprintf_r+0xd8>
    cff4:	68b4      	ldr	r4, [r6, #8]
    cff6:	e7a3      	b.n	cf40 <_vfiprintf_r+0x20>
    cff8:	4b4f      	ldr	r3, [pc, #316]	; (d138 <_vfiprintf_r+0x218>)
    cffa:	429c      	cmp	r4, r3
    cffc:	bf08      	it	eq
    cffe:	68f4      	ldreq	r4, [r6, #12]
    d000:	e79e      	b.n	cf40 <_vfiprintf_r+0x20>
    d002:	4621      	mov	r1, r4
    d004:	4630      	mov	r0, r6
    d006:	f000 fdbd 	bl	db84 <__swsetup_r>
    d00a:	2800      	cmp	r0, #0
    d00c:	d09e      	beq.n	cf4c <_vfiprintf_r+0x2c>
    d00e:	f04f 30ff 	mov.w	r0, #4294967295
    d012:	b01d      	add	sp, #116	; 0x74
    d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d018:	2b25      	cmp	r3, #37	; 0x25
    d01a:	d0a7      	beq.n	cf6c <_vfiprintf_r+0x4c>
    d01c:	46a8      	mov	r8, r5
    d01e:	e7a0      	b.n	cf62 <_vfiprintf_r+0x42>
    d020:	4a43      	ldr	r2, [pc, #268]	; (d130 <_vfiprintf_r+0x210>)
    d022:	1a80      	subs	r0, r0, r2
    d024:	fa0b f000 	lsl.w	r0, fp, r0
    d028:	4318      	orrs	r0, r3
    d02a:	9004      	str	r0, [sp, #16]
    d02c:	4645      	mov	r5, r8
    d02e:	e7bb      	b.n	cfa8 <_vfiprintf_r+0x88>
    d030:	9a03      	ldr	r2, [sp, #12]
    d032:	1d11      	adds	r1, r2, #4
    d034:	6812      	ldr	r2, [r2, #0]
    d036:	9103      	str	r1, [sp, #12]
    d038:	2a00      	cmp	r2, #0
    d03a:	db01      	blt.n	d040 <_vfiprintf_r+0x120>
    d03c:	9207      	str	r2, [sp, #28]
    d03e:	e004      	b.n	d04a <_vfiprintf_r+0x12a>
    d040:	4252      	negs	r2, r2
    d042:	f043 0302 	orr.w	r3, r3, #2
    d046:	9207      	str	r2, [sp, #28]
    d048:	9304      	str	r3, [sp, #16]
    d04a:	f898 3000 	ldrb.w	r3, [r8]
    d04e:	2b2e      	cmp	r3, #46	; 0x2e
    d050:	d110      	bne.n	d074 <_vfiprintf_r+0x154>
    d052:	f898 3001 	ldrb.w	r3, [r8, #1]
    d056:	2b2a      	cmp	r3, #42	; 0x2a
    d058:	f108 0101 	add.w	r1, r8, #1
    d05c:	d137      	bne.n	d0ce <_vfiprintf_r+0x1ae>
    d05e:	9b03      	ldr	r3, [sp, #12]
    d060:	1d1a      	adds	r2, r3, #4
    d062:	681b      	ldr	r3, [r3, #0]
    d064:	9203      	str	r2, [sp, #12]
    d066:	2b00      	cmp	r3, #0
    d068:	bfb8      	it	lt
    d06a:	f04f 33ff 	movlt.w	r3, #4294967295
    d06e:	f108 0802 	add.w	r8, r8, #2
    d072:	9305      	str	r3, [sp, #20]
    d074:	4d31      	ldr	r5, [pc, #196]	; (d13c <_vfiprintf_r+0x21c>)
    d076:	f898 1000 	ldrb.w	r1, [r8]
    d07a:	2203      	movs	r2, #3
    d07c:	4628      	mov	r0, r5
    d07e:	f000 ffcf 	bl	e020 <memchr>
    d082:	b140      	cbz	r0, d096 <_vfiprintf_r+0x176>
    d084:	2340      	movs	r3, #64	; 0x40
    d086:	1b40      	subs	r0, r0, r5
    d088:	fa03 f000 	lsl.w	r0, r3, r0
    d08c:	9b04      	ldr	r3, [sp, #16]
    d08e:	4303      	orrs	r3, r0
    d090:	9304      	str	r3, [sp, #16]
    d092:	f108 0801 	add.w	r8, r8, #1
    d096:	f898 1000 	ldrb.w	r1, [r8]
    d09a:	4829      	ldr	r0, [pc, #164]	; (d140 <_vfiprintf_r+0x220>)
    d09c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d0a0:	2206      	movs	r2, #6
    d0a2:	f108 0701 	add.w	r7, r8, #1
    d0a6:	f000 ffbb 	bl	e020 <memchr>
    d0aa:	2800      	cmp	r0, #0
    d0ac:	d034      	beq.n	d118 <_vfiprintf_r+0x1f8>
    d0ae:	4b25      	ldr	r3, [pc, #148]	; (d144 <_vfiprintf_r+0x224>)
    d0b0:	bb03      	cbnz	r3, d0f4 <_vfiprintf_r+0x1d4>
    d0b2:	9b03      	ldr	r3, [sp, #12]
    d0b4:	3307      	adds	r3, #7
    d0b6:	f023 0307 	bic.w	r3, r3, #7
    d0ba:	3308      	adds	r3, #8
    d0bc:	9303      	str	r3, [sp, #12]
    d0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d0c0:	444b      	add	r3, r9
    d0c2:	9309      	str	r3, [sp, #36]	; 0x24
    d0c4:	e74c      	b.n	cf60 <_vfiprintf_r+0x40>
    d0c6:	fb00 3202 	mla	r2, r0, r2, r3
    d0ca:	2101      	movs	r1, #1
    d0cc:	e786      	b.n	cfdc <_vfiprintf_r+0xbc>
    d0ce:	2300      	movs	r3, #0
    d0d0:	9305      	str	r3, [sp, #20]
    d0d2:	4618      	mov	r0, r3
    d0d4:	250a      	movs	r5, #10
    d0d6:	4688      	mov	r8, r1
    d0d8:	3101      	adds	r1, #1
    d0da:	f898 2000 	ldrb.w	r2, [r8]
    d0de:	3a30      	subs	r2, #48	; 0x30
    d0e0:	2a09      	cmp	r2, #9
    d0e2:	d903      	bls.n	d0ec <_vfiprintf_r+0x1cc>
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d0c5      	beq.n	d074 <_vfiprintf_r+0x154>
    d0e8:	9005      	str	r0, [sp, #20]
    d0ea:	e7c3      	b.n	d074 <_vfiprintf_r+0x154>
    d0ec:	fb05 2000 	mla	r0, r5, r0, r2
    d0f0:	2301      	movs	r3, #1
    d0f2:	e7f0      	b.n	d0d6 <_vfiprintf_r+0x1b6>
    d0f4:	ab03      	add	r3, sp, #12
    d0f6:	9300      	str	r3, [sp, #0]
    d0f8:	4622      	mov	r2, r4
    d0fa:	4b13      	ldr	r3, [pc, #76]	; (d148 <_vfiprintf_r+0x228>)
    d0fc:	a904      	add	r1, sp, #16
    d0fe:	4630      	mov	r0, r6
    d100:	f3af 8000 	nop.w
    d104:	f1b0 3fff 	cmp.w	r0, #4294967295
    d108:	4681      	mov	r9, r0
    d10a:	d1d8      	bne.n	d0be <_vfiprintf_r+0x19e>
    d10c:	89a3      	ldrh	r3, [r4, #12]
    d10e:	065b      	lsls	r3, r3, #25
    d110:	f53f af7d 	bmi.w	d00e <_vfiprintf_r+0xee>
    d114:	9809      	ldr	r0, [sp, #36]	; 0x24
    d116:	e77c      	b.n	d012 <_vfiprintf_r+0xf2>
    d118:	ab03      	add	r3, sp, #12
    d11a:	9300      	str	r3, [sp, #0]
    d11c:	4622      	mov	r2, r4
    d11e:	4b0a      	ldr	r3, [pc, #40]	; (d148 <_vfiprintf_r+0x228>)
    d120:	a904      	add	r1, sp, #16
    d122:	4630      	mov	r0, r6
    d124:	f000 f888 	bl	d238 <_printf_i>
    d128:	e7ec      	b.n	d104 <_vfiprintf_r+0x1e4>
    d12a:	bf00      	nop
    d12c:	0000ed50 	.word	0x0000ed50
    d130:	0000e664 	.word	0x0000e664
    d134:	0000ed70 	.word	0x0000ed70
    d138:	0000ed30 	.word	0x0000ed30
    d13c:	0000e66a 	.word	0x0000e66a
    d140:	0000e66e 	.word	0x0000e66e
    d144:	00000000 	.word	0x00000000
    d148:	0000cefd 	.word	0x0000cefd

0000d14c <_printf_common>:
    d14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d150:	4691      	mov	r9, r2
    d152:	461f      	mov	r7, r3
    d154:	688a      	ldr	r2, [r1, #8]
    d156:	690b      	ldr	r3, [r1, #16]
    d158:	f8dd 8020 	ldr.w	r8, [sp, #32]
    d15c:	4293      	cmp	r3, r2
    d15e:	bfb8      	it	lt
    d160:	4613      	movlt	r3, r2
    d162:	f8c9 3000 	str.w	r3, [r9]
    d166:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d16a:	4606      	mov	r6, r0
    d16c:	460c      	mov	r4, r1
    d16e:	b112      	cbz	r2, d176 <_printf_common+0x2a>
    d170:	3301      	adds	r3, #1
    d172:	f8c9 3000 	str.w	r3, [r9]
    d176:	6823      	ldr	r3, [r4, #0]
    d178:	0699      	lsls	r1, r3, #26
    d17a:	bf42      	ittt	mi
    d17c:	f8d9 3000 	ldrmi.w	r3, [r9]
    d180:	3302      	addmi	r3, #2
    d182:	f8c9 3000 	strmi.w	r3, [r9]
    d186:	6825      	ldr	r5, [r4, #0]
    d188:	f015 0506 	ands.w	r5, r5, #6
    d18c:	d107      	bne.n	d19e <_printf_common+0x52>
    d18e:	f104 0a19 	add.w	sl, r4, #25
    d192:	68e3      	ldr	r3, [r4, #12]
    d194:	f8d9 2000 	ldr.w	r2, [r9]
    d198:	1a9b      	subs	r3, r3, r2
    d19a:	429d      	cmp	r5, r3
    d19c:	db29      	blt.n	d1f2 <_printf_common+0xa6>
    d19e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    d1a2:	6822      	ldr	r2, [r4, #0]
    d1a4:	3300      	adds	r3, #0
    d1a6:	bf18      	it	ne
    d1a8:	2301      	movne	r3, #1
    d1aa:	0692      	lsls	r2, r2, #26
    d1ac:	d42e      	bmi.n	d20c <_printf_common+0xc0>
    d1ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
    d1b2:	4639      	mov	r1, r7
    d1b4:	4630      	mov	r0, r6
    d1b6:	47c0      	blx	r8
    d1b8:	3001      	adds	r0, #1
    d1ba:	d021      	beq.n	d200 <_printf_common+0xb4>
    d1bc:	6823      	ldr	r3, [r4, #0]
    d1be:	68e5      	ldr	r5, [r4, #12]
    d1c0:	f8d9 2000 	ldr.w	r2, [r9]
    d1c4:	f003 0306 	and.w	r3, r3, #6
    d1c8:	2b04      	cmp	r3, #4
    d1ca:	bf08      	it	eq
    d1cc:	1aad      	subeq	r5, r5, r2
    d1ce:	68a3      	ldr	r3, [r4, #8]
    d1d0:	6922      	ldr	r2, [r4, #16]
    d1d2:	bf0c      	ite	eq
    d1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    d1d8:	2500      	movne	r5, #0
    d1da:	4293      	cmp	r3, r2
    d1dc:	bfc4      	itt	gt
    d1de:	1a9b      	subgt	r3, r3, r2
    d1e0:	18ed      	addgt	r5, r5, r3
    d1e2:	f04f 0900 	mov.w	r9, #0
    d1e6:	341a      	adds	r4, #26
    d1e8:	454d      	cmp	r5, r9
    d1ea:	d11b      	bne.n	d224 <_printf_common+0xd8>
    d1ec:	2000      	movs	r0, #0
    d1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d1f2:	2301      	movs	r3, #1
    d1f4:	4652      	mov	r2, sl
    d1f6:	4639      	mov	r1, r7
    d1f8:	4630      	mov	r0, r6
    d1fa:	47c0      	blx	r8
    d1fc:	3001      	adds	r0, #1
    d1fe:	d103      	bne.n	d208 <_printf_common+0xbc>
    d200:	f04f 30ff 	mov.w	r0, #4294967295
    d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d208:	3501      	adds	r5, #1
    d20a:	e7c2      	b.n	d192 <_printf_common+0x46>
    d20c:	18e1      	adds	r1, r4, r3
    d20e:	1c5a      	adds	r2, r3, #1
    d210:	2030      	movs	r0, #48	; 0x30
    d212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d216:	4422      	add	r2, r4
    d218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    d21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    d220:	3302      	adds	r3, #2
    d222:	e7c4      	b.n	d1ae <_printf_common+0x62>
    d224:	2301      	movs	r3, #1
    d226:	4622      	mov	r2, r4
    d228:	4639      	mov	r1, r7
    d22a:	4630      	mov	r0, r6
    d22c:	47c0      	blx	r8
    d22e:	3001      	adds	r0, #1
    d230:	d0e6      	beq.n	d200 <_printf_common+0xb4>
    d232:	f109 0901 	add.w	r9, r9, #1
    d236:	e7d7      	b.n	d1e8 <_printf_common+0x9c>

0000d238 <_printf_i>:
    d238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d23c:	4617      	mov	r7, r2
    d23e:	7e0a      	ldrb	r2, [r1, #24]
    d240:	b085      	sub	sp, #20
    d242:	2a6e      	cmp	r2, #110	; 0x6e
    d244:	4698      	mov	r8, r3
    d246:	4606      	mov	r6, r0
    d248:	460c      	mov	r4, r1
    d24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d24c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    d250:	f000 80bc 	beq.w	d3cc <_printf_i+0x194>
    d254:	d81a      	bhi.n	d28c <_printf_i+0x54>
    d256:	2a63      	cmp	r2, #99	; 0x63
    d258:	d02e      	beq.n	d2b8 <_printf_i+0x80>
    d25a:	d80a      	bhi.n	d272 <_printf_i+0x3a>
    d25c:	2a00      	cmp	r2, #0
    d25e:	f000 80c8 	beq.w	d3f2 <_printf_i+0x1ba>
    d262:	2a58      	cmp	r2, #88	; 0x58
    d264:	f000 808a 	beq.w	d37c <_printf_i+0x144>
    d268:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d26c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    d270:	e02a      	b.n	d2c8 <_printf_i+0x90>
    d272:	2a64      	cmp	r2, #100	; 0x64
    d274:	d001      	beq.n	d27a <_printf_i+0x42>
    d276:	2a69      	cmp	r2, #105	; 0x69
    d278:	d1f6      	bne.n	d268 <_printf_i+0x30>
    d27a:	6821      	ldr	r1, [r4, #0]
    d27c:	681a      	ldr	r2, [r3, #0]
    d27e:	f011 0f80 	tst.w	r1, #128	; 0x80
    d282:	d023      	beq.n	d2cc <_printf_i+0x94>
    d284:	1d11      	adds	r1, r2, #4
    d286:	6019      	str	r1, [r3, #0]
    d288:	6813      	ldr	r3, [r2, #0]
    d28a:	e027      	b.n	d2dc <_printf_i+0xa4>
    d28c:	2a73      	cmp	r2, #115	; 0x73
    d28e:	f000 80b4 	beq.w	d3fa <_printf_i+0x1c2>
    d292:	d808      	bhi.n	d2a6 <_printf_i+0x6e>
    d294:	2a6f      	cmp	r2, #111	; 0x6f
    d296:	d02a      	beq.n	d2ee <_printf_i+0xb6>
    d298:	2a70      	cmp	r2, #112	; 0x70
    d29a:	d1e5      	bne.n	d268 <_printf_i+0x30>
    d29c:	680a      	ldr	r2, [r1, #0]
    d29e:	f042 0220 	orr.w	r2, r2, #32
    d2a2:	600a      	str	r2, [r1, #0]
    d2a4:	e003      	b.n	d2ae <_printf_i+0x76>
    d2a6:	2a75      	cmp	r2, #117	; 0x75
    d2a8:	d021      	beq.n	d2ee <_printf_i+0xb6>
    d2aa:	2a78      	cmp	r2, #120	; 0x78
    d2ac:	d1dc      	bne.n	d268 <_printf_i+0x30>
    d2ae:	2278      	movs	r2, #120	; 0x78
    d2b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    d2b4:	496e      	ldr	r1, [pc, #440]	; (d470 <_printf_i+0x238>)
    d2b6:	e064      	b.n	d382 <_printf_i+0x14a>
    d2b8:	681a      	ldr	r2, [r3, #0]
    d2ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
    d2be:	1d11      	adds	r1, r2, #4
    d2c0:	6019      	str	r1, [r3, #0]
    d2c2:	6813      	ldr	r3, [r2, #0]
    d2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d2c8:	2301      	movs	r3, #1
    d2ca:	e0a3      	b.n	d414 <_printf_i+0x1dc>
    d2cc:	f011 0f40 	tst.w	r1, #64	; 0x40
    d2d0:	f102 0104 	add.w	r1, r2, #4
    d2d4:	6019      	str	r1, [r3, #0]
    d2d6:	d0d7      	beq.n	d288 <_printf_i+0x50>
    d2d8:	f9b2 3000 	ldrsh.w	r3, [r2]
    d2dc:	2b00      	cmp	r3, #0
    d2de:	da03      	bge.n	d2e8 <_printf_i+0xb0>
    d2e0:	222d      	movs	r2, #45	; 0x2d
    d2e2:	425b      	negs	r3, r3
    d2e4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    d2e8:	4962      	ldr	r1, [pc, #392]	; (d474 <_printf_i+0x23c>)
    d2ea:	220a      	movs	r2, #10
    d2ec:	e017      	b.n	d31e <_printf_i+0xe6>
    d2ee:	6820      	ldr	r0, [r4, #0]
    d2f0:	6819      	ldr	r1, [r3, #0]
    d2f2:	f010 0f80 	tst.w	r0, #128	; 0x80
    d2f6:	d003      	beq.n	d300 <_printf_i+0xc8>
    d2f8:	1d08      	adds	r0, r1, #4
    d2fa:	6018      	str	r0, [r3, #0]
    d2fc:	680b      	ldr	r3, [r1, #0]
    d2fe:	e006      	b.n	d30e <_printf_i+0xd6>
    d300:	f010 0f40 	tst.w	r0, #64	; 0x40
    d304:	f101 0004 	add.w	r0, r1, #4
    d308:	6018      	str	r0, [r3, #0]
    d30a:	d0f7      	beq.n	d2fc <_printf_i+0xc4>
    d30c:	880b      	ldrh	r3, [r1, #0]
    d30e:	4959      	ldr	r1, [pc, #356]	; (d474 <_printf_i+0x23c>)
    d310:	2a6f      	cmp	r2, #111	; 0x6f
    d312:	bf14      	ite	ne
    d314:	220a      	movne	r2, #10
    d316:	2208      	moveq	r2, #8
    d318:	2000      	movs	r0, #0
    d31a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    d31e:	6865      	ldr	r5, [r4, #4]
    d320:	60a5      	str	r5, [r4, #8]
    d322:	2d00      	cmp	r5, #0
    d324:	f2c0 809c 	blt.w	d460 <_printf_i+0x228>
    d328:	6820      	ldr	r0, [r4, #0]
    d32a:	f020 0004 	bic.w	r0, r0, #4
    d32e:	6020      	str	r0, [r4, #0]
    d330:	2b00      	cmp	r3, #0
    d332:	d13f      	bne.n	d3b4 <_printf_i+0x17c>
    d334:	2d00      	cmp	r5, #0
    d336:	f040 8095 	bne.w	d464 <_printf_i+0x22c>
    d33a:	4675      	mov	r5, lr
    d33c:	2a08      	cmp	r2, #8
    d33e:	d10b      	bne.n	d358 <_printf_i+0x120>
    d340:	6823      	ldr	r3, [r4, #0]
    d342:	07da      	lsls	r2, r3, #31
    d344:	d508      	bpl.n	d358 <_printf_i+0x120>
    d346:	6923      	ldr	r3, [r4, #16]
    d348:	6862      	ldr	r2, [r4, #4]
    d34a:	429a      	cmp	r2, r3
    d34c:	bfde      	ittt	le
    d34e:	2330      	movle	r3, #48	; 0x30
    d350:	f805 3c01 	strble.w	r3, [r5, #-1]
    d354:	f105 35ff 	addle.w	r5, r5, #4294967295
    d358:	ebae 0305 	sub.w	r3, lr, r5
    d35c:	6123      	str	r3, [r4, #16]
    d35e:	f8cd 8000 	str.w	r8, [sp]
    d362:	463b      	mov	r3, r7
    d364:	aa03      	add	r2, sp, #12
    d366:	4621      	mov	r1, r4
    d368:	4630      	mov	r0, r6
    d36a:	f7ff feef 	bl	d14c <_printf_common>
    d36e:	3001      	adds	r0, #1
    d370:	d155      	bne.n	d41e <_printf_i+0x1e6>
    d372:	f04f 30ff 	mov.w	r0, #4294967295
    d376:	b005      	add	sp, #20
    d378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d37c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    d380:	493c      	ldr	r1, [pc, #240]	; (d474 <_printf_i+0x23c>)
    d382:	6822      	ldr	r2, [r4, #0]
    d384:	6818      	ldr	r0, [r3, #0]
    d386:	f012 0f80 	tst.w	r2, #128	; 0x80
    d38a:	f100 0504 	add.w	r5, r0, #4
    d38e:	601d      	str	r5, [r3, #0]
    d390:	d001      	beq.n	d396 <_printf_i+0x15e>
    d392:	6803      	ldr	r3, [r0, #0]
    d394:	e002      	b.n	d39c <_printf_i+0x164>
    d396:	0655      	lsls	r5, r2, #25
    d398:	d5fb      	bpl.n	d392 <_printf_i+0x15a>
    d39a:	8803      	ldrh	r3, [r0, #0]
    d39c:	07d0      	lsls	r0, r2, #31
    d39e:	bf44      	itt	mi
    d3a0:	f042 0220 	orrmi.w	r2, r2, #32
    d3a4:	6022      	strmi	r2, [r4, #0]
    d3a6:	b91b      	cbnz	r3, d3b0 <_printf_i+0x178>
    d3a8:	6822      	ldr	r2, [r4, #0]
    d3aa:	f022 0220 	bic.w	r2, r2, #32
    d3ae:	6022      	str	r2, [r4, #0]
    d3b0:	2210      	movs	r2, #16
    d3b2:	e7b1      	b.n	d318 <_printf_i+0xe0>
    d3b4:	4675      	mov	r5, lr
    d3b6:	fbb3 f0f2 	udiv	r0, r3, r2
    d3ba:	fb02 3310 	mls	r3, r2, r0, r3
    d3be:	5ccb      	ldrb	r3, [r1, r3]
    d3c0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    d3c4:	4603      	mov	r3, r0
    d3c6:	2800      	cmp	r0, #0
    d3c8:	d1f5      	bne.n	d3b6 <_printf_i+0x17e>
    d3ca:	e7b7      	b.n	d33c <_printf_i+0x104>
    d3cc:	6808      	ldr	r0, [r1, #0]
    d3ce:	681a      	ldr	r2, [r3, #0]
    d3d0:	6949      	ldr	r1, [r1, #20]
    d3d2:	f010 0f80 	tst.w	r0, #128	; 0x80
    d3d6:	d004      	beq.n	d3e2 <_printf_i+0x1aa>
    d3d8:	1d10      	adds	r0, r2, #4
    d3da:	6018      	str	r0, [r3, #0]
    d3dc:	6813      	ldr	r3, [r2, #0]
    d3de:	6019      	str	r1, [r3, #0]
    d3e0:	e007      	b.n	d3f2 <_printf_i+0x1ba>
    d3e2:	f010 0f40 	tst.w	r0, #64	; 0x40
    d3e6:	f102 0004 	add.w	r0, r2, #4
    d3ea:	6018      	str	r0, [r3, #0]
    d3ec:	6813      	ldr	r3, [r2, #0]
    d3ee:	d0f6      	beq.n	d3de <_printf_i+0x1a6>
    d3f0:	8019      	strh	r1, [r3, #0]
    d3f2:	2300      	movs	r3, #0
    d3f4:	6123      	str	r3, [r4, #16]
    d3f6:	4675      	mov	r5, lr
    d3f8:	e7b1      	b.n	d35e <_printf_i+0x126>
    d3fa:	681a      	ldr	r2, [r3, #0]
    d3fc:	1d11      	adds	r1, r2, #4
    d3fe:	6019      	str	r1, [r3, #0]
    d400:	6815      	ldr	r5, [r2, #0]
    d402:	6862      	ldr	r2, [r4, #4]
    d404:	2100      	movs	r1, #0
    d406:	4628      	mov	r0, r5
    d408:	f000 fe0a 	bl	e020 <memchr>
    d40c:	b108      	cbz	r0, d412 <_printf_i+0x1da>
    d40e:	1b40      	subs	r0, r0, r5
    d410:	6060      	str	r0, [r4, #4]
    d412:	6863      	ldr	r3, [r4, #4]
    d414:	6123      	str	r3, [r4, #16]
    d416:	2300      	movs	r3, #0
    d418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d41c:	e79f      	b.n	d35e <_printf_i+0x126>
    d41e:	6923      	ldr	r3, [r4, #16]
    d420:	462a      	mov	r2, r5
    d422:	4639      	mov	r1, r7
    d424:	4630      	mov	r0, r6
    d426:	47c0      	blx	r8
    d428:	3001      	adds	r0, #1
    d42a:	d0a2      	beq.n	d372 <_printf_i+0x13a>
    d42c:	6823      	ldr	r3, [r4, #0]
    d42e:	079b      	lsls	r3, r3, #30
    d430:	d507      	bpl.n	d442 <_printf_i+0x20a>
    d432:	2500      	movs	r5, #0
    d434:	f104 0919 	add.w	r9, r4, #25
    d438:	68e3      	ldr	r3, [r4, #12]
    d43a:	9a03      	ldr	r2, [sp, #12]
    d43c:	1a9b      	subs	r3, r3, r2
    d43e:	429d      	cmp	r5, r3
    d440:	db05      	blt.n	d44e <_printf_i+0x216>
    d442:	68e0      	ldr	r0, [r4, #12]
    d444:	9b03      	ldr	r3, [sp, #12]
    d446:	4298      	cmp	r0, r3
    d448:	bfb8      	it	lt
    d44a:	4618      	movlt	r0, r3
    d44c:	e793      	b.n	d376 <_printf_i+0x13e>
    d44e:	2301      	movs	r3, #1
    d450:	464a      	mov	r2, r9
    d452:	4639      	mov	r1, r7
    d454:	4630      	mov	r0, r6
    d456:	47c0      	blx	r8
    d458:	3001      	adds	r0, #1
    d45a:	d08a      	beq.n	d372 <_printf_i+0x13a>
    d45c:	3501      	adds	r5, #1
    d45e:	e7eb      	b.n	d438 <_printf_i+0x200>
    d460:	2b00      	cmp	r3, #0
    d462:	d1a7      	bne.n	d3b4 <_printf_i+0x17c>
    d464:	780b      	ldrb	r3, [r1, #0]
    d466:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d46a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d46e:	e765      	b.n	d33c <_printf_i+0x104>
    d470:	0000e686 	.word	0x0000e686
    d474:	0000e675 	.word	0x0000e675

0000d478 <iprintf>:
    d478:	b40f      	push	{r0, r1, r2, r3}
    d47a:	4b0a      	ldr	r3, [pc, #40]	; (d4a4 <iprintf+0x2c>)
    d47c:	b513      	push	{r0, r1, r4, lr}
    d47e:	681c      	ldr	r4, [r3, #0]
    d480:	b124      	cbz	r4, d48c <iprintf+0x14>
    d482:	69a3      	ldr	r3, [r4, #24]
    d484:	b913      	cbnz	r3, d48c <iprintf+0x14>
    d486:	4620      	mov	r0, r4
    d488:	f000 fcdc 	bl	de44 <__sinit>
    d48c:	ab05      	add	r3, sp, #20
    d48e:	9a04      	ldr	r2, [sp, #16]
    d490:	68a1      	ldr	r1, [r4, #8]
    d492:	9301      	str	r3, [sp, #4]
    d494:	4620      	mov	r0, r4
    d496:	f7ff fd43 	bl	cf20 <_vfiprintf_r>
    d49a:	b002      	add	sp, #8
    d49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d4a0:	b004      	add	sp, #16
    d4a2:	4770      	bx	lr
    d4a4:	20000054 	.word	0x20000054

0000d4a8 <_puts_r>:
    d4a8:	b570      	push	{r4, r5, r6, lr}
    d4aa:	460e      	mov	r6, r1
    d4ac:	4605      	mov	r5, r0
    d4ae:	b118      	cbz	r0, d4b8 <_puts_r+0x10>
    d4b0:	6983      	ldr	r3, [r0, #24]
    d4b2:	b90b      	cbnz	r3, d4b8 <_puts_r+0x10>
    d4b4:	f000 fcc6 	bl	de44 <__sinit>
    d4b8:	69ab      	ldr	r3, [r5, #24]
    d4ba:	68ac      	ldr	r4, [r5, #8]
    d4bc:	b913      	cbnz	r3, d4c4 <_puts_r+0x1c>
    d4be:	4628      	mov	r0, r5
    d4c0:	f000 fcc0 	bl	de44 <__sinit>
    d4c4:	4b23      	ldr	r3, [pc, #140]	; (d554 <_puts_r+0xac>)
    d4c6:	429c      	cmp	r4, r3
    d4c8:	d117      	bne.n	d4fa <_puts_r+0x52>
    d4ca:	686c      	ldr	r4, [r5, #4]
    d4cc:	89a3      	ldrh	r3, [r4, #12]
    d4ce:	071b      	lsls	r3, r3, #28
    d4d0:	d51d      	bpl.n	d50e <_puts_r+0x66>
    d4d2:	6923      	ldr	r3, [r4, #16]
    d4d4:	b1db      	cbz	r3, d50e <_puts_r+0x66>
    d4d6:	3e01      	subs	r6, #1
    d4d8:	68a3      	ldr	r3, [r4, #8]
    d4da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    d4de:	3b01      	subs	r3, #1
    d4e0:	60a3      	str	r3, [r4, #8]
    d4e2:	b9e9      	cbnz	r1, d520 <_puts_r+0x78>
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	da2e      	bge.n	d546 <_puts_r+0x9e>
    d4e8:	4622      	mov	r2, r4
    d4ea:	210a      	movs	r1, #10
    d4ec:	4628      	mov	r0, r5
    d4ee:	f000 faf7 	bl	dae0 <__swbuf_r>
    d4f2:	3001      	adds	r0, #1
    d4f4:	d011      	beq.n	d51a <_puts_r+0x72>
    d4f6:	200a      	movs	r0, #10
    d4f8:	bd70      	pop	{r4, r5, r6, pc}
    d4fa:	4b17      	ldr	r3, [pc, #92]	; (d558 <_puts_r+0xb0>)
    d4fc:	429c      	cmp	r4, r3
    d4fe:	d101      	bne.n	d504 <_puts_r+0x5c>
    d500:	68ac      	ldr	r4, [r5, #8]
    d502:	e7e3      	b.n	d4cc <_puts_r+0x24>
    d504:	4b15      	ldr	r3, [pc, #84]	; (d55c <_puts_r+0xb4>)
    d506:	429c      	cmp	r4, r3
    d508:	bf08      	it	eq
    d50a:	68ec      	ldreq	r4, [r5, #12]
    d50c:	e7de      	b.n	d4cc <_puts_r+0x24>
    d50e:	4621      	mov	r1, r4
    d510:	4628      	mov	r0, r5
    d512:	f000 fb37 	bl	db84 <__swsetup_r>
    d516:	2800      	cmp	r0, #0
    d518:	d0dd      	beq.n	d4d6 <_puts_r+0x2e>
    d51a:	f04f 30ff 	mov.w	r0, #4294967295
    d51e:	bd70      	pop	{r4, r5, r6, pc}
    d520:	2b00      	cmp	r3, #0
    d522:	da04      	bge.n	d52e <_puts_r+0x86>
    d524:	69a2      	ldr	r2, [r4, #24]
    d526:	4293      	cmp	r3, r2
    d528:	db06      	blt.n	d538 <_puts_r+0x90>
    d52a:	290a      	cmp	r1, #10
    d52c:	d004      	beq.n	d538 <_puts_r+0x90>
    d52e:	6823      	ldr	r3, [r4, #0]
    d530:	1c5a      	adds	r2, r3, #1
    d532:	6022      	str	r2, [r4, #0]
    d534:	7019      	strb	r1, [r3, #0]
    d536:	e7cf      	b.n	d4d8 <_puts_r+0x30>
    d538:	4622      	mov	r2, r4
    d53a:	4628      	mov	r0, r5
    d53c:	f000 fad0 	bl	dae0 <__swbuf_r>
    d540:	3001      	adds	r0, #1
    d542:	d1c9      	bne.n	d4d8 <_puts_r+0x30>
    d544:	e7e9      	b.n	d51a <_puts_r+0x72>
    d546:	6823      	ldr	r3, [r4, #0]
    d548:	200a      	movs	r0, #10
    d54a:	1c5a      	adds	r2, r3, #1
    d54c:	6022      	str	r2, [r4, #0]
    d54e:	7018      	strb	r0, [r3, #0]
    d550:	bd70      	pop	{r4, r5, r6, pc}
    d552:	bf00      	nop
    d554:	0000ed50 	.word	0x0000ed50
    d558:	0000ed70 	.word	0x0000ed70
    d55c:	0000ed30 	.word	0x0000ed30

0000d560 <puts>:
    d560:	4b02      	ldr	r3, [pc, #8]	; (d56c <puts+0xc>)
    d562:	4601      	mov	r1, r0
    d564:	6818      	ldr	r0, [r3, #0]
    d566:	f7ff bf9f 	b.w	d4a8 <_puts_r>
    d56a:	bf00      	nop
    d56c:	20000054 	.word	0x20000054

0000d570 <_sbrk_r>:
    d570:	b538      	push	{r3, r4, r5, lr}
    d572:	4c06      	ldr	r4, [pc, #24]	; (d58c <_sbrk_r+0x1c>)
    d574:	2300      	movs	r3, #0
    d576:	4605      	mov	r5, r0
    d578:	4608      	mov	r0, r1
    d57a:	6023      	str	r3, [r4, #0]
    d57c:	f7f3 ffea 	bl	1554 <_sbrk>
    d580:	1c43      	adds	r3, r0, #1
    d582:	d102      	bne.n	d58a <_sbrk_r+0x1a>
    d584:	6823      	ldr	r3, [r4, #0]
    d586:	b103      	cbz	r3, d58a <_sbrk_r+0x1a>
    d588:	602b      	str	r3, [r5, #0]
    d58a:	bd38      	pop	{r3, r4, r5, pc}
    d58c:	20016228 	.word	0x20016228

0000d590 <setbuf>:
    d590:	2900      	cmp	r1, #0
    d592:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d596:	bf0c      	ite	eq
    d598:	2202      	moveq	r2, #2
    d59a:	2200      	movne	r2, #0
    d59c:	f000 b800 	b.w	d5a0 <setvbuf>

0000d5a0 <setvbuf>:
    d5a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    d5a4:	461d      	mov	r5, r3
    d5a6:	4b51      	ldr	r3, [pc, #324]	; (d6ec <setvbuf+0x14c>)
    d5a8:	681e      	ldr	r6, [r3, #0]
    d5aa:	4604      	mov	r4, r0
    d5ac:	460f      	mov	r7, r1
    d5ae:	4690      	mov	r8, r2
    d5b0:	b126      	cbz	r6, d5bc <setvbuf+0x1c>
    d5b2:	69b3      	ldr	r3, [r6, #24]
    d5b4:	b913      	cbnz	r3, d5bc <setvbuf+0x1c>
    d5b6:	4630      	mov	r0, r6
    d5b8:	f000 fc44 	bl	de44 <__sinit>
    d5bc:	4b4c      	ldr	r3, [pc, #304]	; (d6f0 <setvbuf+0x150>)
    d5be:	429c      	cmp	r4, r3
    d5c0:	d152      	bne.n	d668 <setvbuf+0xc8>
    d5c2:	6874      	ldr	r4, [r6, #4]
    d5c4:	f1b8 0f02 	cmp.w	r8, #2
    d5c8:	d006      	beq.n	d5d8 <setvbuf+0x38>
    d5ca:	f1b8 0f01 	cmp.w	r8, #1
    d5ce:	f200 8089 	bhi.w	d6e4 <setvbuf+0x144>
    d5d2:	2d00      	cmp	r5, #0
    d5d4:	f2c0 8086 	blt.w	d6e4 <setvbuf+0x144>
    d5d8:	4621      	mov	r1, r4
    d5da:	4630      	mov	r0, r6
    d5dc:	f000 fbc8 	bl	dd70 <_fflush_r>
    d5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d5e2:	b141      	cbz	r1, d5f6 <setvbuf+0x56>
    d5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d5e8:	4299      	cmp	r1, r3
    d5ea:	d002      	beq.n	d5f2 <setvbuf+0x52>
    d5ec:	4630      	mov	r0, r6
    d5ee:	f7ff fbc3 	bl	cd78 <_free_r>
    d5f2:	2300      	movs	r3, #0
    d5f4:	6363      	str	r3, [r4, #52]	; 0x34
    d5f6:	2300      	movs	r3, #0
    d5f8:	61a3      	str	r3, [r4, #24]
    d5fa:	6063      	str	r3, [r4, #4]
    d5fc:	89a3      	ldrh	r3, [r4, #12]
    d5fe:	061b      	lsls	r3, r3, #24
    d600:	d503      	bpl.n	d60a <setvbuf+0x6a>
    d602:	6921      	ldr	r1, [r4, #16]
    d604:	4630      	mov	r0, r6
    d606:	f7ff fbb7 	bl	cd78 <_free_r>
    d60a:	89a3      	ldrh	r3, [r4, #12]
    d60c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    d610:	f023 0303 	bic.w	r3, r3, #3
    d614:	f1b8 0f02 	cmp.w	r8, #2
    d618:	81a3      	strh	r3, [r4, #12]
    d61a:	d05d      	beq.n	d6d8 <setvbuf+0x138>
    d61c:	ab01      	add	r3, sp, #4
    d61e:	466a      	mov	r2, sp
    d620:	4621      	mov	r1, r4
    d622:	4630      	mov	r0, r6
    d624:	f000 fc98 	bl	df58 <__swhatbuf_r>
    d628:	89a3      	ldrh	r3, [r4, #12]
    d62a:	4318      	orrs	r0, r3
    d62c:	81a0      	strh	r0, [r4, #12]
    d62e:	bb2d      	cbnz	r5, d67c <setvbuf+0xdc>
    d630:	9d00      	ldr	r5, [sp, #0]
    d632:	4628      	mov	r0, r5
    d634:	f7ff fb76 	bl	cd24 <malloc>
    d638:	4607      	mov	r7, r0
    d63a:	2800      	cmp	r0, #0
    d63c:	d14e      	bne.n	d6dc <setvbuf+0x13c>
    d63e:	f8dd 9000 	ldr.w	r9, [sp]
    d642:	45a9      	cmp	r9, r5
    d644:	d13c      	bne.n	d6c0 <setvbuf+0x120>
    d646:	f04f 30ff 	mov.w	r0, #4294967295
    d64a:	89a3      	ldrh	r3, [r4, #12]
    d64c:	f043 0302 	orr.w	r3, r3, #2
    d650:	81a3      	strh	r3, [r4, #12]
    d652:	2300      	movs	r3, #0
    d654:	60a3      	str	r3, [r4, #8]
    d656:	f104 0347 	add.w	r3, r4, #71	; 0x47
    d65a:	6023      	str	r3, [r4, #0]
    d65c:	6123      	str	r3, [r4, #16]
    d65e:	2301      	movs	r3, #1
    d660:	6163      	str	r3, [r4, #20]
    d662:	b003      	add	sp, #12
    d664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d668:	4b22      	ldr	r3, [pc, #136]	; (d6f4 <setvbuf+0x154>)
    d66a:	429c      	cmp	r4, r3
    d66c:	d101      	bne.n	d672 <setvbuf+0xd2>
    d66e:	68b4      	ldr	r4, [r6, #8]
    d670:	e7a8      	b.n	d5c4 <setvbuf+0x24>
    d672:	4b21      	ldr	r3, [pc, #132]	; (d6f8 <setvbuf+0x158>)
    d674:	429c      	cmp	r4, r3
    d676:	bf08      	it	eq
    d678:	68f4      	ldreq	r4, [r6, #12]
    d67a:	e7a3      	b.n	d5c4 <setvbuf+0x24>
    d67c:	2f00      	cmp	r7, #0
    d67e:	d0d8      	beq.n	d632 <setvbuf+0x92>
    d680:	69b3      	ldr	r3, [r6, #24]
    d682:	b913      	cbnz	r3, d68a <setvbuf+0xea>
    d684:	4630      	mov	r0, r6
    d686:	f000 fbdd 	bl	de44 <__sinit>
    d68a:	f1b8 0f01 	cmp.w	r8, #1
    d68e:	bf08      	it	eq
    d690:	89a3      	ldrheq	r3, [r4, #12]
    d692:	6027      	str	r7, [r4, #0]
    d694:	bf04      	itt	eq
    d696:	f043 0301 	orreq.w	r3, r3, #1
    d69a:	81a3      	strheq	r3, [r4, #12]
    d69c:	89a3      	ldrh	r3, [r4, #12]
    d69e:	6127      	str	r7, [r4, #16]
    d6a0:	f013 0008 	ands.w	r0, r3, #8
    d6a4:	6165      	str	r5, [r4, #20]
    d6a6:	d01b      	beq.n	d6e0 <setvbuf+0x140>
    d6a8:	f013 0001 	ands.w	r0, r3, #1
    d6ac:	bf18      	it	ne
    d6ae:	426d      	negne	r5, r5
    d6b0:	f04f 0300 	mov.w	r3, #0
    d6b4:	bf1d      	ittte	ne
    d6b6:	60a3      	strne	r3, [r4, #8]
    d6b8:	61a5      	strne	r5, [r4, #24]
    d6ba:	4618      	movne	r0, r3
    d6bc:	60a5      	streq	r5, [r4, #8]
    d6be:	e7d0      	b.n	d662 <setvbuf+0xc2>
    d6c0:	4648      	mov	r0, r9
    d6c2:	f7ff fb2f 	bl	cd24 <malloc>
    d6c6:	4607      	mov	r7, r0
    d6c8:	2800      	cmp	r0, #0
    d6ca:	d0bc      	beq.n	d646 <setvbuf+0xa6>
    d6cc:	89a3      	ldrh	r3, [r4, #12]
    d6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d6d2:	81a3      	strh	r3, [r4, #12]
    d6d4:	464d      	mov	r5, r9
    d6d6:	e7d3      	b.n	d680 <setvbuf+0xe0>
    d6d8:	2000      	movs	r0, #0
    d6da:	e7b6      	b.n	d64a <setvbuf+0xaa>
    d6dc:	46a9      	mov	r9, r5
    d6de:	e7f5      	b.n	d6cc <setvbuf+0x12c>
    d6e0:	60a0      	str	r0, [r4, #8]
    d6e2:	e7be      	b.n	d662 <setvbuf+0xc2>
    d6e4:	f04f 30ff 	mov.w	r0, #4294967295
    d6e8:	e7bb      	b.n	d662 <setvbuf+0xc2>
    d6ea:	bf00      	nop
    d6ec:	20000054 	.word	0x20000054
    d6f0:	0000ed50 	.word	0x0000ed50
    d6f4:	0000ed70 	.word	0x0000ed70
    d6f8:	0000ed30 	.word	0x0000ed30

0000d6fc <_strerror_r>:
    d6fc:	b510      	push	{r4, lr}
    d6fe:	4604      	mov	r4, r0
    d700:	4608      	mov	r0, r1
    d702:	4611      	mov	r1, r2
    d704:	288e      	cmp	r0, #142	; 0x8e
    d706:	f200 812f 	bhi.w	d968 <_strerror_r+0x26c>
    d70a:	e8df f010 	tbh	[pc, r0, lsl #1]
    d70e:	0138      	.short	0x0138
    d710:	0091008f 	.word	0x0091008f
    d714:	00950093 	.word	0x00950093
    d718:	00990097 	.word	0x00990097
    d71c:	009d009b 	.word	0x009d009b
    d720:	00a300a1 	.word	0x00a300a1
    d724:	00a900a7 	.word	0x00a900a7
    d728:	00ad00ab 	.word	0x00ad00ab
    d72c:	00af012d 	.word	0x00af012d
    d730:	00b300b1 	.word	0x00b300b1
    d734:	00b700b5 	.word	0x00b700b5
    d738:	00bf00bd 	.word	0x00bf00bd
    d73c:	00c700c5 	.word	0x00c700c5
    d740:	00cb00c9 	.word	0x00cb00c9
    d744:	00d100cd 	.word	0x00d100cd
    d748:	00d700d5 	.word	0x00d700d5
    d74c:	00db00d9 	.word	0x00db00d9
    d750:	00df00dd 	.word	0x00df00dd
    d754:	00e300e1 	.word	0x00e300e1
    d758:	012d012d 	.word	0x012d012d
    d75c:	012d012d 	.word	0x012d012d
    d760:	012d012d 	.word	0x012d012d
    d764:	012d012d 	.word	0x012d012d
    d768:	00eb00e7 	.word	0x00eb00e7
    d76c:	012d012d 	.word	0x012d012d
    d770:	012d012d 	.word	0x012d012d
    d774:	012d012d 	.word	0x012d012d
    d778:	012d012d 	.word	0x012d012d
    d77c:	012d012d 	.word	0x012d012d
    d780:	012d012d 	.word	0x012d012d
    d784:	00ed012d 	.word	0x00ed012d
    d788:	00ef0107 	.word	0x00ef0107
    d78c:	012d00f1 	.word	0x012d00f1
    d790:	012d012d 	.word	0x012d012d
    d794:	012d00f3 	.word	0x012d00f3
    d798:	012d012d 	.word	0x012d012d
    d79c:	012d00f5 	.word	0x012d00f5
    d7a0:	00f9012d 	.word	0x00f9012d
    d7a4:	012d012d 	.word	0x012d012d
    d7a8:	012d00fb 	.word	0x012d00fb
    d7ac:	012d012d 	.word	0x012d012d
    d7b0:	012d012d 	.word	0x012d012d
    d7b4:	012d012d 	.word	0x012d012d
    d7b8:	012d012d 	.word	0x012d012d
    d7bc:	00fd012d 	.word	0x00fd012d
    d7c0:	00ff012d 	.word	0x00ff012d
    d7c4:	01030101 	.word	0x01030101
    d7c8:	012d012d 	.word	0x012d012d
    d7cc:	012d0125 	.word	0x012d0125
    d7d0:	012d012d 	.word	0x012d012d
    d7d4:	012d012d 	.word	0x012d012d
    d7d8:	012d012d 	.word	0x012d012d
    d7dc:	0113012d 	.word	0x0113012d
    d7e0:	01090105 	.word	0x01090105
    d7e4:	010d010b 	.word	0x010d010b
    d7e8:	012d010f 	.word	0x012d010f
    d7ec:	01150111 	.word	0x01150111
    d7f0:	00e90119 	.word	0x00e90119
    d7f4:	012b00c1 	.word	0x012b00c1
    d7f8:	00cf00b9 	.word	0x00cf00b9
    d7fc:	009f00bb 	.word	0x009f00bb
    d800:	012900a5 	.word	0x012900a5
    d804:	012d00f7 	.word	0x012d00f7
    d808:	00c30117 	.word	0x00c30117
    d80c:	011b011d 	.word	0x011b011d
    d810:	012d012d 	.word	0x012d012d
    d814:	012d012d 	.word	0x012d012d
    d818:	00d3012d 	.word	0x00d3012d
    d81c:	012d012d 	.word	0x012d012d
    d820:	00e5012d 	.word	0x00e5012d
    d824:	011f0127 	.word	0x011f0127
    d828:	01230121 	.word	0x01230121
    d82c:	4855      	ldr	r0, [pc, #340]	; (d984 <_strerror_r+0x288>)
    d82e:	bd10      	pop	{r4, pc}
    d830:	4855      	ldr	r0, [pc, #340]	; (d988 <_strerror_r+0x28c>)
    d832:	bd10      	pop	{r4, pc}
    d834:	4855      	ldr	r0, [pc, #340]	; (d98c <_strerror_r+0x290>)
    d836:	bd10      	pop	{r4, pc}
    d838:	4855      	ldr	r0, [pc, #340]	; (d990 <_strerror_r+0x294>)
    d83a:	bd10      	pop	{r4, pc}
    d83c:	4855      	ldr	r0, [pc, #340]	; (d994 <_strerror_r+0x298>)
    d83e:	bd10      	pop	{r4, pc}
    d840:	4855      	ldr	r0, [pc, #340]	; (d998 <_strerror_r+0x29c>)
    d842:	bd10      	pop	{r4, pc}
    d844:	4855      	ldr	r0, [pc, #340]	; (d99c <_strerror_r+0x2a0>)
    d846:	bd10      	pop	{r4, pc}
    d848:	4855      	ldr	r0, [pc, #340]	; (d9a0 <_strerror_r+0x2a4>)
    d84a:	bd10      	pop	{r4, pc}
    d84c:	4855      	ldr	r0, [pc, #340]	; (d9a4 <_strerror_r+0x2a8>)
    d84e:	bd10      	pop	{r4, pc}
    d850:	4855      	ldr	r0, [pc, #340]	; (d9a8 <_strerror_r+0x2ac>)
    d852:	bd10      	pop	{r4, pc}
    d854:	4855      	ldr	r0, [pc, #340]	; (d9ac <_strerror_r+0x2b0>)
    d856:	bd10      	pop	{r4, pc}
    d858:	4855      	ldr	r0, [pc, #340]	; (d9b0 <_strerror_r+0x2b4>)
    d85a:	bd10      	pop	{r4, pc}
    d85c:	4855      	ldr	r0, [pc, #340]	; (d9b4 <_strerror_r+0x2b8>)
    d85e:	bd10      	pop	{r4, pc}
    d860:	4855      	ldr	r0, [pc, #340]	; (d9b8 <_strerror_r+0x2bc>)
    d862:	bd10      	pop	{r4, pc}
    d864:	4855      	ldr	r0, [pc, #340]	; (d9bc <_strerror_r+0x2c0>)
    d866:	bd10      	pop	{r4, pc}
    d868:	4855      	ldr	r0, [pc, #340]	; (d9c0 <_strerror_r+0x2c4>)
    d86a:	bd10      	pop	{r4, pc}
    d86c:	4855      	ldr	r0, [pc, #340]	; (d9c4 <_strerror_r+0x2c8>)
    d86e:	bd10      	pop	{r4, pc}
    d870:	4855      	ldr	r0, [pc, #340]	; (d9c8 <_strerror_r+0x2cc>)
    d872:	bd10      	pop	{r4, pc}
    d874:	4855      	ldr	r0, [pc, #340]	; (d9cc <_strerror_r+0x2d0>)
    d876:	bd10      	pop	{r4, pc}
    d878:	4855      	ldr	r0, [pc, #340]	; (d9d0 <_strerror_r+0x2d4>)
    d87a:	bd10      	pop	{r4, pc}
    d87c:	4855      	ldr	r0, [pc, #340]	; (d9d4 <_strerror_r+0x2d8>)
    d87e:	bd10      	pop	{r4, pc}
    d880:	4855      	ldr	r0, [pc, #340]	; (d9d8 <_strerror_r+0x2dc>)
    d882:	bd10      	pop	{r4, pc}
    d884:	4855      	ldr	r0, [pc, #340]	; (d9dc <_strerror_r+0x2e0>)
    d886:	bd10      	pop	{r4, pc}
    d888:	4855      	ldr	r0, [pc, #340]	; (d9e0 <_strerror_r+0x2e4>)
    d88a:	bd10      	pop	{r4, pc}
    d88c:	4855      	ldr	r0, [pc, #340]	; (d9e4 <_strerror_r+0x2e8>)
    d88e:	bd10      	pop	{r4, pc}
    d890:	4855      	ldr	r0, [pc, #340]	; (d9e8 <_strerror_r+0x2ec>)
    d892:	bd10      	pop	{r4, pc}
    d894:	4855      	ldr	r0, [pc, #340]	; (d9ec <_strerror_r+0x2f0>)
    d896:	bd10      	pop	{r4, pc}
    d898:	4855      	ldr	r0, [pc, #340]	; (d9f0 <_strerror_r+0x2f4>)
    d89a:	bd10      	pop	{r4, pc}
    d89c:	4855      	ldr	r0, [pc, #340]	; (d9f4 <_strerror_r+0x2f8>)
    d89e:	bd10      	pop	{r4, pc}
    d8a0:	4855      	ldr	r0, [pc, #340]	; (d9f8 <_strerror_r+0x2fc>)
    d8a2:	bd10      	pop	{r4, pc}
    d8a4:	4855      	ldr	r0, [pc, #340]	; (d9fc <_strerror_r+0x300>)
    d8a6:	bd10      	pop	{r4, pc}
    d8a8:	4855      	ldr	r0, [pc, #340]	; (da00 <_strerror_r+0x304>)
    d8aa:	bd10      	pop	{r4, pc}
    d8ac:	4855      	ldr	r0, [pc, #340]	; (da04 <_strerror_r+0x308>)
    d8ae:	bd10      	pop	{r4, pc}
    d8b0:	4855      	ldr	r0, [pc, #340]	; (da08 <_strerror_r+0x30c>)
    d8b2:	bd10      	pop	{r4, pc}
    d8b4:	4855      	ldr	r0, [pc, #340]	; (da0c <_strerror_r+0x310>)
    d8b6:	bd10      	pop	{r4, pc}
    d8b8:	4855      	ldr	r0, [pc, #340]	; (da10 <_strerror_r+0x314>)
    d8ba:	bd10      	pop	{r4, pc}
    d8bc:	4855      	ldr	r0, [pc, #340]	; (da14 <_strerror_r+0x318>)
    d8be:	bd10      	pop	{r4, pc}
    d8c0:	4855      	ldr	r0, [pc, #340]	; (da18 <_strerror_r+0x31c>)
    d8c2:	bd10      	pop	{r4, pc}
    d8c4:	4855      	ldr	r0, [pc, #340]	; (da1c <_strerror_r+0x320>)
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	4855      	ldr	r0, [pc, #340]	; (da20 <_strerror_r+0x324>)
    d8ca:	bd10      	pop	{r4, pc}
    d8cc:	4855      	ldr	r0, [pc, #340]	; (da24 <_strerror_r+0x328>)
    d8ce:	bd10      	pop	{r4, pc}
    d8d0:	4855      	ldr	r0, [pc, #340]	; (da28 <_strerror_r+0x32c>)
    d8d2:	bd10      	pop	{r4, pc}
    d8d4:	4855      	ldr	r0, [pc, #340]	; (da2c <_strerror_r+0x330>)
    d8d6:	bd10      	pop	{r4, pc}
    d8d8:	4855      	ldr	r0, [pc, #340]	; (da30 <_strerror_r+0x334>)
    d8da:	bd10      	pop	{r4, pc}
    d8dc:	4855      	ldr	r0, [pc, #340]	; (da34 <_strerror_r+0x338>)
    d8de:	bd10      	pop	{r4, pc}
    d8e0:	4855      	ldr	r0, [pc, #340]	; (da38 <_strerror_r+0x33c>)
    d8e2:	bd10      	pop	{r4, pc}
    d8e4:	4855      	ldr	r0, [pc, #340]	; (da3c <_strerror_r+0x340>)
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	4855      	ldr	r0, [pc, #340]	; (da40 <_strerror_r+0x344>)
    d8ea:	bd10      	pop	{r4, pc}
    d8ec:	4855      	ldr	r0, [pc, #340]	; (da44 <_strerror_r+0x348>)
    d8ee:	bd10      	pop	{r4, pc}
    d8f0:	4855      	ldr	r0, [pc, #340]	; (da48 <_strerror_r+0x34c>)
    d8f2:	bd10      	pop	{r4, pc}
    d8f4:	4855      	ldr	r0, [pc, #340]	; (da4c <_strerror_r+0x350>)
    d8f6:	bd10      	pop	{r4, pc}
    d8f8:	4855      	ldr	r0, [pc, #340]	; (da50 <_strerror_r+0x354>)
    d8fa:	bd10      	pop	{r4, pc}
    d8fc:	4855      	ldr	r0, [pc, #340]	; (da54 <_strerror_r+0x358>)
    d8fe:	bd10      	pop	{r4, pc}
    d900:	4855      	ldr	r0, [pc, #340]	; (da58 <_strerror_r+0x35c>)
    d902:	bd10      	pop	{r4, pc}
    d904:	4855      	ldr	r0, [pc, #340]	; (da5c <_strerror_r+0x360>)
    d906:	bd10      	pop	{r4, pc}
    d908:	4855      	ldr	r0, [pc, #340]	; (da60 <_strerror_r+0x364>)
    d90a:	bd10      	pop	{r4, pc}
    d90c:	4855      	ldr	r0, [pc, #340]	; (da64 <_strerror_r+0x368>)
    d90e:	bd10      	pop	{r4, pc}
    d910:	4855      	ldr	r0, [pc, #340]	; (da68 <_strerror_r+0x36c>)
    d912:	bd10      	pop	{r4, pc}
    d914:	4855      	ldr	r0, [pc, #340]	; (da6c <_strerror_r+0x370>)
    d916:	bd10      	pop	{r4, pc}
    d918:	4855      	ldr	r0, [pc, #340]	; (da70 <_strerror_r+0x374>)
    d91a:	bd10      	pop	{r4, pc}
    d91c:	4855      	ldr	r0, [pc, #340]	; (da74 <_strerror_r+0x378>)
    d91e:	bd10      	pop	{r4, pc}
    d920:	4855      	ldr	r0, [pc, #340]	; (da78 <_strerror_r+0x37c>)
    d922:	bd10      	pop	{r4, pc}
    d924:	4855      	ldr	r0, [pc, #340]	; (da7c <_strerror_r+0x380>)
    d926:	bd10      	pop	{r4, pc}
    d928:	4855      	ldr	r0, [pc, #340]	; (da80 <_strerror_r+0x384>)
    d92a:	bd10      	pop	{r4, pc}
    d92c:	4855      	ldr	r0, [pc, #340]	; (da84 <_strerror_r+0x388>)
    d92e:	bd10      	pop	{r4, pc}
    d930:	4855      	ldr	r0, [pc, #340]	; (da88 <_strerror_r+0x38c>)
    d932:	bd10      	pop	{r4, pc}
    d934:	4855      	ldr	r0, [pc, #340]	; (da8c <_strerror_r+0x390>)
    d936:	bd10      	pop	{r4, pc}
    d938:	4855      	ldr	r0, [pc, #340]	; (da90 <_strerror_r+0x394>)
    d93a:	bd10      	pop	{r4, pc}
    d93c:	4855      	ldr	r0, [pc, #340]	; (da94 <_strerror_r+0x398>)
    d93e:	bd10      	pop	{r4, pc}
    d940:	4855      	ldr	r0, [pc, #340]	; (da98 <_strerror_r+0x39c>)
    d942:	bd10      	pop	{r4, pc}
    d944:	4855      	ldr	r0, [pc, #340]	; (da9c <_strerror_r+0x3a0>)
    d946:	bd10      	pop	{r4, pc}
    d948:	4855      	ldr	r0, [pc, #340]	; (daa0 <_strerror_r+0x3a4>)
    d94a:	bd10      	pop	{r4, pc}
    d94c:	4855      	ldr	r0, [pc, #340]	; (daa4 <_strerror_r+0x3a8>)
    d94e:	bd10      	pop	{r4, pc}
    d950:	4855      	ldr	r0, [pc, #340]	; (daa8 <_strerror_r+0x3ac>)
    d952:	bd10      	pop	{r4, pc}
    d954:	4855      	ldr	r0, [pc, #340]	; (daac <_strerror_r+0x3b0>)
    d956:	bd10      	pop	{r4, pc}
    d958:	4855      	ldr	r0, [pc, #340]	; (dab0 <_strerror_r+0x3b4>)
    d95a:	bd10      	pop	{r4, pc}
    d95c:	4855      	ldr	r0, [pc, #340]	; (dab4 <_strerror_r+0x3b8>)
    d95e:	bd10      	pop	{r4, pc}
    d960:	4855      	ldr	r0, [pc, #340]	; (dab8 <_strerror_r+0x3bc>)
    d962:	bd10      	pop	{r4, pc}
    d964:	4855      	ldr	r0, [pc, #340]	; (dabc <_strerror_r+0x3c0>)
    d966:	bd10      	pop	{r4, pc}
    d968:	2b00      	cmp	r3, #0
    d96a:	bf14      	ite	ne
    d96c:	461a      	movne	r2, r3
    d96e:	4622      	moveq	r2, r4
    d970:	f000 f8b4 	bl	dadc <_user_strerror>
    d974:	4b52      	ldr	r3, [pc, #328]	; (dac0 <_strerror_r+0x3c4>)
    d976:	2800      	cmp	r0, #0
    d978:	bf08      	it	eq
    d97a:	4618      	moveq	r0, r3
    d97c:	bd10      	pop	{r4, pc}
    d97e:	4851      	ldr	r0, [pc, #324]	; (dac4 <_strerror_r+0x3c8>)
    d980:	bd10      	pop	{r4, pc}
    d982:	bf00      	nop
    d984:	0000e69f 	.word	0x0000e69f
    d988:	0000e6a9 	.word	0x0000e6a9
    d98c:	0000e6c3 	.word	0x0000e6c3
    d990:	0000e6d3 	.word	0x0000e6d3
    d994:	0000e6eb 	.word	0x0000e6eb
    d998:	0000e6f5 	.word	0x0000e6f5
    d99c:	0000e70f 	.word	0x0000e70f
    d9a0:	0000e721 	.word	0x0000e721
    d9a4:	0000e733 	.word	0x0000e733
    d9a8:	0000e74c 	.word	0x0000e74c
    d9ac:	0000e75c 	.word	0x0000e75c
    d9b0:	0000e768 	.word	0x0000e768
    d9b4:	0000e785 	.word	0x0000e785
    d9b8:	0000e797 	.word	0x0000e797
    d9bc:	0000e7a8 	.word	0x0000e7a8
    d9c0:	0000e7ba 	.word	0x0000e7ba
    d9c4:	0000e7c6 	.word	0x0000e7c6
    d9c8:	0000e7de 	.word	0x0000e7de
    d9cc:	0000e7ea 	.word	0x0000e7ea
    d9d0:	0000e7fc 	.word	0x0000e7fc
    d9d4:	0000e80b 	.word	0x0000e80b
    d9d8:	0000e81b 	.word	0x0000e81b
    d9dc:	0000e828 	.word	0x0000e828
    d9e0:	0000e847 	.word	0x0000e847
    d9e4:	0000e856 	.word	0x0000e856
    d9e8:	0000e867 	.word	0x0000e867
    d9ec:	0000e88b 	.word	0x0000e88b
    d9f0:	0000e8a9 	.word	0x0000e8a9
    d9f4:	0000e8c7 	.word	0x0000e8c7
    d9f8:	0000e8e7 	.word	0x0000e8e7
    d9fc:	0000e8fe 	.word	0x0000e8fe
    da00:	0000e90d 	.word	0x0000e90d
    da04:	0000e91c 	.word	0x0000e91c
    da08:	0000e930 	.word	0x0000e930
    da0c:	0000e948 	.word	0x0000e948
    da10:	0000e956 	.word	0x0000e956
    da14:	0000e963 	.word	0x0000e963
    da18:	0000e979 	.word	0x0000e979
    da1c:	0000e988 	.word	0x0000e988
    da20:	0000e994 	.word	0x0000e994
    da24:	0000e9c3 	.word	0x0000e9c3
    da28:	0000e9d4 	.word	0x0000e9d4
    da2c:	0000e9ef 	.word	0x0000e9ef
    da30:	0000ea02 	.word	0x0000ea02
    da34:	0000ea18 	.word	0x0000ea18
    da38:	0000ea21 	.word	0x0000ea21
    da3c:	0000ea38 	.word	0x0000ea38
    da40:	0000ea40 	.word	0x0000ea40
    da44:	0000ea4d 	.word	0x0000ea4d
    da48:	0000ea62 	.word	0x0000ea62
    da4c:	0000ea76 	.word	0x0000ea76
    da50:	0000ea8e 	.word	0x0000ea8e
    da54:	0000ea9d 	.word	0x0000ea9d
    da58:	0000eaae 	.word	0x0000eaae
    da5c:	0000eac1 	.word	0x0000eac1
    da60:	0000eacd 	.word	0x0000eacd
    da64:	0000eae6 	.word	0x0000eae6
    da68:	0000eafa 	.word	0x0000eafa
    da6c:	0000eb15 	.word	0x0000eb15
    da70:	0000eb2d 	.word	0x0000eb2d
    da74:	0000eb47 	.word	0x0000eb47
    da78:	0000eb4f 	.word	0x0000eb4f
    da7c:	0000eb7f 	.word	0x0000eb7f
    da80:	0000eb9e 	.word	0x0000eb9e
    da84:	0000ebbd 	.word	0x0000ebbd
    da88:	0000ebd4 	.word	0x0000ebd4
    da8c:	0000ebe7 	.word	0x0000ebe7
    da90:	0000ec00 	.word	0x0000ec00
    da94:	0000ec17 	.word	0x0000ec17
    da98:	0000ec2d 	.word	0x0000ec2d
    da9c:	0000ec4e 	.word	0x0000ec4e
    daa0:	0000ec66 	.word	0x0000ec66
    daa4:	0000ec82 	.word	0x0000ec82
    daa8:	0000ec95 	.word	0x0000ec95
    daac:	0000ecab 	.word	0x0000ecab
    dab0:	0000ecbf 	.word	0x0000ecbf
    dab4:	0000ece1 	.word	0x0000ece1
    dab8:	0000ed07 	.word	0x0000ed07
    dabc:	0000ed18 	.word	0x0000ed18
    dac0:	0000e669 	.word	0x0000e669
    dac4:	0000e697 	.word	0x0000e697

0000dac8 <strerror>:
    dac8:	4601      	mov	r1, r0
    daca:	4803      	ldr	r0, [pc, #12]	; (dad8 <strerror+0x10>)
    dacc:	2300      	movs	r3, #0
    dace:	461a      	mov	r2, r3
    dad0:	6800      	ldr	r0, [r0, #0]
    dad2:	f7ff be13 	b.w	d6fc <_strerror_r>
    dad6:	bf00      	nop
    dad8:	20000054 	.word	0x20000054

0000dadc <_user_strerror>:
    dadc:	2000      	movs	r0, #0
    dade:	4770      	bx	lr

0000dae0 <__swbuf_r>:
    dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dae2:	460e      	mov	r6, r1
    dae4:	4614      	mov	r4, r2
    dae6:	4605      	mov	r5, r0
    dae8:	b118      	cbz	r0, daf2 <__swbuf_r+0x12>
    daea:	6983      	ldr	r3, [r0, #24]
    daec:	b90b      	cbnz	r3, daf2 <__swbuf_r+0x12>
    daee:	f000 f9a9 	bl	de44 <__sinit>
    daf2:	4b21      	ldr	r3, [pc, #132]	; (db78 <__swbuf_r+0x98>)
    daf4:	429c      	cmp	r4, r3
    daf6:	d12a      	bne.n	db4e <__swbuf_r+0x6e>
    daf8:	686c      	ldr	r4, [r5, #4]
    dafa:	69a3      	ldr	r3, [r4, #24]
    dafc:	60a3      	str	r3, [r4, #8]
    dafe:	89a3      	ldrh	r3, [r4, #12]
    db00:	071a      	lsls	r2, r3, #28
    db02:	d52e      	bpl.n	db62 <__swbuf_r+0x82>
    db04:	6923      	ldr	r3, [r4, #16]
    db06:	b363      	cbz	r3, db62 <__swbuf_r+0x82>
    db08:	6923      	ldr	r3, [r4, #16]
    db0a:	6820      	ldr	r0, [r4, #0]
    db0c:	1ac0      	subs	r0, r0, r3
    db0e:	6963      	ldr	r3, [r4, #20]
    db10:	b2f6      	uxtb	r6, r6
    db12:	4298      	cmp	r0, r3
    db14:	4637      	mov	r7, r6
    db16:	db04      	blt.n	db22 <__swbuf_r+0x42>
    db18:	4621      	mov	r1, r4
    db1a:	4628      	mov	r0, r5
    db1c:	f000 f928 	bl	dd70 <_fflush_r>
    db20:	bb28      	cbnz	r0, db6e <__swbuf_r+0x8e>
    db22:	68a3      	ldr	r3, [r4, #8]
    db24:	3b01      	subs	r3, #1
    db26:	60a3      	str	r3, [r4, #8]
    db28:	6823      	ldr	r3, [r4, #0]
    db2a:	1c5a      	adds	r2, r3, #1
    db2c:	6022      	str	r2, [r4, #0]
    db2e:	701e      	strb	r6, [r3, #0]
    db30:	6963      	ldr	r3, [r4, #20]
    db32:	3001      	adds	r0, #1
    db34:	4298      	cmp	r0, r3
    db36:	d004      	beq.n	db42 <__swbuf_r+0x62>
    db38:	89a3      	ldrh	r3, [r4, #12]
    db3a:	07db      	lsls	r3, r3, #31
    db3c:	d519      	bpl.n	db72 <__swbuf_r+0x92>
    db3e:	2e0a      	cmp	r6, #10
    db40:	d117      	bne.n	db72 <__swbuf_r+0x92>
    db42:	4621      	mov	r1, r4
    db44:	4628      	mov	r0, r5
    db46:	f000 f913 	bl	dd70 <_fflush_r>
    db4a:	b190      	cbz	r0, db72 <__swbuf_r+0x92>
    db4c:	e00f      	b.n	db6e <__swbuf_r+0x8e>
    db4e:	4b0b      	ldr	r3, [pc, #44]	; (db7c <__swbuf_r+0x9c>)
    db50:	429c      	cmp	r4, r3
    db52:	d101      	bne.n	db58 <__swbuf_r+0x78>
    db54:	68ac      	ldr	r4, [r5, #8]
    db56:	e7d0      	b.n	dafa <__swbuf_r+0x1a>
    db58:	4b09      	ldr	r3, [pc, #36]	; (db80 <__swbuf_r+0xa0>)
    db5a:	429c      	cmp	r4, r3
    db5c:	bf08      	it	eq
    db5e:	68ec      	ldreq	r4, [r5, #12]
    db60:	e7cb      	b.n	dafa <__swbuf_r+0x1a>
    db62:	4621      	mov	r1, r4
    db64:	4628      	mov	r0, r5
    db66:	f000 f80d 	bl	db84 <__swsetup_r>
    db6a:	2800      	cmp	r0, #0
    db6c:	d0cc      	beq.n	db08 <__swbuf_r+0x28>
    db6e:	f04f 37ff 	mov.w	r7, #4294967295
    db72:	4638      	mov	r0, r7
    db74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db76:	bf00      	nop
    db78:	0000ed50 	.word	0x0000ed50
    db7c:	0000ed70 	.word	0x0000ed70
    db80:	0000ed30 	.word	0x0000ed30

0000db84 <__swsetup_r>:
    db84:	4b32      	ldr	r3, [pc, #200]	; (dc50 <__swsetup_r+0xcc>)
    db86:	b570      	push	{r4, r5, r6, lr}
    db88:	681d      	ldr	r5, [r3, #0]
    db8a:	4606      	mov	r6, r0
    db8c:	460c      	mov	r4, r1
    db8e:	b125      	cbz	r5, db9a <__swsetup_r+0x16>
    db90:	69ab      	ldr	r3, [r5, #24]
    db92:	b913      	cbnz	r3, db9a <__swsetup_r+0x16>
    db94:	4628      	mov	r0, r5
    db96:	f000 f955 	bl	de44 <__sinit>
    db9a:	4b2e      	ldr	r3, [pc, #184]	; (dc54 <__swsetup_r+0xd0>)
    db9c:	429c      	cmp	r4, r3
    db9e:	d10f      	bne.n	dbc0 <__swsetup_r+0x3c>
    dba0:	686c      	ldr	r4, [r5, #4]
    dba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dba6:	b29a      	uxth	r2, r3
    dba8:	0715      	lsls	r5, r2, #28
    dbaa:	d42c      	bmi.n	dc06 <__swsetup_r+0x82>
    dbac:	06d0      	lsls	r0, r2, #27
    dbae:	d411      	bmi.n	dbd4 <__swsetup_r+0x50>
    dbb0:	2209      	movs	r2, #9
    dbb2:	6032      	str	r2, [r6, #0]
    dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dbb8:	81a3      	strh	r3, [r4, #12]
    dbba:	f04f 30ff 	mov.w	r0, #4294967295
    dbbe:	bd70      	pop	{r4, r5, r6, pc}
    dbc0:	4b25      	ldr	r3, [pc, #148]	; (dc58 <__swsetup_r+0xd4>)
    dbc2:	429c      	cmp	r4, r3
    dbc4:	d101      	bne.n	dbca <__swsetup_r+0x46>
    dbc6:	68ac      	ldr	r4, [r5, #8]
    dbc8:	e7eb      	b.n	dba2 <__swsetup_r+0x1e>
    dbca:	4b24      	ldr	r3, [pc, #144]	; (dc5c <__swsetup_r+0xd8>)
    dbcc:	429c      	cmp	r4, r3
    dbce:	bf08      	it	eq
    dbd0:	68ec      	ldreq	r4, [r5, #12]
    dbd2:	e7e6      	b.n	dba2 <__swsetup_r+0x1e>
    dbd4:	0751      	lsls	r1, r2, #29
    dbd6:	d512      	bpl.n	dbfe <__swsetup_r+0x7a>
    dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dbda:	b141      	cbz	r1, dbee <__swsetup_r+0x6a>
    dbdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    dbe0:	4299      	cmp	r1, r3
    dbe2:	d002      	beq.n	dbea <__swsetup_r+0x66>
    dbe4:	4630      	mov	r0, r6
    dbe6:	f7ff f8c7 	bl	cd78 <_free_r>
    dbea:	2300      	movs	r3, #0
    dbec:	6363      	str	r3, [r4, #52]	; 0x34
    dbee:	89a3      	ldrh	r3, [r4, #12]
    dbf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    dbf4:	81a3      	strh	r3, [r4, #12]
    dbf6:	2300      	movs	r3, #0
    dbf8:	6063      	str	r3, [r4, #4]
    dbfa:	6923      	ldr	r3, [r4, #16]
    dbfc:	6023      	str	r3, [r4, #0]
    dbfe:	89a3      	ldrh	r3, [r4, #12]
    dc00:	f043 0308 	orr.w	r3, r3, #8
    dc04:	81a3      	strh	r3, [r4, #12]
    dc06:	6923      	ldr	r3, [r4, #16]
    dc08:	b94b      	cbnz	r3, dc1e <__swsetup_r+0x9a>
    dc0a:	89a3      	ldrh	r3, [r4, #12]
    dc0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    dc10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    dc14:	d003      	beq.n	dc1e <__swsetup_r+0x9a>
    dc16:	4621      	mov	r1, r4
    dc18:	4630      	mov	r0, r6
    dc1a:	f000 f9c1 	bl	dfa0 <__smakebuf_r>
    dc1e:	89a2      	ldrh	r2, [r4, #12]
    dc20:	f012 0301 	ands.w	r3, r2, #1
    dc24:	d00c      	beq.n	dc40 <__swsetup_r+0xbc>
    dc26:	2300      	movs	r3, #0
    dc28:	60a3      	str	r3, [r4, #8]
    dc2a:	6963      	ldr	r3, [r4, #20]
    dc2c:	425b      	negs	r3, r3
    dc2e:	61a3      	str	r3, [r4, #24]
    dc30:	6923      	ldr	r3, [r4, #16]
    dc32:	b953      	cbnz	r3, dc4a <__swsetup_r+0xc6>
    dc34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dc38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    dc3c:	d1ba      	bne.n	dbb4 <__swsetup_r+0x30>
    dc3e:	bd70      	pop	{r4, r5, r6, pc}
    dc40:	0792      	lsls	r2, r2, #30
    dc42:	bf58      	it	pl
    dc44:	6963      	ldrpl	r3, [r4, #20]
    dc46:	60a3      	str	r3, [r4, #8]
    dc48:	e7f2      	b.n	dc30 <__swsetup_r+0xac>
    dc4a:	2000      	movs	r0, #0
    dc4c:	e7f7      	b.n	dc3e <__swsetup_r+0xba>
    dc4e:	bf00      	nop
    dc50:	20000054 	.word	0x20000054
    dc54:	0000ed50 	.word	0x0000ed50
    dc58:	0000ed70 	.word	0x0000ed70
    dc5c:	0000ed30 	.word	0x0000ed30

0000dc60 <__sflush_r>:
    dc60:	898a      	ldrh	r2, [r1, #12]
    dc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc66:	4605      	mov	r5, r0
    dc68:	0710      	lsls	r0, r2, #28
    dc6a:	460c      	mov	r4, r1
    dc6c:	d45a      	bmi.n	dd24 <__sflush_r+0xc4>
    dc6e:	684b      	ldr	r3, [r1, #4]
    dc70:	2b00      	cmp	r3, #0
    dc72:	dc05      	bgt.n	dc80 <__sflush_r+0x20>
    dc74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    dc76:	2b00      	cmp	r3, #0
    dc78:	dc02      	bgt.n	dc80 <__sflush_r+0x20>
    dc7a:	2000      	movs	r0, #0
    dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    dc82:	2e00      	cmp	r6, #0
    dc84:	d0f9      	beq.n	dc7a <__sflush_r+0x1a>
    dc86:	2300      	movs	r3, #0
    dc88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    dc8c:	682f      	ldr	r7, [r5, #0]
    dc8e:	602b      	str	r3, [r5, #0]
    dc90:	d033      	beq.n	dcfa <__sflush_r+0x9a>
    dc92:	6d60      	ldr	r0, [r4, #84]	; 0x54
    dc94:	89a3      	ldrh	r3, [r4, #12]
    dc96:	075a      	lsls	r2, r3, #29
    dc98:	d505      	bpl.n	dca6 <__sflush_r+0x46>
    dc9a:	6863      	ldr	r3, [r4, #4]
    dc9c:	1ac0      	subs	r0, r0, r3
    dc9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dca0:	b10b      	cbz	r3, dca6 <__sflush_r+0x46>
    dca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    dca4:	1ac0      	subs	r0, r0, r3
    dca6:	2300      	movs	r3, #0
    dca8:	4602      	mov	r2, r0
    dcaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    dcac:	6a21      	ldr	r1, [r4, #32]
    dcae:	4628      	mov	r0, r5
    dcb0:	47b0      	blx	r6
    dcb2:	1c43      	adds	r3, r0, #1
    dcb4:	89a3      	ldrh	r3, [r4, #12]
    dcb6:	d106      	bne.n	dcc6 <__sflush_r+0x66>
    dcb8:	6829      	ldr	r1, [r5, #0]
    dcba:	291d      	cmp	r1, #29
    dcbc:	d84b      	bhi.n	dd56 <__sflush_r+0xf6>
    dcbe:	4a2b      	ldr	r2, [pc, #172]	; (dd6c <__sflush_r+0x10c>)
    dcc0:	40ca      	lsrs	r2, r1
    dcc2:	07d6      	lsls	r6, r2, #31
    dcc4:	d547      	bpl.n	dd56 <__sflush_r+0xf6>
    dcc6:	2200      	movs	r2, #0
    dcc8:	6062      	str	r2, [r4, #4]
    dcca:	04d9      	lsls	r1, r3, #19
    dccc:	6922      	ldr	r2, [r4, #16]
    dcce:	6022      	str	r2, [r4, #0]
    dcd0:	d504      	bpl.n	dcdc <__sflush_r+0x7c>
    dcd2:	1c42      	adds	r2, r0, #1
    dcd4:	d101      	bne.n	dcda <__sflush_r+0x7a>
    dcd6:	682b      	ldr	r3, [r5, #0]
    dcd8:	b903      	cbnz	r3, dcdc <__sflush_r+0x7c>
    dcda:	6560      	str	r0, [r4, #84]	; 0x54
    dcdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dcde:	602f      	str	r7, [r5, #0]
    dce0:	2900      	cmp	r1, #0
    dce2:	d0ca      	beq.n	dc7a <__sflush_r+0x1a>
    dce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    dce8:	4299      	cmp	r1, r3
    dcea:	d002      	beq.n	dcf2 <__sflush_r+0x92>
    dcec:	4628      	mov	r0, r5
    dcee:	f7ff f843 	bl	cd78 <_free_r>
    dcf2:	2000      	movs	r0, #0
    dcf4:	6360      	str	r0, [r4, #52]	; 0x34
    dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcfa:	6a21      	ldr	r1, [r4, #32]
    dcfc:	2301      	movs	r3, #1
    dcfe:	4628      	mov	r0, r5
    dd00:	47b0      	blx	r6
    dd02:	1c41      	adds	r1, r0, #1
    dd04:	d1c6      	bne.n	dc94 <__sflush_r+0x34>
    dd06:	682b      	ldr	r3, [r5, #0]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d0c3      	beq.n	dc94 <__sflush_r+0x34>
    dd0c:	2b1d      	cmp	r3, #29
    dd0e:	d001      	beq.n	dd14 <__sflush_r+0xb4>
    dd10:	2b16      	cmp	r3, #22
    dd12:	d101      	bne.n	dd18 <__sflush_r+0xb8>
    dd14:	602f      	str	r7, [r5, #0]
    dd16:	e7b0      	b.n	dc7a <__sflush_r+0x1a>
    dd18:	89a3      	ldrh	r3, [r4, #12]
    dd1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd1e:	81a3      	strh	r3, [r4, #12]
    dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd24:	690f      	ldr	r7, [r1, #16]
    dd26:	2f00      	cmp	r7, #0
    dd28:	d0a7      	beq.n	dc7a <__sflush_r+0x1a>
    dd2a:	0793      	lsls	r3, r2, #30
    dd2c:	680e      	ldr	r6, [r1, #0]
    dd2e:	bf08      	it	eq
    dd30:	694b      	ldreq	r3, [r1, #20]
    dd32:	600f      	str	r7, [r1, #0]
    dd34:	bf18      	it	ne
    dd36:	2300      	movne	r3, #0
    dd38:	eba6 0807 	sub.w	r8, r6, r7
    dd3c:	608b      	str	r3, [r1, #8]
    dd3e:	f1b8 0f00 	cmp.w	r8, #0
    dd42:	dd9a      	ble.n	dc7a <__sflush_r+0x1a>
    dd44:	4643      	mov	r3, r8
    dd46:	463a      	mov	r2, r7
    dd48:	6a21      	ldr	r1, [r4, #32]
    dd4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dd4c:	4628      	mov	r0, r5
    dd4e:	47b0      	blx	r6
    dd50:	2800      	cmp	r0, #0
    dd52:	dc07      	bgt.n	dd64 <__sflush_r+0x104>
    dd54:	89a3      	ldrh	r3, [r4, #12]
    dd56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd5a:	81a3      	strh	r3, [r4, #12]
    dd5c:	f04f 30ff 	mov.w	r0, #4294967295
    dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd64:	4407      	add	r7, r0
    dd66:	eba8 0800 	sub.w	r8, r8, r0
    dd6a:	e7e8      	b.n	dd3e <__sflush_r+0xde>
    dd6c:	20400001 	.word	0x20400001

0000dd70 <_fflush_r>:
    dd70:	b538      	push	{r3, r4, r5, lr}
    dd72:	690b      	ldr	r3, [r1, #16]
    dd74:	4605      	mov	r5, r0
    dd76:	460c      	mov	r4, r1
    dd78:	b1db      	cbz	r3, ddb2 <_fflush_r+0x42>
    dd7a:	b118      	cbz	r0, dd84 <_fflush_r+0x14>
    dd7c:	6983      	ldr	r3, [r0, #24]
    dd7e:	b90b      	cbnz	r3, dd84 <_fflush_r+0x14>
    dd80:	f000 f860 	bl	de44 <__sinit>
    dd84:	4b0c      	ldr	r3, [pc, #48]	; (ddb8 <_fflush_r+0x48>)
    dd86:	429c      	cmp	r4, r3
    dd88:	d109      	bne.n	dd9e <_fflush_r+0x2e>
    dd8a:	686c      	ldr	r4, [r5, #4]
    dd8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dd90:	b17b      	cbz	r3, ddb2 <_fflush_r+0x42>
    dd92:	4621      	mov	r1, r4
    dd94:	4628      	mov	r0, r5
    dd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dd9a:	f7ff bf61 	b.w	dc60 <__sflush_r>
    dd9e:	4b07      	ldr	r3, [pc, #28]	; (ddbc <_fflush_r+0x4c>)
    dda0:	429c      	cmp	r4, r3
    dda2:	d101      	bne.n	dda8 <_fflush_r+0x38>
    dda4:	68ac      	ldr	r4, [r5, #8]
    dda6:	e7f1      	b.n	dd8c <_fflush_r+0x1c>
    dda8:	4b05      	ldr	r3, [pc, #20]	; (ddc0 <_fflush_r+0x50>)
    ddaa:	429c      	cmp	r4, r3
    ddac:	bf08      	it	eq
    ddae:	68ec      	ldreq	r4, [r5, #12]
    ddb0:	e7ec      	b.n	dd8c <_fflush_r+0x1c>
    ddb2:	2000      	movs	r0, #0
    ddb4:	bd38      	pop	{r3, r4, r5, pc}
    ddb6:	bf00      	nop
    ddb8:	0000ed50 	.word	0x0000ed50
    ddbc:	0000ed70 	.word	0x0000ed70
    ddc0:	0000ed30 	.word	0x0000ed30

0000ddc4 <_cleanup_r>:
    ddc4:	4901      	ldr	r1, [pc, #4]	; (ddcc <_cleanup_r+0x8>)
    ddc6:	f000 b8a9 	b.w	df1c <_fwalk_reent>
    ddca:	bf00      	nop
    ddcc:	0000dd71 	.word	0x0000dd71

0000ddd0 <std.isra.0>:
    ddd0:	2300      	movs	r3, #0
    ddd2:	b510      	push	{r4, lr}
    ddd4:	4604      	mov	r4, r0
    ddd6:	6003      	str	r3, [r0, #0]
    ddd8:	6043      	str	r3, [r0, #4]
    ddda:	6083      	str	r3, [r0, #8]
    dddc:	8181      	strh	r1, [r0, #12]
    ddde:	6643      	str	r3, [r0, #100]	; 0x64
    dde0:	81c2      	strh	r2, [r0, #14]
    dde2:	6103      	str	r3, [r0, #16]
    dde4:	6143      	str	r3, [r0, #20]
    dde6:	6183      	str	r3, [r0, #24]
    dde8:	4619      	mov	r1, r3
    ddea:	2208      	movs	r2, #8
    ddec:	305c      	adds	r0, #92	; 0x5c
    ddee:	f7fe ffbb 	bl	cd68 <memset>
    ddf2:	4b05      	ldr	r3, [pc, #20]	; (de08 <std.isra.0+0x38>)
    ddf4:	6263      	str	r3, [r4, #36]	; 0x24
    ddf6:	4b05      	ldr	r3, [pc, #20]	; (de0c <std.isra.0+0x3c>)
    ddf8:	62a3      	str	r3, [r4, #40]	; 0x28
    ddfa:	4b05      	ldr	r3, [pc, #20]	; (de10 <std.isra.0+0x40>)
    ddfc:	62e3      	str	r3, [r4, #44]	; 0x2c
    ddfe:	4b05      	ldr	r3, [pc, #20]	; (de14 <std.isra.0+0x44>)
    de00:	6224      	str	r4, [r4, #32]
    de02:	6323      	str	r3, [r4, #48]	; 0x30
    de04:	bd10      	pop	{r4, pc}
    de06:	bf00      	nop
    de08:	0000e0c5 	.word	0x0000e0c5
    de0c:	0000e0e7 	.word	0x0000e0e7
    de10:	0000e11f 	.word	0x0000e11f
    de14:	0000e143 	.word	0x0000e143

0000de18 <__sfmoreglue>:
    de18:	b570      	push	{r4, r5, r6, lr}
    de1a:	1e4a      	subs	r2, r1, #1
    de1c:	2568      	movs	r5, #104	; 0x68
    de1e:	4355      	muls	r5, r2
    de20:	460e      	mov	r6, r1
    de22:	f105 0174 	add.w	r1, r5, #116	; 0x74
    de26:	f7fe fff5 	bl	ce14 <_malloc_r>
    de2a:	4604      	mov	r4, r0
    de2c:	b140      	cbz	r0, de40 <__sfmoreglue+0x28>
    de2e:	2100      	movs	r1, #0
    de30:	e880 0042 	stmia.w	r0, {r1, r6}
    de34:	300c      	adds	r0, #12
    de36:	60a0      	str	r0, [r4, #8]
    de38:	f105 0268 	add.w	r2, r5, #104	; 0x68
    de3c:	f7fe ff94 	bl	cd68 <memset>
    de40:	4620      	mov	r0, r4
    de42:	bd70      	pop	{r4, r5, r6, pc}

0000de44 <__sinit>:
    de44:	6983      	ldr	r3, [r0, #24]
    de46:	b510      	push	{r4, lr}
    de48:	4604      	mov	r4, r0
    de4a:	bb33      	cbnz	r3, de9a <__sinit+0x56>
    de4c:	6483      	str	r3, [r0, #72]	; 0x48
    de4e:	64c3      	str	r3, [r0, #76]	; 0x4c
    de50:	6503      	str	r3, [r0, #80]	; 0x50
    de52:	4b12      	ldr	r3, [pc, #72]	; (de9c <__sinit+0x58>)
    de54:	4a12      	ldr	r2, [pc, #72]	; (dea0 <__sinit+0x5c>)
    de56:	681b      	ldr	r3, [r3, #0]
    de58:	6282      	str	r2, [r0, #40]	; 0x28
    de5a:	4298      	cmp	r0, r3
    de5c:	bf04      	itt	eq
    de5e:	2301      	moveq	r3, #1
    de60:	6183      	streq	r3, [r0, #24]
    de62:	f000 f81f 	bl	dea4 <__sfp>
    de66:	6060      	str	r0, [r4, #4]
    de68:	4620      	mov	r0, r4
    de6a:	f000 f81b 	bl	dea4 <__sfp>
    de6e:	60a0      	str	r0, [r4, #8]
    de70:	4620      	mov	r0, r4
    de72:	f000 f817 	bl	dea4 <__sfp>
    de76:	2200      	movs	r2, #0
    de78:	60e0      	str	r0, [r4, #12]
    de7a:	2104      	movs	r1, #4
    de7c:	6860      	ldr	r0, [r4, #4]
    de7e:	f7ff ffa7 	bl	ddd0 <std.isra.0>
    de82:	2201      	movs	r2, #1
    de84:	2109      	movs	r1, #9
    de86:	68a0      	ldr	r0, [r4, #8]
    de88:	f7ff ffa2 	bl	ddd0 <std.isra.0>
    de8c:	2202      	movs	r2, #2
    de8e:	2112      	movs	r1, #18
    de90:	68e0      	ldr	r0, [r4, #12]
    de92:	f7ff ff9d 	bl	ddd0 <std.isra.0>
    de96:	2301      	movs	r3, #1
    de98:	61a3      	str	r3, [r4, #24]
    de9a:	bd10      	pop	{r4, pc}
    de9c:	0000e660 	.word	0x0000e660
    dea0:	0000ddc5 	.word	0x0000ddc5

0000dea4 <__sfp>:
    dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dea6:	4b1c      	ldr	r3, [pc, #112]	; (df18 <__sfp+0x74>)
    dea8:	681e      	ldr	r6, [r3, #0]
    deaa:	69b3      	ldr	r3, [r6, #24]
    deac:	4607      	mov	r7, r0
    deae:	b913      	cbnz	r3, deb6 <__sfp+0x12>
    deb0:	4630      	mov	r0, r6
    deb2:	f7ff ffc7 	bl	de44 <__sinit>
    deb6:	3648      	adds	r6, #72	; 0x48
    deb8:	68b4      	ldr	r4, [r6, #8]
    deba:	6873      	ldr	r3, [r6, #4]
    debc:	3b01      	subs	r3, #1
    debe:	d503      	bpl.n	dec8 <__sfp+0x24>
    dec0:	6833      	ldr	r3, [r6, #0]
    dec2:	b133      	cbz	r3, ded2 <__sfp+0x2e>
    dec4:	6836      	ldr	r6, [r6, #0]
    dec6:	e7f7      	b.n	deb8 <__sfp+0x14>
    dec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    decc:	b16d      	cbz	r5, deea <__sfp+0x46>
    dece:	3468      	adds	r4, #104	; 0x68
    ded0:	e7f4      	b.n	debc <__sfp+0x18>
    ded2:	2104      	movs	r1, #4
    ded4:	4638      	mov	r0, r7
    ded6:	f7ff ff9f 	bl	de18 <__sfmoreglue>
    deda:	6030      	str	r0, [r6, #0]
    dedc:	2800      	cmp	r0, #0
    dede:	d1f1      	bne.n	dec4 <__sfp+0x20>
    dee0:	230c      	movs	r3, #12
    dee2:	603b      	str	r3, [r7, #0]
    dee4:	4604      	mov	r4, r0
    dee6:	4620      	mov	r0, r4
    dee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    deee:	81e3      	strh	r3, [r4, #14]
    def0:	2301      	movs	r3, #1
    def2:	81a3      	strh	r3, [r4, #12]
    def4:	6665      	str	r5, [r4, #100]	; 0x64
    def6:	6025      	str	r5, [r4, #0]
    def8:	60a5      	str	r5, [r4, #8]
    defa:	6065      	str	r5, [r4, #4]
    defc:	6125      	str	r5, [r4, #16]
    defe:	6165      	str	r5, [r4, #20]
    df00:	61a5      	str	r5, [r4, #24]
    df02:	2208      	movs	r2, #8
    df04:	4629      	mov	r1, r5
    df06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    df0a:	f7fe ff2d 	bl	cd68 <memset>
    df0e:	6365      	str	r5, [r4, #52]	; 0x34
    df10:	63a5      	str	r5, [r4, #56]	; 0x38
    df12:	64a5      	str	r5, [r4, #72]	; 0x48
    df14:	64e5      	str	r5, [r4, #76]	; 0x4c
    df16:	e7e6      	b.n	dee6 <__sfp+0x42>
    df18:	0000e660 	.word	0x0000e660

0000df1c <_fwalk_reent>:
    df1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df20:	4680      	mov	r8, r0
    df22:	4689      	mov	r9, r1
    df24:	f100 0448 	add.w	r4, r0, #72	; 0x48
    df28:	2600      	movs	r6, #0
    df2a:	b914      	cbnz	r4, df32 <_fwalk_reent+0x16>
    df2c:	4630      	mov	r0, r6
    df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df32:	68a5      	ldr	r5, [r4, #8]
    df34:	6867      	ldr	r7, [r4, #4]
    df36:	3f01      	subs	r7, #1
    df38:	d501      	bpl.n	df3e <_fwalk_reent+0x22>
    df3a:	6824      	ldr	r4, [r4, #0]
    df3c:	e7f5      	b.n	df2a <_fwalk_reent+0xe>
    df3e:	89ab      	ldrh	r3, [r5, #12]
    df40:	2b01      	cmp	r3, #1
    df42:	d907      	bls.n	df54 <_fwalk_reent+0x38>
    df44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    df48:	3301      	adds	r3, #1
    df4a:	d003      	beq.n	df54 <_fwalk_reent+0x38>
    df4c:	4629      	mov	r1, r5
    df4e:	4640      	mov	r0, r8
    df50:	47c8      	blx	r9
    df52:	4306      	orrs	r6, r0
    df54:	3568      	adds	r5, #104	; 0x68
    df56:	e7ee      	b.n	df36 <_fwalk_reent+0x1a>

0000df58 <__swhatbuf_r>:
    df58:	b570      	push	{r4, r5, r6, lr}
    df5a:	460e      	mov	r6, r1
    df5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    df60:	2900      	cmp	r1, #0
    df62:	b090      	sub	sp, #64	; 0x40
    df64:	4614      	mov	r4, r2
    df66:	461d      	mov	r5, r3
    df68:	da07      	bge.n	df7a <__swhatbuf_r+0x22>
    df6a:	2300      	movs	r3, #0
    df6c:	602b      	str	r3, [r5, #0]
    df6e:	89b3      	ldrh	r3, [r6, #12]
    df70:	061a      	lsls	r2, r3, #24
    df72:	d410      	bmi.n	df96 <__swhatbuf_r+0x3e>
    df74:	f44f 6380 	mov.w	r3, #1024	; 0x400
    df78:	e00e      	b.n	df98 <__swhatbuf_r+0x40>
    df7a:	aa01      	add	r2, sp, #4
    df7c:	f000 f908 	bl	e190 <_fstat_r>
    df80:	2800      	cmp	r0, #0
    df82:	dbf2      	blt.n	df6a <__swhatbuf_r+0x12>
    df84:	9a02      	ldr	r2, [sp, #8]
    df86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    df8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    df8e:	425a      	negs	r2, r3
    df90:	415a      	adcs	r2, r3
    df92:	602a      	str	r2, [r5, #0]
    df94:	e7ee      	b.n	df74 <__swhatbuf_r+0x1c>
    df96:	2340      	movs	r3, #64	; 0x40
    df98:	2000      	movs	r0, #0
    df9a:	6023      	str	r3, [r4, #0]
    df9c:	b010      	add	sp, #64	; 0x40
    df9e:	bd70      	pop	{r4, r5, r6, pc}

0000dfa0 <__smakebuf_r>:
    dfa0:	898b      	ldrh	r3, [r1, #12]
    dfa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dfa4:	079d      	lsls	r5, r3, #30
    dfa6:	4606      	mov	r6, r0
    dfa8:	460c      	mov	r4, r1
    dfaa:	d507      	bpl.n	dfbc <__smakebuf_r+0x1c>
    dfac:	f104 0347 	add.w	r3, r4, #71	; 0x47
    dfb0:	6023      	str	r3, [r4, #0]
    dfb2:	6123      	str	r3, [r4, #16]
    dfb4:	2301      	movs	r3, #1
    dfb6:	6163      	str	r3, [r4, #20]
    dfb8:	b002      	add	sp, #8
    dfba:	bd70      	pop	{r4, r5, r6, pc}
    dfbc:	ab01      	add	r3, sp, #4
    dfbe:	466a      	mov	r2, sp
    dfc0:	f7ff ffca 	bl	df58 <__swhatbuf_r>
    dfc4:	9900      	ldr	r1, [sp, #0]
    dfc6:	4605      	mov	r5, r0
    dfc8:	4630      	mov	r0, r6
    dfca:	f7fe ff23 	bl	ce14 <_malloc_r>
    dfce:	b948      	cbnz	r0, dfe4 <__smakebuf_r+0x44>
    dfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dfd4:	059a      	lsls	r2, r3, #22
    dfd6:	d4ef      	bmi.n	dfb8 <__smakebuf_r+0x18>
    dfd8:	f023 0303 	bic.w	r3, r3, #3
    dfdc:	f043 0302 	orr.w	r3, r3, #2
    dfe0:	81a3      	strh	r3, [r4, #12]
    dfe2:	e7e3      	b.n	dfac <__smakebuf_r+0xc>
    dfe4:	4b0d      	ldr	r3, [pc, #52]	; (e01c <__smakebuf_r+0x7c>)
    dfe6:	62b3      	str	r3, [r6, #40]	; 0x28
    dfe8:	89a3      	ldrh	r3, [r4, #12]
    dfea:	6020      	str	r0, [r4, #0]
    dfec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dff0:	81a3      	strh	r3, [r4, #12]
    dff2:	9b00      	ldr	r3, [sp, #0]
    dff4:	6163      	str	r3, [r4, #20]
    dff6:	9b01      	ldr	r3, [sp, #4]
    dff8:	6120      	str	r0, [r4, #16]
    dffa:	b15b      	cbz	r3, e014 <__smakebuf_r+0x74>
    dffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e000:	4630      	mov	r0, r6
    e002:	f000 f8d7 	bl	e1b4 <_isatty_r>
    e006:	b128      	cbz	r0, e014 <__smakebuf_r+0x74>
    e008:	89a3      	ldrh	r3, [r4, #12]
    e00a:	f023 0303 	bic.w	r3, r3, #3
    e00e:	f043 0301 	orr.w	r3, r3, #1
    e012:	81a3      	strh	r3, [r4, #12]
    e014:	89a3      	ldrh	r3, [r4, #12]
    e016:	431d      	orrs	r5, r3
    e018:	81a5      	strh	r5, [r4, #12]
    e01a:	e7cd      	b.n	dfb8 <__smakebuf_r+0x18>
    e01c:	0000ddc5 	.word	0x0000ddc5

0000e020 <memchr>:
    e020:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e024:	2a10      	cmp	r2, #16
    e026:	db2b      	blt.n	e080 <memchr+0x60>
    e028:	f010 0f07 	tst.w	r0, #7
    e02c:	d008      	beq.n	e040 <memchr+0x20>
    e02e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e032:	3a01      	subs	r2, #1
    e034:	428b      	cmp	r3, r1
    e036:	d02d      	beq.n	e094 <memchr+0x74>
    e038:	f010 0f07 	tst.w	r0, #7
    e03c:	b342      	cbz	r2, e090 <memchr+0x70>
    e03e:	d1f6      	bne.n	e02e <memchr+0xe>
    e040:	b4f0      	push	{r4, r5, r6, r7}
    e042:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e046:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e04a:	f022 0407 	bic.w	r4, r2, #7
    e04e:	f07f 0700 	mvns.w	r7, #0
    e052:	2300      	movs	r3, #0
    e054:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e058:	3c08      	subs	r4, #8
    e05a:	ea85 0501 	eor.w	r5, r5, r1
    e05e:	ea86 0601 	eor.w	r6, r6, r1
    e062:	fa85 f547 	uadd8	r5, r5, r7
    e066:	faa3 f587 	sel	r5, r3, r7
    e06a:	fa86 f647 	uadd8	r6, r6, r7
    e06e:	faa5 f687 	sel	r6, r5, r7
    e072:	b98e      	cbnz	r6, e098 <memchr+0x78>
    e074:	d1ee      	bne.n	e054 <memchr+0x34>
    e076:	bcf0      	pop	{r4, r5, r6, r7}
    e078:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e07c:	f002 0207 	and.w	r2, r2, #7
    e080:	b132      	cbz	r2, e090 <memchr+0x70>
    e082:	f810 3b01 	ldrb.w	r3, [r0], #1
    e086:	3a01      	subs	r2, #1
    e088:	ea83 0301 	eor.w	r3, r3, r1
    e08c:	b113      	cbz	r3, e094 <memchr+0x74>
    e08e:	d1f8      	bne.n	e082 <memchr+0x62>
    e090:	2000      	movs	r0, #0
    e092:	4770      	bx	lr
    e094:	3801      	subs	r0, #1
    e096:	4770      	bx	lr
    e098:	2d00      	cmp	r5, #0
    e09a:	bf06      	itte	eq
    e09c:	4635      	moveq	r5, r6
    e09e:	3803      	subeq	r0, #3
    e0a0:	3807      	subne	r0, #7
    e0a2:	f015 0f01 	tst.w	r5, #1
    e0a6:	d107      	bne.n	e0b8 <memchr+0x98>
    e0a8:	3001      	adds	r0, #1
    e0aa:	f415 7f80 	tst.w	r5, #256	; 0x100
    e0ae:	bf02      	ittt	eq
    e0b0:	3001      	addeq	r0, #1
    e0b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e0b6:	3001      	addeq	r0, #1
    e0b8:	bcf0      	pop	{r4, r5, r6, r7}
    e0ba:	3801      	subs	r0, #1
    e0bc:	4770      	bx	lr
    e0be:	bf00      	nop

0000e0c0 <__malloc_lock>:
    e0c0:	4770      	bx	lr

0000e0c2 <__malloc_unlock>:
    e0c2:	4770      	bx	lr

0000e0c4 <__sread>:
    e0c4:	b510      	push	{r4, lr}
    e0c6:	460c      	mov	r4, r1
    e0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e0cc:	f000 f894 	bl	e1f8 <_read_r>
    e0d0:	2800      	cmp	r0, #0
    e0d2:	bfab      	itete	ge
    e0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    e0d6:	89a3      	ldrhlt	r3, [r4, #12]
    e0d8:	181b      	addge	r3, r3, r0
    e0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    e0de:	bfac      	ite	ge
    e0e0:	6563      	strge	r3, [r4, #84]	; 0x54
    e0e2:	81a3      	strhlt	r3, [r4, #12]
    e0e4:	bd10      	pop	{r4, pc}

0000e0e6 <__swrite>:
    e0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0ea:	461f      	mov	r7, r3
    e0ec:	898b      	ldrh	r3, [r1, #12]
    e0ee:	05db      	lsls	r3, r3, #23
    e0f0:	4605      	mov	r5, r0
    e0f2:	460c      	mov	r4, r1
    e0f4:	4616      	mov	r6, r2
    e0f6:	d505      	bpl.n	e104 <__swrite+0x1e>
    e0f8:	2302      	movs	r3, #2
    e0fa:	2200      	movs	r2, #0
    e0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e100:	f000 f868 	bl	e1d4 <_lseek_r>
    e104:	89a3      	ldrh	r3, [r4, #12]
    e106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e10e:	81a3      	strh	r3, [r4, #12]
    e110:	4632      	mov	r2, r6
    e112:	463b      	mov	r3, r7
    e114:	4628      	mov	r0, r5
    e116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e11a:	f000 b817 	b.w	e14c <_write_r>

0000e11e <__sseek>:
    e11e:	b510      	push	{r4, lr}
    e120:	460c      	mov	r4, r1
    e122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e126:	f000 f855 	bl	e1d4 <_lseek_r>
    e12a:	1c43      	adds	r3, r0, #1
    e12c:	89a3      	ldrh	r3, [r4, #12]
    e12e:	bf15      	itete	ne
    e130:	6560      	strne	r0, [r4, #84]	; 0x54
    e132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    e136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    e13a:	81a3      	strheq	r3, [r4, #12]
    e13c:	bf18      	it	ne
    e13e:	81a3      	strhne	r3, [r4, #12]
    e140:	bd10      	pop	{r4, pc}

0000e142 <__sclose>:
    e142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    e146:	f000 b813 	b.w	e170 <_close_r>
	...

0000e14c <_write_r>:
    e14c:	b538      	push	{r3, r4, r5, lr}
    e14e:	4c07      	ldr	r4, [pc, #28]	; (e16c <_write_r+0x20>)
    e150:	4605      	mov	r5, r0
    e152:	4608      	mov	r0, r1
    e154:	4611      	mov	r1, r2
    e156:	2200      	movs	r2, #0
    e158:	6022      	str	r2, [r4, #0]
    e15a:	461a      	mov	r2, r3
    e15c:	f7fc f974 	bl	a448 <_write>
    e160:	1c43      	adds	r3, r0, #1
    e162:	d102      	bne.n	e16a <_write_r+0x1e>
    e164:	6823      	ldr	r3, [r4, #0]
    e166:	b103      	cbz	r3, e16a <_write_r+0x1e>
    e168:	602b      	str	r3, [r5, #0]
    e16a:	bd38      	pop	{r3, r4, r5, pc}
    e16c:	20016228 	.word	0x20016228

0000e170 <_close_r>:
    e170:	b538      	push	{r3, r4, r5, lr}
    e172:	4c06      	ldr	r4, [pc, #24]	; (e18c <_close_r+0x1c>)
    e174:	2300      	movs	r3, #0
    e176:	4605      	mov	r5, r0
    e178:	4608      	mov	r0, r1
    e17a:	6023      	str	r3, [r4, #0]
    e17c:	f7f3 f9fc 	bl	1578 <_close>
    e180:	1c43      	adds	r3, r0, #1
    e182:	d102      	bne.n	e18a <_close_r+0x1a>
    e184:	6823      	ldr	r3, [r4, #0]
    e186:	b103      	cbz	r3, e18a <_close_r+0x1a>
    e188:	602b      	str	r3, [r5, #0]
    e18a:	bd38      	pop	{r3, r4, r5, pc}
    e18c:	20016228 	.word	0x20016228

0000e190 <_fstat_r>:
    e190:	b538      	push	{r3, r4, r5, lr}
    e192:	4c07      	ldr	r4, [pc, #28]	; (e1b0 <_fstat_r+0x20>)
    e194:	2300      	movs	r3, #0
    e196:	4605      	mov	r5, r0
    e198:	4608      	mov	r0, r1
    e19a:	4611      	mov	r1, r2
    e19c:	6023      	str	r3, [r4, #0]
    e19e:	f7f3 f9ee 	bl	157e <_fstat>
    e1a2:	1c43      	adds	r3, r0, #1
    e1a4:	d102      	bne.n	e1ac <_fstat_r+0x1c>
    e1a6:	6823      	ldr	r3, [r4, #0]
    e1a8:	b103      	cbz	r3, e1ac <_fstat_r+0x1c>
    e1aa:	602b      	str	r3, [r5, #0]
    e1ac:	bd38      	pop	{r3, r4, r5, pc}
    e1ae:	bf00      	nop
    e1b0:	20016228 	.word	0x20016228

0000e1b4 <_isatty_r>:
    e1b4:	b538      	push	{r3, r4, r5, lr}
    e1b6:	4c06      	ldr	r4, [pc, #24]	; (e1d0 <_isatty_r+0x1c>)
    e1b8:	2300      	movs	r3, #0
    e1ba:	4605      	mov	r5, r0
    e1bc:	4608      	mov	r0, r1
    e1be:	6023      	str	r3, [r4, #0]
    e1c0:	f7f3 f9e2 	bl	1588 <_isatty>
    e1c4:	1c43      	adds	r3, r0, #1
    e1c6:	d102      	bne.n	e1ce <_isatty_r+0x1a>
    e1c8:	6823      	ldr	r3, [r4, #0]
    e1ca:	b103      	cbz	r3, e1ce <_isatty_r+0x1a>
    e1cc:	602b      	str	r3, [r5, #0]
    e1ce:	bd38      	pop	{r3, r4, r5, pc}
    e1d0:	20016228 	.word	0x20016228

0000e1d4 <_lseek_r>:
    e1d4:	b538      	push	{r3, r4, r5, lr}
    e1d6:	4c07      	ldr	r4, [pc, #28]	; (e1f4 <_lseek_r+0x20>)
    e1d8:	4605      	mov	r5, r0
    e1da:	4608      	mov	r0, r1
    e1dc:	4611      	mov	r1, r2
    e1de:	2200      	movs	r2, #0
    e1e0:	6022      	str	r2, [r4, #0]
    e1e2:	461a      	mov	r2, r3
    e1e4:	f7f3 f9d2 	bl	158c <_lseek>
    e1e8:	1c43      	adds	r3, r0, #1
    e1ea:	d102      	bne.n	e1f2 <_lseek_r+0x1e>
    e1ec:	6823      	ldr	r3, [r4, #0]
    e1ee:	b103      	cbz	r3, e1f2 <_lseek_r+0x1e>
    e1f0:	602b      	str	r3, [r5, #0]
    e1f2:	bd38      	pop	{r3, r4, r5, pc}
    e1f4:	20016228 	.word	0x20016228

0000e1f8 <_read_r>:
    e1f8:	b538      	push	{r3, r4, r5, lr}
    e1fa:	4c07      	ldr	r4, [pc, #28]	; (e218 <_read_r+0x20>)
    e1fc:	4605      	mov	r5, r0
    e1fe:	4608      	mov	r0, r1
    e200:	4611      	mov	r1, r2
    e202:	2200      	movs	r2, #0
    e204:	6022      	str	r2, [r4, #0]
    e206:	461a      	mov	r2, r3
    e208:	f7fc f90c 	bl	a424 <_read>
    e20c:	1c43      	adds	r3, r0, #1
    e20e:	d102      	bne.n	e216 <_read_r+0x1e>
    e210:	6823      	ldr	r3, [r4, #0]
    e212:	b103      	cbz	r3, e216 <_read_r+0x1e>
    e214:	602b      	str	r3, [r5, #0]
    e216:	bd38      	pop	{r3, r4, r5, pc}
    e218:	20016228 	.word	0x20016228
    e21c:	76636572 	.word	0x76636572
    e220:	7325203a 	.word	0x7325203a
    e224:	64252820 	.word	0x64252820
    e228:	202c0a29 	.word	0x202c0a29
    e22c:	626d754e 	.word	0x626d754e
    e230:	6f207265 	.word	0x6f207265
    e234:	79622066 	.word	0x79622066
    e238:	20736574 	.word	0x20736574
    e23c:	65636572 	.word	0x65636572
    e240:	64657669 	.word	0x64657669
    e244:	6425203a 	.word	0x6425203a
    e248:	0000000a 	.word	0x0000000a
    e24c:	652f2e2e 	.word	0x652f2e2e
    e250:	72656874 	.word	0x72656874
    e254:	5f74656e 	.word	0x5f74656e
    e258:	2f796870 	.word	0x2f796870
    e25c:	65687465 	.word	0x65687465
    e260:	74656e72 	.word	0x74656e72
    e264:	7968705f 	.word	0x7968705f
    e268:	0000632e 	.word	0x0000632e
    e26c:	2e323931 	.word	0x2e323931
    e270:	2e383631 	.word	0x2e383631
    e274:	30312e32 	.word	0x30312e32
    e278:	00000030 	.word	0x00000030
    e27c:	2e353532 	.word	0x2e353532
    e280:	2e353532 	.word	0x2e353532
    e284:	2e353532 	.word	0x2e353532
    e288:	00000030 	.word	0x00000030
    e28c:	2e323931 	.word	0x2e323931
    e290:	2e383631 	.word	0x2e383631
    e294:	00312e32 	.word	0x00312e32
    e298:	682f2e2e 	.word	0x682f2e2e
    e29c:	732f6c61 	.word	0x732f6c61
    e2a0:	682f6372 	.word	0x682f6372
    e2a4:	695f6c61 	.word	0x695f6c61
    e2a8:	00632e6f 	.word	0x00632e6f
    e2ac:	682f2e2e 	.word	0x682f2e2e
    e2b0:	732f6c61 	.word	0x732f6c61
    e2b4:	682f6372 	.word	0x682f6372
    e2b8:	6d5f6c61 	.word	0x6d5f6c61
    e2bc:	615f6361 	.word	0x615f6361
    e2c0:	636e7973 	.word	0x636e7973
    e2c4:	0000632e 	.word	0x0000632e
    e2c8:	682f2e2e 	.word	0x682f2e2e
    e2cc:	732f6c61 	.word	0x732f6c61
    e2d0:	682f6372 	.word	0x682f6372
    e2d4:	705f6c61 	.word	0x705f6c61
    e2d8:	632e6d77 	.word	0x632e6d77
    e2dc:	00000000 	.word	0x00000000
    e2e0:	682f2e2e 	.word	0x682f2e2e
    e2e4:	732f6c61 	.word	0x732f6c61
    e2e8:	682f6372 	.word	0x682f6372
    e2ec:	755f6c61 	.word	0x755f6c61
    e2f0:	74726173 	.word	0x74726173
    e2f4:	6e79735f 	.word	0x6e79735f
    e2f8:	00632e63 	.word	0x00632e63

0000e2fc <_map>:
    e2fc:	00000000 00000060 00000007 00000027     ....`.......'...
    e30c:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    e31c:	632e6369 00000000 682f2e2e 672f6c70     ic.c....../hpl/g
    e32c:	2f63616d 5f6c7068 63616d67 0000632e     mac/hpl_gmac.c..
    e33c:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    e34c:	43000000 43000400 43000800 43000c00     ...C...C...C...C

0000e35c <_usarts>:
    e35c:	00000002 40100004 00030000 00700002     .......@......p.
    e36c:	0000fcb9 00000000                       ........

0000e374 <_i2cms>:
	...

0000e38c <_i2css>:
	...

0000e39c <sercomspi_regs>:
	...
    e3b0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    e3c0:	65735f6c 6d6f6372 0000632e 40003800     l_sercom.c...8.@
    e3d0:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    e3e0:	42001800 43001400 43001800 682f2e2e     ...B...C...C../h
    e3f0:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..

0000e400 <err_to_errno_table>:
    e400:	00000000 0000000c 00000069 0000000b     ........i.......
    e410:	00000071 00000073 00000016 0000000b     q...s...........
    e420:	00000062 00000072 00000067 00000068     b...r...g...h...
    e430:	0000006b 0000006b 00000005 ffffffff     k...k...........
    e440:	69706374 68745f70 64616572 00000000     tcpip_thread....

0000e450 <ip_addr_broadcast>:
    e450:	ffffffff                                ....

0000e454 <ip_addr_any>:
    e454:	00000000                                ....

0000e458 <memp_sizes>:
    e458:	00980020 0010001c 00180020 002c0010      ....... .....,.
    e468:	00140014 00100010 000005fc              ............

0000e474 <memp_num>:
    e474:	00050004 00100008 000f0005 00040002     ................
    e484:	00080008 00100005 00000010              ............

0000e490 <tcp_pcb_lists>:
    e490:	200161f8 20016200 200161f0 20016204     .a. .b. .a. .b. 

0000e4a0 <tcp_persist_backoff>:
    e4a0:	180c0603 00786030                       ....0`x.

0000e4a8 <tcp_backoff>:
    e4a8:	04030201 07070605 07070707 00000007     ................

0000e4b8 <tcp_state_str>:
    e4b8:	0000e4e4 0000e4ec 0000e4f4 0000e500     ................
    e4c8:	0000e50c 0000e518 0000e524 0000e530     ........$...0...
    e4d8:	0000e53c 0000e544 0000e550 534f4c43     <...D...P...CLOS
    e4e8:	00004445 5453494c 00004e45 5f4e5953     ED..LISTEN..SYN_
    e4f8:	544e4553 00000000 5f4e5953 44564352     SENT....SYN_RCVD
    e508:	00000000 41545345 53494c42 00444548     ....ESTABLISHED.
    e518:	5f4e4946 54494157 0000315f 5f4e4946     FIN_WAIT_1..FIN_
    e528:	54494157 0000325f 534f4c43 41575f45     WAIT_2..CLOSE_WA
    e538:	00005449 534f4c43 00474e49 5453414c     IT..CLOSING.LAST
    e548:	4b43415f 00000000 454d4954 4941575f     _ACK....TIME_WAI
    e558:	00000054                                T...

0000e55c <ethbroadcast>:
    e55c:	ffffffff 0000ffff                       ........

0000e564 <ethzero>:
	...
    e56c:	00206425 415f5049 20524444 3a202020     %d .IP_ADDR    :
    e57c:	0d732520 0000000a 5f54454e 4b53414d      %s.....NET_MASK
    e58c:	3a202020 0d732520 0000000a 45544147        : %s.....GATE
    e59c:	5f594157 3a205049 0d732520 0000000a     WAY_IP : %s.....
    e5ac:	65687445 74656e72 7361545f 0000006b     Ethernet_Task...
    e5bc:	6e69614d 7361545f 0000006b 75736e49     Main_Task...Insu
    e5cc:	63696666 746e6569 4f545220 65682053     fficient RTOS he
    e5dc:	61207061 6c696176 656c6261 206f7420     ap available to 
    e5ec:	61657263 74206574 69206568 20656c64     create the idle 
    e5fc:	7420726f 72656d69 65616420 206e6f6d     or timer daemon 
    e60c:	6b736174 00000073 454c4449 00000000     tasks...IDLE....
    e61c:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    e62c:	20726d54 00637653 00000000 00007620     Tmr Svc..... v..
    e63c:	74450a0d 6e726568 6c207465 206b6e69     ..Ethernet link 
    e64c:	0a0d7075 0000000d 43414d47 00000000     up......GMAC....
    e65c:	0064654c                                Led.

0000e660 <_global_impure_ptr>:
    e660:	20000058 2b302d23 6c680020 6665004c     X.. #-0+ .hlL.ef
    e670:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    e680:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    e690:	64636261 53006665 65636375 4e007373     abcdef.Success.N
    e6a0:	6f20746f 72656e77 206f4e00 68637573     ot owner.No such
    e6b0:	6c696620 726f2065 72696420 6f746365      file or directo
    e6c0:	4e007972 7573206f 70206863 65636f72     ry.No such proce
    e6d0:	49007373 7265746e 74707572 73206465     ss.Interrupted s
    e6e0:	65747379 6163206d 49006c6c 65204f2f     ystem call.I/O e
    e6f0:	726f7272 206f4e00 68637573 76656420     rror.No such dev
    e700:	20656369 6120726f 65726464 41007373     ice or address.A
    e710:	6c206772 20747369 206f6f74 676e6f6c     rg list too long
    e720:	65784500 6f662063 74616d72 72726520     .Exec format err
    e730:	5300726f 656b636f 6c612074 64616572     or.Socket alread
    e740:	6f632079 63656e6e 00646574 20646142     y connected.Bad 
    e750:	656c6966 6d756e20 00726562 63206f4e     file number.No c
    e760:	646c6968 006e6572 74736544 74616e69     hildren.Destinat
    e770:	206e6f69 72646461 20737365 75716572     ion address requ
    e780:	64657269 206f4e00 65726f6d 6f727020     ired.No more pro
    e790:	73736563 4e007365 6520746f 67756f6e     cesses.Not enoug
    e7a0:	70732068 00656361 6d726550 69737369     h space.Permissi
    e7b0:	64206e6f 65696e65 61420064 64612064     on denied.Bad ad
    e7c0:	73657264 65440073 65636976 20726f20     dress.Device or 
    e7d0:	6f736572 65637275 73756220 69460079     resource busy.Fi
    e7e0:	6520656c 74736978 72430073 2d73736f     le exists.Cross-
    e7f0:	69766564 6c206563 006b6e69 73206f4e     device link.No s
    e800:	20686375 69766564 4e006563 6120746f     uch device.Not a
    e810:	72696420 6f746365 48007972 2074736f      directory.Host 
    e820:	64207369 006e776f 6e6e6f43 69746365     is down.Connecti
    e830:	61206e6f 6165726c 69207964 7270206e     on already in pr
    e840:	6572676f 49007373 20612073 65726964     ogress.Is a dire
    e850:	726f7463 6e490079 696c6176 72612064     ctory.Invalid ar
    e860:	656d7567 4e00746e 6f777465 69206b72     gument.Network i
    e870:	7265746e 65636166 20736920 20746f6e     nterface is not 
    e880:	666e6f63 72756769 43006465 656e6e6f     configured.Conne
    e890:	6f697463 6261206e 6574726f 79622064     ction aborted by
    e8a0:	74656e20 6b726f77 6f6f5400 6e616d20      network.Too man
    e8b0:	706f2079 66206e65 73656c69 206e6920     y open files in 
    e8c0:	74737973 46006d65 20656c69 63736564     system.File desc
    e8d0:	74706972 7620726f 65756c61 6f6f7420     riptor value too
    e8e0:	72616c20 4e006567 6120746f 61686320      large.Not a cha
    e8f0:	74636172 64207265 63697665 65540065     racter device.Te
    e900:	66207478 20656c69 79737562 6c694600     xt file busy.Fil
    e910:	6f742065 616c206f 00656772 74736f48     e too large.Host
    e920:	20736920 65726e75 61686361 00656c62      is unreachable.
    e930:	73206f4e 65636170 66656c20 6e6f2074     No space left on
    e940:	76656420 00656369 20746f4e 70707573      device.Not supp
    e950:	6574726f 6c490064 6167656c 6573206c     orted.Illegal se
    e960:	52006b65 2d646165 796c6e6f 6c696620     ek.Read-only fil
    e970:	79732065 6d657473 6f6f5400 6e616d20     e system.Too man
    e980:	696c2079 00736b6e 6b6f7242 70206e65     y links.Broken p
    e990:	00657069 6874614d 74616d65 20736369     ipe.Mathematics 
    e9a0:	75677261 746e656d 74756f20 20666f20     argument out of 
    e9b0:	616d6f64 6f206e69 75662066 6974636e     domain of functi
    e9c0:	52006e6f 6c757365 6f742074 616c206f     on.Result too la
    e9d0:	00656772 6d206f4e 61737365 6f206567     rge.No message o
    e9e0:	65642066 65726973 79742064 49006570     f desired type.I
    e9f0:	746e6564 65696669 65722072 65766f6d     dentifier remove
    ea00:	6c490064 6167656c 7962206c 73206574     d.Illegal byte s
    ea10:	65757165 0065636e 64616544 6b636f6c     equence.Deadlock
    ea20:	74654e00 6b726f77 20736920 65726e75     .Network is unre
    ea30:	61686361 00656c62 6c206f4e 006b636f     achable.No lock.
    ea40:	20746f4e 74732061 6d616572 72745300     Not a stream.Str
    ea50:	206d6165 74636f69 6974206c 756f656d     eam ioctl timeou
    ea60:	6f4e0074 72747320 206d6165 6f736572     t.No stream reso
    ea70:	65637275 69560073 61757472 6963206c     urces.Virtual ci
    ea80:	69756372 73692074 6e6f6720 72500065     rcuit is gone.Pr
    ea90:	636f746f 65206c6f 726f7272 6b6e5500     otocol error.Unk
    eaa0:	6e776f6e 6f727020 6f636f74 754d006c     nown protocol.Mu
    eab0:	6869746c 6120706f 6d657474 64657470     ltihop attempted
    eac0:	64614200 73656d20 65676173 6e754600     .Bad message.Fun
    ead0:	6f697463 6f6e206e 6d692074 6d656c70     ction not implem
    eae0:	65746e65 69440064 74636572 2079726f     ented.Directory 
    eaf0:	20746f6e 74706d65 69460079 6f20656c     not empty.File o
    eb00:	61702072 6e206874 20656d61 206f6f74     r path name too 
    eb10:	676e6f6c 6f6f5400 6e616d20 79732079     long.Too many sy
    eb20:	6c6f626d 6c206369 736b6e69 206f4e00     mbolic links.No 
    eb30:	66667562 73207265 65636170 61766120     buffer space ava
    eb40:	62616c69 4e00656c 6164206f 41006174     ilable.No data.A
    eb50:	65726464 66207373 6c696d61 6f6e2079     ddress family no
    eb60:	75732074 726f7070 20646574 70207962     t supported by p
    eb70:	6f746f72 206c6f63 696d6166 5000796c     rotocol family.P
    eb80:	6f746f72 206c6f63 6e6f7277 79742067     rotocol wrong ty
    eb90:	66206570 7320726f 656b636f 6f530074     pe for socket.So
    eba0:	74656b63 65706f20 69746172 6f206e6f     cket operation o
    ebb0:	6f6e206e 6f732d6e 74656b63 6f725000     n non-socket.Pro
    ebc0:	6f636f74 6f6e206c 76612074 616c6961     tocol not availa
    ebd0:	00656c62 6e6e6f43 69746365 72206e6f     ble.Connection r
    ebe0:	73756665 43006465 656e6e6f 6f697463     efused.Connectio
    ebf0:	6572206e 20746573 70207962 00726565     n reset by peer.
    ec00:	72646441 20737365 65726c61 20796461     Address already 
    ec10:	75206e69 41006573 65726464 6e207373     in use.Address n
    ec20:	6120746f 6c696176 656c6261 666f5300     ot available.Sof
    ec30:	72617774 61632065 64657375 6e6f6320     tware caused con
    ec40:	7463656e 206e6f69 726f6261 6f530074     nection abort.So
    ec50:	74656b63 20736920 20746f6e 6e6e6f63     cket is not conn
    ec60:	65746365 6f530064 74656b63 20736920     ected.Socket is 
    ec70:	65726c61 20796461 6e6e6f63 65746365     already connecte
    ec80:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
    ec90:	64656c65 61745300 6e206574 7220746f     eled.State not r
    eca0:	766f6365 62617265 5000656c 69766572     ecoverable.Previ
    ecb0:	2073756f 656e776f 69642072 4f006465     ous owner died.O
    ecc0:	61726570 6e6f6974 746f6e20 70757320     peration not sup
    ecd0:	74726f70 6f206465 6f73206e 74656b63     ported on socket
    ece0:	6c615600 74206575 6c206f6f 65677261     .Value too large
    ecf0:	726f6620 66656420 64656e69 74616420      for defined dat
    ed00:	79742061 4d006570 61737365 74206567     a type.Message t
    ed10:	6c206f6f 00676e6f 6e6e6f43 69746365     oo long.Connecti
    ed20:	74206e6f 64656d69 74756f20 00000000     on timed out....

0000ed30 <__sf_fake_stderr>:
	...

0000ed50 <__sf_fake_stdin>:
	...

0000ed70 <__sf_fake_stdout>:
	...

0000ed90 <_init>:
    ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed92:	bf00      	nop
    ed94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ed96:	bc08      	pop	{r3}
    ed98:	469e      	mov	lr, r3
    ed9a:	4770      	bx	lr

0000ed9c <__init_array_start>:
    ed9c:	00000289 	.word	0x00000289

0000eda0 <_fini>:
    eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eda2:	bf00      	nop
    eda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    eda6:	bc08      	pop	{r3}
    eda8:	469e      	mov	lr, r3
    edaa:	4770      	bx	lr

0000edac <__fini_array_start>:
    edac:	00000265 	.word	0x00000265
